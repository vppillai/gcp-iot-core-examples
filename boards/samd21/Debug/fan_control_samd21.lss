
fan_control_samd21.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00021fe0  00000000  00000000  00010000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     000003fc  20000000  00021fe0  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00002808  200003fc  000223dc  000403fc  2**2
                  ALLOC
  3 .stack        00002004  20002c04  00024be4  000403fc  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  000403fc  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  00040424  2**0
                  CONTENTS, READONLY
  6 .debug_info   000b2d77  00000000  00000000  0004047d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000e1fc  00000000  00000000  000f31f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0000f0d1  00000000  00000000  001013f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00002a80  00000000  00000000  001104c1  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 000026c8  00000000  00000000  00112f41  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00032473  00000000  00000000  00115609  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0003bcb3  00000000  00000000  00147a7c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000a7d9f  00000000  00000000  0018372f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  0000a624  00000000  00000000  0022b4d0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	08 4c 00 20 f9 f3 00 00 f1 f4 00 00 f1 f4 00 00     .L. ............
	...
      2c:	f1 f4 00 00 00 00 00 00 00 00 00 00 f1 f4 00 00     ................
      3c:	f1 f4 00 00 f1 f4 00 00 f1 f4 00 00 f1 f4 00 00     ................
      4c:	f1 f4 00 00 1d c4 00 00 f1 f4 00 00 f1 f4 00 00     ................
      5c:	3d 4e 00 00 f1 f4 00 00 e9 ce 00 00 01 cf 00 00     =N..............
      6c:	19 cf 00 00 31 cf 00 00 49 cf 00 00 61 cf 00 00     ....1...I...a...
      7c:	f1 f4 00 00 f1 f4 00 00 f1 f4 00 00 19 18 00 00     ................
      8c:	2d 18 00 00 41 18 00 00 55 18 00 00 69 18 00 00     -...A...U...i...
      9c:	f1 f4 00 00 f1 f4 00 00 f1 f4 00 00 f1 f4 00 00     ................
      ac:	f1 f4 00 00 00 00 00 00                             ........

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	200003fc 	.word	0x200003fc
      d4:	00000000 	.word	0x00000000
      d8:	00021fe0 	.word	0x00021fe0

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	20000400 	.word	0x20000400
     108:	00021fe0 	.word	0x00021fe0
     10c:	00021fe0 	.word	0x00021fe0
     110:	00000000 	.word	0x00000000

00000114 <cpu_irq_enter_critical>:
 */
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
     114:	b580      	push	{r7, lr}
     116:	b082      	sub	sp, #8
     118:	af00      	add	r7, sp, #0
	if (cpu_irq_critical_section_counter == 0) {
     11a:	4b10      	ldr	r3, [pc, #64]	; (15c <cpu_irq_enter_critical+0x48>)
     11c:	681b      	ldr	r3, [r3, #0]
     11e:	2b00      	cmp	r3, #0
     120:	d112      	bne.n	148 <cpu_irq_enter_critical+0x34>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
     122:	f3ef 8310 	mrs	r3, PRIMASK
     126:	607b      	str	r3, [r7, #4]
  return(result);
     128:	687b      	ldr	r3, [r7, #4]
		if (cpu_irq_is_enabled()) {
     12a:	2b00      	cmp	r3, #0
     12c:	d109      	bne.n	142 <cpu_irq_enter_critical+0x2e>
  __ASM volatile ("cpsid i" : : : "memory");
     12e:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
     130:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
     134:	4b0a      	ldr	r3, [pc, #40]	; (160 <cpu_irq_enter_critical+0x4c>)
     136:	2200      	movs	r2, #0
     138:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
     13a:	4b0a      	ldr	r3, [pc, #40]	; (164 <cpu_irq_enter_critical+0x50>)
     13c:	2201      	movs	r2, #1
     13e:	701a      	strb	r2, [r3, #0]
     140:	e002      	b.n	148 <cpu_irq_enter_critical+0x34>
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
     142:	4b08      	ldr	r3, [pc, #32]	; (164 <cpu_irq_enter_critical+0x50>)
     144:	2200      	movs	r2, #0
     146:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
     148:	4b04      	ldr	r3, [pc, #16]	; (15c <cpu_irq_enter_critical+0x48>)
     14a:	681b      	ldr	r3, [r3, #0]
     14c:	1c5a      	adds	r2, r3, #1
     14e:	4b03      	ldr	r3, [pc, #12]	; (15c <cpu_irq_enter_critical+0x48>)
     150:	601a      	str	r2, [r3, #0]
}
     152:	46c0      	nop			; (mov r8, r8)
     154:	46bd      	mov	sp, r7
     156:	b002      	add	sp, #8
     158:	bd80      	pop	{r7, pc}
     15a:	46c0      	nop			; (mov r8, r8)
     15c:	20000418 	.word	0x20000418
     160:	20000000 	.word	0x20000000
     164:	2000041c 	.word	0x2000041c

00000168 <cpu_irq_leave_critical>:

void cpu_irq_leave_critical(void)
{
     168:	b580      	push	{r7, lr}
     16a:	af00      	add	r7, sp, #0
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
     16c:	4b0b      	ldr	r3, [pc, #44]	; (19c <cpu_irq_leave_critical+0x34>)
     16e:	681b      	ldr	r3, [r3, #0]
     170:	1e5a      	subs	r2, r3, #1
     172:	4b0a      	ldr	r3, [pc, #40]	; (19c <cpu_irq_leave_critical+0x34>)
     174:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
     176:	4b09      	ldr	r3, [pc, #36]	; (19c <cpu_irq_leave_critical+0x34>)
     178:	681b      	ldr	r3, [r3, #0]
     17a:	2b00      	cmp	r3, #0
     17c:	d10a      	bne.n	194 <cpu_irq_leave_critical+0x2c>
     17e:	4b08      	ldr	r3, [pc, #32]	; (1a0 <cpu_irq_leave_critical+0x38>)
     180:	781b      	ldrb	r3, [r3, #0]
     182:	b2db      	uxtb	r3, r3
     184:	2b00      	cmp	r3, #0
     186:	d005      	beq.n	194 <cpu_irq_leave_critical+0x2c>
		cpu_irq_enable();
     188:	4b06      	ldr	r3, [pc, #24]	; (1a4 <cpu_irq_leave_critical+0x3c>)
     18a:	2201      	movs	r2, #1
     18c:	701a      	strb	r2, [r3, #0]
     18e:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
     192:	b662      	cpsie	i
	}
}
     194:	46c0      	nop			; (mov r8, r8)
     196:	46bd      	mov	sp, r7
     198:	bd80      	pop	{r7, pc}
     19a:	46c0      	nop			; (mov r8, r8)
     19c:	20000418 	.word	0x20000418
     1a0:	2000041c 	.word	0x2000041c
     1a4:	20000000 	.word	0x20000000

000001a8 <system_pinmux_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_pinmux_get_config_defaults(
		struct system_pinmux_config *const config)
{
     1a8:	b580      	push	{r7, lr}
     1aa:	b082      	sub	sp, #8
     1ac:	af00      	add	r7, sp, #0
     1ae:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
     1b0:	687b      	ldr	r3, [r7, #4]
     1b2:	2280      	movs	r2, #128	; 0x80
     1b4:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     1b6:	687b      	ldr	r3, [r7, #4]
     1b8:	2200      	movs	r2, #0
     1ba:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
     1bc:	687b      	ldr	r3, [r7, #4]
     1be:	2201      	movs	r2, #1
     1c0:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
     1c2:	687b      	ldr	r3, [r7, #4]
     1c4:	2200      	movs	r2, #0
     1c6:	70da      	strb	r2, [r3, #3]
}
     1c8:	46c0      	nop			; (mov r8, r8)
     1ca:	46bd      	mov	sp, r7
     1cc:	b002      	add	sp, #8
     1ce:	bd80      	pop	{r7, pc}

000001d0 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
     1d0:	b580      	push	{r7, lr}
     1d2:	b084      	sub	sp, #16
     1d4:	af00      	add	r7, sp, #0
     1d6:	0002      	movs	r2, r0
     1d8:	6039      	str	r1, [r7, #0]
     1da:	1dfb      	adds	r3, r7, #7
     1dc:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);
     1de:	230c      	movs	r3, #12
     1e0:	18fb      	adds	r3, r7, r3
     1e2:	0018      	movs	r0, r3
     1e4:	4b10      	ldr	r3, [pc, #64]	; (228 <port_pin_set_config+0x58>)
     1e6:	4798      	blx	r3

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
     1e8:	230c      	movs	r3, #12
     1ea:	18fb      	adds	r3, r7, r3
     1ec:	2280      	movs	r2, #128	; 0x80
     1ee:	701a      	strb	r2, [r3, #0]
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
     1f0:	683b      	ldr	r3, [r7, #0]
     1f2:	781a      	ldrb	r2, [r3, #0]
     1f4:	230c      	movs	r3, #12
     1f6:	18fb      	adds	r3, r7, r3
     1f8:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
     1fa:	683b      	ldr	r3, [r7, #0]
     1fc:	785a      	ldrb	r2, [r3, #1]
     1fe:	230c      	movs	r3, #12
     200:	18fb      	adds	r3, r7, r3
     202:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
     204:	683b      	ldr	r3, [r7, #0]
     206:	789a      	ldrb	r2, [r3, #2]
     208:	230c      	movs	r3, #12
     20a:	18fb      	adds	r3, r7, r3
     20c:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
     20e:	230c      	movs	r3, #12
     210:	18fa      	adds	r2, r7, r3
     212:	1dfb      	adds	r3, r7, #7
     214:	781b      	ldrb	r3, [r3, #0]
     216:	0011      	movs	r1, r2
     218:	0018      	movs	r0, r3
     21a:	4b04      	ldr	r3, [pc, #16]	; (22c <port_pin_set_config+0x5c>)
     21c:	4798      	blx	r3
}
     21e:	46c0      	nop			; (mov r8, r8)
     220:	46bd      	mov	sp, r7
     222:	b004      	add	sp, #16
     224:	bd80      	pop	{r7, pc}
     226:	46c0      	nop			; (mov r8, r8)
     228:	000001a9 	.word	0x000001a9
     22c:	000003a1 	.word	0x000003a1

00000230 <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
     230:	b580      	push	{r7, lr}
     232:	b084      	sub	sp, #16
     234:	af00      	add	r7, sp, #0
     236:	0002      	movs	r2, r0
     238:	1dfb      	adds	r3, r7, #7
     23a:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
     23c:	230f      	movs	r3, #15
     23e:	18fb      	adds	r3, r7, r3
     240:	1dfa      	adds	r2, r7, #7
     242:	7812      	ldrb	r2, [r2, #0]
     244:	09d2      	lsrs	r2, r2, #7
     246:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
     248:	230e      	movs	r3, #14
     24a:	18fb      	adds	r3, r7, r3
     24c:	1dfa      	adds	r2, r7, #7
     24e:	7812      	ldrb	r2, [r2, #0]
     250:	0952      	lsrs	r2, r2, #5
     252:	701a      	strb	r2, [r3, #0]

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
     254:	4b0d      	ldr	r3, [pc, #52]	; (28c <system_pinmux_get_group_from_gpio_pin+0x5c>)
     256:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
     258:	230f      	movs	r3, #15
     25a:	18fb      	adds	r3, r7, r3
     25c:	781b      	ldrb	r3, [r3, #0]
     25e:	2b00      	cmp	r3, #0
     260:	d10f      	bne.n	282 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
     262:	230f      	movs	r3, #15
     264:	18fb      	adds	r3, r7, r3
     266:	781b      	ldrb	r3, [r3, #0]
     268:	009b      	lsls	r3, r3, #2
     26a:	2210      	movs	r2, #16
     26c:	4694      	mov	ip, r2
     26e:	44bc      	add	ip, r7
     270:	4463      	add	r3, ip
     272:	3b08      	subs	r3, #8
     274:	681a      	ldr	r2, [r3, #0]
     276:	230e      	movs	r3, #14
     278:	18fb      	adds	r3, r7, r3
     27a:	781b      	ldrb	r3, [r3, #0]
     27c:	01db      	lsls	r3, r3, #7
     27e:	18d3      	adds	r3, r2, r3
     280:	e000      	b.n	284 <system_pinmux_get_group_from_gpio_pin+0x54>
	} else {
		Assert(false);
		return NULL;
     282:	2300      	movs	r3, #0
	}
}
     284:	0018      	movs	r0, r3
     286:	46bd      	mov	sp, r7
     288:	b004      	add	sp, #16
     28a:	bd80      	pop	{r7, pc}
     28c:	41004400 	.word	0x41004400

00000290 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
     290:	b580      	push	{r7, lr}
     292:	b088      	sub	sp, #32
     294:	af00      	add	r7, sp, #0
     296:	60f8      	str	r0, [r7, #12]
     298:	60b9      	str	r1, [r7, #8]
     29a:	607a      	str	r2, [r7, #4]
	Assert(port);
	Assert(config);

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;
     29c:	2300      	movs	r3, #0
     29e:	61fb      	str	r3, [r7, #28]

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
     2a0:	687b      	ldr	r3, [r7, #4]
     2a2:	78db      	ldrb	r3, [r3, #3]
     2a4:	2201      	movs	r2, #1
     2a6:	4053      	eors	r3, r2
     2a8:	b2db      	uxtb	r3, r3
     2aa:	2b00      	cmp	r3, #0
     2ac:	d035      	beq.n	31a <_system_pinmux_config+0x8a>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
     2ae:	687b      	ldr	r3, [r7, #4]
     2b0:	781b      	ldrb	r3, [r3, #0]
     2b2:	2b80      	cmp	r3, #128	; 0x80
     2b4:	d00b      	beq.n	2ce <_system_pinmux_config+0x3e>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
     2b6:	69fb      	ldr	r3, [r7, #28]
     2b8:	2280      	movs	r2, #128	; 0x80
     2ba:	0252      	lsls	r2, r2, #9
     2bc:	4313      	orrs	r3, r2
     2be:	61fb      	str	r3, [r7, #28]
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
     2c0:	687b      	ldr	r3, [r7, #4]
     2c2:	781b      	ldrb	r3, [r3, #0]
     2c4:	061b      	lsls	r3, r3, #24
     2c6:	001a      	movs	r2, r3
     2c8:	69fb      	ldr	r3, [r7, #28]
     2ca:	4313      	orrs	r3, r2
     2cc:	61fb      	str	r3, [r7, #28]
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
     2ce:	687b      	ldr	r3, [r7, #4]
     2d0:	785b      	ldrb	r3, [r3, #1]
     2d2:	2b00      	cmp	r3, #0
     2d4:	d003      	beq.n	2de <_system_pinmux_config+0x4e>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
     2d6:	687b      	ldr	r3, [r7, #4]
     2d8:	785b      	ldrb	r3, [r3, #1]
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
     2da:	2b02      	cmp	r3, #2
     2dc:	d110      	bne.n	300 <_system_pinmux_config+0x70>
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;
     2de:	69fb      	ldr	r3, [r7, #28]
     2e0:	2280      	movs	r2, #128	; 0x80
     2e2:	0292      	lsls	r2, r2, #10
     2e4:	4313      	orrs	r3, r2
     2e6:	61fb      	str	r3, [r7, #28]

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
     2e8:	687b      	ldr	r3, [r7, #4]
     2ea:	789b      	ldrb	r3, [r3, #2]
     2ec:	2b00      	cmp	r3, #0
     2ee:	d004      	beq.n	2fa <_system_pinmux_config+0x6a>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
     2f0:	69fb      	ldr	r3, [r7, #28]
     2f2:	2280      	movs	r2, #128	; 0x80
     2f4:	02d2      	lsls	r2, r2, #11
     2f6:	4313      	orrs	r3, r2
     2f8:	61fb      	str	r3, [r7, #28]
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
     2fa:	68fb      	ldr	r3, [r7, #12]
     2fc:	68ba      	ldr	r2, [r7, #8]
     2fe:	605a      	str	r2, [r3, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
     300:	687b      	ldr	r3, [r7, #4]
     302:	785b      	ldrb	r3, [r3, #1]
     304:	2b01      	cmp	r3, #1
     306:	d003      	beq.n	310 <_system_pinmux_config+0x80>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
     308:	687b      	ldr	r3, [r7, #4]
     30a:	785b      	ldrb	r3, [r3, #1]
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
     30c:	2b02      	cmp	r3, #2
     30e:	d107      	bne.n	320 <_system_pinmux_config+0x90>
			/* Cannot use a pull-up if the output driver is enabled,
			 * if requested the input buffer can only sample the current
			 * output state */
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
     310:	69fb      	ldr	r3, [r7, #28]
     312:	4a22      	ldr	r2, [pc, #136]	; (39c <_system_pinmux_config+0x10c>)
     314:	4013      	ands	r3, r2
     316:	61fb      	str	r3, [r7, #28]
     318:	e002      	b.n	320 <_system_pinmux_config+0x90>
		}
	} else {
		port->DIRCLR.reg = pin_mask;
     31a:	68fb      	ldr	r3, [r7, #12]
     31c:	68ba      	ldr	r2, [r7, #8]
     31e:	605a      	str	r2, [r3, #4]
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
     320:	68bb      	ldr	r3, [r7, #8]
     322:	041b      	lsls	r3, r3, #16
     324:	0c1b      	lsrs	r3, r3, #16
     326:	61bb      	str	r3, [r7, #24]
	uint32_t upper_pin_mask = (pin_mask >> 16);
     328:	68bb      	ldr	r3, [r7, #8]
     32a:	0c1b      	lsrs	r3, r3, #16
     32c:	617b      	str	r3, [r7, #20]

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
     32e:	69ba      	ldr	r2, [r7, #24]
     330:	69fb      	ldr	r3, [r7, #28]
     332:	4313      	orrs	r3, r2
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
     334:	22a0      	movs	r2, #160	; 0xa0
     336:	05d2      	lsls	r2, r2, #23
     338:	431a      	orrs	r2, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
     33a:	68fb      	ldr	r3, [r7, #12]
     33c:	629a      	str	r2, [r3, #40]	; 0x28

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
     33e:	697a      	ldr	r2, [r7, #20]
     340:	69fb      	ldr	r3, [r7, #28]
     342:	4313      	orrs	r3, r2
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
     344:	22d0      	movs	r2, #208	; 0xd0
     346:	0612      	lsls	r2, r2, #24
     348:	431a      	orrs	r2, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
     34a:	68fb      	ldr	r3, [r7, #12]
     34c:	629a      	str	r2, [r3, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
     34e:	687b      	ldr	r3, [r7, #4]
     350:	78db      	ldrb	r3, [r3, #3]
     352:	2201      	movs	r2, #1
     354:	4053      	eors	r3, r2
     356:	b2db      	uxtb	r3, r3
     358:	2b00      	cmp	r3, #0
     35a:	d01a      	beq.n	392 <_system_pinmux_config+0x102>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
     35c:	69fa      	ldr	r2, [r7, #28]
     35e:	2380      	movs	r3, #128	; 0x80
     360:	02db      	lsls	r3, r3, #11
     362:	4013      	ands	r3, r2
     364:	d00a      	beq.n	37c <_system_pinmux_config+0xec>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
     366:	687b      	ldr	r3, [r7, #4]
     368:	789b      	ldrb	r3, [r3, #2]
     36a:	2b01      	cmp	r3, #1
     36c:	d103      	bne.n	376 <_system_pinmux_config+0xe6>
				port->OUTSET.reg = pin_mask;
     36e:	68fb      	ldr	r3, [r7, #12]
     370:	68ba      	ldr	r2, [r7, #8]
     372:	619a      	str	r2, [r3, #24]
     374:	e002      	b.n	37c <_system_pinmux_config+0xec>
			} else {
				port->OUTCLR.reg = pin_mask;
     376:	68fb      	ldr	r3, [r7, #12]
     378:	68ba      	ldr	r2, [r7, #8]
     37a:	615a      	str	r2, [r3, #20]
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
     37c:	687b      	ldr	r3, [r7, #4]
     37e:	785b      	ldrb	r3, [r3, #1]
     380:	2b01      	cmp	r3, #1
     382:	d003      	beq.n	38c <_system_pinmux_config+0xfc>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
     384:	687b      	ldr	r3, [r7, #4]
     386:	785b      	ldrb	r3, [r3, #1]
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
     388:	2b02      	cmp	r3, #2
     38a:	d102      	bne.n	392 <_system_pinmux_config+0x102>
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
     38c:	68fb      	ldr	r3, [r7, #12]
     38e:	68ba      	ldr	r2, [r7, #8]
     390:	609a      	str	r2, [r3, #8]
		}
	}
}
     392:	46c0      	nop			; (mov r8, r8)
     394:	46bd      	mov	sp, r7
     396:	b008      	add	sp, #32
     398:	bd80      	pop	{r7, pc}
     39a:	46c0      	nop			; (mov r8, r8)
     39c:	fffbffff 	.word	0xfffbffff

000003a0 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
     3a0:	b580      	push	{r7, lr}
     3a2:	b084      	sub	sp, #16
     3a4:	af00      	add	r7, sp, #0
     3a6:	0002      	movs	r2, r0
     3a8:	6039      	str	r1, [r7, #0]
     3aa:	1dfb      	adds	r3, r7, #7
     3ac:	701a      	strb	r2, [r3, #0]
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
     3ae:	1dfb      	adds	r3, r7, #7
     3b0:	781b      	ldrb	r3, [r3, #0]
     3b2:	0018      	movs	r0, r3
     3b4:	4b0a      	ldr	r3, [pc, #40]	; (3e0 <system_pinmux_pin_set_config+0x40>)
     3b6:	4798      	blx	r3
     3b8:	0003      	movs	r3, r0
     3ba:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
     3bc:	1dfb      	adds	r3, r7, #7
     3be:	781b      	ldrb	r3, [r3, #0]
     3c0:	221f      	movs	r2, #31
     3c2:	4013      	ands	r3, r2
     3c4:	2201      	movs	r2, #1
     3c6:	409a      	lsls	r2, r3
     3c8:	0013      	movs	r3, r2
     3ca:	60bb      	str	r3, [r7, #8]

	_system_pinmux_config(port, pin_mask, config);
     3cc:	683a      	ldr	r2, [r7, #0]
     3ce:	68b9      	ldr	r1, [r7, #8]
     3d0:	68fb      	ldr	r3, [r7, #12]
     3d2:	0018      	movs	r0, r3
     3d4:	4b03      	ldr	r3, [pc, #12]	; (3e4 <system_pinmux_pin_set_config+0x44>)
     3d6:	4798      	blx	r3
}
     3d8:	46c0      	nop			; (mov r8, r8)
     3da:	46bd      	mov	sp, r7
     3dc:	b004      	add	sp, #16
     3de:	bd80      	pop	{r7, pc}
     3e0:	00000231 	.word	0x00000231
     3e4:	00000291 	.word	0x00000291

000003e8 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
     3e8:	b580      	push	{r7, lr}
     3ea:	b084      	sub	sp, #16
     3ec:	af00      	add	r7, sp, #0
     3ee:	6078      	str	r0, [r7, #4]
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
     3f0:	4b0a      	ldr	r3, [pc, #40]	; (41c <_sbrk+0x34>)
     3f2:	681b      	ldr	r3, [r3, #0]
     3f4:	2b00      	cmp	r3, #0
     3f6:	d102      	bne.n	3fe <_sbrk+0x16>
		heap = (unsigned char *)&_end;
     3f8:	4b08      	ldr	r3, [pc, #32]	; (41c <_sbrk+0x34>)
     3fa:	4a09      	ldr	r2, [pc, #36]	; (420 <_sbrk+0x38>)
     3fc:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
     3fe:	4b07      	ldr	r3, [pc, #28]	; (41c <_sbrk+0x34>)
     400:	681b      	ldr	r3, [r3, #0]
     402:	60fb      	str	r3, [r7, #12]

	heap += incr;
     404:	4b05      	ldr	r3, [pc, #20]	; (41c <_sbrk+0x34>)
     406:	681a      	ldr	r2, [r3, #0]
     408:	687b      	ldr	r3, [r7, #4]
     40a:	18d2      	adds	r2, r2, r3
     40c:	4b03      	ldr	r3, [pc, #12]	; (41c <_sbrk+0x34>)
     40e:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap;
     410:	68fb      	ldr	r3, [r7, #12]
}
     412:	0018      	movs	r0, r3
     414:	46bd      	mov	sp, r7
     416:	b004      	add	sp, #16
     418:	bd80      	pop	{r7, pc}
     41a:	46c0      	nop			; (mov r8, r8)
     41c:	20000420 	.word	0x20000420
     420:	20004c08 	.word	0x20004c08

00000424 <_close>:
{
	return -1;
}

extern int _close(int file)
{
     424:	b580      	push	{r7, lr}
     426:	b082      	sub	sp, #8
     428:	af00      	add	r7, sp, #0
     42a:	6078      	str	r0, [r7, #4]
	return -1;
     42c:	2301      	movs	r3, #1
     42e:	425b      	negs	r3, r3
}
     430:	0018      	movs	r0, r3
     432:	46bd      	mov	sp, r7
     434:	b002      	add	sp, #8
     436:	bd80      	pop	{r7, pc}

00000438 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
     438:	b580      	push	{r7, lr}
     43a:	b082      	sub	sp, #8
     43c:	af00      	add	r7, sp, #0
     43e:	6078      	str	r0, [r7, #4]
     440:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
     442:	683b      	ldr	r3, [r7, #0]
     444:	2280      	movs	r2, #128	; 0x80
     446:	0192      	lsls	r2, r2, #6
     448:	605a      	str	r2, [r3, #4]

	return 0;
     44a:	2300      	movs	r3, #0
}
     44c:	0018      	movs	r0, r3
     44e:	46bd      	mov	sp, r7
     450:	b002      	add	sp, #8
     452:	bd80      	pop	{r7, pc}

00000454 <_isatty>:

extern int _isatty(int file)
{
     454:	b580      	push	{r7, lr}
     456:	b082      	sub	sp, #8
     458:	af00      	add	r7, sp, #0
     45a:	6078      	str	r0, [r7, #4]
	return 1;
     45c:	2301      	movs	r3, #1
}
     45e:	0018      	movs	r0, r3
     460:	46bd      	mov	sp, r7
     462:	b002      	add	sp, #8
     464:	bd80      	pop	{r7, pc}

00000466 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
     466:	b580      	push	{r7, lr}
     468:	b084      	sub	sp, #16
     46a:	af00      	add	r7, sp, #0
     46c:	60f8      	str	r0, [r7, #12]
     46e:	60b9      	str	r1, [r7, #8]
     470:	607a      	str	r2, [r7, #4]
	return 0;
     472:	2300      	movs	r3, #0
}
     474:	0018      	movs	r0, r3
     476:	46bd      	mov	sp, r7
     478:	b004      	add	sp, #16
     47a:	bd80      	pop	{r7, pc}

0000047c <delay_cycles>:
 *
 * \param n  Number of cycles to delay
 */
static inline void delay_cycles(
		const uint32_t n)
{
     47c:	b580      	push	{r7, lr}
     47e:	b082      	sub	sp, #8
     480:	af00      	add	r7, sp, #0
     482:	6078      	str	r0, [r7, #4]
	if (n > 0) {
     484:	687b      	ldr	r3, [r7, #4]
     486:	2b00      	cmp	r3, #0
     488:	d00c      	beq.n	4a4 <delay_cycles+0x28>
		SysTick->LOAD = n;
     48a:	4b08      	ldr	r3, [pc, #32]	; (4ac <delay_cycles+0x30>)
     48c:	687a      	ldr	r2, [r7, #4]
     48e:	605a      	str	r2, [r3, #4]
		SysTick->VAL = 0;
     490:	4b06      	ldr	r3, [pc, #24]	; (4ac <delay_cycles+0x30>)
     492:	2200      	movs	r2, #0
     494:	609a      	str	r2, [r3, #8]

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     496:	46c0      	nop			; (mov r8, r8)
     498:	4b04      	ldr	r3, [pc, #16]	; (4ac <delay_cycles+0x30>)
     49a:	681a      	ldr	r2, [r3, #0]
     49c:	2380      	movs	r3, #128	; 0x80
     49e:	025b      	lsls	r3, r3, #9
     4a0:	4013      	ands	r3, r2
     4a2:	d0f9      	beq.n	498 <delay_cycles+0x1c>
		};
	}
}
     4a4:	46c0      	nop			; (mov r8, r8)
     4a6:	46bd      	mov	sp, r7
     4a8:	b002      	add	sp, #8
     4aa:	bd80      	pop	{r7, pc}
     4ac:	e000e010 	.word	0xe000e010

000004b0 <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
     4b0:	b580      	push	{r7, lr}
     4b2:	af00      	add	r7, sp, #0
	cycles_per_ms = system_gclk_gen_get_hz(0);
     4b4:	2000      	movs	r0, #0
     4b6:	4b0f      	ldr	r3, [pc, #60]	; (4f4 <delay_init+0x44>)
     4b8:	4798      	blx	r3
     4ba:	0002      	movs	r2, r0
     4bc:	4b0e      	ldr	r3, [pc, #56]	; (4f8 <delay_init+0x48>)
     4be:	601a      	str	r2, [r3, #0]
	cycles_per_ms /= 1000;
     4c0:	4b0d      	ldr	r3, [pc, #52]	; (4f8 <delay_init+0x48>)
     4c2:	6818      	ldr	r0, [r3, #0]
     4c4:	4b0d      	ldr	r3, [pc, #52]	; (4fc <delay_init+0x4c>)
     4c6:	22fa      	movs	r2, #250	; 0xfa
     4c8:	0091      	lsls	r1, r2, #2
     4ca:	4798      	blx	r3
     4cc:	0003      	movs	r3, r0
     4ce:	001a      	movs	r2, r3
     4d0:	4b09      	ldr	r3, [pc, #36]	; (4f8 <delay_init+0x48>)
     4d2:	601a      	str	r2, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
     4d4:	4b08      	ldr	r3, [pc, #32]	; (4f8 <delay_init+0x48>)
     4d6:	6818      	ldr	r0, [r3, #0]
     4d8:	4b08      	ldr	r3, [pc, #32]	; (4fc <delay_init+0x4c>)
     4da:	22fa      	movs	r2, #250	; 0xfa
     4dc:	0091      	lsls	r1, r2, #2
     4de:	4798      	blx	r3
     4e0:	0003      	movs	r3, r0
     4e2:	001a      	movs	r2, r3
     4e4:	4b06      	ldr	r3, [pc, #24]	; (500 <delay_init+0x50>)
     4e6:	601a      	str	r2, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
     4e8:	4b06      	ldr	r3, [pc, #24]	; (504 <delay_init+0x54>)
     4ea:	2205      	movs	r2, #5
     4ec:	601a      	str	r2, [r3, #0]
}
     4ee:	46c0      	nop			; (mov r8, r8)
     4f0:	46bd      	mov	sp, r7
     4f2:	bd80      	pop	{r7, pc}
     4f4:	0000f165 	.word	0x0000f165
     4f8:	20000004 	.word	0x20000004
     4fc:	00019cd9 	.word	0x00019cd9
     500:	20000008 	.word	0x20000008
     504:	e000e010 	.word	0xe000e010

00000508 <delay_cycles_us>:
 *
 * \param n  Number of microseconds to wait
 */
void delay_cycles_us(
		uint32_t n)
{
     508:	b580      	push	{r7, lr}
     50a:	b082      	sub	sp, #8
     50c:	af00      	add	r7, sp, #0
     50e:	6078      	str	r0, [r7, #4]
	while (n--) {
     510:	e004      	b.n	51c <delay_cycles_us+0x14>
		/* Devide up to blocks of 10u */
		delay_cycles(cycles_per_us);
     512:	4b07      	ldr	r3, [pc, #28]	; (530 <delay_cycles_us+0x28>)
     514:	681b      	ldr	r3, [r3, #0]
     516:	0018      	movs	r0, r3
     518:	4b06      	ldr	r3, [pc, #24]	; (534 <delay_cycles_us+0x2c>)
     51a:	4798      	blx	r3
	while (n--) {
     51c:	687b      	ldr	r3, [r7, #4]
     51e:	1e5a      	subs	r2, r3, #1
     520:	607a      	str	r2, [r7, #4]
     522:	2b00      	cmp	r3, #0
     524:	d1f5      	bne.n	512 <delay_cycles_us+0xa>
	}
}
     526:	46c0      	nop			; (mov r8, r8)
     528:	46bd      	mov	sp, r7
     52a:	b002      	add	sp, #8
     52c:	bd80      	pop	{r7, pc}
     52e:	46c0      	nop			; (mov r8, r8)
     530:	20000008 	.word	0x20000008
     534:	0000047d 	.word	0x0000047d

00000538 <delay_cycles_ms>:
 *
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(
		uint32_t n)
{
     538:	b580      	push	{r7, lr}
     53a:	b082      	sub	sp, #8
     53c:	af00      	add	r7, sp, #0
     53e:	6078      	str	r0, [r7, #4]
	while (n--) {
     540:	e004      	b.n	54c <delay_cycles_ms+0x14>
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
     542:	4b07      	ldr	r3, [pc, #28]	; (560 <delay_cycles_ms+0x28>)
     544:	681b      	ldr	r3, [r3, #0]
     546:	0018      	movs	r0, r3
     548:	4b06      	ldr	r3, [pc, #24]	; (564 <delay_cycles_ms+0x2c>)
     54a:	4798      	blx	r3
	while (n--) {
     54c:	687b      	ldr	r3, [r7, #4]
     54e:	1e5a      	subs	r2, r3, #1
     550:	607a      	str	r2, [r7, #4]
     552:	2b00      	cmp	r3, #0
     554:	d1f5      	bne.n	542 <delay_cycles_ms+0xa>
	}
}
     556:	46c0      	nop			; (mov r8, r8)
     558:	46bd      	mov	sp, r7
     55a:	b002      	add	sp, #8
     55c:	bd80      	pop	{r7, pc}
     55e:	46c0      	nop			; (mov r8, r8)
     560:	20000004 	.word	0x20000004
     564:	0000047d 	.word	0x0000047d

00000568 <cpu_irq_save>:

static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
     568:	b580      	push	{r7, lr}
     56a:	b082      	sub	sp, #8
     56c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
     56e:	f3ef 8310 	mrs	r3, PRIMASK
     572:	607b      	str	r3, [r7, #4]
  return(result);
     574:	687b      	ldr	r3, [r7, #4]
	volatile irqflags_t flags = cpu_irq_is_enabled();
     576:	425a      	negs	r2, r3
     578:	4153      	adcs	r3, r2
     57a:	b2db      	uxtb	r3, r3
     57c:	603b      	str	r3, [r7, #0]
  __ASM volatile ("cpsid i" : : : "memory");
     57e:	b672      	cpsid	i
     580:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
     584:	4b03      	ldr	r3, [pc, #12]	; (594 <cpu_irq_save+0x2c>)
     586:	2200      	movs	r2, #0
     588:	701a      	strb	r2, [r3, #0]
	return flags;
     58a:	683b      	ldr	r3, [r7, #0]
}
     58c:	0018      	movs	r0, r3
     58e:	46bd      	mov	sp, r7
     590:	b002      	add	sp, #8
     592:	bd80      	pop	{r7, pc}
     594:	20000000 	.word	0x20000000

00000598 <cpu_irq_is_enabled_flags>:

static inline bool cpu_irq_is_enabled_flags(irqflags_t flags)
{
     598:	b580      	push	{r7, lr}
     59a:	b082      	sub	sp, #8
     59c:	af00      	add	r7, sp, #0
     59e:	6078      	str	r0, [r7, #4]
	return (flags);
     5a0:	687b      	ldr	r3, [r7, #4]
     5a2:	1e5a      	subs	r2, r3, #1
     5a4:	4193      	sbcs	r3, r2
     5a6:	b2db      	uxtb	r3, r3
}
     5a8:	0018      	movs	r0, r3
     5aa:	46bd      	mov	sp, r7
     5ac:	b002      	add	sp, #8
     5ae:	bd80      	pop	{r7, pc}

000005b0 <cpu_irq_restore>:

static inline void cpu_irq_restore(irqflags_t flags)
{
     5b0:	b580      	push	{r7, lr}
     5b2:	b082      	sub	sp, #8
     5b4:	af00      	add	r7, sp, #0
     5b6:	6078      	str	r0, [r7, #4]
	if (cpu_irq_is_enabled_flags(flags))
     5b8:	687b      	ldr	r3, [r7, #4]
     5ba:	0018      	movs	r0, r3
     5bc:	4b06      	ldr	r3, [pc, #24]	; (5d8 <cpu_irq_restore+0x28>)
     5be:	4798      	blx	r3
     5c0:	1e03      	subs	r3, r0, #0
     5c2:	d005      	beq.n	5d0 <cpu_irq_restore+0x20>
		cpu_irq_enable();
     5c4:	4b05      	ldr	r3, [pc, #20]	; (5dc <cpu_irq_restore+0x2c>)
     5c6:	2201      	movs	r2, #1
     5c8:	701a      	strb	r2, [r3, #0]
     5ca:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
     5ce:	b662      	cpsie	i
}
     5d0:	46c0      	nop			; (mov r8, r8)
     5d2:	46bd      	mov	sp, r7
     5d4:	b002      	add	sp, #8
     5d6:	bd80      	pop	{r7, pc}
     5d8:	00000599 	.word	0x00000599
     5dc:	20000000 	.word	0x20000000

000005e0 <udi_hid_generic_enable>:

//--------------------------------------------
//------ Interface for UDI HID level

bool udi_hid_generic_enable(void)
{
     5e0:	b580      	push	{r7, lr}
     5e2:	af00      	add	r7, sp, #0
	// Initialize internal values
	udi_hid_generic_rate = 0;
     5e4:	4b0c      	ldr	r3, [pc, #48]	; (618 <udi_hid_generic_enable+0x38>)
     5e6:	2200      	movs	r2, #0
     5e8:	701a      	strb	r2, [r3, #0]
	udi_hid_generic_protocol = 0;
     5ea:	4b0c      	ldr	r3, [pc, #48]	; (61c <udi_hid_generic_enable+0x3c>)
     5ec:	2200      	movs	r2, #0
     5ee:	701a      	strb	r2, [r3, #0]
	udi_hid_generic_b_report_in_free = true;
     5f0:	4b0b      	ldr	r3, [pc, #44]	; (620 <udi_hid_generic_enable+0x40>)
     5f2:	2201      	movs	r2, #1
     5f4:	701a      	strb	r2, [r3, #0]
	if (!udi_hid_generic_report_out_enable())
     5f6:	4b0b      	ldr	r3, [pc, #44]	; (624 <udi_hid_generic_enable+0x44>)
     5f8:	4798      	blx	r3
     5fa:	0003      	movs	r3, r0
     5fc:	001a      	movs	r2, r3
     5fe:	2301      	movs	r3, #1
     600:	4053      	eors	r3, r2
     602:	b2db      	uxtb	r3, r3
     604:	2b00      	cmp	r3, #0
     606:	d001      	beq.n	60c <udi_hid_generic_enable+0x2c>
		return false;
     608:	2300      	movs	r3, #0
     60a:	e002      	b.n	612 <udi_hid_generic_enable+0x32>
	return UDI_HID_GENERIC_ENABLE_EXT();
     60c:	4b06      	ldr	r3, [pc, #24]	; (628 <udi_hid_generic_enable+0x48>)
     60e:	4798      	blx	r3
     610:	0003      	movs	r3, r0
}
     612:	0018      	movs	r0, r3
     614:	46bd      	mov	sp, r7
     616:	bd80      	pop	{r7, pc}
     618:	20000424 	.word	0x20000424
     61c:	20000428 	.word	0x20000428
     620:	20000429 	.word	0x20000429
     624:	000007e9 	.word	0x000007e9
     628:	0001783d 	.word	0x0001783d

0000062c <udi_hid_generic_disable>:


void udi_hid_generic_disable(void)
{
     62c:	b580      	push	{r7, lr}
     62e:	af00      	add	r7, sp, #0
	UDI_HID_GENERIC_DISABLE_EXT();
     630:	4b02      	ldr	r3, [pc, #8]	; (63c <udi_hid_generic_disable+0x10>)
     632:	4798      	blx	r3
}
     634:	46c0      	nop			; (mov r8, r8)
     636:	46bd      	mov	sp, r7
     638:	bd80      	pop	{r7, pc}
     63a:	46c0      	nop			; (mov r8, r8)
     63c:	00017849 	.word	0x00017849

00000640 <udi_hid_generic_setup>:


bool udi_hid_generic_setup(void)
{
     640:	b5b0      	push	{r4, r5, r7, lr}
     642:	af00      	add	r7, sp, #0
	return udi_hid_setup(&udi_hid_generic_rate,
     644:	4b04      	ldr	r3, [pc, #16]	; (658 <udi_hid_generic_setup+0x18>)
     646:	4a05      	ldr	r2, [pc, #20]	; (65c <udi_hid_generic_setup+0x1c>)
     648:	4905      	ldr	r1, [pc, #20]	; (660 <udi_hid_generic_setup+0x20>)
     64a:	4806      	ldr	r0, [pc, #24]	; (664 <udi_hid_generic_setup+0x24>)
     64c:	4c06      	ldr	r4, [pc, #24]	; (668 <udi_hid_generic_setup+0x28>)
     64e:	47a0      	blx	r4
     650:	0003      	movs	r3, r0
								&udi_hid_generic_protocol,
								(uint8_t *) &udi_hid_generic_report_desc,
								udi_hid_generic_setreport);
}
     652:	0018      	movs	r0, r3
     654:	46bd      	mov	sp, r7
     656:	bdb0      	pop	{r4, r5, r7, pc}
     658:	00000679 	.word	0x00000679
     65c:	20000020 	.word	0x20000020
     660:	20000428 	.word	0x20000428
     664:	20000424 	.word	0x20000424
     668:	0000083d 	.word	0x0000083d

0000066c <udi_hid_generic_getsetting>:


uint8_t udi_hid_generic_getsetting(void)
{
     66c:	b580      	push	{r7, lr}
     66e:	af00      	add	r7, sp, #0
	return 0;
     670:	2300      	movs	r3, #0
}
     672:	0018      	movs	r0, r3
     674:	46bd      	mov	sp, r7
     676:	bd80      	pop	{r7, pc}

00000678 <udi_hid_generic_setreport>:


static bool udi_hid_generic_setreport(void)
{
     678:	b580      	push	{r7, lr}
     67a:	af00      	add	r7, sp, #0
	if ((USB_HID_REPORT_TYPE_FEATURE == (udd_g_ctrlreq.req.wValue >> 8))
     67c:	4b0f      	ldr	r3, [pc, #60]	; (6bc <udi_hid_generic_setreport+0x44>)
     67e:	885b      	ldrh	r3, [r3, #2]
     680:	0a1b      	lsrs	r3, r3, #8
     682:	b29b      	uxth	r3, r3
     684:	2b03      	cmp	r3, #3
     686:	d115      	bne.n	6b4 <udi_hid_generic_setreport+0x3c>
			&& (0 == (0xFF & udd_g_ctrlreq.req.wValue))
     688:	4b0c      	ldr	r3, [pc, #48]	; (6bc <udi_hid_generic_setreport+0x44>)
     68a:	885b      	ldrh	r3, [r3, #2]
     68c:	22ff      	movs	r2, #255	; 0xff
     68e:	4013      	ands	r3, r2
     690:	b29b      	uxth	r3, r3
     692:	2b00      	cmp	r3, #0
     694:	d10e      	bne.n	6b4 <udi_hid_generic_setreport+0x3c>
			&& (sizeof(udi_hid_generic_report_feature) ==
					udd_g_ctrlreq.req.wLength)) {
     696:	4b09      	ldr	r3, [pc, #36]	; (6bc <udi_hid_generic_setreport+0x44>)
     698:	88db      	ldrh	r3, [r3, #6]
			&& (sizeof(udi_hid_generic_report_feature) ==
     69a:	2b04      	cmp	r3, #4
     69c:	d10a      	bne.n	6b4 <udi_hid_generic_setreport+0x3c>
		// Feature type on report ID 0
		udd_g_ctrlreq.payload =
     69e:	4b07      	ldr	r3, [pc, #28]	; (6bc <udi_hid_generic_setreport+0x44>)
     6a0:	4a07      	ldr	r2, [pc, #28]	; (6c0 <udi_hid_generic_setreport+0x48>)
     6a2:	609a      	str	r2, [r3, #8]
				(uint8_t *) & udi_hid_generic_report_feature;
		udd_g_ctrlreq.callback = udi_hid_generic_setfeature_valid;
     6a4:	4b05      	ldr	r3, [pc, #20]	; (6bc <udi_hid_generic_setreport+0x44>)
     6a6:	4a07      	ldr	r2, [pc, #28]	; (6c4 <udi_hid_generic_setreport+0x4c>)
     6a8:	611a      	str	r2, [r3, #16]
		udd_g_ctrlreq.payload_size =
     6aa:	4b04      	ldr	r3, [pc, #16]	; (6bc <udi_hid_generic_setreport+0x44>)
     6ac:	2204      	movs	r2, #4
     6ae:	819a      	strh	r2, [r3, #12]
				sizeof(udi_hid_generic_report_feature);
		return true;
     6b0:	2301      	movs	r3, #1
     6b2:	e000      	b.n	6b6 <udi_hid_generic_setreport+0x3e>
	}
	return false;
     6b4:	2300      	movs	r3, #0
}
     6b6:	0018      	movs	r0, r3
     6b8:	46bd      	mov	sp, r7
     6ba:	bd80      	pop	{r7, pc}
     6bc:	200028cc 	.word	0x200028cc
     6c0:	200004ac 	.word	0x200004ac
     6c4:	00000779 	.word	0x00000779

000006c8 <udi_hid_generic_send_report_in>:

//--------------------------------------------
//------ Interface for application

bool udi_hid_generic_send_report_in(uint8_t *data)
{
     6c8:	b590      	push	{r4, r7, lr}
     6ca:	b087      	sub	sp, #28
     6cc:	af02      	add	r7, sp, #8
     6ce:	6078      	str	r0, [r7, #4]
	if (!udi_hid_generic_b_report_in_free)
     6d0:	4b21      	ldr	r3, [pc, #132]	; (758 <udi_hid_generic_send_report_in+0x90>)
     6d2:	781b      	ldrb	r3, [r3, #0]
     6d4:	2201      	movs	r2, #1
     6d6:	4053      	eors	r3, r2
     6d8:	b2db      	uxtb	r3, r3
     6da:	2b00      	cmp	r3, #0
     6dc:	d001      	beq.n	6e2 <udi_hid_generic_send_report_in+0x1a>
		return false;
     6de:	2300      	movs	r3, #0
     6e0:	e036      	b.n	750 <udi_hid_generic_send_report_in+0x88>
	irqflags_t flags = cpu_irq_save();
     6e2:	4b1e      	ldr	r3, [pc, #120]	; (75c <udi_hid_generic_send_report_in+0x94>)
     6e4:	4798      	blx	r3
     6e6:	0003      	movs	r3, r0
     6e8:	60fb      	str	r3, [r7, #12]
	// Fill report
	memset(&udi_hid_generic_report_in, 0,
     6ea:	4b1d      	ldr	r3, [pc, #116]	; (760 <udi_hid_generic_send_report_in+0x98>)
     6ec:	2240      	movs	r2, #64	; 0x40
     6ee:	2100      	movs	r1, #0
     6f0:	0018      	movs	r0, r3
     6f2:	4b1c      	ldr	r3, [pc, #112]	; (764 <udi_hid_generic_send_report_in+0x9c>)
     6f4:	4798      	blx	r3
			sizeof(udi_hid_generic_report_in));
	memcpy(&udi_hid_generic_report_in, data,
     6f6:	4a1a      	ldr	r2, [pc, #104]	; (760 <udi_hid_generic_send_report_in+0x98>)
     6f8:	687b      	ldr	r3, [r7, #4]
     6fa:	0010      	movs	r0, r2
     6fc:	0019      	movs	r1, r3
     6fe:	2340      	movs	r3, #64	; 0x40
     700:	001a      	movs	r2, r3
     702:	4b19      	ldr	r3, [pc, #100]	; (768 <udi_hid_generic_send_report_in+0xa0>)
     704:	4798      	blx	r3
	      		sizeof(udi_hid_generic_report_in));
	udi_hid_generic_b_report_in_free =
			!udd_ep_run(UDI_HID_GENERIC_EP_IN,
     706:	4a16      	ldr	r2, [pc, #88]	; (760 <udi_hid_generic_send_report_in+0x98>)
     708:	4b18      	ldr	r3, [pc, #96]	; (76c <udi_hid_generic_send_report_in+0xa4>)
     70a:	9300      	str	r3, [sp, #0]
     70c:	2340      	movs	r3, #64	; 0x40
     70e:	2100      	movs	r1, #0
     710:	2081      	movs	r0, #129	; 0x81
     712:	4c17      	ldr	r4, [pc, #92]	; (770 <udi_hid_generic_send_report_in+0xa8>)
     714:	47a0      	blx	r4
     716:	0003      	movs	r3, r0
							false,
							(uint8_t *) & udi_hid_generic_report_in,
							sizeof(udi_hid_generic_report_in),
							udi_hid_generic_report_in_sent);
     718:	1e5a      	subs	r2, r3, #1
     71a:	4193      	sbcs	r3, r2
     71c:	b2db      	uxtb	r3, r3
     71e:	2201      	movs	r2, #1
     720:	4053      	eors	r3, r2
     722:	b2db      	uxtb	r3, r3
			!udd_ep_run(UDI_HID_GENERIC_EP_IN,
     724:	1c1a      	adds	r2, r3, #0
     726:	2301      	movs	r3, #1
     728:	4013      	ands	r3, r2
     72a:	b2da      	uxtb	r2, r3
	udi_hid_generic_b_report_in_free =
     72c:	4b0a      	ldr	r3, [pc, #40]	; (758 <udi_hid_generic_send_report_in+0x90>)
     72e:	701a      	strb	r2, [r3, #0]
	cpu_irq_restore(flags);
     730:	68fb      	ldr	r3, [r7, #12]
     732:	0018      	movs	r0, r3
     734:	4b0f      	ldr	r3, [pc, #60]	; (774 <udi_hid_generic_send_report_in+0xac>)
     736:	4798      	blx	r3
	return !udi_hid_generic_b_report_in_free;
     738:	4b07      	ldr	r3, [pc, #28]	; (758 <udi_hid_generic_send_report_in+0x90>)
     73a:	781b      	ldrb	r3, [r3, #0]
     73c:	1e5a      	subs	r2, r3, #1
     73e:	4193      	sbcs	r3, r2
     740:	b2db      	uxtb	r3, r3
     742:	2201      	movs	r2, #1
     744:	4053      	eors	r3, r2
     746:	b2db      	uxtb	r3, r3
     748:	1c1a      	adds	r2, r3, #0
     74a:	2301      	movs	r3, #1
     74c:	4013      	ands	r3, r2
     74e:	b2db      	uxtb	r3, r3

}
     750:	0018      	movs	r0, r3
     752:	46bd      	mov	sp, r7
     754:	b005      	add	sp, #20
     756:	bd90      	pop	{r4, r7, pc}
     758:	20000429 	.word	0x20000429
     75c:	00000569 	.word	0x00000569
     760:	2000042c 	.word	0x2000042c
     764:	0001c173 	.word	0x0001c173
     768:	0001c13d 	.word	0x0001c13d
     76c:	00000815 	.word	0x00000815
     770:	000028d9 	.word	0x000028d9
     774:	000005b1 	.word	0x000005b1

00000778 <udi_hid_generic_setfeature_valid>:

//--------------------------------------------
//------ Internal routines

static void udi_hid_generic_setfeature_valid(void)
{
     778:	b580      	push	{r7, lr}
     77a:	af00      	add	r7, sp, #0
	if (sizeof(udi_hid_generic_report_feature) != udd_g_ctrlreq.payload_size)
     77c:	4b05      	ldr	r3, [pc, #20]	; (794 <udi_hid_generic_setfeature_valid+0x1c>)
     77e:	899b      	ldrh	r3, [r3, #12]
     780:	2b04      	cmp	r3, #4
     782:	d104      	bne.n	78e <udi_hid_generic_setfeature_valid+0x16>
		return;	// Bad data
	UDI_HID_GENERIC_SET_FEATURE(udi_hid_generic_report_feature);
     784:	4b04      	ldr	r3, [pc, #16]	; (798 <udi_hid_generic_setfeature_valid+0x20>)
     786:	0018      	movs	r0, r3
     788:	4b04      	ldr	r3, [pc, #16]	; (79c <udi_hid_generic_setfeature_valid+0x24>)
     78a:	4798      	blx	r3
     78c:	e000      	b.n	790 <udi_hid_generic_setfeature_valid+0x18>
		return;	// Bad data
     78e:	46c0      	nop			; (mov r8, r8)
}
     790:	46bd      	mov	sp, r7
     792:	bd80      	pop	{r7, pc}
     794:	200028cc 	.word	0x200028cc
     798:	200004ac 	.word	0x200004ac
     79c:	000178d9 	.word	0x000178d9

000007a0 <udi_hid_generic_report_out_received>:

static void udi_hid_generic_report_out_received(udd_ep_status_t status,
		iram_size_t nb_received, udd_ep_id_t ep)
{
     7a0:	b580      	push	{r7, lr}
     7a2:	b082      	sub	sp, #8
     7a4:	af00      	add	r7, sp, #0
     7a6:	6039      	str	r1, [r7, #0]
     7a8:	0011      	movs	r1, r2
     7aa:	1dfb      	adds	r3, r7, #7
     7ac:	1c02      	adds	r2, r0, #0
     7ae:	701a      	strb	r2, [r3, #0]
     7b0:	1dbb      	adds	r3, r7, #6
     7b2:	1c0a      	adds	r2, r1, #0
     7b4:	701a      	strb	r2, [r3, #0]
	UNUSED(ep);
	if (UDD_EP_TRANSFER_OK != status)
     7b6:	1dfb      	adds	r3, r7, #7
     7b8:	781b      	ldrb	r3, [r3, #0]
     7ba:	2b00      	cmp	r3, #0
     7bc:	d109      	bne.n	7d2 <udi_hid_generic_report_out_received+0x32>
		return;	// Abort reception

	if (sizeof(udi_hid_generic_report_out) == nb_received) {
     7be:	683b      	ldr	r3, [r7, #0]
     7c0:	2b40      	cmp	r3, #64	; 0x40
     7c2:	d103      	bne.n	7cc <udi_hid_generic_report_out_received+0x2c>
		UDI_HID_GENERIC_REPORT_OUT(udi_hid_generic_report_out);
     7c4:	4b05      	ldr	r3, [pc, #20]	; (7dc <udi_hid_generic_report_out_received+0x3c>)
     7c6:	0018      	movs	r0, r3
     7c8:	4b05      	ldr	r3, [pc, #20]	; (7e0 <udi_hid_generic_report_out_received+0x40>)
     7ca:	4798      	blx	r3
	}
	udi_hid_generic_report_out_enable();
     7cc:	4b05      	ldr	r3, [pc, #20]	; (7e4 <udi_hid_generic_report_out_received+0x44>)
     7ce:	4798      	blx	r3
     7d0:	e000      	b.n	7d4 <udi_hid_generic_report_out_received+0x34>
		return;	// Abort reception
     7d2:	46c0      	nop			; (mov r8, r8)
}
     7d4:	46bd      	mov	sp, r7
     7d6:	b002      	add	sp, #8
     7d8:	bd80      	pop	{r7, pc}
     7da:	46c0      	nop			; (mov r8, r8)
     7dc:	2000046c 	.word	0x2000046c
     7e0:	0001785d 	.word	0x0001785d
     7e4:	000007e9 	.word	0x000007e9

000007e8 <udi_hid_generic_report_out_enable>:


static bool udi_hid_generic_report_out_enable(void)
{
     7e8:	b590      	push	{r4, r7, lr}
     7ea:	b083      	sub	sp, #12
     7ec:	af02      	add	r7, sp, #8
	return udd_ep_run(UDI_HID_GENERIC_EP_OUT,
     7ee:	4a06      	ldr	r2, [pc, #24]	; (808 <udi_hid_generic_report_out_enable+0x20>)
     7f0:	4b06      	ldr	r3, [pc, #24]	; (80c <udi_hid_generic_report_out_enable+0x24>)
     7f2:	9300      	str	r3, [sp, #0]
     7f4:	2340      	movs	r3, #64	; 0x40
     7f6:	2100      	movs	r1, #0
     7f8:	2002      	movs	r0, #2
     7fa:	4c05      	ldr	r4, [pc, #20]	; (810 <udi_hid_generic_report_out_enable+0x28>)
     7fc:	47a0      	blx	r4
     7fe:	0003      	movs	r3, r0
							false,
							(uint8_t *) & udi_hid_generic_report_out,
							sizeof(udi_hid_generic_report_out),
							udi_hid_generic_report_out_received);
}
     800:	0018      	movs	r0, r3
     802:	46bd      	mov	sp, r7
     804:	b001      	add	sp, #4
     806:	bd90      	pop	{r4, r7, pc}
     808:	2000046c 	.word	0x2000046c
     80c:	000007a1 	.word	0x000007a1
     810:	000028d9 	.word	0x000028d9

00000814 <udi_hid_generic_report_in_sent>:


static void udi_hid_generic_report_in_sent(udd_ep_status_t status,
		iram_size_t nb_sent, udd_ep_id_t ep)
{
     814:	b580      	push	{r7, lr}
     816:	b082      	sub	sp, #8
     818:	af00      	add	r7, sp, #0
     81a:	6039      	str	r1, [r7, #0]
     81c:	0011      	movs	r1, r2
     81e:	1dfb      	adds	r3, r7, #7
     820:	1c02      	adds	r2, r0, #0
     822:	701a      	strb	r2, [r3, #0]
     824:	1dbb      	adds	r3, r7, #6
     826:	1c0a      	adds	r2, r1, #0
     828:	701a      	strb	r2, [r3, #0]
	UNUSED(status);
	UNUSED(nb_sent);
	UNUSED(ep);
	udi_hid_generic_b_report_in_free = true;
     82a:	4b03      	ldr	r3, [pc, #12]	; (838 <udi_hid_generic_report_in_sent+0x24>)
     82c:	2201      	movs	r2, #1
     82e:	701a      	strb	r2, [r3, #0]
}
     830:	46c0      	nop			; (mov r8, r8)
     832:	46bd      	mov	sp, r7
     834:	b002      	add	sp, #8
     836:	bd80      	pop	{r7, pc}
     838:	20000429 	.word	0x20000429

0000083c <udi_hid_setup>:
 * \retval true if the descriptor is supported
 */
static bool udi_hid_reqstdifaceget_descriptor(uint8_t *report_desc);

bool udi_hid_setup( uint8_t *rate, uint8_t *protocol, uint8_t *report_desc, bool (*setup_report)(void) )
{
     83c:	b580      	push	{r7, lr}
     83e:	b084      	sub	sp, #16
     840:	af00      	add	r7, sp, #0
     842:	60f8      	str	r0, [r7, #12]
     844:	60b9      	str	r1, [r7, #8]
     846:	607a      	str	r2, [r7, #4]
     848:	603b      	str	r3, [r7, #0]
	if (Udd_setup_is_in()) {
     84a:	4b35      	ldr	r3, [pc, #212]	; (920 <udi_hid_setup+0xe4>)
     84c:	781b      	ldrb	r3, [r3, #0]
     84e:	b25b      	sxtb	r3, r3
     850:	2b00      	cmp	r3, #0
     852:	da32      	bge.n	8ba <udi_hid_setup+0x7e>
		// Requests Interface GET
		if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
     854:	4b32      	ldr	r3, [pc, #200]	; (920 <udi_hid_setup+0xe4>)
     856:	781b      	ldrb	r3, [r3, #0]
     858:	001a      	movs	r2, r3
     85a:	2360      	movs	r3, #96	; 0x60
     85c:	4013      	ands	r3, r2
     85e:	d109      	bne.n	874 <udi_hid_setup+0x38>
			// Requests Standard Interface Get
			switch (udd_g_ctrlreq.req.bRequest) {
     860:	4b2f      	ldr	r3, [pc, #188]	; (920 <udi_hid_setup+0xe4>)
     862:	785b      	ldrb	r3, [r3, #1]
     864:	2b06      	cmp	r3, #6
     866:	d105      	bne.n	874 <udi_hid_setup+0x38>

			case USB_REQ_GET_DESCRIPTOR:
				return udi_hid_reqstdifaceget_descriptor(report_desc);
     868:	687b      	ldr	r3, [r7, #4]
     86a:	0018      	movs	r0, r3
     86c:	4b2d      	ldr	r3, [pc, #180]	; (924 <udi_hid_setup+0xe8>)
     86e:	4798      	blx	r3
     870:	0003      	movs	r3, r0
     872:	e051      	b.n	918 <udi_hid_setup+0xdc>
			}
		}
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
     874:	4b2a      	ldr	r3, [pc, #168]	; (920 <udi_hid_setup+0xe4>)
     876:	781b      	ldrb	r3, [r3, #0]
     878:	001a      	movs	r2, r3
     87a:	2360      	movs	r3, #96	; 0x60
     87c:	4013      	ands	r3, r2
     87e:	2b20      	cmp	r3, #32
     880:	d11b      	bne.n	8ba <udi_hid_setup+0x7e>
			// Requests Class Interface Get
			switch (udd_g_ctrlreq.req.bRequest) {
     882:	4b27      	ldr	r3, [pc, #156]	; (920 <udi_hid_setup+0xe4>)
     884:	785b      	ldrb	r3, [r3, #1]
     886:	2b02      	cmp	r3, #2
     888:	d007      	beq.n	89a <udi_hid_setup+0x5e>
     88a:	2b03      	cmp	r3, #3
     88c:	d00d      	beq.n	8aa <udi_hid_setup+0x6e>
     88e:	2b01      	cmp	r3, #1
     890:	d113      	bne.n	8ba <udi_hid_setup+0x7e>

			case USB_REQ_HID_GET_REPORT:
				return setup_report();
     892:	683b      	ldr	r3, [r7, #0]
     894:	4798      	blx	r3
     896:	0003      	movs	r3, r0
     898:	e03e      	b.n	918 <udi_hid_setup+0xdc>

			case USB_REQ_HID_GET_IDLE:
				udd_g_ctrlreq.payload = rate;
     89a:	4b21      	ldr	r3, [pc, #132]	; (920 <udi_hid_setup+0xe4>)
     89c:	68fa      	ldr	r2, [r7, #12]
     89e:	609a      	str	r2, [r3, #8]
				udd_g_ctrlreq.payload_size = 1;
     8a0:	4b1f      	ldr	r3, [pc, #124]	; (920 <udi_hid_setup+0xe4>)
     8a2:	2201      	movs	r2, #1
     8a4:	819a      	strh	r2, [r3, #12]
				return true;
     8a6:	2301      	movs	r3, #1
     8a8:	e036      	b.n	918 <udi_hid_setup+0xdc>

			case USB_REQ_HID_GET_PROTOCOL:
				udd_g_ctrlreq.payload = protocol;
     8aa:	4b1d      	ldr	r3, [pc, #116]	; (920 <udi_hid_setup+0xe4>)
     8ac:	68ba      	ldr	r2, [r7, #8]
     8ae:	609a      	str	r2, [r3, #8]
				udd_g_ctrlreq.payload_size = 1;
     8b0:	4b1b      	ldr	r3, [pc, #108]	; (920 <udi_hid_setup+0xe4>)
     8b2:	2201      	movs	r2, #1
     8b4:	819a      	strh	r2, [r3, #12]
				return true;
     8b6:	2301      	movs	r3, #1
     8b8:	e02e      	b.n	918 <udi_hid_setup+0xdc>
			}
		}
	}
	if (Udd_setup_is_out()) {
     8ba:	4b19      	ldr	r3, [pc, #100]	; (920 <udi_hid_setup+0xe4>)
     8bc:	781b      	ldrb	r3, [r3, #0]
     8be:	b25b      	sxtb	r3, r3
     8c0:	2b00      	cmp	r3, #0
     8c2:	db28      	blt.n	916 <udi_hid_setup+0xda>
		// Requests Interface SET
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
     8c4:	4b16      	ldr	r3, [pc, #88]	; (920 <udi_hid_setup+0xe4>)
     8c6:	781b      	ldrb	r3, [r3, #0]
     8c8:	001a      	movs	r2, r3
     8ca:	2360      	movs	r3, #96	; 0x60
     8cc:	4013      	ands	r3, r2
     8ce:	2b20      	cmp	r3, #32
     8d0:	d121      	bne.n	916 <udi_hid_setup+0xda>
			// Requests Class Interface Set
			switch (udd_g_ctrlreq.req.bRequest) {
     8d2:	4b13      	ldr	r3, [pc, #76]	; (920 <udi_hid_setup+0xe4>)
     8d4:	785b      	ldrb	r3, [r3, #1]
     8d6:	2b0a      	cmp	r3, #10
     8d8:	d007      	beq.n	8ea <udi_hid_setup+0xae>
     8da:	2b0b      	cmp	r3, #11
     8dc:	d00e      	beq.n	8fc <udi_hid_setup+0xc0>
     8de:	2b09      	cmp	r3, #9
     8e0:	d119      	bne.n	916 <udi_hid_setup+0xda>

			case USB_REQ_HID_SET_REPORT:
				return setup_report();
     8e2:	683b      	ldr	r3, [r7, #0]
     8e4:	4798      	blx	r3
     8e6:	0003      	movs	r3, r0
     8e8:	e016      	b.n	918 <udi_hid_setup+0xdc>

			case USB_REQ_HID_SET_IDLE:
				*rate = udd_g_ctrlreq.req.wValue >> 8;
     8ea:	4b0d      	ldr	r3, [pc, #52]	; (920 <udi_hid_setup+0xe4>)
     8ec:	885b      	ldrh	r3, [r3, #2]
     8ee:	0a1b      	lsrs	r3, r3, #8
     8f0:	b29b      	uxth	r3, r3
     8f2:	b2da      	uxtb	r2, r3
     8f4:	68fb      	ldr	r3, [r7, #12]
     8f6:	701a      	strb	r2, [r3, #0]
				return true;
     8f8:	2301      	movs	r3, #1
     8fa:	e00d      	b.n	918 <udi_hid_setup+0xdc>

			case USB_REQ_HID_SET_PROTOCOL:
				if (0 != udd_g_ctrlreq.req.wLength)
     8fc:	4b08      	ldr	r3, [pc, #32]	; (920 <udi_hid_setup+0xe4>)
     8fe:	88db      	ldrh	r3, [r3, #6]
     900:	2b00      	cmp	r3, #0
     902:	d001      	beq.n	908 <udi_hid_setup+0xcc>
					return false;
     904:	2300      	movs	r3, #0
     906:	e007      	b.n	918 <udi_hid_setup+0xdc>
				*protocol = udd_g_ctrlreq.req.wValue;
     908:	4b05      	ldr	r3, [pc, #20]	; (920 <udi_hid_setup+0xe4>)
     90a:	885b      	ldrh	r3, [r3, #2]
     90c:	b2da      	uxtb	r2, r3
     90e:	68bb      	ldr	r3, [r7, #8]
     910:	701a      	strb	r2, [r3, #0]
				return true;
     912:	2301      	movs	r3, #1
     914:	e000      	b.n	918 <udi_hid_setup+0xdc>
			}
		}
	}
	return false;	// Request not supported
     916:	2300      	movs	r3, #0
}
     918:	0018      	movs	r0, r3
     91a:	46bd      	mov	sp, r7
     91c:	b004      	add	sp, #16
     91e:	bd80      	pop	{r7, pc}
     920:	200028cc 	.word	0x200028cc
     924:	00000929 	.word	0x00000929

00000928 <udi_hid_reqstdifaceget_descriptor>:

//---------------------------------------------
//------- Internal routines

static bool udi_hid_reqstdifaceget_descriptor(uint8_t *report_desc)
{
     928:	b580      	push	{r7, lr}
     92a:	b084      	sub	sp, #16
     92c:	af00      	add	r7, sp, #0
     92e:	6078      	str	r0, [r7, #4]
	usb_hid_descriptor_t UDC_DESC_STORAGE *ptr_hid_desc;

	// Get the USB descriptor which is located after the interface descriptor
	// This descriptor must be the HID descriptor
	ptr_hid_desc = (usb_hid_descriptor_t UDC_DESC_STORAGE *) ((uint8_t *)
			udc_get_interface_desc() + sizeof(usb_iface_desc_t));
     930:	4b25      	ldr	r3, [pc, #148]	; (9c8 <udi_hid_reqstdifaceget_descriptor+0xa0>)
     932:	4798      	blx	r3
     934:	0003      	movs	r3, r0
	ptr_hid_desc = (usb_hid_descriptor_t UDC_DESC_STORAGE *) ((uint8_t *)
     936:	3309      	adds	r3, #9
     938:	60fb      	str	r3, [r7, #12]
	if (USB_DT_HID != ptr_hid_desc->bDescriptorType)
     93a:	68fb      	ldr	r3, [r7, #12]
     93c:	785b      	ldrb	r3, [r3, #1]
     93e:	2b21      	cmp	r3, #33	; 0x21
     940:	d001      	beq.n	946 <udi_hid_reqstdifaceget_descriptor+0x1e>
		return false;
     942:	2300      	movs	r3, #0
     944:	e03b      	b.n	9be <udi_hid_reqstdifaceget_descriptor+0x96>

	// The SETUP request can ask for:
	// - an USB_DT_HID descriptor
	// - or USB_DT_HID_REPORT descriptor
	// - or USB_DT_HID_PHYSICAL descriptor
	if (USB_DT_HID == (uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
     946:	4b21      	ldr	r3, [pc, #132]	; (9cc <udi_hid_reqstdifaceget_descriptor+0xa4>)
     948:	885b      	ldrh	r3, [r3, #2]
     94a:	0a1b      	lsrs	r3, r3, #8
     94c:	b29b      	uxth	r3, r3
     94e:	b2db      	uxtb	r3, r3
     950:	2b21      	cmp	r3, #33	; 0x21
     952:	d113      	bne.n	97c <udi_hid_reqstdifaceget_descriptor+0x54>
		// USB_DT_HID descriptor requested then send it
		udd_g_ctrlreq.payload = (uint8_t *) ptr_hid_desc;
     954:	4b1d      	ldr	r3, [pc, #116]	; (9cc <udi_hid_reqstdifaceget_descriptor+0xa4>)
     956:	68fa      	ldr	r2, [r7, #12]
     958:	609a      	str	r2, [r3, #8]
		udd_g_ctrlreq.payload_size =
				min(udd_g_ctrlreq.req.wLength,
     95a:	68fb      	ldr	r3, [r7, #12]
     95c:	781b      	ldrb	r3, [r3, #0]
     95e:	b29a      	uxth	r2, r3
     960:	4b1a      	ldr	r3, [pc, #104]	; (9cc <udi_hid_reqstdifaceget_descriptor+0xa4>)
     962:	88db      	ldrh	r3, [r3, #6]
     964:	1c18      	adds	r0, r3, #0
     966:	1c11      	adds	r1, r2, #0
     968:	b28a      	uxth	r2, r1
     96a:	b283      	uxth	r3, r0
     96c:	429a      	cmp	r2, r3
     96e:	d900      	bls.n	972 <udi_hid_reqstdifaceget_descriptor+0x4a>
     970:	1c01      	adds	r1, r0, #0
     972:	b28a      	uxth	r2, r1
		udd_g_ctrlreq.payload_size =
     974:	4b15      	ldr	r3, [pc, #84]	; (9cc <udi_hid_reqstdifaceget_descriptor+0xa4>)
     976:	819a      	strh	r2, [r3, #12]
				ptr_hid_desc->bLength);
		return true;
     978:	2301      	movs	r3, #1
     97a:	e020      	b.n	9be <udi_hid_reqstdifaceget_descriptor+0x96>
	}
	// The HID_X descriptor requested must correspond to report type
	// included in the HID descriptor
	if (ptr_hid_desc->bRDescriptorType ==
     97c:	68fb      	ldr	r3, [r7, #12]
     97e:	799a      	ldrb	r2, [r3, #6]
			(uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
     980:	4b12      	ldr	r3, [pc, #72]	; (9cc <udi_hid_reqstdifaceget_descriptor+0xa4>)
     982:	885b      	ldrh	r3, [r3, #2]
     984:	0a1b      	lsrs	r3, r3, #8
     986:	b29b      	uxth	r3, r3
     988:	b2db      	uxtb	r3, r3
	if (ptr_hid_desc->bRDescriptorType ==
     98a:	429a      	cmp	r2, r3
     98c:	d116      	bne.n	9bc <udi_hid_reqstdifaceget_descriptor+0x94>
		// Send HID Report descriptor given by high level
		udd_g_ctrlreq.payload = report_desc;
     98e:	4b0f      	ldr	r3, [pc, #60]	; (9cc <udi_hid_reqstdifaceget_descriptor+0xa4>)
     990:	687a      	ldr	r2, [r7, #4]
     992:	609a      	str	r2, [r3, #8]
		udd_g_ctrlreq.payload_size =
				min(udd_g_ctrlreq.req.wLength,
     994:	68fb      	ldr	r3, [r7, #12]
     996:	79da      	ldrb	r2, [r3, #7]
     998:	7a1b      	ldrb	r3, [r3, #8]
     99a:	021b      	lsls	r3, r3, #8
     99c:	4313      	orrs	r3, r2
     99e:	b29a      	uxth	r2, r3
     9a0:	4b0a      	ldr	r3, [pc, #40]	; (9cc <udi_hid_reqstdifaceget_descriptor+0xa4>)
     9a2:	88db      	ldrh	r3, [r3, #6]
		udd_g_ctrlreq.payload_size =
     9a4:	1c18      	adds	r0, r3, #0
     9a6:	1c11      	adds	r1, r2, #0
     9a8:	b28a      	uxth	r2, r1
     9aa:	b283      	uxth	r3, r0
     9ac:	429a      	cmp	r2, r3
     9ae:	d900      	bls.n	9b2 <udi_hid_reqstdifaceget_descriptor+0x8a>
     9b0:	1c01      	adds	r1, r0, #0
     9b2:	b28a      	uxth	r2, r1
     9b4:	4b05      	ldr	r3, [pc, #20]	; (9cc <udi_hid_reqstdifaceget_descriptor+0xa4>)
     9b6:	819a      	strh	r2, [r3, #12]
				le16_to_cpu(ptr_hid_desc->wDescriptorLength));
		return true;
     9b8:	2301      	movs	r3, #1
     9ba:	e000      	b.n	9be <udi_hid_reqstdifaceget_descriptor+0x96>
	}
	return false;
     9bc:	2300      	movs	r3, #0
}
     9be:	0018      	movs	r0, r3
     9c0:	46bd      	mov	sp, r7
     9c2:	b004      	add	sp, #16
     9c4:	bd80      	pop	{r7, pc}
     9c6:	46c0      	nop			; (mov r8, r8)
     9c8:	000009d1 	.word	0x000009d1
     9cc:	200028cc 	.word	0x200028cc

000009d0 <udc_get_interface_desc>:
	.header.bDescriptorType = USB_DT_STRING
};
//! @}

usb_iface_desc_t UDC_DESC_STORAGE *udc_get_interface_desc(void)
{
     9d0:	b580      	push	{r7, lr}
     9d2:	af00      	add	r7, sp, #0
	return udc_ptr_iface;
     9d4:	4b02      	ldr	r3, [pc, #8]	; (9e0 <udc_get_interface_desc+0x10>)
     9d6:	681b      	ldr	r3, [r3, #0]
}
     9d8:	0018      	movs	r0, r3
     9da:	46bd      	mov	sp, r7
     9dc:	bd80      	pop	{r7, pc}
     9de:	46c0      	nop			; (mov r8, r8)
     9e0:	200004c0 	.word	0x200004c0

000009e4 <udc_get_eof_conf>:
 * \brief Returns a value to check the end of USB Configuration descriptor
 *
 * \return address after the last byte of USB Configuration descriptor
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_get_eof_conf(void)
{
     9e4:	b580      	push	{r7, lr}
     9e6:	af00      	add	r7, sp, #0
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
			udc_ptr_conf->desc +
     9e8:	4b07      	ldr	r3, [pc, #28]	; (a08 <udc_get_eof_conf+0x24>)
     9ea:	681b      	ldr	r3, [r3, #0]
     9ec:	681a      	ldr	r2, [r3, #0]
			le16_to_cpu(udc_ptr_conf->desc->wTotalLength));
     9ee:	4b06      	ldr	r3, [pc, #24]	; (a08 <udc_get_eof_conf+0x24>)
     9f0:	681b      	ldr	r3, [r3, #0]
     9f2:	681b      	ldr	r3, [r3, #0]
     9f4:	7899      	ldrb	r1, [r3, #2]
     9f6:	78db      	ldrb	r3, [r3, #3]
     9f8:	021b      	lsls	r3, r3, #8
     9fa:	430b      	orrs	r3, r1
     9fc:	b29b      	uxth	r3, r3
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
     9fe:	18d3      	adds	r3, r2, r3
}
     a00:	0018      	movs	r0, r3
     a02:	46bd      	mov	sp, r7
     a04:	bd80      	pop	{r7, pc}
     a06:	46c0      	nop			; (mov r8, r8)
     a08:	200004bc 	.word	0x200004bc

00000a0c <udc_next_desc_in_iface>:
 * \return address of specific descriptor found
 * \return NULL if it is the end of global interface descriptor
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_next_desc_in_iface(usb_conf_desc_t
		UDC_DESC_STORAGE * desc, uint8_t desc_id)
{
     a0c:	b580      	push	{r7, lr}
     a0e:	b084      	sub	sp, #16
     a10:	af00      	add	r7, sp, #0
     a12:	6078      	str	r0, [r7, #4]
     a14:	000a      	movs	r2, r1
     a16:	1cfb      	adds	r3, r7, #3
     a18:	701a      	strb	r2, [r3, #0]
	usb_conf_desc_t UDC_DESC_STORAGE *ptr_eof_desc;

	ptr_eof_desc = udc_get_eof_conf();
     a1a:	4b14      	ldr	r3, [pc, #80]	; (a6c <udc_next_desc_in_iface+0x60>)
     a1c:	4798      	blx	r3
     a1e:	0003      	movs	r3, r0
     a20:	60fb      	str	r3, [r7, #12]
	// Go to next descriptor
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
			desc->bLength);
     a22:	687b      	ldr	r3, [r7, #4]
     a24:	781b      	ldrb	r3, [r3, #0]
     a26:	001a      	movs	r2, r3
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
     a28:	687b      	ldr	r3, [r7, #4]
     a2a:	189b      	adds	r3, r3, r2
     a2c:	607b      	str	r3, [r7, #4]
	// Check the end of configuration descriptor
	while (ptr_eof_desc > desc) {
     a2e:	e011      	b.n	a54 <udc_next_desc_in_iface+0x48>
		// If new interface descriptor is found,
		// then it is the end of the current global interface descriptor
		if (USB_DT_INTERFACE == desc->bDescriptorType) {
     a30:	687b      	ldr	r3, [r7, #4]
     a32:	785b      	ldrb	r3, [r3, #1]
     a34:	2b04      	cmp	r3, #4
     a36:	d012      	beq.n	a5e <udc_next_desc_in_iface+0x52>
			break; // End of global interface descriptor
		}
		if (desc_id == desc->bDescriptorType) {
     a38:	687b      	ldr	r3, [r7, #4]
     a3a:	785b      	ldrb	r3, [r3, #1]
     a3c:	1cfa      	adds	r2, r7, #3
     a3e:	7812      	ldrb	r2, [r2, #0]
     a40:	429a      	cmp	r2, r3
     a42:	d101      	bne.n	a48 <udc_next_desc_in_iface+0x3c>
			return desc; // Specific descriptor found
     a44:	687b      	ldr	r3, [r7, #4]
     a46:	e00c      	b.n	a62 <udc_next_desc_in_iface+0x56>
		}
		// Go to next descriptor
		desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
				desc->bLength);
     a48:	687b      	ldr	r3, [r7, #4]
     a4a:	781b      	ldrb	r3, [r3, #0]
     a4c:	001a      	movs	r2, r3
		desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
     a4e:	687b      	ldr	r3, [r7, #4]
     a50:	189b      	adds	r3, r3, r2
     a52:	607b      	str	r3, [r7, #4]
	while (ptr_eof_desc > desc) {
     a54:	68fa      	ldr	r2, [r7, #12]
     a56:	687b      	ldr	r3, [r7, #4]
     a58:	429a      	cmp	r2, r3
     a5a:	d8e9      	bhi.n	a30 <udc_next_desc_in_iface+0x24>
     a5c:	e000      	b.n	a60 <udc_next_desc_in_iface+0x54>
			break; // End of global interface descriptor
     a5e:	46c0      	nop			; (mov r8, r8)
	}
	return NULL; // No specific descriptor found
     a60:	2300      	movs	r3, #0
}
     a62:	0018      	movs	r0, r3
     a64:	46bd      	mov	sp, r7
     a66:	b004      	add	sp, #16
     a68:	bd80      	pop	{r7, pc}
     a6a:	46c0      	nop			; (mov r8, r8)
     a6c:	000009e5 	.word	0x000009e5

00000a70 <udc_update_iface_desc>:
 * \param setting_num   Setting number of interface to find
 *
 * \return 1 if found or 0 if not found
 */
static bool udc_update_iface_desc(uint8_t iface_num, uint8_t setting_num)
{
     a70:	b580      	push	{r7, lr}
     a72:	b084      	sub	sp, #16
     a74:	af00      	add	r7, sp, #0
     a76:	0002      	movs	r2, r0
     a78:	1dfb      	adds	r3, r7, #7
     a7a:	701a      	strb	r2, [r3, #0]
     a7c:	1dbb      	adds	r3, r7, #6
     a7e:	1c0a      	adds	r2, r1, #0
     a80:	701a      	strb	r2, [r3, #0]
	usb_conf_desc_t UDC_DESC_STORAGE *ptr_end_desc;

	if (0 == udc_num_configuration) {
     a82:	4b20      	ldr	r3, [pc, #128]	; (b04 <udc_update_iface_desc+0x94>)
     a84:	781b      	ldrb	r3, [r3, #0]
     a86:	2b00      	cmp	r3, #0
     a88:	d101      	bne.n	a8e <udc_update_iface_desc+0x1e>
		return false;
     a8a:	2300      	movs	r3, #0
     a8c:	e036      	b.n	afc <udc_update_iface_desc+0x8c>
	}

	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
     a8e:	4b1e      	ldr	r3, [pc, #120]	; (b08 <udc_update_iface_desc+0x98>)
     a90:	681b      	ldr	r3, [r3, #0]
     a92:	681b      	ldr	r3, [r3, #0]
     a94:	791b      	ldrb	r3, [r3, #4]
     a96:	1dfa      	adds	r2, r7, #7
     a98:	7812      	ldrb	r2, [r2, #0]
     a9a:	429a      	cmp	r2, r3
     a9c:	d301      	bcc.n	aa2 <udc_update_iface_desc+0x32>
		return false;
     a9e:	2300      	movs	r3, #0
     aa0:	e02c      	b.n	afc <udc_update_iface_desc+0x8c>
	}

	// Start at the beginning of configuration descriptor
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
			udc_ptr_conf->desc;
     aa2:	4b19      	ldr	r3, [pc, #100]	; (b08 <udc_update_iface_desc+0x98>)
     aa4:	681b      	ldr	r3, [r3, #0]
     aa6:	681a      	ldr	r2, [r3, #0]
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
     aa8:	4b18      	ldr	r3, [pc, #96]	; (b0c <udc_update_iface_desc+0x9c>)
     aaa:	601a      	str	r2, [r3, #0]

	// Check the end of configuration descriptor
	ptr_end_desc = udc_get_eof_conf();
     aac:	4b18      	ldr	r3, [pc, #96]	; (b10 <udc_update_iface_desc+0xa0>)
     aae:	4798      	blx	r3
     ab0:	0003      	movs	r3, r0
     ab2:	60fb      	str	r3, [r7, #12]
	while (ptr_end_desc >
     ab4:	e01c      	b.n	af0 <udc_update_iface_desc+0x80>
			(UDC_DESC_STORAGE usb_conf_desc_t *) udc_ptr_iface) {
		if (USB_DT_INTERFACE == udc_ptr_iface->bDescriptorType) {
     ab6:	4b15      	ldr	r3, [pc, #84]	; (b0c <udc_update_iface_desc+0x9c>)
     ab8:	681b      	ldr	r3, [r3, #0]
     aba:	785b      	ldrb	r3, [r3, #1]
     abc:	2b04      	cmp	r3, #4
     abe:	d10f      	bne.n	ae0 <udc_update_iface_desc+0x70>
			// A interface descriptor is found
			// Check interface and alternate setting number
			if ((iface_num == udc_ptr_iface->bInterfaceNumber) &&
     ac0:	4b12      	ldr	r3, [pc, #72]	; (b0c <udc_update_iface_desc+0x9c>)
     ac2:	681b      	ldr	r3, [r3, #0]
     ac4:	789b      	ldrb	r3, [r3, #2]
     ac6:	1dfa      	adds	r2, r7, #7
     ac8:	7812      	ldrb	r2, [r2, #0]
     aca:	429a      	cmp	r2, r3
     acc:	d108      	bne.n	ae0 <udc_update_iface_desc+0x70>
					(setting_num ==
					udc_ptr_iface->bAlternateSetting)) {
     ace:	4b0f      	ldr	r3, [pc, #60]	; (b0c <udc_update_iface_desc+0x9c>)
     ad0:	681b      	ldr	r3, [r3, #0]
     ad2:	78db      	ldrb	r3, [r3, #3]
			if ((iface_num == udc_ptr_iface->bInterfaceNumber) &&
     ad4:	1dba      	adds	r2, r7, #6
     ad6:	7812      	ldrb	r2, [r2, #0]
     ad8:	429a      	cmp	r2, r3
     ada:	d101      	bne.n	ae0 <udc_update_iface_desc+0x70>
				return true; // Interface found
     adc:	2301      	movs	r3, #1
     ade:	e00d      	b.n	afc <udc_update_iface_desc+0x8c>
			}
		}
		// Go to next descriptor
		udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *) (
     ae0:	4b0a      	ldr	r3, [pc, #40]	; (b0c <udc_update_iface_desc+0x9c>)
     ae2:	681a      	ldr	r2, [r3, #0]
				(uint8_t *) udc_ptr_iface +
				udc_ptr_iface->bLength);
     ae4:	4b09      	ldr	r3, [pc, #36]	; (b0c <udc_update_iface_desc+0x9c>)
     ae6:	681b      	ldr	r3, [r3, #0]
     ae8:	781b      	ldrb	r3, [r3, #0]
		udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *) (
     aea:	18d2      	adds	r2, r2, r3
     aec:	4b07      	ldr	r3, [pc, #28]	; (b0c <udc_update_iface_desc+0x9c>)
     aee:	601a      	str	r2, [r3, #0]
			(UDC_DESC_STORAGE usb_conf_desc_t *) udc_ptr_iface) {
     af0:	4b06      	ldr	r3, [pc, #24]	; (b0c <udc_update_iface_desc+0x9c>)
     af2:	681b      	ldr	r3, [r3, #0]
	while (ptr_end_desc >
     af4:	68fa      	ldr	r2, [r7, #12]
     af6:	429a      	cmp	r2, r3
     af8:	d8dd      	bhi.n	ab6 <udc_update_iface_desc+0x46>
	}
	return false; // Interface not found
     afa:	2300      	movs	r3, #0
}
     afc:	0018      	movs	r0, r3
     afe:	46bd      	mov	sp, r7
     b00:	b004      	add	sp, #16
     b02:	bd80      	pop	{r7, pc}
     b04:	200004b8 	.word	0x200004b8
     b08:	200004bc 	.word	0x200004bc
     b0c:	200004c0 	.word	0x200004c0
     b10:	000009e5 	.word	0x000009e5

00000b14 <udc_iface_disable>:
 * \param iface_num     Interface number to disable
 *
 * \return 1 if it is done or 0 if interface is not found
 */
static bool udc_iface_disable(uint8_t iface_num)
{
     b14:	b580      	push	{r7, lr}
     b16:	b084      	sub	sp, #16
     b18:	af00      	add	r7, sp, #0
     b1a:	0002      	movs	r2, r0
     b1c:	1dfb      	adds	r3, r7, #7
     b1e:	701a      	strb	r2, [r3, #0]
	udi_api_t UDC_DESC_STORAGE *udi_api;

	// Select first alternate setting of the interface
	// to update udc_ptr_iface before call iface->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
     b20:	1dfb      	adds	r3, r7, #7
     b22:	781b      	ldrb	r3, [r3, #0]
     b24:	2100      	movs	r1, #0
     b26:	0018      	movs	r0, r3
     b28:	4b21      	ldr	r3, [pc, #132]	; (bb0 <udc_iface_disable+0x9c>)
     b2a:	4798      	blx	r3
     b2c:	0003      	movs	r3, r0
     b2e:	001a      	movs	r2, r3
     b30:	2301      	movs	r3, #1
     b32:	4053      	eors	r3, r2
     b34:	b2db      	uxtb	r3, r3
     b36:	2b00      	cmp	r3, #0
     b38:	d001      	beq.n	b3e <udc_iface_disable+0x2a>
		return false;
     b3a:	2300      	movs	r3, #0
     b3c:	e034      	b.n	ba8 <udc_iface_disable+0x94>
	}

	// Select the interface with the current alternate setting
	udi_api = udc_ptr_conf->udi_apis[iface_num];
     b3e:	4b1d      	ldr	r3, [pc, #116]	; (bb4 <udc_iface_disable+0xa0>)
     b40:	681b      	ldr	r3, [r3, #0]
     b42:	685a      	ldr	r2, [r3, #4]
     b44:	1dfb      	adds	r3, r7, #7
     b46:	781b      	ldrb	r3, [r3, #0]
     b48:	009b      	lsls	r3, r3, #2
     b4a:	18d3      	adds	r3, r2, r3
     b4c:	681b      	ldr	r3, [r3, #0]
     b4e:	60bb      	str	r3, [r7, #8]

#if (0!=USB_DEVICE_MAX_EP)
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
     b50:	68bb      	ldr	r3, [r7, #8]
     b52:	68db      	ldr	r3, [r3, #12]
     b54:	4798      	blx	r3
     b56:	0003      	movs	r3, r0
     b58:	001a      	movs	r2, r3
     b5a:	1dfb      	adds	r3, r7, #7
     b5c:	781b      	ldrb	r3, [r3, #0]
     b5e:	0011      	movs	r1, r2
     b60:	0018      	movs	r0, r3
     b62:	4b13      	ldr	r3, [pc, #76]	; (bb0 <udc_iface_disable+0x9c>)
     b64:	4798      	blx	r3
     b66:	0003      	movs	r3, r0
     b68:	001a      	movs	r2, r3
     b6a:	2301      	movs	r3, #1
     b6c:	4053      	eors	r3, r2
     b6e:	b2db      	uxtb	r3, r3
     b70:	2b00      	cmp	r3, #0
     b72:	d001      	beq.n	b78 <udc_iface_disable+0x64>
		return false;
     b74:	2300      	movs	r3, #0
     b76:	e017      	b.n	ba8 <udc_iface_disable+0x94>
	}

	// Start at the beginning of interface descriptor
	{
		usb_ep_desc_t UDC_DESC_STORAGE *ep_desc;
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
     b78:	4b0f      	ldr	r3, [pc, #60]	; (bb8 <udc_iface_disable+0xa4>)
     b7a:	681b      	ldr	r3, [r3, #0]
     b7c:	60fb      	str	r3, [r7, #12]
		while (1) {
			// Search Endpoint descriptor included in global interface descriptor
			ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
     b7e:	68fb      	ldr	r3, [r7, #12]
     b80:	2105      	movs	r1, #5
     b82:	0018      	movs	r0, r3
     b84:	4b0d      	ldr	r3, [pc, #52]	; (bbc <udc_iface_disable+0xa8>)
     b86:	4798      	blx	r3
     b88:	0003      	movs	r3, r0
     b8a:	60fb      	str	r3, [r7, #12]
					udc_next_desc_in_iface((UDC_DESC_STORAGE
					usb_conf_desc_t *)
					ep_desc, USB_DT_ENDPOINT);
			if (NULL == ep_desc) {
     b8c:	68fb      	ldr	r3, [r7, #12]
     b8e:	2b00      	cmp	r3, #0
     b90:	d005      	beq.n	b9e <udc_iface_disable+0x8a>
				break;
			}
			// Free the endpoint used by the interface
			udd_ep_free(ep_desc->bEndpointAddress);
     b92:	68fb      	ldr	r3, [r7, #12]
     b94:	789b      	ldrb	r3, [r3, #2]
     b96:	0018      	movs	r0, r3
     b98:	4b09      	ldr	r3, [pc, #36]	; (bc0 <udc_iface_disable+0xac>)
     b9a:	4798      	blx	r3
			ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
     b9c:	e7ef      	b.n	b7e <udc_iface_disable+0x6a>
				break;
     b9e:	46c0      	nop			; (mov r8, r8)
		}
	}
#endif

	// Disable interface
	udi_api->disable();
     ba0:	68bb      	ldr	r3, [r7, #8]
     ba2:	685b      	ldr	r3, [r3, #4]
     ba4:	4798      	blx	r3
	return true;
     ba6:	2301      	movs	r3, #1
}
     ba8:	0018      	movs	r0, r3
     baa:	46bd      	mov	sp, r7
     bac:	b004      	add	sp, #16
     bae:	bd80      	pop	{r7, pc}
     bb0:	00000a71 	.word	0x00000a71
     bb4:	200004bc 	.word	0x200004bc
     bb8:	200004c0 	.word	0x200004c0
     bbc:	00000a0d 	.word	0x00000a0d
     bc0:	00002575 	.word	0x00002575

00000bc4 <udc_iface_enable>:
 * \param setting_num   Setting number to enable
 *
 * \return 1 if it is done or 0 if interface is not found
 */
static bool udc_iface_enable(uint8_t iface_num, uint8_t setting_num)
{
     bc4:	b580      	push	{r7, lr}
     bc6:	b084      	sub	sp, #16
     bc8:	af00      	add	r7, sp, #0
     bca:	0002      	movs	r2, r0
     bcc:	1dfb      	adds	r3, r7, #7
     bce:	701a      	strb	r2, [r3, #0]
     bd0:	1dbb      	adds	r3, r7, #6
     bd2:	1c0a      	adds	r2, r1, #0
     bd4:	701a      	strb	r2, [r3, #0]
	// Select the interface descriptor
	if (!udc_update_iface_desc(iface_num, setting_num)) {
     bd6:	1dbb      	adds	r3, r7, #6
     bd8:	781a      	ldrb	r2, [r3, #0]
     bda:	1dfb      	adds	r3, r7, #7
     bdc:	781b      	ldrb	r3, [r3, #0]
     bde:	0011      	movs	r1, r2
     be0:	0018      	movs	r0, r3
     be2:	4b1f      	ldr	r3, [pc, #124]	; (c60 <udc_iface_enable+0x9c>)
     be4:	4798      	blx	r3
     be6:	0003      	movs	r3, r0
     be8:	001a      	movs	r2, r3
     bea:	2301      	movs	r3, #1
     bec:	4053      	eors	r3, r2
     bee:	b2db      	uxtb	r3, r3
     bf0:	2b00      	cmp	r3, #0
     bf2:	d001      	beq.n	bf8 <udc_iface_enable+0x34>
		return false;
     bf4:	2300      	movs	r3, #0
     bf6:	e02e      	b.n	c56 <udc_iface_enable+0x92>

#if (0!=USB_DEVICE_MAX_EP)
	usb_ep_desc_t UDC_DESC_STORAGE *ep_desc;

	// Start at the beginning of the global interface descriptor
	ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
     bf8:	4b1a      	ldr	r3, [pc, #104]	; (c64 <udc_iface_enable+0xa0>)
     bfa:	681b      	ldr	r3, [r3, #0]
     bfc:	60fb      	str	r3, [r7, #12]
	while (1) {
		// Search Endpoint descriptor included in the global interface descriptor
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
     bfe:	68fb      	ldr	r3, [r7, #12]
     c00:	2105      	movs	r1, #5
     c02:	0018      	movs	r0, r3
     c04:	4b18      	ldr	r3, [pc, #96]	; (c68 <udc_iface_enable+0xa4>)
     c06:	4798      	blx	r3
     c08:	0003      	movs	r3, r0
     c0a:	60fb      	str	r3, [r7, #12]
				udc_next_desc_in_iface((UDC_DESC_STORAGE
						usb_conf_desc_t *) ep_desc,
				USB_DT_ENDPOINT);
		if (NULL == ep_desc)
     c0c:	68fb      	ldr	r3, [r7, #12]
     c0e:	2b00      	cmp	r3, #0
     c10:	d015      	beq.n	c3e <udc_iface_enable+0x7a>
			break;
		// Alloc the endpoint used by the interface
		if (!udd_ep_alloc(ep_desc->bEndpointAddress,
     c12:	68fb      	ldr	r3, [r7, #12]
     c14:	7898      	ldrb	r0, [r3, #2]
     c16:	68fb      	ldr	r3, [r7, #12]
     c18:	78d9      	ldrb	r1, [r3, #3]
     c1a:	68fb      	ldr	r3, [r7, #12]
     c1c:	791a      	ldrb	r2, [r3, #4]
     c1e:	795b      	ldrb	r3, [r3, #5]
     c20:	021b      	lsls	r3, r3, #8
     c22:	4313      	orrs	r3, r2
     c24:	b29b      	uxth	r3, r3
     c26:	001a      	movs	r2, r3
     c28:	4b10      	ldr	r3, [pc, #64]	; (c6c <udc_iface_enable+0xa8>)
     c2a:	4798      	blx	r3
     c2c:	0003      	movs	r3, r0
     c2e:	001a      	movs	r2, r3
     c30:	2301      	movs	r3, #1
     c32:	4053      	eors	r3, r2
     c34:	b2db      	uxtb	r3, r3
     c36:	2b00      	cmp	r3, #0
     c38:	d0e1      	beq.n	bfe <udc_iface_enable+0x3a>
				ep_desc->bmAttributes,
				le16_to_cpu
				(ep_desc->wMaxPacketSize))) {
			return false;
     c3a:	2300      	movs	r3, #0
     c3c:	e00b      	b.n	c56 <udc_iface_enable+0x92>
			break;
     c3e:	46c0      	nop			; (mov r8, r8)
		}
	}
#endif
	// Enable the interface
	return udc_ptr_conf->udi_apis[iface_num]->enable();
     c40:	4b0b      	ldr	r3, [pc, #44]	; (c70 <udc_iface_enable+0xac>)
     c42:	681b      	ldr	r3, [r3, #0]
     c44:	685a      	ldr	r2, [r3, #4]
     c46:	1dfb      	adds	r3, r7, #7
     c48:	781b      	ldrb	r3, [r3, #0]
     c4a:	009b      	lsls	r3, r3, #2
     c4c:	18d3      	adds	r3, r2, r3
     c4e:	681b      	ldr	r3, [r3, #0]
     c50:	681b      	ldr	r3, [r3, #0]
     c52:	4798      	blx	r3
     c54:	0003      	movs	r3, r0
}
     c56:	0018      	movs	r0, r3
     c58:	46bd      	mov	sp, r7
     c5a:	b004      	add	sp, #16
     c5c:	bd80      	pop	{r7, pc}
     c5e:	46c0      	nop			; (mov r8, r8)
     c60:	00000a71 	.word	0x00000a71
     c64:	200004c0 	.word	0x200004c0
     c68:	00000a0d 	.word	0x00000a0d
     c6c:	00002601 	.word	0x00002601
     c70:	200004bc 	.word	0x200004bc

00000c74 <udc_start>:

/*! \brief Start the USB Device stack
 */
void udc_start(void)
{
     c74:	b580      	push	{r7, lr}
     c76:	af00      	add	r7, sp, #0
	udd_enable();
     c78:	4b02      	ldr	r3, [pc, #8]	; (c84 <udc_start+0x10>)
     c7a:	4798      	blx	r3
}
     c7c:	46c0      	nop			; (mov r8, r8)
     c7e:	46bd      	mov	sp, r7
     c80:	bd80      	pop	{r7, pc}
     c82:	46c0      	nop			; (mov r8, r8)
     c84:	000033e5 	.word	0x000033e5

00000c88 <udc_reset>:
/**
 * \brief Reset the current configuration of the USB device,
 * This routines can be called by UDD when a RESET on the USB line occurs.
 */
void udc_reset(void)
{
     c88:	b580      	push	{r7, lr}
     c8a:	b082      	sub	sp, #8
     c8c:	af00      	add	r7, sp, #0
	uint8_t iface_num;

	if (udc_num_configuration) {
     c8e:	4b16      	ldr	r3, [pc, #88]	; (ce8 <udc_reset+0x60>)
     c90:	781b      	ldrb	r3, [r3, #0]
     c92:	2b00      	cmp	r3, #0
     c94:	d015      	beq.n	cc2 <udc_reset+0x3a>
		for (iface_num = 0;
     c96:	1dfb      	adds	r3, r7, #7
     c98:	2200      	movs	r2, #0
     c9a:	701a      	strb	r2, [r3, #0]
     c9c:	e009      	b.n	cb2 <udc_reset+0x2a>
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
			udc_iface_disable(iface_num);
     c9e:	1dfb      	adds	r3, r7, #7
     ca0:	781b      	ldrb	r3, [r3, #0]
     ca2:	0018      	movs	r0, r3
     ca4:	4b11      	ldr	r3, [pc, #68]	; (cec <udc_reset+0x64>)
     ca6:	4798      	blx	r3
				iface_num++) {
     ca8:	1dfb      	adds	r3, r7, #7
     caa:	781a      	ldrb	r2, [r3, #0]
     cac:	1dfb      	adds	r3, r7, #7
     cae:	3201      	adds	r2, #1
     cb0:	701a      	strb	r2, [r3, #0]
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
     cb2:	4b0f      	ldr	r3, [pc, #60]	; (cf0 <udc_reset+0x68>)
     cb4:	681b      	ldr	r3, [r3, #0]
     cb6:	681b      	ldr	r3, [r3, #0]
     cb8:	791b      	ldrb	r3, [r3, #4]
		for (iface_num = 0;
     cba:	1dfa      	adds	r2, r7, #7
     cbc:	7812      	ldrb	r2, [r2, #0]
     cbe:	429a      	cmp	r2, r3
     cc0:	d3ed      	bcc.n	c9e <udc_reset+0x16>
		}
	}
	udc_num_configuration = 0;
     cc2:	4b09      	ldr	r3, [pc, #36]	; (ce8 <udc_reset+0x60>)
     cc4:	2200      	movs	r2, #0
     cc6:	701a      	strb	r2, [r3, #0]
#if (USB_CONFIG_ATTR_REMOTE_WAKEUP \
	== (USB_DEVICE_ATTR & USB_CONFIG_ATTR_REMOTE_WAKEUP))
	if (CPU_TO_LE16(USB_DEV_STATUS_REMOTEWAKEUP) & udc_device_status) {
     cc8:	4b0a      	ldr	r3, [pc, #40]	; (cf4 <udc_reset+0x6c>)
     cca:	881b      	ldrh	r3, [r3, #0]
     ccc:	2202      	movs	r2, #2
     cce:	4013      	ands	r3, r2
     cd0:	b29b      	uxth	r3, r3
     cd2:	2b00      	cmp	r3, #0
     cd4:	d001      	beq.n	cda <udc_reset+0x52>
		// Remote wakeup is enabled then disable it
		UDC_REMOTEWAKEUP_DISABLE();
     cd6:	4b08      	ldr	r3, [pc, #32]	; (cf8 <udc_reset+0x70>)
     cd8:	4798      	blx	r3
	}
#endif
	udc_device_status =
     cda:	4b06      	ldr	r3, [pc, #24]	; (cf4 <udc_reset+0x6c>)
     cdc:	2200      	movs	r2, #0
     cde:	801a      	strh	r2, [r3, #0]
#if (USB_DEVICE_ATTR & USB_CONFIG_ATTR_SELF_POWERED)
			CPU_TO_LE16(USB_DEV_STATUS_SELF_POWERED);
#else
			CPU_TO_LE16(USB_DEV_STATUS_BUS_POWERED);
#endif
}
     ce0:	46c0      	nop			; (mov r8, r8)
     ce2:	46bd      	mov	sp, r7
     ce4:	b002      	add	sp, #8
     ce6:	bd80      	pop	{r7, pc}
     ce8:	200004b8 	.word	0x200004b8
     cec:	00000b15 	.word	0x00000b15
     cf0:	200004bc 	.word	0x200004bc
     cf4:	200004b0 	.word	0x200004b0
     cf8:	00017849 	.word	0x00017849

00000cfc <udc_sof_notify>:

void udc_sof_notify(void)
{
     cfc:	b580      	push	{r7, lr}
     cfe:	b082      	sub	sp, #8
     d00:	af00      	add	r7, sp, #0
	uint8_t iface_num;

	if (udc_num_configuration) {
     d02:	4b17      	ldr	r3, [pc, #92]	; (d60 <udc_sof_notify+0x64>)
     d04:	781b      	ldrb	r3, [r3, #0]
     d06:	2b00      	cmp	r3, #0
     d08:	d025      	beq.n	d56 <udc_sof_notify+0x5a>
		for (iface_num = 0;
     d0a:	1dfb      	adds	r3, r7, #7
     d0c:	2200      	movs	r2, #0
     d0e:	701a      	strb	r2, [r3, #0]
     d10:	e019      	b.n	d46 <udc_sof_notify+0x4a>
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
     d12:	4b14      	ldr	r3, [pc, #80]	; (d64 <udc_sof_notify+0x68>)
     d14:	681b      	ldr	r3, [r3, #0]
     d16:	685a      	ldr	r2, [r3, #4]
     d18:	1dfb      	adds	r3, r7, #7
     d1a:	781b      	ldrb	r3, [r3, #0]
     d1c:	009b      	lsls	r3, r3, #2
     d1e:	18d3      	adds	r3, r2, r3
     d20:	681b      	ldr	r3, [r3, #0]
     d22:	691b      	ldr	r3, [r3, #16]
     d24:	2b00      	cmp	r3, #0
     d26:	d009      	beq.n	d3c <udc_sof_notify+0x40>
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
     d28:	4b0e      	ldr	r3, [pc, #56]	; (d64 <udc_sof_notify+0x68>)
     d2a:	681b      	ldr	r3, [r3, #0]
     d2c:	685a      	ldr	r2, [r3, #4]
     d2e:	1dfb      	adds	r3, r7, #7
     d30:	781b      	ldrb	r3, [r3, #0]
     d32:	009b      	lsls	r3, r3, #2
     d34:	18d3      	adds	r3, r2, r3
     d36:	681b      	ldr	r3, [r3, #0]
     d38:	691b      	ldr	r3, [r3, #16]
     d3a:	4798      	blx	r3
				iface_num++) {
     d3c:	1dfb      	adds	r3, r7, #7
     d3e:	781a      	ldrb	r2, [r3, #0]
     d40:	1dfb      	adds	r3, r7, #7
     d42:	3201      	adds	r2, #1
     d44:	701a      	strb	r2, [r3, #0]
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
     d46:	4b07      	ldr	r3, [pc, #28]	; (d64 <udc_sof_notify+0x68>)
     d48:	681b      	ldr	r3, [r3, #0]
     d4a:	681b      	ldr	r3, [r3, #0]
     d4c:	791b      	ldrb	r3, [r3, #4]
		for (iface_num = 0;
     d4e:	1dfa      	adds	r2, r7, #7
     d50:	7812      	ldrb	r2, [r2, #0]
     d52:	429a      	cmp	r2, r3
     d54:	d3dd      	bcc.n	d12 <udc_sof_notify+0x16>
			}
		}
	}
}
     d56:	46c0      	nop			; (mov r8, r8)
     d58:	46bd      	mov	sp, r7
     d5a:	b002      	add	sp, #8
     d5c:	bd80      	pop	{r7, pc}
     d5e:	46c0      	nop			; (mov r8, r8)
     d60:	200004b8 	.word	0x200004b8
     d64:	200004bc 	.word	0x200004bc

00000d68 <udc_req_std_dev_get_status>:
 * \brief Standard device request to get device status
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_status(void)
{
     d68:	b580      	push	{r7, lr}
     d6a:	af00      	add	r7, sp, #0
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_device_status)) {
     d6c:	4b07      	ldr	r3, [pc, #28]	; (d8c <udc_req_std_dev_get_status+0x24>)
     d6e:	88db      	ldrh	r3, [r3, #6]
     d70:	2b02      	cmp	r3, #2
     d72:	d001      	beq.n	d78 <udc_req_std_dev_get_status+0x10>
		return false;
     d74:	2300      	movs	r3, #0
     d76:	e005      	b.n	d84 <udc_req_std_dev_get_status+0x1c>
	}

	udd_set_setup_payload( (uint8_t *) & udc_device_status,
     d78:	4b05      	ldr	r3, [pc, #20]	; (d90 <udc_req_std_dev_get_status+0x28>)
     d7a:	2102      	movs	r1, #2
     d7c:	0018      	movs	r0, r3
     d7e:	4b05      	ldr	r3, [pc, #20]	; (d94 <udc_req_std_dev_get_status+0x2c>)
     d80:	4798      	blx	r3
			sizeof(udc_device_status));
	return true;
     d82:	2301      	movs	r3, #1
}
     d84:	0018      	movs	r0, r3
     d86:	46bd      	mov	sp, r7
     d88:	bd80      	pop	{r7, pc}
     d8a:	46c0      	nop			; (mov r8, r8)
     d8c:	200028cc 	.word	0x200028cc
     d90:	200004b0 	.word	0x200004b0
     d94:	00002c09 	.word	0x00002c09

00000d98 <udc_req_std_ep_get_status>:
 * \brief Standard endpoint request to get endpoint status
 *
 * \return true if success
 */
static bool udc_req_std_ep_get_status(void)
{
     d98:	b580      	push	{r7, lr}
     d9a:	af00      	add	r7, sp, #0
	static le16_t udc_ep_status;

	if (udd_g_ctrlreq.req.wLength != sizeof(udc_ep_status)) {
     d9c:	4b0c      	ldr	r3, [pc, #48]	; (dd0 <udc_req_std_ep_get_status+0x38>)
     d9e:	88db      	ldrh	r3, [r3, #6]
     da0:	2b02      	cmp	r3, #2
     da2:	d001      	beq.n	da8 <udc_req_std_ep_get_status+0x10>
		return false;
     da4:	2300      	movs	r3, #0
     da6:	e00f      	b.n	dc8 <udc_req_std_ep_get_status+0x30>
	}

	udc_ep_status = udd_ep_is_halted(udd_g_ctrlreq.req.
     da8:	4b09      	ldr	r3, [pc, #36]	; (dd0 <udc_req_std_ep_get_status+0x38>)
     daa:	889b      	ldrh	r3, [r3, #4]
     dac:	b2db      	uxtb	r3, r3
     dae:	0018      	movs	r0, r3
     db0:	4b08      	ldr	r3, [pc, #32]	; (dd4 <udc_req_std_ep_get_status+0x3c>)
     db2:	4798      	blx	r3
     db4:	0003      	movs	r3, r0
			wIndex & 0xFF) ? CPU_TO_LE16(USB_EP_STATUS_HALTED) : 0;
     db6:	b29a      	uxth	r2, r3
	udc_ep_status = udd_ep_is_halted(udd_g_ctrlreq.req.
     db8:	4b07      	ldr	r3, [pc, #28]	; (dd8 <udc_req_std_ep_get_status+0x40>)
     dba:	801a      	strh	r2, [r3, #0]

	udd_set_setup_payload( (uint8_t *) & udc_ep_status,
     dbc:	4b06      	ldr	r3, [pc, #24]	; (dd8 <udc_req_std_ep_get_status+0x40>)
     dbe:	2102      	movs	r1, #2
     dc0:	0018      	movs	r0, r3
     dc2:	4b06      	ldr	r3, [pc, #24]	; (ddc <udc_req_std_ep_get_status+0x44>)
     dc4:	4798      	blx	r3
			sizeof(udc_ep_status));
	return true;
     dc6:	2301      	movs	r3, #1
}
     dc8:	0018      	movs	r0, r3
     dca:	46bd      	mov	sp, r7
     dcc:	bd80      	pop	{r7, pc}
     dce:	46c0      	nop			; (mov r8, r8)
     dd0:	200028cc 	.word	0x200028cc
     dd4:	000027a9 	.word	0x000027a9
     dd8:	200004c4 	.word	0x200004c4
     ddc:	00002c09 	.word	0x00002c09

00000de0 <udc_req_std_dev_clear_feature>:
 * \brief Standard device request to change device status
 *
 * \return true if success
 */
static bool udc_req_std_dev_clear_feature(void)
{
     de0:	b580      	push	{r7, lr}
     de2:	af00      	add	r7, sp, #0
	if (udd_g_ctrlreq.req.wLength) {
     de4:	4b0c      	ldr	r3, [pc, #48]	; (e18 <udc_req_std_dev_clear_feature+0x38>)
     de6:	88db      	ldrh	r3, [r3, #6]
     de8:	2b00      	cmp	r3, #0
     dea:	d001      	beq.n	df0 <udc_req_std_dev_clear_feature+0x10>
		return false;
     dec:	2300      	movs	r3, #0
     dee:	e00f      	b.n	e10 <udc_req_std_dev_clear_feature+0x30>
	}

	if (udd_g_ctrlreq.req.wValue == USB_DEV_FEATURE_REMOTE_WAKEUP) {
     df0:	4b09      	ldr	r3, [pc, #36]	; (e18 <udc_req_std_dev_clear_feature+0x38>)
     df2:	885b      	ldrh	r3, [r3, #2]
     df4:	2b01      	cmp	r3, #1
     df6:	d10a      	bne.n	e0e <udc_req_std_dev_clear_feature+0x2e>
		udc_device_status &= CPU_TO_LE16(~(uint32_t)USB_DEV_STATUS_REMOTEWAKEUP);
     df8:	4b08      	ldr	r3, [pc, #32]	; (e1c <udc_req_std_dev_clear_feature+0x3c>)
     dfa:	881b      	ldrh	r3, [r3, #0]
     dfc:	2202      	movs	r2, #2
     dfe:	4393      	bics	r3, r2
     e00:	b29a      	uxth	r2, r3
     e02:	4b06      	ldr	r3, [pc, #24]	; (e1c <udc_req_std_dev_clear_feature+0x3c>)
     e04:	801a      	strh	r2, [r3, #0]
#if (USB_CONFIG_ATTR_REMOTE_WAKEUP \
	== (USB_DEVICE_ATTR & USB_CONFIG_ATTR_REMOTE_WAKEUP))
		UDC_REMOTEWAKEUP_DISABLE();
     e06:	4b06      	ldr	r3, [pc, #24]	; (e20 <udc_req_std_dev_clear_feature+0x40>)
     e08:	4798      	blx	r3
#endif
		return true;
     e0a:	2301      	movs	r3, #1
     e0c:	e000      	b.n	e10 <udc_req_std_dev_clear_feature+0x30>
	}
	return false;
     e0e:	2300      	movs	r3, #0
}
     e10:	0018      	movs	r0, r3
     e12:	46bd      	mov	sp, r7
     e14:	bd80      	pop	{r7, pc}
     e16:	46c0      	nop			; (mov r8, r8)
     e18:	200028cc 	.word	0x200028cc
     e1c:	200004b0 	.word	0x200004b0
     e20:	00017849 	.word	0x00017849

00000e24 <udc_req_std_ep_clear_feature>:
 * \brief Standard endpoint request to clear endpoint feature
 *
 * \return true if success
 */
static bool udc_req_std_ep_clear_feature(void)
{
     e24:	b580      	push	{r7, lr}
     e26:	af00      	add	r7, sp, #0
	if (udd_g_ctrlreq.req.wLength) {
     e28:	4b0a      	ldr	r3, [pc, #40]	; (e54 <udc_req_std_ep_clear_feature+0x30>)
     e2a:	88db      	ldrh	r3, [r3, #6]
     e2c:	2b00      	cmp	r3, #0
     e2e:	d001      	beq.n	e34 <udc_req_std_ep_clear_feature+0x10>
		return false;
     e30:	2300      	movs	r3, #0
     e32:	e00c      	b.n	e4e <udc_req_std_ep_clear_feature+0x2a>
	}

	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
     e34:	4b07      	ldr	r3, [pc, #28]	; (e54 <udc_req_std_ep_clear_feature+0x30>)
     e36:	885b      	ldrh	r3, [r3, #2]
     e38:	2b00      	cmp	r3, #0
     e3a:	d107      	bne.n	e4c <udc_req_std_ep_clear_feature+0x28>
		return udd_ep_clear_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
     e3c:	4b05      	ldr	r3, [pc, #20]	; (e54 <udc_req_std_ep_clear_feature+0x30>)
     e3e:	889b      	ldrh	r3, [r3, #4]
     e40:	b2db      	uxtb	r3, r3
     e42:	0018      	movs	r0, r3
     e44:	4b04      	ldr	r3, [pc, #16]	; (e58 <udc_req_std_ep_clear_feature+0x34>)
     e46:	4798      	blx	r3
     e48:	0003      	movs	r3, r0
     e4a:	e000      	b.n	e4e <udc_req_std_ep_clear_feature+0x2a>
	}
	return false;
     e4c:	2300      	movs	r3, #0
}
     e4e:	0018      	movs	r0, r3
     e50:	46bd      	mov	sp, r7
     e52:	bd80      	pop	{r7, pc}
     e54:	200028cc 	.word	0x200028cc
     e58:	0000282d 	.word	0x0000282d

00000e5c <udc_req_std_dev_set_feature>:
 * \brief Standard device request to set a feature
 *
 * \return true if success
 */
static bool udc_req_std_dev_set_feature(void)
{
     e5c:	b580      	push	{r7, lr}
     e5e:	af00      	add	r7, sp, #0
	if (udd_g_ctrlreq.req.wLength) {
     e60:	4b0c      	ldr	r3, [pc, #48]	; (e94 <udc_req_std_dev_set_feature+0x38>)
     e62:	88db      	ldrh	r3, [r3, #6]
     e64:	2b00      	cmp	r3, #0
     e66:	d001      	beq.n	e6c <udc_req_std_dev_set_feature+0x10>
		return false;
     e68:	2300      	movs	r3, #0
     e6a:	e010      	b.n	e8e <udc_req_std_dev_set_feature+0x32>
	}

	switch (udd_g_ctrlreq.req.wValue) {
     e6c:	4b09      	ldr	r3, [pc, #36]	; (e94 <udc_req_std_dev_set_feature+0x38>)
     e6e:	885b      	ldrh	r3, [r3, #2]
     e70:	2b01      	cmp	r3, #1
     e72:	d002      	beq.n	e7a <udc_req_std_dev_set_feature+0x1e>
			break;
		}
		break;
#endif
	default:
		break;
     e74:	46c0      	nop			; (mov r8, r8)
	}
	return false;
     e76:	2300      	movs	r3, #0
     e78:	e009      	b.n	e8e <udc_req_std_dev_set_feature+0x32>
		udc_device_status |= CPU_TO_LE16(USB_DEV_STATUS_REMOTEWAKEUP);
     e7a:	4b07      	ldr	r3, [pc, #28]	; (e98 <udc_req_std_dev_set_feature+0x3c>)
     e7c:	881b      	ldrh	r3, [r3, #0]
     e7e:	2202      	movs	r2, #2
     e80:	4313      	orrs	r3, r2
     e82:	b29a      	uxth	r2, r3
     e84:	4b04      	ldr	r3, [pc, #16]	; (e98 <udc_req_std_dev_set_feature+0x3c>)
     e86:	801a      	strh	r2, [r3, #0]
		UDC_REMOTEWAKEUP_ENABLE();
     e88:	4b04      	ldr	r3, [pc, #16]	; (e9c <udc_req_std_dev_set_feature+0x40>)
     e8a:	4798      	blx	r3
		return true;
     e8c:	2301      	movs	r3, #1
}
     e8e:	0018      	movs	r0, r3
     e90:	46bd      	mov	sp, r7
     e92:	bd80      	pop	{r7, pc}
     e94:	200028cc 	.word	0x200028cc
     e98:	200004b0 	.word	0x200004b0
     e9c:	00017853 	.word	0x00017853

00000ea0 <udc_req_std_ep_set_feature>:
 *
 * \return true if success
 */
#if (0!=USB_DEVICE_MAX_EP)
static bool udc_req_std_ep_set_feature(void)
{
     ea0:	b580      	push	{r7, lr}
     ea2:	af00      	add	r7, sp, #0
	if (udd_g_ctrlreq.req.wLength) {
     ea4:	4b0d      	ldr	r3, [pc, #52]	; (edc <udc_req_std_ep_set_feature+0x3c>)
     ea6:	88db      	ldrh	r3, [r3, #6]
     ea8:	2b00      	cmp	r3, #0
     eaa:	d001      	beq.n	eb0 <udc_req_std_ep_set_feature+0x10>
		return false;
     eac:	2300      	movs	r3, #0
     eae:	e012      	b.n	ed6 <udc_req_std_ep_set_feature+0x36>
	}
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
     eb0:	4b0a      	ldr	r3, [pc, #40]	; (edc <udc_req_std_ep_set_feature+0x3c>)
     eb2:	885b      	ldrh	r3, [r3, #2]
     eb4:	2b00      	cmp	r3, #0
     eb6:	d10d      	bne.n	ed4 <udc_req_std_ep_set_feature+0x34>
		udd_ep_abort(udd_g_ctrlreq.req.wIndex & 0xFF);
     eb8:	4b08      	ldr	r3, [pc, #32]	; (edc <udc_req_std_ep_set_feature+0x3c>)
     eba:	889b      	ldrh	r3, [r3, #4]
     ebc:	b2db      	uxtb	r3, r3
     ebe:	0018      	movs	r0, r3
     ec0:	4b07      	ldr	r3, [pc, #28]	; (ee0 <udc_req_std_ep_set_feature+0x40>)
     ec2:	4798      	blx	r3
		return udd_ep_set_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
     ec4:	4b05      	ldr	r3, [pc, #20]	; (edc <udc_req_std_ep_set_feature+0x3c>)
     ec6:	889b      	ldrh	r3, [r3, #4]
     ec8:	b2db      	uxtb	r3, r3
     eca:	0018      	movs	r0, r3
     ecc:	4b05      	ldr	r3, [pc, #20]	; (ee4 <udc_req_std_ep_set_feature+0x44>)
     ece:	4798      	blx	r3
     ed0:	0003      	movs	r3, r0
     ed2:	e000      	b.n	ed6 <udc_req_std_ep_set_feature+0x36>
	}
	return false;
     ed4:	2300      	movs	r3, #0
}
     ed6:	0018      	movs	r0, r3
     ed8:	46bd      	mov	sp, r7
     eda:	bd80      	pop	{r7, pc}
     edc:	200028cc 	.word	0x200028cc
     ee0:	00002505 	.word	0x00002505
     ee4:	000027d5 	.word	0x000027d5

00000ee8 <udc_valid_address>:
/**
 * \brief Change the address of device
 * Callback called at the end of request set address
 */
static void udc_valid_address(void)
{
     ee8:	b580      	push	{r7, lr}
     eea:	af00      	add	r7, sp, #0
	udd_set_address(udd_g_ctrlreq.req.wValue & 0x7F);
     eec:	4b05      	ldr	r3, [pc, #20]	; (f04 <udc_valid_address+0x1c>)
     eee:	885b      	ldrh	r3, [r3, #2]
     ef0:	b2db      	uxtb	r3, r3
     ef2:	227f      	movs	r2, #127	; 0x7f
     ef4:	4013      	ands	r3, r2
     ef6:	b2db      	uxtb	r3, r3
     ef8:	0018      	movs	r0, r3
     efa:	4b03      	ldr	r3, [pc, #12]	; (f08 <udc_valid_address+0x20>)
     efc:	4798      	blx	r3
}
     efe:	46c0      	nop			; (mov r8, r8)
     f00:	46bd      	mov	sp, r7
     f02:	bd80      	pop	{r7, pc}
     f04:	200028cc 	.word	0x200028cc
     f08:	00002bc1 	.word	0x00002bc1

00000f0c <udc_req_std_dev_set_address>:
 * \brief Standard device request to set device address
 *
 * \return true if success
 */
static bool udc_req_std_dev_set_address(void)
{
     f0c:	b580      	push	{r7, lr}
     f0e:	af00      	add	r7, sp, #0
	if (udd_g_ctrlreq.req.wLength) {
     f10:	4b06      	ldr	r3, [pc, #24]	; (f2c <udc_req_std_dev_set_address+0x20>)
     f12:	88db      	ldrh	r3, [r3, #6]
     f14:	2b00      	cmp	r3, #0
     f16:	d001      	beq.n	f1c <udc_req_std_dev_set_address+0x10>
		return false;
     f18:	2300      	movs	r3, #0
     f1a:	e003      	b.n	f24 <udc_req_std_dev_set_address+0x18>
	}

	// The address must be changed at the end of setup request after the handshake
	// then we use a callback to change address
	udd_g_ctrlreq.callback = udc_valid_address;
     f1c:	4b03      	ldr	r3, [pc, #12]	; (f2c <udc_req_std_dev_set_address+0x20>)
     f1e:	4a04      	ldr	r2, [pc, #16]	; (f30 <udc_req_std_dev_set_address+0x24>)
     f20:	611a      	str	r2, [r3, #16]
	return true;
     f22:	2301      	movs	r3, #1
}
     f24:	0018      	movs	r0, r3
     f26:	46bd      	mov	sp, r7
     f28:	bd80      	pop	{r7, pc}
     f2a:	46c0      	nop			; (mov r8, r8)
     f2c:	200028cc 	.word	0x200028cc
     f30:	00000ee9 	.word	0x00000ee9

00000f34 <udc_req_std_dev_get_str_desc>:
 * \brief Standard device request to get device string descriptor
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_str_desc(void)
{
     f34:	b580      	push	{r7, lr}
     f36:	b084      	sub	sp, #16
     f38:	af00      	add	r7, sp, #0
	uint8_t i;
	const uint8_t *str;
	uint8_t str_length = 0;
     f3a:	1dfb      	adds	r3, r7, #7
     f3c:	2200      	movs	r2, #0
     f3e:	701a      	strb	r2, [r3, #0]

	// Link payload pointer to the string corresponding at request
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
     f40:	4b2d      	ldr	r3, [pc, #180]	; (ff8 <udc_req_std_dev_get_str_desc+0xc4>)
     f42:	885b      	ldrh	r3, [r3, #2]
     f44:	001a      	movs	r2, r3
     f46:	23ff      	movs	r3, #255	; 0xff
     f48:	4013      	ands	r3, r2
     f4a:	2b01      	cmp	r3, #1
     f4c:	d009      	beq.n	f62 <udc_req_std_dev_get_str_desc+0x2e>
     f4e:	2b02      	cmp	r3, #2
     f50:	d00d      	beq.n	f6e <udc_req_std_dev_get_str_desc+0x3a>
     f52:	2b00      	cmp	r3, #0
     f54:	d111      	bne.n	f7a <udc_req_std_dev_get_str_desc+0x46>
	case 0:
		udd_set_setup_payload((uint8_t *) &udc_string_desc_languageid,
     f56:	4b29      	ldr	r3, [pc, #164]	; (ffc <udc_req_std_dev_get_str_desc+0xc8>)
     f58:	2104      	movs	r1, #4
     f5a:	0018      	movs	r0, r3
     f5c:	4b28      	ldr	r3, [pc, #160]	; (1000 <udc_req_std_dev_get_str_desc+0xcc>)
     f5e:	4798      	blx	r3
				sizeof(udc_string_desc_languageid));
		break;
     f60:	e00d      	b.n	f7e <udc_req_std_dev_get_str_desc+0x4a>

#ifdef USB_DEVICE_MANUFACTURE_NAME
	case 1:
		str_length = USB_DEVICE_MANUFACTURE_NAME_SIZE;
     f62:	1dfb      	adds	r3, r7, #7
     f64:	2219      	movs	r2, #25
     f66:	701a      	strb	r2, [r3, #0]
		str = udc_string_manufacturer_name;
     f68:	4b26      	ldr	r3, [pc, #152]	; (1004 <udc_req_std_dev_get_str_desc+0xd0>)
     f6a:	60bb      	str	r3, [r7, #8]
		break;
     f6c:	e007      	b.n	f7e <udc_req_std_dev_get_str_desc+0x4a>
#endif
#ifdef USB_DEVICE_PRODUCT_NAME
	case 2:
		str_length = USB_DEVICE_PRODUCT_NAME_SIZE;
     f6e:	1dfb      	adds	r3, r7, #7
     f70:	2214      	movs	r2, #20
     f72:	701a      	strb	r2, [r3, #0]
		str = udc_string_product_name;
     f74:	4b24      	ldr	r3, [pc, #144]	; (1008 <udc_req_std_dev_get_str_desc+0xd4>)
     f76:	60bb      	str	r3, [r7, #8]
		break;
     f78:	e001      	b.n	f7e <udc_req_std_dev_get_str_desc+0x4a>
#ifdef UDC_GET_EXTRA_STRING
		if (UDC_GET_EXTRA_STRING()) {
			break;
		}
#endif
		return false;
     f7a:	2300      	movs	r3, #0
     f7c:	e037      	b.n	fee <udc_req_std_dev_get_str_desc+0xba>
	}

	if (str_length) {
     f7e:	1dfb      	adds	r3, r7, #7
     f80:	781b      	ldrb	r3, [r3, #0]
     f82:	2b00      	cmp	r3, #0
     f84:	d032      	beq.n	fec <udc_req_std_dev_get_str_desc+0xb8>
		for(i = 0; i < str_length; i++) {
     f86:	230f      	movs	r3, #15
     f88:	18fb      	adds	r3, r7, r3
     f8a:	2200      	movs	r2, #0
     f8c:	701a      	strb	r2, [r3, #0]
     f8e:	e016      	b.n	fbe <udc_req_std_dev_get_str_desc+0x8a>
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
     f90:	230f      	movs	r3, #15
     f92:	18fb      	adds	r3, r7, r3
     f94:	781b      	ldrb	r3, [r3, #0]
     f96:	220f      	movs	r2, #15
     f98:	18ba      	adds	r2, r7, r2
     f9a:	7812      	ldrb	r2, [r2, #0]
     f9c:	68b9      	ldr	r1, [r7, #8]
     f9e:	188a      	adds	r2, r1, r2
     fa0:	7812      	ldrb	r2, [r2, #0]
     fa2:	b291      	uxth	r1, r2
     fa4:	4a19      	ldr	r2, [pc, #100]	; (100c <udc_req_std_dev_get_str_desc+0xd8>)
     fa6:	005b      	lsls	r3, r3, #1
     fa8:	18d3      	adds	r3, r2, r3
     faa:	3302      	adds	r3, #2
     fac:	1c0a      	adds	r2, r1, #0
     fae:	801a      	strh	r2, [r3, #0]
		for(i = 0; i < str_length; i++) {
     fb0:	230f      	movs	r3, #15
     fb2:	18fb      	adds	r3, r7, r3
     fb4:	781a      	ldrb	r2, [r3, #0]
     fb6:	230f      	movs	r3, #15
     fb8:	18fb      	adds	r3, r7, r3
     fba:	3201      	adds	r2, #1
     fbc:	701a      	strb	r2, [r3, #0]
     fbe:	230f      	movs	r3, #15
     fc0:	18fa      	adds	r2, r7, r3
     fc2:	1dfb      	adds	r3, r7, #7
     fc4:	7812      	ldrb	r2, [r2, #0]
     fc6:	781b      	ldrb	r3, [r3, #0]
     fc8:	429a      	cmp	r2, r3
     fca:	d3e1      	bcc.n	f90 <udc_req_std_dev_get_str_desc+0x5c>
		}

		udc_string_desc.header.bLength = 2 + (str_length) * 2;
     fcc:	1dfb      	adds	r3, r7, #7
     fce:	781b      	ldrb	r3, [r3, #0]
     fd0:	3301      	adds	r3, #1
     fd2:	b2db      	uxtb	r3, r3
     fd4:	18db      	adds	r3, r3, r3
     fd6:	b2da      	uxtb	r2, r3
     fd8:	4b0c      	ldr	r3, [pc, #48]	; (100c <udc_req_std_dev_get_str_desc+0xd8>)
     fda:	701a      	strb	r2, [r3, #0]
		udd_set_setup_payload(
			(uint8_t *) &udc_string_desc,
			udc_string_desc.header.bLength);
     fdc:	4b0b      	ldr	r3, [pc, #44]	; (100c <udc_req_std_dev_get_str_desc+0xd8>)
     fde:	781b      	ldrb	r3, [r3, #0]
		udd_set_setup_payload(
     fe0:	b29a      	uxth	r2, r3
     fe2:	4b0a      	ldr	r3, [pc, #40]	; (100c <udc_req_std_dev_get_str_desc+0xd8>)
     fe4:	0011      	movs	r1, r2
     fe6:	0018      	movs	r0, r3
     fe8:	4b05      	ldr	r3, [pc, #20]	; (1000 <udc_req_std_dev_get_str_desc+0xcc>)
     fea:	4798      	blx	r3
	}

	return true;
     fec:	2301      	movs	r3, #1
}
     fee:	0018      	movs	r0, r3
     ff0:	46bd      	mov	sp, r7
     ff2:	b004      	add	sp, #16
     ff4:	bd80      	pop	{r7, pc}
     ff6:	46c0      	nop			; (mov r8, r8)
     ff8:	200028cc 	.word	0x200028cc
     ffc:	200000b0 	.word	0x200000b0
    1000:	00002c09 	.word	0x00002c09
    1004:	200000b4 	.word	0x200000b4
    1008:	200000d0 	.word	0x200000d0
    100c:	200000e8 	.word	0x200000e8

00001010 <udc_req_std_dev_get_descriptor>:
 * \brief Standard device request to get descriptors about USB device
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_descriptor(void)
{
    1010:	b580      	push	{r7, lr}
    1012:	b082      	sub	sp, #8
    1014:	af00      	add	r7, sp, #0
	uint8_t conf_num;

	conf_num = udd_g_ctrlreq.req.wValue & 0xff;
    1016:	4b39      	ldr	r3, [pc, #228]	; (10fc <udc_req_std_dev_get_descriptor+0xec>)
    1018:	885a      	ldrh	r2, [r3, #2]
    101a:	1dfb      	adds	r3, r7, #7
    101c:	701a      	strb	r2, [r3, #0]

	// Check descriptor ID
	switch ((uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
    101e:	4b37      	ldr	r3, [pc, #220]	; (10fc <udc_req_std_dev_get_descriptor+0xec>)
    1020:	885b      	ldrh	r3, [r3, #2]
    1022:	0a1b      	lsrs	r3, r3, #8
    1024:	b29b      	uxth	r3, r3
    1026:	b2db      	uxtb	r3, r3
    1028:	2b02      	cmp	r3, #2
    102a:	d013      	beq.n	1054 <udc_req_std_dev_get_descriptor+0x44>
    102c:	dc02      	bgt.n	1034 <udc_req_std_dev_get_descriptor+0x24>
    102e:	2b01      	cmp	r3, #1
    1030:	d005      	beq.n	103e <udc_req_std_dev_get_descriptor+0x2e>
    1032:	e051      	b.n	10d8 <udc_req_std_dev_get_descriptor+0xc8>
    1034:	2b03      	cmp	r3, #3
    1036:	d044      	beq.n	10c2 <udc_req_std_dev_get_descriptor+0xb2>
    1038:	2b0f      	cmp	r3, #15
    103a:	d02f      	beq.n	109c <udc_req_std_dev_get_descriptor+0x8c>
    103c:	e04c      	b.n	10d8 <udc_req_std_dev_get_descriptor+0xc8>
				udc_config.confdev_hs->bLength);
		} else
#endif
		{
			udd_set_setup_payload(
				(uint8_t *) udc_config.confdev_lsfs,
    103e:	4b30      	ldr	r3, [pc, #192]	; (1100 <udc_req_std_dev_get_descriptor+0xf0>)
    1040:	681a      	ldr	r2, [r3, #0]
				udc_config.confdev_lsfs->bLength);
    1042:	4b2f      	ldr	r3, [pc, #188]	; (1100 <udc_req_std_dev_get_descriptor+0xf0>)
    1044:	681b      	ldr	r3, [r3, #0]
    1046:	781b      	ldrb	r3, [r3, #0]
			udd_set_setup_payload(
    1048:	b29b      	uxth	r3, r3
    104a:	0019      	movs	r1, r3
    104c:	0010      	movs	r0, r2
    104e:	4b2d      	ldr	r3, [pc, #180]	; (1104 <udc_req_std_dev_get_descriptor+0xf4>)
    1050:	4798      	blx	r3
		}
		break;
    1052:	e044      	b.n	10de <udc_req_std_dev_get_descriptor+0xce>
				le16_to_cpu(udc_config.conf_hs[conf_num].desc->wTotalLength));
		} else
#endif
		{
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
    1054:	4b2a      	ldr	r3, [pc, #168]	; (1100 <udc_req_std_dev_get_descriptor+0xf0>)
    1056:	681b      	ldr	r3, [r3, #0]
    1058:	7c5b      	ldrb	r3, [r3, #17]
    105a:	1dfa      	adds	r2, r7, #7
    105c:	7812      	ldrb	r2, [r2, #0]
    105e:	429a      	cmp	r2, r3
    1060:	d301      	bcc.n	1066 <udc_req_std_dev_get_descriptor+0x56>
					bNumConfigurations) {
				return false;
    1062:	2300      	movs	r3, #0
    1064:	e046      	b.n	10f4 <udc_req_std_dev_get_descriptor+0xe4>
			}
			udd_set_setup_payload(
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
    1066:	4b26      	ldr	r3, [pc, #152]	; (1100 <udc_req_std_dev_get_descriptor+0xf0>)
    1068:	685a      	ldr	r2, [r3, #4]
    106a:	1dfb      	adds	r3, r7, #7
    106c:	781b      	ldrb	r3, [r3, #0]
    106e:	00db      	lsls	r3, r3, #3
    1070:	18d3      	adds	r3, r2, r3
    1072:	6818      	ldr	r0, [r3, #0]
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
    1074:	4b22      	ldr	r3, [pc, #136]	; (1100 <udc_req_std_dev_get_descriptor+0xf0>)
    1076:	685a      	ldr	r2, [r3, #4]
    1078:	1dfb      	adds	r3, r7, #7
    107a:	781b      	ldrb	r3, [r3, #0]
    107c:	00db      	lsls	r3, r3, #3
    107e:	18d3      	adds	r3, r2, r3
    1080:	681b      	ldr	r3, [r3, #0]
			udd_set_setup_payload(
    1082:	789a      	ldrb	r2, [r3, #2]
    1084:	78db      	ldrb	r3, [r3, #3]
    1086:	021b      	lsls	r3, r3, #8
    1088:	4313      	orrs	r3, r2
    108a:	b29b      	uxth	r3, r3
    108c:	0019      	movs	r1, r3
    108e:	4b1d      	ldr	r3, [pc, #116]	; (1104 <udc_req_std_dev_get_descriptor+0xf4>)
    1090:	4798      	blx	r3
		}
		((usb_conf_desc_t *) udd_g_ctrlreq.payload)->bDescriptorType =
    1092:	4b1a      	ldr	r3, [pc, #104]	; (10fc <udc_req_std_dev_get_descriptor+0xec>)
    1094:	689b      	ldr	r3, [r3, #8]
    1096:	2202      	movs	r2, #2
    1098:	705a      	strb	r2, [r3, #1]
				USB_DT_CONFIGURATION;
		break;
    109a:	e020      	b.n	10de <udc_req_std_dev_get_descriptor+0xce>
		break;
#endif

	case USB_DT_BOS:
		// Device BOS descriptor requested
		if (udc_config.conf_bos == NULL) {
    109c:	4b18      	ldr	r3, [pc, #96]	; (1100 <udc_req_std_dev_get_descriptor+0xf0>)
    109e:	689b      	ldr	r3, [r3, #8]
    10a0:	2b00      	cmp	r3, #0
    10a2:	d101      	bne.n	10a8 <udc_req_std_dev_get_descriptor+0x98>
			return false;
    10a4:	2300      	movs	r3, #0
    10a6:	e025      	b.n	10f4 <udc_req_std_dev_get_descriptor+0xe4>
		}
		udd_set_setup_payload( (uint8_t *) udc_config.conf_bos,
    10a8:	4b15      	ldr	r3, [pc, #84]	; (1100 <udc_req_std_dev_get_descriptor+0xf0>)
    10aa:	6898      	ldr	r0, [r3, #8]
				udc_config.conf_bos->wTotalLength);
    10ac:	4b14      	ldr	r3, [pc, #80]	; (1100 <udc_req_std_dev_get_descriptor+0xf0>)
    10ae:	689b      	ldr	r3, [r3, #8]
		udd_set_setup_payload( (uint8_t *) udc_config.conf_bos,
    10b0:	789a      	ldrb	r2, [r3, #2]
    10b2:	78db      	ldrb	r3, [r3, #3]
    10b4:	021b      	lsls	r3, r3, #8
    10b6:	4313      	orrs	r3, r2
    10b8:	b29b      	uxth	r3, r3
    10ba:	0019      	movs	r1, r3
    10bc:	4b11      	ldr	r3, [pc, #68]	; (1104 <udc_req_std_dev_get_descriptor+0xf4>)
    10be:	4798      	blx	r3
		break;
    10c0:	e00d      	b.n	10de <udc_req_std_dev_get_descriptor+0xce>

	case USB_DT_STRING:
		// String descriptor requested
		if (!udc_req_std_dev_get_str_desc()) {
    10c2:	4b11      	ldr	r3, [pc, #68]	; (1108 <udc_req_std_dev_get_descriptor+0xf8>)
    10c4:	4798      	blx	r3
    10c6:	0003      	movs	r3, r0
    10c8:	001a      	movs	r2, r3
    10ca:	2301      	movs	r3, #1
    10cc:	4053      	eors	r3, r2
    10ce:	b2db      	uxtb	r3, r3
    10d0:	2b00      	cmp	r3, #0
    10d2:	d003      	beq.n	10dc <udc_req_std_dev_get_descriptor+0xcc>
			return false;
    10d4:	2300      	movs	r3, #0
    10d6:	e00d      	b.n	10f4 <udc_req_std_dev_get_descriptor+0xe4>
		}
		break;

	default:
		// Unknown descriptor requested
		return false;
    10d8:	2300      	movs	r3, #0
    10da:	e00b      	b.n	10f4 <udc_req_std_dev_get_descriptor+0xe4>
		break;
    10dc:	46c0      	nop			; (mov r8, r8)
	}
	// if the descriptor is larger than length requested, then reduce it
	if (udd_g_ctrlreq.req.wLength < udd_g_ctrlreq.payload_size) {
    10de:	4b07      	ldr	r3, [pc, #28]	; (10fc <udc_req_std_dev_get_descriptor+0xec>)
    10e0:	88da      	ldrh	r2, [r3, #6]
    10e2:	4b06      	ldr	r3, [pc, #24]	; (10fc <udc_req_std_dev_get_descriptor+0xec>)
    10e4:	899b      	ldrh	r3, [r3, #12]
    10e6:	429a      	cmp	r2, r3
    10e8:	d203      	bcs.n	10f2 <udc_req_std_dev_get_descriptor+0xe2>
		udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
    10ea:	4b04      	ldr	r3, [pc, #16]	; (10fc <udc_req_std_dev_get_descriptor+0xec>)
    10ec:	88da      	ldrh	r2, [r3, #6]
    10ee:	4b03      	ldr	r3, [pc, #12]	; (10fc <udc_req_std_dev_get_descriptor+0xec>)
    10f0:	819a      	strh	r2, [r3, #12]
	}
	return true;
    10f2:	2301      	movs	r3, #1
}
    10f4:	0018      	movs	r0, r3
    10f6:	46bd      	mov	sp, r7
    10f8:	b002      	add	sp, #8
    10fa:	bd80      	pop	{r7, pc}
    10fc:	200028cc 	.word	0x200028cc
    1100:	200000a4 	.word	0x200000a4
    1104:	00002c09 	.word	0x00002c09
    1108:	00000f35 	.word	0x00000f35

0000110c <udc_req_std_dev_get_configuration>:
 * \brief Standard device request to get configuration number
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_configuration(void)
{
    110c:	b580      	push	{r7, lr}
    110e:	af00      	add	r7, sp, #0
	if (udd_g_ctrlreq.req.wLength != 1) {
    1110:	4b07      	ldr	r3, [pc, #28]	; (1130 <udc_req_std_dev_get_configuration+0x24>)
    1112:	88db      	ldrh	r3, [r3, #6]
    1114:	2b01      	cmp	r3, #1
    1116:	d001      	beq.n	111c <udc_req_std_dev_get_configuration+0x10>
		return false;
    1118:	2300      	movs	r3, #0
    111a:	e005      	b.n	1128 <udc_req_std_dev_get_configuration+0x1c>
	}

	udd_set_setup_payload(&udc_num_configuration,1);
    111c:	4b05      	ldr	r3, [pc, #20]	; (1134 <udc_req_std_dev_get_configuration+0x28>)
    111e:	2101      	movs	r1, #1
    1120:	0018      	movs	r0, r3
    1122:	4b05      	ldr	r3, [pc, #20]	; (1138 <udc_req_std_dev_get_configuration+0x2c>)
    1124:	4798      	blx	r3
	return true;
    1126:	2301      	movs	r3, #1
}
    1128:	0018      	movs	r0, r3
    112a:	46bd      	mov	sp, r7
    112c:	bd80      	pop	{r7, pc}
    112e:	46c0      	nop			; (mov r8, r8)
    1130:	200028cc 	.word	0x200028cc
    1134:	200004b8 	.word	0x200004b8
    1138:	00002c09 	.word	0x00002c09

0000113c <udc_req_std_dev_set_configuration>:
 * \brief Standard device request to enable a configuration
 *
 * \return true if success
 */
static bool udc_req_std_dev_set_configuration(void)
{
    113c:	b580      	push	{r7, lr}
    113e:	b082      	sub	sp, #8
    1140:	af00      	add	r7, sp, #0
	uint8_t iface_num;

	// Check request length
	if (udd_g_ctrlreq.req.wLength) {
    1142:	4b2a      	ldr	r3, [pc, #168]	; (11ec <udc_req_std_dev_set_configuration+0xb0>)
    1144:	88db      	ldrh	r3, [r3, #6]
    1146:	2b00      	cmp	r3, #0
    1148:	d001      	beq.n	114e <udc_req_std_dev_set_configuration+0x12>
		return false;
    114a:	2300      	movs	r3, #0
    114c:	e04a      	b.n	11e4 <udc_req_std_dev_set_configuration+0xa8>
	}
	// Authorize configuration only if the address is valid
	if (!udd_getaddress()) {
    114e:	4b28      	ldr	r3, [pc, #160]	; (11f0 <udc_req_std_dev_set_configuration+0xb4>)
    1150:	4798      	blx	r3
    1152:	1e03      	subs	r3, r0, #0
    1154:	d101      	bne.n	115a <udc_req_std_dev_set_configuration+0x1e>
		return false;
    1156:	2300      	movs	r3, #0
    1158:	e044      	b.n	11e4 <udc_req_std_dev_set_configuration+0xa8>
		}
	} else
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
    115a:	4b24      	ldr	r3, [pc, #144]	; (11ec <udc_req_std_dev_set_configuration+0xb0>)
    115c:	885b      	ldrh	r3, [r3, #2]
    115e:	001a      	movs	r2, r3
    1160:	23ff      	movs	r3, #255	; 0xff
    1162:	401a      	ands	r2, r3
				udc_config.confdev_lsfs->bNumConfigurations) {
    1164:	4b23      	ldr	r3, [pc, #140]	; (11f4 <udc_req_std_dev_set_configuration+0xb8>)
    1166:	681b      	ldr	r3, [r3, #0]
    1168:	7c5b      	ldrb	r3, [r3, #17]
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
    116a:	429a      	cmp	r2, r3
    116c:	dd01      	ble.n	1172 <udc_req_std_dev_set_configuration+0x36>
			return false;
    116e:	2300      	movs	r3, #0
    1170:	e038      	b.n	11e4 <udc_req_std_dev_set_configuration+0xa8>
		}
	}

	// Reset current configuration
	udc_reset();
    1172:	4b21      	ldr	r3, [pc, #132]	; (11f8 <udc_req_std_dev_set_configuration+0xbc>)
    1174:	4798      	blx	r3

	// Enable new configuration
	udc_num_configuration = udd_g_ctrlreq.req.wValue & 0xFF;
    1176:	4b1d      	ldr	r3, [pc, #116]	; (11ec <udc_req_std_dev_set_configuration+0xb0>)
    1178:	885b      	ldrh	r3, [r3, #2]
    117a:	b2da      	uxtb	r2, r3
    117c:	4b1f      	ldr	r3, [pc, #124]	; (11fc <udc_req_std_dev_set_configuration+0xc0>)
    117e:	701a      	strb	r2, [r3, #0]
	if (udc_num_configuration == 0) {
    1180:	4b1e      	ldr	r3, [pc, #120]	; (11fc <udc_req_std_dev_set_configuration+0xc0>)
    1182:	781b      	ldrb	r3, [r3, #0]
    1184:	2b00      	cmp	r3, #0
    1186:	d101      	bne.n	118c <udc_req_std_dev_set_configuration+0x50>
		return true; // Default empty configuration requested
    1188:	2301      	movs	r3, #1
    118a:	e02b      	b.n	11e4 <udc_req_std_dev_set_configuration+0xa8>
		udc_ptr_conf = &udc_config.conf_hs[udc_num_configuration - 1];
	} else
#endif
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
    118c:	4b19      	ldr	r3, [pc, #100]	; (11f4 <udc_req_std_dev_set_configuration+0xb8>)
    118e:	685a      	ldr	r2, [r3, #4]
    1190:	4b1a      	ldr	r3, [pc, #104]	; (11fc <udc_req_std_dev_set_configuration+0xc0>)
    1192:	781b      	ldrb	r3, [r3, #0]
    1194:	491a      	ldr	r1, [pc, #104]	; (1200 <udc_req_std_dev_set_configuration+0xc4>)
    1196:	468c      	mov	ip, r1
    1198:	4463      	add	r3, ip
    119a:	00db      	lsls	r3, r3, #3
    119c:	18d2      	adds	r2, r2, r3
    119e:	4b19      	ldr	r3, [pc, #100]	; (1204 <udc_req_std_dev_set_configuration+0xc8>)
    11a0:	601a      	str	r2, [r3, #0]
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    11a2:	1dfb      	adds	r3, r7, #7
    11a4:	2200      	movs	r2, #0
    11a6:	701a      	strb	r2, [r3, #0]
    11a8:	e013      	b.n	11d2 <udc_req_std_dev_set_configuration+0x96>
			iface_num++) {
		if (!udc_iface_enable(iface_num, 0)) {
    11aa:	1dfb      	adds	r3, r7, #7
    11ac:	781b      	ldrb	r3, [r3, #0]
    11ae:	2100      	movs	r1, #0
    11b0:	0018      	movs	r0, r3
    11b2:	4b15      	ldr	r3, [pc, #84]	; (1208 <udc_req_std_dev_set_configuration+0xcc>)
    11b4:	4798      	blx	r3
    11b6:	0003      	movs	r3, r0
    11b8:	001a      	movs	r2, r3
    11ba:	2301      	movs	r3, #1
    11bc:	4053      	eors	r3, r2
    11be:	b2db      	uxtb	r3, r3
    11c0:	2b00      	cmp	r3, #0
    11c2:	d001      	beq.n	11c8 <udc_req_std_dev_set_configuration+0x8c>
			return false;
    11c4:	2300      	movs	r3, #0
    11c6:	e00d      	b.n	11e4 <udc_req_std_dev_set_configuration+0xa8>
			iface_num++) {
    11c8:	1dfb      	adds	r3, r7, #7
    11ca:	781a      	ldrb	r2, [r3, #0]
    11cc:	1dfb      	adds	r3, r7, #7
    11ce:	3201      	adds	r2, #1
    11d0:	701a      	strb	r2, [r3, #0]
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    11d2:	4b0c      	ldr	r3, [pc, #48]	; (1204 <udc_req_std_dev_set_configuration+0xc8>)
    11d4:	681b      	ldr	r3, [r3, #0]
    11d6:	681b      	ldr	r3, [r3, #0]
    11d8:	791b      	ldrb	r3, [r3, #4]
    11da:	1dfa      	adds	r2, r7, #7
    11dc:	7812      	ldrb	r2, [r2, #0]
    11de:	429a      	cmp	r2, r3
    11e0:	d3e3      	bcc.n	11aa <udc_req_std_dev_set_configuration+0x6e>
		}
	}
	return true;
    11e2:	2301      	movs	r3, #1
}
    11e4:	0018      	movs	r0, r3
    11e6:	46bd      	mov	sp, r7
    11e8:	b002      	add	sp, #8
    11ea:	bd80      	pop	{r7, pc}
    11ec:	200028cc 	.word	0x200028cc
    11f0:	00002bed 	.word	0x00002bed
    11f4:	200000a4 	.word	0x200000a4
    11f8:	00000c89 	.word	0x00000c89
    11fc:	200004b8 	.word	0x200004b8
    1200:	1fffffff 	.word	0x1fffffff
    1204:	200004bc 	.word	0x200004bc
    1208:	00000bc5 	.word	0x00000bc5

0000120c <udc_req_std_iface_get_setting>:
 * to get the alternate setting number of an interface
 *
 * \return true if success
 */
static bool udc_req_std_iface_get_setting(void)
{
    120c:	b580      	push	{r7, lr}
    120e:	b082      	sub	sp, #8
    1210:	af00      	add	r7, sp, #0
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (udd_g_ctrlreq.req.wLength != 1) {
    1212:	4b21      	ldr	r3, [pc, #132]	; (1298 <udc_req_std_iface_get_setting+0x8c>)
    1214:	88db      	ldrh	r3, [r3, #6]
    1216:	2b01      	cmp	r3, #1
    1218:	d001      	beq.n	121e <udc_req_std_iface_get_setting+0x12>
		return false; // Error in request
    121a:	2300      	movs	r3, #0
    121c:	e038      	b.n	1290 <udc_req_std_iface_get_setting+0x84>
	}
	if (!udc_num_configuration) {
    121e:	4b1f      	ldr	r3, [pc, #124]	; (129c <udc_req_std_iface_get_setting+0x90>)
    1220:	781b      	ldrb	r3, [r3, #0]
    1222:	2b00      	cmp	r3, #0
    1224:	d101      	bne.n	122a <udc_req_std_iface_get_setting+0x1e>
		return false; // The device is not is configured state yet
    1226:	2300      	movs	r3, #0
    1228:	e032      	b.n	1290 <udc_req_std_iface_get_setting+0x84>
	}

	// Check the interface number included in the request
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    122a:	4b1b      	ldr	r3, [pc, #108]	; (1298 <udc_req_std_iface_get_setting+0x8c>)
    122c:	889a      	ldrh	r2, [r3, #4]
    122e:	1dfb      	adds	r3, r7, #7
    1230:	701a      	strb	r2, [r3, #0]
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
    1232:	4b1b      	ldr	r3, [pc, #108]	; (12a0 <udc_req_std_iface_get_setting+0x94>)
    1234:	681b      	ldr	r3, [r3, #0]
    1236:	681b      	ldr	r3, [r3, #0]
    1238:	791b      	ldrb	r3, [r3, #4]
    123a:	1dfa      	adds	r2, r7, #7
    123c:	7812      	ldrb	r2, [r2, #0]
    123e:	429a      	cmp	r2, r3
    1240:	d301      	bcc.n	1246 <udc_req_std_iface_get_setting+0x3a>
		return false;
    1242:	2300      	movs	r3, #0
    1244:	e024      	b.n	1290 <udc_req_std_iface_get_setting+0x84>
	}

	// Select first alternate setting of the interface to update udc_ptr_iface
	// before call iface->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
    1246:	1dfb      	adds	r3, r7, #7
    1248:	781b      	ldrb	r3, [r3, #0]
    124a:	2100      	movs	r1, #0
    124c:	0018      	movs	r0, r3
    124e:	4b15      	ldr	r3, [pc, #84]	; (12a4 <udc_req_std_iface_get_setting+0x98>)
    1250:	4798      	blx	r3
    1252:	0003      	movs	r3, r0
    1254:	001a      	movs	r2, r3
    1256:	2301      	movs	r3, #1
    1258:	4053      	eors	r3, r2
    125a:	b2db      	uxtb	r3, r3
    125c:	2b00      	cmp	r3, #0
    125e:	d001      	beq.n	1264 <udc_req_std_iface_get_setting+0x58>
		return false;
    1260:	2300      	movs	r3, #0
    1262:	e015      	b.n	1290 <udc_req_std_iface_get_setting+0x84>
	}
	// Get alternate setting from UDI
	udi_api = udc_ptr_conf->udi_apis[iface_num];
    1264:	4b0e      	ldr	r3, [pc, #56]	; (12a0 <udc_req_std_iface_get_setting+0x94>)
    1266:	681b      	ldr	r3, [r3, #0]
    1268:	685a      	ldr	r2, [r3, #4]
    126a:	1dfb      	adds	r3, r7, #7
    126c:	781b      	ldrb	r3, [r3, #0]
    126e:	009b      	lsls	r3, r3, #2
    1270:	18d3      	adds	r3, r2, r3
    1272:	681b      	ldr	r3, [r3, #0]
    1274:	603b      	str	r3, [r7, #0]
	udc_iface_setting = udi_api->getsetting();
    1276:	683b      	ldr	r3, [r7, #0]
    1278:	68db      	ldr	r3, [r3, #12]
    127a:	4798      	blx	r3
    127c:	0003      	movs	r3, r0
    127e:	001a      	movs	r2, r3
    1280:	4b09      	ldr	r3, [pc, #36]	; (12a8 <udc_req_std_iface_get_setting+0x9c>)
    1282:	701a      	strb	r2, [r3, #0]

	// Link value to payload pointer of request
	udd_set_setup_payload(&udc_iface_setting,1);
    1284:	4b08      	ldr	r3, [pc, #32]	; (12a8 <udc_req_std_iface_get_setting+0x9c>)
    1286:	2101      	movs	r1, #1
    1288:	0018      	movs	r0, r3
    128a:	4b08      	ldr	r3, [pc, #32]	; (12ac <udc_req_std_iface_get_setting+0xa0>)
    128c:	4798      	blx	r3
	return true;
    128e:	2301      	movs	r3, #1
}
    1290:	0018      	movs	r0, r3
    1292:	46bd      	mov	sp, r7
    1294:	b002      	add	sp, #8
    1296:	bd80      	pop	{r7, pc}
    1298:	200028cc 	.word	0x200028cc
    129c:	200004b8 	.word	0x200004b8
    12a0:	200004bc 	.word	0x200004bc
    12a4:	00000a71 	.word	0x00000a71
    12a8:	200004b4 	.word	0x200004b4
    12ac:	00002c09 	.word	0x00002c09

000012b0 <udc_req_std_iface_set_setting>:
 * to set an alternate setting of an interface
 *
 * \return true if success
 */
static bool udc_req_std_iface_set_setting(void)
{
    12b0:	b580      	push	{r7, lr}
    12b2:	b082      	sub	sp, #8
    12b4:	af00      	add	r7, sp, #0
	uint8_t iface_num, setting_num;

	if (udd_g_ctrlreq.req.wLength) {
    12b6:	4b17      	ldr	r3, [pc, #92]	; (1314 <udc_req_std_iface_set_setting+0x64>)
    12b8:	88db      	ldrh	r3, [r3, #6]
    12ba:	2b00      	cmp	r3, #0
    12bc:	d001      	beq.n	12c2 <udc_req_std_iface_set_setting+0x12>
		return false; // Error in request
    12be:	2300      	movs	r3, #0
    12c0:	e024      	b.n	130c <udc_req_std_iface_set_setting+0x5c>
	}
	if (!udc_num_configuration) {
    12c2:	4b15      	ldr	r3, [pc, #84]	; (1318 <udc_req_std_iface_set_setting+0x68>)
    12c4:	781b      	ldrb	r3, [r3, #0]
    12c6:	2b00      	cmp	r3, #0
    12c8:	d101      	bne.n	12ce <udc_req_std_iface_set_setting+0x1e>
		return false; // The device is not is configured state yet
    12ca:	2300      	movs	r3, #0
    12cc:	e01e      	b.n	130c <udc_req_std_iface_set_setting+0x5c>
	}

	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    12ce:	4b11      	ldr	r3, [pc, #68]	; (1314 <udc_req_std_iface_set_setting+0x64>)
    12d0:	889a      	ldrh	r2, [r3, #4]
    12d2:	1dfb      	adds	r3, r7, #7
    12d4:	701a      	strb	r2, [r3, #0]
	setting_num = udd_g_ctrlreq.req.wValue & 0xFF;
    12d6:	4b0f      	ldr	r3, [pc, #60]	; (1314 <udc_req_std_iface_set_setting+0x64>)
    12d8:	885a      	ldrh	r2, [r3, #2]
    12da:	1dbb      	adds	r3, r7, #6
    12dc:	701a      	strb	r2, [r3, #0]

	// Disable current setting
	if (!udc_iface_disable(iface_num)) {
    12de:	1dfb      	adds	r3, r7, #7
    12e0:	781b      	ldrb	r3, [r3, #0]
    12e2:	0018      	movs	r0, r3
    12e4:	4b0d      	ldr	r3, [pc, #52]	; (131c <udc_req_std_iface_set_setting+0x6c>)
    12e6:	4798      	blx	r3
    12e8:	0003      	movs	r3, r0
    12ea:	001a      	movs	r2, r3
    12ec:	2301      	movs	r3, #1
    12ee:	4053      	eors	r3, r2
    12f0:	b2db      	uxtb	r3, r3
    12f2:	2b00      	cmp	r3, #0
    12f4:	d001      	beq.n	12fa <udc_req_std_iface_set_setting+0x4a>
		return false;
    12f6:	2300      	movs	r3, #0
    12f8:	e008      	b.n	130c <udc_req_std_iface_set_setting+0x5c>
	}

	// Enable new setting
	return udc_iface_enable(iface_num, setting_num);
    12fa:	1dbb      	adds	r3, r7, #6
    12fc:	781a      	ldrb	r2, [r3, #0]
    12fe:	1dfb      	adds	r3, r7, #7
    1300:	781b      	ldrb	r3, [r3, #0]
    1302:	0011      	movs	r1, r2
    1304:	0018      	movs	r0, r3
    1306:	4b06      	ldr	r3, [pc, #24]	; (1320 <udc_req_std_iface_set_setting+0x70>)
    1308:	4798      	blx	r3
    130a:	0003      	movs	r3, r0
}
    130c:	0018      	movs	r0, r3
    130e:	46bd      	mov	sp, r7
    1310:	b002      	add	sp, #8
    1312:	bd80      	pop	{r7, pc}
    1314:	200028cc 	.word	0x200028cc
    1318:	200004b8 	.word	0x200004b8
    131c:	00000b15 	.word	0x00000b15
    1320:	00000bc5 	.word	0x00000bc5

00001324 <udc_reqstd>:
 * \brief Main routine to manage the standard USB SETUP request
 *
 * \return true if the request is supported
 */
static bool udc_reqstd(void)
{
    1324:	b580      	push	{r7, lr}
    1326:	af00      	add	r7, sp, #0
	if (Udd_setup_is_in()) {
    1328:	4b47      	ldr	r3, [pc, #284]	; (1448 <udc_reqstd+0x124>)
    132a:	781b      	ldrb	r3, [r3, #0]
    132c:	b25b      	sxtb	r3, r3
    132e:	2b00      	cmp	r3, #0
    1330:	da40      	bge.n	13b4 <udc_reqstd+0x90>
		// GET Standard Requests
		if (udd_g_ctrlreq.req.wLength == 0) {
    1332:	4b45      	ldr	r3, [pc, #276]	; (1448 <udc_reqstd+0x124>)
    1334:	88db      	ldrh	r3, [r3, #6]
    1336:	2b00      	cmp	r3, #0
    1338:	d101      	bne.n	133e <udc_reqstd+0x1a>
			return false; // Error for USB host
    133a:	2300      	movs	r3, #0
    133c:	e081      	b.n	1442 <udc_reqstd+0x11e>
		}

		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
    133e:	4b42      	ldr	r3, [pc, #264]	; (1448 <udc_reqstd+0x124>)
    1340:	781b      	ldrb	r3, [r3, #0]
    1342:	001a      	movs	r2, r3
    1344:	231f      	movs	r3, #31
    1346:	4013      	ands	r3, r2
    1348:	d114      	bne.n	1374 <udc_reqstd+0x50>
			// Standard Get Device request
			switch (udd_g_ctrlreq.req.bRequest) {
    134a:	4b3f      	ldr	r3, [pc, #252]	; (1448 <udc_reqstd+0x124>)
    134c:	785b      	ldrb	r3, [r3, #1]
    134e:	2b06      	cmp	r3, #6
    1350:	d008      	beq.n	1364 <udc_reqstd+0x40>
    1352:	2b08      	cmp	r3, #8
    1354:	d00a      	beq.n	136c <udc_reqstd+0x48>
    1356:	2b00      	cmp	r3, #0
    1358:	d000      	beq.n	135c <udc_reqstd+0x38>
			case USB_REQ_GET_DESCRIPTOR:
				return udc_req_std_dev_get_descriptor();
			case USB_REQ_GET_CONFIGURATION:
				return udc_req_std_dev_get_configuration();
			default:
				break;
    135a:	e00b      	b.n	1374 <udc_reqstd+0x50>
				return udc_req_std_dev_get_status();
    135c:	4b3b      	ldr	r3, [pc, #236]	; (144c <udc_reqstd+0x128>)
    135e:	4798      	blx	r3
    1360:	0003      	movs	r3, r0
    1362:	e06e      	b.n	1442 <udc_reqstd+0x11e>
				return udc_req_std_dev_get_descriptor();
    1364:	4b3a      	ldr	r3, [pc, #232]	; (1450 <udc_reqstd+0x12c>)
    1366:	4798      	blx	r3
    1368:	0003      	movs	r3, r0
    136a:	e06a      	b.n	1442 <udc_reqstd+0x11e>
				return udc_req_std_dev_get_configuration();
    136c:	4b39      	ldr	r3, [pc, #228]	; (1454 <udc_reqstd+0x130>)
    136e:	4798      	blx	r3
    1370:	0003      	movs	r3, r0
    1372:	e066      	b.n	1442 <udc_reqstd+0x11e>
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
    1374:	4b34      	ldr	r3, [pc, #208]	; (1448 <udc_reqstd+0x124>)
    1376:	781b      	ldrb	r3, [r3, #0]
    1378:	001a      	movs	r2, r3
    137a:	231f      	movs	r3, #31
    137c:	4013      	ands	r3, r2
    137e:	2b01      	cmp	r3, #1
    1380:	d108      	bne.n	1394 <udc_reqstd+0x70>
			// Standard Get Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
    1382:	4b31      	ldr	r3, [pc, #196]	; (1448 <udc_reqstd+0x124>)
    1384:	785b      	ldrb	r3, [r3, #1]
    1386:	2b0a      	cmp	r3, #10
    1388:	d000      	beq.n	138c <udc_reqstd+0x68>
			case USB_REQ_GET_INTERFACE:
				return udc_req_std_iface_get_setting();
			default:
				break;
    138a:	e003      	b.n	1394 <udc_reqstd+0x70>
				return udc_req_std_iface_get_setting();
    138c:	4b32      	ldr	r3, [pc, #200]	; (1458 <udc_reqstd+0x134>)
    138e:	4798      	blx	r3
    1390:	0003      	movs	r3, r0
    1392:	e056      	b.n	1442 <udc_reqstd+0x11e>
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
    1394:	4b2c      	ldr	r3, [pc, #176]	; (1448 <udc_reqstd+0x124>)
    1396:	781b      	ldrb	r3, [r3, #0]
    1398:	001a      	movs	r2, r3
    139a:	231f      	movs	r3, #31
    139c:	4013      	ands	r3, r2
    139e:	2b02      	cmp	r3, #2
    13a0:	d14e      	bne.n	1440 <udc_reqstd+0x11c>
			// Standard Get Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
    13a2:	4b29      	ldr	r3, [pc, #164]	; (1448 <udc_reqstd+0x124>)
    13a4:	785b      	ldrb	r3, [r3, #1]
    13a6:	2b00      	cmp	r3, #0
    13a8:	d000      	beq.n	13ac <udc_reqstd+0x88>
			case USB_REQ_GET_STATUS:
				return udc_req_std_ep_get_status();
			default:
				break;
    13aa:	e049      	b.n	1440 <udc_reqstd+0x11c>
				return udc_req_std_ep_get_status();
    13ac:	4b2b      	ldr	r3, [pc, #172]	; (145c <udc_reqstd+0x138>)
    13ae:	4798      	blx	r3
    13b0:	0003      	movs	r3, r0
    13b2:	e046      	b.n	1442 <udc_reqstd+0x11e>
			}
		}
#endif
	} else {
		// SET Standard Requests
		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
    13b4:	4b24      	ldr	r3, [pc, #144]	; (1448 <udc_reqstd+0x124>)
    13b6:	781b      	ldrb	r3, [r3, #0]
    13b8:	001a      	movs	r2, r3
    13ba:	231f      	movs	r3, #31
    13bc:	4013      	ands	r3, r2
    13be:	d119      	bne.n	13f4 <udc_reqstd+0xd0>
			// Standard Set Device request
			switch (udd_g_ctrlreq.req.bRequest) {
    13c0:	4b21      	ldr	r3, [pc, #132]	; (1448 <udc_reqstd+0x124>)
    13c2:	785b      	ldrb	r3, [r3, #1]
    13c4:	2b09      	cmp	r3, #9
    13c6:	d814      	bhi.n	13f2 <udc_reqstd+0xce>
    13c8:	009a      	lsls	r2, r3, #2
    13ca:	4b25      	ldr	r3, [pc, #148]	; (1460 <udc_reqstd+0x13c>)
    13cc:	18d3      	adds	r3, r2, r3
    13ce:	681b      	ldr	r3, [r3, #0]
    13d0:	469f      	mov	pc, r3
			case USB_REQ_SET_ADDRESS:
				return udc_req_std_dev_set_address();
    13d2:	4b24      	ldr	r3, [pc, #144]	; (1464 <udc_reqstd+0x140>)
    13d4:	4798      	blx	r3
    13d6:	0003      	movs	r3, r0
    13d8:	e033      	b.n	1442 <udc_reqstd+0x11e>
			case USB_REQ_CLEAR_FEATURE:
				return udc_req_std_dev_clear_feature();
    13da:	4b23      	ldr	r3, [pc, #140]	; (1468 <udc_reqstd+0x144>)
    13dc:	4798      	blx	r3
    13de:	0003      	movs	r3, r0
    13e0:	e02f      	b.n	1442 <udc_reqstd+0x11e>
			case USB_REQ_SET_FEATURE:
				return udc_req_std_dev_set_feature();
    13e2:	4b22      	ldr	r3, [pc, #136]	; (146c <udc_reqstd+0x148>)
    13e4:	4798      	blx	r3
    13e6:	0003      	movs	r3, r0
    13e8:	e02b      	b.n	1442 <udc_reqstd+0x11e>
			case USB_REQ_SET_CONFIGURATION:
				return udc_req_std_dev_set_configuration();
    13ea:	4b21      	ldr	r3, [pc, #132]	; (1470 <udc_reqstd+0x14c>)
    13ec:	4798      	blx	r3
    13ee:	0003      	movs	r3, r0
    13f0:	e027      	b.n	1442 <udc_reqstd+0x11e>
			case USB_REQ_SET_DESCRIPTOR:
				/* Not supported (defined as optional by the USB 2.0 spec) */
				break;
			default:
				break;
    13f2:	46c0      	nop			; (mov r8, r8)
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
    13f4:	4b14      	ldr	r3, [pc, #80]	; (1448 <udc_reqstd+0x124>)
    13f6:	781b      	ldrb	r3, [r3, #0]
    13f8:	001a      	movs	r2, r3
    13fa:	231f      	movs	r3, #31
    13fc:	4013      	ands	r3, r2
    13fe:	2b01      	cmp	r3, #1
    1400:	d108      	bne.n	1414 <udc_reqstd+0xf0>
			// Standard Set Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
    1402:	4b11      	ldr	r3, [pc, #68]	; (1448 <udc_reqstd+0x124>)
    1404:	785b      	ldrb	r3, [r3, #1]
    1406:	2b0b      	cmp	r3, #11
    1408:	d000      	beq.n	140c <udc_reqstd+0xe8>
			case USB_REQ_SET_INTERFACE:
				return udc_req_std_iface_set_setting();
			default:
				break;
    140a:	e003      	b.n	1414 <udc_reqstd+0xf0>
				return udc_req_std_iface_set_setting();
    140c:	4b19      	ldr	r3, [pc, #100]	; (1474 <udc_reqstd+0x150>)
    140e:	4798      	blx	r3
    1410:	0003      	movs	r3, r0
    1412:	e016      	b.n	1442 <udc_reqstd+0x11e>
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
    1414:	4b0c      	ldr	r3, [pc, #48]	; (1448 <udc_reqstd+0x124>)
    1416:	781b      	ldrb	r3, [r3, #0]
    1418:	001a      	movs	r2, r3
    141a:	231f      	movs	r3, #31
    141c:	4013      	ands	r3, r2
    141e:	2b02      	cmp	r3, #2
    1420:	d10e      	bne.n	1440 <udc_reqstd+0x11c>
			// Standard Set Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
    1422:	4b09      	ldr	r3, [pc, #36]	; (1448 <udc_reqstd+0x124>)
    1424:	785b      	ldrb	r3, [r3, #1]
    1426:	2b01      	cmp	r3, #1
    1428:	d002      	beq.n	1430 <udc_reqstd+0x10c>
    142a:	2b03      	cmp	r3, #3
    142c:	d004      	beq.n	1438 <udc_reqstd+0x114>
			case USB_REQ_CLEAR_FEATURE:
				return udc_req_std_ep_clear_feature();
			case USB_REQ_SET_FEATURE:
				return udc_req_std_ep_set_feature();
			default:
				break;
    142e:	e007      	b.n	1440 <udc_reqstd+0x11c>
				return udc_req_std_ep_clear_feature();
    1430:	4b11      	ldr	r3, [pc, #68]	; (1478 <udc_reqstd+0x154>)
    1432:	4798      	blx	r3
    1434:	0003      	movs	r3, r0
    1436:	e004      	b.n	1442 <udc_reqstd+0x11e>
				return udc_req_std_ep_set_feature();
    1438:	4b10      	ldr	r3, [pc, #64]	; (147c <udc_reqstd+0x158>)
    143a:	4798      	blx	r3
    143c:	0003      	movs	r3, r0
    143e:	e000      	b.n	1442 <udc_reqstd+0x11e>
			}
		}
#endif
	}
	return false;
    1440:	2300      	movs	r3, #0
}
    1442:	0018      	movs	r0, r3
    1444:	46bd      	mov	sp, r7
    1446:	bd80      	pop	{r7, pc}
    1448:	200028cc 	.word	0x200028cc
    144c:	00000d69 	.word	0x00000d69
    1450:	00001011 	.word	0x00001011
    1454:	0000110d 	.word	0x0000110d
    1458:	0000120d 	.word	0x0000120d
    145c:	00000d99 	.word	0x00000d99
    1460:	0001f7e8 	.word	0x0001f7e8
    1464:	00000f0d 	.word	0x00000f0d
    1468:	00000de1 	.word	0x00000de1
    146c:	00000e5d 	.word	0x00000e5d
    1470:	0000113d 	.word	0x0000113d
    1474:	000012b1 	.word	0x000012b1
    1478:	00000e25 	.word	0x00000e25
    147c:	00000ea1 	.word	0x00000ea1

00001480 <udc_req_iface>:
 * \brief Send the SETUP interface request to UDI
 *
 * \return true if the request is supported
 */
static bool udc_req_iface(void)
{
    1480:	b580      	push	{r7, lr}
    1482:	b082      	sub	sp, #8
    1484:	af00      	add	r7, sp, #0
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
    1486:	4b24      	ldr	r3, [pc, #144]	; (1518 <udc_req_iface+0x98>)
    1488:	781b      	ldrb	r3, [r3, #0]
    148a:	2b00      	cmp	r3, #0
    148c:	d101      	bne.n	1492 <udc_req_iface+0x12>
		return false; // The device is not is configured state yet
    148e:	2300      	movs	r3, #0
    1490:	e03d      	b.n	150e <udc_req_iface+0x8e>
	}
	// Check interface number
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    1492:	4b22      	ldr	r3, [pc, #136]	; (151c <udc_req_iface+0x9c>)
    1494:	889a      	ldrh	r2, [r3, #4]
    1496:	1dfb      	adds	r3, r7, #7
    1498:	701a      	strb	r2, [r3, #0]
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
    149a:	4b21      	ldr	r3, [pc, #132]	; (1520 <udc_req_iface+0xa0>)
    149c:	681b      	ldr	r3, [r3, #0]
    149e:	681b      	ldr	r3, [r3, #0]
    14a0:	791b      	ldrb	r3, [r3, #4]
    14a2:	1dfa      	adds	r2, r7, #7
    14a4:	7812      	ldrb	r2, [r2, #0]
    14a6:	429a      	cmp	r2, r3
    14a8:	d301      	bcc.n	14ae <udc_req_iface+0x2e>
		return false;
    14aa:	2300      	movs	r3, #0
    14ac:	e02f      	b.n	150e <udc_req_iface+0x8e>
	}

	//* To update udc_ptr_iface with the selected interface in request
	// Select first alternate setting of interface to update udc_ptr_iface
	// before calling udi_api->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
    14ae:	1dfb      	adds	r3, r7, #7
    14b0:	781b      	ldrb	r3, [r3, #0]
    14b2:	2100      	movs	r1, #0
    14b4:	0018      	movs	r0, r3
    14b6:	4b1b      	ldr	r3, [pc, #108]	; (1524 <udc_req_iface+0xa4>)
    14b8:	4798      	blx	r3
    14ba:	0003      	movs	r3, r0
    14bc:	001a      	movs	r2, r3
    14be:	2301      	movs	r3, #1
    14c0:	4053      	eors	r3, r2
    14c2:	b2db      	uxtb	r3, r3
    14c4:	2b00      	cmp	r3, #0
    14c6:	d001      	beq.n	14cc <udc_req_iface+0x4c>
		return false;
    14c8:	2300      	movs	r3, #0
    14ca:	e020      	b.n	150e <udc_req_iface+0x8e>
	}
	// Select the interface with the current alternate setting
	udi_api = udc_ptr_conf->udi_apis[iface_num];
    14cc:	4b14      	ldr	r3, [pc, #80]	; (1520 <udc_req_iface+0xa0>)
    14ce:	681b      	ldr	r3, [r3, #0]
    14d0:	685a      	ldr	r2, [r3, #4]
    14d2:	1dfb      	adds	r3, r7, #7
    14d4:	781b      	ldrb	r3, [r3, #0]
    14d6:	009b      	lsls	r3, r3, #2
    14d8:	18d3      	adds	r3, r2, r3
    14da:	681b      	ldr	r3, [r3, #0]
    14dc:	603b      	str	r3, [r7, #0]
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
    14de:	683b      	ldr	r3, [r7, #0]
    14e0:	68db      	ldr	r3, [r3, #12]
    14e2:	4798      	blx	r3
    14e4:	0003      	movs	r3, r0
    14e6:	001a      	movs	r2, r3
    14e8:	1dfb      	adds	r3, r7, #7
    14ea:	781b      	ldrb	r3, [r3, #0]
    14ec:	0011      	movs	r1, r2
    14ee:	0018      	movs	r0, r3
    14f0:	4b0c      	ldr	r3, [pc, #48]	; (1524 <udc_req_iface+0xa4>)
    14f2:	4798      	blx	r3
    14f4:	0003      	movs	r3, r0
    14f6:	001a      	movs	r2, r3
    14f8:	2301      	movs	r3, #1
    14fa:	4053      	eors	r3, r2
    14fc:	b2db      	uxtb	r3, r3
    14fe:	2b00      	cmp	r3, #0
    1500:	d001      	beq.n	1506 <udc_req_iface+0x86>
		return false;
    1502:	2300      	movs	r3, #0
    1504:	e003      	b.n	150e <udc_req_iface+0x8e>
	}

	// Send the SETUP request to the UDI corresponding to the interface number
	return udi_api->setup();
    1506:	683b      	ldr	r3, [r7, #0]
    1508:	689b      	ldr	r3, [r3, #8]
    150a:	4798      	blx	r3
    150c:	0003      	movs	r3, r0
}
    150e:	0018      	movs	r0, r3
    1510:	46bd      	mov	sp, r7
    1512:	b002      	add	sp, #8
    1514:	bd80      	pop	{r7, pc}
    1516:	46c0      	nop			; (mov r8, r8)
    1518:	200004b8 	.word	0x200004b8
    151c:	200028cc 	.word	0x200028cc
    1520:	200004bc 	.word	0x200004bc
    1524:	00000a71 	.word	0x00000a71

00001528 <udc_req_ep>:
 * \brief Send the SETUP interface request to UDI
 *
 * \return true if the request is supported
 */
static bool udc_req_ep(void)
{
    1528:	b580      	push	{r7, lr}
    152a:	b082      	sub	sp, #8
    152c:	af00      	add	r7, sp, #0
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
    152e:	4b22      	ldr	r3, [pc, #136]	; (15b8 <udc_req_ep+0x90>)
    1530:	781b      	ldrb	r3, [r3, #0]
    1532:	2b00      	cmp	r3, #0
    1534:	d101      	bne.n	153a <udc_req_ep+0x12>
		return false; // The device is not is configured state yet
    1536:	2300      	movs	r3, #0
    1538:	e039      	b.n	15ae <udc_req_ep+0x86>
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    153a:	4b20      	ldr	r3, [pc, #128]	; (15bc <udc_req_ep+0x94>)
    153c:	889a      	ldrh	r2, [r3, #4]
    153e:	1dfb      	adds	r3, r7, #7
    1540:	701a      	strb	r2, [r3, #0]
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    1542:	1dfb      	adds	r3, r7, #7
    1544:	2200      	movs	r2, #0
    1546:	701a      	strb	r2, [r3, #0]
    1548:	e028      	b.n	159c <udc_req_ep+0x74>
			iface_num++) {
		// Select the interface with the current alternate setting
		udi_api = udc_ptr_conf->udi_apis[iface_num];
    154a:	4b1d      	ldr	r3, [pc, #116]	; (15c0 <udc_req_ep+0x98>)
    154c:	681b      	ldr	r3, [r3, #0]
    154e:	685a      	ldr	r2, [r3, #4]
    1550:	1dfb      	adds	r3, r7, #7
    1552:	781b      	ldrb	r3, [r3, #0]
    1554:	009b      	lsls	r3, r3, #2
    1556:	18d3      	adds	r3, r2, r3
    1558:	681b      	ldr	r3, [r3, #0]
    155a:	603b      	str	r3, [r7, #0]
		if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
    155c:	683b      	ldr	r3, [r7, #0]
    155e:	68db      	ldr	r3, [r3, #12]
    1560:	4798      	blx	r3
    1562:	0003      	movs	r3, r0
    1564:	001a      	movs	r2, r3
    1566:	1dfb      	adds	r3, r7, #7
    1568:	781b      	ldrb	r3, [r3, #0]
    156a:	0011      	movs	r1, r2
    156c:	0018      	movs	r0, r3
    156e:	4b15      	ldr	r3, [pc, #84]	; (15c4 <udc_req_ep+0x9c>)
    1570:	4798      	blx	r3
    1572:	0003      	movs	r3, r0
    1574:	001a      	movs	r2, r3
    1576:	2301      	movs	r3, #1
    1578:	4053      	eors	r3, r2
    157a:	b2db      	uxtb	r3, r3
    157c:	2b00      	cmp	r3, #0
    157e:	d001      	beq.n	1584 <udc_req_ep+0x5c>
			return false;
    1580:	2300      	movs	r3, #0
    1582:	e014      	b.n	15ae <udc_req_ep+0x86>
		}

		// Send the SETUP request to the UDI
		if (udi_api->setup()) {
    1584:	683b      	ldr	r3, [r7, #0]
    1586:	689b      	ldr	r3, [r3, #8]
    1588:	4798      	blx	r3
    158a:	1e03      	subs	r3, r0, #0
    158c:	d001      	beq.n	1592 <udc_req_ep+0x6a>
			return true;
    158e:	2301      	movs	r3, #1
    1590:	e00d      	b.n	15ae <udc_req_ep+0x86>
			iface_num++) {
    1592:	1dfb      	adds	r3, r7, #7
    1594:	781a      	ldrb	r2, [r3, #0]
    1596:	1dfb      	adds	r3, r7, #7
    1598:	3201      	adds	r2, #1
    159a:	701a      	strb	r2, [r3, #0]
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    159c:	4b08      	ldr	r3, [pc, #32]	; (15c0 <udc_req_ep+0x98>)
    159e:	681b      	ldr	r3, [r3, #0]
    15a0:	681b      	ldr	r3, [r3, #0]
    15a2:	791b      	ldrb	r3, [r3, #4]
    15a4:	1dfa      	adds	r2, r7, #7
    15a6:	7812      	ldrb	r2, [r2, #0]
    15a8:	429a      	cmp	r2, r3
    15aa:	d3ce      	bcc.n	154a <udc_req_ep+0x22>
		}
	}
	return false;
    15ac:	2300      	movs	r3, #0
}
    15ae:	0018      	movs	r0, r3
    15b0:	46bd      	mov	sp, r7
    15b2:	b002      	add	sp, #8
    15b4:	bd80      	pop	{r7, pc}
    15b6:	46c0      	nop			; (mov r8, r8)
    15b8:	200004b8 	.word	0x200004b8
    15bc:	200028cc 	.word	0x200028cc
    15c0:	200004bc 	.word	0x200004bc
    15c4:	00000a71 	.word	0x00000a71

000015c8 <udc_process_setup>:
 * sent to a specific application callback.
 *
 * \return true if the request is supported, else the request is stalled by UDD
 */
bool udc_process_setup(void)
{
    15c8:	b580      	push	{r7, lr}
    15ca:	af00      	add	r7, sp, #0
	// By default no data (receive/send) and no callbacks registered
	udd_g_ctrlreq.payload_size = 0;
    15cc:	4b1e      	ldr	r3, [pc, #120]	; (1648 <udc_process_setup+0x80>)
    15ce:	2200      	movs	r2, #0
    15d0:	819a      	strh	r2, [r3, #12]
	udd_g_ctrlreq.callback = NULL;
    15d2:	4b1d      	ldr	r3, [pc, #116]	; (1648 <udc_process_setup+0x80>)
    15d4:	2200      	movs	r2, #0
    15d6:	611a      	str	r2, [r3, #16]
	udd_g_ctrlreq.over_under_run = NULL;
    15d8:	4b1b      	ldr	r3, [pc, #108]	; (1648 <udc_process_setup+0x80>)
    15da:	2200      	movs	r2, #0
    15dc:	615a      	str	r2, [r3, #20]

	if (Udd_setup_is_in()) {
    15de:	4b1a      	ldr	r3, [pc, #104]	; (1648 <udc_process_setup+0x80>)
    15e0:	781b      	ldrb	r3, [r3, #0]
    15e2:	b25b      	sxtb	r3, r3
    15e4:	2b00      	cmp	r3, #0
    15e6:	da05      	bge.n	15f4 <udc_process_setup+0x2c>
		if (udd_g_ctrlreq.req.wLength == 0) {
    15e8:	4b17      	ldr	r3, [pc, #92]	; (1648 <udc_process_setup+0x80>)
    15ea:	88db      	ldrh	r3, [r3, #6]
    15ec:	2b00      	cmp	r3, #0
    15ee:	d101      	bne.n	15f4 <udc_process_setup+0x2c>
			return false; // Error from USB host
    15f0:	2300      	movs	r3, #0
    15f2:	e026      	b.n	1642 <udc_process_setup+0x7a>
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
    15f4:	4b14      	ldr	r3, [pc, #80]	; (1648 <udc_process_setup+0x80>)
    15f6:	781b      	ldrb	r3, [r3, #0]
    15f8:	001a      	movs	r2, r3
    15fa:	2360      	movs	r3, #96	; 0x60
    15fc:	4013      	ands	r3, r2
    15fe:	d105      	bne.n	160c <udc_process_setup+0x44>
		if (udc_reqstd()) {
    1600:	4b12      	ldr	r3, [pc, #72]	; (164c <udc_process_setup+0x84>)
    1602:	4798      	blx	r3
    1604:	1e03      	subs	r3, r0, #0
    1606:	d001      	beq.n	160c <udc_process_setup+0x44>
			return true;
    1608:	2301      	movs	r3, #1
    160a:	e01a      	b.n	1642 <udc_process_setup+0x7a>
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
    160c:	4b0e      	ldr	r3, [pc, #56]	; (1648 <udc_process_setup+0x80>)
    160e:	781b      	ldrb	r3, [r3, #0]
    1610:	001a      	movs	r2, r3
    1612:	231f      	movs	r3, #31
    1614:	4013      	ands	r3, r2
    1616:	2b01      	cmp	r3, #1
    1618:	d105      	bne.n	1626 <udc_process_setup+0x5e>
		if (udc_req_iface()) {
    161a:	4b0d      	ldr	r3, [pc, #52]	; (1650 <udc_process_setup+0x88>)
    161c:	4798      	blx	r3
    161e:	1e03      	subs	r3, r0, #0
    1620:	d001      	beq.n	1626 <udc_process_setup+0x5e>
			return true;
    1622:	2301      	movs	r3, #1
    1624:	e00d      	b.n	1642 <udc_process_setup+0x7a>
		}
	}

	// If endpoint request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_ENDPOINT) {
    1626:	4b08      	ldr	r3, [pc, #32]	; (1648 <udc_process_setup+0x80>)
    1628:	781b      	ldrb	r3, [r3, #0]
    162a:	001a      	movs	r2, r3
    162c:	231f      	movs	r3, #31
    162e:	4013      	ands	r3, r2
    1630:	2b02      	cmp	r3, #2
    1632:	d105      	bne.n	1640 <udc_process_setup+0x78>
		if (udc_req_ep()) {
    1634:	4b07      	ldr	r3, [pc, #28]	; (1654 <udc_process_setup+0x8c>)
    1636:	4798      	blx	r3
    1638:	1e03      	subs	r3, r0, #0
    163a:	d001      	beq.n	1640 <udc_process_setup+0x78>
			return true;
    163c:	2301      	movs	r3, #1
    163e:	e000      	b.n	1642 <udc_process_setup+0x7a>
	// Here SETUP request unknown by UDC and UDIs
#ifdef USB_DEVICE_SPECIFIC_REQUEST
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
    1640:	2300      	movs	r3, #0
#endif
}
    1642:	0018      	movs	r0, r3
    1644:	46bd      	mov	sp, r7
    1646:	bd80      	pop	{r7, pc}
    1648:	200028cc 	.word	0x200028cc
    164c:	00001325 	.word	0x00001325
    1650:	00001481 	.word	0x00001481
    1654:	00001529 	.word	0x00001529

00001658 <system_pinmux_get_group_from_gpio_pin>:
{
    1658:	b580      	push	{r7, lr}
    165a:	b084      	sub	sp, #16
    165c:	af00      	add	r7, sp, #0
    165e:	0002      	movs	r2, r0
    1660:	1dfb      	adds	r3, r7, #7
    1662:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    1664:	230f      	movs	r3, #15
    1666:	18fb      	adds	r3, r7, r3
    1668:	1dfa      	adds	r2, r7, #7
    166a:	7812      	ldrb	r2, [r2, #0]
    166c:	09d2      	lsrs	r2, r2, #7
    166e:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    1670:	230e      	movs	r3, #14
    1672:	18fb      	adds	r3, r7, r3
    1674:	1dfa      	adds	r2, r7, #7
    1676:	7812      	ldrb	r2, [r2, #0]
    1678:	0952      	lsrs	r2, r2, #5
    167a:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    167c:	4b0d      	ldr	r3, [pc, #52]	; (16b4 <system_pinmux_get_group_from_gpio_pin+0x5c>)
    167e:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
    1680:	230f      	movs	r3, #15
    1682:	18fb      	adds	r3, r7, r3
    1684:	781b      	ldrb	r3, [r3, #0]
    1686:	2b00      	cmp	r3, #0
    1688:	d10f      	bne.n	16aa <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    168a:	230f      	movs	r3, #15
    168c:	18fb      	adds	r3, r7, r3
    168e:	781b      	ldrb	r3, [r3, #0]
    1690:	009b      	lsls	r3, r3, #2
    1692:	2210      	movs	r2, #16
    1694:	4694      	mov	ip, r2
    1696:	44bc      	add	ip, r7
    1698:	4463      	add	r3, ip
    169a:	3b08      	subs	r3, #8
    169c:	681a      	ldr	r2, [r3, #0]
    169e:	230e      	movs	r3, #14
    16a0:	18fb      	adds	r3, r7, r3
    16a2:	781b      	ldrb	r3, [r3, #0]
    16a4:	01db      	lsls	r3, r3, #7
    16a6:	18d3      	adds	r3, r2, r3
    16a8:	e000      	b.n	16ac <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
    16aa:	2300      	movs	r3, #0
}
    16ac:	0018      	movs	r0, r3
    16ae:	46bd      	mov	sp, r7
    16b0:	b004      	add	sp, #16
    16b2:	bd80      	pop	{r7, pc}
    16b4:	41004400 	.word	0x41004400

000016b8 <port_get_group_from_gpio_pin>:
 *
 *  \return Base address of the associated PORT module.
 */
static inline PortGroup* port_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    16b8:	b580      	push	{r7, lr}
    16ba:	b082      	sub	sp, #8
    16bc:	af00      	add	r7, sp, #0
    16be:	0002      	movs	r2, r0
    16c0:	1dfb      	adds	r3, r7, #7
    16c2:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
    16c4:	1dfb      	adds	r3, r7, #7
    16c6:	781b      	ldrb	r3, [r3, #0]
    16c8:	0018      	movs	r0, r3
    16ca:	4b03      	ldr	r3, [pc, #12]	; (16d8 <port_get_group_from_gpio_pin+0x20>)
    16cc:	4798      	blx	r3
    16ce:	0003      	movs	r3, r0
}
    16d0:	0018      	movs	r0, r3
    16d2:	46bd      	mov	sp, r7
    16d4:	b002      	add	sp, #8
    16d6:	bd80      	pop	{r7, pc}
    16d8:	00001659 	.word	0x00001659

000016dc <port_get_config_defaults>:
 *
 *  \param[out] config  Configuration structure to initialize to default values
 */
static inline void port_get_config_defaults(
		struct port_config *const config)
{
    16dc:	b580      	push	{r7, lr}
    16de:	b082      	sub	sp, #8
    16e0:	af00      	add	r7, sp, #0
    16e2:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
    16e4:	687b      	ldr	r3, [r7, #4]
    16e6:	2200      	movs	r2, #0
    16e8:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
    16ea:	687b      	ldr	r3, [r7, #4]
    16ec:	2201      	movs	r2, #1
    16ee:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
    16f0:	687b      	ldr	r3, [r7, #4]
    16f2:	2200      	movs	r2, #0
    16f4:	709a      	strb	r2, [r3, #2]
}
    16f6:	46c0      	nop			; (mov r8, r8)
    16f8:	46bd      	mov	sp, r7
    16fa:	b002      	add	sp, #8
    16fc:	bd80      	pop	{r7, pc}
	...

00001700 <port_pin_set_output_level>:
 *  \param[in] level     Logical level to set the given pin to
 */
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
    1700:	b580      	push	{r7, lr}
    1702:	b084      	sub	sp, #16
    1704:	af00      	add	r7, sp, #0
    1706:	0002      	movs	r2, r0
    1708:	1dfb      	adds	r3, r7, #7
    170a:	701a      	strb	r2, [r3, #0]
    170c:	1dbb      	adds	r3, r7, #6
    170e:	1c0a      	adds	r2, r1, #0
    1710:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    1712:	1dfb      	adds	r3, r7, #7
    1714:	781b      	ldrb	r3, [r3, #0]
    1716:	0018      	movs	r0, r3
    1718:	4b0d      	ldr	r3, [pc, #52]	; (1750 <port_pin_set_output_level+0x50>)
    171a:	4798      	blx	r3
    171c:	0003      	movs	r3, r0
    171e:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    1720:	1dfb      	adds	r3, r7, #7
    1722:	781b      	ldrb	r3, [r3, #0]
    1724:	221f      	movs	r2, #31
    1726:	4013      	ands	r3, r2
    1728:	2201      	movs	r2, #1
    172a:	409a      	lsls	r2, r3
    172c:	0013      	movs	r3, r2
    172e:	60bb      	str	r3, [r7, #8]

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
    1730:	1dbb      	adds	r3, r7, #6
    1732:	781b      	ldrb	r3, [r3, #0]
    1734:	2b00      	cmp	r3, #0
    1736:	d003      	beq.n	1740 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
    1738:	68fb      	ldr	r3, [r7, #12]
    173a:	68ba      	ldr	r2, [r7, #8]
    173c:	619a      	str	r2, [r3, #24]
	} else {
		port_base->OUTCLR.reg = pin_mask;
	}
}
    173e:	e002      	b.n	1746 <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
    1740:	68fb      	ldr	r3, [r7, #12]
    1742:	68ba      	ldr	r2, [r7, #8]
    1744:	615a      	str	r2, [r3, #20]
}
    1746:	46c0      	nop			; (mov r8, r8)
    1748:	46bd      	mov	sp, r7
    174a:	b004      	add	sp, #16
    174c:	bd80      	pop	{r7, pc}
    174e:	46c0      	nop			; (mov r8, r8)
    1750:	000016b9 	.word	0x000016b9

00001754 <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
    1754:	b580      	push	{r7, lr}
    1756:	b082      	sub	sp, #8
    1758:	af00      	add	r7, sp, #0
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);
    175a:	1d3b      	adds	r3, r7, #4
    175c:	0018      	movs	r0, r3
    175e:	4b0e      	ldr	r3, [pc, #56]	; (1798 <system_board_init+0x44>)
    1760:	4798      	blx	r3

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    1762:	1d3b      	adds	r3, r7, #4
    1764:	2201      	movs	r2, #1
    1766:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
    1768:	1d3b      	adds	r3, r7, #4
    176a:	0019      	movs	r1, r3
    176c:	203e      	movs	r0, #62	; 0x3e
    176e:	4b0b      	ldr	r3, [pc, #44]	; (179c <system_board_init+0x48>)
    1770:	4798      	blx	r3
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);
    1772:	2101      	movs	r1, #1
    1774:	203e      	movs	r0, #62	; 0x3e
    1776:	4b0a      	ldr	r3, [pc, #40]	; (17a0 <system_board_init+0x4c>)
    1778:	4798      	blx	r3

	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
    177a:	1d3b      	adds	r3, r7, #4
    177c:	2200      	movs	r2, #0
    177e:	701a      	strb	r2, [r3, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
    1780:	1d3b      	adds	r3, r7, #4
    1782:	2201      	movs	r2, #1
    1784:	705a      	strb	r2, [r3, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
    1786:	1d3b      	adds	r3, r7, #4
    1788:	0019      	movs	r1, r3
    178a:	200f      	movs	r0, #15
    178c:	4b03      	ldr	r3, [pc, #12]	; (179c <system_board_init+0x48>)
    178e:	4798      	blx	r3
	port_pin_set_output_level(AT86RFX_RST_PIN, true);
	port_pin_set_output_level(AT86RFX_SLP_PIN, true);
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
	port_pin_set_config(AT86RFX_SPI_MISO, &pin_conf);
#endif	
}
    1790:	46c0      	nop			; (mov r8, r8)
    1792:	46bd      	mov	sp, r7
    1794:	b002      	add	sp, #8
    1796:	bd80      	pop	{r7, pc}
    1798:	000016dd 	.word	0x000016dd
    179c:	000001d1 	.word	0x000001d1
    17a0:	00001701 	.word	0x00001701

000017a4 <tc_register_callback>:
 */
enum status_code tc_register_callback(
		struct tc_module *const module,
		tc_callback_t callback_func,
		const enum tc_callback callback_type)
{
    17a4:	b580      	push	{r7, lr}
    17a6:	b084      	sub	sp, #16
    17a8:	af00      	add	r7, sp, #0
    17aa:	60f8      	str	r0, [r7, #12]
    17ac:	60b9      	str	r1, [r7, #8]
    17ae:	1dfb      	adds	r3, r7, #7
    17b0:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
    17b2:	1dfb      	adds	r3, r7, #7
    17b4:	781a      	ldrb	r2, [r3, #0]
    17b6:	68fb      	ldr	r3, [r7, #12]
    17b8:	3202      	adds	r2, #2
    17ba:	0092      	lsls	r2, r2, #2
    17bc:	68b9      	ldr	r1, [r7, #8]
    17be:	50d1      	str	r1, [r2, r3]

	/* Set the bit corresponding to the callback_type */
	if (callback_type == TC_CALLBACK_CC_CHANNEL0) {
    17c0:	1dfb      	adds	r3, r7, #7
    17c2:	781b      	ldrb	r3, [r3, #0]
    17c4:	2b02      	cmp	r3, #2
    17c6:	d107      	bne.n	17d8 <tc_register_callback+0x34>
		module->register_callback_mask |= TC_INTFLAG_MC(1);
    17c8:	68fb      	ldr	r3, [r7, #12]
    17ca:	7e1b      	ldrb	r3, [r3, #24]
    17cc:	2210      	movs	r2, #16
    17ce:	4313      	orrs	r3, r2
    17d0:	b2da      	uxtb	r2, r3
    17d2:	68fb      	ldr	r3, [r7, #12]
    17d4:	761a      	strb	r2, [r3, #24]
    17d6:	e019      	b.n	180c <tc_register_callback+0x68>
	}
	else if (callback_type == TC_CALLBACK_CC_CHANNEL1) {
    17d8:	1dfb      	adds	r3, r7, #7
    17da:	781b      	ldrb	r3, [r3, #0]
    17dc:	2b03      	cmp	r3, #3
    17de:	d107      	bne.n	17f0 <tc_register_callback+0x4c>
		module->register_callback_mask |= TC_INTFLAG_MC(2);
    17e0:	68fb      	ldr	r3, [r7, #12]
    17e2:	7e1b      	ldrb	r3, [r3, #24]
    17e4:	2220      	movs	r2, #32
    17e6:	4313      	orrs	r3, r2
    17e8:	b2da      	uxtb	r2, r3
    17ea:	68fb      	ldr	r3, [r7, #12]
    17ec:	761a      	strb	r2, [r3, #24]
    17ee:	e00d      	b.n	180c <tc_register_callback+0x68>
	}
	else {
		module->register_callback_mask |= (1 << callback_type);
    17f0:	68fb      	ldr	r3, [r7, #12]
    17f2:	7e1b      	ldrb	r3, [r3, #24]
    17f4:	b25a      	sxtb	r2, r3
    17f6:	1dfb      	adds	r3, r7, #7
    17f8:	781b      	ldrb	r3, [r3, #0]
    17fa:	2101      	movs	r1, #1
    17fc:	4099      	lsls	r1, r3
    17fe:	000b      	movs	r3, r1
    1800:	b25b      	sxtb	r3, r3
    1802:	4313      	orrs	r3, r2
    1804:	b25b      	sxtb	r3, r3
    1806:	b2da      	uxtb	r2, r3
    1808:	68fb      	ldr	r3, [r7, #12]
    180a:	761a      	strb	r2, [r3, #24]
	}
	return STATUS_OK;
    180c:	2300      	movs	r3, #0
}
    180e:	0018      	movs	r0, r3
    1810:	46bd      	mov	sp, r7
    1812:	b004      	add	sp, #16
    1814:	bd80      	pop	{r7, pc}
	...

00001818 <TC3_Handler>:
#if (SAML21E) || (SAML21G) || (SAMR30E) || (SAMR30G)
	_TC_INTERRUPT_HANDLER(0,0)
	_TC_INTERRUPT_HANDLER(1,1)
	_TC_INTERRUPT_HANDLER(4,2)
#else
	MRECURSION(TC_INST_NUM, _TC_INTERRUPT_HANDLER, TC_INST_MAX_ID)
    1818:	b580      	push	{r7, lr}
    181a:	af00      	add	r7, sp, #0
    181c:	2000      	movs	r0, #0
    181e:	4b02      	ldr	r3, [pc, #8]	; (1828 <TC3_Handler+0x10>)
    1820:	4798      	blx	r3
    1822:	46c0      	nop			; (mov r8, r8)
    1824:	46bd      	mov	sp, r7
    1826:	bd80      	pop	{r7, pc}
    1828:	0000187d 	.word	0x0000187d

0000182c <TC4_Handler>:
    182c:	b580      	push	{r7, lr}
    182e:	af00      	add	r7, sp, #0
    1830:	2001      	movs	r0, #1
    1832:	4b02      	ldr	r3, [pc, #8]	; (183c <TC4_Handler+0x10>)
    1834:	4798      	blx	r3
    1836:	46c0      	nop			; (mov r8, r8)
    1838:	46bd      	mov	sp, r7
    183a:	bd80      	pop	{r7, pc}
    183c:	0000187d 	.word	0x0000187d

00001840 <TC5_Handler>:
    1840:	b580      	push	{r7, lr}
    1842:	af00      	add	r7, sp, #0
    1844:	2002      	movs	r0, #2
    1846:	4b02      	ldr	r3, [pc, #8]	; (1850 <TC5_Handler+0x10>)
    1848:	4798      	blx	r3
    184a:	46c0      	nop			; (mov r8, r8)
    184c:	46bd      	mov	sp, r7
    184e:	bd80      	pop	{r7, pc}
    1850:	0000187d 	.word	0x0000187d

00001854 <TC6_Handler>:
    1854:	b580      	push	{r7, lr}
    1856:	af00      	add	r7, sp, #0
    1858:	2003      	movs	r0, #3
    185a:	4b02      	ldr	r3, [pc, #8]	; (1864 <TC6_Handler+0x10>)
    185c:	4798      	blx	r3
    185e:	46c0      	nop			; (mov r8, r8)
    1860:	46bd      	mov	sp, r7
    1862:	bd80      	pop	{r7, pc}
    1864:	0000187d 	.word	0x0000187d

00001868 <TC7_Handler>:
    1868:	b580      	push	{r7, lr}
    186a:	af00      	add	r7, sp, #0
    186c:	2004      	movs	r0, #4
    186e:	4b02      	ldr	r3, [pc, #8]	; (1878 <TC7_Handler+0x10>)
    1870:	4798      	blx	r3
    1872:	46c0      	nop			; (mov r8, r8)
    1874:	46bd      	mov	sp, r7
    1876:	bd80      	pop	{r7, pc}
    1878:	0000187d 	.word	0x0000187d

0000187c <_tc_interrupt_handler>:
 * \param[in]  instance  ID of the TC instance calling the interrupt
 *                       handler
 */
void _tc_interrupt_handler(
		uint8_t instance)
{
    187c:	b580      	push	{r7, lr}
    187e:	b084      	sub	sp, #16
    1880:	af00      	add	r7, sp, #0
    1882:	0002      	movs	r2, r0
    1884:	1dfb      	adds	r3, r7, #7
    1886:	701a      	strb	r2, [r3, #0]
	/* Temporary variable */
	uint8_t interrupt_and_callback_status_mask;

	/* Get device instance from the look-up table */
	struct tc_module *module
			= (struct tc_module *)_tc_instances[instance];
    1888:	1dfb      	adds	r3, r7, #7
    188a:	781a      	ldrb	r2, [r3, #0]
	struct tc_module *module
    188c:	4b28      	ldr	r3, [pc, #160]	; (1930 <_tc_interrupt_handler+0xb4>)
    188e:	0092      	lsls	r2, r2, #2
    1890:	58d3      	ldr	r3, [r2, r3]
    1892:	60fb      	str	r3, [r7, #12]

	/* Read and mask interrupt flag register */
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
    1894:	68fb      	ldr	r3, [r7, #12]
    1896:	681b      	ldr	r3, [r3, #0]
    1898:	7b9b      	ldrb	r3, [r3, #14]
    189a:	b2db      	uxtb	r3, r3
			module->register_callback_mask &
    189c:	68fa      	ldr	r2, [r7, #12]
    189e:	7e12      	ldrb	r2, [r2, #24]
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
    18a0:	4013      	ands	r3, r2
    18a2:	b2da      	uxtb	r2, r3
			module->enable_callback_mask;
    18a4:	68fb      	ldr	r3, [r7, #12]
    18a6:	7e59      	ldrb	r1, [r3, #25]
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
    18a8:	230b      	movs	r3, #11
    18aa:	18fb      	adds	r3, r7, r3
    18ac:	400a      	ands	r2, r1
    18ae:	701a      	strb	r2, [r3, #0]

	/* Check if an Overflow interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_OVF) {
    18b0:	230b      	movs	r3, #11
    18b2:	18fb      	adds	r3, r7, r3
    18b4:	781b      	ldrb	r3, [r3, #0]
    18b6:	2201      	movs	r2, #1
    18b8:	4013      	ands	r3, r2
    18ba:	d008      	beq.n	18ce <_tc_interrupt_handler+0x52>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_OVERFLOW])(module);
    18bc:	68fb      	ldr	r3, [r7, #12]
    18be:	689b      	ldr	r3, [r3, #8]
    18c0:	68fa      	ldr	r2, [r7, #12]
    18c2:	0010      	movs	r0, r2
    18c4:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
    18c6:	68fb      	ldr	r3, [r7, #12]
    18c8:	681b      	ldr	r3, [r3, #0]
    18ca:	2201      	movs	r2, #1
    18cc:	739a      	strb	r2, [r3, #14]
	}

	/* Check if an Error interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_ERR) {
    18ce:	230b      	movs	r3, #11
    18d0:	18fb      	adds	r3, r7, r3
    18d2:	781b      	ldrb	r3, [r3, #0]
    18d4:	2202      	movs	r2, #2
    18d6:	4013      	ands	r3, r2
    18d8:	d008      	beq.n	18ec <_tc_interrupt_handler+0x70>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_ERROR])(module);
    18da:	68fb      	ldr	r3, [r7, #12]
    18dc:	68db      	ldr	r3, [r3, #12]
    18de:	68fa      	ldr	r2, [r7, #12]
    18e0:	0010      	movs	r0, r2
    18e2:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
    18e4:	68fb      	ldr	r3, [r7, #12]
    18e6:	681b      	ldr	r3, [r3, #0]
    18e8:	2202      	movs	r2, #2
    18ea:	739a      	strb	r2, [r3, #14]
	}

	/* Check if an Match/Capture Channel 0 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(1)) {
    18ec:	230b      	movs	r3, #11
    18ee:	18fb      	adds	r3, r7, r3
    18f0:	781b      	ldrb	r3, [r3, #0]
    18f2:	2210      	movs	r2, #16
    18f4:	4013      	ands	r3, r2
    18f6:	d008      	beq.n	190a <_tc_interrupt_handler+0x8e>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL0])(module);
    18f8:	68fb      	ldr	r3, [r7, #12]
    18fa:	691b      	ldr	r3, [r3, #16]
    18fc:	68fa      	ldr	r2, [r7, #12]
    18fe:	0010      	movs	r0, r2
    1900:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
    1902:	68fb      	ldr	r3, [r7, #12]
    1904:	681b      	ldr	r3, [r3, #0]
    1906:	2210      	movs	r2, #16
    1908:	739a      	strb	r2, [r3, #14]
	}

	/* Check if an Match/Capture Channel 1 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(2)) {
    190a:	230b      	movs	r3, #11
    190c:	18fb      	adds	r3, r7, r3
    190e:	781b      	ldrb	r3, [r3, #0]
    1910:	2220      	movs	r2, #32
    1912:	4013      	ands	r3, r2
    1914:	d008      	beq.n	1928 <_tc_interrupt_handler+0xac>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
    1916:	68fb      	ldr	r3, [r7, #12]
    1918:	695b      	ldr	r3, [r3, #20]
    191a:	68fa      	ldr	r2, [r7, #12]
    191c:	0010      	movs	r0, r2
    191e:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
    1920:	68fb      	ldr	r3, [r7, #12]
    1922:	681b      	ldr	r3, [r3, #0]
    1924:	2220      	movs	r2, #32
    1926:	739a      	strb	r2, [r3, #14]
	}
}
    1928:	46c0      	nop			; (mov r8, r8)
    192a:	46bd      	mov	sp, r7
    192c:	b004      	add	sp, #16
    192e:	bd80      	pop	{r7, pc}
    1930:	200026d0 	.word	0x200026d0

00001934 <system_gclk_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_chan_get_config_defaults(
		struct system_gclk_chan_config *const config)
{
    1934:	b580      	push	{r7, lr}
    1936:	b082      	sub	sp, #8
    1938:	af00      	add	r7, sp, #0
    193a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
    193c:	687b      	ldr	r3, [r7, #4]
    193e:	2200      	movs	r2, #0
    1940:	701a      	strb	r2, [r3, #0]
}
    1942:	46c0      	nop			; (mov r8, r8)
    1944:	46bd      	mov	sp, r7
    1946:	b002      	add	sp, #8
    1948:	bd80      	pop	{r7, pc}
	...

0000194c <system_apb_clock_set_mask>:
 * \retval STATUS_OK               The clock mask was set successfully
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
    194c:	b580      	push	{r7, lr}
    194e:	b082      	sub	sp, #8
    1950:	af00      	add	r7, sp, #0
    1952:	0002      	movs	r2, r0
    1954:	6039      	str	r1, [r7, #0]
    1956:	1dfb      	adds	r3, r7, #7
    1958:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    195a:	1dfb      	adds	r3, r7, #7
    195c:	781b      	ldrb	r3, [r3, #0]
    195e:	2b01      	cmp	r3, #1
    1960:	d00a      	beq.n	1978 <system_apb_clock_set_mask+0x2c>
    1962:	2b02      	cmp	r3, #2
    1964:	d00f      	beq.n	1986 <system_apb_clock_set_mask+0x3a>
    1966:	2b00      	cmp	r3, #0
    1968:	d114      	bne.n	1994 <system_apb_clock_set_mask+0x48>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
    196a:	4b0e      	ldr	r3, [pc, #56]	; (19a4 <system_apb_clock_set_mask+0x58>)
    196c:	4a0d      	ldr	r2, [pc, #52]	; (19a4 <system_apb_clock_set_mask+0x58>)
    196e:	6991      	ldr	r1, [r2, #24]
    1970:	683a      	ldr	r2, [r7, #0]
    1972:	430a      	orrs	r2, r1
    1974:	619a      	str	r2, [r3, #24]
			break;
    1976:	e00f      	b.n	1998 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
    1978:	4b0a      	ldr	r3, [pc, #40]	; (19a4 <system_apb_clock_set_mask+0x58>)
    197a:	4a0a      	ldr	r2, [pc, #40]	; (19a4 <system_apb_clock_set_mask+0x58>)
    197c:	69d1      	ldr	r1, [r2, #28]
    197e:	683a      	ldr	r2, [r7, #0]
    1980:	430a      	orrs	r2, r1
    1982:	61da      	str	r2, [r3, #28]
			break;
    1984:	e008      	b.n	1998 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
    1986:	4b07      	ldr	r3, [pc, #28]	; (19a4 <system_apb_clock_set_mask+0x58>)
    1988:	4a06      	ldr	r2, [pc, #24]	; (19a4 <system_apb_clock_set_mask+0x58>)
    198a:	6a11      	ldr	r1, [r2, #32]
    198c:	683a      	ldr	r2, [r7, #0]
    198e:	430a      	orrs	r2, r1
    1990:	621a      	str	r2, [r3, #32]
			break;
    1992:	e001      	b.n	1998 <system_apb_clock_set_mask+0x4c>

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
    1994:	2317      	movs	r3, #23
    1996:	e000      	b.n	199a <system_apb_clock_set_mask+0x4e>

	}

	return STATUS_OK;
    1998:	2300      	movs	r3, #0
}
    199a:	0018      	movs	r0, r3
    199c:	46bd      	mov	sp, r7
    199e:	b002      	add	sp, #8
    19a0:	bd80      	pop	{r7, pc}
    19a2:	46c0      	nop			; (mov r8, r8)
    19a4:	40000400 	.word	0x40000400

000019a8 <system_pinmux_get_config_defaults>:
{
    19a8:	b580      	push	{r7, lr}
    19aa:	b082      	sub	sp, #8
    19ac:	af00      	add	r7, sp, #0
    19ae:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    19b0:	687b      	ldr	r3, [r7, #4]
    19b2:	2280      	movs	r2, #128	; 0x80
    19b4:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    19b6:	687b      	ldr	r3, [r7, #4]
    19b8:	2200      	movs	r2, #0
    19ba:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    19bc:	687b      	ldr	r3, [r7, #4]
    19be:	2201      	movs	r2, #1
    19c0:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    19c2:	687b      	ldr	r3, [r7, #4]
    19c4:	2200      	movs	r2, #0
    19c6:	70da      	strb	r2, [r3, #3]
}
    19c8:	46c0      	nop			; (mov r8, r8)
    19ca:	46bd      	mov	sp, r7
    19cc:	b002      	add	sp, #8
    19ce:	bd80      	pop	{r7, pc}

000019d0 <tc_is_syncing>:
 * \retval false If the module has completed synchronization
 * \retval true  If the module synchronization is ongoing
 */
static inline bool tc_is_syncing(
		const struct tc_module *const module_inst)
{
    19d0:	b580      	push	{r7, lr}
    19d2:	b084      	sub	sp, #16
    19d4:	af00      	add	r7, sp, #0
    19d6:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    19d8:	687b      	ldr	r3, [r7, #4]
    19da:	681b      	ldr	r3, [r3, #0]
    19dc:	60fb      	str	r3, [r7, #12]

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30)
	return (tc_module->SYNCBUSY.reg);
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    19de:	68fb      	ldr	r3, [r7, #12]
    19e0:	7bdb      	ldrb	r3, [r3, #15]
    19e2:	b2db      	uxtb	r3, r3
    19e4:	001a      	movs	r2, r3
    19e6:	2380      	movs	r3, #128	; 0x80
    19e8:	4013      	ands	r3, r2
    19ea:	1e5a      	subs	r2, r3, #1
    19ec:	4193      	sbcs	r3, r2
    19ee:	b2db      	uxtb	r3, r3
#endif
}
    19f0:	0018      	movs	r0, r3
    19f2:	46bd      	mov	sp, r7
    19f4:	b004      	add	sp, #16
    19f6:	bd80      	pop	{r7, pc}

000019f8 <_tc_get_inst_index>:
 *
 * \return Index of the given TC module instance.
 */
uint8_t _tc_get_inst_index(
		Tc *const hw)
{
    19f8:	b590      	push	{r4, r7, lr}
    19fa:	b089      	sub	sp, #36	; 0x24
    19fc:	af00      	add	r7, sp, #0
    19fe:	6078      	str	r0, [r7, #4]
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;
    1a00:	2308      	movs	r3, #8
    1a02:	18fb      	adds	r3, r7, r3
    1a04:	4a0e      	ldr	r2, [pc, #56]	; (1a40 <_tc_get_inst_index+0x48>)
    1a06:	ca13      	ldmia	r2!, {r0, r1, r4}
    1a08:	c313      	stmia	r3!, {r0, r1, r4}
    1a0a:	ca03      	ldmia	r2!, {r0, r1}
    1a0c:	c303      	stmia	r3!, {r0, r1}

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    1a0e:	2300      	movs	r3, #0
    1a10:	61fb      	str	r3, [r7, #28]
    1a12:	e00d      	b.n	1a30 <_tc_get_inst_index+0x38>
		if (hw == tc_modules[i]) {
    1a14:	2308      	movs	r3, #8
    1a16:	18fb      	adds	r3, r7, r3
    1a18:	69fa      	ldr	r2, [r7, #28]
    1a1a:	0092      	lsls	r2, r2, #2
    1a1c:	58d2      	ldr	r2, [r2, r3]
    1a1e:	687b      	ldr	r3, [r7, #4]
    1a20:	429a      	cmp	r2, r3
    1a22:	d102      	bne.n	1a2a <_tc_get_inst_index+0x32>
			return i;
    1a24:	69fb      	ldr	r3, [r7, #28]
    1a26:	b2db      	uxtb	r3, r3
    1a28:	e006      	b.n	1a38 <_tc_get_inst_index+0x40>
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    1a2a:	69fb      	ldr	r3, [r7, #28]
    1a2c:	3301      	adds	r3, #1
    1a2e:	61fb      	str	r3, [r7, #28]
    1a30:	69fb      	ldr	r3, [r7, #28]
    1a32:	2b04      	cmp	r3, #4
    1a34:	d9ee      	bls.n	1a14 <_tc_get_inst_index+0x1c>
		}
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
    1a36:	2300      	movs	r3, #0
}
    1a38:	0018      	movs	r0, r3
    1a3a:	46bd      	mov	sp, r7
    1a3c:	b009      	add	sp, #36	; 0x24
    1a3e:	bd90      	pop	{r4, r7, pc}
    1a40:	0001f810 	.word	0x0001f810

00001a44 <tc_init>:
 */
enum status_code tc_init(
		struct tc_module *const module_inst,
		Tc *const hw,
		const struct tc_config *const config)
{
    1a44:	b590      	push	{r4, r7, lr}
    1a46:	b08d      	sub	sp, #52	; 0x34
    1a48:	af00      	add	r7, sp, #0
    1a4a:	60f8      	str	r0, [r7, #12]
    1a4c:	60b9      	str	r1, [r7, #8]
    1a4e:	607a      	str	r2, [r7, #4]
	Assert(module_inst);
	Assert(config);

	/* Temporary variable to hold all updates to the CTRLA
	 * register before they are written to it */
	uint16_t ctrla_tmp = 0;
    1a50:	232e      	movs	r3, #46	; 0x2e
    1a52:	18fb      	adds	r3, r7, r3
    1a54:	2200      	movs	r2, #0
    1a56:	801a      	strh	r2, [r3, #0]
	/* Temporary variable to hold all updates to the CTRLBSET
	 * register before they are written to it */
	uint8_t ctrlbset_tmp = 0;
    1a58:	232d      	movs	r3, #45	; 0x2d
    1a5a:	18fb      	adds	r3, r7, r3
    1a5c:	2200      	movs	r2, #0
    1a5e:	701a      	strb	r2, [r3, #0]
	/* Temporary variable to hold all updates to the CTRLC
	 * register before they are written to it */
	uint8_t ctrlc_tmp = 0;
    1a60:	232c      	movs	r3, #44	; 0x2c
    1a62:	18fb      	adds	r3, r7, r3
    1a64:	2200      	movs	r2, #0
    1a66:	701a      	strb	r2, [r3, #0]
	/* Temporary variable to hold TC instance number */
	uint8_t instance = _tc_get_inst_index(hw);
    1a68:	2329      	movs	r3, #41	; 0x29
    1a6a:	18fc      	adds	r4, r7, r3
    1a6c:	68bb      	ldr	r3, [r7, #8]
    1a6e:	0018      	movs	r0, r3
    1a70:	4bbd      	ldr	r3, [pc, #756]	; (1d68 <tc_init+0x324>)
    1a72:	4798      	blx	r3
    1a74:	0003      	movs	r3, r0
    1a76:	7023      	strb	r3, [r4, #0]

	/* Array of GLCK ID for different TC instances */
	uint8_t inst_gclk_id[] = TC_INST_GCLK_ID;
    1a78:	2324      	movs	r3, #36	; 0x24
    1a7a:	18fb      	adds	r3, r7, r3
    1a7c:	4abb      	ldr	r2, [pc, #748]	; (1d6c <tc_init+0x328>)
    1a7e:	6811      	ldr	r1, [r2, #0]
    1a80:	6019      	str	r1, [r3, #0]
    1a82:	7912      	ldrb	r2, [r2, #4]
    1a84:	711a      	strb	r2, [r3, #4]
	/* Array of PM APBC mask bit position for different TC instances */
	uint16_t inst_pm_apbmask[] = TC_INST_PM_APBCMASK;
    1a86:	2318      	movs	r3, #24
    1a88:	18fb      	adds	r3, r7, r3
    1a8a:	4ab9      	ldr	r2, [pc, #740]	; (1d70 <tc_init+0x32c>)
    1a8c:	ca03      	ldmia	r2!, {r0, r1}
    1a8e:	c303      	stmia	r3!, {r0, r1}
    1a90:	8812      	ldrh	r2, [r2, #0]
    1a92:	801a      	strh	r2, [r3, #0]
	struct system_pinmux_config pin_config;
	struct system_gclk_chan_config gclk_chan_config;

#if TC_ASYNC == true
	/* Initialize parameters */
	for (uint8_t i = 0; i < TC_CALLBACK_N; i++) {
    1a94:	232b      	movs	r3, #43	; 0x2b
    1a96:	18fb      	adds	r3, r7, r3
    1a98:	2200      	movs	r2, #0
    1a9a:	701a      	strb	r2, [r3, #0]
    1a9c:	e00e      	b.n	1abc <tc_init+0x78>
		module_inst->callback[i]        = NULL;
    1a9e:	232b      	movs	r3, #43	; 0x2b
    1aa0:	18fb      	adds	r3, r7, r3
    1aa2:	781a      	ldrb	r2, [r3, #0]
    1aa4:	68fb      	ldr	r3, [r7, #12]
    1aa6:	3202      	adds	r2, #2
    1aa8:	0092      	lsls	r2, r2, #2
    1aaa:	2100      	movs	r1, #0
    1aac:	50d1      	str	r1, [r2, r3]
	for (uint8_t i = 0; i < TC_CALLBACK_N; i++) {
    1aae:	232b      	movs	r3, #43	; 0x2b
    1ab0:	18fb      	adds	r3, r7, r3
    1ab2:	781a      	ldrb	r2, [r3, #0]
    1ab4:	232b      	movs	r3, #43	; 0x2b
    1ab6:	18fb      	adds	r3, r7, r3
    1ab8:	3201      	adds	r2, #1
    1aba:	701a      	strb	r2, [r3, #0]
    1abc:	232b      	movs	r3, #43	; 0x2b
    1abe:	18fb      	adds	r3, r7, r3
    1ac0:	781b      	ldrb	r3, [r3, #0]
    1ac2:	2b03      	cmp	r3, #3
    1ac4:	d9eb      	bls.n	1a9e <tc_init+0x5a>
	}
	module_inst->register_callback_mask     = 0x00;
    1ac6:	68fb      	ldr	r3, [r7, #12]
    1ac8:	2200      	movs	r2, #0
    1aca:	761a      	strb	r2, [r3, #24]
	module_inst->enable_callback_mask       = 0x00;
    1acc:	68fb      	ldr	r3, [r7, #12]
    1ace:	2200      	movs	r2, #0
    1ad0:	765a      	strb	r2, [r3, #25]

	/* Register this instance for callbacks*/
	_tc_instances[instance] = module_inst;
    1ad2:	2329      	movs	r3, #41	; 0x29
    1ad4:	18fb      	adds	r3, r7, r3
    1ad6:	781a      	ldrb	r2, [r3, #0]
    1ad8:	4ba6      	ldr	r3, [pc, #664]	; (1d74 <tc_init+0x330>)
    1ada:	0092      	lsls	r2, r2, #2
    1adc:	68f9      	ldr	r1, [r7, #12]
    1ade:	50d1      	str	r1, [r2, r3]
#endif

	/* Associate the given device instance with the hardware module */
	module_inst->hw = hw;
    1ae0:	68fb      	ldr	r3, [r7, #12]
    1ae2:	68ba      	ldr	r2, [r7, #8]
    1ae4:	601a      	str	r2, [r3, #0]
#else
	/* Check if odd numbered TC modules are being configured in 32-bit
	 * counter size. Only even numbered counters are allowed to be
	 * configured in 32-bit counter size.
	 */
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) &&
    1ae6:	687b      	ldr	r3, [r7, #4]
    1ae8:	789b      	ldrb	r3, [r3, #2]
    1aea:	2b08      	cmp	r3, #8
    1aec:	d108      	bne.n	1b00 <tc_init+0xbc>
			((instance + TC_INSTANCE_OFFSET) & 0x01)) {
    1aee:	2329      	movs	r3, #41	; 0x29
    1af0:	18fb      	adds	r3, r7, r3
    1af2:	781b      	ldrb	r3, [r3, #0]
    1af4:	3303      	adds	r3, #3
    1af6:	2201      	movs	r2, #1
    1af8:	4013      	ands	r3, r2
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) &&
    1afa:	d001      	beq.n	1b00 <tc_init+0xbc>
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    1afc:	2317      	movs	r3, #23
    1afe:	e1c2      	b.n	1e86 <tc_init+0x442>
#endif

	/* Make the counter size variable in the module_inst struct reflect
	 * the counter size in the module
	 */
	module_inst->counter_size = config->counter_size;
    1b00:	687b      	ldr	r3, [r7, #4]
    1b02:	789a      	ldrb	r2, [r3, #2]
    1b04:	68fb      	ldr	r3, [r7, #12]
    1b06:	711a      	strb	r2, [r3, #4]

	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_SWRST) {
    1b08:	68bb      	ldr	r3, [r7, #8]
    1b0a:	881b      	ldrh	r3, [r3, #0]
    1b0c:	b29b      	uxth	r3, r3
    1b0e:	001a      	movs	r2, r3
    1b10:	2301      	movs	r3, #1
    1b12:	4013      	ands	r3, r2
    1b14:	d001      	beq.n	1b1a <tc_init+0xd6>
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
    1b16:	2305      	movs	r3, #5
    1b18:	e1b5      	b.n	1e86 <tc_init+0x442>
	}

	if (hw->COUNT8.STATUS.reg & TC_STATUS_SLAVE) {
    1b1a:	68bb      	ldr	r3, [r7, #8]
    1b1c:	7bdb      	ldrb	r3, [r3, #15]
    1b1e:	b2db      	uxtb	r3, r3
    1b20:	001a      	movs	r2, r3
    1b22:	2310      	movs	r3, #16
    1b24:	4013      	ands	r3, r2
    1b26:	d001      	beq.n	1b2c <tc_init+0xe8>
		/* Module is used as a slave */
		return STATUS_ERR_DENIED;
    1b28:	231c      	movs	r3, #28
    1b2a:	e1ac      	b.n	1e86 <tc_init+0x442>
	}

	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_ENABLE) {
    1b2c:	68bb      	ldr	r3, [r7, #8]
    1b2e:	881b      	ldrh	r3, [r3, #0]
    1b30:	b29b      	uxth	r3, r3
    1b32:	001a      	movs	r2, r3
    1b34:	2302      	movs	r3, #2
    1b36:	4013      	ands	r3, r2
    1b38:	d001      	beq.n	1b3e <tc_init+0xfa>
		/* Module must be disabled before initialization. Abort. */
		return STATUS_ERR_DENIED;
    1b3a:	231c      	movs	r3, #28
    1b3c:	e1a3      	b.n	1e86 <tc_init+0x442>
	}

	/* Set up the TC PWM out pin for channel 0 */
	if (config->pwm_channel[0].enabled) {
    1b3e:	687b      	ldr	r3, [r7, #4]
    1b40:	7c1b      	ldrb	r3, [r3, #16]
    1b42:	2b00      	cmp	r3, #0
    1b44:	d017      	beq.n	1b76 <tc_init+0x132>
		system_pinmux_get_config_defaults(&pin_config);
    1b46:	2314      	movs	r3, #20
    1b48:	18fb      	adds	r3, r7, r3
    1b4a:	0018      	movs	r0, r3
    1b4c:	4b8a      	ldr	r3, [pc, #552]	; (1d78 <tc_init+0x334>)
    1b4e:	4798      	blx	r3
		pin_config.mux_position = config->pwm_channel[0].pin_mux;
    1b50:	687b      	ldr	r3, [r7, #4]
    1b52:	699b      	ldr	r3, [r3, #24]
    1b54:	b2da      	uxtb	r2, r3
    1b56:	2314      	movs	r3, #20
    1b58:	18fb      	adds	r3, r7, r3
    1b5a:	701a      	strb	r2, [r3, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
    1b5c:	2314      	movs	r3, #20
    1b5e:	18fb      	adds	r3, r7, r3
    1b60:	2201      	movs	r2, #1
    1b62:	705a      	strb	r2, [r3, #1]
		system_pinmux_pin_set_config(
				config->pwm_channel[0].pin_out, &pin_config);
    1b64:	687b      	ldr	r3, [r7, #4]
    1b66:	695b      	ldr	r3, [r3, #20]
		system_pinmux_pin_set_config(
    1b68:	b2db      	uxtb	r3, r3
    1b6a:	2214      	movs	r2, #20
    1b6c:	18ba      	adds	r2, r7, r2
    1b6e:	0011      	movs	r1, r2
    1b70:	0018      	movs	r0, r3
    1b72:	4b82      	ldr	r3, [pc, #520]	; (1d7c <tc_init+0x338>)
    1b74:	4798      	blx	r3
	}

	/* Set up the TC PWM out pin for channel 1 */
	if (config->pwm_channel[1].enabled) {
    1b76:	687b      	ldr	r3, [r7, #4]
    1b78:	7f1b      	ldrb	r3, [r3, #28]
    1b7a:	2b00      	cmp	r3, #0
    1b7c:	d017      	beq.n	1bae <tc_init+0x16a>
		system_pinmux_get_config_defaults(&pin_config);
    1b7e:	2314      	movs	r3, #20
    1b80:	18fb      	adds	r3, r7, r3
    1b82:	0018      	movs	r0, r3
    1b84:	4b7c      	ldr	r3, [pc, #496]	; (1d78 <tc_init+0x334>)
    1b86:	4798      	blx	r3
		pin_config.mux_position = config->pwm_channel[1].pin_mux;
    1b88:	687b      	ldr	r3, [r7, #4]
    1b8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    1b8c:	b2da      	uxtb	r2, r3
    1b8e:	2314      	movs	r3, #20
    1b90:	18fb      	adds	r3, r7, r3
    1b92:	701a      	strb	r2, [r3, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
    1b94:	2314      	movs	r3, #20
    1b96:	18fb      	adds	r3, r7, r3
    1b98:	2201      	movs	r2, #1
    1b9a:	705a      	strb	r2, [r3, #1]
		system_pinmux_pin_set_config(
				config->pwm_channel[1].pin_out, &pin_config);
    1b9c:	687b      	ldr	r3, [r7, #4]
    1b9e:	6a1b      	ldr	r3, [r3, #32]
		system_pinmux_pin_set_config(
    1ba0:	b2db      	uxtb	r3, r3
    1ba2:	2214      	movs	r2, #20
    1ba4:	18ba      	adds	r2, r7, r2
    1ba6:	0011      	movs	r1, r2
    1ba8:	0018      	movs	r0, r3
    1baa:	4b74      	ldr	r3, [pc, #464]	; (1d7c <tc_init+0x338>)
    1bac:	4798      	blx	r3
	}

	/* Enable the user interface clock in the PM */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
			inst_pm_apbmask[instance]);
    1bae:	2329      	movs	r3, #41	; 0x29
    1bb0:	18fb      	adds	r3, r7, r3
    1bb2:	781a      	ldrb	r2, [r3, #0]
    1bb4:	2318      	movs	r3, #24
    1bb6:	18fb      	adds	r3, r7, r3
    1bb8:	0052      	lsls	r2, r2, #1
    1bba:	5ad3      	ldrh	r3, [r2, r3]
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
    1bbc:	0019      	movs	r1, r3
    1bbe:	2002      	movs	r0, #2
    1bc0:	4b6f      	ldr	r3, [pc, #444]	; (1d80 <tc_init+0x33c>)
    1bc2:	4798      	blx	r3

	/* Enable the slave counter if counter_size is 32-bit */
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT))
    1bc4:	687b      	ldr	r3, [r7, #4]
    1bc6:	789b      	ldrb	r3, [r3, #2]
    1bc8:	2b08      	cmp	r3, #8
    1bca:	d10b      	bne.n	1be4 <tc_init+0x1a0>
	{
		/* Enable the user interface clock in the PM */
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
				inst_pm_apbmask[instance + 1]);
    1bcc:	2329      	movs	r3, #41	; 0x29
    1bce:	18fb      	adds	r3, r7, r3
    1bd0:	781b      	ldrb	r3, [r3, #0]
    1bd2:	1c5a      	adds	r2, r3, #1
    1bd4:	2318      	movs	r3, #24
    1bd6:	18fb      	adds	r3, r7, r3
    1bd8:	0052      	lsls	r2, r2, #1
    1bda:	5ad3      	ldrh	r3, [r2, r3]
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
    1bdc:	0019      	movs	r1, r3
    1bde:	2002      	movs	r0, #2
    1be0:	4b67      	ldr	r3, [pc, #412]	; (1d80 <tc_init+0x33c>)
    1be2:	4798      	blx	r3
	}

	/* Setup clock for module */
	system_gclk_chan_get_config_defaults(&gclk_chan_config);
    1be4:	2310      	movs	r3, #16
    1be6:	18fb      	adds	r3, r7, r3
    1be8:	0018      	movs	r0, r3
    1bea:	4b66      	ldr	r3, [pc, #408]	; (1d84 <tc_init+0x340>)
    1bec:	4798      	blx	r3
	gclk_chan_config.source_generator = config->clock_source;
    1bee:	687b      	ldr	r3, [r7, #4]
    1bf0:	781a      	ldrb	r2, [r3, #0]
    1bf2:	2310      	movs	r3, #16
    1bf4:	18fb      	adds	r3, r7, r3
    1bf6:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(inst_gclk_id[instance], &gclk_chan_config);
    1bf8:	2329      	movs	r3, #41	; 0x29
    1bfa:	18fb      	adds	r3, r7, r3
    1bfc:	781b      	ldrb	r3, [r3, #0]
    1bfe:	2224      	movs	r2, #36	; 0x24
    1c00:	18ba      	adds	r2, r7, r2
    1c02:	5cd3      	ldrb	r3, [r2, r3]
    1c04:	2210      	movs	r2, #16
    1c06:	18ba      	adds	r2, r7, r2
    1c08:	0011      	movs	r1, r2
    1c0a:	0018      	movs	r0, r3
    1c0c:	4b5e      	ldr	r3, [pc, #376]	; (1d88 <tc_init+0x344>)
    1c0e:	4798      	blx	r3
	system_gclk_chan_enable(inst_gclk_id[instance]);
    1c10:	2329      	movs	r3, #41	; 0x29
    1c12:	18fb      	adds	r3, r7, r3
    1c14:	781b      	ldrb	r3, [r3, #0]
    1c16:	2224      	movs	r2, #36	; 0x24
    1c18:	18ba      	adds	r2, r7, r2
    1c1a:	5cd3      	ldrb	r3, [r2, r3]
    1c1c:	0018      	movs	r0, r3
    1c1e:	4b5b      	ldr	r3, [pc, #364]	; (1d8c <tc_init+0x348>)
    1c20:	4798      	blx	r3

	/* Set ctrla register */
	ctrla_tmp =
			(uint32_t)config->counter_size |
    1c22:	687b      	ldr	r3, [r7, #4]
    1c24:	789a      	ldrb	r2, [r3, #2]
			(uint32_t)config->wave_generation |
    1c26:	687b      	ldr	r3, [r7, #4]
    1c28:	799b      	ldrb	r3, [r3, #6]
    1c2a:	4313      	orrs	r3, r2
    1c2c:	b2db      	uxtb	r3, r3
    1c2e:	b29a      	uxth	r2, r3
			(uint32_t)config->reload_action |
    1c30:	687b      	ldr	r3, [r7, #4]
    1c32:	891b      	ldrh	r3, [r3, #8]
			(uint32_t)config->wave_generation |
    1c34:	4313      	orrs	r3, r2
    1c36:	b299      	uxth	r1, r3
			(uint32_t)config->clock_prescaler;
    1c38:	687b      	ldr	r3, [r7, #4]
    1c3a:	889a      	ldrh	r2, [r3, #4]
	ctrla_tmp =
    1c3c:	232e      	movs	r3, #46	; 0x2e
    1c3e:	18fb      	adds	r3, r7, r3
    1c40:	430a      	orrs	r2, r1
    1c42:	801a      	strh	r2, [r3, #0]

	if (config->run_in_standby) {
    1c44:	687b      	ldr	r3, [r7, #4]
    1c46:	785b      	ldrb	r3, [r3, #1]
    1c48:	2b00      	cmp	r3, #0
    1c4a:	d008      	beq.n	1c5e <tc_init+0x21a>
		ctrla_tmp |= TC_CTRLA_RUNSTDBY;
    1c4c:	232e      	movs	r3, #46	; 0x2e
    1c4e:	18fb      	adds	r3, r7, r3
    1c50:	222e      	movs	r2, #46	; 0x2e
    1c52:	18ba      	adds	r2, r7, r2
    1c54:	8812      	ldrh	r2, [r2, #0]
    1c56:	2180      	movs	r1, #128	; 0x80
    1c58:	0109      	lsls	r1, r1, #4
    1c5a:	430a      	orrs	r2, r1
    1c5c:	801a      	strh	r2, [r3, #0]
	}

	/* Write configuration to register */
	while (tc_is_syncing(module_inst)) {
    1c5e:	46c0      	nop			; (mov r8, r8)
    1c60:	68fb      	ldr	r3, [r7, #12]
    1c62:	0018      	movs	r0, r3
    1c64:	4b4a      	ldr	r3, [pc, #296]	; (1d90 <tc_init+0x34c>)
    1c66:	4798      	blx	r3
    1c68:	1e03      	subs	r3, r0, #0
    1c6a:	d1f9      	bne.n	1c60 <tc_init+0x21c>
		/* Wait for sync */
	}
	hw->COUNT8.CTRLA.reg = ctrla_tmp;
    1c6c:	68bb      	ldr	r3, [r7, #8]
    1c6e:	222e      	movs	r2, #46	; 0x2e
    1c70:	18ba      	adds	r2, r7, r2
    1c72:	8812      	ldrh	r2, [r2, #0]
    1c74:	801a      	strh	r2, [r3, #0]

	/* Set ctrlb register */
	if (config->oneshot) {
    1c76:	687b      	ldr	r3, [r7, #4]
    1c78:	7b5b      	ldrb	r3, [r3, #13]
    1c7a:	2b00      	cmp	r3, #0
    1c7c:	d003      	beq.n	1c86 <tc_init+0x242>
		ctrlbset_tmp = TC_CTRLBSET_ONESHOT;
    1c7e:	232d      	movs	r3, #45	; 0x2d
    1c80:	18fb      	adds	r3, r7, r3
    1c82:	2204      	movs	r2, #4
    1c84:	701a      	strb	r2, [r3, #0]
	}

	if (config->count_direction) {
    1c86:	687b      	ldr	r3, [r7, #4]
    1c88:	7b9b      	ldrb	r3, [r3, #14]
    1c8a:	2b00      	cmp	r3, #0
    1c8c:	d007      	beq.n	1c9e <tc_init+0x25a>
		ctrlbset_tmp |= TC_CTRLBSET_DIR;
    1c8e:	232d      	movs	r3, #45	; 0x2d
    1c90:	18fb      	adds	r3, r7, r3
    1c92:	222d      	movs	r2, #45	; 0x2d
    1c94:	18ba      	adds	r2, r7, r2
    1c96:	7812      	ldrb	r2, [r2, #0]
    1c98:	2101      	movs	r1, #1
    1c9a:	430a      	orrs	r2, r1
    1c9c:	701a      	strb	r2, [r3, #0]
	}

	/* Clear old ctrlb configuration */
	while (tc_is_syncing(module_inst)) {
    1c9e:	46c0      	nop			; (mov r8, r8)
    1ca0:	68fb      	ldr	r3, [r7, #12]
    1ca2:	0018      	movs	r0, r3
    1ca4:	4b3a      	ldr	r3, [pc, #232]	; (1d90 <tc_init+0x34c>)
    1ca6:	4798      	blx	r3
    1ca8:	1e03      	subs	r3, r0, #0
    1caa:	d1f9      	bne.n	1ca0 <tc_init+0x25c>
		/* Wait for sync */
	}
	hw->COUNT8.CTRLBCLR.reg = 0xFF;
    1cac:	68bb      	ldr	r3, [r7, #8]
    1cae:	22ff      	movs	r2, #255	; 0xff
    1cb0:	711a      	strb	r2, [r3, #4]

	/* Check if we actually need to go into a wait state. */
	if (ctrlbset_tmp) {
    1cb2:	232d      	movs	r3, #45	; 0x2d
    1cb4:	18fb      	adds	r3, r7, r3
    1cb6:	781b      	ldrb	r3, [r3, #0]
    1cb8:	2b00      	cmp	r3, #0
    1cba:	d00b      	beq.n	1cd4 <tc_init+0x290>
		while (tc_is_syncing(module_inst)) {
    1cbc:	46c0      	nop			; (mov r8, r8)
    1cbe:	68fb      	ldr	r3, [r7, #12]
    1cc0:	0018      	movs	r0, r3
    1cc2:	4b33      	ldr	r3, [pc, #204]	; (1d90 <tc_init+0x34c>)
    1cc4:	4798      	blx	r3
    1cc6:	1e03      	subs	r3, r0, #0
    1cc8:	d1f9      	bne.n	1cbe <tc_init+0x27a>
			/* Wait for sync */
		}
		/* Write configuration to register */
		hw->COUNT8.CTRLBSET.reg = ctrlbset_tmp;
    1cca:	68bb      	ldr	r3, [r7, #8]
    1ccc:	222d      	movs	r2, #45	; 0x2d
    1cce:	18ba      	adds	r2, r7, r2
    1cd0:	7812      	ldrb	r2, [r2, #0]
    1cd2:	715a      	strb	r2, [r3, #5]
	}

	/* Set ctrlc register*/
	ctrlc_tmp = config->waveform_invert_output;
    1cd4:	232c      	movs	r3, #44	; 0x2c
    1cd6:	18fb      	adds	r3, r7, r3
    1cd8:	687a      	ldr	r2, [r7, #4]
    1cda:	7a92      	ldrb	r2, [r2, #10]
    1cdc:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 0; i < NUMBER_OF_COMPARE_CAPTURE_CHANNELS; i++) {
    1cde:	232a      	movs	r3, #42	; 0x2a
    1ce0:	18fb      	adds	r3, r7, r3
    1ce2:	2200      	movs	r2, #0
    1ce4:	701a      	strb	r2, [r3, #0]
    1ce6:	e01c      	b.n	1d22 <tc_init+0x2de>
		if (config->enable_capture_on_channel[i] == true) {
    1ce8:	232a      	movs	r3, #42	; 0x2a
    1cea:	18fb      	adds	r3, r7, r3
    1cec:	781b      	ldrb	r3, [r3, #0]
    1cee:	687a      	ldr	r2, [r7, #4]
    1cf0:	18d3      	adds	r3, r2, r3
    1cf2:	7adb      	ldrb	r3, [r3, #11]
    1cf4:	2b00      	cmp	r3, #0
    1cf6:	d00d      	beq.n	1d14 <tc_init+0x2d0>
			ctrlc_tmp |= (TC_CTRLC_CPTEN(1) << i);
    1cf8:	232a      	movs	r3, #42	; 0x2a
    1cfa:	18fb      	adds	r3, r7, r3
    1cfc:	781b      	ldrb	r3, [r3, #0]
    1cfe:	2210      	movs	r2, #16
    1d00:	409a      	lsls	r2, r3
    1d02:	0013      	movs	r3, r2
    1d04:	b2d9      	uxtb	r1, r3
    1d06:	232c      	movs	r3, #44	; 0x2c
    1d08:	18fb      	adds	r3, r7, r3
    1d0a:	222c      	movs	r2, #44	; 0x2c
    1d0c:	18ba      	adds	r2, r7, r2
    1d0e:	7812      	ldrb	r2, [r2, #0]
    1d10:	430a      	orrs	r2, r1
    1d12:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 0; i < NUMBER_OF_COMPARE_CAPTURE_CHANNELS; i++) {
    1d14:	232a      	movs	r3, #42	; 0x2a
    1d16:	18fb      	adds	r3, r7, r3
    1d18:	781a      	ldrb	r2, [r3, #0]
    1d1a:	232a      	movs	r3, #42	; 0x2a
    1d1c:	18fb      	adds	r3, r7, r3
    1d1e:	3201      	adds	r2, #1
    1d20:	701a      	strb	r2, [r3, #0]
    1d22:	232a      	movs	r3, #42	; 0x2a
    1d24:	18fb      	adds	r3, r7, r3
    1d26:	781b      	ldrb	r3, [r3, #0]
    1d28:	2b01      	cmp	r3, #1
    1d2a:	d9dd      	bls.n	1ce8 <tc_init+0x2a4>
		}
	}

	/* Write configuration to register */
	while (tc_is_syncing(module_inst)) {
    1d2c:	46c0      	nop			; (mov r8, r8)
    1d2e:	68fb      	ldr	r3, [r7, #12]
    1d30:	0018      	movs	r0, r3
    1d32:	4b17      	ldr	r3, [pc, #92]	; (1d90 <tc_init+0x34c>)
    1d34:	4798      	blx	r3
    1d36:	1e03      	subs	r3, r0, #0
    1d38:	d1f9      	bne.n	1d2e <tc_init+0x2ea>
		/* Wait for sync */
	}
	hw->COUNT8.CTRLC.reg = ctrlc_tmp;
    1d3a:	68bb      	ldr	r3, [r7, #8]
    1d3c:	222c      	movs	r2, #44	; 0x2c
    1d3e:	18ba      	adds	r2, r7, r2
    1d40:	7812      	ldrb	r2, [r2, #0]
    1d42:	719a      	strb	r2, [r3, #6]

	/* Write configuration to register */
	while (tc_is_syncing(module_inst)) {
    1d44:	46c0      	nop			; (mov r8, r8)
    1d46:	68fb      	ldr	r3, [r7, #12]
    1d48:	0018      	movs	r0, r3
    1d4a:	4b11      	ldr	r3, [pc, #68]	; (1d90 <tc_init+0x34c>)
    1d4c:	4798      	blx	r3
    1d4e:	1e03      	subs	r3, r0, #0
    1d50:	d1f9      	bne.n	1d46 <tc_init+0x302>
		/* Wait for sync */
	}

	/* Switch for TC counter size  */
	switch (module_inst->counter_size) {
    1d52:	68fb      	ldr	r3, [r7, #12]
    1d54:	791b      	ldrb	r3, [r3, #4]
    1d56:	2b04      	cmp	r3, #4
    1d58:	d01c      	beq.n	1d94 <tc_init+0x350>
    1d5a:	2b08      	cmp	r3, #8
    1d5c:	d100      	bne.n	1d60 <tc_init+0x31c>
    1d5e:	e06e      	b.n	1e3e <tc_init+0x3fa>
    1d60:	2b00      	cmp	r3, #0
    1d62:	d049      	beq.n	1df8 <tc_init+0x3b4>
    1d64:	e08e      	b.n	1e84 <tc_init+0x440>
    1d66:	46c0      	nop			; (mov r8, r8)
    1d68:	000019f9 	.word	0x000019f9
    1d6c:	0001f824 	.word	0x0001f824
    1d70:	0001f82c 	.word	0x0001f82c
    1d74:	200026d0 	.word	0x200026d0
    1d78:	000019a9 	.word	0x000019a9
    1d7c:	000003a1 	.word	0x000003a1
    1d80:	0000194d 	.word	0x0000194d
    1d84:	00001935 	.word	0x00001935
    1d88:	0000f23d 	.word	0x0000f23d
    1d8c:	0000f281 	.word	0x0000f281
    1d90:	000019d1 	.word	0x000019d1
		case TC_COUNTER_SIZE_8BIT:
			while (tc_is_syncing(module_inst)) {
    1d94:	46c0      	nop			; (mov r8, r8)
    1d96:	68fb      	ldr	r3, [r7, #12]
    1d98:	0018      	movs	r0, r3
    1d9a:	4b3d      	ldr	r3, [pc, #244]	; (1e90 <tc_init+0x44c>)
    1d9c:	4798      	blx	r3
    1d9e:	1e03      	subs	r3, r0, #0
    1da0:	d1f9      	bne.n	1d96 <tc_init+0x352>
				/* Wait for sync */
			}

			hw->COUNT8.COUNT.reg =
					config->counter_8_bit.value;
    1da2:	687b      	ldr	r3, [r7, #4]
    1da4:	2228      	movs	r2, #40	; 0x28
    1da6:	5c9a      	ldrb	r2, [r3, r2]
			hw->COUNT8.COUNT.reg =
    1da8:	68bb      	ldr	r3, [r7, #8]
    1daa:	741a      	strb	r2, [r3, #16]


			while (tc_is_syncing(module_inst)) {
    1dac:	46c0      	nop			; (mov r8, r8)
    1dae:	68fb      	ldr	r3, [r7, #12]
    1db0:	0018      	movs	r0, r3
    1db2:	4b37      	ldr	r3, [pc, #220]	; (1e90 <tc_init+0x44c>)
    1db4:	4798      	blx	r3
    1db6:	1e03      	subs	r3, r0, #0
    1db8:	d1f9      	bne.n	1dae <tc_init+0x36a>
				/* Wait for sync */
			}

			hw->COUNT8.PER.reg =
					config->counter_8_bit.period;
    1dba:	687b      	ldr	r3, [r7, #4]
    1dbc:	2229      	movs	r2, #41	; 0x29
    1dbe:	5c9a      	ldrb	r2, [r3, r2]
			hw->COUNT8.PER.reg =
    1dc0:	68bb      	ldr	r3, [r7, #8]
    1dc2:	751a      	strb	r2, [r3, #20]

			while (tc_is_syncing(module_inst)) {
    1dc4:	46c0      	nop			; (mov r8, r8)
    1dc6:	68fb      	ldr	r3, [r7, #12]
    1dc8:	0018      	movs	r0, r3
    1dca:	4b31      	ldr	r3, [pc, #196]	; (1e90 <tc_init+0x44c>)
    1dcc:	4798      	blx	r3
    1dce:	1e03      	subs	r3, r0, #0
    1dd0:	d1f9      	bne.n	1dc6 <tc_init+0x382>
				/* Wait for sync */
			}

			hw->COUNT8.CC[0].reg =
					config->counter_8_bit.compare_capture_channel[0];
    1dd2:	687b      	ldr	r3, [r7, #4]
    1dd4:	222a      	movs	r2, #42	; 0x2a
    1dd6:	5c9a      	ldrb	r2, [r3, r2]
			hw->COUNT8.CC[0].reg =
    1dd8:	68bb      	ldr	r3, [r7, #8]
    1dda:	761a      	strb	r2, [r3, #24]

			while (tc_is_syncing(module_inst)) {
    1ddc:	46c0      	nop			; (mov r8, r8)
    1dde:	68fb      	ldr	r3, [r7, #12]
    1de0:	0018      	movs	r0, r3
    1de2:	4b2b      	ldr	r3, [pc, #172]	; (1e90 <tc_init+0x44c>)
    1de4:	4798      	blx	r3
    1de6:	1e03      	subs	r3, r0, #0
    1de8:	d1f9      	bne.n	1dde <tc_init+0x39a>
				/* Wait for sync */
			}

			hw->COUNT8.CC[1].reg =
					config->counter_8_bit.compare_capture_channel[1];
    1dea:	687b      	ldr	r3, [r7, #4]
    1dec:	222b      	movs	r2, #43	; 0x2b
    1dee:	5c9a      	ldrb	r2, [r3, r2]
			hw->COUNT8.CC[1].reg =
    1df0:	68bb      	ldr	r3, [r7, #8]
    1df2:	765a      	strb	r2, [r3, #25]

			return STATUS_OK;
    1df4:	2300      	movs	r3, #0
    1df6:	e046      	b.n	1e86 <tc_init+0x442>

		case TC_COUNTER_SIZE_16BIT:
			while (tc_is_syncing(module_inst)) {
    1df8:	46c0      	nop			; (mov r8, r8)
    1dfa:	68fb      	ldr	r3, [r7, #12]
    1dfc:	0018      	movs	r0, r3
    1dfe:	4b24      	ldr	r3, [pc, #144]	; (1e90 <tc_init+0x44c>)
    1e00:	4798      	blx	r3
    1e02:	1e03      	subs	r3, r0, #0
    1e04:	d1f9      	bne.n	1dfa <tc_init+0x3b6>
				/* Wait for sync */
			}

			hw->COUNT16.COUNT.reg
				= config->counter_16_bit.value;
    1e06:	687b      	ldr	r3, [r7, #4]
    1e08:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
    1e0a:	68bb      	ldr	r3, [r7, #8]
    1e0c:	821a      	strh	r2, [r3, #16]

			while (tc_is_syncing(module_inst)) {
    1e0e:	46c0      	nop			; (mov r8, r8)
    1e10:	68fb      	ldr	r3, [r7, #12]
    1e12:	0018      	movs	r0, r3
    1e14:	4b1e      	ldr	r3, [pc, #120]	; (1e90 <tc_init+0x44c>)
    1e16:	4798      	blx	r3
    1e18:	1e03      	subs	r3, r0, #0
    1e1a:	d1f9      	bne.n	1e10 <tc_init+0x3cc>
				/* Wait for sync */
			}

			hw->COUNT16.CC[0].reg =
					config->counter_16_bit.compare_capture_channel[0];
    1e1c:	687b      	ldr	r3, [r7, #4]
    1e1e:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
			hw->COUNT16.CC[0].reg =
    1e20:	68bb      	ldr	r3, [r7, #8]
    1e22:	831a      	strh	r2, [r3, #24]

			while (tc_is_syncing(module_inst)) {
    1e24:	46c0      	nop			; (mov r8, r8)
    1e26:	68fb      	ldr	r3, [r7, #12]
    1e28:	0018      	movs	r0, r3
    1e2a:	4b19      	ldr	r3, [pc, #100]	; (1e90 <tc_init+0x44c>)
    1e2c:	4798      	blx	r3
    1e2e:	1e03      	subs	r3, r0, #0
    1e30:	d1f9      	bne.n	1e26 <tc_init+0x3e2>
				/* Wait for sync */
			}

			hw->COUNT16.CC[1].reg =
					config->counter_16_bit.compare_capture_channel[1];
    1e32:	687b      	ldr	r3, [r7, #4]
    1e34:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
			hw->COUNT16.CC[1].reg =
    1e36:	68bb      	ldr	r3, [r7, #8]
    1e38:	835a      	strh	r2, [r3, #26]

			return STATUS_OK;
    1e3a:	2300      	movs	r3, #0
    1e3c:	e023      	b.n	1e86 <tc_init+0x442>

		case TC_COUNTER_SIZE_32BIT:
			while (tc_is_syncing(module_inst)) {
    1e3e:	46c0      	nop			; (mov r8, r8)
    1e40:	68fb      	ldr	r3, [r7, #12]
    1e42:	0018      	movs	r0, r3
    1e44:	4b12      	ldr	r3, [pc, #72]	; (1e90 <tc_init+0x44c>)
    1e46:	4798      	blx	r3
    1e48:	1e03      	subs	r3, r0, #0
    1e4a:	d1f9      	bne.n	1e40 <tc_init+0x3fc>
				/* Wait for sync */
			}

			hw->COUNT32.COUNT.reg
				= config->counter_32_bit.value;
    1e4c:	687b      	ldr	r3, [r7, #4]
    1e4e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    1e50:	68bb      	ldr	r3, [r7, #8]
    1e52:	611a      	str	r2, [r3, #16]

			while (tc_is_syncing(module_inst)) {
    1e54:	46c0      	nop			; (mov r8, r8)
    1e56:	68fb      	ldr	r3, [r7, #12]
    1e58:	0018      	movs	r0, r3
    1e5a:	4b0d      	ldr	r3, [pc, #52]	; (1e90 <tc_init+0x44c>)
    1e5c:	4798      	blx	r3
    1e5e:	1e03      	subs	r3, r0, #0
    1e60:	d1f9      	bne.n	1e56 <tc_init+0x412>
				/* Wait for sync */
			}

			hw->COUNT32.CC[0].reg =
					config->counter_32_bit.compare_capture_channel[0];
    1e62:	687b      	ldr	r3, [r7, #4]
    1e64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
			hw->COUNT32.CC[0].reg =
    1e66:	68bb      	ldr	r3, [r7, #8]
    1e68:	619a      	str	r2, [r3, #24]

			while (tc_is_syncing(module_inst)) {
    1e6a:	46c0      	nop			; (mov r8, r8)
    1e6c:	68fb      	ldr	r3, [r7, #12]
    1e6e:	0018      	movs	r0, r3
    1e70:	4b07      	ldr	r3, [pc, #28]	; (1e90 <tc_init+0x44c>)
    1e72:	4798      	blx	r3
    1e74:	1e03      	subs	r3, r0, #0
    1e76:	d1f9      	bne.n	1e6c <tc_init+0x428>
				/* Wait for sync */
			}

			hw->COUNT32.CC[1].reg =
					config->counter_32_bit.compare_capture_channel[1];
    1e78:	687b      	ldr	r3, [r7, #4]
    1e7a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
			hw->COUNT32.CC[1].reg =
    1e7c:	68bb      	ldr	r3, [r7, #8]
    1e7e:	61da      	str	r2, [r3, #28]

			return STATUS_OK;
    1e80:	2300      	movs	r3, #0
    1e82:	e000      	b.n	1e86 <tc_init+0x442>
	}

	Assert(false);
	return STATUS_ERR_INVALID_ARG;
    1e84:	2317      	movs	r3, #23
}
    1e86:	0018      	movs	r0, r3
    1e88:	46bd      	mov	sp, r7
    1e8a:	b00d      	add	sp, #52	; 0x34
    1e8c:	bd90      	pop	{r4, r7, pc}
    1e8e:	46c0      	nop			; (mov r8, r8)
    1e90:	000019d1 	.word	0x000019d1

00001e94 <cpu_irq_save>:
{
    1e94:	b580      	push	{r7, lr}
    1e96:	b082      	sub	sp, #8
    1e98:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    1e9a:	f3ef 8310 	mrs	r3, PRIMASK
    1e9e:	607b      	str	r3, [r7, #4]
  return(result);
    1ea0:	687b      	ldr	r3, [r7, #4]
	volatile irqflags_t flags = cpu_irq_is_enabled();
    1ea2:	425a      	negs	r2, r3
    1ea4:	4153      	adcs	r3, r2
    1ea6:	b2db      	uxtb	r3, r3
    1ea8:	603b      	str	r3, [r7, #0]
  __ASM volatile ("cpsid i" : : : "memory");
    1eaa:	b672      	cpsid	i
    1eac:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    1eb0:	4b03      	ldr	r3, [pc, #12]	; (1ec0 <cpu_irq_save+0x2c>)
    1eb2:	2200      	movs	r2, #0
    1eb4:	701a      	strb	r2, [r3, #0]
	return flags;
    1eb6:	683b      	ldr	r3, [r7, #0]
}
    1eb8:	0018      	movs	r0, r3
    1eba:	46bd      	mov	sp, r7
    1ebc:	b002      	add	sp, #8
    1ebe:	bd80      	pop	{r7, pc}
    1ec0:	20000000 	.word	0x20000000

00001ec4 <cpu_irq_is_enabled_flags>:
{
    1ec4:	b580      	push	{r7, lr}
    1ec6:	b082      	sub	sp, #8
    1ec8:	af00      	add	r7, sp, #0
    1eca:	6078      	str	r0, [r7, #4]
	return (flags);
    1ecc:	687b      	ldr	r3, [r7, #4]
    1ece:	1e5a      	subs	r2, r3, #1
    1ed0:	4193      	sbcs	r3, r2
    1ed2:	b2db      	uxtb	r3, r3
}
    1ed4:	0018      	movs	r0, r3
    1ed6:	46bd      	mov	sp, r7
    1ed8:	b002      	add	sp, #8
    1eda:	bd80      	pop	{r7, pc}

00001edc <cpu_irq_restore>:
{
    1edc:	b580      	push	{r7, lr}
    1ede:	b082      	sub	sp, #8
    1ee0:	af00      	add	r7, sp, #0
    1ee2:	6078      	str	r0, [r7, #4]
	if (cpu_irq_is_enabled_flags(flags))
    1ee4:	687b      	ldr	r3, [r7, #4]
    1ee6:	0018      	movs	r0, r3
    1ee8:	4b06      	ldr	r3, [pc, #24]	; (1f04 <cpu_irq_restore+0x28>)
    1eea:	4798      	blx	r3
    1eec:	1e03      	subs	r3, r0, #0
    1eee:	d005      	beq.n	1efc <cpu_irq_restore+0x20>
		cpu_irq_enable();
    1ef0:	4b05      	ldr	r3, [pc, #20]	; (1f08 <cpu_irq_restore+0x2c>)
    1ef2:	2201      	movs	r2, #1
    1ef4:	701a      	strb	r2, [r3, #0]
    1ef6:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    1efa:	b662      	cpsie	i
}
    1efc:	46c0      	nop			; (mov r8, r8)
    1efe:	46bd      	mov	sp, r7
    1f00:	b002      	add	sp, #8
    1f02:	bd80      	pop	{r7, pc}
    1f04:	00001ec5 	.word	0x00001ec5
    1f08:	20000000 	.word	0x20000000

00001f0c <usb_device_attach>:
 * \brief Attach USB device to the bus
 *
 * \param module_inst Pointer to USB device module instance
 */
static inline void usb_device_attach(struct usb_module *module_inst)
{
    1f0c:	b580      	push	{r7, lr}
    1f0e:	b082      	sub	sp, #8
    1f10:	af00      	add	r7, sp, #0
    1f12:	6078      	str	r0, [r7, #4]
	module_inst->hw->DEVICE.CTRLB.reg &= ~USB_DEVICE_CTRLB_DETACH;
    1f14:	687b      	ldr	r3, [r7, #4]
    1f16:	681a      	ldr	r2, [r3, #0]
    1f18:	687b      	ldr	r3, [r7, #4]
    1f1a:	681b      	ldr	r3, [r3, #0]
    1f1c:	891b      	ldrh	r3, [r3, #8]
    1f1e:	b29b      	uxth	r3, r3
    1f20:	2101      	movs	r1, #1
    1f22:	438b      	bics	r3, r1
    1f24:	b29b      	uxth	r3, r3
    1f26:	8113      	strh	r3, [r2, #8]
}
    1f28:	46c0      	nop			; (mov r8, r8)
    1f2a:	46bd      	mov	sp, r7
    1f2c:	b002      	add	sp, #8
    1f2e:	bd80      	pop	{r7, pc}

00001f30 <usb_device_get_address>:
 *
 * \param module_inst Pointer to USB device module instance
 * \return USB device address value.
 */
static inline uint8_t usb_device_get_address(struct usb_module *module_inst)
{
    1f30:	b580      	push	{r7, lr}
    1f32:	b082      	sub	sp, #8
    1f34:	af00      	add	r7, sp, #0
    1f36:	6078      	str	r0, [r7, #4]
	return ((uint8_t)(module_inst->hw->DEVICE.DADD.bit.DADD));
    1f38:	687b      	ldr	r3, [r7, #4]
    1f3a:	681b      	ldr	r3, [r3, #0]
    1f3c:	7a9b      	ldrb	r3, [r3, #10]
    1f3e:	065b      	lsls	r3, r3, #25
    1f40:	0e5b      	lsrs	r3, r3, #25
    1f42:	b2db      	uxtb	r3, r3
}
    1f44:	0018      	movs	r0, r3
    1f46:	46bd      	mov	sp, r7
    1f48:	b002      	add	sp, #8
    1f4a:	bd80      	pop	{r7, pc}

00001f4c <usb_device_set_address>:
 *
 * \param module_inst Pointer to USB device module instance
 * \param address     USB device address value
 */
static inline void usb_device_set_address(struct usb_module *module_inst, uint8_t address)
{
    1f4c:	b580      	push	{r7, lr}
    1f4e:	b082      	sub	sp, #8
    1f50:	af00      	add	r7, sp, #0
    1f52:	6078      	str	r0, [r7, #4]
    1f54:	000a      	movs	r2, r1
    1f56:	1cfb      	adds	r3, r7, #3
    1f58:	701a      	strb	r2, [r3, #0]
	module_inst->hw->DEVICE.DADD.reg = USB_DEVICE_DADD_ADDEN | address;
    1f5a:	687b      	ldr	r3, [r7, #4]
    1f5c:	681b      	ldr	r3, [r3, #0]
    1f5e:	1cfa      	adds	r2, r7, #3
    1f60:	7812      	ldrb	r2, [r2, #0]
    1f62:	2180      	movs	r1, #128	; 0x80
    1f64:	4249      	negs	r1, r1
    1f66:	430a      	orrs	r2, r1
    1f68:	b2d2      	uxtb	r2, r2
    1f6a:	729a      	strb	r2, [r3, #10]
}
    1f6c:	46c0      	nop			; (mov r8, r8)
    1f6e:	46bd      	mov	sp, r7
    1f70:	b002      	add	sp, #8
    1f72:	bd80      	pop	{r7, pc}

00001f74 <usb_device_set_lpm_mode>:
 * \param module_inst Pointer to USB device module instance
 * \param lpm_mode    LPM mode
 */
static inline void usb_device_set_lpm_mode(struct usb_module *module_inst,
		enum usb_device_lpm_mode lpm_mode)
{
    1f74:	b580      	push	{r7, lr}
    1f76:	b082      	sub	sp, #8
    1f78:	af00      	add	r7, sp, #0
    1f7a:	6078      	str	r0, [r7, #4]
    1f7c:	000a      	movs	r2, r1
    1f7e:	1cfb      	adds	r3, r7, #3
    1f80:	701a      	strb	r2, [r3, #0]
	module_inst->hw->DEVICE.CTRLB.bit.LPMHDSK = lpm_mode;
    1f82:	687b      	ldr	r3, [r7, #4]
    1f84:	681a      	ldr	r2, [r3, #0]
    1f86:	1cfb      	adds	r3, r7, #3
    1f88:	781b      	ldrb	r3, [r3, #0]
    1f8a:	2103      	movs	r1, #3
    1f8c:	400b      	ands	r3, r1
    1f8e:	b2d9      	uxtb	r1, r3
    1f90:	8913      	ldrh	r3, [r2, #8]
    1f92:	1c08      	adds	r0, r1, #0
    1f94:	2103      	movs	r1, #3
    1f96:	4001      	ands	r1, r0
    1f98:	0288      	lsls	r0, r1, #10
    1f9a:	4905      	ldr	r1, [pc, #20]	; (1fb0 <usb_device_set_lpm_mode+0x3c>)
    1f9c:	400b      	ands	r3, r1
    1f9e:	1c19      	adds	r1, r3, #0
    1fa0:	1c03      	adds	r3, r0, #0
    1fa2:	430b      	orrs	r3, r1
    1fa4:	8113      	strh	r3, [r2, #8]
}
    1fa6:	46c0      	nop			; (mov r8, r8)
    1fa8:	46bd      	mov	sp, r7
    1faa:	b002      	add	sp, #8
    1fac:	bd80      	pop	{r7, pc}
    1fae:	46c0      	nop			; (mov r8, r8)
    1fb0:	fffff3ff 	.word	0xfffff3ff

00001fb4 <sleepmgr_lock_mode>:
 * not put the device to sleep in the deeper sleep modes.
 *
 * \param mode Sleep mode to lock.
 */
static inline void sleepmgr_lock_mode(enum sleepmgr_mode mode)
{
    1fb4:	b580      	push	{r7, lr}
    1fb6:	b084      	sub	sp, #16
    1fb8:	af00      	add	r7, sp, #0
    1fba:	0002      	movs	r2, r0
    1fbc:	1dfb      	adds	r3, r7, #7
    1fbe:	701a      	strb	r2, [r3, #0]
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] >= 0xff) {
    1fc0:	1dfb      	adds	r3, r7, #7
    1fc2:	781b      	ldrb	r3, [r3, #0]
    1fc4:	4a0c      	ldr	r2, [pc, #48]	; (1ff8 <sleepmgr_lock_mode+0x44>)
    1fc6:	5cd3      	ldrb	r3, [r2, r3]
    1fc8:	2bff      	cmp	r3, #255	; 0xff
    1fca:	d100      	bne.n	1fce <sleepmgr_lock_mode+0x1a>
		while (true) {
    1fcc:	e7fe      	b.n	1fcc <sleepmgr_lock_mode+0x18>
			// Check APP or change the data type to uint16_t.
		}
	}

	// Enter a critical section
	flags = cpu_irq_save();
    1fce:	4b0b      	ldr	r3, [pc, #44]	; (1ffc <sleepmgr_lock_mode+0x48>)
    1fd0:	4798      	blx	r3
    1fd2:	0003      	movs	r3, r0
    1fd4:	60fb      	str	r3, [r7, #12]

	++sleepmgr_locks[mode];
    1fd6:	1dfb      	adds	r3, r7, #7
    1fd8:	781b      	ldrb	r3, [r3, #0]
    1fda:	4a07      	ldr	r2, [pc, #28]	; (1ff8 <sleepmgr_lock_mode+0x44>)
    1fdc:	5cd2      	ldrb	r2, [r2, r3]
    1fde:	3201      	adds	r2, #1
    1fe0:	b2d1      	uxtb	r1, r2
    1fe2:	4a05      	ldr	r2, [pc, #20]	; (1ff8 <sleepmgr_lock_mode+0x44>)
    1fe4:	54d1      	strb	r1, [r2, r3]

	// Leave the critical section
	cpu_irq_restore(flags);
    1fe6:	68fb      	ldr	r3, [r7, #12]
    1fe8:	0018      	movs	r0, r3
    1fea:	4b05      	ldr	r3, [pc, #20]	; (2000 <STACK_SIZE>)
    1fec:	4798      	blx	r3
#else
	UNUSED(mode);
#endif /* CONFIG_SLEEPMGR_ENABLE */
}
    1fee:	46c0      	nop			; (mov r8, r8)
    1ff0:	46bd      	mov	sp, r7
    1ff2:	b004      	add	sp, #16
    1ff4:	bd80      	pop	{r7, pc}
    1ff6:	46c0      	nop			; (mov r8, r8)
    1ff8:	200026c8 	.word	0x200026c8
    1ffc:	00001e95 	.word	0x00001e95
    2000:	00001edd 	.word	0x00001edd

00002004 <sleepmgr_unlock_mode>:
 * manager can put the device to sleep in the deeper sleep modes.
 *
 * \param mode Sleep mode to unlock.
 */
static inline void sleepmgr_unlock_mode(enum sleepmgr_mode mode)
{
    2004:	b580      	push	{r7, lr}
    2006:	b084      	sub	sp, #16
    2008:	af00      	add	r7, sp, #0
    200a:	0002      	movs	r2, r0
    200c:	1dfb      	adds	r3, r7, #7
    200e:	701a      	strb	r2, [r3, #0]
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] == 0) {
    2010:	1dfb      	adds	r3, r7, #7
    2012:	781b      	ldrb	r3, [r3, #0]
    2014:	4a0c      	ldr	r2, [pc, #48]	; (2048 <sleepmgr_unlock_mode+0x44>)
    2016:	5cd3      	ldrb	r3, [r2, r3]
    2018:	2b00      	cmp	r3, #0
    201a:	d100      	bne.n	201e <sleepmgr_unlock_mode+0x1a>
		while (true) {
    201c:	e7fe      	b.n	201c <sleepmgr_unlock_mode+0x18>
			// Check APP.
		}
	}

	// Enter a critical section
	flags = cpu_irq_save();
    201e:	4b0b      	ldr	r3, [pc, #44]	; (204c <sleepmgr_unlock_mode+0x48>)
    2020:	4798      	blx	r3
    2022:	0003      	movs	r3, r0
    2024:	60fb      	str	r3, [r7, #12]

	--sleepmgr_locks[mode];
    2026:	1dfb      	adds	r3, r7, #7
    2028:	781b      	ldrb	r3, [r3, #0]
    202a:	4a07      	ldr	r2, [pc, #28]	; (2048 <sleepmgr_unlock_mode+0x44>)
    202c:	5cd2      	ldrb	r2, [r2, r3]
    202e:	3a01      	subs	r2, #1
    2030:	b2d1      	uxtb	r1, r2
    2032:	4a05      	ldr	r2, [pc, #20]	; (2048 <sleepmgr_unlock_mode+0x44>)
    2034:	54d1      	strb	r1, [r2, r3]

	// Leave the critical section
	cpu_irq_restore(flags);
    2036:	68fb      	ldr	r3, [r7, #12]
    2038:	0018      	movs	r0, r3
    203a:	4b05      	ldr	r3, [pc, #20]	; (2050 <sleepmgr_unlock_mode+0x4c>)
    203c:	4798      	blx	r3
#else
	UNUSED(mode);
#endif /* CONFIG_SLEEPMGR_ENABLE */
}
    203e:	46c0      	nop			; (mov r8, r8)
    2040:	46bd      	mov	sp, r7
    2042:	b004      	add	sp, #16
    2044:	bd80      	pop	{r7, pc}
    2046:	46c0      	nop			; (mov r8, r8)
    2048:	200026c8 	.word	0x200026c8
    204c:	00001e95 	.word	0x00001e95
    2050:	00001edd 	.word	0x00001edd

00002054 <udd_wait_clock_ready>:
#endif
#ifndef UDD_CLOCK_SOURCE
#  define UDD_CLOCK_SOURCE   SYSTEM_CLOCK_SOURCE_DFLL
#endif
static inline void udd_wait_clock_ready(void)
{
    2054:	b580      	push	{r7, lr}
    2056:	af00      	add	r7, sp, #0
#else
#define DFLL_READY_FLAG (SYSCTRL_PCLKSR_DFLLRDY | \
		SYSCTRL_PCLKSR_DFLLLCKF | SYSCTRL_PCLKSR_DFLLLCKC)

		/* In USB recovery mode the status is not checked */
		if (!(SYSCTRL->DFLLCTRL.reg & SYSCTRL_DFLLCTRL_USBCRM)) {
    2058:	4b0c      	ldr	r3, [pc, #48]	; (208c <udd_wait_clock_ready+0x38>)
    205a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
    205c:	b29b      	uxth	r3, r3
    205e:	001a      	movs	r2, r3
    2060:	2320      	movs	r3, #32
    2062:	4013      	ands	r3, r2
    2064:	d107      	bne.n	2076 <udd_wait_clock_ready+0x22>
			while((SYSCTRL->PCLKSR.reg & DFLL_READY_FLAG) != DFLL_READY_FLAG);
    2066:	46c0      	nop			; (mov r8, r8)
    2068:	4b08      	ldr	r3, [pc, #32]	; (208c <udd_wait_clock_ready+0x38>)
    206a:	68db      	ldr	r3, [r3, #12]
    206c:	22d0      	movs	r2, #208	; 0xd0
    206e:	4013      	ands	r3, r2
    2070:	2bd0      	cmp	r3, #208	; 0xd0
    2072:	d1f9      	bne.n	2068 <udd_wait_clock_ready+0x14>
		} else {
			while((SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY) != SYSCTRL_PCLKSR_DFLLRDY);
		}
	}
#endif
}
    2074:	e006      	b.n	2084 <udd_wait_clock_ready+0x30>
			while((SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY) != SYSCTRL_PCLKSR_DFLLRDY);
    2076:	46c0      	nop			; (mov r8, r8)
    2078:	4b04      	ldr	r3, [pc, #16]	; (208c <udd_wait_clock_ready+0x38>)
    207a:	68db      	ldr	r3, [r3, #12]
    207c:	2210      	movs	r2, #16
    207e:	4013      	ands	r3, r2
    2080:	2b10      	cmp	r3, #16
    2082:	d1f9      	bne.n	2078 <udd_wait_clock_ready+0x24>
}
    2084:	46c0      	nop			; (mov r8, r8)
    2086:	46bd      	mov	sp, r7
    2088:	bd80      	pop	{r7, pc}
    208a:	46c0      	nop			; (mov r8, r8)
    208c:	40000800 	.word	0x40000800

00002090 <udd_sleep_mode>:
/** \brief Manages the sleep mode following the USB state
 *
 * \param new_state  New USB state
 */
static void udd_sleep_mode(enum udd_usb_state_enum new_state)
{
    2090:	b580      	push	{r7, lr}
    2092:	b084      	sub	sp, #16
    2094:	af00      	add	r7, sp, #0
    2096:	0002      	movs	r2, r0
    2098:	1dfb      	adds	r3, r7, #7
    209a:	701a      	strb	r2, [r3, #0]
	enum sleepmgr_mode sleep_mode[] = {
    209c:	230c      	movs	r3, #12
    209e:	18fb      	adds	r3, r7, r3
    20a0:	4a15      	ldr	r2, [pc, #84]	; (20f8 <udd_sleep_mode+0x68>)
    20a2:	6812      	ldr	r2, [r2, #0]
    20a4:	601a      	str	r2, [r3, #0]
	#endif	
	};

	static enum udd_usb_state_enum udd_state = UDD_STATE_OFF;

	if (udd_state == new_state) {
    20a6:	4b15      	ldr	r3, [pc, #84]	; (20fc <udd_sleep_mode+0x6c>)
    20a8:	781b      	ldrb	r3, [r3, #0]
    20aa:	1dfa      	adds	r2, r7, #7
    20ac:	7812      	ldrb	r2, [r2, #0]
    20ae:	429a      	cmp	r2, r3
    20b0:	d01d      	beq.n	20ee <udd_sleep_mode+0x5e>
		return; // No change
	}
	if (new_state != UDD_STATE_OFF) {
    20b2:	1dfb      	adds	r3, r7, #7
    20b4:	781b      	ldrb	r3, [r3, #0]
    20b6:	2b00      	cmp	r3, #0
    20b8:	d007      	beq.n	20ca <udd_sleep_mode+0x3a>
		/* Lock new limit */
		sleepmgr_lock_mode(sleep_mode[new_state]);
    20ba:	1dfb      	adds	r3, r7, #7
    20bc:	781b      	ldrb	r3, [r3, #0]
    20be:	220c      	movs	r2, #12
    20c0:	18ba      	adds	r2, r7, r2
    20c2:	5cd3      	ldrb	r3, [r2, r3]
    20c4:	0018      	movs	r0, r3
    20c6:	4b0e      	ldr	r3, [pc, #56]	; (2100 <udd_sleep_mode+0x70>)
    20c8:	4798      	blx	r3
	}
	if (udd_state != UDD_STATE_OFF) {
    20ca:	4b0c      	ldr	r3, [pc, #48]	; (20fc <udd_sleep_mode+0x6c>)
    20cc:	781b      	ldrb	r3, [r3, #0]
    20ce:	2b00      	cmp	r3, #0
    20d0:	d008      	beq.n	20e4 <udd_sleep_mode+0x54>
		/* Unlock old limit */
		sleepmgr_unlock_mode(sleep_mode[udd_state]);
    20d2:	4b0a      	ldr	r3, [pc, #40]	; (20fc <udd_sleep_mode+0x6c>)
    20d4:	781b      	ldrb	r3, [r3, #0]
    20d6:	001a      	movs	r2, r3
    20d8:	230c      	movs	r3, #12
    20da:	18fb      	adds	r3, r7, r3
    20dc:	5c9b      	ldrb	r3, [r3, r2]
    20de:	0018      	movs	r0, r3
    20e0:	4b08      	ldr	r3, [pc, #32]	; (2104 <udd_sleep_mode+0x74>)
    20e2:	4798      	blx	r3
	}
	udd_state = new_state;
    20e4:	4b05      	ldr	r3, [pc, #20]	; (20fc <udd_sleep_mode+0x6c>)
    20e6:	1dfa      	adds	r2, r7, #7
    20e8:	7812      	ldrb	r2, [r2, #0]
    20ea:	701a      	strb	r2, [r3, #0]
    20ec:	e000      	b.n	20f0 <udd_sleep_mode+0x60>
		return; // No change
    20ee:	46c0      	nop			; (mov r8, r8)
}
    20f0:	46bd      	mov	sp, r7
    20f2:	b004      	add	sp, #16
    20f4:	bd80      	pop	{r7, pc}
    20f6:	46c0      	nop			; (mov r8, r8)
    20f8:	0001f838 	.word	0x0001f838
    20fc:	2000051c 	.word	0x2000051c
    2100:	00001fb5 	.word	0x00001fb5
    2104:	00002005 	.word	0x00002005

00002108 <udd_ep_get_job>:
 * \brief     Get the detailed job by endpoint number
 * \param[in] ep  Endpoint Address
 * \retval    pointer to an udd_ep_job_t structure instance
 */
static udd_ep_job_t* udd_ep_get_job(udd_ep_id_t ep)
{
    2108:	b580      	push	{r7, lr}
    210a:	b082      	sub	sp, #8
    210c:	af00      	add	r7, sp, #0
    210e:	0002      	movs	r2, r0
    2110:	1dfb      	adds	r3, r7, #7
    2112:	701a      	strb	r2, [r3, #0]
	if ((ep == 0) || (ep == 0x80)) {
    2114:	1dfb      	adds	r3, r7, #7
    2116:	781b      	ldrb	r3, [r3, #0]
    2118:	2b00      	cmp	r3, #0
    211a:	d003      	beq.n	2124 <udd_ep_get_job+0x1c>
    211c:	1dfb      	adds	r3, r7, #7
    211e:	781b      	ldrb	r3, [r3, #0]
    2120:	2b80      	cmp	r3, #128	; 0x80
    2122:	d101      	bne.n	2128 <udd_ep_get_job+0x20>
		return NULL;
    2124:	2300      	movs	r3, #0
    2126:	e012      	b.n	214e <udd_ep_get_job+0x46>
	} else {
		return &udd_ep_job[(2 * (ep & USB_EP_ADDR_MASK) + ((ep & USB_EP_DIR_IN) ? 1 : 0)) - 2];
    2128:	1dfb      	adds	r3, r7, #7
    212a:	781b      	ldrb	r3, [r3, #0]
    212c:	220f      	movs	r2, #15
    212e:	4013      	ands	r3, r2
    2130:	005b      	lsls	r3, r3, #1
    2132:	1dfa      	adds	r2, r7, #7
    2134:	7812      	ldrb	r2, [r2, #0]
    2136:	b252      	sxtb	r2, r2
    2138:	b2d2      	uxtb	r2, r2
    213a:	09d2      	lsrs	r2, r2, #7
    213c:	b2d2      	uxtb	r2, r2
    213e:	189b      	adds	r3, r3, r2
    2140:	1e9a      	subs	r2, r3, #2
    2142:	0013      	movs	r3, r2
    2144:	009b      	lsls	r3, r3, #2
    2146:	189b      	adds	r3, r3, r2
    2148:	009b      	lsls	r3, r3, #2
    214a:	4a03      	ldr	r2, [pc, #12]	; (2158 <udd_ep_get_job+0x50>)
    214c:	189b      	adds	r3, r3, r2
	}
}
    214e:	0018      	movs	r0, r3
    2150:	46bd      	mov	sp, r7
    2152:	b002      	add	sp, #8
    2154:	bd80      	pop	{r7, pc}
    2156:	46c0      	nop			; (mov r8, r8)
    2158:	200004cc 	.word	0x200004cc

0000215c <udd_ep_trans_in_next>:
/**
 * \brief     Endpoint IN process, continue to send packets or zero length packet
 * \param[in] pointer Pointer to the endpoint transfer status parameter struct from driver layer.
 */
static void udd_ep_trans_in_next(void* pointer)
{
    215c:	b590      	push	{r4, r7, lr}
    215e:	b089      	sub	sp, #36	; 0x24
    2160:	af00      	add	r7, sp, #0
    2162:	6078      	str	r0, [r7, #4]
	struct usb_endpoint_callback_parameter *ep_callback_para = (struct usb_endpoint_callback_parameter*)pointer;
    2164:	687b      	ldr	r3, [r7, #4]
    2166:	61bb      	str	r3, [r7, #24]
	udd_ep_id_t ep = ep_callback_para->endpoint_address;
    2168:	2317      	movs	r3, #23
    216a:	18fb      	adds	r3, r7, r3
    216c:	69ba      	ldr	r2, [r7, #24]
    216e:	7992      	ldrb	r2, [r2, #6]
    2170:	701a      	strb	r2, [r3, #0]
	uint16_t ep_size, nb_trans;
	uint16_t next_trans;
	udd_ep_id_t ep_num;
	udd_ep_job_t *ptr_job;

	ptr_job = udd_ep_get_job(ep);
    2172:	2317      	movs	r3, #23
    2174:	18fb      	adds	r3, r7, r3
    2176:	781b      	ldrb	r3, [r3, #0]
    2178:	0018      	movs	r0, r3
    217a:	4b54      	ldr	r3, [pc, #336]	; (22cc <udd_ep_trans_in_next+0x170>)
    217c:	4798      	blx	r3
    217e:	0003      	movs	r3, r0
    2180:	613b      	str	r3, [r7, #16]
	ep_num = ep & USB_EP_ADDR_MASK;
    2182:	230f      	movs	r3, #15
    2184:	18fb      	adds	r3, r7, r3
    2186:	2217      	movs	r2, #23
    2188:	18ba      	adds	r2, r7, r2
    218a:	7812      	ldrb	r2, [r2, #0]
    218c:	210f      	movs	r1, #15
    218e:	400a      	ands	r2, r1
    2190:	701a      	strb	r2, [r3, #0]

	ep_size = ptr_job->ep_size;
    2192:	230c      	movs	r3, #12
    2194:	18fb      	adds	r3, r7, r3
    2196:	693a      	ldr	r2, [r7, #16]
    2198:	8a12      	ldrh	r2, [r2, #16]
    219a:	801a      	strh	r2, [r3, #0]
	/* Update number of data transferred */
	nb_trans = ep_callback_para->sent_bytes;
    219c:	230a      	movs	r3, #10
    219e:	18fb      	adds	r3, r7, r3
    21a0:	69ba      	ldr	r2, [r7, #24]
    21a2:	8852      	ldrh	r2, [r2, #2]
    21a4:	801a      	strh	r2, [r3, #0]
	ptr_job->nb_trans += nb_trans;
    21a6:	693b      	ldr	r3, [r7, #16]
    21a8:	68da      	ldr	r2, [r3, #12]
    21aa:	230a      	movs	r3, #10
    21ac:	18fb      	adds	r3, r7, r3
    21ae:	881b      	ldrh	r3, [r3, #0]
    21b0:	18d2      	adds	r2, r2, r3
    21b2:	693b      	ldr	r3, [r7, #16]
    21b4:	60da      	str	r2, [r3, #12]

	/* Need to send other data */
	if (ptr_job->nb_trans != ptr_job->buf_size) {
    21b6:	693b      	ldr	r3, [r7, #16]
    21b8:	68da      	ldr	r2, [r3, #12]
    21ba:	693b      	ldr	r3, [r7, #16]
    21bc:	689b      	ldr	r3, [r3, #8]
    21be:	429a      	cmp	r2, r3
    21c0:	d054      	beq.n	226c <udd_ep_trans_in_next+0x110>
		next_trans = ptr_job->buf_size - ptr_job->nb_trans;
    21c2:	693b      	ldr	r3, [r7, #16]
    21c4:	689b      	ldr	r3, [r3, #8]
    21c6:	b299      	uxth	r1, r3
    21c8:	693b      	ldr	r3, [r7, #16]
    21ca:	68db      	ldr	r3, [r3, #12]
    21cc:	b29a      	uxth	r2, r3
    21ce:	231e      	movs	r3, #30
    21d0:	18fb      	adds	r3, r7, r3
    21d2:	1a8a      	subs	r2, r1, r2
    21d4:	801a      	strh	r2, [r3, #0]
		if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
    21d6:	231e      	movs	r3, #30
    21d8:	18fb      	adds	r3, r7, r3
    21da:	881b      	ldrh	r3, [r3, #0]
    21dc:	4a3c      	ldr	r2, [pc, #240]	; (22d0 <udd_ep_trans_in_next+0x174>)
    21de:	4293      	cmp	r3, r2
    21e0:	d90d      	bls.n	21fe <udd_ep_trans_in_next+0xa2>
		/* The USB hardware support a maximum
		 * transfer size of UDD_ENDPOINT_MAX_TRANS Bytes */
			next_trans = UDD_ENDPOINT_MAX_TRANS -(UDD_ENDPOINT_MAX_TRANS % ep_size);
    21e2:	230c      	movs	r3, #12
    21e4:	18fb      	adds	r3, r7, r3
    21e6:	881a      	ldrh	r2, [r3, #0]
    21e8:	4839      	ldr	r0, [pc, #228]	; (22d0 <udd_ep_trans_in_next+0x174>)
    21ea:	4b3a      	ldr	r3, [pc, #232]	; (22d4 <udd_ep_trans_in_next+0x178>)
    21ec:	0011      	movs	r1, r2
    21ee:	4798      	blx	r3
    21f0:	000b      	movs	r3, r1
    21f2:	b29a      	uxth	r2, r3
    21f4:	231e      	movs	r3, #30
    21f6:	18fb      	adds	r3, r7, r3
    21f8:	4935      	ldr	r1, [pc, #212]	; (22d0 <udd_ep_trans_in_next+0x174>)
    21fa:	1a8a      	subs	r2, r1, r2
    21fc:	801a      	strh	r2, [r3, #0]
		}
		/* Need ZLP, if requested and last packet is not a short packet */
		ptr_job->b_shortpacket = ptr_job->b_shortpacket && (0 == (next_trans % ep_size));
    21fe:	693b      	ldr	r3, [r7, #16]
    2200:	7c9b      	ldrb	r3, [r3, #18]
    2202:	2202      	movs	r2, #2
    2204:	4013      	ands	r3, r2
    2206:	b2db      	uxtb	r3, r3
    2208:	2b00      	cmp	r3, #0
    220a:	d00e      	beq.n	222a <udd_ep_trans_in_next+0xce>
    220c:	231e      	movs	r3, #30
    220e:	18fa      	adds	r2, r7, r3
    2210:	230c      	movs	r3, #12
    2212:	18fb      	adds	r3, r7, r3
    2214:	8812      	ldrh	r2, [r2, #0]
    2216:	8819      	ldrh	r1, [r3, #0]
    2218:	4b2f      	ldr	r3, [pc, #188]	; (22d8 <udd_ep_trans_in_next+0x17c>)
    221a:	0010      	movs	r0, r2
    221c:	4798      	blx	r3
    221e:	000b      	movs	r3, r1
    2220:	b29b      	uxth	r3, r3
    2222:	2b00      	cmp	r3, #0
    2224:	d101      	bne.n	222a <udd_ep_trans_in_next+0xce>
    2226:	2301      	movs	r3, #1
    2228:	e000      	b.n	222c <udd_ep_trans_in_next+0xd0>
    222a:	2300      	movs	r3, #0
    222c:	b2db      	uxtb	r3, r3
    222e:	1c1a      	adds	r2, r3, #0
    2230:	2301      	movs	r3, #1
    2232:	4013      	ands	r3, r2
    2234:	b2da      	uxtb	r2, r3
    2236:	693b      	ldr	r3, [r7, #16]
    2238:	2101      	movs	r1, #1
    223a:	400a      	ands	r2, r1
    223c:	1890      	adds	r0, r2, r2
    223e:	7c9a      	ldrb	r2, [r3, #18]
    2240:	2102      	movs	r1, #2
    2242:	438a      	bics	r2, r1
    2244:	1c11      	adds	r1, r2, #0
    2246:	1c02      	adds	r2, r0, #0
    2248:	430a      	orrs	r2, r1
    224a:	749a      	strb	r2, [r3, #18]
		usb_device_endpoint_write_buffer_job(&usb_device,ep_num,&ptr_job->buf[ptr_job->nb_trans],next_trans);
    224c:	693b      	ldr	r3, [r7, #16]
    224e:	685a      	ldr	r2, [r3, #4]
    2250:	693b      	ldr	r3, [r7, #16]
    2252:	68db      	ldr	r3, [r3, #12]
    2254:	18d2      	adds	r2, r2, r3
    2256:	231e      	movs	r3, #30
    2258:	18fb      	adds	r3, r7, r3
    225a:	881c      	ldrh	r4, [r3, #0]
    225c:	230f      	movs	r3, #15
    225e:	18fb      	adds	r3, r7, r3
    2260:	7819      	ldrb	r1, [r3, #0]
    2262:	481e      	ldr	r0, [pc, #120]	; (22dc <udd_ep_trans_in_next+0x180>)
    2264:	0023      	movs	r3, r4
    2266:	4c1e      	ldr	r4, [pc, #120]	; (22e0 <udd_ep_trans_in_next+0x184>)
    2268:	47a0      	blx	r4
		return;
    226a:	e02b      	b.n	22c4 <udd_ep_trans_in_next+0x168>
	}

	/* Need to send a ZLP after all data transfer */
	if (ptr_job->b_shortpacket) {
    226c:	693b      	ldr	r3, [r7, #16]
    226e:	7c9b      	ldrb	r3, [r3, #18]
    2270:	2202      	movs	r2, #2
    2272:	4013      	ands	r3, r2
    2274:	b2db      	uxtb	r3, r3
    2276:	2b00      	cmp	r3, #0
    2278:	d011      	beq.n	229e <udd_ep_trans_in_next+0x142>
		ptr_job->b_shortpacket = false;
    227a:	693b      	ldr	r3, [r7, #16]
    227c:	7c9a      	ldrb	r2, [r3, #18]
    227e:	2102      	movs	r1, #2
    2280:	438a      	bics	r2, r1
    2282:	749a      	strb	r2, [r3, #18]
		/* Start new transfer */
		usb_device_endpoint_write_buffer_job(&usb_device,ep_num,&ptr_job->buf[ptr_job->nb_trans],0);
    2284:	693b      	ldr	r3, [r7, #16]
    2286:	685a      	ldr	r2, [r3, #4]
    2288:	693b      	ldr	r3, [r7, #16]
    228a:	68db      	ldr	r3, [r3, #12]
    228c:	18d2      	adds	r2, r2, r3
    228e:	230f      	movs	r3, #15
    2290:	18fb      	adds	r3, r7, r3
    2292:	7819      	ldrb	r1, [r3, #0]
    2294:	4811      	ldr	r0, [pc, #68]	; (22dc <udd_ep_trans_in_next+0x180>)
    2296:	2300      	movs	r3, #0
    2298:	4c11      	ldr	r4, [pc, #68]	; (22e0 <udd_ep_trans_in_next+0x184>)
    229a:	47a0      	blx	r4
		return;
    229c:	e012      	b.n	22c4 <udd_ep_trans_in_next+0x168>
	}

	/* Job complete then call callback */
	ptr_job->busy = false;
    229e:	693b      	ldr	r3, [r7, #16]
    22a0:	7c9a      	ldrb	r2, [r3, #18]
    22a2:	2101      	movs	r1, #1
    22a4:	438a      	bics	r2, r1
    22a6:	749a      	strb	r2, [r3, #18]
	if (NULL != ptr_job->call_trans) {
    22a8:	693b      	ldr	r3, [r7, #16]
    22aa:	681b      	ldr	r3, [r3, #0]
    22ac:	2b00      	cmp	r3, #0
    22ae:	d009      	beq.n	22c4 <udd_ep_trans_in_next+0x168>
		ptr_job->call_trans(UDD_EP_TRANSFER_OK, ptr_job->nb_trans, ep);
    22b0:	693b      	ldr	r3, [r7, #16]
    22b2:	681c      	ldr	r4, [r3, #0]
    22b4:	693b      	ldr	r3, [r7, #16]
    22b6:	68d9      	ldr	r1, [r3, #12]
    22b8:	2317      	movs	r3, #23
    22ba:	18fb      	adds	r3, r7, r3
    22bc:	781b      	ldrb	r3, [r3, #0]
    22be:	001a      	movs	r2, r3
    22c0:	2000      	movs	r0, #0
    22c2:	47a0      	blx	r4
	}
}
    22c4:	46bd      	mov	sp, r7
    22c6:	b009      	add	sp, #36	; 0x24
    22c8:	bd90      	pop	{r4, r7, pc}
    22ca:	46c0      	nop			; (mov r8, r8)
    22cc:	00002109 	.word	0x00002109
    22d0:	00001fff 	.word	0x00001fff
    22d4:	00019fb9 	.word	0x00019fb9
    22d8:	00019de5 	.word	0x00019de5
    22dc:	20002764 	.word	0x20002764
    22e0:	000046dd 	.word	0x000046dd

000022e4 <udd_ep_trans_out_next>:
/**
 * \brief     Endpoint OUT process, continue to receive packets or zero length packet
 * \param[in] pointer Pointer to the endpoint transfer status parameter struct from driver layer.
 */
static void udd_ep_trans_out_next(void* pointer)
{
    22e4:	b5b0      	push	{r4, r5, r7, lr}
    22e6:	b088      	sub	sp, #32
    22e8:	af00      	add	r7, sp, #0
    22ea:	6078      	str	r0, [r7, #4]
	struct usb_endpoint_callback_parameter *ep_callback_para = (struct usb_endpoint_callback_parameter*)pointer;
    22ec:	687b      	ldr	r3, [r7, #4]
    22ee:	61bb      	str	r3, [r7, #24]
	udd_ep_id_t ep = ep_callback_para->endpoint_address;
    22f0:	2317      	movs	r3, #23
    22f2:	18fb      	adds	r3, r7, r3
    22f4:	69ba      	ldr	r2, [r7, #24]
    22f6:	7992      	ldrb	r2, [r2, #6]
    22f8:	701a      	strb	r2, [r3, #0]
	uint16_t ep_size, nb_trans;
	uint16_t next_trans;
	udd_ep_id_t ep_num;
	udd_ep_job_t *ptr_job;

	ptr_job = udd_ep_get_job(ep);
    22fa:	2317      	movs	r3, #23
    22fc:	18fb      	adds	r3, r7, r3
    22fe:	781b      	ldrb	r3, [r3, #0]
    2300:	0018      	movs	r0, r3
    2302:	4b66      	ldr	r3, [pc, #408]	; (249c <udd_ep_trans_out_next+0x1b8>)
    2304:	4798      	blx	r3
    2306:	0003      	movs	r3, r0
    2308:	613b      	str	r3, [r7, #16]
	ep_num = ep & USB_EP_ADDR_MASK;
    230a:	230f      	movs	r3, #15
    230c:	18fb      	adds	r3, r7, r3
    230e:	2217      	movs	r2, #23
    2310:	18ba      	adds	r2, r7, r2
    2312:	7812      	ldrb	r2, [r2, #0]
    2314:	210f      	movs	r1, #15
    2316:	400a      	ands	r2, r1
    2318:	701a      	strb	r2, [r3, #0]

	ep_size = ptr_job->ep_size;
    231a:	230c      	movs	r3, #12
    231c:	18fb      	adds	r3, r7, r3
    231e:	693a      	ldr	r2, [r7, #16]
    2320:	8a12      	ldrh	r2, [r2, #16]
    2322:	801a      	strh	r2, [r3, #0]
	/* Update number of data transferred */
	nb_trans = ep_callback_para->received_bytes;
    2324:	230a      	movs	r3, #10
    2326:	18fb      	adds	r3, r7, r3
    2328:	69ba      	ldr	r2, [r7, #24]
    232a:	8812      	ldrh	r2, [r2, #0]
    232c:	801a      	strh	r2, [r3, #0]

	/* Can be necessary to copy data receive from cache buffer to user buffer */
	if (ptr_job->b_use_out_cache_buffer) {
    232e:	693b      	ldr	r3, [r7, #16]
    2330:	7c9b      	ldrb	r3, [r3, #18]
    2332:	2204      	movs	r2, #4
    2334:	4013      	ands	r3, r2
    2336:	b2db      	uxtb	r3, r3
    2338:	2b00      	cmp	r3, #0
    233a:	d019      	beq.n	2370 <udd_ep_trans_out_next+0x8c>
		memcpy(&ptr_job->buf[ptr_job->nb_trans], udd_ep_out_cache_buffer[ep_num - 1], ptr_job->buf_size % ep_size);
    233c:	693b      	ldr	r3, [r7, #16]
    233e:	685a      	ldr	r2, [r3, #4]
    2340:	693b      	ldr	r3, [r7, #16]
    2342:	68db      	ldr	r3, [r3, #12]
    2344:	18d4      	adds	r4, r2, r3
    2346:	230f      	movs	r3, #15
    2348:	18fb      	adds	r3, r7, r3
    234a:	781b      	ldrb	r3, [r3, #0]
    234c:	3b01      	subs	r3, #1
    234e:	019a      	lsls	r2, r3, #6
    2350:	4b53      	ldr	r3, [pc, #332]	; (24a0 <udd_ep_trans_out_next+0x1bc>)
    2352:	18d5      	adds	r5, r2, r3
    2354:	693b      	ldr	r3, [r7, #16]
    2356:	689a      	ldr	r2, [r3, #8]
    2358:	230c      	movs	r3, #12
    235a:	18fb      	adds	r3, r7, r3
    235c:	8819      	ldrh	r1, [r3, #0]
    235e:	4b51      	ldr	r3, [pc, #324]	; (24a4 <udd_ep_trans_out_next+0x1c0>)
    2360:	0010      	movs	r0, r2
    2362:	4798      	blx	r3
    2364:	000b      	movs	r3, r1
    2366:	001a      	movs	r2, r3
    2368:	0029      	movs	r1, r5
    236a:	0020      	movs	r0, r4
    236c:	4b4e      	ldr	r3, [pc, #312]	; (24a8 <udd_ep_trans_out_next+0x1c4>)
    236e:	4798      	blx	r3
	}

	/* Update number of data transferred */
	ptr_job->nb_trans += nb_trans;
    2370:	693b      	ldr	r3, [r7, #16]
    2372:	68da      	ldr	r2, [r3, #12]
    2374:	230a      	movs	r3, #10
    2376:	18fb      	adds	r3, r7, r3
    2378:	881b      	ldrh	r3, [r3, #0]
    237a:	18d2      	adds	r2, r2, r3
    237c:	693b      	ldr	r3, [r7, #16]
    237e:	60da      	str	r2, [r3, #12]
	if (ptr_job->nb_trans > ptr_job->buf_size) {
    2380:	693b      	ldr	r3, [r7, #16]
    2382:	68da      	ldr	r2, [r3, #12]
    2384:	693b      	ldr	r3, [r7, #16]
    2386:	689b      	ldr	r3, [r3, #8]
    2388:	429a      	cmp	r2, r3
    238a:	d903      	bls.n	2394 <udd_ep_trans_out_next+0xb0>
		ptr_job->nb_trans = ptr_job->buf_size;
    238c:	693b      	ldr	r3, [r7, #16]
    238e:	689a      	ldr	r2, [r3, #8]
    2390:	693b      	ldr	r3, [r7, #16]
    2392:	60da      	str	r2, [r3, #12]
	}

	/* If all previous data requested are received and user buffer not full
	 * then need to receive other data */
	if ((nb_trans == ep_callback_para->out_buffer_size) && (ptr_job->nb_trans != ptr_job->buf_size)) {
    2394:	69bb      	ldr	r3, [r7, #24]
    2396:	889b      	ldrh	r3, [r3, #4]
    2398:	220a      	movs	r2, #10
    239a:	18ba      	adds	r2, r7, r2
    239c:	8812      	ldrh	r2, [r2, #0]
    239e:	429a      	cmp	r2, r3
    23a0:	d165      	bne.n	246e <udd_ep_trans_out_next+0x18a>
    23a2:	693b      	ldr	r3, [r7, #16]
    23a4:	68da      	ldr	r2, [r3, #12]
    23a6:	693b      	ldr	r3, [r7, #16]
    23a8:	689b      	ldr	r3, [r3, #8]
    23aa:	429a      	cmp	r2, r3
    23ac:	d05f      	beq.n	246e <udd_ep_trans_out_next+0x18a>
		next_trans = ptr_job->buf_size - ptr_job->nb_trans;
    23ae:	693b      	ldr	r3, [r7, #16]
    23b0:	689b      	ldr	r3, [r3, #8]
    23b2:	b299      	uxth	r1, r3
    23b4:	693b      	ldr	r3, [r7, #16]
    23b6:	68db      	ldr	r3, [r3, #12]
    23b8:	b29a      	uxth	r2, r3
    23ba:	231e      	movs	r3, #30
    23bc:	18fb      	adds	r3, r7, r3
    23be:	1a8a      	subs	r2, r1, r2
    23c0:	801a      	strh	r2, [r3, #0]
		if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
    23c2:	231e      	movs	r3, #30
    23c4:	18fb      	adds	r3, r7, r3
    23c6:	881b      	ldrh	r3, [r3, #0]
    23c8:	4a38      	ldr	r2, [pc, #224]	; (24ac <udd_ep_trans_out_next+0x1c8>)
    23ca:	4293      	cmp	r3, r2
    23cc:	d90e      	bls.n	23ec <udd_ep_trans_out_next+0x108>
		/* The USB hardware support a maximum transfer size
		 * of UDD_ENDPOINT_MAX_TRANS Bytes */
		next_trans = UDD_ENDPOINT_MAX_TRANS - (UDD_ENDPOINT_MAX_TRANS % ep_size);
    23ce:	230c      	movs	r3, #12
    23d0:	18fb      	adds	r3, r7, r3
    23d2:	881a      	ldrh	r2, [r3, #0]
    23d4:	4835      	ldr	r0, [pc, #212]	; (24ac <udd_ep_trans_out_next+0x1c8>)
    23d6:	4b36      	ldr	r3, [pc, #216]	; (24b0 <udd_ep_trans_out_next+0x1cc>)
    23d8:	0011      	movs	r1, r2
    23da:	4798      	blx	r3
    23dc:	000b      	movs	r3, r1
    23de:	b29a      	uxth	r2, r3
    23e0:	231e      	movs	r3, #30
    23e2:	18fb      	adds	r3, r7, r3
    23e4:	4931      	ldr	r1, [pc, #196]	; (24ac <udd_ep_trans_out_next+0x1c8>)
    23e6:	1a8a      	subs	r2, r1, r2
    23e8:	801a      	strh	r2, [r3, #0]
    23ea:	e011      	b.n	2410 <udd_ep_trans_out_next+0x12c>
		} else {
			next_trans -= next_trans % ep_size;
    23ec:	231e      	movs	r3, #30
    23ee:	18fa      	adds	r2, r7, r3
    23f0:	230c      	movs	r3, #12
    23f2:	18fb      	adds	r3, r7, r3
    23f4:	8812      	ldrh	r2, [r2, #0]
    23f6:	8819      	ldrh	r1, [r3, #0]
    23f8:	4b2a      	ldr	r3, [pc, #168]	; (24a4 <udd_ep_trans_out_next+0x1c0>)
    23fa:	0010      	movs	r0, r2
    23fc:	4798      	blx	r3
    23fe:	000b      	movs	r3, r1
    2400:	b29a      	uxth	r2, r3
    2402:	231e      	movs	r3, #30
    2404:	18fb      	adds	r3, r7, r3
    2406:	211e      	movs	r1, #30
    2408:	1879      	adds	r1, r7, r1
    240a:	8809      	ldrh	r1, [r1, #0]
    240c:	1a8a      	subs	r2, r1, r2
    240e:	801a      	strh	r2, [r3, #0]
		}

		if (next_trans < ep_size) {
    2410:	231e      	movs	r3, #30
    2412:	18fa      	adds	r2, r7, r3
    2414:	230c      	movs	r3, #12
    2416:	18fb      	adds	r3, r7, r3
    2418:	8812      	ldrh	r2, [r2, #0]
    241a:	881b      	ldrh	r3, [r3, #0]
    241c:	429a      	cmp	r2, r3
    241e:	d216      	bcs.n	244e <udd_ep_trans_out_next+0x16a>
			/* Use the cache buffer for Bulk or Interrupt size endpoint */
			ptr_job->b_use_out_cache_buffer = true;
    2420:	693b      	ldr	r3, [r7, #16]
    2422:	7c9a      	ldrb	r2, [r3, #18]
    2424:	2104      	movs	r1, #4
    2426:	430a      	orrs	r2, r1
    2428:	749a      	strb	r2, [r3, #18]
			usb_device_endpoint_read_buffer_job(&usb_device,ep_num,udd_ep_out_cache_buffer[ep_num - 1],ep_size);
    242a:	230f      	movs	r3, #15
    242c:	18fb      	adds	r3, r7, r3
    242e:	781b      	ldrb	r3, [r3, #0]
    2430:	3b01      	subs	r3, #1
    2432:	019a      	lsls	r2, r3, #6
    2434:	4b1a      	ldr	r3, [pc, #104]	; (24a0 <udd_ep_trans_out_next+0x1bc>)
    2436:	18d2      	adds	r2, r2, r3
    2438:	230c      	movs	r3, #12
    243a:	18fb      	adds	r3, r7, r3
    243c:	881c      	ldrh	r4, [r3, #0]
    243e:	230f      	movs	r3, #15
    2440:	18fb      	adds	r3, r7, r3
    2442:	7819      	ldrb	r1, [r3, #0]
    2444:	481b      	ldr	r0, [pc, #108]	; (24b4 <udd_ep_trans_out_next+0x1d0>)
    2446:	0023      	movs	r3, r4
    2448:	4c1b      	ldr	r4, [pc, #108]	; (24b8 <udd_ep_trans_out_next+0x1d4>)
    244a:	47a0      	blx	r4
		} else {
			usb_device_endpoint_read_buffer_job(&usb_device,ep_num,&ptr_job->buf[ptr_job->nb_trans],next_trans);
		}
		return;
    244c:	e022      	b.n	2494 <udd_ep_trans_out_next+0x1b0>
			usb_device_endpoint_read_buffer_job(&usb_device,ep_num,&ptr_job->buf[ptr_job->nb_trans],next_trans);
    244e:	693b      	ldr	r3, [r7, #16]
    2450:	685a      	ldr	r2, [r3, #4]
    2452:	693b      	ldr	r3, [r7, #16]
    2454:	68db      	ldr	r3, [r3, #12]
    2456:	18d2      	adds	r2, r2, r3
    2458:	231e      	movs	r3, #30
    245a:	18fb      	adds	r3, r7, r3
    245c:	881c      	ldrh	r4, [r3, #0]
    245e:	230f      	movs	r3, #15
    2460:	18fb      	adds	r3, r7, r3
    2462:	7819      	ldrb	r1, [r3, #0]
    2464:	4813      	ldr	r0, [pc, #76]	; (24b4 <udd_ep_trans_out_next+0x1d0>)
    2466:	0023      	movs	r3, r4
    2468:	4c13      	ldr	r4, [pc, #76]	; (24b8 <udd_ep_trans_out_next+0x1d4>)
    246a:	47a0      	blx	r4
		return;
    246c:	e012      	b.n	2494 <udd_ep_trans_out_next+0x1b0>
	}

	/* Job complete then call callback */
	ptr_job->busy = false;
    246e:	693b      	ldr	r3, [r7, #16]
    2470:	7c9a      	ldrb	r2, [r3, #18]
    2472:	2101      	movs	r1, #1
    2474:	438a      	bics	r2, r1
    2476:	749a      	strb	r2, [r3, #18]
	if (NULL != ptr_job->call_trans) {
    2478:	693b      	ldr	r3, [r7, #16]
    247a:	681b      	ldr	r3, [r3, #0]
    247c:	2b00      	cmp	r3, #0
    247e:	d009      	beq.n	2494 <udd_ep_trans_out_next+0x1b0>
		ptr_job->call_trans(UDD_EP_TRANSFER_OK, ptr_job->nb_trans, ep);
    2480:	693b      	ldr	r3, [r7, #16]
    2482:	681c      	ldr	r4, [r3, #0]
    2484:	693b      	ldr	r3, [r7, #16]
    2486:	68d9      	ldr	r1, [r3, #12]
    2488:	2317      	movs	r3, #23
    248a:	18fb      	adds	r3, r7, r3
    248c:	781b      	ldrb	r3, [r3, #0]
    248e:	001a      	movs	r2, r3
    2490:	2000      	movs	r0, #0
    2492:	47a0      	blx	r4
	}
}
    2494:	46bd      	mov	sp, r7
    2496:	b008      	add	sp, #32
    2498:	bdb0      	pop	{r4, r5, r7, pc}
    249a:	46c0      	nop			; (mov r8, r8)
    249c:	00002109 	.word	0x00002109
    24a0:	200026e4 	.word	0x200026e4
    24a4:	00019de5 	.word	0x00019de5
    24a8:	0001c13d 	.word	0x0001c13d
    24ac:	00001fff 	.word	0x00001fff
    24b0:	00019fb9 	.word	0x00019fb9
    24b4:	20002764 	.word	0x20002764
    24b8:	00004791 	.word	0x00004791

000024bc <udd_ep_transfer_process>:
 * \brief     Endpoint Transfer Complete callback function, to do the next transfer depends on the direction(IN or OUT)
 * \param[in] module_inst Pointer to USB module instance
 * \param[in] pointer Pointer to the endpoint transfer status parameter struct from driver layer.
 */
static void udd_ep_transfer_process(struct usb_module *module_inst, void* pointer)
{
    24bc:	b580      	push	{r7, lr}
    24be:	b084      	sub	sp, #16
    24c0:	af00      	add	r7, sp, #0
    24c2:	6078      	str	r0, [r7, #4]
    24c4:	6039      	str	r1, [r7, #0]
	struct usb_endpoint_callback_parameter *ep_callback_para = (struct usb_endpoint_callback_parameter*)pointer;
    24c6:	683b      	ldr	r3, [r7, #0]
    24c8:	60fb      	str	r3, [r7, #12]
	udd_ep_id_t ep = ep_callback_para->endpoint_address;
    24ca:	230b      	movs	r3, #11
    24cc:	18fb      	adds	r3, r7, r3
    24ce:	68fa      	ldr	r2, [r7, #12]
    24d0:	7992      	ldrb	r2, [r2, #6]
    24d2:	701a      	strb	r2, [r3, #0]

	if (ep & USB_EP_DIR_IN) {
    24d4:	230b      	movs	r3, #11
    24d6:	18fb      	adds	r3, r7, r3
    24d8:	781b      	ldrb	r3, [r3, #0]
    24da:	b25b      	sxtb	r3, r3
    24dc:	2b00      	cmp	r3, #0
    24de:	da04      	bge.n	24ea <udd_ep_transfer_process+0x2e>
		udd_ep_trans_in_next(pointer);
    24e0:	683b      	ldr	r3, [r7, #0]
    24e2:	0018      	movs	r0, r3
    24e4:	4b05      	ldr	r3, [pc, #20]	; (24fc <udd_ep_transfer_process+0x40>)
    24e6:	4798      	blx	r3
	} else {
		udd_ep_trans_out_next(pointer);
	}
}
    24e8:	e003      	b.n	24f2 <udd_ep_transfer_process+0x36>
		udd_ep_trans_out_next(pointer);
    24ea:	683b      	ldr	r3, [r7, #0]
    24ec:	0018      	movs	r0, r3
    24ee:	4b04      	ldr	r3, [pc, #16]	; (2500 <udd_ep_transfer_process+0x44>)
    24f0:	4798      	blx	r3
}
    24f2:	46c0      	nop			; (mov r8, r8)
    24f4:	46bd      	mov	sp, r7
    24f6:	b004      	add	sp, #16
    24f8:	bd80      	pop	{r7, pc}
    24fa:	46c0      	nop			; (mov r8, r8)
    24fc:	0000215d 	.word	0x0000215d
    2500:	000022e5 	.word	0x000022e5

00002504 <udd_ep_abort>:

void udd_ep_abort(udd_ep_id_t ep)
{
    2504:	b590      	push	{r4, r7, lr}
    2506:	b085      	sub	sp, #20
    2508:	af00      	add	r7, sp, #0
    250a:	0002      	movs	r2, r0
    250c:	1dfb      	adds	r3, r7, #7
    250e:	701a      	strb	r2, [r3, #0]
	udd_ep_job_t *ptr_job;

	usb_device_endpoint_abort_job(&usb_device, ep);
    2510:	1dfb      	adds	r3, r7, #7
    2512:	781a      	ldrb	r2, [r3, #0]
    2514:	4b14      	ldr	r3, [pc, #80]	; (2568 <udd_ep_abort+0x64>)
    2516:	0011      	movs	r1, r2
    2518:	0018      	movs	r0, r3
    251a:	4b14      	ldr	r3, [pc, #80]	; (256c <udd_ep_abort+0x68>)
    251c:	4798      	blx	r3

	/* Job complete then call callback */
	ptr_job = udd_ep_get_job(ep);
    251e:	1dfb      	adds	r3, r7, #7
    2520:	781b      	ldrb	r3, [r3, #0]
    2522:	0018      	movs	r0, r3
    2524:	4b12      	ldr	r3, [pc, #72]	; (2570 <udd_ep_abort+0x6c>)
    2526:	4798      	blx	r3
    2528:	0003      	movs	r3, r0
    252a:	60fb      	str	r3, [r7, #12]
	if (!ptr_job->busy) {
    252c:	68fb      	ldr	r3, [r7, #12]
    252e:	7c9b      	ldrb	r3, [r3, #18]
    2530:	2201      	movs	r2, #1
    2532:	4013      	ands	r3, r2
    2534:	b2db      	uxtb	r3, r3
    2536:	2b00      	cmp	r3, #0
    2538:	d012      	beq.n	2560 <udd_ep_abort+0x5c>
		return;
	}
	ptr_job->busy = false;
    253a:	68fb      	ldr	r3, [r7, #12]
    253c:	7c9a      	ldrb	r2, [r3, #18]
    253e:	2101      	movs	r1, #1
    2540:	438a      	bics	r2, r1
    2542:	749a      	strb	r2, [r3, #18]
	if (NULL != ptr_job->call_trans) {
    2544:	68fb      	ldr	r3, [r7, #12]
    2546:	681b      	ldr	r3, [r3, #0]
    2548:	2b00      	cmp	r3, #0
    254a:	d00a      	beq.n	2562 <udd_ep_abort+0x5e>
		/* It can be a Transfer or stall callback */
		ptr_job->call_trans(UDD_EP_TRANSFER_ABORT, ptr_job->nb_trans, ep);
    254c:	68fb      	ldr	r3, [r7, #12]
    254e:	681c      	ldr	r4, [r3, #0]
    2550:	68fb      	ldr	r3, [r7, #12]
    2552:	68d9      	ldr	r1, [r3, #12]
    2554:	1dfb      	adds	r3, r7, #7
    2556:	781b      	ldrb	r3, [r3, #0]
    2558:	001a      	movs	r2, r3
    255a:	2001      	movs	r0, #1
    255c:	47a0      	blx	r4
    255e:	e000      	b.n	2562 <udd_ep_abort+0x5e>
		return;
    2560:	46c0      	nop			; (mov r8, r8)
	}
}
    2562:	46bd      	mov	sp, r7
    2564:	b005      	add	sp, #20
    2566:	bd90      	pop	{r4, r7, pc}
    2568:	20002764 	.word	0x20002764
    256c:	00004459 	.word	0x00004459
    2570:	00002109 	.word	0x00002109

00002574 <udd_ep_free>:
{
	return usb_device_get_micro_frame_number(&usb_device);
}

void udd_ep_free(udd_ep_id_t ep)
{
    2574:	b580      	push	{r7, lr}
    2576:	b084      	sub	sp, #16
    2578:	af00      	add	r7, sp, #0
    257a:	0002      	movs	r2, r0
    257c:	1dfb      	adds	r3, r7, #7
    257e:	701a      	strb	r2, [r3, #0]
	struct usb_device_endpoint_config config_ep;
	usb_device_endpoint_get_config_defaults(&config_ep);
    2580:	2308      	movs	r3, #8
    2582:	18fb      	adds	r3, r7, r3
    2584:	0018      	movs	r0, r3
    2586:	4b18      	ldr	r3, [pc, #96]	; (25e8 <udd_ep_free+0x74>)
    2588:	4798      	blx	r3

	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
    258a:	230f      	movs	r3, #15
    258c:	18fb      	adds	r3, r7, r3
    258e:	1dfa      	adds	r2, r7, #7
    2590:	7812      	ldrb	r2, [r2, #0]
    2592:	210f      	movs	r1, #15
    2594:	400a      	ands	r2, r1
    2596:	701a      	strb	r2, [r3, #0]
	udd_ep_abort(ep);
    2598:	1dfb      	adds	r3, r7, #7
    259a:	781b      	ldrb	r3, [r3, #0]
    259c:	0018      	movs	r0, r3
    259e:	4b13      	ldr	r3, [pc, #76]	; (25ec <udd_ep_free+0x78>)
    25a0:	4798      	blx	r3

	config_ep.ep_address = ep;
    25a2:	2308      	movs	r3, #8
    25a4:	18fb      	adds	r3, r7, r3
    25a6:	1dfa      	adds	r2, r7, #7
    25a8:	7812      	ldrb	r2, [r2, #0]
    25aa:	701a      	strb	r2, [r3, #0]
	config_ep.ep_type = USB_DEVICE_ENDPOINT_TYPE_DISABLE;
    25ac:	2308      	movs	r3, #8
    25ae:	18fb      	adds	r3, r7, r3
    25b0:	2200      	movs	r2, #0
    25b2:	70da      	strb	r2, [r3, #3]
	usb_device_endpoint_set_config(&usb_device, &config_ep);
    25b4:	2308      	movs	r3, #8
    25b6:	18fa      	adds	r2, r7, r3
    25b8:	4b0d      	ldr	r3, [pc, #52]	; (25f0 <udd_ep_free+0x7c>)
    25ba:	0011      	movs	r1, r2
    25bc:	0018      	movs	r0, r3
    25be:	4b0d      	ldr	r3, [pc, #52]	; (25f4 <udd_ep_free+0x80>)
    25c0:	4798      	blx	r3
	usb_device_endpoint_unregister_callback(&usb_device,ep_num,USB_DEVICE_ENDPOINT_CALLBACK_TRCPT);
    25c2:	230f      	movs	r3, #15
    25c4:	18fb      	adds	r3, r7, r3
    25c6:	7819      	ldrb	r1, [r3, #0]
    25c8:	4b09      	ldr	r3, [pc, #36]	; (25f0 <udd_ep_free+0x7c>)
    25ca:	2200      	movs	r2, #0
    25cc:	0018      	movs	r0, r3
    25ce:	4b0a      	ldr	r3, [pc, #40]	; (25f8 <udd_ep_free+0x84>)
    25d0:	4798      	blx	r3
	usb_device_endpoint_disable_callback(&usb_device,ep,USB_DEVICE_ENDPOINT_CALLBACK_TRCPT);
    25d2:	1dfb      	adds	r3, r7, #7
    25d4:	7819      	ldrb	r1, [r3, #0]
    25d6:	4b06      	ldr	r3, [pc, #24]	; (25f0 <udd_ep_free+0x7c>)
    25d8:	2200      	movs	r2, #0
    25da:	0018      	movs	r0, r3
    25dc:	4b07      	ldr	r3, [pc, #28]	; (25fc <udd_ep_free+0x88>)
    25de:	4798      	blx	r3
}
    25e0:	46c0      	nop			; (mov r8, r8)
    25e2:	46bd      	mov	sp, r7
    25e4:	b004      	add	sp, #16
    25e6:	bd80      	pop	{r7, pc}
    25e8:	00003f39 	.word	0x00003f39
    25ec:	00002505 	.word	0x00002505
    25f0:	20002764 	.word	0x20002764
    25f4:	00003f61 	.word	0x00003f61
    25f8:	00003b81 	.word	0x00003b81
    25fc:	00003d95 	.word	0x00003d95

00002600 <udd_ep_alloc>:

bool udd_ep_alloc(udd_ep_id_t ep, uint8_t bmAttributes, uint16_t MaxEndpointSize)
{
    2600:	b590      	push	{r4, r7, lr}
    2602:	b087      	sub	sp, #28
    2604:	af00      	add	r7, sp, #0
    2606:	0004      	movs	r4, r0
    2608:	0008      	movs	r0, r1
    260a:	0011      	movs	r1, r2
    260c:	1dfb      	adds	r3, r7, #7
    260e:	1c22      	adds	r2, r4, #0
    2610:	701a      	strb	r2, [r3, #0]
    2612:	1dbb      	adds	r3, r7, #6
    2614:	1c02      	adds	r2, r0, #0
    2616:	701a      	strb	r2, [r3, #0]
    2618:	1d3b      	adds	r3, r7, #4
    261a:	1c0a      	adds	r2, r1, #0
    261c:	801a      	strh	r2, [r3, #0]
	struct usb_device_endpoint_config config_ep;
	usb_device_endpoint_get_config_defaults(&config_ep);
    261e:	230c      	movs	r3, #12
    2620:	18fb      	adds	r3, r7, r3
    2622:	0018      	movs	r0, r3
    2624:	4b58      	ldr	r3, [pc, #352]	; (2788 <udd_ep_alloc+0x188>)
    2626:	4798      	blx	r3

	config_ep.ep_address = ep;
    2628:	230c      	movs	r3, #12
    262a:	18fb      	adds	r3, r7, r3
    262c:	1dfa      	adds	r2, r7, #7
    262e:	7812      	ldrb	r2, [r2, #0]
    2630:	701a      	strb	r2, [r3, #0]

	if(MaxEndpointSize <= 8) {
    2632:	1d3b      	adds	r3, r7, #4
    2634:	881b      	ldrh	r3, [r3, #0]
    2636:	2b08      	cmp	r3, #8
    2638:	d804      	bhi.n	2644 <udd_ep_alloc+0x44>
		config_ep.ep_size = USB_ENDPOINT_8_BYTE;
    263a:	230c      	movs	r3, #12
    263c:	18fb      	adds	r3, r7, r3
    263e:	2200      	movs	r2, #0
    2640:	705a      	strb	r2, [r3, #1]
    2642:	e045      	b.n	26d0 <udd_ep_alloc+0xd0>
	} else if(MaxEndpointSize <= 16) {
    2644:	1d3b      	adds	r3, r7, #4
    2646:	881b      	ldrh	r3, [r3, #0]
    2648:	2b10      	cmp	r3, #16
    264a:	d804      	bhi.n	2656 <udd_ep_alloc+0x56>
		config_ep.ep_size = USB_ENDPOINT_16_BYTE;
    264c:	230c      	movs	r3, #12
    264e:	18fb      	adds	r3, r7, r3
    2650:	2201      	movs	r2, #1
    2652:	705a      	strb	r2, [r3, #1]
    2654:	e03c      	b.n	26d0 <udd_ep_alloc+0xd0>
	} else if(MaxEndpointSize <= 32) {
    2656:	1d3b      	adds	r3, r7, #4
    2658:	881b      	ldrh	r3, [r3, #0]
    265a:	2b20      	cmp	r3, #32
    265c:	d804      	bhi.n	2668 <udd_ep_alloc+0x68>
		config_ep.ep_size = USB_ENDPOINT_32_BYTE;
    265e:	230c      	movs	r3, #12
    2660:	18fb      	adds	r3, r7, r3
    2662:	2202      	movs	r2, #2
    2664:	705a      	strb	r2, [r3, #1]
    2666:	e033      	b.n	26d0 <udd_ep_alloc+0xd0>
	} else if(MaxEndpointSize <= 64) {
    2668:	1d3b      	adds	r3, r7, #4
    266a:	881b      	ldrh	r3, [r3, #0]
    266c:	2b40      	cmp	r3, #64	; 0x40
    266e:	d804      	bhi.n	267a <udd_ep_alloc+0x7a>
		config_ep.ep_size = USB_ENDPOINT_64_BYTE;
    2670:	230c      	movs	r3, #12
    2672:	18fb      	adds	r3, r7, r3
    2674:	2203      	movs	r2, #3
    2676:	705a      	strb	r2, [r3, #1]
    2678:	e02a      	b.n	26d0 <udd_ep_alloc+0xd0>
	} else if(MaxEndpointSize <= 128) {
    267a:	1d3b      	adds	r3, r7, #4
    267c:	881b      	ldrh	r3, [r3, #0]
    267e:	2b80      	cmp	r3, #128	; 0x80
    2680:	d804      	bhi.n	268c <udd_ep_alloc+0x8c>
		config_ep.ep_size = USB_ENDPOINT_128_BYTE;
    2682:	230c      	movs	r3, #12
    2684:	18fb      	adds	r3, r7, r3
    2686:	2204      	movs	r2, #4
    2688:	705a      	strb	r2, [r3, #1]
    268a:	e021      	b.n	26d0 <udd_ep_alloc+0xd0>
	} else if(MaxEndpointSize <= 256) {
    268c:	1d3b      	adds	r3, r7, #4
    268e:	881a      	ldrh	r2, [r3, #0]
    2690:	2380      	movs	r3, #128	; 0x80
    2692:	005b      	lsls	r3, r3, #1
    2694:	429a      	cmp	r2, r3
    2696:	d804      	bhi.n	26a2 <udd_ep_alloc+0xa2>
		config_ep.ep_size = USB_ENDPOINT_256_BYTE;
    2698:	230c      	movs	r3, #12
    269a:	18fb      	adds	r3, r7, r3
    269c:	2205      	movs	r2, #5
    269e:	705a      	strb	r2, [r3, #1]
    26a0:	e016      	b.n	26d0 <udd_ep_alloc+0xd0>
	} else if(MaxEndpointSize <= 512) {
    26a2:	1d3b      	adds	r3, r7, #4
    26a4:	881a      	ldrh	r2, [r3, #0]
    26a6:	2380      	movs	r3, #128	; 0x80
    26a8:	009b      	lsls	r3, r3, #2
    26aa:	429a      	cmp	r2, r3
    26ac:	d804      	bhi.n	26b8 <udd_ep_alloc+0xb8>
		config_ep.ep_size = USB_ENDPOINT_512_BYTE;
    26ae:	230c      	movs	r3, #12
    26b0:	18fb      	adds	r3, r7, r3
    26b2:	2206      	movs	r2, #6
    26b4:	705a      	strb	r2, [r3, #1]
    26b6:	e00b      	b.n	26d0 <udd_ep_alloc+0xd0>
	} else if(MaxEndpointSize <= 1023) {
    26b8:	1d3b      	adds	r3, r7, #4
    26ba:	881b      	ldrh	r3, [r3, #0]
    26bc:	4a33      	ldr	r2, [pc, #204]	; (278c <udd_ep_alloc+0x18c>)
    26be:	4293      	cmp	r3, r2
    26c0:	d804      	bhi.n	26cc <udd_ep_alloc+0xcc>
		config_ep.ep_size = USB_ENDPOINT_1023_BYTE;
    26c2:	230c      	movs	r3, #12
    26c4:	18fb      	adds	r3, r7, r3
    26c6:	2207      	movs	r2, #7
    26c8:	705a      	strb	r2, [r3, #1]
    26ca:	e001      	b.n	26d0 <udd_ep_alloc+0xd0>
	} else {
		return false;
    26cc:	2300      	movs	r3, #0
    26ce:	e057      	b.n	2780 <udd_ep_alloc+0x180>
	}
	udd_ep_job_t *ptr_job = udd_ep_get_job(ep);
    26d0:	1dfb      	adds	r3, r7, #7
    26d2:	781b      	ldrb	r3, [r3, #0]
    26d4:	0018      	movs	r0, r3
    26d6:	4b2e      	ldr	r3, [pc, #184]	; (2790 <udd_ep_alloc+0x190>)
    26d8:	4798      	blx	r3
    26da:	0003      	movs	r3, r0
    26dc:	617b      	str	r3, [r7, #20]
	ptr_job->ep_size = MaxEndpointSize;
    26de:	697b      	ldr	r3, [r7, #20]
    26e0:	1d3a      	adds	r2, r7, #4
    26e2:	8812      	ldrh	r2, [r2, #0]
    26e4:	821a      	strh	r2, [r3, #16]

	bmAttributes = bmAttributes & USB_EP_TYPE_MASK;
    26e6:	1dbb      	adds	r3, r7, #6
    26e8:	1dba      	adds	r2, r7, #6
    26ea:	7812      	ldrb	r2, [r2, #0]
    26ec:	2103      	movs	r1, #3
    26ee:	400a      	ands	r2, r1
    26f0:	701a      	strb	r2, [r3, #0]

	/* Check endpoint type */
	if(USB_EP_TYPE_ISOCHRONOUS == bmAttributes) {
    26f2:	1dbb      	adds	r3, r7, #6
    26f4:	781b      	ldrb	r3, [r3, #0]
    26f6:	2b01      	cmp	r3, #1
    26f8:	d104      	bne.n	2704 <udd_ep_alloc+0x104>
		config_ep.ep_type = USB_DEVICE_ENDPOINT_TYPE_ISOCHRONOUS;
    26fa:	230c      	movs	r3, #12
    26fc:	18fb      	adds	r3, r7, r3
    26fe:	2202      	movs	r2, #2
    2700:	70da      	strb	r2, [r3, #3]
    2702:	e013      	b.n	272c <udd_ep_alloc+0x12c>
	} else if (USB_EP_TYPE_BULK == bmAttributes) {
    2704:	1dbb      	adds	r3, r7, #6
    2706:	781b      	ldrb	r3, [r3, #0]
    2708:	2b02      	cmp	r3, #2
    270a:	d104      	bne.n	2716 <udd_ep_alloc+0x116>
		config_ep.ep_type = USB_DEVICE_ENDPOINT_TYPE_BULK;
    270c:	230c      	movs	r3, #12
    270e:	18fb      	adds	r3, r7, r3
    2710:	2203      	movs	r2, #3
    2712:	70da      	strb	r2, [r3, #3]
    2714:	e00a      	b.n	272c <udd_ep_alloc+0x12c>
	} else if (USB_EP_TYPE_INTERRUPT == bmAttributes) {
    2716:	1dbb      	adds	r3, r7, #6
    2718:	781b      	ldrb	r3, [r3, #0]
    271a:	2b03      	cmp	r3, #3
    271c:	d104      	bne.n	2728 <udd_ep_alloc+0x128>
		config_ep.ep_type = USB_DEVICE_ENDPOINT_TYPE_INTERRUPT;
    271e:	230c      	movs	r3, #12
    2720:	18fb      	adds	r3, r7, r3
    2722:	2204      	movs	r2, #4
    2724:	70da      	strb	r2, [r3, #3]
    2726:	e001      	b.n	272c <udd_ep_alloc+0x12c>
	} else {
		return false;
    2728:	2300      	movs	r3, #0
    272a:	e029      	b.n	2780 <udd_ep_alloc+0x180>
	}

	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
    272c:	2313      	movs	r3, #19
    272e:	18fb      	adds	r3, r7, r3
    2730:	1dfa      	adds	r2, r7, #7
    2732:	7812      	ldrb	r2, [r2, #0]
    2734:	210f      	movs	r1, #15
    2736:	400a      	ands	r2, r1
    2738:	701a      	strb	r2, [r3, #0]

	if (STATUS_OK != usb_device_endpoint_set_config(&usb_device, &config_ep)) {
    273a:	230c      	movs	r3, #12
    273c:	18fa      	adds	r2, r7, r3
    273e:	4b15      	ldr	r3, [pc, #84]	; (2794 <udd_ep_alloc+0x194>)
    2740:	0011      	movs	r1, r2
    2742:	0018      	movs	r0, r3
    2744:	4b14      	ldr	r3, [pc, #80]	; (2798 <udd_ep_alloc+0x198>)
    2746:	4798      	blx	r3
    2748:	1e03      	subs	r3, r0, #0
    274a:	d001      	beq.n	2750 <udd_ep_alloc+0x150>
		return false;
    274c:	2300      	movs	r3, #0
    274e:	e017      	b.n	2780 <udd_ep_alloc+0x180>
	}
	usb_device_endpoint_register_callback(&usb_device,ep_num,USB_DEVICE_ENDPOINT_CALLBACK_TRCPT,udd_ep_transfer_process);
    2750:	4a12      	ldr	r2, [pc, #72]	; (279c <udd_ep_alloc+0x19c>)
    2752:	2313      	movs	r3, #19
    2754:	18fb      	adds	r3, r7, r3
    2756:	7819      	ldrb	r1, [r3, #0]
    2758:	480e      	ldr	r0, [pc, #56]	; (2794 <udd_ep_alloc+0x194>)
    275a:	0013      	movs	r3, r2
    275c:	2200      	movs	r2, #0
    275e:	4c10      	ldr	r4, [pc, #64]	; (27a0 <udd_ep_alloc+0x1a0>)
    2760:	47a0      	blx	r4
	usb_device_endpoint_enable_callback(&usb_device,ep,USB_DEVICE_ENDPOINT_CALLBACK_TRCPT);
    2762:	1dfb      	adds	r3, r7, #7
    2764:	7819      	ldrb	r1, [r3, #0]
    2766:	4b0b      	ldr	r3, [pc, #44]	; (2794 <udd_ep_alloc+0x194>)
    2768:	2200      	movs	r2, #0
    276a:	0018      	movs	r0, r3
    276c:	4b0d      	ldr	r3, [pc, #52]	; (27a4 <udd_ep_alloc+0x1a4>)
    276e:	4798      	blx	r3
	usb_device_endpoint_enable_callback(&usb_device,ep,USB_DEVICE_ENDPOINT_CALLBACK_TRFAIL);
    2770:	1dfb      	adds	r3, r7, #7
    2772:	7819      	ldrb	r1, [r3, #0]
    2774:	4b07      	ldr	r3, [pc, #28]	; (2794 <udd_ep_alloc+0x194>)
    2776:	2201      	movs	r2, #1
    2778:	0018      	movs	r0, r3
    277a:	4b0a      	ldr	r3, [pc, #40]	; (27a4 <udd_ep_alloc+0x1a4>)
    277c:	4798      	blx	r3

	return true;
    277e:	2301      	movs	r3, #1
}
    2780:	0018      	movs	r0, r3
    2782:	46bd      	mov	sp, r7
    2784:	b007      	add	sp, #28
    2786:	bd90      	pop	{r4, r7, pc}
    2788:	00003f39 	.word	0x00003f39
    278c:	000003ff 	.word	0x000003ff
    2790:	00002109 	.word	0x00002109
    2794:	20002764 	.word	0x20002764
    2798:	00003f61 	.word	0x00003f61
    279c:	000024bd 	.word	0x000024bd
    27a0:	00003b01 	.word	0x00003b01
    27a4:	00003bf9 	.word	0x00003bf9

000027a8 <udd_ep_is_halted>:

bool udd_ep_is_halted(udd_ep_id_t ep)
{
    27a8:	b580      	push	{r7, lr}
    27aa:	b082      	sub	sp, #8
    27ac:	af00      	add	r7, sp, #0
    27ae:	0002      	movs	r2, r0
    27b0:	1dfb      	adds	r3, r7, #7
    27b2:	701a      	strb	r2, [r3, #0]
	return usb_device_endpoint_is_halted(&usb_device, ep);
    27b4:	1dfb      	adds	r3, r7, #7
    27b6:	781a      	ldrb	r2, [r3, #0]
    27b8:	4b04      	ldr	r3, [pc, #16]	; (27cc <udd_ep_is_halted+0x24>)
    27ba:	0011      	movs	r1, r2
    27bc:	0018      	movs	r0, r3
    27be:	4b04      	ldr	r3, [pc, #16]	; (27d0 <udd_ep_is_halted+0x28>)
    27c0:	4798      	blx	r3
    27c2:	0003      	movs	r3, r0
}
    27c4:	0018      	movs	r0, r3
    27c6:	46bd      	mov	sp, r7
    27c8:	b002      	add	sp, #8
    27ca:	bd80      	pop	{r7, pc}
    27cc:	20002764 	.word	0x20002764
    27d0:	000044e1 	.word	0x000044e1

000027d4 <udd_ep_set_halt>:

bool udd_ep_set_halt(udd_ep_id_t ep)
{
    27d4:	b580      	push	{r7, lr}
    27d6:	b084      	sub	sp, #16
    27d8:	af00      	add	r7, sp, #0
    27da:	0002      	movs	r2, r0
    27dc:	1dfb      	adds	r3, r7, #7
    27de:	701a      	strb	r2, [r3, #0]
	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
    27e0:	230f      	movs	r3, #15
    27e2:	18fb      	adds	r3, r7, r3
    27e4:	1dfa      	adds	r2, r7, #7
    27e6:	7812      	ldrb	r2, [r2, #0]
    27e8:	210f      	movs	r1, #15
    27ea:	400a      	ands	r2, r1
    27ec:	701a      	strb	r2, [r3, #0]

	if (USB_DEVICE_MAX_EP < ep_num) {
    27ee:	230f      	movs	r3, #15
    27f0:	18fb      	adds	r3, r7, r3
    27f2:	781b      	ldrb	r3, [r3, #0]
    27f4:	2b02      	cmp	r3, #2
    27f6:	d901      	bls.n	27fc <udd_ep_set_halt+0x28>
		return false;
    27f8:	2300      	movs	r3, #0
    27fa:	e00c      	b.n	2816 <udd_ep_set_halt+0x42>
	}

	usb_device_endpoint_set_halt(&usb_device, ep);
    27fc:	1dfb      	adds	r3, r7, #7
    27fe:	781a      	ldrb	r2, [r3, #0]
    2800:	4b07      	ldr	r3, [pc, #28]	; (2820 <udd_ep_set_halt+0x4c>)
    2802:	0011      	movs	r1, r2
    2804:	0018      	movs	r0, r3
    2806:	4b07      	ldr	r3, [pc, #28]	; (2824 <udd_ep_set_halt+0x50>)
    2808:	4798      	blx	r3

	udd_ep_abort(ep);
    280a:	1dfb      	adds	r3, r7, #7
    280c:	781b      	ldrb	r3, [r3, #0]
    280e:	0018      	movs	r0, r3
    2810:	4b05      	ldr	r3, [pc, #20]	; (2828 <udd_ep_set_halt+0x54>)
    2812:	4798      	blx	r3
	return true;
    2814:	2301      	movs	r3, #1
}
    2816:	0018      	movs	r0, r3
    2818:	46bd      	mov	sp, r7
    281a:	b004      	add	sp, #16
    281c:	bd80      	pop	{r7, pc}
    281e:	46c0      	nop			; (mov r8, r8)
    2820:	20002764 	.word	0x20002764
    2824:	00004555 	.word	0x00004555
    2828:	00002505 	.word	0x00002505

0000282c <udd_ep_clear_halt>:

bool udd_ep_clear_halt(udd_ep_id_t ep)
{
    282c:	b580      	push	{r7, lr}
    282e:	b084      	sub	sp, #16
    2830:	af00      	add	r7, sp, #0
    2832:	0002      	movs	r2, r0
    2834:	1dfb      	adds	r3, r7, #7
    2836:	701a      	strb	r2, [r3, #0]
	udd_ep_job_t *ptr_job;
	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
    2838:	230f      	movs	r3, #15
    283a:	18fb      	adds	r3, r7, r3
    283c:	1dfa      	adds	r2, r7, #7
    283e:	7812      	ldrb	r2, [r2, #0]
    2840:	210f      	movs	r1, #15
    2842:	400a      	ands	r2, r1
    2844:	701a      	strb	r2, [r3, #0]

	if (USB_DEVICE_MAX_EP < ep_num) {
    2846:	230f      	movs	r3, #15
    2848:	18fb      	adds	r3, r7, r3
    284a:	781b      	ldrb	r3, [r3, #0]
    284c:	2b02      	cmp	r3, #2
    284e:	d901      	bls.n	2854 <udd_ep_clear_halt+0x28>
		return false;
    2850:	2300      	movs	r3, #0
    2852:	e01d      	b.n	2890 <udd_ep_clear_halt+0x64>
	}
	ptr_job = udd_ep_get_job(ep);
    2854:	1dfb      	adds	r3, r7, #7
    2856:	781b      	ldrb	r3, [r3, #0]
    2858:	0018      	movs	r0, r3
    285a:	4b0f      	ldr	r3, [pc, #60]	; (2898 <udd_ep_clear_halt+0x6c>)
    285c:	4798      	blx	r3
    285e:	0003      	movs	r3, r0
    2860:	60bb      	str	r3, [r7, #8]

	usb_device_endpoint_clear_halt(&usb_device, ep);
    2862:	1dfb      	adds	r3, r7, #7
    2864:	781a      	ldrb	r2, [r3, #0]
    2866:	4b0d      	ldr	r3, [pc, #52]	; (289c <udd_ep_clear_halt+0x70>)
    2868:	0011      	movs	r1, r2
    286a:	0018      	movs	r0, r3
    286c:	4b0c      	ldr	r3, [pc, #48]	; (28a0 <udd_ep_clear_halt+0x74>)
    286e:	4798      	blx	r3

	/* If a job is register on clear halt action then execute callback */
	if (ptr_job->busy == true) {
    2870:	68bb      	ldr	r3, [r7, #8]
    2872:	7c9b      	ldrb	r3, [r3, #18]
    2874:	2201      	movs	r2, #1
    2876:	4013      	ands	r3, r2
    2878:	b2db      	uxtb	r3, r3
    287a:	2b00      	cmp	r3, #0
    287c:	d007      	beq.n	288e <udd_ep_clear_halt+0x62>
		ptr_job->busy = false;
    287e:	68bb      	ldr	r3, [r7, #8]
    2880:	7c9a      	ldrb	r2, [r3, #18]
    2882:	2101      	movs	r1, #1
    2884:	438a      	bics	r2, r1
    2886:	749a      	strb	r2, [r3, #18]
		ptr_job->call_nohalt();
    2888:	68bb      	ldr	r3, [r7, #8]
    288a:	681b      	ldr	r3, [r3, #0]
    288c:	4798      	blx	r3
	}

	return true;
    288e:	2301      	movs	r3, #1
}
    2890:	0018      	movs	r0, r3
    2892:	46bd      	mov	sp, r7
    2894:	b004      	add	sp, #16
    2896:	bd80      	pop	{r7, pc}
    2898:	00002109 	.word	0x00002109
    289c:	20002764 	.word	0x20002764
    28a0:	000045b1 	.word	0x000045b1

000028a4 <udd_ctrl_stall_data>:

/**
 * \brief Control Endpoint stall sending data
 */
static void udd_ctrl_stall_data(void)
{
    28a4:	b580      	push	{r7, lr}
    28a6:	af00      	add	r7, sp, #0
	udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
    28a8:	4b07      	ldr	r3, [pc, #28]	; (28c8 <udd_ctrl_stall_data+0x24>)
    28aa:	2205      	movs	r2, #5
    28ac:	701a      	strb	r2, [r3, #0]

	usb_device_endpoint_set_halt(&usb_device, USB_EP_DIR_IN);
    28ae:	4b07      	ldr	r3, [pc, #28]	; (28cc <udd_ctrl_stall_data+0x28>)
    28b0:	2180      	movs	r1, #128	; 0x80
    28b2:	0018      	movs	r0, r3
    28b4:	4b06      	ldr	r3, [pc, #24]	; (28d0 <udd_ctrl_stall_data+0x2c>)
    28b6:	4798      	blx	r3
	usb_device_endpoint_clear_halt(&usb_device, USB_EP_DIR_OUT);
    28b8:	4b04      	ldr	r3, [pc, #16]	; (28cc <udd_ctrl_stall_data+0x28>)
    28ba:	2100      	movs	r1, #0
    28bc:	0018      	movs	r0, r3
    28be:	4b05      	ldr	r3, [pc, #20]	; (28d4 <udd_ctrl_stall_data+0x30>)
    28c0:	4798      	blx	r3
}
    28c2:	46c0      	nop			; (mov r8, r8)
    28c4:	46bd      	mov	sp, r7
    28c6:	bd80      	pop	{r7, pc}
    28c8:	200004c6 	.word	0x200004c6
    28cc:	20002764 	.word	0x20002764
    28d0:	00004555 	.word	0x00004555
    28d4:	000045b1 	.word	0x000045b1

000028d8 <udd_ep_run>:

bool udd_ep_run(udd_ep_id_t ep, bool b_shortpacket, uint8_t * buf, iram_size_t buf_size, udd_callback_trans_t callback)
{
    28d8:	b590      	push	{r4, r7, lr}
    28da:	b089      	sub	sp, #36	; 0x24
    28dc:	af00      	add	r7, sp, #0
    28de:	60ba      	str	r2, [r7, #8]
    28e0:	607b      	str	r3, [r7, #4]
    28e2:	230f      	movs	r3, #15
    28e4:	18fb      	adds	r3, r7, r3
    28e6:	1c02      	adds	r2, r0, #0
    28e8:	701a      	strb	r2, [r3, #0]
    28ea:	230e      	movs	r3, #14
    28ec:	18fb      	adds	r3, r7, r3
    28ee:	1c0a      	adds	r2, r1, #0
    28f0:	701a      	strb	r2, [r3, #0]
	udd_ep_id_t ep_num;
	udd_ep_job_t *ptr_job;
	irqflags_t flags;

	ep_num = ep & USB_EP_ADDR_MASK;
    28f2:	231d      	movs	r3, #29
    28f4:	18fb      	adds	r3, r7, r3
    28f6:	220f      	movs	r2, #15
    28f8:	18ba      	adds	r2, r7, r2
    28fa:	7812      	ldrb	r2, [r2, #0]
    28fc:	210f      	movs	r1, #15
    28fe:	400a      	ands	r2, r1
    2900:	701a      	strb	r2, [r3, #0]

	if ((USB_DEVICE_MAX_EP < ep_num) || (udd_ep_is_halted(ep))) {
    2902:	231d      	movs	r3, #29
    2904:	18fb      	adds	r3, r7, r3
    2906:	781b      	ldrb	r3, [r3, #0]
    2908:	2b02      	cmp	r3, #2
    290a:	d807      	bhi.n	291c <udd_ep_run+0x44>
    290c:	230f      	movs	r3, #15
    290e:	18fb      	adds	r3, r7, r3
    2910:	781b      	ldrb	r3, [r3, #0]
    2912:	0018      	movs	r0, r3
    2914:	4b9f      	ldr	r3, [pc, #636]	; (2b94 <udd_ep_run+0x2bc>)
    2916:	4798      	blx	r3
    2918:	1e03      	subs	r3, r0, #0
    291a:	d001      	beq.n	2920 <udd_ep_run+0x48>
		return false;
    291c:	2300      	movs	r3, #0
    291e:	e134      	b.n	2b8a <udd_ep_run+0x2b2>
	}

	ptr_job = udd_ep_get_job(ep);
    2920:	230f      	movs	r3, #15
    2922:	18fb      	adds	r3, r7, r3
    2924:	781b      	ldrb	r3, [r3, #0]
    2926:	0018      	movs	r0, r3
    2928:	4b9b      	ldr	r3, [pc, #620]	; (2b98 <udd_ep_run+0x2c0>)
    292a:	4798      	blx	r3
    292c:	0003      	movs	r3, r0
    292e:	61bb      	str	r3, [r7, #24]

	flags = cpu_irq_save();
    2930:	4b9a      	ldr	r3, [pc, #616]	; (2b9c <udd_ep_run+0x2c4>)
    2932:	4798      	blx	r3
    2934:	0003      	movs	r3, r0
    2936:	617b      	str	r3, [r7, #20]
	if (ptr_job->busy == true) {
    2938:	69bb      	ldr	r3, [r7, #24]
    293a:	7c9b      	ldrb	r3, [r3, #18]
    293c:	2201      	movs	r2, #1
    293e:	4013      	ands	r3, r2
    2940:	b2db      	uxtb	r3, r3
    2942:	2b00      	cmp	r3, #0
    2944:	d005      	beq.n	2952 <udd_ep_run+0x7a>
		cpu_irq_restore(flags);
    2946:	697b      	ldr	r3, [r7, #20]
    2948:	0018      	movs	r0, r3
    294a:	4b95      	ldr	r3, [pc, #596]	; (2ba0 <udd_ep_run+0x2c8>)
    294c:	4798      	blx	r3
		return false; /* Job already on going */
    294e:	2300      	movs	r3, #0
    2950:	e11b      	b.n	2b8a <udd_ep_run+0x2b2>
	}
	ptr_job->busy = true;
    2952:	69bb      	ldr	r3, [r7, #24]
    2954:	7c9a      	ldrb	r2, [r3, #18]
    2956:	2101      	movs	r1, #1
    2958:	430a      	orrs	r2, r1
    295a:	749a      	strb	r2, [r3, #18]
	cpu_irq_restore(flags);
    295c:	697b      	ldr	r3, [r7, #20]
    295e:	0018      	movs	r0, r3
    2960:	4b8f      	ldr	r3, [pc, #572]	; (2ba0 <udd_ep_run+0x2c8>)
    2962:	4798      	blx	r3

	/* No job running, set up a new one */
	ptr_job->buf = buf;
    2964:	69bb      	ldr	r3, [r7, #24]
    2966:	68ba      	ldr	r2, [r7, #8]
    2968:	605a      	str	r2, [r3, #4]
	ptr_job->buf_size = buf_size;
    296a:	69bb      	ldr	r3, [r7, #24]
    296c:	687a      	ldr	r2, [r7, #4]
    296e:	609a      	str	r2, [r3, #8]
	ptr_job->nb_trans = 0;
    2970:	69bb      	ldr	r3, [r7, #24]
    2972:	2200      	movs	r2, #0
    2974:	60da      	str	r2, [r3, #12]
	ptr_job->call_trans = callback;
    2976:	69bb      	ldr	r3, [r7, #24]
    2978:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    297a:	601a      	str	r2, [r3, #0]
	ptr_job->b_shortpacket = b_shortpacket;
    297c:	69bb      	ldr	r3, [r7, #24]
    297e:	220e      	movs	r2, #14
    2980:	18ba      	adds	r2, r7, r2
    2982:	7812      	ldrb	r2, [r2, #0]
    2984:	2101      	movs	r1, #1
    2986:	400a      	ands	r2, r1
    2988:	1890      	adds	r0, r2, r2
    298a:	7c9a      	ldrb	r2, [r3, #18]
    298c:	2102      	movs	r1, #2
    298e:	438a      	bics	r2, r1
    2990:	1c11      	adds	r1, r2, #0
    2992:	1c02      	adds	r2, r0, #0
    2994:	430a      	orrs	r2, r1
    2996:	749a      	strb	r2, [r3, #18]
	ptr_job->b_use_out_cache_buffer = false;
    2998:	69bb      	ldr	r3, [r7, #24]
    299a:	7c9a      	ldrb	r2, [r3, #18]
    299c:	2104      	movs	r1, #4
    299e:	438a      	bics	r2, r1
    29a0:	749a      	strb	r2, [r3, #18]

	/* Initialize value to simulate a empty transfer */
	uint16_t next_trans;

	if (ep & USB_EP_DIR_IN) {
    29a2:	230f      	movs	r3, #15
    29a4:	18fb      	adds	r3, r7, r3
    29a6:	781b      	ldrb	r3, [r3, #0]
    29a8:	b25b      	sxtb	r3, r3
    29aa:	2b00      	cmp	r3, #0
    29ac:	db00      	blt.n	29b0 <udd_ep_run+0xd8>
    29ae:	e078      	b.n	2aa2 <udd_ep_run+0x1ca>
		if (0 != ptr_job->buf_size) {
    29b0:	69bb      	ldr	r3, [r7, #24]
    29b2:	689b      	ldr	r3, [r3, #8]
    29b4:	2b00      	cmp	r3, #0
    29b6:	d03f      	beq.n	2a38 <udd_ep_run+0x160>
			next_trans = ptr_job->buf_size;
    29b8:	69bb      	ldr	r3, [r7, #24]
    29ba:	689a      	ldr	r2, [r3, #8]
    29bc:	231e      	movs	r3, #30
    29be:	18fb      	adds	r3, r7, r3
    29c0:	801a      	strh	r2, [r3, #0]
			if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
    29c2:	231e      	movs	r3, #30
    29c4:	18fb      	adds	r3, r7, r3
    29c6:	881b      	ldrh	r3, [r3, #0]
    29c8:	4a76      	ldr	r2, [pc, #472]	; (2ba4 <udd_ep_run+0x2cc>)
    29ca:	4293      	cmp	r3, r2
    29cc:	d90d      	bls.n	29ea <udd_ep_run+0x112>
				next_trans = UDD_ENDPOINT_MAX_TRANS -
						(UDD_ENDPOINT_MAX_TRANS % ptr_job->ep_size);
    29ce:	69bb      	ldr	r3, [r7, #24]
    29d0:	8a1b      	ldrh	r3, [r3, #16]
    29d2:	0019      	movs	r1, r3
    29d4:	4a73      	ldr	r2, [pc, #460]	; (2ba4 <udd_ep_run+0x2cc>)
    29d6:	4b74      	ldr	r3, [pc, #464]	; (2ba8 <udd_ep_run+0x2d0>)
    29d8:	0010      	movs	r0, r2
    29da:	4798      	blx	r3
    29dc:	000b      	movs	r3, r1
				next_trans = UDD_ENDPOINT_MAX_TRANS -
    29de:	b29a      	uxth	r2, r3
    29e0:	231e      	movs	r3, #30
    29e2:	18fb      	adds	r3, r7, r3
    29e4:	496f      	ldr	r1, [pc, #444]	; (2ba4 <udd_ep_run+0x2cc>)
    29e6:	1a8a      	subs	r2, r1, r2
    29e8:	801a      	strh	r2, [r3, #0]
			}
			ptr_job->b_shortpacket = ptr_job->b_shortpacket &&
    29ea:	69bb      	ldr	r3, [r7, #24]
    29ec:	7c9b      	ldrb	r3, [r3, #18]
    29ee:	2202      	movs	r2, #2
    29f0:	4013      	ands	r3, r2
    29f2:	b2db      	uxtb	r3, r3
    29f4:	2b00      	cmp	r3, #0
    29f6:	d00d      	beq.n	2a14 <udd_ep_run+0x13c>
					(0 == (next_trans % ptr_job->ep_size));
    29f8:	69bb      	ldr	r3, [r7, #24]
    29fa:	8a19      	ldrh	r1, [r3, #16]
    29fc:	231e      	movs	r3, #30
    29fe:	18fb      	adds	r3, r7, r3
    2a00:	881a      	ldrh	r2, [r3, #0]
    2a02:	4b6a      	ldr	r3, [pc, #424]	; (2bac <udd_ep_run+0x2d4>)
    2a04:	0010      	movs	r0, r2
    2a06:	4798      	blx	r3
    2a08:	000b      	movs	r3, r1
    2a0a:	b29b      	uxth	r3, r3
			ptr_job->b_shortpacket = ptr_job->b_shortpacket &&
    2a0c:	2b00      	cmp	r3, #0
    2a0e:	d101      	bne.n	2a14 <udd_ep_run+0x13c>
    2a10:	2301      	movs	r3, #1
    2a12:	e000      	b.n	2a16 <udd_ep_run+0x13e>
    2a14:	2300      	movs	r3, #0
    2a16:	b2db      	uxtb	r3, r3
    2a18:	1c1a      	adds	r2, r3, #0
    2a1a:	2301      	movs	r3, #1
    2a1c:	4013      	ands	r3, r2
    2a1e:	b2da      	uxtb	r2, r3
    2a20:	69bb      	ldr	r3, [r7, #24]
    2a22:	2101      	movs	r1, #1
    2a24:	400a      	ands	r2, r1
    2a26:	1890      	adds	r0, r2, r2
    2a28:	7c9a      	ldrb	r2, [r3, #18]
    2a2a:	2102      	movs	r1, #2
    2a2c:	438a      	bics	r2, r1
    2a2e:	1c11      	adds	r1, r2, #0
    2a30:	1c02      	adds	r2, r0, #0
    2a32:	430a      	orrs	r2, r1
    2a34:	749a      	strb	r2, [r3, #18]
    2a36:	e023      	b.n	2a80 <udd_ep_run+0x1a8>
		} else if (true == ptr_job->b_shortpacket) {
    2a38:	69bb      	ldr	r3, [r7, #24]
    2a3a:	7c9b      	ldrb	r3, [r3, #18]
    2a3c:	2202      	movs	r2, #2
    2a3e:	4013      	ands	r3, r2
    2a40:	b2db      	uxtb	r3, r3
    2a42:	2b00      	cmp	r3, #0
    2a44:	d009      	beq.n	2a5a <udd_ep_run+0x182>
			ptr_job->b_shortpacket = false; /* avoid to send zero length packet again */
    2a46:	69bb      	ldr	r3, [r7, #24]
    2a48:	7c9a      	ldrb	r2, [r3, #18]
    2a4a:	2102      	movs	r1, #2
    2a4c:	438a      	bics	r2, r1
    2a4e:	749a      	strb	r2, [r3, #18]
			next_trans = 0;
    2a50:	231e      	movs	r3, #30
    2a52:	18fb      	adds	r3, r7, r3
    2a54:	2200      	movs	r2, #0
    2a56:	801a      	strh	r2, [r3, #0]
    2a58:	e012      	b.n	2a80 <udd_ep_run+0x1a8>
		} else {
			ptr_job->busy = false;
    2a5a:	69bb      	ldr	r3, [r7, #24]
    2a5c:	7c9a      	ldrb	r2, [r3, #18]
    2a5e:	2101      	movs	r1, #1
    2a60:	438a      	bics	r2, r1
    2a62:	749a      	strb	r2, [r3, #18]
			if (NULL != ptr_job->call_trans) {
    2a64:	69bb      	ldr	r3, [r7, #24]
    2a66:	681b      	ldr	r3, [r3, #0]
    2a68:	2b00      	cmp	r3, #0
    2a6a:	d007      	beq.n	2a7c <udd_ep_run+0x1a4>
				ptr_job->call_trans(UDD_EP_TRANSFER_OK, 0, ep);
    2a6c:	69bb      	ldr	r3, [r7, #24]
    2a6e:	681b      	ldr	r3, [r3, #0]
    2a70:	220f      	movs	r2, #15
    2a72:	18ba      	adds	r2, r7, r2
    2a74:	7812      	ldrb	r2, [r2, #0]
    2a76:	2100      	movs	r1, #0
    2a78:	2000      	movs	r0, #0
    2a7a:	4798      	blx	r3
			}
			return true;
    2a7c:	2301      	movs	r3, #1
    2a7e:	e084      	b.n	2b8a <udd_ep_run+0x2b2>
		}
		return (STATUS_OK ==
				usb_device_endpoint_write_buffer_job(&usb_device,
    2a80:	69bb      	ldr	r3, [r7, #24]
    2a82:	685a      	ldr	r2, [r3, #4]
    2a84:	231e      	movs	r3, #30
    2a86:	18fb      	adds	r3, r7, r3
    2a88:	881c      	ldrh	r4, [r3, #0]
    2a8a:	231d      	movs	r3, #29
    2a8c:	18fb      	adds	r3, r7, r3
    2a8e:	7819      	ldrb	r1, [r3, #0]
    2a90:	4847      	ldr	r0, [pc, #284]	; (2bb0 <udd_ep_run+0x2d8>)
    2a92:	0023      	movs	r3, r4
    2a94:	4c47      	ldr	r4, [pc, #284]	; (2bb4 <udd_ep_run+0x2dc>)
    2a96:	47a0      	blx	r4
    2a98:	0003      	movs	r3, r0
		return (STATUS_OK ==
    2a9a:	425a      	negs	r2, r3
    2a9c:	4153      	adcs	r3, r2
    2a9e:	b2db      	uxtb	r3, r3
    2aa0:	e073      	b.n	2b8a <udd_ep_run+0x2b2>
						ep_num,&ptr_job->buf[0],next_trans));
	} else {
		if (0 != ptr_job->buf_size) {
    2aa2:	69bb      	ldr	r3, [r7, #24]
    2aa4:	689b      	ldr	r3, [r3, #8]
    2aa6:	2b00      	cmp	r3, #0
    2aa8:	d05d      	beq.n	2b66 <udd_ep_run+0x28e>
			next_trans = ptr_job->buf_size;
    2aaa:	69bb      	ldr	r3, [r7, #24]
    2aac:	689a      	ldr	r2, [r3, #8]
    2aae:	231e      	movs	r3, #30
    2ab0:	18fb      	adds	r3, r7, r3
    2ab2:	801a      	strh	r2, [r3, #0]
			if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
    2ab4:	231e      	movs	r3, #30
    2ab6:	18fb      	adds	r3, r7, r3
    2ab8:	881b      	ldrh	r3, [r3, #0]
    2aba:	4a3a      	ldr	r2, [pc, #232]	; (2ba4 <udd_ep_run+0x2cc>)
    2abc:	4293      	cmp	r3, r2
    2abe:	d90e      	bls.n	2ade <udd_ep_run+0x206>
				/* The USB hardware support a maximum transfer size
				 * of UDD_ENDPOINT_MAX_TRANS Bytes */
				next_trans = UDD_ENDPOINT_MAX_TRANS -
						(UDD_ENDPOINT_MAX_TRANS % ptr_job->ep_size);
    2ac0:	69bb      	ldr	r3, [r7, #24]
    2ac2:	8a1b      	ldrh	r3, [r3, #16]
    2ac4:	0019      	movs	r1, r3
    2ac6:	4a37      	ldr	r2, [pc, #220]	; (2ba4 <udd_ep_run+0x2cc>)
    2ac8:	4b37      	ldr	r3, [pc, #220]	; (2ba8 <udd_ep_run+0x2d0>)
    2aca:	0010      	movs	r0, r2
    2acc:	4798      	blx	r3
    2ace:	000b      	movs	r3, r1
				next_trans = UDD_ENDPOINT_MAX_TRANS -
    2ad0:	b29a      	uxth	r2, r3
    2ad2:	231e      	movs	r3, #30
    2ad4:	18fb      	adds	r3, r7, r3
    2ad6:	4933      	ldr	r1, [pc, #204]	; (2ba4 <udd_ep_run+0x2cc>)
    2ad8:	1a8a      	subs	r2, r1, r2
    2ada:	801a      	strh	r2, [r3, #0]
    2adc:	e010      	b.n	2b00 <udd_ep_run+0x228>
			} else {
				next_trans -= next_trans % ptr_job->ep_size;
    2ade:	69bb      	ldr	r3, [r7, #24]
    2ae0:	8a19      	ldrh	r1, [r3, #16]
    2ae2:	231e      	movs	r3, #30
    2ae4:	18fb      	adds	r3, r7, r3
    2ae6:	881a      	ldrh	r2, [r3, #0]
    2ae8:	4b30      	ldr	r3, [pc, #192]	; (2bac <udd_ep_run+0x2d4>)
    2aea:	0010      	movs	r0, r2
    2aec:	4798      	blx	r3
    2aee:	000b      	movs	r3, r1
    2af0:	b29a      	uxth	r2, r3
    2af2:	231e      	movs	r3, #30
    2af4:	18fb      	adds	r3, r7, r3
    2af6:	211e      	movs	r1, #30
    2af8:	1879      	adds	r1, r7, r1
    2afa:	8809      	ldrh	r1, [r1, #0]
    2afc:	1a8a      	subs	r2, r1, r2
    2afe:	801a      	strh	r2, [r3, #0]
			}
			if (next_trans < ptr_job->ep_size) {
    2b00:	69bb      	ldr	r3, [r7, #24]
    2b02:	8a1b      	ldrh	r3, [r3, #16]
    2b04:	221e      	movs	r2, #30
    2b06:	18ba      	adds	r2, r7, r2
    2b08:	8812      	ldrh	r2, [r2, #0]
    2b0a:	429a      	cmp	r2, r3
    2b0c:	d21a      	bcs.n	2b44 <udd_ep_run+0x26c>
				ptr_job->b_use_out_cache_buffer = true;
    2b0e:	69bb      	ldr	r3, [r7, #24]
    2b10:	7c9a      	ldrb	r2, [r3, #18]
    2b12:	2104      	movs	r1, #4
    2b14:	430a      	orrs	r2, r1
    2b16:	749a      	strb	r2, [r3, #18]
				return (STATUS_OK ==
						usb_device_endpoint_read_buffer_job(&usb_device, ep_num,
								udd_ep_out_cache_buffer[ep_num - 1],
    2b18:	231d      	movs	r3, #29
    2b1a:	18fb      	adds	r3, r7, r3
    2b1c:	781b      	ldrb	r3, [r3, #0]
    2b1e:	3b01      	subs	r3, #1
    2b20:	019a      	lsls	r2, r3, #6
    2b22:	4b25      	ldr	r3, [pc, #148]	; (2bb8 <udd_ep_run+0x2e0>)
    2b24:	18d2      	adds	r2, r2, r3
								ptr_job->ep_size));
    2b26:	69bb      	ldr	r3, [r7, #24]
    2b28:	8a1b      	ldrh	r3, [r3, #16]
						usb_device_endpoint_read_buffer_job(&usb_device, ep_num,
    2b2a:	001c      	movs	r4, r3
    2b2c:	231d      	movs	r3, #29
    2b2e:	18fb      	adds	r3, r7, r3
    2b30:	7819      	ldrb	r1, [r3, #0]
    2b32:	481f      	ldr	r0, [pc, #124]	; (2bb0 <udd_ep_run+0x2d8>)
    2b34:	0023      	movs	r3, r4
    2b36:	4c21      	ldr	r4, [pc, #132]	; (2bbc <udd_ep_run+0x2e4>)
    2b38:	47a0      	blx	r4
    2b3a:	0003      	movs	r3, r0
				return (STATUS_OK ==
    2b3c:	425a      	negs	r2, r3
    2b3e:	4153      	adcs	r3, r2
    2b40:	b2db      	uxtb	r3, r3
    2b42:	e022      	b.n	2b8a <udd_ep_run+0x2b2>
			} else {
				return (STATUS_OK ==
						usb_device_endpoint_read_buffer_job(&usb_device, ep_num,
    2b44:	69bb      	ldr	r3, [r7, #24]
    2b46:	685a      	ldr	r2, [r3, #4]
    2b48:	231e      	movs	r3, #30
    2b4a:	18fb      	adds	r3, r7, r3
    2b4c:	881c      	ldrh	r4, [r3, #0]
    2b4e:	231d      	movs	r3, #29
    2b50:	18fb      	adds	r3, r7, r3
    2b52:	7819      	ldrb	r1, [r3, #0]
    2b54:	4816      	ldr	r0, [pc, #88]	; (2bb0 <udd_ep_run+0x2d8>)
    2b56:	0023      	movs	r3, r4
    2b58:	4c18      	ldr	r4, [pc, #96]	; (2bbc <udd_ep_run+0x2e4>)
    2b5a:	47a0      	blx	r4
    2b5c:	0003      	movs	r3, r0
				return (STATUS_OK ==
    2b5e:	425a      	negs	r2, r3
    2b60:	4153      	adcs	r3, r2
    2b62:	b2db      	uxtb	r3, r3
    2b64:	e011      	b.n	2b8a <udd_ep_run+0x2b2>
								&ptr_job->buf[0],next_trans));
			}
		} else {
			ptr_job->busy = false;
    2b66:	69bb      	ldr	r3, [r7, #24]
    2b68:	7c9a      	ldrb	r2, [r3, #18]
    2b6a:	2101      	movs	r1, #1
    2b6c:	438a      	bics	r2, r1
    2b6e:	749a      	strb	r2, [r3, #18]
			if (NULL != ptr_job->call_trans) {
    2b70:	69bb      	ldr	r3, [r7, #24]
    2b72:	681b      	ldr	r3, [r3, #0]
    2b74:	2b00      	cmp	r3, #0
    2b76:	d007      	beq.n	2b88 <udd_ep_run+0x2b0>
				ptr_job->call_trans(UDD_EP_TRANSFER_OK, 0, ep);
    2b78:	69bb      	ldr	r3, [r7, #24]
    2b7a:	681b      	ldr	r3, [r3, #0]
    2b7c:	220f      	movs	r2, #15
    2b7e:	18ba      	adds	r2, r7, r2
    2b80:	7812      	ldrb	r2, [r2, #0]
    2b82:	2100      	movs	r1, #0
    2b84:	2000      	movs	r0, #0
    2b86:	4798      	blx	r3
			}
			return true;
    2b88:	2301      	movs	r3, #1
		}
	}
}
    2b8a:	0018      	movs	r0, r3
    2b8c:	46bd      	mov	sp, r7
    2b8e:	b009      	add	sp, #36	; 0x24
    2b90:	bd90      	pop	{r4, r7, pc}
    2b92:	46c0      	nop			; (mov r8, r8)
    2b94:	000027a9 	.word	0x000027a9
    2b98:	00002109 	.word	0x00002109
    2b9c:	00001e95 	.word	0x00001e95
    2ba0:	00001edd 	.word	0x00001edd
    2ba4:	00001fff 	.word	0x00001fff
    2ba8:	00019fb9 	.word	0x00019fb9
    2bac:	00019de5 	.word	0x00019de5
    2bb0:	20002764 	.word	0x20002764
    2bb4:	000046dd 	.word	0x000046dd
    2bb8:	200026e4 	.word	0x200026e4
    2bbc:	00004791 	.word	0x00004791

00002bc0 <udd_set_address>:

void udd_set_address(uint8_t address)
{
    2bc0:	b580      	push	{r7, lr}
    2bc2:	b082      	sub	sp, #8
    2bc4:	af00      	add	r7, sp, #0
    2bc6:	0002      	movs	r2, r0
    2bc8:	1dfb      	adds	r3, r7, #7
    2bca:	701a      	strb	r2, [r3, #0]
	usb_device_set_address(&usb_device,address);
    2bcc:	1dfb      	adds	r3, r7, #7
    2bce:	781a      	ldrb	r2, [r3, #0]
    2bd0:	4b04      	ldr	r3, [pc, #16]	; (2be4 <udd_set_address+0x24>)
    2bd2:	0011      	movs	r1, r2
    2bd4:	0018      	movs	r0, r3
    2bd6:	4b04      	ldr	r3, [pc, #16]	; (2be8 <udd_set_address+0x28>)
    2bd8:	4798      	blx	r3
}
    2bda:	46c0      	nop			; (mov r8, r8)
    2bdc:	46bd      	mov	sp, r7
    2bde:	b002      	add	sp, #8
    2be0:	bd80      	pop	{r7, pc}
    2be2:	46c0      	nop			; (mov r8, r8)
    2be4:	20002764 	.word	0x20002764
    2be8:	00001f4d 	.word	0x00001f4d

00002bec <udd_getaddress>:

uint8_t udd_getaddress(void)
{
    2bec:	b580      	push	{r7, lr}
    2bee:	af00      	add	r7, sp, #0
	return usb_device_get_address(&usb_device);
    2bf0:	4b03      	ldr	r3, [pc, #12]	; (2c00 <udd_getaddress+0x14>)
    2bf2:	0018      	movs	r0, r3
    2bf4:	4b03      	ldr	r3, [pc, #12]	; (2c04 <udd_getaddress+0x18>)
    2bf6:	4798      	blx	r3
    2bf8:	0003      	movs	r3, r0
}
    2bfa:	0018      	movs	r0, r3
    2bfc:	46bd      	mov	sp, r7
    2bfe:	bd80      	pop	{r7, pc}
    2c00:	20002764 	.word	0x20002764
    2c04:	00001f31 	.word	0x00001f31

00002c08 <udd_set_setup_payload>:
		usb_device_send_remote_wake_up(&usb_device);
	}
}

void udd_set_setup_payload( uint8_t *payload, uint16_t payload_size )
{
    2c08:	b580      	push	{r7, lr}
    2c0a:	b082      	sub	sp, #8
    2c0c:	af00      	add	r7, sp, #0
    2c0e:	6078      	str	r0, [r7, #4]
    2c10:	000a      	movs	r2, r1
    2c12:	1cbb      	adds	r3, r7, #2
    2c14:	801a      	strh	r2, [r3, #0]
	udd_g_ctrlreq.payload = payload;
    2c16:	4b05      	ldr	r3, [pc, #20]	; (2c2c <udd_set_setup_payload+0x24>)
    2c18:	687a      	ldr	r2, [r7, #4]
    2c1a:	609a      	str	r2, [r3, #8]
	udd_g_ctrlreq.payload_size = payload_size;
    2c1c:	4b03      	ldr	r3, [pc, #12]	; (2c2c <udd_set_setup_payload+0x24>)
    2c1e:	1cba      	adds	r2, r7, #2
    2c20:	8812      	ldrh	r2, [r2, #0]
    2c22:	819a      	strh	r2, [r3, #12]
}
    2c24:	46c0      	nop			; (mov r8, r8)
    2c26:	46bd      	mov	sp, r7
    2c28:	b002      	add	sp, #8
    2c2a:	bd80      	pop	{r7, pc}
    2c2c:	200028cc 	.word	0x200028cc

00002c30 <udd_ctrl_fetch_ram>:

/**
 * \brief Control Endpoint translate the data in buffer into Device Request Struct
 */
static void udd_ctrl_fetch_ram(void)
{
    2c30:	b580      	push	{r7, lr}
    2c32:	af00      	add	r7, sp, #0
	udd_g_ctrlreq.req.bmRequestType = udd_ctrl_buffer[0];
    2c34:	4b17      	ldr	r3, [pc, #92]	; (2c94 <udd_ctrl_fetch_ram+0x64>)
    2c36:	781a      	ldrb	r2, [r3, #0]
    2c38:	4b17      	ldr	r3, [pc, #92]	; (2c98 <udd_ctrl_fetch_ram+0x68>)
    2c3a:	701a      	strb	r2, [r3, #0]
	udd_g_ctrlreq.req.bRequest = udd_ctrl_buffer[1];
    2c3c:	4b15      	ldr	r3, [pc, #84]	; (2c94 <udd_ctrl_fetch_ram+0x64>)
    2c3e:	785a      	ldrb	r2, [r3, #1]
    2c40:	4b15      	ldr	r3, [pc, #84]	; (2c98 <udd_ctrl_fetch_ram+0x68>)
    2c42:	705a      	strb	r2, [r3, #1]
	udd_g_ctrlreq.req.wValue = ((uint16_t)(udd_ctrl_buffer[3]) << 8) + udd_ctrl_buffer[2];
    2c44:	4b13      	ldr	r3, [pc, #76]	; (2c94 <udd_ctrl_fetch_ram+0x64>)
    2c46:	78db      	ldrb	r3, [r3, #3]
    2c48:	b29b      	uxth	r3, r3
    2c4a:	021b      	lsls	r3, r3, #8
    2c4c:	b29a      	uxth	r2, r3
    2c4e:	4b11      	ldr	r3, [pc, #68]	; (2c94 <udd_ctrl_fetch_ram+0x64>)
    2c50:	789b      	ldrb	r3, [r3, #2]
    2c52:	b29b      	uxth	r3, r3
    2c54:	18d3      	adds	r3, r2, r3
    2c56:	b29a      	uxth	r2, r3
    2c58:	4b0f      	ldr	r3, [pc, #60]	; (2c98 <udd_ctrl_fetch_ram+0x68>)
    2c5a:	805a      	strh	r2, [r3, #2]
	udd_g_ctrlreq.req.wIndex = ((uint16_t)(udd_ctrl_buffer[5]) << 8) + udd_ctrl_buffer[4];
    2c5c:	4b0d      	ldr	r3, [pc, #52]	; (2c94 <udd_ctrl_fetch_ram+0x64>)
    2c5e:	795b      	ldrb	r3, [r3, #5]
    2c60:	b29b      	uxth	r3, r3
    2c62:	021b      	lsls	r3, r3, #8
    2c64:	b29a      	uxth	r2, r3
    2c66:	4b0b      	ldr	r3, [pc, #44]	; (2c94 <udd_ctrl_fetch_ram+0x64>)
    2c68:	791b      	ldrb	r3, [r3, #4]
    2c6a:	b29b      	uxth	r3, r3
    2c6c:	18d3      	adds	r3, r2, r3
    2c6e:	b29a      	uxth	r2, r3
    2c70:	4b09      	ldr	r3, [pc, #36]	; (2c98 <udd_ctrl_fetch_ram+0x68>)
    2c72:	809a      	strh	r2, [r3, #4]
	udd_g_ctrlreq.req.wLength = ((uint16_t)(udd_ctrl_buffer[7]) << 8) + udd_ctrl_buffer[6];
    2c74:	4b07      	ldr	r3, [pc, #28]	; (2c94 <udd_ctrl_fetch_ram+0x64>)
    2c76:	79db      	ldrb	r3, [r3, #7]
    2c78:	b29b      	uxth	r3, r3
    2c7a:	021b      	lsls	r3, r3, #8
    2c7c:	b29a      	uxth	r2, r3
    2c7e:	4b05      	ldr	r3, [pc, #20]	; (2c94 <udd_ctrl_fetch_ram+0x64>)
    2c80:	799b      	ldrb	r3, [r3, #6]
    2c82:	b29b      	uxth	r3, r3
    2c84:	18d3      	adds	r3, r2, r3
    2c86:	b29a      	uxth	r2, r3
    2c88:	4b03      	ldr	r3, [pc, #12]	; (2c98 <udd_ctrl_fetch_ram+0x68>)
    2c8a:	80da      	strh	r2, [r3, #6]
}
    2c8c:	46c0      	nop			; (mov r8, r8)
    2c8e:	46bd      	mov	sp, r7
    2c90:	bd80      	pop	{r7, pc}
    2c92:	46c0      	nop			; (mov r8, r8)
    2c94:	200028e4 	.word	0x200028e4
    2c98:	200028cc 	.word	0x200028cc

00002c9c <udd_ctrl_send_zlp_in>:

/**
 * \brief Control Endpoint send out zero length packet
 */
static void udd_ctrl_send_zlp_in(void)
{
    2c9c:	b5b0      	push	{r4, r5, r7, lr}
    2c9e:	af00      	add	r7, sp, #0
	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP;
    2ca0:	4b09      	ldr	r3, [pc, #36]	; (2cc8 <udd_ctrl_send_zlp_in+0x2c>)
    2ca2:	2203      	movs	r2, #3
    2ca4:	701a      	strb	r2, [r3, #0]
	usb_device_endpoint_setup_buffer_job(&usb_device,udd_ctrl_buffer);
    2ca6:	4a09      	ldr	r2, [pc, #36]	; (2ccc <udd_ctrl_send_zlp_in+0x30>)
    2ca8:	4b09      	ldr	r3, [pc, #36]	; (2cd0 <udd_ctrl_send_zlp_in+0x34>)
    2caa:	0011      	movs	r1, r2
    2cac:	0018      	movs	r0, r3
    2cae:	4b09      	ldr	r3, [pc, #36]	; (2cd4 <udd_ctrl_send_zlp_in+0x38>)
    2cb0:	4798      	blx	r3
	usb_device_endpoint_write_buffer_job(&usb_device,0,udd_g_ctrlreq.payload,0);
    2cb2:	4b09      	ldr	r3, [pc, #36]	; (2cd8 <udd_ctrl_send_zlp_in+0x3c>)
    2cb4:	689a      	ldr	r2, [r3, #8]
    2cb6:	4806      	ldr	r0, [pc, #24]	; (2cd0 <udd_ctrl_send_zlp_in+0x34>)
    2cb8:	2300      	movs	r3, #0
    2cba:	2100      	movs	r1, #0
    2cbc:	4c07      	ldr	r4, [pc, #28]	; (2cdc <udd_ctrl_send_zlp_in+0x40>)
    2cbe:	47a0      	blx	r4
}
    2cc0:	46c0      	nop			; (mov r8, r8)
    2cc2:	46bd      	mov	sp, r7
    2cc4:	bdb0      	pop	{r4, r5, r7, pc}
    2cc6:	46c0      	nop			; (mov r8, r8)
    2cc8:	200004c6 	.word	0x200004c6
    2ccc:	200028e4 	.word	0x200028e4
    2cd0:	20002764 	.word	0x20002764
    2cd4:	00004841 	.word	0x00004841
    2cd8:	200028cc 	.word	0x200028cc
    2cdc:	000046dd 	.word	0x000046dd

00002ce0 <udd_ctrl_in_sent>:

/**
 * \brief Process control endpoint IN transaction
 */
static void udd_ctrl_in_sent(void)
{
    2ce0:	b590      	push	{r4, r7, lr}
    2ce2:	b083      	sub	sp, #12
    2ce4:	af00      	add	r7, sp, #0
	static bool b_shortpacket = false;
	uint16_t nb_remain;

	nb_remain = udd_g_ctrlreq.payload_size - udd_ctrl_payload_nb_trans;
    2ce6:	4b30      	ldr	r3, [pc, #192]	; (2da8 <udd_ctrl_in_sent+0xc8>)
    2ce8:	8999      	ldrh	r1, [r3, #12]
    2cea:	4b30      	ldr	r3, [pc, #192]	; (2dac <udd_ctrl_in_sent+0xcc>)
    2cec:	881a      	ldrh	r2, [r3, #0]
    2cee:	1dbb      	adds	r3, r7, #6
    2cf0:	1a8a      	subs	r2, r1, r2
    2cf2:	801a      	strh	r2, [r3, #0]

	if (0 == nb_remain) {
    2cf4:	1dbb      	adds	r3, r7, #6
    2cf6:	881b      	ldrh	r3, [r3, #0]
    2cf8:	2b00      	cmp	r3, #0
    2cfa:	d130      	bne.n	2d5e <udd_ctrl_in_sent+0x7e>
		/* All content of current buffer payload are sent Update number of total data sending by previous payload buffer */
		udd_ctrl_prev_payload_nb_trans += udd_ctrl_payload_nb_trans;
    2cfc:	4b2c      	ldr	r3, [pc, #176]	; (2db0 <udd_ctrl_in_sent+0xd0>)
    2cfe:	881a      	ldrh	r2, [r3, #0]
    2d00:	4b2a      	ldr	r3, [pc, #168]	; (2dac <udd_ctrl_in_sent+0xcc>)
    2d02:	881b      	ldrh	r3, [r3, #0]
    2d04:	18d3      	adds	r3, r2, r3
    2d06:	b29a      	uxth	r2, r3
    2d08:	4b29      	ldr	r3, [pc, #164]	; (2db0 <udd_ctrl_in_sent+0xd0>)
    2d0a:	801a      	strh	r2, [r3, #0]
		if ((udd_g_ctrlreq.req.wLength == udd_ctrl_prev_payload_nb_trans) || b_shortpacket) {
    2d0c:	4b26      	ldr	r3, [pc, #152]	; (2da8 <udd_ctrl_in_sent+0xc8>)
    2d0e:	88da      	ldrh	r2, [r3, #6]
    2d10:	4b27      	ldr	r3, [pc, #156]	; (2db0 <udd_ctrl_in_sent+0xd0>)
    2d12:	881b      	ldrh	r3, [r3, #0]
    2d14:	429a      	cmp	r2, r3
    2d16:	d003      	beq.n	2d20 <udd_ctrl_in_sent+0x40>
    2d18:	4b26      	ldr	r3, [pc, #152]	; (2db4 <udd_ctrl_in_sent+0xd4>)
    2d1a:	781b      	ldrb	r3, [r3, #0]
    2d1c:	2b00      	cmp	r3, #0
    2d1e:	d009      	beq.n	2d34 <udd_ctrl_in_sent+0x54>
			/* All data requested are transferred or a short packet has been sent, then it is the end of data phase.
			 * Generate an OUT ZLP for handshake phase */
			udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
    2d20:	4b25      	ldr	r3, [pc, #148]	; (2db8 <udd_ctrl_in_sent+0xd8>)
    2d22:	2204      	movs	r2, #4
    2d24:	701a      	strb	r2, [r3, #0]
			usb_device_endpoint_setup_buffer_job(&usb_device,udd_ctrl_buffer);
    2d26:	4a25      	ldr	r2, [pc, #148]	; (2dbc <udd_ctrl_in_sent+0xdc>)
    2d28:	4b25      	ldr	r3, [pc, #148]	; (2dc0 <udd_ctrl_in_sent+0xe0>)
    2d2a:	0011      	movs	r1, r2
    2d2c:	0018      	movs	r0, r3
    2d2e:	4b25      	ldr	r3, [pc, #148]	; (2dc4 <udd_ctrl_in_sent+0xe4>)
    2d30:	4798      	blx	r3
			return;
    2d32:	e035      	b.n	2da0 <udd_ctrl_in_sent+0xc0>
		}
		/* Need of new buffer because the data phase is not complete */
		if ((!udd_g_ctrlreq.over_under_run) || (!udd_g_ctrlreq.over_under_run())) {
    2d34:	4b1c      	ldr	r3, [pc, #112]	; (2da8 <udd_ctrl_in_sent+0xc8>)
    2d36:	695b      	ldr	r3, [r3, #20]
    2d38:	2b00      	cmp	r3, #0
    2d3a:	d010      	beq.n	2d5e <udd_ctrl_in_sent+0x7e>
    2d3c:	4b1a      	ldr	r3, [pc, #104]	; (2da8 <udd_ctrl_in_sent+0xc8>)
    2d3e:	695b      	ldr	r3, [r3, #20]
    2d40:	4798      	blx	r3
    2d42:	0003      	movs	r3, r0
    2d44:	001a      	movs	r2, r3
    2d46:	2301      	movs	r3, #1
    2d48:	4053      	eors	r3, r2
    2d4a:	b2db      	uxtb	r3, r3
    2d4c:	2b00      	cmp	r3, #0
    2d4e:	d106      	bne.n	2d5e <udd_ctrl_in_sent+0x7e>
			/* Under run then send zlp on IN
			 * Here nb_remain=0, this allows to send a IN ZLP */
		} else {
			/* A new payload buffer is given */
			udd_ctrl_payload_nb_trans = 0;
    2d50:	4b16      	ldr	r3, [pc, #88]	; (2dac <udd_ctrl_in_sent+0xcc>)
    2d52:	2200      	movs	r2, #0
    2d54:	801a      	strh	r2, [r3, #0]
			nb_remain = udd_g_ctrlreq.payload_size;
    2d56:	1dbb      	adds	r3, r7, #6
    2d58:	4a13      	ldr	r2, [pc, #76]	; (2da8 <udd_ctrl_in_sent+0xc8>)
    2d5a:	8992      	ldrh	r2, [r2, #12]
    2d5c:	801a      	strh	r2, [r3, #0]
		}
	}

	/* Continue transfer and send next data */
	if (nb_remain >= USB_DEVICE_EP_CTRL_SIZE) {
    2d5e:	1dbb      	adds	r3, r7, #6
    2d60:	881b      	ldrh	r3, [r3, #0]
    2d62:	2b07      	cmp	r3, #7
    2d64:	d906      	bls.n	2d74 <udd_ctrl_in_sent+0x94>
		nb_remain = USB_DEVICE_EP_CTRL_SIZE;
    2d66:	1dbb      	adds	r3, r7, #6
    2d68:	2208      	movs	r2, #8
    2d6a:	801a      	strh	r2, [r3, #0]
		b_shortpacket = false;
    2d6c:	4b11      	ldr	r3, [pc, #68]	; (2db4 <udd_ctrl_in_sent+0xd4>)
    2d6e:	2200      	movs	r2, #0
    2d70:	701a      	strb	r2, [r3, #0]
    2d72:	e002      	b.n	2d7a <udd_ctrl_in_sent+0x9a>
	} else {
		b_shortpacket = true;
    2d74:	4b0f      	ldr	r3, [pc, #60]	; (2db4 <udd_ctrl_in_sent+0xd4>)
    2d76:	2201      	movs	r2, #1
    2d78:	701a      	strb	r2, [r3, #0]
	}

	/* Link payload buffer directly on USB hardware */
	usb_device_endpoint_write_buffer_job(&usb_device,0,udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans,nb_remain);
    2d7a:	4b0b      	ldr	r3, [pc, #44]	; (2da8 <udd_ctrl_in_sent+0xc8>)
    2d7c:	689b      	ldr	r3, [r3, #8]
    2d7e:	4a0b      	ldr	r2, [pc, #44]	; (2dac <udd_ctrl_in_sent+0xcc>)
    2d80:	8812      	ldrh	r2, [r2, #0]
    2d82:	189a      	adds	r2, r3, r2
    2d84:	1dbb      	adds	r3, r7, #6
    2d86:	881b      	ldrh	r3, [r3, #0]
    2d88:	480d      	ldr	r0, [pc, #52]	; (2dc0 <udd_ctrl_in_sent+0xe0>)
    2d8a:	2100      	movs	r1, #0
    2d8c:	4c0e      	ldr	r4, [pc, #56]	; (2dc8 <udd_ctrl_in_sent+0xe8>)
    2d8e:	47a0      	blx	r4

	udd_ctrl_payload_nb_trans += nb_remain;
    2d90:	4b06      	ldr	r3, [pc, #24]	; (2dac <udd_ctrl_in_sent+0xcc>)
    2d92:	881a      	ldrh	r2, [r3, #0]
    2d94:	1dbb      	adds	r3, r7, #6
    2d96:	881b      	ldrh	r3, [r3, #0]
    2d98:	18d3      	adds	r3, r2, r3
    2d9a:	b29a      	uxth	r2, r3
    2d9c:	4b03      	ldr	r3, [pc, #12]	; (2dac <udd_ctrl_in_sent+0xcc>)
    2d9e:	801a      	strh	r2, [r3, #0]
}
    2da0:	46bd      	mov	sp, r7
    2da2:	b003      	add	sp, #12
    2da4:	bd90      	pop	{r4, r7, pc}
    2da6:	46c0      	nop			; (mov r8, r8)
    2da8:	200028cc 	.word	0x200028cc
    2dac:	200004ca 	.word	0x200004ca
    2db0:	200004c8 	.word	0x200004c8
    2db4:	2000051d 	.word	0x2000051d
    2db8:	200004c6 	.word	0x200004c6
    2dbc:	200028e4 	.word	0x200028e4
    2dc0:	20002764 	.word	0x20002764
    2dc4:	00004841 	.word	0x00004841
    2dc8:	000046dd 	.word	0x000046dd

00002dcc <udd_ctrl_out_received>:
/**
 * \brief Process control endpoint OUT transaction
 * \param[in] pointer Pointer to the endpoint transfer status parameter struct from driver layer.
 */
static void udd_ctrl_out_received(void* pointer)
{
    2dcc:	b590      	push	{r4, r7, lr}
    2dce:	b085      	sub	sp, #20
    2dd0:	af00      	add	r7, sp, #0
    2dd2:	6078      	str	r0, [r7, #4]
	struct usb_endpoint_callback_parameter *ep_callback_para = (struct usb_endpoint_callback_parameter*)pointer;
    2dd4:	687b      	ldr	r3, [r7, #4]
    2dd6:	60bb      	str	r3, [r7, #8]

	uint16_t nb_data;
	nb_data = ep_callback_para->received_bytes; /* Read data received during OUT phase */
    2dd8:	230e      	movs	r3, #14
    2dda:	18fb      	adds	r3, r7, r3
    2ddc:	68ba      	ldr	r2, [r7, #8]
    2dde:	8812      	ldrh	r2, [r2, #0]
    2de0:	801a      	strh	r2, [r3, #0]

	if (udd_g_ctrlreq.payload_size < (udd_ctrl_payload_nb_trans + nb_data)) {
    2de2:	4b45      	ldr	r3, [pc, #276]	; (2ef8 <udd_ctrl_out_received+0x12c>)
    2de4:	899b      	ldrh	r3, [r3, #12]
    2de6:	001a      	movs	r2, r3
    2de8:	4b44      	ldr	r3, [pc, #272]	; (2efc <udd_ctrl_out_received+0x130>)
    2dea:	881b      	ldrh	r3, [r3, #0]
    2dec:	0019      	movs	r1, r3
    2dee:	230e      	movs	r3, #14
    2df0:	18fb      	adds	r3, r7, r3
    2df2:	881b      	ldrh	r3, [r3, #0]
    2df4:	18cb      	adds	r3, r1, r3
    2df6:	429a      	cmp	r2, r3
    2df8:	da07      	bge.n	2e0a <udd_ctrl_out_received+0x3e>
		/* Payload buffer too small */
		nb_data = udd_g_ctrlreq.payload_size - udd_ctrl_payload_nb_trans;
    2dfa:	4b3f      	ldr	r3, [pc, #252]	; (2ef8 <udd_ctrl_out_received+0x12c>)
    2dfc:	8999      	ldrh	r1, [r3, #12]
    2dfe:	4b3f      	ldr	r3, [pc, #252]	; (2efc <udd_ctrl_out_received+0x130>)
    2e00:	881a      	ldrh	r2, [r3, #0]
    2e02:	230e      	movs	r3, #14
    2e04:	18fb      	adds	r3, r7, r3
    2e06:	1a8a      	subs	r2, r1, r2
    2e08:	801a      	strh	r2, [r3, #0]
	}

	memcpy((uint8_t *) (udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans), udd_ctrl_buffer, nb_data);
    2e0a:	4b3b      	ldr	r3, [pc, #236]	; (2ef8 <udd_ctrl_out_received+0x12c>)
    2e0c:	689b      	ldr	r3, [r3, #8]
    2e0e:	4a3b      	ldr	r2, [pc, #236]	; (2efc <udd_ctrl_out_received+0x130>)
    2e10:	8812      	ldrh	r2, [r2, #0]
    2e12:	1898      	adds	r0, r3, r2
    2e14:	230e      	movs	r3, #14
    2e16:	18fb      	adds	r3, r7, r3
    2e18:	881a      	ldrh	r2, [r3, #0]
    2e1a:	4b39      	ldr	r3, [pc, #228]	; (2f00 <udd_ctrl_out_received+0x134>)
    2e1c:	0019      	movs	r1, r3
    2e1e:	4b39      	ldr	r3, [pc, #228]	; (2f04 <udd_ctrl_out_received+0x138>)
    2e20:	4798      	blx	r3
	udd_ctrl_payload_nb_trans += nb_data;
    2e22:	4b36      	ldr	r3, [pc, #216]	; (2efc <udd_ctrl_out_received+0x130>)
    2e24:	881a      	ldrh	r2, [r3, #0]
    2e26:	230e      	movs	r3, #14
    2e28:	18fb      	adds	r3, r7, r3
    2e2a:	881b      	ldrh	r3, [r3, #0]
    2e2c:	18d3      	adds	r3, r2, r3
    2e2e:	b29a      	uxth	r2, r3
    2e30:	4b32      	ldr	r3, [pc, #200]	; (2efc <udd_ctrl_out_received+0x130>)
    2e32:	801a      	strh	r2, [r3, #0]

	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data) || \
    2e34:	230e      	movs	r3, #14
    2e36:	18fb      	adds	r3, r7, r3
    2e38:	881b      	ldrh	r3, [r3, #0]
    2e3a:	2b08      	cmp	r3, #8
    2e3c:	d10a      	bne.n	2e54 <udd_ctrl_out_received+0x88>
	(udd_g_ctrlreq.req.wLength <= (udd_ctrl_prev_payload_nb_trans + udd_ctrl_payload_nb_trans))) {
    2e3e:	4b2e      	ldr	r3, [pc, #184]	; (2ef8 <udd_ctrl_out_received+0x12c>)
    2e40:	88db      	ldrh	r3, [r3, #6]
    2e42:	001a      	movs	r2, r3
    2e44:	4b30      	ldr	r3, [pc, #192]	; (2f08 <udd_ctrl_out_received+0x13c>)
    2e46:	881b      	ldrh	r3, [r3, #0]
    2e48:	0019      	movs	r1, r3
    2e4a:	4b2c      	ldr	r3, [pc, #176]	; (2efc <udd_ctrl_out_received+0x130>)
    2e4c:	881b      	ldrh	r3, [r3, #0]
    2e4e:	18cb      	adds	r3, r1, r3
	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data) || \
    2e50:	429a      	cmp	r2, r3
    2e52:	dc1b      	bgt.n	2e8c <udd_ctrl_out_received+0xc0>
		/* End of reception because it is a short packet
		 * or all data are transferred */

		/* Before send ZLP, call intermediate callback
		 * in case of data receive generate a stall */
		udd_g_ctrlreq.payload_size = udd_ctrl_payload_nb_trans;
    2e54:	4b29      	ldr	r3, [pc, #164]	; (2efc <udd_ctrl_out_received+0x130>)
    2e56:	881a      	ldrh	r2, [r3, #0]
    2e58:	4b27      	ldr	r3, [pc, #156]	; (2ef8 <udd_ctrl_out_received+0x12c>)
    2e5a:	819a      	strh	r2, [r3, #12]
		if (NULL != udd_g_ctrlreq.over_under_run) {
    2e5c:	4b26      	ldr	r3, [pc, #152]	; (2ef8 <udd_ctrl_out_received+0x12c>)
    2e5e:	695b      	ldr	r3, [r3, #20]
    2e60:	2b00      	cmp	r3, #0
    2e62:	d010      	beq.n	2e86 <udd_ctrl_out_received+0xba>
			if (!udd_g_ctrlreq.over_under_run()) {
    2e64:	4b24      	ldr	r3, [pc, #144]	; (2ef8 <udd_ctrl_out_received+0x12c>)
    2e66:	695b      	ldr	r3, [r3, #20]
    2e68:	4798      	blx	r3
    2e6a:	0003      	movs	r3, r0
    2e6c:	001a      	movs	r2, r3
    2e6e:	2301      	movs	r3, #1
    2e70:	4053      	eors	r3, r2
    2e72:	b2db      	uxtb	r3, r3
    2e74:	2b00      	cmp	r3, #0
    2e76:	d006      	beq.n	2e86 <udd_ctrl_out_received+0xba>
				/* Stall ZLP */
				udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
    2e78:	4b24      	ldr	r3, [pc, #144]	; (2f0c <udd_ctrl_out_received+0x140>)
    2e7a:	2205      	movs	r2, #5
    2e7c:	701a      	strb	r2, [r3, #0]
				/* Stall all packets on IN & OUT control endpoint */
				udd_ep_set_halt(0);
    2e7e:	2000      	movs	r0, #0
    2e80:	4b23      	ldr	r3, [pc, #140]	; (2f10 <udd_ctrl_out_received+0x144>)
    2e82:	4798      	blx	r3
				/* Ack reception of OUT to replace NAK by a STALL */
				return;
    2e84:	e035      	b.n	2ef2 <udd_ctrl_out_received+0x126>
			}
		}
		/* Send IN ZLP to ACK setup request */
		udd_ctrl_send_zlp_in();
    2e86:	4b23      	ldr	r3, [pc, #140]	; (2f14 <udd_ctrl_out_received+0x148>)
    2e88:	4798      	blx	r3
		return;
    2e8a:	e032      	b.n	2ef2 <udd_ctrl_out_received+0x126>
	}

	if (udd_g_ctrlreq.payload_size == udd_ctrl_payload_nb_trans) {
    2e8c:	4b1a      	ldr	r3, [pc, #104]	; (2ef8 <udd_ctrl_out_received+0x12c>)
    2e8e:	899a      	ldrh	r2, [r3, #12]
    2e90:	4b1a      	ldr	r3, [pc, #104]	; (2efc <udd_ctrl_out_received+0x130>)
    2e92:	881b      	ldrh	r3, [r3, #0]
    2e94:	429a      	cmp	r2, r3
    2e96:	d126      	bne.n	2ee6 <udd_ctrl_out_received+0x11a>
		/* Overrun then request a new payload buffer */
		if (!udd_g_ctrlreq.over_under_run) {
    2e98:	4b17      	ldr	r3, [pc, #92]	; (2ef8 <udd_ctrl_out_received+0x12c>)
    2e9a:	695b      	ldr	r3, [r3, #20]
    2e9c:	2b00      	cmp	r3, #0
    2e9e:	d106      	bne.n	2eae <udd_ctrl_out_received+0xe2>
			/* No callback available to request a new payload buffer
			 * Stall ZLP */
			udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
    2ea0:	4b1a      	ldr	r3, [pc, #104]	; (2f0c <udd_ctrl_out_received+0x140>)
    2ea2:	2205      	movs	r2, #5
    2ea4:	701a      	strb	r2, [r3, #0]
			/* Stall all packets on IN & OUT control endpoint */
			udd_ep_set_halt(0);
    2ea6:	2000      	movs	r0, #0
    2ea8:	4b19      	ldr	r3, [pc, #100]	; (2f10 <udd_ctrl_out_received+0x144>)
    2eaa:	4798      	blx	r3
			return;
    2eac:	e021      	b.n	2ef2 <udd_ctrl_out_received+0x126>
		}
		if (!udd_g_ctrlreq.over_under_run()) {
    2eae:	4b12      	ldr	r3, [pc, #72]	; (2ef8 <udd_ctrl_out_received+0x12c>)
    2eb0:	695b      	ldr	r3, [r3, #20]
    2eb2:	4798      	blx	r3
    2eb4:	0003      	movs	r3, r0
    2eb6:	001a      	movs	r2, r3
    2eb8:	2301      	movs	r3, #1
    2eba:	4053      	eors	r3, r2
    2ebc:	b2db      	uxtb	r3, r3
    2ebe:	2b00      	cmp	r3, #0
    2ec0:	d006      	beq.n	2ed0 <udd_ctrl_out_received+0x104>
			/* No new payload buffer delivered
			 * Stall ZLP */
			udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
    2ec2:	4b12      	ldr	r3, [pc, #72]	; (2f0c <udd_ctrl_out_received+0x140>)
    2ec4:	2205      	movs	r2, #5
    2ec6:	701a      	strb	r2, [r3, #0]
			/* Stall all packets on IN & OUT control endpoint */
			udd_ep_set_halt(0);
    2ec8:	2000      	movs	r0, #0
    2eca:	4b11      	ldr	r3, [pc, #68]	; (2f10 <udd_ctrl_out_received+0x144>)
    2ecc:	4798      	blx	r3
			return;
    2ece:	e010      	b.n	2ef2 <udd_ctrl_out_received+0x126>
		}
		/* New payload buffer available
		 * Update number of total data received */
		udd_ctrl_prev_payload_nb_trans += udd_ctrl_payload_nb_trans;
    2ed0:	4b0d      	ldr	r3, [pc, #52]	; (2f08 <udd_ctrl_out_received+0x13c>)
    2ed2:	881a      	ldrh	r2, [r3, #0]
    2ed4:	4b09      	ldr	r3, [pc, #36]	; (2efc <udd_ctrl_out_received+0x130>)
    2ed6:	881b      	ldrh	r3, [r3, #0]
    2ed8:	18d3      	adds	r3, r2, r3
    2eda:	b29a      	uxth	r2, r3
    2edc:	4b0a      	ldr	r3, [pc, #40]	; (2f08 <udd_ctrl_out_received+0x13c>)
    2ede:	801a      	strh	r2, [r3, #0]

		/* Reinitialize reception on payload buffer */
		udd_ctrl_payload_nb_trans = 0;
    2ee0:	4b06      	ldr	r3, [pc, #24]	; (2efc <udd_ctrl_out_received+0x130>)
    2ee2:	2200      	movs	r2, #0
    2ee4:	801a      	strh	r2, [r3, #0]
	}
	usb_device_endpoint_read_buffer_job(&usb_device,0,udd_ctrl_buffer,USB_DEVICE_EP_CTRL_SIZE);
    2ee6:	4a06      	ldr	r2, [pc, #24]	; (2f00 <udd_ctrl_out_received+0x134>)
    2ee8:	480b      	ldr	r0, [pc, #44]	; (2f18 <udd_ctrl_out_received+0x14c>)
    2eea:	2308      	movs	r3, #8
    2eec:	2100      	movs	r1, #0
    2eee:	4c0b      	ldr	r4, [pc, #44]	; (2f1c <udd_ctrl_out_received+0x150>)
    2ef0:	47a0      	blx	r4
}
    2ef2:	46bd      	mov	sp, r7
    2ef4:	b005      	add	sp, #20
    2ef6:	bd90      	pop	{r4, r7, pc}
    2ef8:	200028cc 	.word	0x200028cc
    2efc:	200004ca 	.word	0x200004ca
    2f00:	200028e4 	.word	0x200028e4
    2f04:	0001c13d 	.word	0x0001c13d
    2f08:	200004c8 	.word	0x200004c8
    2f0c:	200004c6 	.word	0x200004c6
    2f10:	000027d5 	.word	0x000027d5
    2f14:	00002c9d 	.word	0x00002c9d
    2f18:	20002764 	.word	0x20002764
    2f1c:	00004791 	.word	0x00004791

00002f20 <_usb_ep0_on_setup>:
 * \brief     Endpoint 0 (control) SETUP received callback
 * \param[in] module_inst pointer to USB module instance
 * \param[in] pointer Pointer to the endpoint transfer status parameter struct from driver layer.
 */
static void _usb_ep0_on_setup(struct usb_module *module_inst, void* pointer)
{
    2f20:	b590      	push	{r4, r7, lr}
    2f22:	b085      	sub	sp, #20
    2f24:	af00      	add	r7, sp, #0
    2f26:	6078      	str	r0, [r7, #4]
    2f28:	6039      	str	r1, [r7, #0]
	struct usb_endpoint_callback_parameter *ep_callback_para = (struct usb_endpoint_callback_parameter*)pointer;
    2f2a:	683b      	ldr	r3, [r7, #0]
    2f2c:	60fb      	str	r3, [r7, #12]

	if (UDD_EPCTRL_SETUP != udd_ep_control_state) {
    2f2e:	4b29      	ldr	r3, [pc, #164]	; (2fd4 <_usb_ep0_on_setup+0xb4>)
    2f30:	781b      	ldrb	r3, [r3, #0]
    2f32:	2b00      	cmp	r3, #0
    2f34:	d009      	beq.n	2f4a <_usb_ep0_on_setup+0x2a>
		if (NULL != udd_g_ctrlreq.callback) {
    2f36:	4b28      	ldr	r3, [pc, #160]	; (2fd8 <_usb_ep0_on_setup+0xb8>)
    2f38:	691b      	ldr	r3, [r3, #16]
    2f3a:	2b00      	cmp	r3, #0
    2f3c:	d002      	beq.n	2f44 <_usb_ep0_on_setup+0x24>
			udd_g_ctrlreq.callback();
    2f3e:	4b26      	ldr	r3, [pc, #152]	; (2fd8 <_usb_ep0_on_setup+0xb8>)
    2f40:	691b      	ldr	r3, [r3, #16]
    2f42:	4798      	blx	r3
		}
		udd_ep_control_state = UDD_EPCTRL_SETUP;
    2f44:	4b23      	ldr	r3, [pc, #140]	; (2fd4 <_usb_ep0_on_setup+0xb4>)
    2f46:	2200      	movs	r2, #0
    2f48:	701a      	strb	r2, [r3, #0]
	}
	if ( 8 != ep_callback_para->received_bytes) {
    2f4a:	68fb      	ldr	r3, [r7, #12]
    2f4c:	881b      	ldrh	r3, [r3, #0]
    2f4e:	2b08      	cmp	r3, #8
    2f50:	d002      	beq.n	2f58 <_usb_ep0_on_setup+0x38>
		udd_ctrl_stall_data();
    2f52:	4b22      	ldr	r3, [pc, #136]	; (2fdc <_usb_ep0_on_setup+0xbc>)
    2f54:	4798      	blx	r3
		return;
    2f56:	e03a      	b.n	2fce <_usb_ep0_on_setup+0xae>
	} else {
		udd_ctrl_fetch_ram();
    2f58:	4b21      	ldr	r3, [pc, #132]	; (2fe0 <_usb_ep0_on_setup+0xc0>)
    2f5a:	4798      	blx	r3
		if (false == udc_process_setup()) {
    2f5c:	4b21      	ldr	r3, [pc, #132]	; (2fe4 <_usb_ep0_on_setup+0xc4>)
    2f5e:	4798      	blx	r3
    2f60:	0003      	movs	r3, r0
    2f62:	001a      	movs	r2, r3
    2f64:	2301      	movs	r3, #1
    2f66:	4053      	eors	r3, r2
    2f68:	b2db      	uxtb	r3, r3
    2f6a:	2b00      	cmp	r3, #0
    2f6c:	d002      	beq.n	2f74 <_usb_ep0_on_setup+0x54>
			udd_ctrl_stall_data();
    2f6e:	4b1b      	ldr	r3, [pc, #108]	; (2fdc <_usb_ep0_on_setup+0xbc>)
    2f70:	4798      	blx	r3
			return;
    2f72:	e02c      	b.n	2fce <_usb_ep0_on_setup+0xae>
		} else if (Udd_setup_is_in()) {
    2f74:	4b18      	ldr	r3, [pc, #96]	; (2fd8 <_usb_ep0_on_setup+0xb8>)
    2f76:	781b      	ldrb	r3, [r3, #0]
    2f78:	b25b      	sxtb	r3, r3
    2f7a:	2b00      	cmp	r3, #0
    2f7c:	da11      	bge.n	2fa2 <_usb_ep0_on_setup+0x82>
			udd_ctrl_prev_payload_nb_trans = 0;
    2f7e:	4b1a      	ldr	r3, [pc, #104]	; (2fe8 <_usb_ep0_on_setup+0xc8>)
    2f80:	2200      	movs	r2, #0
    2f82:	801a      	strh	r2, [r3, #0]
			udd_ctrl_payload_nb_trans = 0;
    2f84:	4b19      	ldr	r3, [pc, #100]	; (2fec <_usb_ep0_on_setup+0xcc>)
    2f86:	2200      	movs	r2, #0
    2f88:	801a      	strh	r2, [r3, #0]
			udd_ep_control_state = UDD_EPCTRL_DATA_IN;
    2f8a:	4b12      	ldr	r3, [pc, #72]	; (2fd4 <_usb_ep0_on_setup+0xb4>)
    2f8c:	2202      	movs	r2, #2
    2f8e:	701a      	strb	r2, [r3, #0]
			usb_device_endpoint_read_buffer_job(&usb_device,0,udd_ctrl_buffer,USB_DEVICE_EP_CTRL_SIZE);
    2f90:	4a17      	ldr	r2, [pc, #92]	; (2ff0 <_usb_ep0_on_setup+0xd0>)
    2f92:	4818      	ldr	r0, [pc, #96]	; (2ff4 <_usb_ep0_on_setup+0xd4>)
    2f94:	2308      	movs	r3, #8
    2f96:	2100      	movs	r1, #0
    2f98:	4c17      	ldr	r4, [pc, #92]	; (2ff8 <_usb_ep0_on_setup+0xd8>)
    2f9a:	47a0      	blx	r4
			udd_ctrl_in_sent();
    2f9c:	4b17      	ldr	r3, [pc, #92]	; (2ffc <_usb_ep0_on_setup+0xdc>)
    2f9e:	4798      	blx	r3
    2fa0:	e015      	b.n	2fce <_usb_ep0_on_setup+0xae>
		} else {
			if(0 == udd_g_ctrlreq.req.wLength) {
    2fa2:	4b0d      	ldr	r3, [pc, #52]	; (2fd8 <_usb_ep0_on_setup+0xb8>)
    2fa4:	88db      	ldrh	r3, [r3, #6]
    2fa6:	2b00      	cmp	r3, #0
    2fa8:	d102      	bne.n	2fb0 <_usb_ep0_on_setup+0x90>
				udd_ctrl_send_zlp_in();
    2faa:	4b15      	ldr	r3, [pc, #84]	; (3000 <_usb_ep0_on_setup+0xe0>)
    2fac:	4798      	blx	r3
				return;
    2fae:	e00e      	b.n	2fce <_usb_ep0_on_setup+0xae>
			} else {
				udd_ctrl_prev_payload_nb_trans = 0;
    2fb0:	4b0d      	ldr	r3, [pc, #52]	; (2fe8 <_usb_ep0_on_setup+0xc8>)
    2fb2:	2200      	movs	r2, #0
    2fb4:	801a      	strh	r2, [r3, #0]
				udd_ctrl_payload_nb_trans = 0;
    2fb6:	4b0d      	ldr	r3, [pc, #52]	; (2fec <_usb_ep0_on_setup+0xcc>)
    2fb8:	2200      	movs	r2, #0
    2fba:	801a      	strh	r2, [r3, #0]
				udd_ep_control_state = UDD_EPCTRL_DATA_OUT;
    2fbc:	4b05      	ldr	r3, [pc, #20]	; (2fd4 <_usb_ep0_on_setup+0xb4>)
    2fbe:	2201      	movs	r2, #1
    2fc0:	701a      	strb	r2, [r3, #0]
				/* Initialize buffer size and enable OUT bank */
				usb_device_endpoint_read_buffer_job(&usb_device,0,udd_ctrl_buffer,USB_DEVICE_EP_CTRL_SIZE);
    2fc2:	4a0b      	ldr	r2, [pc, #44]	; (2ff0 <_usb_ep0_on_setup+0xd0>)
    2fc4:	480b      	ldr	r0, [pc, #44]	; (2ff4 <_usb_ep0_on_setup+0xd4>)
    2fc6:	2308      	movs	r3, #8
    2fc8:	2100      	movs	r1, #0
    2fca:	4c0b      	ldr	r4, [pc, #44]	; (2ff8 <_usb_ep0_on_setup+0xd8>)
    2fcc:	47a0      	blx	r4
			}
		}
	}
}
    2fce:	46bd      	mov	sp, r7
    2fd0:	b005      	add	sp, #20
    2fd2:	bd90      	pop	{r4, r7, pc}
    2fd4:	200004c6 	.word	0x200004c6
    2fd8:	200028cc 	.word	0x200028cc
    2fdc:	000028a5 	.word	0x000028a5
    2fe0:	00002c31 	.word	0x00002c31
    2fe4:	000015c9 	.word	0x000015c9
    2fe8:	200004c8 	.word	0x200004c8
    2fec:	200004ca 	.word	0x200004ca
    2ff0:	200028e4 	.word	0x200028e4
    2ff4:	20002764 	.word	0x20002764
    2ff8:	00004791 	.word	0x00004791
    2ffc:	00002ce1 	.word	0x00002ce1
    3000:	00002c9d 	.word	0x00002c9d

00003004 <udd_ctrl_underflow>:
/**
 * \brief Control Endpoint Process when underflow condition has occurred
 * \param[in] pointer Pointer to the endpoint transfer status parameter struct from driver layer.
 */
static void udd_ctrl_underflow(void* pointer)
{
    3004:	b580      	push	{r7, lr}
    3006:	b084      	sub	sp, #16
    3008:	af00      	add	r7, sp, #0
    300a:	6078      	str	r0, [r7, #4]
	struct usb_endpoint_callback_parameter *ep_callback_para = (struct usb_endpoint_callback_parameter*)pointer;
    300c:	687b      	ldr	r3, [r7, #4]
    300e:	60fb      	str	r3, [r7, #12]

	if (UDD_EPCTRL_DATA_OUT == udd_ep_control_state) {
    3010:	4b0a      	ldr	r3, [pc, #40]	; (303c <udd_ctrl_underflow+0x38>)
    3012:	781b      	ldrb	r3, [r3, #0]
    3014:	2b01      	cmp	r3, #1
    3016:	d102      	bne.n	301e <udd_ctrl_underflow+0x1a>
		/* Host want to stop OUT transaction
		 * then stop to wait OUT data phase and wait IN ZLP handshake */
		udd_ctrl_send_zlp_in();
    3018:	4b09      	ldr	r3, [pc, #36]	; (3040 <udd_ctrl_underflow+0x3c>)
    301a:	4798      	blx	r3
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
		/* A OUT handshake is waiting by device,
		 * but host want extra IN data then stall extra IN data */
		usb_device_endpoint_set_halt(&usb_device, ep_callback_para->endpoint_address);
	}
}
    301c:	e00a      	b.n	3034 <udd_ctrl_underflow+0x30>
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
    301e:	4b07      	ldr	r3, [pc, #28]	; (303c <udd_ctrl_underflow+0x38>)
    3020:	781b      	ldrb	r3, [r3, #0]
    3022:	2b04      	cmp	r3, #4
    3024:	d106      	bne.n	3034 <udd_ctrl_underflow+0x30>
		usb_device_endpoint_set_halt(&usb_device, ep_callback_para->endpoint_address);
    3026:	68fb      	ldr	r3, [r7, #12]
    3028:	799a      	ldrb	r2, [r3, #6]
    302a:	4b06      	ldr	r3, [pc, #24]	; (3044 <udd_ctrl_underflow+0x40>)
    302c:	0011      	movs	r1, r2
    302e:	0018      	movs	r0, r3
    3030:	4b05      	ldr	r3, [pc, #20]	; (3048 <udd_ctrl_underflow+0x44>)
    3032:	4798      	blx	r3
}
    3034:	46c0      	nop			; (mov r8, r8)
    3036:	46bd      	mov	sp, r7
    3038:	b004      	add	sp, #16
    303a:	bd80      	pop	{r7, pc}
    303c:	200004c6 	.word	0x200004c6
    3040:	00002c9d 	.word	0x00002c9d
    3044:	20002764 	.word	0x20002764
    3048:	00004555 	.word	0x00004555

0000304c <udd_ctrl_overflow>:
/**
 * \brief Control Endpoint Process when overflow condition has occurred
 * \param[in] pointer Pointer to the endpoint transfer status parameter struct from driver layer.
 */
static void udd_ctrl_overflow(void* pointer)
{
    304c:	b580      	push	{r7, lr}
    304e:	b084      	sub	sp, #16
    3050:	af00      	add	r7, sp, #0
    3052:	6078      	str	r0, [r7, #4]
	struct usb_endpoint_callback_parameter *ep_callback_para = (struct usb_endpoint_callback_parameter*)pointer;
    3054:	687b      	ldr	r3, [r7, #4]
    3056:	60fb      	str	r3, [r7, #12]

	if (UDD_EPCTRL_DATA_IN == udd_ep_control_state) {
    3058:	4b0b      	ldr	r3, [pc, #44]	; (3088 <udd_ctrl_overflow+0x3c>)
    305a:	781b      	ldrb	r3, [r3, #0]
    305c:	2b02      	cmp	r3, #2
    305e:	d103      	bne.n	3068 <udd_ctrl_overflow+0x1c>
		/* Host want to stop IN transaction
		 * then stop to wait IN data phase and wait OUT ZLP handshake */
		udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
    3060:	4b09      	ldr	r3, [pc, #36]	; (3088 <udd_ctrl_overflow+0x3c>)
    3062:	2204      	movs	r2, #4
    3064:	701a      	strb	r2, [r3, #0]
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
		/* A IN handshake is waiting by device,
		 * but host want extra OUT data then stall extra OUT data and following status stage */
		usb_device_endpoint_set_halt(&usb_device, ep_callback_para->endpoint_address);
	}
}
    3066:	e00a      	b.n	307e <udd_ctrl_overflow+0x32>
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
    3068:	4b07      	ldr	r3, [pc, #28]	; (3088 <udd_ctrl_overflow+0x3c>)
    306a:	781b      	ldrb	r3, [r3, #0]
    306c:	2b03      	cmp	r3, #3
    306e:	d106      	bne.n	307e <udd_ctrl_overflow+0x32>
		usb_device_endpoint_set_halt(&usb_device, ep_callback_para->endpoint_address);
    3070:	68fb      	ldr	r3, [r7, #12]
    3072:	799a      	ldrb	r2, [r3, #6]
    3074:	4b05      	ldr	r3, [pc, #20]	; (308c <udd_ctrl_overflow+0x40>)
    3076:	0011      	movs	r1, r2
    3078:	0018      	movs	r0, r3
    307a:	4b05      	ldr	r3, [pc, #20]	; (3090 <udd_ctrl_overflow+0x44>)
    307c:	4798      	blx	r3
}
    307e:	46c0      	nop			; (mov r8, r8)
    3080:	46bd      	mov	sp, r7
    3082:	b004      	add	sp, #16
    3084:	bd80      	pop	{r7, pc}
    3086:	46c0      	nop			; (mov r8, r8)
    3088:	200004c6 	.word	0x200004c6
    308c:	20002764 	.word	0x20002764
    3090:	00004555 	.word	0x00004555

00003094 <_usb_ep0_on_tansfer_fail>:
 * \brief Control endpoint transfer fail callback function
 * \param[in] module_inst Pointer to USB module instance
 * \param[in] pointer Pointer to the endpoint transfer status parameter struct from driver layer.
 */
static void _usb_ep0_on_tansfer_fail(struct usb_module *module_inst, void* pointer)
{
    3094:	b580      	push	{r7, lr}
    3096:	b084      	sub	sp, #16
    3098:	af00      	add	r7, sp, #0
    309a:	6078      	str	r0, [r7, #4]
    309c:	6039      	str	r1, [r7, #0]
	struct usb_endpoint_callback_parameter *ep_callback_para = (struct usb_endpoint_callback_parameter*)pointer;
    309e:	683b      	ldr	r3, [r7, #0]
    30a0:	60fb      	str	r3, [r7, #12]

	if(ep_callback_para->endpoint_address & USB_EP_DIR_IN) {
    30a2:	68fb      	ldr	r3, [r7, #12]
    30a4:	799b      	ldrb	r3, [r3, #6]
    30a6:	b25b      	sxtb	r3, r3
    30a8:	2b00      	cmp	r3, #0
    30aa:	da04      	bge.n	30b6 <_usb_ep0_on_tansfer_fail+0x22>
		udd_ctrl_underflow(pointer);
    30ac:	683b      	ldr	r3, [r7, #0]
    30ae:	0018      	movs	r0, r3
    30b0:	4b05      	ldr	r3, [pc, #20]	; (30c8 <_usb_ep0_on_tansfer_fail+0x34>)
    30b2:	4798      	blx	r3
	} else {
		udd_ctrl_overflow(pointer);
	}
}
    30b4:	e003      	b.n	30be <_usb_ep0_on_tansfer_fail+0x2a>
		udd_ctrl_overflow(pointer);
    30b6:	683b      	ldr	r3, [r7, #0]
    30b8:	0018      	movs	r0, r3
    30ba:	4b04      	ldr	r3, [pc, #16]	; (30cc <_usb_ep0_on_tansfer_fail+0x38>)
    30bc:	4798      	blx	r3
}
    30be:	46c0      	nop			; (mov r8, r8)
    30c0:	46bd      	mov	sp, r7
    30c2:	b004      	add	sp, #16
    30c4:	bd80      	pop	{r7, pc}
    30c6:	46c0      	nop			; (mov r8, r8)
    30c8:	00003005 	.word	0x00003005
    30cc:	0000304d 	.word	0x0000304d

000030d0 <_usb_ep0_on_tansfer_ok>:
 * \brief Control endpoint transfer complete callback function
 * \param[in] module_inst Pointer to USB module instance
 * \param[in] pointer Pointer to the endpoint transfer status parameter struct from driver layer.
 */
static void _usb_ep0_on_tansfer_ok(struct usb_module *module_inst, void * pointer)
{
    30d0:	b580      	push	{r7, lr}
    30d2:	b082      	sub	sp, #8
    30d4:	af00      	add	r7, sp, #0
    30d6:	6078      	str	r0, [r7, #4]
    30d8:	6039      	str	r1, [r7, #0]
		if (UDD_EPCTRL_DATA_OUT  == udd_ep_control_state) { /* handshake Out for status stage */
    30da:	4b0f      	ldr	r3, [pc, #60]	; (3118 <_usb_ep0_on_tansfer_ok+0x48>)
    30dc:	781b      	ldrb	r3, [r3, #0]
    30de:	2b01      	cmp	r3, #1
    30e0:	d104      	bne.n	30ec <_usb_ep0_on_tansfer_ok+0x1c>
			udd_ctrl_out_received(pointer);
    30e2:	683b      	ldr	r3, [r7, #0]
    30e4:	0018      	movs	r0, r3
    30e6:	4b0d      	ldr	r3, [pc, #52]	; (311c <_usb_ep0_on_tansfer_ok+0x4c>)
    30e8:	4798      	blx	r3
			if (NULL != udd_g_ctrlreq.callback) {
				udd_g_ctrlreq.callback();
			}
			udd_ep_control_state = UDD_EPCTRL_SETUP;
		}
}
    30ea:	e010      	b.n	310e <_usb_ep0_on_tansfer_ok+0x3e>
		} else if (UDD_EPCTRL_DATA_IN == udd_ep_control_state) { /* handshake In for status stage */
    30ec:	4b0a      	ldr	r3, [pc, #40]	; (3118 <_usb_ep0_on_tansfer_ok+0x48>)
    30ee:	781b      	ldrb	r3, [r3, #0]
    30f0:	2b02      	cmp	r3, #2
    30f2:	d102      	bne.n	30fa <_usb_ep0_on_tansfer_ok+0x2a>
			udd_ctrl_in_sent();
    30f4:	4b0a      	ldr	r3, [pc, #40]	; (3120 <_usb_ep0_on_tansfer_ok+0x50>)
    30f6:	4798      	blx	r3
}
    30f8:	e009      	b.n	310e <_usb_ep0_on_tansfer_ok+0x3e>
			if (NULL != udd_g_ctrlreq.callback) {
    30fa:	4b0a      	ldr	r3, [pc, #40]	; (3124 <_usb_ep0_on_tansfer_ok+0x54>)
    30fc:	691b      	ldr	r3, [r3, #16]
    30fe:	2b00      	cmp	r3, #0
    3100:	d002      	beq.n	3108 <_usb_ep0_on_tansfer_ok+0x38>
				udd_g_ctrlreq.callback();
    3102:	4b08      	ldr	r3, [pc, #32]	; (3124 <_usb_ep0_on_tansfer_ok+0x54>)
    3104:	691b      	ldr	r3, [r3, #16]
    3106:	4798      	blx	r3
			udd_ep_control_state = UDD_EPCTRL_SETUP;
    3108:	4b03      	ldr	r3, [pc, #12]	; (3118 <_usb_ep0_on_tansfer_ok+0x48>)
    310a:	2200      	movs	r2, #0
    310c:	701a      	strb	r2, [r3, #0]
}
    310e:	46c0      	nop			; (mov r8, r8)
    3110:	46bd      	mov	sp, r7
    3112:	b002      	add	sp, #8
    3114:	bd80      	pop	{r7, pc}
    3116:	46c0      	nop			; (mov r8, r8)
    3118:	200004c6 	.word	0x200004c6
    311c:	00002dcd 	.word	0x00002dcd
    3120:	00002ce1 	.word	0x00002ce1
    3124:	200028cc 	.word	0x200028cc

00003128 <udd_ctrl_ep_enable>:
/**
 * \brief Enable Control Endpoint
 * \param[in] module_inst Pointer to USB module instance
 */
static void udd_ctrl_ep_enable(struct usb_module *module_inst)
{
    3128:	b590      	push	{r4, r7, lr}
    312a:	b085      	sub	sp, #20
    312c:	af00      	add	r7, sp, #0
    312e:	6078      	str	r0, [r7, #4]
	/* USB Device Endpoint0 Configuration */
	 struct usb_device_endpoint_config config_ep0;

	 usb_device_endpoint_get_config_defaults(&config_ep0);
    3130:	230c      	movs	r3, #12
    3132:	18fb      	adds	r3, r7, r3
    3134:	0018      	movs	r0, r3
    3136:	4b21      	ldr	r3, [pc, #132]	; (31bc <udd_ctrl_ep_enable+0x94>)
    3138:	4798      	blx	r3
	 config_ep0.ep_size = (enum usb_endpoint_size)(32 - clz(((uint32_t)Min(Max(USB_DEVICE_EP_CTRL_SIZE, 8), 1024) << 1) - 1) - 1 - 3);
    313a:	230c      	movs	r3, #12
    313c:	18fb      	adds	r3, r7, r3
    313e:	2200      	movs	r2, #0
    3140:	705a      	strb	r2, [r3, #1]
	 usb_device_endpoint_set_config(module_inst,&config_ep0);
    3142:	230c      	movs	r3, #12
    3144:	18fa      	adds	r2, r7, r3
    3146:	687b      	ldr	r3, [r7, #4]
    3148:	0011      	movs	r1, r2
    314a:	0018      	movs	r0, r3
    314c:	4b1c      	ldr	r3, [pc, #112]	; (31c0 <udd_ctrl_ep_enable+0x98>)
    314e:	4798      	blx	r3

	 usb_device_endpoint_setup_buffer_job(module_inst,udd_ctrl_buffer);
    3150:	4a1c      	ldr	r2, [pc, #112]	; (31c4 <udd_ctrl_ep_enable+0x9c>)
    3152:	687b      	ldr	r3, [r7, #4]
    3154:	0011      	movs	r1, r2
    3156:	0018      	movs	r0, r3
    3158:	4b1b      	ldr	r3, [pc, #108]	; (31c8 <udd_ctrl_ep_enable+0xa0>)
    315a:	4798      	blx	r3

	 usb_device_endpoint_register_callback(module_inst,0,USB_DEVICE_ENDPOINT_CALLBACK_RXSTP, _usb_ep0_on_setup );
    315c:	4b1b      	ldr	r3, [pc, #108]	; (31cc <udd_ctrl_ep_enable+0xa4>)
    315e:	6878      	ldr	r0, [r7, #4]
    3160:	2202      	movs	r2, #2
    3162:	2100      	movs	r1, #0
    3164:	4c1a      	ldr	r4, [pc, #104]	; (31d0 <udd_ctrl_ep_enable+0xa8>)
    3166:	47a0      	blx	r4
	 usb_device_endpoint_register_callback(module_inst,0,USB_DEVICE_ENDPOINT_CALLBACK_TRCPT,_usb_ep0_on_tansfer_ok );
    3168:	4b1a      	ldr	r3, [pc, #104]	; (31d4 <udd_ctrl_ep_enable+0xac>)
    316a:	6878      	ldr	r0, [r7, #4]
    316c:	2200      	movs	r2, #0
    316e:	2100      	movs	r1, #0
    3170:	4c17      	ldr	r4, [pc, #92]	; (31d0 <udd_ctrl_ep_enable+0xa8>)
    3172:	47a0      	blx	r4
	 usb_device_endpoint_register_callback(module_inst,0,USB_DEVICE_ENDPOINT_CALLBACK_TRFAIL,_usb_ep0_on_tansfer_fail );
    3174:	4b18      	ldr	r3, [pc, #96]	; (31d8 <udd_ctrl_ep_enable+0xb0>)
    3176:	6878      	ldr	r0, [r7, #4]
    3178:	2201      	movs	r2, #1
    317a:	2100      	movs	r1, #0
    317c:	4c14      	ldr	r4, [pc, #80]	; (31d0 <udd_ctrl_ep_enable+0xa8>)
    317e:	47a0      	blx	r4
	 usb_device_endpoint_enable_callback(module_inst,0,USB_DEVICE_ENDPOINT_CALLBACK_RXSTP);
    3180:	687b      	ldr	r3, [r7, #4]
    3182:	2202      	movs	r2, #2
    3184:	2100      	movs	r1, #0
    3186:	0018      	movs	r0, r3
    3188:	4b14      	ldr	r3, [pc, #80]	; (31dc <udd_ctrl_ep_enable+0xb4>)
    318a:	4798      	blx	r3
	 usb_device_endpoint_enable_callback(module_inst,0,USB_DEVICE_ENDPOINT_CALLBACK_TRCPT);
    318c:	687b      	ldr	r3, [r7, #4]
    318e:	2200      	movs	r2, #0
    3190:	2100      	movs	r1, #0
    3192:	0018      	movs	r0, r3
    3194:	4b11      	ldr	r3, [pc, #68]	; (31dc <udd_ctrl_ep_enable+0xb4>)
    3196:	4798      	blx	r3
	 usb_device_endpoint_enable_callback(module_inst,0,USB_DEVICE_ENDPOINT_CALLBACK_TRFAIL);
    3198:	687b      	ldr	r3, [r7, #4]
    319a:	2201      	movs	r2, #1
    319c:	2100      	movs	r1, #0
    319e:	0018      	movs	r0, r3
    31a0:	4b0e      	ldr	r3, [pc, #56]	; (31dc <udd_ctrl_ep_enable+0xb4>)
    31a2:	4798      	blx	r3

#ifdef  USB_DEVICE_LPM_SUPPORT
	 // Enable LPM feature
	 usb_device_set_lpm_mode(module_inst, USB_DEVICE_LPM_ACK);
    31a4:	687b      	ldr	r3, [r7, #4]
    31a6:	2101      	movs	r1, #1
    31a8:	0018      	movs	r0, r3
    31aa:	4b0d      	ldr	r3, [pc, #52]	; (31e0 <udd_ctrl_ep_enable+0xb8>)
    31ac:	4798      	blx	r3
#endif

	 udd_ep_control_state = UDD_EPCTRL_SETUP;
    31ae:	4b0d      	ldr	r3, [pc, #52]	; (31e4 <udd_ctrl_ep_enable+0xbc>)
    31b0:	2200      	movs	r2, #0
    31b2:	701a      	strb	r2, [r3, #0]
}
    31b4:	46c0      	nop			; (mov r8, r8)
    31b6:	46bd      	mov	sp, r7
    31b8:	b005      	add	sp, #20
    31ba:	bd90      	pop	{r4, r7, pc}
    31bc:	00003f39 	.word	0x00003f39
    31c0:	00003f61 	.word	0x00003f61
    31c4:	200028e4 	.word	0x200028e4
    31c8:	00004841 	.word	0x00004841
    31cc:	00002f21 	.word	0x00002f21
    31d0:	00003b01 	.word	0x00003b01
    31d4:	000030d1 	.word	0x000030d1
    31d8:	00003095 	.word	0x00003095
    31dc:	00003bf9 	.word	0x00003bf9
    31e0:	00001f75 	.word	0x00001f75
    31e4:	200004c6 	.word	0x200004c6

000031e8 <_usb_on_suspend>:
 * \brief Control endpoint Suspend callback function
 * \param[in] module_inst Pointer to USB module instance
 * \param[in] pointer Pointer to the callback parameter from driver layer.
 */
static void _usb_on_suspend(struct usb_module *module_inst, void *pointer)
{
    31e8:	b580      	push	{r7, lr}
    31ea:	b082      	sub	sp, #8
    31ec:	af00      	add	r7, sp, #0
    31ee:	6078      	str	r0, [r7, #4]
    31f0:	6039      	str	r1, [r7, #0]
	usb_device_disable_callback(&usb_device, USB_DEVICE_CALLBACK_SUSPEND);
    31f2:	4b09      	ldr	r3, [pc, #36]	; (3218 <_usb_on_suspend+0x30>)
    31f4:	2104      	movs	r1, #4
    31f6:	0018      	movs	r0, r3
    31f8:	4b08      	ldr	r3, [pc, #32]	; (321c <_usb_on_suspend+0x34>)
    31fa:	4798      	blx	r3
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_WAKEUP);
    31fc:	4b06      	ldr	r3, [pc, #24]	; (3218 <_usb_on_suspend+0x30>)
    31fe:	2102      	movs	r1, #2
    3200:	0018      	movs	r0, r3
    3202:	4b07      	ldr	r3, [pc, #28]	; (3220 <_usb_on_suspend+0x38>)
    3204:	4798      	blx	r3
	udd_sleep_mode(UDD_STATE_SUSPEND);
    3206:	2001      	movs	r0, #1
    3208:	4b06      	ldr	r3, [pc, #24]	; (3224 <_usb_on_suspend+0x3c>)
    320a:	4798      	blx	r3
#ifdef UDC_SUSPEND_EVENT
	UDC_SUSPEND_EVENT();
    320c:	4b06      	ldr	r3, [pc, #24]	; (3228 <_usb_on_suspend+0x40>)
    320e:	4798      	blx	r3
#endif
}
    3210:	46c0      	nop			; (mov r8, r8)
    3212:	46bd      	mov	sp, r7
    3214:	b002      	add	sp, #8
    3216:	bd80      	pop	{r7, pc}
    3218:	20002764 	.word	0x20002764
    321c:	00003aad 	.word	0x00003aad
    3220:	00003a51 	.word	0x00003a51
    3224:	00002091 	.word	0x00002091
    3228:	00017849 	.word	0x00017849

0000322c <_usb_device_lpm_suspend>:

#ifdef  USB_DEVICE_LPM_SUPPORT
static void _usb_device_lpm_suspend(struct usb_module *module_inst, void *pointer)
{
    322c:	b580      	push	{r7, lr}
    322e:	b084      	sub	sp, #16
    3230:	af00      	add	r7, sp, #0
    3232:	6078      	str	r0, [r7, #4]
    3234:	6039      	str	r1, [r7, #0]
	dbg_print("LPM_SUSP\n");

	uint32_t *lpm_wakeup_enable;
	lpm_wakeup_enable = (uint32_t *)pointer;
    3236:	683b      	ldr	r3, [r7, #0]
    3238:	60fb      	str	r3, [r7, #12]

	usb_device_disable_callback(&usb_device, USB_DEVICE_CALLBACK_LPMSUSP);
    323a:	4b0b      	ldr	r3, [pc, #44]	; (3268 <_usb_device_lpm_suspend+0x3c>)
    323c:	2106      	movs	r1, #6
    323e:	0018      	movs	r0, r3
    3240:	4b0a      	ldr	r3, [pc, #40]	; (326c <_usb_device_lpm_suspend+0x40>)
    3242:	4798      	blx	r3
	usb_device_disable_callback(&usb_device, USB_DEVICE_CALLBACK_SUSPEND);
    3244:	4b08      	ldr	r3, [pc, #32]	; (3268 <_usb_device_lpm_suspend+0x3c>)
    3246:	2104      	movs	r1, #4
    3248:	0018      	movs	r0, r3
    324a:	4b08      	ldr	r3, [pc, #32]	; (326c <_usb_device_lpm_suspend+0x40>)
    324c:	4798      	blx	r3
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_WAKEUP);
    324e:	4b06      	ldr	r3, [pc, #24]	; (3268 <_usb_device_lpm_suspend+0x3c>)
    3250:	2102      	movs	r1, #2
    3252:	0018      	movs	r0, r3
    3254:	4b06      	ldr	r3, [pc, #24]	; (3270 <_usb_device_lpm_suspend+0x44>)
    3256:	4798      	blx	r3

//#warning Here the sleep mode must be choose to have a DFLL startup time < bmAttribut.HIRD
	udd_sleep_mode(UDD_STATE_SUSPEND_LPM);  // Enter in LPM SUSPEND mode
    3258:	2002      	movs	r0, #2
    325a:	4b06      	ldr	r3, [pc, #24]	; (3274 <_usb_device_lpm_suspend+0x48>)
    325c:	4798      	blx	r3
	}
	if (!(*lpm_wakeup_enable)) {
		UDC_REMOTEWAKEUP_LPM_DISABLE();
	}
	UDC_SUSPEND_LPM_EVENT();
}
    325e:	46c0      	nop			; (mov r8, r8)
    3260:	46bd      	mov	sp, r7
    3262:	b004      	add	sp, #16
    3264:	bd80      	pop	{r7, pc}
    3266:	46c0      	nop			; (mov r8, r8)
    3268:	20002764 	.word	0x20002764
    326c:	00003aad 	.word	0x00003aad
    3270:	00003a51 	.word	0x00003a51
    3274:	00002091 	.word	0x00002091

00003278 <_usb_on_sof_notify>:
 * \brief Control endpoint SOF callback function
 * \param[in] module_inst Pointer to USB module instance
 * \param[in] pointer Pointer to the callback parameter from driver layer.
 */
static void _usb_on_sof_notify(struct usb_module *module_inst, void *pointer)
{
    3278:	b580      	push	{r7, lr}
    327a:	b082      	sub	sp, #8
    327c:	af00      	add	r7, sp, #0
    327e:	6078      	str	r0, [r7, #4]
    3280:	6039      	str	r1, [r7, #0]
	udc_sof_notify();
    3282:	4b03      	ldr	r3, [pc, #12]	; (3290 <_usb_on_sof_notify+0x18>)
    3284:	4798      	blx	r3
#ifdef UDC_SOF_EVENT
	UDC_SOF_EVENT();
#endif
}
    3286:	46c0      	nop			; (mov r8, r8)
    3288:	46bd      	mov	sp, r7
    328a:	b002      	add	sp, #8
    328c:	bd80      	pop	{r7, pc}
    328e:	46c0      	nop			; (mov r8, r8)
    3290:	00000cfd 	.word	0x00000cfd

00003294 <_usb_on_bus_reset>:
 * \brief Control endpoint Reset callback function
 * \param[in] module_inst Pointer to USB module instance
 * \param[in] pointer Pointer to the callback parameter from driver layer.
 */
static void _usb_on_bus_reset(struct usb_module *module_inst, void *pointer)
{
    3294:	b580      	push	{r7, lr}
    3296:	b082      	sub	sp, #8
    3298:	af00      	add	r7, sp, #0
    329a:	6078      	str	r0, [r7, #4]
    329c:	6039      	str	r1, [r7, #0]
	// Reset USB Device Stack Core
	udc_reset();
    329e:	4b07      	ldr	r3, [pc, #28]	; (32bc <_usb_on_bus_reset+0x28>)
    32a0:	4798      	blx	r3
	usb_device_set_address(module_inst,0);
    32a2:	687b      	ldr	r3, [r7, #4]
    32a4:	2100      	movs	r1, #0
    32a6:	0018      	movs	r0, r3
    32a8:	4b05      	ldr	r3, [pc, #20]	; (32c0 <_usb_on_bus_reset+0x2c>)
    32aa:	4798      	blx	r3
	udd_ctrl_ep_enable(module_inst);
    32ac:	687b      	ldr	r3, [r7, #4]
    32ae:	0018      	movs	r0, r3
    32b0:	4b04      	ldr	r3, [pc, #16]	; (32c4 <_usb_on_bus_reset+0x30>)
    32b2:	4798      	blx	r3
}
    32b4:	46c0      	nop			; (mov r8, r8)
    32b6:	46bd      	mov	sp, r7
    32b8:	b002      	add	sp, #8
    32ba:	bd80      	pop	{r7, pc}
    32bc:	00000c89 	.word	0x00000c89
    32c0:	00001f4d 	.word	0x00001f4d
    32c4:	00003129 	.word	0x00003129

000032c8 <_usb_on_wakeup>:
 * \brief Control endpoint Wakeup callback function
 * \param[in] module_inst Pointer to USB module instance
 * \param[in] pointer Pointer to the callback parameter from driver layer.
 */
static void _usb_on_wakeup(struct usb_module *module_inst, void *pointer)
{
    32c8:	b580      	push	{r7, lr}
    32ca:	b082      	sub	sp, #8
    32cc:	af00      	add	r7, sp, #0
    32ce:	6078      	str	r0, [r7, #4]
    32d0:	6039      	str	r1, [r7, #0]
	udd_wait_clock_ready();
    32d2:	4b10      	ldr	r3, [pc, #64]	; (3314 <_usb_on_wakeup+0x4c>)
    32d4:	4798      	blx	r3

	usb_device_disable_callback(&usb_device, USB_DEVICE_CALLBACK_WAKEUP);
    32d6:	4b10      	ldr	r3, [pc, #64]	; (3318 <_usb_on_wakeup+0x50>)
    32d8:	2102      	movs	r1, #2
    32da:	0018      	movs	r0, r3
    32dc:	4b0f      	ldr	r3, [pc, #60]	; (331c <_usb_on_wakeup+0x54>)
    32de:	4798      	blx	r3
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_SUSPEND);
    32e0:	4b0d      	ldr	r3, [pc, #52]	; (3318 <_usb_on_wakeup+0x50>)
    32e2:	2104      	movs	r1, #4
    32e4:	0018      	movs	r0, r3
    32e6:	4b0e      	ldr	r3, [pc, #56]	; (3320 <_usb_on_wakeup+0x58>)
    32e8:	4798      	blx	r3
#ifdef  USB_DEVICE_LPM_SUPPORT
	usb_device_register_callback(&usb_device, USB_DEVICE_CALLBACK_LPMSUSP, _usb_device_lpm_suspend);
    32ea:	4a0e      	ldr	r2, [pc, #56]	; (3324 <_usb_on_wakeup+0x5c>)
    32ec:	4b0a      	ldr	r3, [pc, #40]	; (3318 <_usb_on_wakeup+0x50>)
    32ee:	2106      	movs	r1, #6
    32f0:	0018      	movs	r0, r3
    32f2:	4b0d      	ldr	r3, [pc, #52]	; (3328 <_usb_on_wakeup+0x60>)
    32f4:	4798      	blx	r3
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_LPMSUSP);
    32f6:	4b08      	ldr	r3, [pc, #32]	; (3318 <_usb_on_wakeup+0x50>)
    32f8:	2106      	movs	r1, #6
    32fa:	0018      	movs	r0, r3
    32fc:	4b08      	ldr	r3, [pc, #32]	; (3320 <_usb_on_wakeup+0x58>)
    32fe:	4798      	blx	r3
#endif
	udd_sleep_mode(UDD_STATE_IDLE);
    3300:	2003      	movs	r0, #3
    3302:	4b0a      	ldr	r3, [pc, #40]	; (332c <_usb_on_wakeup+0x64>)
    3304:	4798      	blx	r3
#ifdef UDC_RESUME_EVENT
	UDC_RESUME_EVENT();
    3306:	4b0a      	ldr	r3, [pc, #40]	; (3330 <_usb_on_wakeup+0x68>)
    3308:	4798      	blx	r3
#endif
}
    330a:	46c0      	nop			; (mov r8, r8)
    330c:	46bd      	mov	sp, r7
    330e:	b002      	add	sp, #8
    3310:	bd80      	pop	{r7, pc}
    3312:	46c0      	nop			; (mov r8, r8)
    3314:	00002055 	.word	0x00002055
    3318:	20002764 	.word	0x20002764
    331c:	00003aad 	.word	0x00003aad
    3320:	00003a51 	.word	0x00003a51
    3324:	0000322d 	.word	0x0000322d
    3328:	00003a01 	.word	0x00003a01
    332c:	00002091 	.word	0x00002091
    3330:	00017853 	.word	0x00017853

00003334 <udd_attach>:
	usb_device_detach(&usb_device);
	udd_sleep_mode(UDD_STATE_SUSPEND);
}

void udd_attach(void)
{
    3334:	b580      	push	{r7, lr}
    3336:	af00      	add	r7, sp, #0
	udd_sleep_mode(UDD_STATE_IDLE);
    3338:	2003      	movs	r0, #3
    333a:	4b20      	ldr	r3, [pc, #128]	; (33bc <udd_attach+0x88>)
    333c:	4798      	blx	r3
	usb_device_attach(&usb_device);
    333e:	4b20      	ldr	r3, [pc, #128]	; (33c0 <udd_attach+0x8c>)
    3340:	0018      	movs	r0, r3
    3342:	4b20      	ldr	r3, [pc, #128]	; (33c4 <udd_attach+0x90>)
    3344:	4798      	blx	r3

	usb_device_register_callback(&usb_device, USB_DEVICE_CALLBACK_SUSPEND, _usb_on_suspend);
    3346:	4a20      	ldr	r2, [pc, #128]	; (33c8 <udd_attach+0x94>)
    3348:	4b1d      	ldr	r3, [pc, #116]	; (33c0 <udd_attach+0x8c>)
    334a:	2104      	movs	r1, #4
    334c:	0018      	movs	r0, r3
    334e:	4b1f      	ldr	r3, [pc, #124]	; (33cc <udd_attach+0x98>)
    3350:	4798      	blx	r3
	usb_device_register_callback(&usb_device, USB_DEVICE_CALLBACK_SOF, _usb_on_sof_notify);
    3352:	4a1f      	ldr	r2, [pc, #124]	; (33d0 <udd_attach+0x9c>)
    3354:	4b1a      	ldr	r3, [pc, #104]	; (33c0 <udd_attach+0x8c>)
    3356:	2100      	movs	r1, #0
    3358:	0018      	movs	r0, r3
    335a:	4b1c      	ldr	r3, [pc, #112]	; (33cc <udd_attach+0x98>)
    335c:	4798      	blx	r3
	usb_device_register_callback(&usb_device, USB_DEVICE_CALLBACK_RESET, _usb_on_bus_reset);
    335e:	4a1d      	ldr	r2, [pc, #116]	; (33d4 <udd_attach+0xa0>)
    3360:	4b17      	ldr	r3, [pc, #92]	; (33c0 <udd_attach+0x8c>)
    3362:	2101      	movs	r1, #1
    3364:	0018      	movs	r0, r3
    3366:	4b19      	ldr	r3, [pc, #100]	; (33cc <udd_attach+0x98>)
    3368:	4798      	blx	r3
	usb_device_register_callback(&usb_device, USB_DEVICE_CALLBACK_WAKEUP, _usb_on_wakeup);
    336a:	4a1b      	ldr	r2, [pc, #108]	; (33d8 <udd_attach+0xa4>)
    336c:	4b14      	ldr	r3, [pc, #80]	; (33c0 <udd_attach+0x8c>)
    336e:	2102      	movs	r1, #2
    3370:	0018      	movs	r0, r3
    3372:	4b16      	ldr	r3, [pc, #88]	; (33cc <udd_attach+0x98>)
    3374:	4798      	blx	r3

	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_SUSPEND);
    3376:	4b12      	ldr	r3, [pc, #72]	; (33c0 <udd_attach+0x8c>)
    3378:	2104      	movs	r1, #4
    337a:	0018      	movs	r0, r3
    337c:	4b17      	ldr	r3, [pc, #92]	; (33dc <udd_attach+0xa8>)
    337e:	4798      	blx	r3
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_SOF);
    3380:	4b0f      	ldr	r3, [pc, #60]	; (33c0 <udd_attach+0x8c>)
    3382:	2100      	movs	r1, #0
    3384:	0018      	movs	r0, r3
    3386:	4b15      	ldr	r3, [pc, #84]	; (33dc <udd_attach+0xa8>)
    3388:	4798      	blx	r3
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_RESET);
    338a:	4b0d      	ldr	r3, [pc, #52]	; (33c0 <udd_attach+0x8c>)
    338c:	2101      	movs	r1, #1
    338e:	0018      	movs	r0, r3
    3390:	4b12      	ldr	r3, [pc, #72]	; (33dc <udd_attach+0xa8>)
    3392:	4798      	blx	r3
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_WAKEUP);
    3394:	4b0a      	ldr	r3, [pc, #40]	; (33c0 <udd_attach+0x8c>)
    3396:	2102      	movs	r1, #2
    3398:	0018      	movs	r0, r3
    339a:	4b10      	ldr	r3, [pc, #64]	; (33dc <udd_attach+0xa8>)
    339c:	4798      	blx	r3
#ifdef  USB_DEVICE_LPM_SUPPORT
	usb_device_register_callback(&usb_device, USB_DEVICE_CALLBACK_LPMSUSP, _usb_device_lpm_suspend);
    339e:	4a10      	ldr	r2, [pc, #64]	; (33e0 <udd_attach+0xac>)
    33a0:	4b07      	ldr	r3, [pc, #28]	; (33c0 <udd_attach+0x8c>)
    33a2:	2106      	movs	r1, #6
    33a4:	0018      	movs	r0, r3
    33a6:	4b09      	ldr	r3, [pc, #36]	; (33cc <udd_attach+0x98>)
    33a8:	4798      	blx	r3
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_LPMSUSP);
    33aa:	4b05      	ldr	r3, [pc, #20]	; (33c0 <udd_attach+0x8c>)
    33ac:	2106      	movs	r1, #6
    33ae:	0018      	movs	r0, r3
    33b0:	4b0a      	ldr	r3, [pc, #40]	; (33dc <udd_attach+0xa8>)
    33b2:	4798      	blx	r3
#endif
}
    33b4:	46c0      	nop			; (mov r8, r8)
    33b6:	46bd      	mov	sp, r7
    33b8:	bd80      	pop	{r7, pc}
    33ba:	46c0      	nop			; (mov r8, r8)
    33bc:	00002091 	.word	0x00002091
    33c0:	20002764 	.word	0x20002764
    33c4:	00001f0d 	.word	0x00001f0d
    33c8:	000031e9 	.word	0x000031e9
    33cc:	00003a01 	.word	0x00003a01
    33d0:	00003279 	.word	0x00003279
    33d4:	00003295 	.word	0x00003295
    33d8:	000032c9 	.word	0x000032c9
    33dc:	00003a51 	.word	0x00003a51
    33e0:	0000322d 	.word	0x0000322d

000033e4 <udd_enable>:
	return false;
#endif
}

void udd_enable(void)
{
    33e4:	b580      	push	{r7, lr}
    33e6:	b082      	sub	sp, #8
    33e8:	af00      	add	r7, sp, #0
	irqflags_t flags;

	/* To avoid USB interrupt before end of initialization */
	flags = cpu_irq_save();
    33ea:	4b12      	ldr	r3, [pc, #72]	; (3434 <udd_enable+0x50>)
    33ec:	4798      	blx	r3
    33ee:	0003      	movs	r3, r0
    33f0:	607b      	str	r3, [r7, #4]
	}
#endif
	struct usb_config config_usb;

	/* USB Module configuration */
	usb_get_config_defaults(&config_usb);
    33f2:	003b      	movs	r3, r7
    33f4:	0018      	movs	r0, r3
    33f6:	4b10      	ldr	r3, [pc, #64]	; (3438 <udd_enable+0x54>)
    33f8:	4798      	blx	r3
	config_usb.source_generator = UDD_CLOCK_GEN;
    33fa:	003b      	movs	r3, r7
    33fc:	2200      	movs	r2, #0
    33fe:	709a      	strb	r2, [r3, #2]
	usb_init(&usb_device, USB, &config_usb);
    3400:	003a      	movs	r2, r7
    3402:	490e      	ldr	r1, [pc, #56]	; (343c <udd_enable+0x58>)
    3404:	4b0e      	ldr	r3, [pc, #56]	; (3440 <udd_enable+0x5c>)
    3406:	0018      	movs	r0, r3
    3408:	4b0e      	ldr	r3, [pc, #56]	; (3444 <udd_enable+0x60>)
    340a:	4798      	blx	r3

	/* USB Module Enable */
	usb_enable(&usb_device);
    340c:	4b0c      	ldr	r3, [pc, #48]	; (3440 <udd_enable+0x5c>)
    340e:	0018      	movs	r0, r3
    3410:	4b0d      	ldr	r3, [pc, #52]	; (3448 <udd_enable+0x64>)
    3412:	4798      	blx	r3

	/* Check clock after enable module, request the clock */
	udd_wait_clock_ready();
    3414:	4b0d      	ldr	r3, [pc, #52]	; (344c <udd_enable+0x68>)
    3416:	4798      	blx	r3

	udd_sleep_mode(UDD_STATE_SUSPEND);
    3418:	2001      	movs	r0, #1
    341a:	4b0d      	ldr	r3, [pc, #52]	; (3450 <udd_enable+0x6c>)
    341c:	4798      	blx	r3
		_uhd_vbus_handler();
	}
#else
	// No VBus detect, assume always high
# ifndef USB_DEVICE_ATTACH_AUTO_DISABLE
	udd_attach();
    341e:	4b0d      	ldr	r3, [pc, #52]	; (3454 <udd_enable+0x70>)
    3420:	4798      	blx	r3
# endif
#endif

	cpu_irq_restore(flags);
    3422:	687b      	ldr	r3, [r7, #4]
    3424:	0018      	movs	r0, r3
    3426:	4b0c      	ldr	r3, [pc, #48]	; (3458 <udd_enable+0x74>)
    3428:	4798      	blx	r3
}
    342a:	46c0      	nop			; (mov r8, r8)
    342c:	46bd      	mov	sp, r7
    342e:	b002      	add	sp, #8
    3430:	bd80      	pop	{r7, pc}
    3432:	46c0      	nop			; (mov r8, r8)
    3434:	00001e95 	.word	0x00001e95
    3438:	00004e71 	.word	0x00004e71
    343c:	41005000 	.word	0x41005000
    3440:	20002764 	.word	0x20002764
    3444:	00004e99 	.word	0x00004e99
    3448:	00004e09 	.word	0x00004e09
    344c:	00002055 	.word	0x00002055
    3450:	00002091 	.word	0x00002091
    3454:	00003335 	.word	0x00003335
    3458:	00001edd 	.word	0x00001edd

0000345c <system_gclk_chan_get_config_defaults>:
{
    345c:	b580      	push	{r7, lr}
    345e:	b082      	sub	sp, #8
    3460:	af00      	add	r7, sp, #0
    3462:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
    3464:	687b      	ldr	r3, [r7, #4]
    3466:	2200      	movs	r2, #0
    3468:	701a      	strb	r2, [r3, #0]
}
    346a:	46c0      	nop			; (mov r8, r8)
    346c:	46bd      	mov	sp, r7
    346e:	b002      	add	sp, #8
    3470:	bd80      	pop	{r7, pc}
	...

00003474 <system_apb_clock_set_mask>:
{
    3474:	b580      	push	{r7, lr}
    3476:	b082      	sub	sp, #8
    3478:	af00      	add	r7, sp, #0
    347a:	0002      	movs	r2, r0
    347c:	6039      	str	r1, [r7, #0]
    347e:	1dfb      	adds	r3, r7, #7
    3480:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    3482:	1dfb      	adds	r3, r7, #7
    3484:	781b      	ldrb	r3, [r3, #0]
    3486:	2b01      	cmp	r3, #1
    3488:	d00a      	beq.n	34a0 <system_apb_clock_set_mask+0x2c>
    348a:	2b02      	cmp	r3, #2
    348c:	d00f      	beq.n	34ae <system_apb_clock_set_mask+0x3a>
    348e:	2b00      	cmp	r3, #0
    3490:	d114      	bne.n	34bc <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
    3492:	4b0e      	ldr	r3, [pc, #56]	; (34cc <system_apb_clock_set_mask+0x58>)
    3494:	4a0d      	ldr	r2, [pc, #52]	; (34cc <system_apb_clock_set_mask+0x58>)
    3496:	6991      	ldr	r1, [r2, #24]
    3498:	683a      	ldr	r2, [r7, #0]
    349a:	430a      	orrs	r2, r1
    349c:	619a      	str	r2, [r3, #24]
			break;
    349e:	e00f      	b.n	34c0 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
    34a0:	4b0a      	ldr	r3, [pc, #40]	; (34cc <system_apb_clock_set_mask+0x58>)
    34a2:	4a0a      	ldr	r2, [pc, #40]	; (34cc <system_apb_clock_set_mask+0x58>)
    34a4:	69d1      	ldr	r1, [r2, #28]
    34a6:	683a      	ldr	r2, [r7, #0]
    34a8:	430a      	orrs	r2, r1
    34aa:	61da      	str	r2, [r3, #28]
			break;
    34ac:	e008      	b.n	34c0 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
    34ae:	4b07      	ldr	r3, [pc, #28]	; (34cc <system_apb_clock_set_mask+0x58>)
    34b0:	4a06      	ldr	r2, [pc, #24]	; (34cc <system_apb_clock_set_mask+0x58>)
    34b2:	6a11      	ldr	r1, [r2, #32]
    34b4:	683a      	ldr	r2, [r7, #0]
    34b6:	430a      	orrs	r2, r1
    34b8:	621a      	str	r2, [r3, #32]
			break;
    34ba:	e001      	b.n	34c0 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
    34bc:	2317      	movs	r3, #23
    34be:	e000      	b.n	34c2 <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
    34c0:	2300      	movs	r3, #0
}
    34c2:	0018      	movs	r0, r3
    34c4:	46bd      	mov	sp, r7
    34c6:	b002      	add	sp, #8
    34c8:	bd80      	pop	{r7, pc}
    34ca:	46c0      	nop			; (mov r8, r8)
    34cc:	40000400 	.word	0x40000400

000034d0 <system_pinmux_get_config_defaults>:
{
    34d0:	b580      	push	{r7, lr}
    34d2:	b082      	sub	sp, #8
    34d4:	af00      	add	r7, sp, #0
    34d6:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    34d8:	687b      	ldr	r3, [r7, #4]
    34da:	2280      	movs	r2, #128	; 0x80
    34dc:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    34de:	687b      	ldr	r3, [r7, #4]
    34e0:	2200      	movs	r2, #0
    34e2:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    34e4:	687b      	ldr	r3, [r7, #4]
    34e6:	2201      	movs	r2, #1
    34e8:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    34ea:	687b      	ldr	r3, [r7, #4]
    34ec:	2200      	movs	r2, #0
    34ee:	70da      	strb	r2, [r3, #3]
}
    34f0:	46c0      	nop			; (mov r8, r8)
    34f2:	46bd      	mov	sp, r7
    34f4:	b002      	add	sp, #8
    34f6:	bd80      	pop	{r7, pc}

000034f8 <system_interrupt_enable>:
 *
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
    34f8:	b580      	push	{r7, lr}
    34fa:	b082      	sub	sp, #8
    34fc:	af00      	add	r7, sp, #0
    34fe:	0002      	movs	r2, r0
    3500:	1dfb      	adds	r3, r7, #7
    3502:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    3504:	4b06      	ldr	r3, [pc, #24]	; (3520 <system_interrupt_enable+0x28>)
    3506:	1dfa      	adds	r2, r7, #7
    3508:	7812      	ldrb	r2, [r2, #0]
    350a:	0011      	movs	r1, r2
    350c:	221f      	movs	r2, #31
    350e:	400a      	ands	r2, r1
    3510:	2101      	movs	r1, #1
    3512:	4091      	lsls	r1, r2
    3514:	000a      	movs	r2, r1
    3516:	601a      	str	r2, [r3, #0]
}
    3518:	46c0      	nop			; (mov r8, r8)
    351a:	46bd      	mov	sp, r7
    351c:	b002      	add	sp, #8
    351e:	bd80      	pop	{r7, pc}
    3520:	e000e100 	.word	0xe000e100

00003524 <_usb_host_interrupt_handler>:
 *   (Device dis/connection, SOF, reset, resume, wakeup, error)
 * - Pipe events
 *   (End of data transfer, setup, stall, error)
 */
static void _usb_host_interrupt_handler(void)
{
    3524:	b580      	push	{r7, lr}
    3526:	b082      	sub	sp, #8
    3528:	af00      	add	r7, sp, #0
	uint32_t pipe_int;
	uint32_t flags;

	/* Manage pipe interrupts */
	pipe_int = ctz(_usb_instances->hw->HOST.PINTSMRY.reg);
    352a:	4bc0      	ldr	r3, [pc, #768]	; (382c <_usb_host_interrupt_handler+0x308>)
    352c:	681b      	ldr	r3, [r3, #0]
    352e:	681b      	ldr	r3, [r3, #0]
    3530:	8c1b      	ldrh	r3, [r3, #32]
    3532:	b29b      	uxth	r3, r3
    3534:	2b00      	cmp	r3, #0
    3536:	d00a      	beq.n	354e <_usb_host_interrupt_handler+0x2a>
    3538:	4bbc      	ldr	r3, [pc, #752]	; (382c <_usb_host_interrupt_handler+0x308>)
    353a:	681b      	ldr	r3, [r3, #0]
    353c:	681b      	ldr	r3, [r3, #0]
    353e:	8c1b      	ldrh	r3, [r3, #32]
    3540:	b29b      	uxth	r3, r3
    3542:	001a      	movs	r2, r3
    3544:	4bba      	ldr	r3, [pc, #744]	; (3830 <_usb_host_interrupt_handler+0x30c>)
    3546:	0010      	movs	r0, r2
    3548:	4798      	blx	r3
    354a:	0003      	movs	r3, r0
    354c:	e000      	b.n	3550 <_usb_host_interrupt_handler+0x2c>
    354e:	2320      	movs	r3, #32
    3550:	607b      	str	r3, [r7, #4]
	if (pipe_int < 32) {
    3552:	687b      	ldr	r3, [r7, #4]
    3554:	2b1f      	cmp	r3, #31
    3556:	d900      	bls.n	355a <_usb_host_interrupt_handler+0x36>
    3558:	e174      	b.n	3844 <_usb_host_interrupt_handler+0x320>
		/* pipe interrupts */

		/* get interrupt flags */
		flags = _usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg;
    355a:	4bb4      	ldr	r3, [pc, #720]	; (382c <_usb_host_interrupt_handler+0x308>)
    355c:	681b      	ldr	r3, [r3, #0]
    355e:	681a      	ldr	r2, [r3, #0]
    3560:	687b      	ldr	r3, [r7, #4]
    3562:	3308      	adds	r3, #8
    3564:	015b      	lsls	r3, r3, #5
    3566:	18d3      	adds	r3, r2, r3
    3568:	3307      	adds	r3, #7
    356a:	781b      	ldrb	r3, [r3, #0]
    356c:	b2db      	uxtb	r3, r3
    356e:	603b      	str	r3, [r7, #0]

		/* host pipe transfer complete interrupt */
		if (flags & USB_HOST_PINTFLAG_TRCPT_Msk) {
    3570:	683b      	ldr	r3, [r7, #0]
    3572:	2203      	movs	r2, #3
    3574:	4013      	ands	r3, r2
    3576:	d100      	bne.n	357a <_usb_host_interrupt_handler+0x56>
    3578:	e088      	b.n	368c <_usb_host_interrupt_handler+0x168>
			/* Clear busy status */
			host_pipe_job_busy_status &= ~(1 << pipe_int);
    357a:	2201      	movs	r2, #1
    357c:	687b      	ldr	r3, [r7, #4]
    357e:	409a      	lsls	r2, r3
    3580:	0013      	movs	r3, r2
    3582:	43db      	mvns	r3, r3
    3584:	001a      	movs	r2, r3
    3586:	4bab      	ldr	r3, [pc, #684]	; (3834 <_usb_host_interrupt_handler+0x310>)
    3588:	681b      	ldr	r3, [r3, #0]
    358a:	401a      	ands	r2, r3
    358c:	4ba9      	ldr	r3, [pc, #676]	; (3834 <_usb_host_interrupt_handler+0x310>)
    358e:	601a      	str	r2, [r3, #0]
			/* clear the flag */
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
    3590:	4ba6      	ldr	r3, [pc, #664]	; (382c <_usb_host_interrupt_handler+0x308>)
    3592:	681b      	ldr	r3, [r3, #0]
    3594:	681a      	ldr	r2, [r3, #0]
    3596:	687b      	ldr	r3, [r7, #4]
    3598:	3308      	adds	r3, #8
    359a:	015b      	lsls	r3, r3, #5
    359c:	18d3      	adds	r3, r2, r3
    359e:	3307      	adds	r3, #7
    35a0:	2203      	movs	r2, #3
    35a2:	701a      	strb	r2, [r3, #0]
					USB_HOST_PINTFLAG_TRCPT_Msk;
			if(_usb_instances->host_pipe_enabled_callback_mask[pipe_int] &
    35a4:	4ba1      	ldr	r3, [pc, #644]	; (382c <_usb_host_interrupt_handler+0x308>)
    35a6:	681a      	ldr	r2, [r3, #0]
    35a8:	21ae      	movs	r1, #174	; 0xae
    35aa:	687b      	ldr	r3, [r7, #4]
    35ac:	18d3      	adds	r3, r2, r3
    35ae:	185b      	adds	r3, r3, r1
    35b0:	781b      	ldrb	r3, [r3, #0]
    35b2:	001a      	movs	r2, r3
    35b4:	2301      	movs	r3, #1
    35b6:	4013      	ands	r3, r2
    35b8:	d068      	beq.n	368c <_usb_host_interrupt_handler+0x168>
					(1 << USB_HOST_PIPE_CALLBACK_TRANSFER_COMPLETE)) {
				pipe_callback_para.pipe_num = pipe_int;
    35ba:	687b      	ldr	r3, [r7, #4]
    35bc:	b2da      	uxtb	r2, r3
    35be:	4b9e      	ldr	r3, [pc, #632]	; (3838 <_usb_host_interrupt_handler+0x314>)
    35c0:	701a      	strb	r2, [r3, #0]
				if (_usb_instances->hw->HOST.HostPipe[pipe_int].PCFG.bit.PTOKEN ==
    35c2:	4b9a      	ldr	r3, [pc, #616]	; (382c <_usb_host_interrupt_handler+0x308>)
    35c4:	681b      	ldr	r3, [r3, #0]
    35c6:	681b      	ldr	r3, [r3, #0]
    35c8:	687a      	ldr	r2, [r7, #4]
    35ca:	3208      	adds	r2, #8
    35cc:	0152      	lsls	r2, r2, #5
    35ce:	5cd3      	ldrb	r3, [r2, r3]
    35d0:	079b      	lsls	r3, r3, #30
    35d2:	0f9b      	lsrs	r3, r3, #30
    35d4:	b2db      	uxtb	r3, r3
    35d6:	2b01      	cmp	r3, #1
    35d8:	d11e      	bne.n	3618 <_usb_host_interrupt_handler+0xf4>
							USB_HOST_PIPE_TOKEN_IN) {
					/* in  */
					pipe_callback_para.transfered_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.BYTE_COUNT;
    35da:	4a98      	ldr	r2, [pc, #608]	; (383c <_usb_host_interrupt_handler+0x318>)
    35dc:	687b      	ldr	r3, [r7, #4]
    35de:	015b      	lsls	r3, r3, #5
    35e0:	18d3      	adds	r3, r2, r3
    35e2:	685b      	ldr	r3, [r3, #4]
    35e4:	049b      	lsls	r3, r3, #18
    35e6:	0c9b      	lsrs	r3, r3, #18
    35e8:	b29b      	uxth	r3, r3
    35ea:	001a      	movs	r2, r3
    35ec:	4b92      	ldr	r3, [pc, #584]	; (3838 <_usb_host_interrupt_handler+0x314>)
    35ee:	805a      	strh	r2, [r3, #2]
					pipe_callback_para.required_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE;
    35f0:	4a92      	ldr	r2, [pc, #584]	; (383c <_usb_host_interrupt_handler+0x318>)
    35f2:	687b      	ldr	r3, [r7, #4]
    35f4:	015b      	lsls	r3, r3, #5
    35f6:	18d3      	adds	r3, r2, r3
    35f8:	685b      	ldr	r3, [r3, #4]
    35fa:	011b      	lsls	r3, r3, #4
    35fc:	0c9b      	lsrs	r3, r3, #18
    35fe:	b29b      	uxth	r3, r3
    3600:	001a      	movs	r2, r3
    3602:	4b8d      	ldr	r3, [pc, #564]	; (3838 <_usb_host_interrupt_handler+0x314>)
    3604:	809a      	strh	r2, [r3, #4]
					usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.BYTE_COUNT = 0;
    3606:	4a8d      	ldr	r2, [pc, #564]	; (383c <_usb_host_interrupt_handler+0x318>)
    3608:	687b      	ldr	r3, [r7, #4]
    360a:	015b      	lsls	r3, r3, #5
    360c:	18d3      	adds	r3, r2, r3
    360e:	685a      	ldr	r2, [r3, #4]
    3610:	0b92      	lsrs	r2, r2, #14
    3612:	0392      	lsls	r2, r2, #14
    3614:	605a      	str	r2, [r3, #4]
    3616:	e02c      	b.n	3672 <_usb_host_interrupt_handler+0x14e>
				} else {
					/* out */
					pipe_callback_para.transfered_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE;
    3618:	4a88      	ldr	r2, [pc, #544]	; (383c <_usb_host_interrupt_handler+0x318>)
    361a:	687b      	ldr	r3, [r7, #4]
    361c:	015b      	lsls	r3, r3, #5
    361e:	18d3      	adds	r3, r2, r3
    3620:	685b      	ldr	r3, [r3, #4]
    3622:	011b      	lsls	r3, r3, #4
    3624:	0c9b      	lsrs	r3, r3, #18
    3626:	b29b      	uxth	r3, r3
    3628:	001a      	movs	r2, r3
    362a:	4b83      	ldr	r3, [pc, #524]	; (3838 <_usb_host_interrupt_handler+0x314>)
    362c:	805a      	strh	r2, [r3, #2]
					pipe_callback_para.required_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.BYTE_COUNT;
    362e:	4a83      	ldr	r2, [pc, #524]	; (383c <_usb_host_interrupt_handler+0x318>)
    3630:	687b      	ldr	r3, [r7, #4]
    3632:	015b      	lsls	r3, r3, #5
    3634:	18d3      	adds	r3, r2, r3
    3636:	685b      	ldr	r3, [r3, #4]
    3638:	049b      	lsls	r3, r3, #18
    363a:	0c9b      	lsrs	r3, r3, #18
    363c:	b29b      	uxth	r3, r3
    363e:	001a      	movs	r2, r3
    3640:	4b7d      	ldr	r3, [pc, #500]	; (3838 <_usb_host_interrupt_handler+0x314>)
    3642:	809a      	strh	r2, [r3, #4]
					usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = 0;
    3644:	4a7d      	ldr	r2, [pc, #500]	; (383c <_usb_host_interrupt_handler+0x318>)
    3646:	687b      	ldr	r3, [r7, #4]
    3648:	015b      	lsls	r3, r3, #5
    364a:	18d3      	adds	r3, r2, r3
    364c:	685a      	ldr	r2, [r3, #4]
    364e:	497c      	ldr	r1, [pc, #496]	; (3840 <_usb_host_interrupt_handler+0x31c>)
    3650:	400a      	ands	r2, r1
    3652:	605a      	str	r2, [r3, #4]
					if (0 == pipe_callback_para.transfered_size) {
    3654:	4b78      	ldr	r3, [pc, #480]	; (3838 <_usb_host_interrupt_handler+0x314>)
    3656:	885b      	ldrh	r3, [r3, #2]
    3658:	2b00      	cmp	r3, #0
    365a:	d10a      	bne.n	3672 <_usb_host_interrupt_handler+0x14e>
						pipe_callback_para.transfered_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.BYTE_COUNT;
    365c:	4a77      	ldr	r2, [pc, #476]	; (383c <_usb_host_interrupt_handler+0x318>)
    365e:	687b      	ldr	r3, [r7, #4]
    3660:	015b      	lsls	r3, r3, #5
    3662:	18d3      	adds	r3, r2, r3
    3664:	685b      	ldr	r3, [r3, #4]
    3666:	049b      	lsls	r3, r3, #18
    3668:	0c9b      	lsrs	r3, r3, #18
    366a:	b29b      	uxth	r3, r3
    366c:	001a      	movs	r2, r3
    366e:	4b72      	ldr	r3, [pc, #456]	; (3838 <_usb_host_interrupt_handler+0x314>)
    3670:	805a      	strh	r2, [r3, #2]
					}
				}
				(_usb_instances->host_pipe_callback[pipe_int]
    3672:	4b6e      	ldr	r3, [pc, #440]	; (382c <_usb_host_interrupt_handler+0x308>)
    3674:	681a      	ldr	r2, [r3, #0]
						[USB_HOST_PIPE_CALLBACK_TRANSFER_COMPLETE])(_usb_instances, &pipe_callback_para);
    3676:	687b      	ldr	r3, [r7, #4]
    3678:	3302      	adds	r3, #2
    367a:	011b      	lsls	r3, r3, #4
    367c:	18d3      	adds	r3, r2, r3
    367e:	3304      	adds	r3, #4
    3680:	681a      	ldr	r2, [r3, #0]
    3682:	4b6a      	ldr	r3, [pc, #424]	; (382c <_usb_host_interrupt_handler+0x308>)
    3684:	681b      	ldr	r3, [r3, #0]
    3686:	496c      	ldr	r1, [pc, #432]	; (3838 <_usb_host_interrupt_handler+0x314>)
    3688:	0018      	movs	r0, r3
    368a:	4790      	blx	r2
			}
		}

		/* host pipe transfer fail interrupt */
		if (flags & USB_HOST_PINTFLAG_TRFAIL) {
    368c:	683b      	ldr	r3, [r7, #0]
    368e:	2204      	movs	r2, #4
    3690:	4013      	ands	r3, r2
    3692:	d014      	beq.n	36be <_usb_host_interrupt_handler+0x19a>
			/* Clear busy status */
			host_pipe_job_busy_status &= ~(1 << pipe_int);
    3694:	2201      	movs	r2, #1
    3696:	687b      	ldr	r3, [r7, #4]
    3698:	409a      	lsls	r2, r3
    369a:	0013      	movs	r3, r2
    369c:	43db      	mvns	r3, r3
    369e:	001a      	movs	r2, r3
    36a0:	4b64      	ldr	r3, [pc, #400]	; (3834 <_usb_host_interrupt_handler+0x310>)
    36a2:	681b      	ldr	r3, [r3, #0]
    36a4:	401a      	ands	r2, r3
    36a6:	4b63      	ldr	r3, [pc, #396]	; (3834 <_usb_host_interrupt_handler+0x310>)
    36a8:	601a      	str	r2, [r3, #0]
			/* clear the flag */
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
    36aa:	4b60      	ldr	r3, [pc, #384]	; (382c <_usb_host_interrupt_handler+0x308>)
    36ac:	681b      	ldr	r3, [r3, #0]
    36ae:	681a      	ldr	r2, [r3, #0]
    36b0:	687b      	ldr	r3, [r7, #4]
    36b2:	3308      	adds	r3, #8
    36b4:	015b      	lsls	r3, r3, #5
    36b6:	18d3      	adds	r3, r2, r3
    36b8:	3307      	adds	r3, #7
    36ba:	2204      	movs	r2, #4
    36bc:	701a      	strb	r2, [r3, #0]
					USB_HOST_PINTFLAG_TRFAIL;
		}

		/* host pipe error interrupt */
		if (flags & USB_HOST_PINTFLAG_PERR) {
    36be:	683b      	ldr	r3, [r7, #0]
    36c0:	2208      	movs	r2, #8
    36c2:	4013      	ands	r3, r2
    36c4:	d03c      	beq.n	3740 <_usb_host_interrupt_handler+0x21c>
			/* Clear busy status */
			host_pipe_job_busy_status &= ~(1 << pipe_int);
    36c6:	2201      	movs	r2, #1
    36c8:	687b      	ldr	r3, [r7, #4]
    36ca:	409a      	lsls	r2, r3
    36cc:	0013      	movs	r3, r2
    36ce:	43db      	mvns	r3, r3
    36d0:	001a      	movs	r2, r3
    36d2:	4b58      	ldr	r3, [pc, #352]	; (3834 <_usb_host_interrupt_handler+0x310>)
    36d4:	681b      	ldr	r3, [r3, #0]
    36d6:	401a      	ands	r2, r3
    36d8:	4b56      	ldr	r3, [pc, #344]	; (3834 <_usb_host_interrupt_handler+0x310>)
    36da:	601a      	str	r2, [r3, #0]
			/* clear the flag */
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
    36dc:	4b53      	ldr	r3, [pc, #332]	; (382c <_usb_host_interrupt_handler+0x308>)
    36de:	681b      	ldr	r3, [r3, #0]
    36e0:	681a      	ldr	r2, [r3, #0]
    36e2:	687b      	ldr	r3, [r7, #4]
    36e4:	3308      	adds	r3, #8
    36e6:	015b      	lsls	r3, r3, #5
    36e8:	18d3      	adds	r3, r2, r3
    36ea:	3307      	adds	r3, #7
    36ec:	2208      	movs	r2, #8
    36ee:	701a      	strb	r2, [r3, #0]
					USB_HOST_PINTFLAG_PERR;
			if(_usb_instances->host_pipe_enabled_callback_mask[pipe_int] &
    36f0:	4b4e      	ldr	r3, [pc, #312]	; (382c <_usb_host_interrupt_handler+0x308>)
    36f2:	681a      	ldr	r2, [r3, #0]
    36f4:	21ae      	movs	r1, #174	; 0xae
    36f6:	687b      	ldr	r3, [r7, #4]
    36f8:	18d3      	adds	r3, r2, r3
    36fa:	185b      	adds	r3, r3, r1
    36fc:	781b      	ldrb	r3, [r3, #0]
    36fe:	001a      	movs	r2, r3
    3700:	2302      	movs	r3, #2
    3702:	4013      	ands	r3, r2
    3704:	d01c      	beq.n	3740 <_usb_host_interrupt_handler+0x21c>
					(1 << USB_HOST_PIPE_CALLBACK_ERROR)) {
				pipe_callback_para.pipe_num = pipe_int;
    3706:	687b      	ldr	r3, [r7, #4]
    3708:	b2da      	uxtb	r2, r3
    370a:	4b4b      	ldr	r3, [pc, #300]	; (3838 <_usb_host_interrupt_handler+0x314>)
    370c:	701a      	strb	r2, [r3, #0]
				pipe_callback_para.pipe_error_status =
						usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].STATUS_PIPE.reg & 0x1F;
    370e:	4a4b      	ldr	r2, [pc, #300]	; (383c <_usb_host_interrupt_handler+0x318>)
    3710:	687b      	ldr	r3, [r7, #4]
    3712:	015b      	lsls	r3, r3, #5
    3714:	18d3      	adds	r3, r2, r3
    3716:	330e      	adds	r3, #14
    3718:	881b      	ldrh	r3, [r3, #0]
    371a:	b29b      	uxth	r3, r3
    371c:	b2db      	uxtb	r3, r3
    371e:	221f      	movs	r2, #31
    3720:	4013      	ands	r3, r2
    3722:	b2da      	uxtb	r2, r3
				pipe_callback_para.pipe_error_status =
    3724:	4b44      	ldr	r3, [pc, #272]	; (3838 <_usb_host_interrupt_handler+0x314>)
    3726:	705a      	strb	r2, [r3, #1]
				(_usb_instances->host_pipe_callback[pipe_int]
    3728:	4b40      	ldr	r3, [pc, #256]	; (382c <_usb_host_interrupt_handler+0x308>)
    372a:	681a      	ldr	r2, [r3, #0]
						[USB_HOST_PIPE_CALLBACK_ERROR])(_usb_instances, &pipe_callback_para);
    372c:	687b      	ldr	r3, [r7, #4]
    372e:	011b      	lsls	r3, r3, #4
    3730:	18d3      	adds	r3, r2, r3
    3732:	3328      	adds	r3, #40	; 0x28
    3734:	681a      	ldr	r2, [r3, #0]
    3736:	4b3d      	ldr	r3, [pc, #244]	; (382c <_usb_host_interrupt_handler+0x308>)
    3738:	681b      	ldr	r3, [r3, #0]
    373a:	493f      	ldr	r1, [pc, #252]	; (3838 <_usb_host_interrupt_handler+0x314>)
    373c:	0018      	movs	r0, r3
    373e:	4790      	blx	r2
			}
		}

		/* host pipe transmitted setup interrupt */
		if (flags & USB_HOST_PINTFLAG_TXSTP) {
    3740:	683b      	ldr	r3, [r7, #0]
    3742:	2210      	movs	r2, #16
    3744:	4013      	ands	r3, r2
    3746:	d03a      	beq.n	37be <_usb_host_interrupt_handler+0x29a>
			/* Clear busy status */
			host_pipe_job_busy_status &= ~(1 << pipe_int);
    3748:	2201      	movs	r2, #1
    374a:	687b      	ldr	r3, [r7, #4]
    374c:	409a      	lsls	r2, r3
    374e:	0013      	movs	r3, r2
    3750:	43db      	mvns	r3, r3
    3752:	001a      	movs	r2, r3
    3754:	4b37      	ldr	r3, [pc, #220]	; (3834 <_usb_host_interrupt_handler+0x310>)
    3756:	681b      	ldr	r3, [r3, #0]
    3758:	401a      	ands	r2, r3
    375a:	4b36      	ldr	r3, [pc, #216]	; (3834 <_usb_host_interrupt_handler+0x310>)
    375c:	601a      	str	r2, [r3, #0]
			/* clear the flag */
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
    375e:	4b33      	ldr	r3, [pc, #204]	; (382c <_usb_host_interrupt_handler+0x308>)
    3760:	681b      	ldr	r3, [r3, #0]
    3762:	681a      	ldr	r2, [r3, #0]
    3764:	687b      	ldr	r3, [r7, #4]
    3766:	3308      	adds	r3, #8
    3768:	015b      	lsls	r3, r3, #5
    376a:	18d3      	adds	r3, r2, r3
    376c:	3307      	adds	r3, #7
    376e:	2210      	movs	r2, #16
    3770:	701a      	strb	r2, [r3, #0]
					USB_HOST_PINTFLAG_TXSTP;
			if(_usb_instances->host_pipe_enabled_callback_mask[pipe_int] &
    3772:	4b2e      	ldr	r3, [pc, #184]	; (382c <_usb_host_interrupt_handler+0x308>)
    3774:	681a      	ldr	r2, [r3, #0]
    3776:	21ae      	movs	r1, #174	; 0xae
    3778:	687b      	ldr	r3, [r7, #4]
    377a:	18d3      	adds	r3, r2, r3
    377c:	185b      	adds	r3, r3, r1
    377e:	781b      	ldrb	r3, [r3, #0]
    3780:	001a      	movs	r2, r3
    3782:	2304      	movs	r3, #4
    3784:	4013      	ands	r3, r2
    3786:	d01a      	beq.n	37be <_usb_host_interrupt_handler+0x29a>
					(1 << USB_HOST_PIPE_CALLBACK_SETUP)) {
				pipe_callback_para.pipe_num = pipe_int;
    3788:	687b      	ldr	r3, [r7, #4]
    378a:	b2da      	uxtb	r2, r3
    378c:	4b2a      	ldr	r3, [pc, #168]	; (3838 <_usb_host_interrupt_handler+0x314>)
    378e:	701a      	strb	r2, [r3, #0]
				pipe_callback_para.transfered_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE;
    3790:	4a2a      	ldr	r2, [pc, #168]	; (383c <_usb_host_interrupt_handler+0x318>)
    3792:	687b      	ldr	r3, [r7, #4]
    3794:	015b      	lsls	r3, r3, #5
    3796:	18d3      	adds	r3, r2, r3
    3798:	685b      	ldr	r3, [r3, #4]
    379a:	011b      	lsls	r3, r3, #4
    379c:	0c9b      	lsrs	r3, r3, #18
    379e:	b29b      	uxth	r3, r3
    37a0:	001a      	movs	r2, r3
    37a2:	4b25      	ldr	r3, [pc, #148]	; (3838 <_usb_host_interrupt_handler+0x314>)
    37a4:	805a      	strh	r2, [r3, #2]
				(_usb_instances->host_pipe_callback[pipe_int]
    37a6:	4b21      	ldr	r3, [pc, #132]	; (382c <_usb_host_interrupt_handler+0x308>)
    37a8:	681a      	ldr	r2, [r3, #0]
						[USB_HOST_PIPE_CALLBACK_SETUP])(_usb_instances, NULL);
    37aa:	687b      	ldr	r3, [r7, #4]
    37ac:	011b      	lsls	r3, r3, #4
    37ae:	18d3      	adds	r3, r2, r3
    37b0:	332c      	adds	r3, #44	; 0x2c
    37b2:	681a      	ldr	r2, [r3, #0]
    37b4:	4b1d      	ldr	r3, [pc, #116]	; (382c <_usb_host_interrupt_handler+0x308>)
    37b6:	681b      	ldr	r3, [r3, #0]
    37b8:	2100      	movs	r1, #0
    37ba:	0018      	movs	r0, r3
    37bc:	4790      	blx	r2
			}
		}

		/* host pipe stall interrupt */
		if (flags & USB_HOST_PINTFLAG_STALL) {
    37be:	683b      	ldr	r3, [r7, #0]
    37c0:	2220      	movs	r2, #32
    37c2:	4013      	ands	r3, r2
    37c4:	d100      	bne.n	37c8 <_usb_host_interrupt_handler+0x2a4>
    37c6:	e112      	b.n	39ee <_usb_host_interrupt_handler+0x4ca>
			/* Clear busy status */
			host_pipe_job_busy_status &= ~(1 << pipe_int);
    37c8:	2201      	movs	r2, #1
    37ca:	687b      	ldr	r3, [r7, #4]
    37cc:	409a      	lsls	r2, r3
    37ce:	0013      	movs	r3, r2
    37d0:	43db      	mvns	r3, r3
    37d2:	001a      	movs	r2, r3
    37d4:	4b17      	ldr	r3, [pc, #92]	; (3834 <_usb_host_interrupt_handler+0x310>)
    37d6:	681b      	ldr	r3, [r3, #0]
    37d8:	401a      	ands	r2, r3
    37da:	4b16      	ldr	r3, [pc, #88]	; (3834 <_usb_host_interrupt_handler+0x310>)
    37dc:	601a      	str	r2, [r3, #0]
			/* clear the flag */
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
    37de:	4b13      	ldr	r3, [pc, #76]	; (382c <_usb_host_interrupt_handler+0x308>)
    37e0:	681b      	ldr	r3, [r3, #0]
    37e2:	681a      	ldr	r2, [r3, #0]
    37e4:	687b      	ldr	r3, [r7, #4]
    37e6:	3308      	adds	r3, #8
    37e8:	015b      	lsls	r3, r3, #5
    37ea:	18d3      	adds	r3, r2, r3
    37ec:	3307      	adds	r3, #7
    37ee:	2220      	movs	r2, #32
    37f0:	701a      	strb	r2, [r3, #0]
					USB_HOST_PINTFLAG_STALL;
			if(_usb_instances->host_pipe_enabled_callback_mask[pipe_int] &
    37f2:	4b0e      	ldr	r3, [pc, #56]	; (382c <_usb_host_interrupt_handler+0x308>)
    37f4:	681a      	ldr	r2, [r3, #0]
    37f6:	21ae      	movs	r1, #174	; 0xae
    37f8:	687b      	ldr	r3, [r7, #4]
    37fa:	18d3      	adds	r3, r2, r3
    37fc:	185b      	adds	r3, r3, r1
    37fe:	781b      	ldrb	r3, [r3, #0]
    3800:	001a      	movs	r2, r3
    3802:	2308      	movs	r3, #8
    3804:	4013      	ands	r3, r2
    3806:	d100      	bne.n	380a <_usb_host_interrupt_handler+0x2e6>
    3808:	e0f1      	b.n	39ee <_usb_host_interrupt_handler+0x4ca>
					(1 << USB_HOST_PIPE_CALLBACK_STALL)) {
				pipe_callback_para.pipe_num = pipe_int;
    380a:	687b      	ldr	r3, [r7, #4]
    380c:	b2da      	uxtb	r2, r3
    380e:	4b0a      	ldr	r3, [pc, #40]	; (3838 <_usb_host_interrupt_handler+0x314>)
    3810:	701a      	strb	r2, [r3, #0]
				(_usb_instances->host_pipe_callback[pipe_int]
    3812:	4b06      	ldr	r3, [pc, #24]	; (382c <_usb_host_interrupt_handler+0x308>)
    3814:	681a      	ldr	r2, [r3, #0]
						[USB_HOST_PIPE_CALLBACK_STALL])(_usb_instances, &pipe_callback_para);
    3816:	687b      	ldr	r3, [r7, #4]
    3818:	011b      	lsls	r3, r3, #4
    381a:	18d3      	adds	r3, r2, r3
    381c:	3330      	adds	r3, #48	; 0x30
    381e:	681a      	ldr	r2, [r3, #0]
    3820:	4b02      	ldr	r3, [pc, #8]	; (382c <_usb_host_interrupt_handler+0x308>)
    3822:	681b      	ldr	r3, [r3, #0]
    3824:	4904      	ldr	r1, [pc, #16]	; (3838 <_usb_host_interrupt_handler+0x314>)
    3826:	0018      	movs	r0, r3
    3828:	4790      	blx	r2
				(_usb_instances->host_callback[USB_HOST_CALLBACK_DISCONNECT])(_usb_instances);
			}
		}

	}
}
    382a:	e0e0      	b.n	39ee <_usb_host_interrupt_handler+0x4ca>
    382c:	20000520 	.word	0x20000520
    3830:	0001a07d 	.word	0x0001a07d
    3834:	20000538 	.word	0x20000538
    3838:	20000524 	.word	0x20000524
    383c:	200028ec 	.word	0x200028ec
    3840:	f0003fff 	.word	0xf0003fff
		flags = _usb_instances->hw->HOST.INTFLAG.reg;
    3844:	4b6c      	ldr	r3, [pc, #432]	; (39f8 <_usb_host_interrupt_handler+0x4d4>)
    3846:	681b      	ldr	r3, [r3, #0]
    3848:	681b      	ldr	r3, [r3, #0]
    384a:	8b9b      	ldrh	r3, [r3, #28]
    384c:	b29b      	uxth	r3, r3
    384e:	603b      	str	r3, [r7, #0]
		if (flags & USB_HOST_INTFLAG_HSOF) {
    3850:	683b      	ldr	r3, [r7, #0]
    3852:	2204      	movs	r2, #4
    3854:	4013      	ands	r3, r2
    3856:	d013      	beq.n	3880 <_usb_host_interrupt_handler+0x35c>
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_HSOF;
    3858:	4b67      	ldr	r3, [pc, #412]	; (39f8 <_usb_host_interrupt_handler+0x4d4>)
    385a:	681b      	ldr	r3, [r3, #0]
    385c:	681b      	ldr	r3, [r3, #0]
    385e:	2204      	movs	r2, #4
    3860:	839a      	strh	r2, [r3, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_SOF)) {
    3862:	4b65      	ldr	r3, [pc, #404]	; (39f8 <_usb_host_interrupt_handler+0x4d4>)
    3864:	681b      	ldr	r3, [r3, #0]
    3866:	22a5      	movs	r2, #165	; 0xa5
    3868:	5c9b      	ldrb	r3, [r3, r2]
    386a:	001a      	movs	r2, r3
    386c:	2301      	movs	r3, #1
    386e:	4013      	ands	r3, r2
    3870:	d006      	beq.n	3880 <_usb_host_interrupt_handler+0x35c>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_SOF])(_usb_instances);
    3872:	4b61      	ldr	r3, [pc, #388]	; (39f8 <_usb_host_interrupt_handler+0x4d4>)
    3874:	681b      	ldr	r3, [r3, #0]
    3876:	685a      	ldr	r2, [r3, #4]
    3878:	4b5f      	ldr	r3, [pc, #380]	; (39f8 <_usb_host_interrupt_handler+0x4d4>)
    387a:	681b      	ldr	r3, [r3, #0]
    387c:	0018      	movs	r0, r3
    387e:	4790      	blx	r2
		if (flags & USB_HOST_INTFLAG_RST) {
    3880:	683b      	ldr	r3, [r7, #0]
    3882:	2208      	movs	r2, #8
    3884:	4013      	ands	r3, r2
    3886:	d016      	beq.n	38b6 <_usb_host_interrupt_handler+0x392>
			host_pipe_job_busy_status = 0;
    3888:	4b5c      	ldr	r3, [pc, #368]	; (39fc <_usb_host_interrupt_handler+0x4d8>)
    388a:	2200      	movs	r2, #0
    388c:	601a      	str	r2, [r3, #0]
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_RST;
    388e:	4b5a      	ldr	r3, [pc, #360]	; (39f8 <_usb_host_interrupt_handler+0x4d4>)
    3890:	681b      	ldr	r3, [r3, #0]
    3892:	681b      	ldr	r3, [r3, #0]
    3894:	2208      	movs	r2, #8
    3896:	839a      	strh	r2, [r3, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_RESET)) {
    3898:	4b57      	ldr	r3, [pc, #348]	; (39f8 <_usb_host_interrupt_handler+0x4d4>)
    389a:	681b      	ldr	r3, [r3, #0]
    389c:	22a5      	movs	r2, #165	; 0xa5
    389e:	5c9b      	ldrb	r3, [r3, r2]
    38a0:	001a      	movs	r2, r3
    38a2:	2302      	movs	r3, #2
    38a4:	4013      	ands	r3, r2
    38a6:	d006      	beq.n	38b6 <_usb_host_interrupt_handler+0x392>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_RESET])(_usb_instances);
    38a8:	4b53      	ldr	r3, [pc, #332]	; (39f8 <_usb_host_interrupt_handler+0x4d4>)
    38aa:	681b      	ldr	r3, [r3, #0]
    38ac:	689a      	ldr	r2, [r3, #8]
    38ae:	4b52      	ldr	r3, [pc, #328]	; (39f8 <_usb_host_interrupt_handler+0x4d4>)
    38b0:	681b      	ldr	r3, [r3, #0]
    38b2:	0018      	movs	r0, r3
    38b4:	4790      	blx	r2
		if (flags & USB_HOST_INTFLAG_UPRSM) {
    38b6:	683b      	ldr	r3, [r7, #0]
    38b8:	2240      	movs	r2, #64	; 0x40
    38ba:	4013      	ands	r3, r2
    38bc:	d013      	beq.n	38e6 <_usb_host_interrupt_handler+0x3c2>
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_UPRSM;
    38be:	4b4e      	ldr	r3, [pc, #312]	; (39f8 <_usb_host_interrupt_handler+0x4d4>)
    38c0:	681b      	ldr	r3, [r3, #0]
    38c2:	681b      	ldr	r3, [r3, #0]
    38c4:	2240      	movs	r2, #64	; 0x40
    38c6:	839a      	strh	r2, [r3, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_UPRSM)) {
    38c8:	4b4b      	ldr	r3, [pc, #300]	; (39f8 <_usb_host_interrupt_handler+0x4d4>)
    38ca:	681b      	ldr	r3, [r3, #0]
    38cc:	22a5      	movs	r2, #165	; 0xa5
    38ce:	5c9b      	ldrb	r3, [r3, r2]
    38d0:	001a      	movs	r2, r3
    38d2:	2310      	movs	r3, #16
    38d4:	4013      	ands	r3, r2
    38d6:	d006      	beq.n	38e6 <_usb_host_interrupt_handler+0x3c2>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_UPRSM])(_usb_instances);
    38d8:	4b47      	ldr	r3, [pc, #284]	; (39f8 <_usb_host_interrupt_handler+0x4d4>)
    38da:	681b      	ldr	r3, [r3, #0]
    38dc:	695a      	ldr	r2, [r3, #20]
    38de:	4b46      	ldr	r3, [pc, #280]	; (39f8 <_usb_host_interrupt_handler+0x4d4>)
    38e0:	681b      	ldr	r3, [r3, #0]
    38e2:	0018      	movs	r0, r3
    38e4:	4790      	blx	r2
		if (flags & USB_HOST_INTFLAG_DNRSM) {
    38e6:	683b      	ldr	r3, [r7, #0]
    38e8:	2220      	movs	r2, #32
    38ea:	4013      	ands	r3, r2
    38ec:	d013      	beq.n	3916 <_usb_host_interrupt_handler+0x3f2>
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_DNRSM;
    38ee:	4b42      	ldr	r3, [pc, #264]	; (39f8 <_usb_host_interrupt_handler+0x4d4>)
    38f0:	681b      	ldr	r3, [r3, #0]
    38f2:	681b      	ldr	r3, [r3, #0]
    38f4:	2220      	movs	r2, #32
    38f6:	839a      	strh	r2, [r3, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_DNRSM)) {
    38f8:	4b3f      	ldr	r3, [pc, #252]	; (39f8 <_usb_host_interrupt_handler+0x4d4>)
    38fa:	681b      	ldr	r3, [r3, #0]
    38fc:	22a5      	movs	r2, #165	; 0xa5
    38fe:	5c9b      	ldrb	r3, [r3, r2]
    3900:	001a      	movs	r2, r3
    3902:	2308      	movs	r3, #8
    3904:	4013      	ands	r3, r2
    3906:	d006      	beq.n	3916 <_usb_host_interrupt_handler+0x3f2>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_DNRSM])(_usb_instances);
    3908:	4b3b      	ldr	r3, [pc, #236]	; (39f8 <_usb_host_interrupt_handler+0x4d4>)
    390a:	681b      	ldr	r3, [r3, #0]
    390c:	691a      	ldr	r2, [r3, #16]
    390e:	4b3a      	ldr	r3, [pc, #232]	; (39f8 <_usb_host_interrupt_handler+0x4d4>)
    3910:	681b      	ldr	r3, [r3, #0]
    3912:	0018      	movs	r0, r3
    3914:	4790      	blx	r2
		if (flags & USB_HOST_INTFLAG_WAKEUP) {
    3916:	683b      	ldr	r3, [r7, #0]
    3918:	2210      	movs	r2, #16
    391a:	4013      	ands	r3, r2
    391c:	d013      	beq.n	3946 <_usb_host_interrupt_handler+0x422>
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_WAKEUP;
    391e:	4b36      	ldr	r3, [pc, #216]	; (39f8 <_usb_host_interrupt_handler+0x4d4>)
    3920:	681b      	ldr	r3, [r3, #0]
    3922:	681b      	ldr	r3, [r3, #0]
    3924:	2210      	movs	r2, #16
    3926:	839a      	strh	r2, [r3, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_WAKEUP)) {
    3928:	4b33      	ldr	r3, [pc, #204]	; (39f8 <_usb_host_interrupt_handler+0x4d4>)
    392a:	681b      	ldr	r3, [r3, #0]
    392c:	22a5      	movs	r2, #165	; 0xa5
    392e:	5c9b      	ldrb	r3, [r3, r2]
    3930:	001a      	movs	r2, r3
    3932:	2304      	movs	r3, #4
    3934:	4013      	ands	r3, r2
    3936:	d006      	beq.n	3946 <_usb_host_interrupt_handler+0x422>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_WAKEUP])(_usb_instances);
    3938:	4b2f      	ldr	r3, [pc, #188]	; (39f8 <_usb_host_interrupt_handler+0x4d4>)
    393a:	681b      	ldr	r3, [r3, #0]
    393c:	68da      	ldr	r2, [r3, #12]
    393e:	4b2e      	ldr	r3, [pc, #184]	; (39f8 <_usb_host_interrupt_handler+0x4d4>)
    3940:	681b      	ldr	r3, [r3, #0]
    3942:	0018      	movs	r0, r3
    3944:	4790      	blx	r2
		if (flags & USB_HOST_INTFLAG_RAMACER) {
    3946:	683b      	ldr	r3, [r7, #0]
    3948:	2280      	movs	r2, #128	; 0x80
    394a:	4013      	ands	r3, r2
    394c:	d016      	beq.n	397c <_usb_host_interrupt_handler+0x458>
			host_pipe_job_busy_status = 0;
    394e:	4b2b      	ldr	r3, [pc, #172]	; (39fc <_usb_host_interrupt_handler+0x4d8>)
    3950:	2200      	movs	r2, #0
    3952:	601a      	str	r2, [r3, #0]
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_RAMACER;
    3954:	4b28      	ldr	r3, [pc, #160]	; (39f8 <_usb_host_interrupt_handler+0x4d4>)
    3956:	681b      	ldr	r3, [r3, #0]
    3958:	681b      	ldr	r3, [r3, #0]
    395a:	2280      	movs	r2, #128	; 0x80
    395c:	839a      	strh	r2, [r3, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_RAMACER)) {
    395e:	4b26      	ldr	r3, [pc, #152]	; (39f8 <_usb_host_interrupt_handler+0x4d4>)
    3960:	681b      	ldr	r3, [r3, #0]
    3962:	22a5      	movs	r2, #165	; 0xa5
    3964:	5c9b      	ldrb	r3, [r3, r2]
    3966:	001a      	movs	r2, r3
    3968:	2320      	movs	r3, #32
    396a:	4013      	ands	r3, r2
    396c:	d006      	beq.n	397c <_usb_host_interrupt_handler+0x458>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_RAMACER])(_usb_instances);
    396e:	4b22      	ldr	r3, [pc, #136]	; (39f8 <_usb_host_interrupt_handler+0x4d4>)
    3970:	681b      	ldr	r3, [r3, #0]
    3972:	699a      	ldr	r2, [r3, #24]
    3974:	4b20      	ldr	r3, [pc, #128]	; (39f8 <_usb_host_interrupt_handler+0x4d4>)
    3976:	681b      	ldr	r3, [r3, #0]
    3978:	0018      	movs	r0, r3
    397a:	4790      	blx	r2
		if (flags & USB_HOST_INTFLAG_DCONN) {
    397c:	683a      	ldr	r2, [r7, #0]
    397e:	2380      	movs	r3, #128	; 0x80
    3980:	005b      	lsls	r3, r3, #1
    3982:	4013      	ands	r3, r2
    3984:	d017      	beq.n	39b6 <_usb_host_interrupt_handler+0x492>
			host_pipe_job_busy_status = 0;
    3986:	4b1d      	ldr	r3, [pc, #116]	; (39fc <_usb_host_interrupt_handler+0x4d8>)
    3988:	2200      	movs	r2, #0
    398a:	601a      	str	r2, [r3, #0]
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_DCONN;
    398c:	4b1a      	ldr	r3, [pc, #104]	; (39f8 <_usb_host_interrupt_handler+0x4d4>)
    398e:	681b      	ldr	r3, [r3, #0]
    3990:	681b      	ldr	r3, [r3, #0]
    3992:	2280      	movs	r2, #128	; 0x80
    3994:	0052      	lsls	r2, r2, #1
    3996:	839a      	strh	r2, [r3, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_CONNECT)) {
    3998:	4b17      	ldr	r3, [pc, #92]	; (39f8 <_usb_host_interrupt_handler+0x4d4>)
    399a:	681b      	ldr	r3, [r3, #0]
    399c:	22a5      	movs	r2, #165	; 0xa5
    399e:	5c9b      	ldrb	r3, [r3, r2]
    39a0:	001a      	movs	r2, r3
    39a2:	2340      	movs	r3, #64	; 0x40
    39a4:	4013      	ands	r3, r2
    39a6:	d006      	beq.n	39b6 <_usb_host_interrupt_handler+0x492>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_CONNECT])(_usb_instances);
    39a8:	4b13      	ldr	r3, [pc, #76]	; (39f8 <_usb_host_interrupt_handler+0x4d4>)
    39aa:	681b      	ldr	r3, [r3, #0]
    39ac:	69da      	ldr	r2, [r3, #28]
    39ae:	4b12      	ldr	r3, [pc, #72]	; (39f8 <_usb_host_interrupt_handler+0x4d4>)
    39b0:	681b      	ldr	r3, [r3, #0]
    39b2:	0018      	movs	r0, r3
    39b4:	4790      	blx	r2
		if (flags & USB_HOST_INTFLAG_DDISC) {
    39b6:	683a      	ldr	r2, [r7, #0]
    39b8:	2380      	movs	r3, #128	; 0x80
    39ba:	009b      	lsls	r3, r3, #2
    39bc:	4013      	ands	r3, r2
    39be:	d016      	beq.n	39ee <_usb_host_interrupt_handler+0x4ca>
			host_pipe_job_busy_status = 0;
    39c0:	4b0e      	ldr	r3, [pc, #56]	; (39fc <_usb_host_interrupt_handler+0x4d8>)
    39c2:	2200      	movs	r2, #0
    39c4:	601a      	str	r2, [r3, #0]
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_DDISC;
    39c6:	4b0c      	ldr	r3, [pc, #48]	; (39f8 <_usb_host_interrupt_handler+0x4d4>)
    39c8:	681b      	ldr	r3, [r3, #0]
    39ca:	681b      	ldr	r3, [r3, #0]
    39cc:	2280      	movs	r2, #128	; 0x80
    39ce:	0092      	lsls	r2, r2, #2
    39d0:	839a      	strh	r2, [r3, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_DISCONNECT)) {
    39d2:	4b09      	ldr	r3, [pc, #36]	; (39f8 <_usb_host_interrupt_handler+0x4d4>)
    39d4:	681b      	ldr	r3, [r3, #0]
    39d6:	22a5      	movs	r2, #165	; 0xa5
    39d8:	5c9b      	ldrb	r3, [r3, r2]
    39da:	b25b      	sxtb	r3, r3
    39dc:	2b00      	cmp	r3, #0
    39de:	da06      	bge.n	39ee <_usb_host_interrupt_handler+0x4ca>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_DISCONNECT])(_usb_instances);
    39e0:	4b05      	ldr	r3, [pc, #20]	; (39f8 <_usb_host_interrupt_handler+0x4d4>)
    39e2:	681b      	ldr	r3, [r3, #0]
    39e4:	6a1a      	ldr	r2, [r3, #32]
    39e6:	4b04      	ldr	r3, [pc, #16]	; (39f8 <_usb_host_interrupt_handler+0x4d4>)
    39e8:	681b      	ldr	r3, [r3, #0]
    39ea:	0018      	movs	r0, r3
    39ec:	4790      	blx	r2
}
    39ee:	46c0      	nop			; (mov r8, r8)
    39f0:	46bd      	mov	sp, r7
    39f2:	b002      	add	sp, #8
    39f4:	bd80      	pop	{r7, pc}
    39f6:	46c0      	nop			; (mov r8, r8)
    39f8:	20000520 	.word	0x20000520
    39fc:	20000538 	.word	0x20000538

00003a00 <usb_device_register_callback>:
 * \retval STATUS_OK    The callback was registered successfully.
 */
enum status_code usb_device_register_callback(struct usb_module *module_inst,
		enum usb_device_callback callback_type,
		usb_device_callback_t callback_func)
{
    3a00:	b580      	push	{r7, lr}
    3a02:	b084      	sub	sp, #16
    3a04:	af00      	add	r7, sp, #0
    3a06:	60f8      	str	r0, [r7, #12]
    3a08:	607a      	str	r2, [r7, #4]
    3a0a:	230b      	movs	r3, #11
    3a0c:	18fb      	adds	r3, r7, r3
    3a0e:	1c0a      	adds	r2, r1, #0
    3a10:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(callback_func);

	/* Register callback function */
	module_inst->device_callback[callback_type] = callback_func;
    3a12:	230b      	movs	r3, #11
    3a14:	18fb      	adds	r3, r7, r3
    3a16:	781a      	ldrb	r2, [r3, #0]
    3a18:	68fb      	ldr	r3, [r7, #12]
    3a1a:	322e      	adds	r2, #46	; 0x2e
    3a1c:	0092      	lsls	r2, r2, #2
    3a1e:	6879      	ldr	r1, [r7, #4]
    3a20:	50d1      	str	r1, [r2, r3]

	/* Set the bit corresponding to the callback_type */
	module_inst->device_registered_callback_mask |= _usb_device_irq_bits[callback_type];
    3a22:	68fa      	ldr	r2, [r7, #12]
    3a24:	23aa      	movs	r3, #170	; 0xaa
    3a26:	005b      	lsls	r3, r3, #1
    3a28:	5ad2      	ldrh	r2, [r2, r3]
    3a2a:	230b      	movs	r3, #11
    3a2c:	18fb      	adds	r3, r7, r3
    3a2e:	7819      	ldrb	r1, [r3, #0]
    3a30:	4b06      	ldr	r3, [pc, #24]	; (3a4c <usb_device_register_callback+0x4c>)
    3a32:	0049      	lsls	r1, r1, #1
    3a34:	5acb      	ldrh	r3, [r1, r3]
    3a36:	4313      	orrs	r3, r2
    3a38:	b299      	uxth	r1, r3
    3a3a:	68fa      	ldr	r2, [r7, #12]
    3a3c:	23aa      	movs	r3, #170	; 0xaa
    3a3e:	005b      	lsls	r3, r3, #1
    3a40:	52d1      	strh	r1, [r2, r3]

	return STATUS_OK;
    3a42:	2300      	movs	r3, #0
}
    3a44:	0018      	movs	r0, r3
    3a46:	46bd      	mov	sp, r7
    3a48:	b004      	add	sp, #16
    3a4a:	bd80      	pop	{r7, pc}
    3a4c:	0001f83c 	.word	0x0001f83c

00003a50 <usb_device_enable_callback>:
 * \return Status of the callback enable operation.
 * \retval STATUS_OK    The callback was enabled successfully.
 */
enum status_code usb_device_enable_callback(struct usb_module *module_inst,
		enum usb_device_callback callback_type)
{
    3a50:	b580      	push	{r7, lr}
    3a52:	b082      	sub	sp, #8
    3a54:	af00      	add	r7, sp, #0
    3a56:	6078      	str	r0, [r7, #4]
    3a58:	000a      	movs	r2, r1
    3a5a:	1cfb      	adds	r3, r7, #3
    3a5c:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* clear related flag */
	module_inst->hw->DEVICE.INTFLAG.reg = _usb_device_irq_bits[callback_type];
    3a5e:	687b      	ldr	r3, [r7, #4]
    3a60:	681b      	ldr	r3, [r3, #0]
    3a62:	1cfa      	adds	r2, r7, #3
    3a64:	7811      	ldrb	r1, [r2, #0]
    3a66:	4a10      	ldr	r2, [pc, #64]	; (3aa8 <usb_device_enable_callback+0x58>)
    3a68:	0049      	lsls	r1, r1, #1
    3a6a:	5a8a      	ldrh	r2, [r1, r2]
    3a6c:	839a      	strh	r2, [r3, #28]

	/* Enable callback */
	module_inst->device_enabled_callback_mask |= _usb_device_irq_bits[callback_type];
    3a6e:	687a      	ldr	r2, [r7, #4]
    3a70:	23ab      	movs	r3, #171	; 0xab
    3a72:	005b      	lsls	r3, r3, #1
    3a74:	5ad2      	ldrh	r2, [r2, r3]
    3a76:	1cfb      	adds	r3, r7, #3
    3a78:	7819      	ldrb	r1, [r3, #0]
    3a7a:	4b0b      	ldr	r3, [pc, #44]	; (3aa8 <usb_device_enable_callback+0x58>)
    3a7c:	0049      	lsls	r1, r1, #1
    3a7e:	5acb      	ldrh	r3, [r1, r3]
    3a80:	4313      	orrs	r3, r2
    3a82:	b299      	uxth	r1, r3
    3a84:	687a      	ldr	r2, [r7, #4]
    3a86:	23ab      	movs	r3, #171	; 0xab
    3a88:	005b      	lsls	r3, r3, #1
    3a8a:	52d1      	strh	r1, [r2, r3]

	module_inst->hw->DEVICE.INTENSET.reg = _usb_device_irq_bits[callback_type];
    3a8c:	687b      	ldr	r3, [r7, #4]
    3a8e:	681b      	ldr	r3, [r3, #0]
    3a90:	1cfa      	adds	r2, r7, #3
    3a92:	7811      	ldrb	r1, [r2, #0]
    3a94:	4a04      	ldr	r2, [pc, #16]	; (3aa8 <usb_device_enable_callback+0x58>)
    3a96:	0049      	lsls	r1, r1, #1
    3a98:	5a8a      	ldrh	r2, [r1, r2]
    3a9a:	831a      	strh	r2, [r3, #24]

	return STATUS_OK;
    3a9c:	2300      	movs	r3, #0
}
    3a9e:	0018      	movs	r0, r3
    3aa0:	46bd      	mov	sp, r7
    3aa2:	b002      	add	sp, #8
    3aa4:	bd80      	pop	{r7, pc}
    3aa6:	46c0      	nop			; (mov r8, r8)
    3aa8:	0001f83c 	.word	0x0001f83c

00003aac <usb_device_disable_callback>:
 * \return Status of the callback disable operation.
 * \retval STATUS_OK    The callback was disabled successfully.
 */
enum status_code usb_device_disable_callback(struct usb_module *module_inst,
		enum usb_device_callback callback_type)
{
    3aac:	b580      	push	{r7, lr}
    3aae:	b082      	sub	sp, #8
    3ab0:	af00      	add	r7, sp, #0
    3ab2:	6078      	str	r0, [r7, #4]
    3ab4:	000a      	movs	r2, r1
    3ab6:	1cfb      	adds	r3, r7, #3
    3ab8:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Disable callback */
	module_inst->device_enabled_callback_mask &= ~_usb_device_irq_bits[callback_type];
    3aba:	687a      	ldr	r2, [r7, #4]
    3abc:	23ab      	movs	r3, #171	; 0xab
    3abe:	005b      	lsls	r3, r3, #1
    3ac0:	5ad3      	ldrh	r3, [r2, r3]
    3ac2:	b21b      	sxth	r3, r3
    3ac4:	1cfa      	adds	r2, r7, #3
    3ac6:	7811      	ldrb	r1, [r2, #0]
    3ac8:	4a0c      	ldr	r2, [pc, #48]	; (3afc <usb_device_disable_callback+0x50>)
    3aca:	0049      	lsls	r1, r1, #1
    3acc:	5a8a      	ldrh	r2, [r1, r2]
    3ace:	b212      	sxth	r2, r2
    3ad0:	43d2      	mvns	r2, r2
    3ad2:	b212      	sxth	r2, r2
    3ad4:	4013      	ands	r3, r2
    3ad6:	b21b      	sxth	r3, r3
    3ad8:	b299      	uxth	r1, r3
    3ada:	687a      	ldr	r2, [r7, #4]
    3adc:	23ab      	movs	r3, #171	; 0xab
    3ade:	005b      	lsls	r3, r3, #1
    3ae0:	52d1      	strh	r1, [r2, r3]

	module_inst->hw->DEVICE.INTENCLR.reg = _usb_device_irq_bits[callback_type];
    3ae2:	687b      	ldr	r3, [r7, #4]
    3ae4:	681b      	ldr	r3, [r3, #0]
    3ae6:	1cfa      	adds	r2, r7, #3
    3ae8:	7811      	ldrb	r1, [r2, #0]
    3aea:	4a04      	ldr	r2, [pc, #16]	; (3afc <usb_device_disable_callback+0x50>)
    3aec:	0049      	lsls	r1, r1, #1
    3aee:	5a8a      	ldrh	r2, [r1, r2]
    3af0:	829a      	strh	r2, [r3, #20]

	return STATUS_OK;
    3af2:	2300      	movs	r3, #0
}
    3af4:	0018      	movs	r0, r3
    3af6:	46bd      	mov	sp, r7
    3af8:	b002      	add	sp, #8
    3afa:	bd80      	pop	{r7, pc}
    3afc:	0001f83c 	.word	0x0001f83c

00003b00 <usb_device_endpoint_register_callback>:
 */
enum status_code usb_device_endpoint_register_callback(
		struct usb_module *module_inst, uint8_t ep_num,
		enum usb_device_endpoint_callback callback_type,
		usb_device_endpoint_callback_t callback_func)
{
    3b00:	b580      	push	{r7, lr}
    3b02:	b084      	sub	sp, #16
    3b04:	af00      	add	r7, sp, #0
    3b06:	60f8      	str	r0, [r7, #12]
    3b08:	0008      	movs	r0, r1
    3b0a:	0011      	movs	r1, r2
    3b0c:	607b      	str	r3, [r7, #4]
    3b0e:	230b      	movs	r3, #11
    3b10:	18fb      	adds	r3, r7, r3
    3b12:	1c02      	adds	r2, r0, #0
    3b14:	701a      	strb	r2, [r3, #0]
    3b16:	230a      	movs	r3, #10
    3b18:	18fb      	adds	r3, r7, r3
    3b1a:	1c0a      	adds	r2, r1, #0
    3b1c:	701a      	strb	r2, [r3, #0]
	Assert(module_inst);
	Assert(ep_num < USB_EPT_NUM);
	Assert(callback_func);

	/* Register callback function */
	module_inst->device_endpoint_callback[ep_num][callback_type] = callback_func;
    3b1e:	230b      	movs	r3, #11
    3b20:	18fb      	adds	r3, r7, r3
    3b22:	7819      	ldrb	r1, [r3, #0]
    3b24:	230a      	movs	r3, #10
    3b26:	18fb      	adds	r3, r7, r3
    3b28:	781b      	ldrb	r3, [r3, #0]
    3b2a:	68fa      	ldr	r2, [r7, #12]
    3b2c:	0089      	lsls	r1, r1, #2
    3b2e:	18cb      	adds	r3, r1, r3
    3b30:	3334      	adds	r3, #52	; 0x34
    3b32:	009b      	lsls	r3, r3, #2
    3b34:	18d3      	adds	r3, r2, r3
    3b36:	3304      	adds	r3, #4
    3b38:	687a      	ldr	r2, [r7, #4]
    3b3a:	601a      	str	r2, [r3, #0]

	/* Set the bit corresponding to the callback_type */
	module_inst->device_endpoint_registered_callback_mask[ep_num] |= _usb_endpoint_irq_bits[callback_type];
    3b3c:	230b      	movs	r3, #11
    3b3e:	18fb      	adds	r3, r7, r3
    3b40:	781a      	ldrb	r2, [r3, #0]
    3b42:	230b      	movs	r3, #11
    3b44:	18fb      	adds	r3, r7, r3
    3b46:	7819      	ldrb	r1, [r3, #0]
    3b48:	68f8      	ldr	r0, [r7, #12]
    3b4a:	23ac      	movs	r3, #172	; 0xac
    3b4c:	005b      	lsls	r3, r3, #1
    3b4e:	1841      	adds	r1, r0, r1
    3b50:	18cb      	adds	r3, r1, r3
    3b52:	7819      	ldrb	r1, [r3, #0]
    3b54:	230a      	movs	r3, #10
    3b56:	18fb      	adds	r3, r7, r3
    3b58:	781b      	ldrb	r3, [r3, #0]
    3b5a:	4808      	ldr	r0, [pc, #32]	; (3b7c <usb_device_endpoint_register_callback+0x7c>)
    3b5c:	5cc3      	ldrb	r3, [r0, r3]
    3b5e:	430b      	orrs	r3, r1
    3b60:	b2d8      	uxtb	r0, r3
    3b62:	68f9      	ldr	r1, [r7, #12]
    3b64:	23ac      	movs	r3, #172	; 0xac
    3b66:	005b      	lsls	r3, r3, #1
    3b68:	188a      	adds	r2, r1, r2
    3b6a:	18d3      	adds	r3, r2, r3
    3b6c:	1c02      	adds	r2, r0, #0
    3b6e:	701a      	strb	r2, [r3, #0]

	return STATUS_OK;
    3b70:	2300      	movs	r3, #0
}
    3b72:	0018      	movs	r0, r3
    3b74:	46bd      	mov	sp, r7
    3b76:	b004      	add	sp, #16
    3b78:	bd80      	pop	{r7, pc}
    3b7a:	46c0      	nop			; (mov r8, r8)
    3b7c:	0001f84c 	.word	0x0001f84c

00003b80 <usb_device_endpoint_unregister_callback>:
 * \retval STATUS_OK    The callback was unregistered successfully.
 */
enum status_code usb_device_endpoint_unregister_callback(
		struct usb_module *module_inst, uint8_t ep_num,
		enum usb_device_endpoint_callback callback_type)
{
    3b80:	b580      	push	{r7, lr}
    3b82:	b082      	sub	sp, #8
    3b84:	af00      	add	r7, sp, #0
    3b86:	6078      	str	r0, [r7, #4]
    3b88:	0008      	movs	r0, r1
    3b8a:	0011      	movs	r1, r2
    3b8c:	1cfb      	adds	r3, r7, #3
    3b8e:	1c02      	adds	r2, r0, #0
    3b90:	701a      	strb	r2, [r3, #0]
    3b92:	1cbb      	adds	r3, r7, #2
    3b94:	1c0a      	adds	r2, r1, #0
    3b96:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(ep_num < USB_EPT_NUM);

	/* Unregister callback function */
	module_inst->device_endpoint_callback[ep_num][callback_type] = NULL;
    3b98:	1cfb      	adds	r3, r7, #3
    3b9a:	7819      	ldrb	r1, [r3, #0]
    3b9c:	1cbb      	adds	r3, r7, #2
    3b9e:	781b      	ldrb	r3, [r3, #0]
    3ba0:	687a      	ldr	r2, [r7, #4]
    3ba2:	0089      	lsls	r1, r1, #2
    3ba4:	18cb      	adds	r3, r1, r3
    3ba6:	3334      	adds	r3, #52	; 0x34
    3ba8:	009b      	lsls	r3, r3, #2
    3baa:	18d3      	adds	r3, r2, r3
    3bac:	3304      	adds	r3, #4
    3bae:	2200      	movs	r2, #0
    3bb0:	601a      	str	r2, [r3, #0]

	/* Clear the bit corresponding to the callback_type */
	module_inst->device_endpoint_registered_callback_mask[ep_num] &= ~_usb_endpoint_irq_bits[callback_type];
    3bb2:	1cfb      	adds	r3, r7, #3
    3bb4:	781a      	ldrb	r2, [r3, #0]
    3bb6:	1cfb      	adds	r3, r7, #3
    3bb8:	7819      	ldrb	r1, [r3, #0]
    3bba:	6878      	ldr	r0, [r7, #4]
    3bbc:	23ac      	movs	r3, #172	; 0xac
    3bbe:	005b      	lsls	r3, r3, #1
    3bc0:	1841      	adds	r1, r0, r1
    3bc2:	18cb      	adds	r3, r1, r3
    3bc4:	781b      	ldrb	r3, [r3, #0]
    3bc6:	b25b      	sxtb	r3, r3
    3bc8:	1cb9      	adds	r1, r7, #2
    3bca:	7809      	ldrb	r1, [r1, #0]
    3bcc:	4809      	ldr	r0, [pc, #36]	; (3bf4 <usb_device_endpoint_unregister_callback+0x74>)
    3bce:	5c41      	ldrb	r1, [r0, r1]
    3bd0:	b249      	sxtb	r1, r1
    3bd2:	43c9      	mvns	r1, r1
    3bd4:	b249      	sxtb	r1, r1
    3bd6:	400b      	ands	r3, r1
    3bd8:	b25b      	sxtb	r3, r3
    3bda:	b2d8      	uxtb	r0, r3
    3bdc:	6879      	ldr	r1, [r7, #4]
    3bde:	23ac      	movs	r3, #172	; 0xac
    3be0:	005b      	lsls	r3, r3, #1
    3be2:	188a      	adds	r2, r1, r2
    3be4:	18d3      	adds	r3, r2, r3
    3be6:	1c02      	adds	r2, r0, #0
    3be8:	701a      	strb	r2, [r3, #0]

	return STATUS_OK;
    3bea:	2300      	movs	r3, #0
}
    3bec:	0018      	movs	r0, r3
    3bee:	46bd      	mov	sp, r7
    3bf0:	b002      	add	sp, #8
    3bf2:	bd80      	pop	{r7, pc}
    3bf4:	0001f84c 	.word	0x0001f84c

00003bf8 <usb_device_endpoint_enable_callback>:
 * \retval STATUS_OK    The callback was enabled successfully.
 */
enum status_code usb_device_endpoint_enable_callback(
		struct usb_module *module_inst, uint8_t ep,
		enum usb_device_endpoint_callback callback_type)
{
    3bf8:	b580      	push	{r7, lr}
    3bfa:	b084      	sub	sp, #16
    3bfc:	af00      	add	r7, sp, #0
    3bfe:	6078      	str	r0, [r7, #4]
    3c00:	0008      	movs	r0, r1
    3c02:	0011      	movs	r1, r2
    3c04:	1cfb      	adds	r3, r7, #3
    3c06:	1c02      	adds	r2, r0, #0
    3c08:	701a      	strb	r2, [r3, #0]
    3c0a:	1cbb      	adds	r3, r7, #2
    3c0c:	1c0a      	adds	r2, r1, #0
    3c0e:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
    3c10:	230f      	movs	r3, #15
    3c12:	18fb      	adds	r3, r7, r3
    3c14:	1cfa      	adds	r2, r7, #3
    3c16:	7812      	ldrb	r2, [r2, #0]
    3c18:	210f      	movs	r1, #15
    3c1a:	400a      	ands	r2, r1
    3c1c:	701a      	strb	r2, [r3, #0]
	Assert(ep_num < USB_EPT_NUM);

	/* Enable callback */
	module_inst->device_endpoint_enabled_callback_mask[ep_num] |= _usb_endpoint_irq_bits[callback_type];
    3c1e:	230f      	movs	r3, #15
    3c20:	18fb      	adds	r3, r7, r3
    3c22:	781a      	ldrb	r2, [r3, #0]
    3c24:	230f      	movs	r3, #15
    3c26:	18fb      	adds	r3, r7, r3
    3c28:	7819      	ldrb	r1, [r3, #0]
    3c2a:	6878      	ldr	r0, [r7, #4]
    3c2c:	23b0      	movs	r3, #176	; 0xb0
    3c2e:	005b      	lsls	r3, r3, #1
    3c30:	1841      	adds	r1, r0, r1
    3c32:	18cb      	adds	r3, r1, r3
    3c34:	7819      	ldrb	r1, [r3, #0]
    3c36:	1cbb      	adds	r3, r7, #2
    3c38:	781b      	ldrb	r3, [r3, #0]
    3c3a:	4855      	ldr	r0, [pc, #340]	; (3d90 <usb_device_endpoint_enable_callback+0x198>)
    3c3c:	5cc3      	ldrb	r3, [r0, r3]
    3c3e:	430b      	orrs	r3, r1
    3c40:	b2d8      	uxtb	r0, r3
    3c42:	6879      	ldr	r1, [r7, #4]
    3c44:	23b0      	movs	r3, #176	; 0xb0
    3c46:	005b      	lsls	r3, r3, #1
    3c48:	188a      	adds	r2, r1, r2
    3c4a:	18d3      	adds	r3, r2, r3
    3c4c:	1c02      	adds	r2, r0, #0
    3c4e:	701a      	strb	r2, [r3, #0]

	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_TRCPT) {
    3c50:	1cbb      	adds	r3, r7, #2
    3c52:	781b      	ldrb	r3, [r3, #0]
    3c54:	2b00      	cmp	r3, #0
    3c56:	d12f      	bne.n	3cb8 <usb_device_endpoint_enable_callback+0xc0>
		if (ep_num == 0) { // control endpoint
    3c58:	230f      	movs	r3, #15
    3c5a:	18fb      	adds	r3, r7, r3
    3c5c:	781b      	ldrb	r3, [r3, #0]
    3c5e:	2b00      	cmp	r3, #0
    3c60:	d10c      	bne.n	3c7c <usb_device_endpoint_enable_callback+0x84>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_TRCPT0 | USB_DEVICE_EPINTENSET_TRCPT1;
    3c62:	687b      	ldr	r3, [r7, #4]
    3c64:	6819      	ldr	r1, [r3, #0]
    3c66:	230f      	movs	r3, #15
    3c68:	18fb      	adds	r3, r7, r3
    3c6a:	781a      	ldrb	r2, [r3, #0]
    3c6c:	230a      	movs	r3, #10
    3c6e:	33ff      	adds	r3, #255	; 0xff
    3c70:	0152      	lsls	r2, r2, #5
    3c72:	188a      	adds	r2, r1, r2
    3c74:	18d3      	adds	r3, r2, r3
    3c76:	2203      	movs	r2, #3
    3c78:	701a      	strb	r2, [r3, #0]
    3c7a:	e01d      	b.n	3cb8 <usb_device_endpoint_enable_callback+0xc0>
		} else if (ep & USB_EP_DIR_IN) {
    3c7c:	1cfb      	adds	r3, r7, #3
    3c7e:	781b      	ldrb	r3, [r3, #0]
    3c80:	b25b      	sxtb	r3, r3
    3c82:	2b00      	cmp	r3, #0
    3c84:	da0c      	bge.n	3ca0 <usb_device_endpoint_enable_callback+0xa8>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_TRCPT1;
    3c86:	687b      	ldr	r3, [r7, #4]
    3c88:	6819      	ldr	r1, [r3, #0]
    3c8a:	230f      	movs	r3, #15
    3c8c:	18fb      	adds	r3, r7, r3
    3c8e:	781a      	ldrb	r2, [r3, #0]
    3c90:	230a      	movs	r3, #10
    3c92:	33ff      	adds	r3, #255	; 0xff
    3c94:	0152      	lsls	r2, r2, #5
    3c96:	188a      	adds	r2, r1, r2
    3c98:	18d3      	adds	r3, r2, r3
    3c9a:	2202      	movs	r2, #2
    3c9c:	701a      	strb	r2, [r3, #0]
    3c9e:	e00b      	b.n	3cb8 <usb_device_endpoint_enable_callback+0xc0>
		} else {
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_TRCPT0;
    3ca0:	687b      	ldr	r3, [r7, #4]
    3ca2:	6819      	ldr	r1, [r3, #0]
    3ca4:	230f      	movs	r3, #15
    3ca6:	18fb      	adds	r3, r7, r3
    3ca8:	781a      	ldrb	r2, [r3, #0]
    3caa:	230a      	movs	r3, #10
    3cac:	33ff      	adds	r3, #255	; 0xff
    3cae:	0152      	lsls	r2, r2, #5
    3cb0:	188a      	adds	r2, r1, r2
    3cb2:	18d3      	adds	r3, r2, r3
    3cb4:	2201      	movs	r2, #1
    3cb6:	701a      	strb	r2, [r3, #0]
		}
	}

	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_TRFAIL) {
    3cb8:	1cbb      	adds	r3, r7, #2
    3cba:	781b      	ldrb	r3, [r3, #0]
    3cbc:	2b01      	cmp	r3, #1
    3cbe:	d12f      	bne.n	3d20 <usb_device_endpoint_enable_callback+0x128>
		if (ep_num == 0) { // control endpoint
    3cc0:	230f      	movs	r3, #15
    3cc2:	18fb      	adds	r3, r7, r3
    3cc4:	781b      	ldrb	r3, [r3, #0]
    3cc6:	2b00      	cmp	r3, #0
    3cc8:	d10c      	bne.n	3ce4 <usb_device_endpoint_enable_callback+0xec>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_TRFAIL0 | USB_DEVICE_EPINTENSET_TRFAIL1;
    3cca:	687b      	ldr	r3, [r7, #4]
    3ccc:	6819      	ldr	r1, [r3, #0]
    3cce:	230f      	movs	r3, #15
    3cd0:	18fb      	adds	r3, r7, r3
    3cd2:	781a      	ldrb	r2, [r3, #0]
    3cd4:	230a      	movs	r3, #10
    3cd6:	33ff      	adds	r3, #255	; 0xff
    3cd8:	0152      	lsls	r2, r2, #5
    3cda:	188a      	adds	r2, r1, r2
    3cdc:	18d3      	adds	r3, r2, r3
    3cde:	220c      	movs	r2, #12
    3ce0:	701a      	strb	r2, [r3, #0]
    3ce2:	e01d      	b.n	3d20 <usb_device_endpoint_enable_callback+0x128>
		} else if (ep & USB_EP_DIR_IN) {
    3ce4:	1cfb      	adds	r3, r7, #3
    3ce6:	781b      	ldrb	r3, [r3, #0]
    3ce8:	b25b      	sxtb	r3, r3
    3cea:	2b00      	cmp	r3, #0
    3cec:	da0c      	bge.n	3d08 <usb_device_endpoint_enable_callback+0x110>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_TRFAIL1;
    3cee:	687b      	ldr	r3, [r7, #4]
    3cf0:	6819      	ldr	r1, [r3, #0]
    3cf2:	230f      	movs	r3, #15
    3cf4:	18fb      	adds	r3, r7, r3
    3cf6:	781a      	ldrb	r2, [r3, #0]
    3cf8:	230a      	movs	r3, #10
    3cfa:	33ff      	adds	r3, #255	; 0xff
    3cfc:	0152      	lsls	r2, r2, #5
    3cfe:	188a      	adds	r2, r1, r2
    3d00:	18d3      	adds	r3, r2, r3
    3d02:	2208      	movs	r2, #8
    3d04:	701a      	strb	r2, [r3, #0]
    3d06:	e00b      	b.n	3d20 <usb_device_endpoint_enable_callback+0x128>
		} else {
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_TRFAIL0;
    3d08:	687b      	ldr	r3, [r7, #4]
    3d0a:	6819      	ldr	r1, [r3, #0]
    3d0c:	230f      	movs	r3, #15
    3d0e:	18fb      	adds	r3, r7, r3
    3d10:	781a      	ldrb	r2, [r3, #0]
    3d12:	230a      	movs	r3, #10
    3d14:	33ff      	adds	r3, #255	; 0xff
    3d16:	0152      	lsls	r2, r2, #5
    3d18:	188a      	adds	r2, r1, r2
    3d1a:	18d3      	adds	r3, r2, r3
    3d1c:	2204      	movs	r2, #4
    3d1e:	701a      	strb	r2, [r3, #0]
		}
	}

	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_RXSTP) {
    3d20:	1cbb      	adds	r3, r7, #2
    3d22:	781b      	ldrb	r3, [r3, #0]
    3d24:	2b02      	cmp	r3, #2
    3d26:	d10b      	bne.n	3d40 <usb_device_endpoint_enable_callback+0x148>
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_RXSTP;
    3d28:	687b      	ldr	r3, [r7, #4]
    3d2a:	6819      	ldr	r1, [r3, #0]
    3d2c:	230f      	movs	r3, #15
    3d2e:	18fb      	adds	r3, r7, r3
    3d30:	781a      	ldrb	r2, [r3, #0]
    3d32:	230a      	movs	r3, #10
    3d34:	33ff      	adds	r3, #255	; 0xff
    3d36:	0152      	lsls	r2, r2, #5
    3d38:	188a      	adds	r2, r1, r2
    3d3a:	18d3      	adds	r3, r2, r3
    3d3c:	2210      	movs	r2, #16
    3d3e:	701a      	strb	r2, [r3, #0]
	}

	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_STALL) {
    3d40:	1cbb      	adds	r3, r7, #2
    3d42:	781b      	ldrb	r3, [r3, #0]
    3d44:	2b03      	cmp	r3, #3
    3d46:	d11d      	bne.n	3d84 <usb_device_endpoint_enable_callback+0x18c>
		if (ep & USB_EP_DIR_IN) {
    3d48:	1cfb      	adds	r3, r7, #3
    3d4a:	781b      	ldrb	r3, [r3, #0]
    3d4c:	b25b      	sxtb	r3, r3
    3d4e:	2b00      	cmp	r3, #0
    3d50:	da0c      	bge.n	3d6c <usb_device_endpoint_enable_callback+0x174>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_STALL1;
    3d52:	687b      	ldr	r3, [r7, #4]
    3d54:	6819      	ldr	r1, [r3, #0]
    3d56:	230f      	movs	r3, #15
    3d58:	18fb      	adds	r3, r7, r3
    3d5a:	781a      	ldrb	r2, [r3, #0]
    3d5c:	230a      	movs	r3, #10
    3d5e:	33ff      	adds	r3, #255	; 0xff
    3d60:	0152      	lsls	r2, r2, #5
    3d62:	188a      	adds	r2, r1, r2
    3d64:	18d3      	adds	r3, r2, r3
    3d66:	2240      	movs	r2, #64	; 0x40
    3d68:	701a      	strb	r2, [r3, #0]
    3d6a:	e00b      	b.n	3d84 <usb_device_endpoint_enable_callback+0x18c>
		} else {
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_STALL0;
    3d6c:	687b      	ldr	r3, [r7, #4]
    3d6e:	6819      	ldr	r1, [r3, #0]
    3d70:	230f      	movs	r3, #15
    3d72:	18fb      	adds	r3, r7, r3
    3d74:	781a      	ldrb	r2, [r3, #0]
    3d76:	230a      	movs	r3, #10
    3d78:	33ff      	adds	r3, #255	; 0xff
    3d7a:	0152      	lsls	r2, r2, #5
    3d7c:	188a      	adds	r2, r1, r2
    3d7e:	18d3      	adds	r3, r2, r3
    3d80:	2220      	movs	r2, #32
    3d82:	701a      	strb	r2, [r3, #0]
		}
	}

	return STATUS_OK;
    3d84:	2300      	movs	r3, #0
}
    3d86:	0018      	movs	r0, r3
    3d88:	46bd      	mov	sp, r7
    3d8a:	b004      	add	sp, #16
    3d8c:	bd80      	pop	{r7, pc}
    3d8e:	46c0      	nop			; (mov r8, r8)
    3d90:	0001f84c 	.word	0x0001f84c

00003d94 <usb_device_endpoint_disable_callback>:
 * \retval STATUS_OK    The callback was disabled successfully.
 */
enum status_code usb_device_endpoint_disable_callback(
		struct usb_module *module_inst, uint8_t ep,
		enum usb_device_endpoint_callback callback_type)
{
    3d94:	b580      	push	{r7, lr}
    3d96:	b084      	sub	sp, #16
    3d98:	af00      	add	r7, sp, #0
    3d9a:	6078      	str	r0, [r7, #4]
    3d9c:	0008      	movs	r0, r1
    3d9e:	0011      	movs	r1, r2
    3da0:	1cfb      	adds	r3, r7, #3
    3da2:	1c02      	adds	r2, r0, #0
    3da4:	701a      	strb	r2, [r3, #0]
    3da6:	1cbb      	adds	r3, r7, #2
    3da8:	1c0a      	adds	r2, r1, #0
    3daa:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
    3dac:	230f      	movs	r3, #15
    3dae:	18fb      	adds	r3, r7, r3
    3db0:	1cfa      	adds	r2, r7, #3
    3db2:	7812      	ldrb	r2, [r2, #0]
    3db4:	210f      	movs	r1, #15
    3db6:	400a      	ands	r2, r1
    3db8:	701a      	strb	r2, [r3, #0]
	Assert(ep_num < USB_EPT_NUM);

	/* Enable callback */
	module_inst->device_endpoint_enabled_callback_mask[ep_num] &= ~_usb_endpoint_irq_bits[callback_type];
    3dba:	230f      	movs	r3, #15
    3dbc:	18fb      	adds	r3, r7, r3
    3dbe:	781a      	ldrb	r2, [r3, #0]
    3dc0:	230f      	movs	r3, #15
    3dc2:	18fb      	adds	r3, r7, r3
    3dc4:	7819      	ldrb	r1, [r3, #0]
    3dc6:	6878      	ldr	r0, [r7, #4]
    3dc8:	23b0      	movs	r3, #176	; 0xb0
    3dca:	005b      	lsls	r3, r3, #1
    3dcc:	1841      	adds	r1, r0, r1
    3dce:	18cb      	adds	r3, r1, r3
    3dd0:	781b      	ldrb	r3, [r3, #0]
    3dd2:	b25b      	sxtb	r3, r3
    3dd4:	1cb9      	adds	r1, r7, #2
    3dd6:	7809      	ldrb	r1, [r1, #0]
    3dd8:	4856      	ldr	r0, [pc, #344]	; (3f34 <usb_device_endpoint_disable_callback+0x1a0>)
    3dda:	5c41      	ldrb	r1, [r0, r1]
    3ddc:	b249      	sxtb	r1, r1
    3dde:	43c9      	mvns	r1, r1
    3de0:	b249      	sxtb	r1, r1
    3de2:	400b      	ands	r3, r1
    3de4:	b25b      	sxtb	r3, r3
    3de6:	b2d8      	uxtb	r0, r3
    3de8:	6879      	ldr	r1, [r7, #4]
    3dea:	23b0      	movs	r3, #176	; 0xb0
    3dec:	005b      	lsls	r3, r3, #1
    3dee:	188a      	adds	r2, r1, r2
    3df0:	18d3      	adds	r3, r2, r3
    3df2:	1c02      	adds	r2, r0, #0
    3df4:	701a      	strb	r2, [r3, #0]

	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_TRCPT) {
    3df6:	1cbb      	adds	r3, r7, #2
    3df8:	781b      	ldrb	r3, [r3, #0]
    3dfa:	2b00      	cmp	r3, #0
    3dfc:	d12f      	bne.n	3e5e <usb_device_endpoint_disable_callback+0xca>
		if (ep_num == 0) { // control endpoint
    3dfe:	230f      	movs	r3, #15
    3e00:	18fb      	adds	r3, r7, r3
    3e02:	781b      	ldrb	r3, [r3, #0]
    3e04:	2b00      	cmp	r3, #0
    3e06:	d10c      	bne.n	3e22 <usb_device_endpoint_disable_callback+0x8e>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg =  USB_DEVICE_EPINTENCLR_TRCPT0 | USB_DEVICE_EPINTENCLR_TRCPT1;
    3e08:	687b      	ldr	r3, [r7, #4]
    3e0a:	6819      	ldr	r1, [r3, #0]
    3e0c:	230f      	movs	r3, #15
    3e0e:	18fb      	adds	r3, r7, r3
    3e10:	781a      	ldrb	r2, [r3, #0]
    3e12:	2384      	movs	r3, #132	; 0x84
    3e14:	005b      	lsls	r3, r3, #1
    3e16:	0152      	lsls	r2, r2, #5
    3e18:	188a      	adds	r2, r1, r2
    3e1a:	18d3      	adds	r3, r2, r3
    3e1c:	2203      	movs	r2, #3
    3e1e:	701a      	strb	r2, [r3, #0]
    3e20:	e01d      	b.n	3e5e <usb_device_endpoint_disable_callback+0xca>
		} else if (ep & USB_EP_DIR_IN) {
    3e22:	1cfb      	adds	r3, r7, #3
    3e24:	781b      	ldrb	r3, [r3, #0]
    3e26:	b25b      	sxtb	r3, r3
    3e28:	2b00      	cmp	r3, #0
    3e2a:	da0c      	bge.n	3e46 <usb_device_endpoint_disable_callback+0xb2>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg =  USB_DEVICE_EPINTENCLR_TRCPT1;
    3e2c:	687b      	ldr	r3, [r7, #4]
    3e2e:	6819      	ldr	r1, [r3, #0]
    3e30:	230f      	movs	r3, #15
    3e32:	18fb      	adds	r3, r7, r3
    3e34:	781a      	ldrb	r2, [r3, #0]
    3e36:	2384      	movs	r3, #132	; 0x84
    3e38:	005b      	lsls	r3, r3, #1
    3e3a:	0152      	lsls	r2, r2, #5
    3e3c:	188a      	adds	r2, r1, r2
    3e3e:	18d3      	adds	r3, r2, r3
    3e40:	2202      	movs	r2, #2
    3e42:	701a      	strb	r2, [r3, #0]
    3e44:	e00b      	b.n	3e5e <usb_device_endpoint_disable_callback+0xca>
		} else {
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg =  USB_DEVICE_EPINTENCLR_TRCPT0;
    3e46:	687b      	ldr	r3, [r7, #4]
    3e48:	6819      	ldr	r1, [r3, #0]
    3e4a:	230f      	movs	r3, #15
    3e4c:	18fb      	adds	r3, r7, r3
    3e4e:	781a      	ldrb	r2, [r3, #0]
    3e50:	2384      	movs	r3, #132	; 0x84
    3e52:	005b      	lsls	r3, r3, #1
    3e54:	0152      	lsls	r2, r2, #5
    3e56:	188a      	adds	r2, r1, r2
    3e58:	18d3      	adds	r3, r2, r3
    3e5a:	2201      	movs	r2, #1
    3e5c:	701a      	strb	r2, [r3, #0]
		}
	}

	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_TRFAIL) {
    3e5e:	1cbb      	adds	r3, r7, #2
    3e60:	781b      	ldrb	r3, [r3, #0]
    3e62:	2b01      	cmp	r3, #1
    3e64:	d12f      	bne.n	3ec6 <usb_device_endpoint_disable_callback+0x132>
		if (ep_num == 0) { // control endpoint
    3e66:	230f      	movs	r3, #15
    3e68:	18fb      	adds	r3, r7, r3
    3e6a:	781b      	ldrb	r3, [r3, #0]
    3e6c:	2b00      	cmp	r3, #0
    3e6e:	d10c      	bne.n	3e8a <usb_device_endpoint_disable_callback+0xf6>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_TRFAIL0 | USB_DEVICE_EPINTENCLR_TRFAIL1;
    3e70:	687b      	ldr	r3, [r7, #4]
    3e72:	6819      	ldr	r1, [r3, #0]
    3e74:	230f      	movs	r3, #15
    3e76:	18fb      	adds	r3, r7, r3
    3e78:	781a      	ldrb	r2, [r3, #0]
    3e7a:	2384      	movs	r3, #132	; 0x84
    3e7c:	005b      	lsls	r3, r3, #1
    3e7e:	0152      	lsls	r2, r2, #5
    3e80:	188a      	adds	r2, r1, r2
    3e82:	18d3      	adds	r3, r2, r3
    3e84:	220c      	movs	r2, #12
    3e86:	701a      	strb	r2, [r3, #0]
    3e88:	e01d      	b.n	3ec6 <usb_device_endpoint_disable_callback+0x132>
		} else if (ep & USB_EP_DIR_IN) {
    3e8a:	1cfb      	adds	r3, r7, #3
    3e8c:	781b      	ldrb	r3, [r3, #0]
    3e8e:	b25b      	sxtb	r3, r3
    3e90:	2b00      	cmp	r3, #0
    3e92:	da0c      	bge.n	3eae <usb_device_endpoint_disable_callback+0x11a>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_TRFAIL1;
    3e94:	687b      	ldr	r3, [r7, #4]
    3e96:	6819      	ldr	r1, [r3, #0]
    3e98:	230f      	movs	r3, #15
    3e9a:	18fb      	adds	r3, r7, r3
    3e9c:	781a      	ldrb	r2, [r3, #0]
    3e9e:	2384      	movs	r3, #132	; 0x84
    3ea0:	005b      	lsls	r3, r3, #1
    3ea2:	0152      	lsls	r2, r2, #5
    3ea4:	188a      	adds	r2, r1, r2
    3ea6:	18d3      	adds	r3, r2, r3
    3ea8:	2208      	movs	r2, #8
    3eaa:	701a      	strb	r2, [r3, #0]
    3eac:	e00b      	b.n	3ec6 <usb_device_endpoint_disable_callback+0x132>
		} else {
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_TRFAIL0;
    3eae:	687b      	ldr	r3, [r7, #4]
    3eb0:	6819      	ldr	r1, [r3, #0]
    3eb2:	230f      	movs	r3, #15
    3eb4:	18fb      	adds	r3, r7, r3
    3eb6:	781a      	ldrb	r2, [r3, #0]
    3eb8:	2384      	movs	r3, #132	; 0x84
    3eba:	005b      	lsls	r3, r3, #1
    3ebc:	0152      	lsls	r2, r2, #5
    3ebe:	188a      	adds	r2, r1, r2
    3ec0:	18d3      	adds	r3, r2, r3
    3ec2:	2204      	movs	r2, #4
    3ec4:	701a      	strb	r2, [r3, #0]
		}
	}

	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_RXSTP) {
    3ec6:	1cbb      	adds	r3, r7, #2
    3ec8:	781b      	ldrb	r3, [r3, #0]
    3eca:	2b02      	cmp	r3, #2
    3ecc:	d10b      	bne.n	3ee6 <usb_device_endpoint_disable_callback+0x152>
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_RXSTP;
    3ece:	687b      	ldr	r3, [r7, #4]
    3ed0:	6819      	ldr	r1, [r3, #0]
    3ed2:	230f      	movs	r3, #15
    3ed4:	18fb      	adds	r3, r7, r3
    3ed6:	781a      	ldrb	r2, [r3, #0]
    3ed8:	2384      	movs	r3, #132	; 0x84
    3eda:	005b      	lsls	r3, r3, #1
    3edc:	0152      	lsls	r2, r2, #5
    3ede:	188a      	adds	r2, r1, r2
    3ee0:	18d3      	adds	r3, r2, r3
    3ee2:	2210      	movs	r2, #16
    3ee4:	701a      	strb	r2, [r3, #0]
	}

	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_STALL) {
    3ee6:	1cbb      	adds	r3, r7, #2
    3ee8:	781b      	ldrb	r3, [r3, #0]
    3eea:	2b03      	cmp	r3, #3
    3eec:	d11d      	bne.n	3f2a <usb_device_endpoint_disable_callback+0x196>
		if (ep & USB_EP_DIR_IN) {
    3eee:	1cfb      	adds	r3, r7, #3
    3ef0:	781b      	ldrb	r3, [r3, #0]
    3ef2:	b25b      	sxtb	r3, r3
    3ef4:	2b00      	cmp	r3, #0
    3ef6:	da0c      	bge.n	3f12 <usb_device_endpoint_disable_callback+0x17e>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_STALL1;
    3ef8:	687b      	ldr	r3, [r7, #4]
    3efa:	6819      	ldr	r1, [r3, #0]
    3efc:	230f      	movs	r3, #15
    3efe:	18fb      	adds	r3, r7, r3
    3f00:	781a      	ldrb	r2, [r3, #0]
    3f02:	2384      	movs	r3, #132	; 0x84
    3f04:	005b      	lsls	r3, r3, #1
    3f06:	0152      	lsls	r2, r2, #5
    3f08:	188a      	adds	r2, r1, r2
    3f0a:	18d3      	adds	r3, r2, r3
    3f0c:	2240      	movs	r2, #64	; 0x40
    3f0e:	701a      	strb	r2, [r3, #0]
    3f10:	e00b      	b.n	3f2a <usb_device_endpoint_disable_callback+0x196>
		} else {
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_STALL0;
    3f12:	687b      	ldr	r3, [r7, #4]
    3f14:	6819      	ldr	r1, [r3, #0]
    3f16:	230f      	movs	r3, #15
    3f18:	18fb      	adds	r3, r7, r3
    3f1a:	781a      	ldrb	r2, [r3, #0]
    3f1c:	2384      	movs	r3, #132	; 0x84
    3f1e:	005b      	lsls	r3, r3, #1
    3f20:	0152      	lsls	r2, r2, #5
    3f22:	188a      	adds	r2, r1, r2
    3f24:	18d3      	adds	r3, r2, r3
    3f26:	2220      	movs	r2, #32
    3f28:	701a      	strb	r2, [r3, #0]
		}
	}

	return STATUS_OK;
    3f2a:	2300      	movs	r3, #0
}
    3f2c:	0018      	movs	r0, r3
    3f2e:	46bd      	mov	sp, r7
    3f30:	b004      	add	sp, #16
    3f32:	bd80      	pop	{r7, pc}
    3f34:	0001f84c 	.word	0x0001f84c

00003f38 <usb_device_endpoint_get_config_defaults>:
 * \li endpoint type is control
 *
 * \param[out] ep_config  Configuration structure to initialize to default values
 */
void usb_device_endpoint_get_config_defaults(struct usb_device_endpoint_config *ep_config)
{
    3f38:	b580      	push	{r7, lr}
    3f3a:	b082      	sub	sp, #8
    3f3c:	af00      	add	r7, sp, #0
    3f3e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(ep_config);

	/* Write default config to config struct */
	ep_config->ep_address = 0;
    3f40:	687b      	ldr	r3, [r7, #4]
    3f42:	2200      	movs	r2, #0
    3f44:	701a      	strb	r2, [r3, #0]
	ep_config->ep_size = USB_ENDPOINT_8_BYTE;
    3f46:	687b      	ldr	r3, [r7, #4]
    3f48:	2200      	movs	r2, #0
    3f4a:	705a      	strb	r2, [r3, #1]
	ep_config->auto_zlp = false;
    3f4c:	687b      	ldr	r3, [r7, #4]
    3f4e:	2200      	movs	r2, #0
    3f50:	709a      	strb	r2, [r3, #2]
	ep_config->ep_type = USB_DEVICE_ENDPOINT_TYPE_CONTROL;
    3f52:	687b      	ldr	r3, [r7, #4]
    3f54:	2201      	movs	r2, #1
    3f56:	70da      	strb	r2, [r3, #3]
}
    3f58:	46c0      	nop			; (mov r8, r8)
    3f5a:	46bd      	mov	sp, r7
    3f5c:	b002      	add	sp, #8
    3f5e:	bd80      	pop	{r7, pc}

00003f60 <usb_device_endpoint_set_config>:
 * \retval STATUS_OK         The device endpoint was configured successfully
 * \retval STATUS_ERR_DENIED The endpoint address is already configured
 */
enum status_code usb_device_endpoint_set_config(struct usb_module *module_inst,
		struct usb_device_endpoint_config *ep_config)
{
    3f60:	b590      	push	{r4, r7, lr}
    3f62:	b085      	sub	sp, #20
    3f64:	af00      	add	r7, sp, #0
    3f66:	6078      	str	r0, [r7, #4]
    3f68:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(ep_config);

	uint8_t ep_num = ep_config->ep_address & USB_EP_ADDR_MASK;
    3f6a:	683b      	ldr	r3, [r7, #0]
    3f6c:	781a      	ldrb	r2, [r3, #0]
    3f6e:	230f      	movs	r3, #15
    3f70:	18fb      	adds	r3, r7, r3
    3f72:	210f      	movs	r1, #15
    3f74:	400a      	ands	r2, r1
    3f76:	701a      	strb	r2, [r3, #0]
	uint8_t ep_bank = (ep_config->ep_address & USB_EP_DIR_IN) ? 1 : 0;
    3f78:	683b      	ldr	r3, [r7, #0]
    3f7a:	781b      	ldrb	r3, [r3, #0]
    3f7c:	b25b      	sxtb	r3, r3
    3f7e:	b2db      	uxtb	r3, r3
    3f80:	09db      	lsrs	r3, r3, #7
    3f82:	b2da      	uxtb	r2, r3
    3f84:	230e      	movs	r3, #14
    3f86:	18fb      	adds	r3, r7, r3
    3f88:	701a      	strb	r2, [r3, #0]

	switch (ep_config->ep_type) {
    3f8a:	683b      	ldr	r3, [r7, #0]
    3f8c:	78db      	ldrb	r3, [r3, #3]
    3f8e:	2b04      	cmp	r3, #4
    3f90:	d900      	bls.n	3f94 <usb_device_endpoint_set_config+0x34>
    3f92:	e200      	b.n	4396 <usb_device_endpoint_set_config+0x436>
    3f94:	009a      	lsls	r2, r3, #2
    3f96:	4be4      	ldr	r3, [pc, #912]	; (4328 <usb_device_endpoint_set_config+0x3c8>)
    3f98:	18d3      	adds	r3, r2, r3
    3f9a:	681b      	ldr	r3, [r3, #0]
    3f9c:	469f      	mov	pc, r3
		case USB_DEVICE_ENDPOINT_TYPE_DISABLE:
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg = USB_DEVICE_EPCFG_EPTYPE0(0) |  USB_DEVICE_EPCFG_EPTYPE1(0);
    3f9e:	687b      	ldr	r3, [r7, #4]
    3fa0:	681b      	ldr	r3, [r3, #0]
    3fa2:	220f      	movs	r2, #15
    3fa4:	18ba      	adds	r2, r7, r2
    3fa6:	7812      	ldrb	r2, [r2, #0]
    3fa8:	3208      	adds	r2, #8
    3faa:	0152      	lsls	r2, r2, #5
    3fac:	2100      	movs	r1, #0
    3fae:	54d1      	strb	r1, [r2, r3]
			return STATUS_OK;
    3fb0:	2300      	movs	r3, #0
    3fb2:	e249      	b.n	4448 <usb_device_endpoint_set_config+0x4e8>

		case USB_DEVICE_ENDPOINT_TYPE_CONTROL:
			if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0 && \
    3fb4:	687b      	ldr	r3, [r7, #4]
    3fb6:	681b      	ldr	r3, [r3, #0]
    3fb8:	220f      	movs	r2, #15
    3fba:	18ba      	adds	r2, r7, r2
    3fbc:	7812      	ldrb	r2, [r2, #0]
    3fbe:	3208      	adds	r2, #8
    3fc0:	0152      	lsls	r2, r2, #5
    3fc2:	5cd3      	ldrb	r3, [r2, r3]
    3fc4:	b2db      	uxtb	r3, r3
    3fc6:	001a      	movs	r2, r3
    3fc8:	2307      	movs	r3, #7
    3fca:	4013      	ands	r3, r2
    3fcc:	d130      	bne.n	4030 <usb_device_endpoint_set_config+0xd0>
				(module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0) {
    3fce:	687b      	ldr	r3, [r7, #4]
    3fd0:	681b      	ldr	r3, [r3, #0]
    3fd2:	220f      	movs	r2, #15
    3fd4:	18ba      	adds	r2, r7, r2
    3fd6:	7812      	ldrb	r2, [r2, #0]
    3fd8:	3208      	adds	r2, #8
    3fda:	0152      	lsls	r2, r2, #5
    3fdc:	5cd3      	ldrb	r3, [r2, r3]
    3fde:	b2db      	uxtb	r3, r3
    3fe0:	001a      	movs	r2, r3
    3fe2:	2370      	movs	r3, #112	; 0x70
    3fe4:	4013      	ands	r3, r2
			if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0 && \
    3fe6:	d123      	bne.n	4030 <usb_device_endpoint_set_config+0xd0>
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg = USB_DEVICE_EPCFG_EPTYPE0(1) | USB_DEVICE_EPCFG_EPTYPE1(1);
    3fe8:	687b      	ldr	r3, [r7, #4]
    3fea:	681b      	ldr	r3, [r3, #0]
    3fec:	220f      	movs	r2, #15
    3fee:	18ba      	adds	r2, r7, r2
    3ff0:	7812      	ldrb	r2, [r2, #0]
    3ff2:	3208      	adds	r2, #8
    3ff4:	0152      	lsls	r2, r2, #5
    3ff6:	2111      	movs	r1, #17
    3ff8:	54d1      	strb	r1, [r2, r3]
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
    3ffa:	687b      	ldr	r3, [r7, #4]
    3ffc:	681a      	ldr	r2, [r3, #0]
    3ffe:	230f      	movs	r3, #15
    4000:	18fb      	adds	r3, r7, r3
    4002:	781b      	ldrb	r3, [r3, #0]
    4004:	3308      	adds	r3, #8
    4006:	015b      	lsls	r3, r3, #5
    4008:	18d3      	adds	r3, r2, r3
    400a:	3305      	adds	r3, #5
    400c:	2240      	movs	r2, #64	; 0x40
    400e:	701a      	strb	r2, [r3, #0]
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
    4010:	687b      	ldr	r3, [r7, #4]
    4012:	681a      	ldr	r2, [r3, #0]
    4014:	230f      	movs	r3, #15
    4016:	18fb      	adds	r3, r7, r3
    4018:	781b      	ldrb	r3, [r3, #0]
    401a:	3308      	adds	r3, #8
    401c:	015b      	lsls	r3, r3, #5
    401e:	18d3      	adds	r3, r2, r3
    4020:	3304      	adds	r3, #4
    4022:	2280      	movs	r2, #128	; 0x80
    4024:	701a      	strb	r2, [r3, #0]
			} else {
				return STATUS_ERR_DENIED;
			}
			if (true == ep_config->auto_zlp) {
    4026:	683b      	ldr	r3, [r7, #0]
    4028:	789b      	ldrb	r3, [r3, #2]
    402a:	2b00      	cmp	r3, #0
    402c:	d102      	bne.n	4034 <usb_device_endpoint_set_config+0xd4>
    402e:	e028      	b.n	4082 <usb_device_endpoint_set_config+0x122>
				return STATUS_ERR_DENIED;
    4030:	231c      	movs	r3, #28
    4032:	e209      	b.n	4448 <usb_device_endpoint_set_config+0x4e8>
				usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].PCKSIZE.reg |= USB_DEVICE_PCKSIZE_AUTO_ZLP;
    4034:	230f      	movs	r3, #15
    4036:	18fb      	adds	r3, r7, r3
    4038:	7818      	ldrb	r0, [r3, #0]
    403a:	230f      	movs	r3, #15
    403c:	18fb      	adds	r3, r7, r3
    403e:	781b      	ldrb	r3, [r3, #0]
    4040:	4aba      	ldr	r2, [pc, #744]	; (432c <usb_device_endpoint_set_config+0x3cc>)
    4042:	015b      	lsls	r3, r3, #5
    4044:	18d3      	adds	r3, r2, r3
    4046:	3304      	adds	r3, #4
    4048:	681b      	ldr	r3, [r3, #0]
    404a:	2280      	movs	r2, #128	; 0x80
    404c:	0612      	lsls	r2, r2, #24
    404e:	431a      	orrs	r2, r3
    4050:	49b6      	ldr	r1, [pc, #728]	; (432c <usb_device_endpoint_set_config+0x3cc>)
    4052:	0143      	lsls	r3, r0, #5
    4054:	18cb      	adds	r3, r1, r3
    4056:	3304      	adds	r3, #4
    4058:	601a      	str	r2, [r3, #0]
				usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.reg |= USB_DEVICE_PCKSIZE_AUTO_ZLP;
    405a:	230f      	movs	r3, #15
    405c:	18fb      	adds	r3, r7, r3
    405e:	7818      	ldrb	r0, [r3, #0]
    4060:	230f      	movs	r3, #15
    4062:	18fb      	adds	r3, r7, r3
    4064:	781b      	ldrb	r3, [r3, #0]
    4066:	4ab1      	ldr	r2, [pc, #708]	; (432c <usb_device_endpoint_set_config+0x3cc>)
    4068:	015b      	lsls	r3, r3, #5
    406a:	18d3      	adds	r3, r2, r3
    406c:	3314      	adds	r3, #20
    406e:	681b      	ldr	r3, [r3, #0]
    4070:	2280      	movs	r2, #128	; 0x80
    4072:	0612      	lsls	r2, r2, #24
    4074:	431a      	orrs	r2, r3
    4076:	49ad      	ldr	r1, [pc, #692]	; (432c <usb_device_endpoint_set_config+0x3cc>)
    4078:	0143      	lsls	r3, r0, #5
    407a:	18cb      	adds	r3, r1, r3
    407c:	3314      	adds	r3, #20
    407e:	601a      	str	r2, [r3, #0]
    4080:	e023      	b.n	40ca <usb_device_endpoint_set_config+0x16a>
			} else {
				usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].PCKSIZE.reg &= ~USB_DEVICE_PCKSIZE_AUTO_ZLP;
    4082:	230f      	movs	r3, #15
    4084:	18fb      	adds	r3, r7, r3
    4086:	7818      	ldrb	r0, [r3, #0]
    4088:	230f      	movs	r3, #15
    408a:	18fb      	adds	r3, r7, r3
    408c:	781b      	ldrb	r3, [r3, #0]
    408e:	4aa7      	ldr	r2, [pc, #668]	; (432c <usb_device_endpoint_set_config+0x3cc>)
    4090:	015b      	lsls	r3, r3, #5
    4092:	18d3      	adds	r3, r2, r3
    4094:	3304      	adds	r3, #4
    4096:	681b      	ldr	r3, [r3, #0]
    4098:	005b      	lsls	r3, r3, #1
    409a:	085a      	lsrs	r2, r3, #1
    409c:	49a3      	ldr	r1, [pc, #652]	; (432c <usb_device_endpoint_set_config+0x3cc>)
    409e:	0143      	lsls	r3, r0, #5
    40a0:	18cb      	adds	r3, r1, r3
    40a2:	3304      	adds	r3, #4
    40a4:	601a      	str	r2, [r3, #0]
				usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.reg &= ~USB_DEVICE_PCKSIZE_AUTO_ZLP;
    40a6:	230f      	movs	r3, #15
    40a8:	18fb      	adds	r3, r7, r3
    40aa:	7818      	ldrb	r0, [r3, #0]
    40ac:	230f      	movs	r3, #15
    40ae:	18fb      	adds	r3, r7, r3
    40b0:	781b      	ldrb	r3, [r3, #0]
    40b2:	4a9e      	ldr	r2, [pc, #632]	; (432c <usb_device_endpoint_set_config+0x3cc>)
    40b4:	015b      	lsls	r3, r3, #5
    40b6:	18d3      	adds	r3, r2, r3
    40b8:	3314      	adds	r3, #20
    40ba:	681b      	ldr	r3, [r3, #0]
    40bc:	005b      	lsls	r3, r3, #1
    40be:	085a      	lsrs	r2, r3, #1
    40c0:	499a      	ldr	r1, [pc, #616]	; (432c <usb_device_endpoint_set_config+0x3cc>)
    40c2:	0143      	lsls	r3, r0, #5
    40c4:	18cb      	adds	r3, r1, r3
    40c6:	3314      	adds	r3, #20
    40c8:	601a      	str	r2, [r3, #0]
			}
			usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].PCKSIZE.bit.SIZE = ep_config->ep_size;
    40ca:	230f      	movs	r3, #15
    40cc:	18fb      	adds	r3, r7, r3
    40ce:	781b      	ldrb	r3, [r3, #0]
    40d0:	683a      	ldr	r2, [r7, #0]
    40d2:	7852      	ldrb	r2, [r2, #1]
    40d4:	1c11      	adds	r1, r2, #0
    40d6:	2207      	movs	r2, #7
    40d8:	400a      	ands	r2, r1
    40da:	b2d1      	uxtb	r1, r2
    40dc:	4a93      	ldr	r2, [pc, #588]	; (432c <usb_device_endpoint_set_config+0x3cc>)
    40de:	015b      	lsls	r3, r3, #5
    40e0:	18d3      	adds	r3, r2, r3
    40e2:	685a      	ldr	r2, [r3, #4]
    40e4:	2007      	movs	r0, #7
    40e6:	4001      	ands	r1, r0
    40e8:	0709      	lsls	r1, r1, #28
    40ea:	4891      	ldr	r0, [pc, #580]	; (4330 <usb_device_endpoint_set_config+0x3d0>)
    40ec:	4002      	ands	r2, r0
    40ee:	430a      	orrs	r2, r1
    40f0:	605a      	str	r2, [r3, #4]
			usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.bit.SIZE = ep_config->ep_size;
    40f2:	230f      	movs	r3, #15
    40f4:	18fb      	adds	r3, r7, r3
    40f6:	781b      	ldrb	r3, [r3, #0]
    40f8:	683a      	ldr	r2, [r7, #0]
    40fa:	7852      	ldrb	r2, [r2, #1]
    40fc:	1c11      	adds	r1, r2, #0
    40fe:	2207      	movs	r2, #7
    4100:	400a      	ands	r2, r1
    4102:	b2d1      	uxtb	r1, r2
    4104:	4a89      	ldr	r2, [pc, #548]	; (432c <usb_device_endpoint_set_config+0x3cc>)
    4106:	015b      	lsls	r3, r3, #5
    4108:	18d3      	adds	r3, r2, r3
    410a:	3310      	adds	r3, #16
    410c:	685a      	ldr	r2, [r3, #4]
    410e:	2007      	movs	r0, #7
    4110:	4001      	ands	r1, r0
    4112:	0709      	lsls	r1, r1, #28
    4114:	4886      	ldr	r0, [pc, #536]	; (4330 <usb_device_endpoint_set_config+0x3d0>)
    4116:	4002      	ands	r2, r0
    4118:	430a      	orrs	r2, r1
    411a:	605a      	str	r2, [r3, #4]
			return STATUS_OK;
    411c:	2300      	movs	r3, #0
    411e:	e193      	b.n	4448 <usb_device_endpoint_set_config+0x4e8>

		case USB_DEVICE_ENDPOINT_TYPE_ISOCHRONOUS:
			if (ep_bank) {
    4120:	230e      	movs	r3, #14
    4122:	18fb      	adds	r3, r7, r3
    4124:	781b      	ldrb	r3, [r3, #0]
    4126:	2b00      	cmp	r3, #0
    4128:	d030      	beq.n	418c <usb_device_endpoint_set_config+0x22c>
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0){
    412a:	687b      	ldr	r3, [r7, #4]
    412c:	681b      	ldr	r3, [r3, #0]
    412e:	220f      	movs	r2, #15
    4130:	18ba      	adds	r2, r7, r2
    4132:	7812      	ldrb	r2, [r2, #0]
    4134:	3208      	adds	r2, #8
    4136:	0152      	lsls	r2, r2, #5
    4138:	5cd3      	ldrb	r3, [r2, r3]
    413a:	b2db      	uxtb	r3, r3
    413c:	001a      	movs	r2, r3
    413e:	2370      	movs	r3, #112	; 0x70
    4140:	4013      	ands	r3, r2
    4142:	d121      	bne.n	4188 <usb_device_endpoint_set_config+0x228>
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE1(2);
    4144:	687b      	ldr	r3, [r7, #4]
    4146:	681a      	ldr	r2, [r3, #0]
    4148:	230f      	movs	r3, #15
    414a:	18fb      	adds	r3, r7, r3
    414c:	7819      	ldrb	r1, [r3, #0]
    414e:	687b      	ldr	r3, [r7, #4]
    4150:	681b      	ldr	r3, [r3, #0]
    4152:	200f      	movs	r0, #15
    4154:	1838      	adds	r0, r7, r0
    4156:	7800      	ldrb	r0, [r0, #0]
    4158:	3008      	adds	r0, #8
    415a:	0140      	lsls	r0, r0, #5
    415c:	5cc3      	ldrb	r3, [r0, r3]
    415e:	b2db      	uxtb	r3, r3
    4160:	2020      	movs	r0, #32
    4162:	4303      	orrs	r3, r0
    4164:	b2d8      	uxtb	r0, r3
    4166:	000b      	movs	r3, r1
    4168:	3308      	adds	r3, #8
    416a:	015b      	lsls	r3, r3, #5
    416c:	1c01      	adds	r1, r0, #0
    416e:	5499      	strb	r1, [r3, r2]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
    4170:	687b      	ldr	r3, [r7, #4]
    4172:	681a      	ldr	r2, [r3, #0]
    4174:	230f      	movs	r3, #15
    4176:	18fb      	adds	r3, r7, r3
    4178:	781b      	ldrb	r3, [r3, #0]
    417a:	3308      	adds	r3, #8
    417c:	015b      	lsls	r3, r3, #5
    417e:	18d3      	adds	r3, r2, r3
    4180:	3304      	adds	r3, #4
    4182:	2280      	movs	r2, #128	; 0x80
    4184:	701a      	strb	r2, [r3, #0]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
				} else {
					return STATUS_ERR_DENIED;
				}
			}
			break;
    4186:	e107      	b.n	4398 <usb_device_endpoint_set_config+0x438>
					return STATUS_ERR_DENIED;
    4188:	231c      	movs	r3, #28
    418a:	e15d      	b.n	4448 <usb_device_endpoint_set_config+0x4e8>
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0){
    418c:	687b      	ldr	r3, [r7, #4]
    418e:	681b      	ldr	r3, [r3, #0]
    4190:	220f      	movs	r2, #15
    4192:	18ba      	adds	r2, r7, r2
    4194:	7812      	ldrb	r2, [r2, #0]
    4196:	3208      	adds	r2, #8
    4198:	0152      	lsls	r2, r2, #5
    419a:	5cd3      	ldrb	r3, [r2, r3]
    419c:	b2db      	uxtb	r3, r3
    419e:	001a      	movs	r2, r3
    41a0:	2307      	movs	r3, #7
    41a2:	4013      	ands	r3, r2
    41a4:	d121      	bne.n	41ea <usb_device_endpoint_set_config+0x28a>
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE0(2);
    41a6:	687b      	ldr	r3, [r7, #4]
    41a8:	681a      	ldr	r2, [r3, #0]
    41aa:	230f      	movs	r3, #15
    41ac:	18fb      	adds	r3, r7, r3
    41ae:	7819      	ldrb	r1, [r3, #0]
    41b0:	687b      	ldr	r3, [r7, #4]
    41b2:	681b      	ldr	r3, [r3, #0]
    41b4:	200f      	movs	r0, #15
    41b6:	1838      	adds	r0, r7, r0
    41b8:	7800      	ldrb	r0, [r0, #0]
    41ba:	3008      	adds	r0, #8
    41bc:	0140      	lsls	r0, r0, #5
    41be:	5cc3      	ldrb	r3, [r0, r3]
    41c0:	b2db      	uxtb	r3, r3
    41c2:	2002      	movs	r0, #2
    41c4:	4303      	orrs	r3, r0
    41c6:	b2d8      	uxtb	r0, r3
    41c8:	000b      	movs	r3, r1
    41ca:	3308      	adds	r3, #8
    41cc:	015b      	lsls	r3, r3, #5
    41ce:	1c01      	adds	r1, r0, #0
    41d0:	5499      	strb	r1, [r3, r2]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
    41d2:	687b      	ldr	r3, [r7, #4]
    41d4:	681a      	ldr	r2, [r3, #0]
    41d6:	230f      	movs	r3, #15
    41d8:	18fb      	adds	r3, r7, r3
    41da:	781b      	ldrb	r3, [r3, #0]
    41dc:	3308      	adds	r3, #8
    41de:	015b      	lsls	r3, r3, #5
    41e0:	18d3      	adds	r3, r2, r3
    41e2:	3305      	adds	r3, #5
    41e4:	2240      	movs	r2, #64	; 0x40
    41e6:	701a      	strb	r2, [r3, #0]
			break;
    41e8:	e0d6      	b.n	4398 <usb_device_endpoint_set_config+0x438>
					return STATUS_ERR_DENIED;
    41ea:	231c      	movs	r3, #28
    41ec:	e12c      	b.n	4448 <usb_device_endpoint_set_config+0x4e8>

		case USB_DEVICE_ENDPOINT_TYPE_BULK:
			if (ep_bank) {
    41ee:	230e      	movs	r3, #14
    41f0:	18fb      	adds	r3, r7, r3
    41f2:	781b      	ldrb	r3, [r3, #0]
    41f4:	2b00      	cmp	r3, #0
    41f6:	d030      	beq.n	425a <usb_device_endpoint_set_config+0x2fa>
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0){
    41f8:	687b      	ldr	r3, [r7, #4]
    41fa:	681b      	ldr	r3, [r3, #0]
    41fc:	220f      	movs	r2, #15
    41fe:	18ba      	adds	r2, r7, r2
    4200:	7812      	ldrb	r2, [r2, #0]
    4202:	3208      	adds	r2, #8
    4204:	0152      	lsls	r2, r2, #5
    4206:	5cd3      	ldrb	r3, [r2, r3]
    4208:	b2db      	uxtb	r3, r3
    420a:	001a      	movs	r2, r3
    420c:	2370      	movs	r3, #112	; 0x70
    420e:	4013      	ands	r3, r2
    4210:	d121      	bne.n	4256 <usb_device_endpoint_set_config+0x2f6>
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE1(3);
    4212:	687b      	ldr	r3, [r7, #4]
    4214:	681a      	ldr	r2, [r3, #0]
    4216:	230f      	movs	r3, #15
    4218:	18fb      	adds	r3, r7, r3
    421a:	7819      	ldrb	r1, [r3, #0]
    421c:	687b      	ldr	r3, [r7, #4]
    421e:	681b      	ldr	r3, [r3, #0]
    4220:	200f      	movs	r0, #15
    4222:	1838      	adds	r0, r7, r0
    4224:	7800      	ldrb	r0, [r0, #0]
    4226:	3008      	adds	r0, #8
    4228:	0140      	lsls	r0, r0, #5
    422a:	5cc3      	ldrb	r3, [r0, r3]
    422c:	b2db      	uxtb	r3, r3
    422e:	2030      	movs	r0, #48	; 0x30
    4230:	4303      	orrs	r3, r0
    4232:	b2d8      	uxtb	r0, r3
    4234:	000b      	movs	r3, r1
    4236:	3308      	adds	r3, #8
    4238:	015b      	lsls	r3, r3, #5
    423a:	1c01      	adds	r1, r0, #0
    423c:	5499      	strb	r1, [r3, r2]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
    423e:	687b      	ldr	r3, [r7, #4]
    4240:	681a      	ldr	r2, [r3, #0]
    4242:	230f      	movs	r3, #15
    4244:	18fb      	adds	r3, r7, r3
    4246:	781b      	ldrb	r3, [r3, #0]
    4248:	3308      	adds	r3, #8
    424a:	015b      	lsls	r3, r3, #5
    424c:	18d3      	adds	r3, r2, r3
    424e:	3304      	adds	r3, #4
    4250:	2280      	movs	r2, #128	; 0x80
    4252:	701a      	strb	r2, [r3, #0]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
				} else {
					return STATUS_ERR_DENIED;
				}
			}
			break;
    4254:	e0a0      	b.n	4398 <usb_device_endpoint_set_config+0x438>
					return STATUS_ERR_DENIED;
    4256:	231c      	movs	r3, #28
    4258:	e0f6      	b.n	4448 <usb_device_endpoint_set_config+0x4e8>
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0){
    425a:	687b      	ldr	r3, [r7, #4]
    425c:	681b      	ldr	r3, [r3, #0]
    425e:	220f      	movs	r2, #15
    4260:	18ba      	adds	r2, r7, r2
    4262:	7812      	ldrb	r2, [r2, #0]
    4264:	3208      	adds	r2, #8
    4266:	0152      	lsls	r2, r2, #5
    4268:	5cd3      	ldrb	r3, [r2, r3]
    426a:	b2db      	uxtb	r3, r3
    426c:	001a      	movs	r2, r3
    426e:	2307      	movs	r3, #7
    4270:	4013      	ands	r3, r2
    4272:	d121      	bne.n	42b8 <usb_device_endpoint_set_config+0x358>
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE0(3);
    4274:	687b      	ldr	r3, [r7, #4]
    4276:	681a      	ldr	r2, [r3, #0]
    4278:	230f      	movs	r3, #15
    427a:	18fb      	adds	r3, r7, r3
    427c:	7819      	ldrb	r1, [r3, #0]
    427e:	687b      	ldr	r3, [r7, #4]
    4280:	681b      	ldr	r3, [r3, #0]
    4282:	200f      	movs	r0, #15
    4284:	1838      	adds	r0, r7, r0
    4286:	7800      	ldrb	r0, [r0, #0]
    4288:	3008      	adds	r0, #8
    428a:	0140      	lsls	r0, r0, #5
    428c:	5cc3      	ldrb	r3, [r0, r3]
    428e:	b2db      	uxtb	r3, r3
    4290:	2003      	movs	r0, #3
    4292:	4303      	orrs	r3, r0
    4294:	b2d8      	uxtb	r0, r3
    4296:	000b      	movs	r3, r1
    4298:	3308      	adds	r3, #8
    429a:	015b      	lsls	r3, r3, #5
    429c:	1c01      	adds	r1, r0, #0
    429e:	5499      	strb	r1, [r3, r2]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
    42a0:	687b      	ldr	r3, [r7, #4]
    42a2:	681a      	ldr	r2, [r3, #0]
    42a4:	230f      	movs	r3, #15
    42a6:	18fb      	adds	r3, r7, r3
    42a8:	781b      	ldrb	r3, [r3, #0]
    42aa:	3308      	adds	r3, #8
    42ac:	015b      	lsls	r3, r3, #5
    42ae:	18d3      	adds	r3, r2, r3
    42b0:	3305      	adds	r3, #5
    42b2:	2240      	movs	r2, #64	; 0x40
    42b4:	701a      	strb	r2, [r3, #0]
			break;
    42b6:	e06f      	b.n	4398 <usb_device_endpoint_set_config+0x438>
					return STATUS_ERR_DENIED;
    42b8:	231c      	movs	r3, #28
    42ba:	e0c5      	b.n	4448 <usb_device_endpoint_set_config+0x4e8>

		case USB_DEVICE_ENDPOINT_TYPE_INTERRUPT:
			if (ep_bank) {
    42bc:	230e      	movs	r3, #14
    42be:	18fb      	adds	r3, r7, r3
    42c0:	781b      	ldrb	r3, [r3, #0]
    42c2:	2b00      	cmp	r3, #0
    42c4:	d036      	beq.n	4334 <usb_device_endpoint_set_config+0x3d4>
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0){
    42c6:	687b      	ldr	r3, [r7, #4]
    42c8:	681b      	ldr	r3, [r3, #0]
    42ca:	220f      	movs	r2, #15
    42cc:	18ba      	adds	r2, r7, r2
    42ce:	7812      	ldrb	r2, [r2, #0]
    42d0:	3208      	adds	r2, #8
    42d2:	0152      	lsls	r2, r2, #5
    42d4:	5cd3      	ldrb	r3, [r2, r3]
    42d6:	b2db      	uxtb	r3, r3
    42d8:	001a      	movs	r2, r3
    42da:	2370      	movs	r3, #112	; 0x70
    42dc:	4013      	ands	r3, r2
    42de:	d121      	bne.n	4324 <usb_device_endpoint_set_config+0x3c4>
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE1(4);
    42e0:	687b      	ldr	r3, [r7, #4]
    42e2:	681a      	ldr	r2, [r3, #0]
    42e4:	230f      	movs	r3, #15
    42e6:	18fb      	adds	r3, r7, r3
    42e8:	7819      	ldrb	r1, [r3, #0]
    42ea:	687b      	ldr	r3, [r7, #4]
    42ec:	681b      	ldr	r3, [r3, #0]
    42ee:	200f      	movs	r0, #15
    42f0:	1838      	adds	r0, r7, r0
    42f2:	7800      	ldrb	r0, [r0, #0]
    42f4:	3008      	adds	r0, #8
    42f6:	0140      	lsls	r0, r0, #5
    42f8:	5cc3      	ldrb	r3, [r0, r3]
    42fa:	b2db      	uxtb	r3, r3
    42fc:	2040      	movs	r0, #64	; 0x40
    42fe:	4303      	orrs	r3, r0
    4300:	b2d8      	uxtb	r0, r3
    4302:	000b      	movs	r3, r1
    4304:	3308      	adds	r3, #8
    4306:	015b      	lsls	r3, r3, #5
    4308:	1c01      	adds	r1, r0, #0
    430a:	5499      	strb	r1, [r3, r2]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
    430c:	687b      	ldr	r3, [r7, #4]
    430e:	681a      	ldr	r2, [r3, #0]
    4310:	230f      	movs	r3, #15
    4312:	18fb      	adds	r3, r7, r3
    4314:	781b      	ldrb	r3, [r3, #0]
    4316:	3308      	adds	r3, #8
    4318:	015b      	lsls	r3, r3, #5
    431a:	18d3      	adds	r3, r2, r3
    431c:	3304      	adds	r3, #4
    431e:	2280      	movs	r2, #128	; 0x80
    4320:	701a      	strb	r2, [r3, #0]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
				} else {
					return STATUS_ERR_DENIED;
				}
			}
			break;
    4322:	e039      	b.n	4398 <usb_device_endpoint_set_config+0x438>
					return STATUS_ERR_DENIED;
    4324:	231c      	movs	r3, #28
    4326:	e08f      	b.n	4448 <usb_device_endpoint_set_config+0x4e8>
    4328:	0001f850 	.word	0x0001f850
    432c:	200028ec 	.word	0x200028ec
    4330:	8fffffff 	.word	0x8fffffff
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0){
    4334:	687b      	ldr	r3, [r7, #4]
    4336:	681b      	ldr	r3, [r3, #0]
    4338:	220f      	movs	r2, #15
    433a:	18ba      	adds	r2, r7, r2
    433c:	7812      	ldrb	r2, [r2, #0]
    433e:	3208      	adds	r2, #8
    4340:	0152      	lsls	r2, r2, #5
    4342:	5cd3      	ldrb	r3, [r2, r3]
    4344:	b2db      	uxtb	r3, r3
    4346:	001a      	movs	r2, r3
    4348:	2307      	movs	r3, #7
    434a:	4013      	ands	r3, r2
    434c:	d121      	bne.n	4392 <usb_device_endpoint_set_config+0x432>
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE0(4);
    434e:	687b      	ldr	r3, [r7, #4]
    4350:	681a      	ldr	r2, [r3, #0]
    4352:	230f      	movs	r3, #15
    4354:	18fb      	adds	r3, r7, r3
    4356:	7819      	ldrb	r1, [r3, #0]
    4358:	687b      	ldr	r3, [r7, #4]
    435a:	681b      	ldr	r3, [r3, #0]
    435c:	200f      	movs	r0, #15
    435e:	1838      	adds	r0, r7, r0
    4360:	7800      	ldrb	r0, [r0, #0]
    4362:	3008      	adds	r0, #8
    4364:	0140      	lsls	r0, r0, #5
    4366:	5cc3      	ldrb	r3, [r0, r3]
    4368:	b2db      	uxtb	r3, r3
    436a:	2004      	movs	r0, #4
    436c:	4303      	orrs	r3, r0
    436e:	b2d8      	uxtb	r0, r3
    4370:	000b      	movs	r3, r1
    4372:	3308      	adds	r3, #8
    4374:	015b      	lsls	r3, r3, #5
    4376:	1c01      	adds	r1, r0, #0
    4378:	5499      	strb	r1, [r3, r2]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
    437a:	687b      	ldr	r3, [r7, #4]
    437c:	681a      	ldr	r2, [r3, #0]
    437e:	230f      	movs	r3, #15
    4380:	18fb      	adds	r3, r7, r3
    4382:	781b      	ldrb	r3, [r3, #0]
    4384:	3308      	adds	r3, #8
    4386:	015b      	lsls	r3, r3, #5
    4388:	18d3      	adds	r3, r2, r3
    438a:	3305      	adds	r3, #5
    438c:	2240      	movs	r2, #64	; 0x40
    438e:	701a      	strb	r2, [r3, #0]
			break;
    4390:	e002      	b.n	4398 <usb_device_endpoint_set_config+0x438>
					return STATUS_ERR_DENIED;
    4392:	231c      	movs	r3, #28
    4394:	e058      	b.n	4448 <usb_device_endpoint_set_config+0x4e8>

		default:
			break;
    4396:	46c0      	nop			; (mov r8, r8)
	}

	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[ep_bank].PCKSIZE.bit.SIZE = ep_config->ep_size;
    4398:	230f      	movs	r3, #15
    439a:	18fb      	adds	r3, r7, r3
    439c:	7818      	ldrb	r0, [r3, #0]
    439e:	230e      	movs	r3, #14
    43a0:	18fb      	adds	r3, r7, r3
    43a2:	781b      	ldrb	r3, [r3, #0]
    43a4:	683a      	ldr	r2, [r7, #0]
    43a6:	7852      	ldrb	r2, [r2, #1]
    43a8:	1c11      	adds	r1, r2, #0
    43aa:	2207      	movs	r2, #7
    43ac:	400a      	ands	r2, r1
    43ae:	b2d1      	uxtb	r1, r2
    43b0:	4a27      	ldr	r2, [pc, #156]	; (4450 <usb_device_endpoint_set_config+0x4f0>)
    43b2:	0040      	lsls	r0, r0, #1
    43b4:	18c3      	adds	r3, r0, r3
    43b6:	011b      	lsls	r3, r3, #4
    43b8:	18d3      	adds	r3, r2, r3
    43ba:	685a      	ldr	r2, [r3, #4]
    43bc:	2007      	movs	r0, #7
    43be:	4001      	ands	r1, r0
    43c0:	0709      	lsls	r1, r1, #28
    43c2:	4824      	ldr	r0, [pc, #144]	; (4454 <usb_device_endpoint_set_config+0x4f4>)
    43c4:	4002      	ands	r2, r0
    43c6:	430a      	orrs	r2, r1
    43c8:	605a      	str	r2, [r3, #4]

	if (true == ep_config->auto_zlp) {
    43ca:	683b      	ldr	r3, [r7, #0]
    43cc:	789b      	ldrb	r3, [r3, #2]
    43ce:	2b00      	cmp	r3, #0
    43d0:	d01d      	beq.n	440e <usb_device_endpoint_set_config+0x4ae>
		usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[ep_bank].PCKSIZE.reg |= USB_DEVICE_PCKSIZE_AUTO_ZLP;
    43d2:	230f      	movs	r3, #15
    43d4:	18fb      	adds	r3, r7, r3
    43d6:	781c      	ldrb	r4, [r3, #0]
    43d8:	230e      	movs	r3, #14
    43da:	18fb      	adds	r3, r7, r3
    43dc:	7818      	ldrb	r0, [r3, #0]
    43de:	230f      	movs	r3, #15
    43e0:	18fb      	adds	r3, r7, r3
    43e2:	7819      	ldrb	r1, [r3, #0]
    43e4:	230e      	movs	r3, #14
    43e6:	18fb      	adds	r3, r7, r3
    43e8:	781b      	ldrb	r3, [r3, #0]
    43ea:	4a19      	ldr	r2, [pc, #100]	; (4450 <usb_device_endpoint_set_config+0x4f0>)
    43ec:	0049      	lsls	r1, r1, #1
    43ee:	18cb      	adds	r3, r1, r3
    43f0:	011b      	lsls	r3, r3, #4
    43f2:	18d3      	adds	r3, r2, r3
    43f4:	3304      	adds	r3, #4
    43f6:	681b      	ldr	r3, [r3, #0]
    43f8:	2280      	movs	r2, #128	; 0x80
    43fa:	0612      	lsls	r2, r2, #24
    43fc:	431a      	orrs	r2, r3
    43fe:	4914      	ldr	r1, [pc, #80]	; (4450 <usb_device_endpoint_set_config+0x4f0>)
    4400:	0063      	lsls	r3, r4, #1
    4402:	181b      	adds	r3, r3, r0
    4404:	011b      	lsls	r3, r3, #4
    4406:	18cb      	adds	r3, r1, r3
    4408:	3304      	adds	r3, #4
    440a:	601a      	str	r2, [r3, #0]
    440c:	e01b      	b.n	4446 <usb_device_endpoint_set_config+0x4e6>
		} else {
		usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[ep_bank].PCKSIZE.reg &= ~USB_DEVICE_PCKSIZE_AUTO_ZLP;
    440e:	230f      	movs	r3, #15
    4410:	18fb      	adds	r3, r7, r3
    4412:	781c      	ldrb	r4, [r3, #0]
    4414:	230e      	movs	r3, #14
    4416:	18fb      	adds	r3, r7, r3
    4418:	7818      	ldrb	r0, [r3, #0]
    441a:	230f      	movs	r3, #15
    441c:	18fb      	adds	r3, r7, r3
    441e:	7819      	ldrb	r1, [r3, #0]
    4420:	230e      	movs	r3, #14
    4422:	18fb      	adds	r3, r7, r3
    4424:	781b      	ldrb	r3, [r3, #0]
    4426:	4a0a      	ldr	r2, [pc, #40]	; (4450 <usb_device_endpoint_set_config+0x4f0>)
    4428:	0049      	lsls	r1, r1, #1
    442a:	18cb      	adds	r3, r1, r3
    442c:	011b      	lsls	r3, r3, #4
    442e:	18d3      	adds	r3, r2, r3
    4430:	3304      	adds	r3, #4
    4432:	681b      	ldr	r3, [r3, #0]
    4434:	005b      	lsls	r3, r3, #1
    4436:	085a      	lsrs	r2, r3, #1
    4438:	4905      	ldr	r1, [pc, #20]	; (4450 <usb_device_endpoint_set_config+0x4f0>)
    443a:	0063      	lsls	r3, r4, #1
    443c:	181b      	adds	r3, r3, r0
    443e:	011b      	lsls	r3, r3, #4
    4440:	18cb      	adds	r3, r1, r3
    4442:	3304      	adds	r3, #4
    4444:	601a      	str	r2, [r3, #0]
	}

	return STATUS_OK;
    4446:	2300      	movs	r3, #0
}
    4448:	0018      	movs	r0, r3
    444a:	46bd      	mov	sp, r7
    444c:	b005      	add	sp, #20
    444e:	bd90      	pop	{r4, r7, pc}
    4450:	200028ec 	.word	0x200028ec
    4454:	8fffffff 	.word	0x8fffffff

00004458 <usb_device_endpoint_abort_job>:
 *
 * \param module_inst Pointer to USB software instance struct
 * \param ep          Endpoint address
 */
void usb_device_endpoint_abort_job(struct usb_module *module_inst, uint8_t ep)
{
    4458:	b580      	push	{r7, lr}
    445a:	b084      	sub	sp, #16
    445c:	af00      	add	r7, sp, #0
    445e:	6078      	str	r0, [r7, #4]
    4460:	000a      	movs	r2, r1
    4462:	1cfb      	adds	r3, r7, #3
    4464:	701a      	strb	r2, [r3, #0]
	uint8_t ep_num;
	ep_num = ep & USB_EP_ADDR_MASK;
    4466:	230f      	movs	r3, #15
    4468:	18fb      	adds	r3, r7, r3
    446a:	1cfa      	adds	r2, r7, #3
    446c:	7812      	ldrb	r2, [r2, #0]
    446e:	210f      	movs	r1, #15
    4470:	400a      	ands	r2, r1
    4472:	701a      	strb	r2, [r3, #0]

	// Stop transfer
	if (ep & USB_EP_DIR_IN) {
    4474:	1cfb      	adds	r3, r7, #3
    4476:	781b      	ldrb	r3, [r3, #0]
    4478:	b25b      	sxtb	r3, r3
    447a:	2b00      	cmp	r3, #0
    447c:	da16      	bge.n	44ac <usb_device_endpoint_abort_job+0x54>
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
    447e:	687b      	ldr	r3, [r7, #4]
    4480:	681a      	ldr	r2, [r3, #0]
    4482:	230f      	movs	r3, #15
    4484:	18fb      	adds	r3, r7, r3
    4486:	781b      	ldrb	r3, [r3, #0]
    4488:	3308      	adds	r3, #8
    448a:	015b      	lsls	r3, r3, #5
    448c:	18d3      	adds	r3, r2, r3
    448e:	3304      	adds	r3, #4
    4490:	2280      	movs	r2, #128	; 0x80
    4492:	701a      	strb	r2, [r3, #0]
		// Eventually ack a transfer occur during abort
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT1;
    4494:	687b      	ldr	r3, [r7, #4]
    4496:	681a      	ldr	r2, [r3, #0]
    4498:	230f      	movs	r3, #15
    449a:	18fb      	adds	r3, r7, r3
    449c:	781b      	ldrb	r3, [r3, #0]
    449e:	3308      	adds	r3, #8
    44a0:	015b      	lsls	r3, r3, #5
    44a2:	18d3      	adds	r3, r2, r3
    44a4:	3307      	adds	r3, #7
    44a6:	2202      	movs	r2, #2
    44a8:	701a      	strb	r2, [r3, #0]
	} else {
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
		// Eventually ack a transfer occur during abort
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT0;
	}
}
    44aa:	e015      	b.n	44d8 <usb_device_endpoint_abort_job+0x80>
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
    44ac:	687b      	ldr	r3, [r7, #4]
    44ae:	681a      	ldr	r2, [r3, #0]
    44b0:	230f      	movs	r3, #15
    44b2:	18fb      	adds	r3, r7, r3
    44b4:	781b      	ldrb	r3, [r3, #0]
    44b6:	3308      	adds	r3, #8
    44b8:	015b      	lsls	r3, r3, #5
    44ba:	18d3      	adds	r3, r2, r3
    44bc:	3305      	adds	r3, #5
    44be:	2240      	movs	r2, #64	; 0x40
    44c0:	701a      	strb	r2, [r3, #0]
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT0;
    44c2:	687b      	ldr	r3, [r7, #4]
    44c4:	681a      	ldr	r2, [r3, #0]
    44c6:	230f      	movs	r3, #15
    44c8:	18fb      	adds	r3, r7, r3
    44ca:	781b      	ldrb	r3, [r3, #0]
    44cc:	3308      	adds	r3, #8
    44ce:	015b      	lsls	r3, r3, #5
    44d0:	18d3      	adds	r3, r2, r3
    44d2:	3307      	adds	r3, #7
    44d4:	2201      	movs	r2, #1
    44d6:	701a      	strb	r2, [r3, #0]
}
    44d8:	46c0      	nop			; (mov r8, r8)
    44da:	46bd      	mov	sp, r7
    44dc:	b004      	add	sp, #16
    44de:	bd80      	pop	{r7, pc}

000044e0 <usb_device_endpoint_is_halted>:
 * \param ep          Endpoint address
 *
 * \return \c true if the endpoint is halted
 */
bool usb_device_endpoint_is_halted(struct usb_module *module_inst, uint8_t ep)
{
    44e0:	b580      	push	{r7, lr}
    44e2:	b084      	sub	sp, #16
    44e4:	af00      	add	r7, sp, #0
    44e6:	6078      	str	r0, [r7, #4]
    44e8:	000a      	movs	r2, r1
    44ea:	1cfb      	adds	r3, r7, #3
    44ec:	701a      	strb	r2, [r3, #0]
	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
    44ee:	230f      	movs	r3, #15
    44f0:	18fb      	adds	r3, r7, r3
    44f2:	1cfa      	adds	r2, r7, #3
    44f4:	7812      	ldrb	r2, [r2, #0]
    44f6:	210f      	movs	r1, #15
    44f8:	400a      	ands	r2, r1
    44fa:	701a      	strb	r2, [r3, #0]

	if (ep & USB_EP_DIR_IN) {
    44fc:	1cfb      	adds	r3, r7, #3
    44fe:	781b      	ldrb	r3, [r3, #0]
    4500:	b25b      	sxtb	r3, r3
    4502:	2b00      	cmp	r3, #0
    4504:	da11      	bge.n	452a <usb_device_endpoint_is_halted+0x4a>
		return (module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUS.reg & USB_DEVICE_EPSTATUSSET_STALLRQ1);
    4506:	687b      	ldr	r3, [r7, #4]
    4508:	681a      	ldr	r2, [r3, #0]
    450a:	230f      	movs	r3, #15
    450c:	18fb      	adds	r3, r7, r3
    450e:	781b      	ldrb	r3, [r3, #0]
    4510:	3308      	adds	r3, #8
    4512:	015b      	lsls	r3, r3, #5
    4514:	18d3      	adds	r3, r2, r3
    4516:	3306      	adds	r3, #6
    4518:	781b      	ldrb	r3, [r3, #0]
    451a:	b2db      	uxtb	r3, r3
    451c:	001a      	movs	r2, r3
    451e:	2320      	movs	r3, #32
    4520:	4013      	ands	r3, r2
    4522:	1e5a      	subs	r2, r3, #1
    4524:	4193      	sbcs	r3, r2
    4526:	b2db      	uxtb	r3, r3
    4528:	e010      	b.n	454c <usb_device_endpoint_is_halted+0x6c>
	} else {
		return (module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUS.reg & USB_DEVICE_EPSTATUSSET_STALLRQ0);
    452a:	687b      	ldr	r3, [r7, #4]
    452c:	681a      	ldr	r2, [r3, #0]
    452e:	230f      	movs	r3, #15
    4530:	18fb      	adds	r3, r7, r3
    4532:	781b      	ldrb	r3, [r3, #0]
    4534:	3308      	adds	r3, #8
    4536:	015b      	lsls	r3, r3, #5
    4538:	18d3      	adds	r3, r2, r3
    453a:	3306      	adds	r3, #6
    453c:	781b      	ldrb	r3, [r3, #0]
    453e:	b2db      	uxtb	r3, r3
    4540:	001a      	movs	r2, r3
    4542:	2310      	movs	r3, #16
    4544:	4013      	ands	r3, r2
    4546:	1e5a      	subs	r2, r3, #1
    4548:	4193      	sbcs	r3, r2
    454a:	b2db      	uxtb	r3, r3
	}
}
    454c:	0018      	movs	r0, r3
    454e:	46bd      	mov	sp, r7
    4550:	b004      	add	sp, #16
    4552:	bd80      	pop	{r7, pc}

00004554 <usb_device_endpoint_set_halt>:
 *
 * \param module_inst Pointer to USB software instance struct
 * \param ep          Endpoint address
 */
void usb_device_endpoint_set_halt(struct usb_module *module_inst, uint8_t ep)
{
    4554:	b580      	push	{r7, lr}
    4556:	b084      	sub	sp, #16
    4558:	af00      	add	r7, sp, #0
    455a:	6078      	str	r0, [r7, #4]
    455c:	000a      	movs	r2, r1
    455e:	1cfb      	adds	r3, r7, #3
    4560:	701a      	strb	r2, [r3, #0]
	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
    4562:	230f      	movs	r3, #15
    4564:	18fb      	adds	r3, r7, r3
    4566:	1cfa      	adds	r2, r7, #3
    4568:	7812      	ldrb	r2, [r2, #0]
    456a:	210f      	movs	r1, #15
    456c:	400a      	ands	r2, r1
    456e:	701a      	strb	r2, [r3, #0]

	// Stall endpoint
	if (ep & USB_EP_DIR_IN) {
    4570:	1cfb      	adds	r3, r7, #3
    4572:	781b      	ldrb	r3, [r3, #0]
    4574:	b25b      	sxtb	r3, r3
    4576:	2b00      	cmp	r3, #0
    4578:	da0b      	bge.n	4592 <usb_device_endpoint_set_halt+0x3e>
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_STALLRQ1;
    457a:	687b      	ldr	r3, [r7, #4]
    457c:	681a      	ldr	r2, [r3, #0]
    457e:	230f      	movs	r3, #15
    4580:	18fb      	adds	r3, r7, r3
    4582:	781b      	ldrb	r3, [r3, #0]
    4584:	3308      	adds	r3, #8
    4586:	015b      	lsls	r3, r3, #5
    4588:	18d3      	adds	r3, r2, r3
    458a:	3305      	adds	r3, #5
    458c:	2220      	movs	r2, #32
    458e:	701a      	strb	r2, [r3, #0]
	} else {
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_STALLRQ0;
	}
}
    4590:	e00a      	b.n	45a8 <usb_device_endpoint_set_halt+0x54>
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_STALLRQ0;
    4592:	687b      	ldr	r3, [r7, #4]
    4594:	681a      	ldr	r2, [r3, #0]
    4596:	230f      	movs	r3, #15
    4598:	18fb      	adds	r3, r7, r3
    459a:	781b      	ldrb	r3, [r3, #0]
    459c:	3308      	adds	r3, #8
    459e:	015b      	lsls	r3, r3, #5
    45a0:	18d3      	adds	r3, r2, r3
    45a2:	3305      	adds	r3, #5
    45a4:	2210      	movs	r2, #16
    45a6:	701a      	strb	r2, [r3, #0]
}
    45a8:	46c0      	nop			; (mov r8, r8)
    45aa:	46bd      	mov	sp, r7
    45ac:	b004      	add	sp, #16
    45ae:	bd80      	pop	{r7, pc}

000045b0 <usb_device_endpoint_clear_halt>:
 *
 * \param module_inst Pointer to USB software instance struct
 * \param ep          Endpoint address
 */
void usb_device_endpoint_clear_halt(struct usb_module *module_inst, uint8_t ep)
{
    45b0:	b580      	push	{r7, lr}
    45b2:	b084      	sub	sp, #16
    45b4:	af00      	add	r7, sp, #0
    45b6:	6078      	str	r0, [r7, #4]
    45b8:	000a      	movs	r2, r1
    45ba:	1cfb      	adds	r3, r7, #3
    45bc:	701a      	strb	r2, [r3, #0]
	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
    45be:	230f      	movs	r3, #15
    45c0:	18fb      	adds	r3, r7, r3
    45c2:	1cfa      	adds	r2, r7, #3
    45c4:	7812      	ldrb	r2, [r2, #0]
    45c6:	210f      	movs	r1, #15
    45c8:	400a      	ands	r2, r1
    45ca:	701a      	strb	r2, [r3, #0]

	if (ep & USB_EP_DIR_IN) {
    45cc:	1cfb      	adds	r3, r7, #3
    45ce:	781b      	ldrb	r3, [r3, #0]
    45d0:	b25b      	sxtb	r3, r3
    45d2:	2b00      	cmp	r3, #0
    45d4:	da3f      	bge.n	4656 <usb_device_endpoint_clear_halt+0xa6>
		if (module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUS.reg & USB_DEVICE_EPSTATUSSET_STALLRQ1) {
    45d6:	687b      	ldr	r3, [r7, #4]
    45d8:	681a      	ldr	r2, [r3, #0]
    45da:	230f      	movs	r3, #15
    45dc:	18fb      	adds	r3, r7, r3
    45de:	781b      	ldrb	r3, [r3, #0]
    45e0:	3308      	adds	r3, #8
    45e2:	015b      	lsls	r3, r3, #5
    45e4:	18d3      	adds	r3, r2, r3
    45e6:	3306      	adds	r3, #6
    45e8:	781b      	ldrb	r3, [r3, #0]
    45ea:	b2db      	uxtb	r3, r3
    45ec:	001a      	movs	r2, r3
    45ee:	2320      	movs	r3, #32
    45f0:	4013      	ands	r3, r2
    45f2:	d06f      	beq.n	46d4 <usb_device_endpoint_clear_halt+0x124>
			// Remove stall request
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_STALLRQ1;
    45f4:	687b      	ldr	r3, [r7, #4]
    45f6:	681a      	ldr	r2, [r3, #0]
    45f8:	230f      	movs	r3, #15
    45fa:	18fb      	adds	r3, r7, r3
    45fc:	781b      	ldrb	r3, [r3, #0]
    45fe:	3308      	adds	r3, #8
    4600:	015b      	lsls	r3, r3, #5
    4602:	18d3      	adds	r3, r2, r3
    4604:	3304      	adds	r3, #4
    4606:	2220      	movs	r2, #32
    4608:	701a      	strb	r2, [r3, #0]
			if (module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_STALL1) {
    460a:	687b      	ldr	r3, [r7, #4]
    460c:	681a      	ldr	r2, [r3, #0]
    460e:	230f      	movs	r3, #15
    4610:	18fb      	adds	r3, r7, r3
    4612:	781b      	ldrb	r3, [r3, #0]
    4614:	3308      	adds	r3, #8
    4616:	015b      	lsls	r3, r3, #5
    4618:	18d3      	adds	r3, r2, r3
    461a:	3307      	adds	r3, #7
    461c:	781b      	ldrb	r3, [r3, #0]
    461e:	b2db      	uxtb	r3, r3
    4620:	001a      	movs	r2, r3
    4622:	2340      	movs	r3, #64	; 0x40
    4624:	4013      	ands	r3, r2
    4626:	d055      	beq.n	46d4 <usb_device_endpoint_clear_halt+0x124>
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL1;
    4628:	687b      	ldr	r3, [r7, #4]
    462a:	681a      	ldr	r2, [r3, #0]
    462c:	230f      	movs	r3, #15
    462e:	18fb      	adds	r3, r7, r3
    4630:	781b      	ldrb	r3, [r3, #0]
    4632:	3308      	adds	r3, #8
    4634:	015b      	lsls	r3, r3, #5
    4636:	18d3      	adds	r3, r2, r3
    4638:	3307      	adds	r3, #7
    463a:	2240      	movs	r2, #64	; 0x40
    463c:	701a      	strb	r2, [r3, #0]
				// The Stall has occurred, then reset data toggle
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSSET_DTGLIN;
    463e:	687b      	ldr	r3, [r7, #4]
    4640:	681a      	ldr	r2, [r3, #0]
    4642:	230f      	movs	r3, #15
    4644:	18fb      	adds	r3, r7, r3
    4646:	781b      	ldrb	r3, [r3, #0]
    4648:	3308      	adds	r3, #8
    464a:	015b      	lsls	r3, r3, #5
    464c:	18d3      	adds	r3, r2, r3
    464e:	3304      	adds	r3, #4
    4650:	2202      	movs	r2, #2
    4652:	701a      	strb	r2, [r3, #0]
				// The Stall has occurred, then reset data toggle
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSSET_DTGLOUT;
			}
		}
	}
}
    4654:	e03e      	b.n	46d4 <usb_device_endpoint_clear_halt+0x124>
		if (module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUS.reg & USB_DEVICE_EPSTATUSSET_STALLRQ0) {
    4656:	687b      	ldr	r3, [r7, #4]
    4658:	681a      	ldr	r2, [r3, #0]
    465a:	230f      	movs	r3, #15
    465c:	18fb      	adds	r3, r7, r3
    465e:	781b      	ldrb	r3, [r3, #0]
    4660:	3308      	adds	r3, #8
    4662:	015b      	lsls	r3, r3, #5
    4664:	18d3      	adds	r3, r2, r3
    4666:	3306      	adds	r3, #6
    4668:	781b      	ldrb	r3, [r3, #0]
    466a:	b2db      	uxtb	r3, r3
    466c:	001a      	movs	r2, r3
    466e:	2310      	movs	r3, #16
    4670:	4013      	ands	r3, r2
    4672:	d02f      	beq.n	46d4 <usb_device_endpoint_clear_halt+0x124>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_STALLRQ0;
    4674:	687b      	ldr	r3, [r7, #4]
    4676:	681a      	ldr	r2, [r3, #0]
    4678:	230f      	movs	r3, #15
    467a:	18fb      	adds	r3, r7, r3
    467c:	781b      	ldrb	r3, [r3, #0]
    467e:	3308      	adds	r3, #8
    4680:	015b      	lsls	r3, r3, #5
    4682:	18d3      	adds	r3, r2, r3
    4684:	3304      	adds	r3, #4
    4686:	2210      	movs	r2, #16
    4688:	701a      	strb	r2, [r3, #0]
			if (module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_STALL0) {
    468a:	687b      	ldr	r3, [r7, #4]
    468c:	681a      	ldr	r2, [r3, #0]
    468e:	230f      	movs	r3, #15
    4690:	18fb      	adds	r3, r7, r3
    4692:	781b      	ldrb	r3, [r3, #0]
    4694:	3308      	adds	r3, #8
    4696:	015b      	lsls	r3, r3, #5
    4698:	18d3      	adds	r3, r2, r3
    469a:	3307      	adds	r3, #7
    469c:	781b      	ldrb	r3, [r3, #0]
    469e:	b2db      	uxtb	r3, r3
    46a0:	001a      	movs	r2, r3
    46a2:	2320      	movs	r3, #32
    46a4:	4013      	ands	r3, r2
    46a6:	d015      	beq.n	46d4 <usb_device_endpoint_clear_halt+0x124>
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL0;
    46a8:	687b      	ldr	r3, [r7, #4]
    46aa:	681a      	ldr	r2, [r3, #0]
    46ac:	230f      	movs	r3, #15
    46ae:	18fb      	adds	r3, r7, r3
    46b0:	781b      	ldrb	r3, [r3, #0]
    46b2:	3308      	adds	r3, #8
    46b4:	015b      	lsls	r3, r3, #5
    46b6:	18d3      	adds	r3, r2, r3
    46b8:	3307      	adds	r3, #7
    46ba:	2220      	movs	r2, #32
    46bc:	701a      	strb	r2, [r3, #0]
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSSET_DTGLOUT;
    46be:	687b      	ldr	r3, [r7, #4]
    46c0:	681a      	ldr	r2, [r3, #0]
    46c2:	230f      	movs	r3, #15
    46c4:	18fb      	adds	r3, r7, r3
    46c6:	781b      	ldrb	r3, [r3, #0]
    46c8:	3308      	adds	r3, #8
    46ca:	015b      	lsls	r3, r3, #5
    46cc:	18d3      	adds	r3, r2, r3
    46ce:	3304      	adds	r3, #4
    46d0:	2201      	movs	r2, #1
    46d2:	701a      	strb	r2, [r3, #0]
}
    46d4:	46c0      	nop			; (mov r8, r8)
    46d6:	46bd      	mov	sp, r7
    46d8:	b004      	add	sp, #16
    46da:	bd80      	pop	{r7, pc}

000046dc <usb_device_endpoint_write_buffer_job>:
 * \retval STATUS_OK Job started successfully
 * \retval STATUS_ERR_DENIED Endpoint is not ready
 */
enum status_code usb_device_endpoint_write_buffer_job(struct usb_module *module_inst,uint8_t ep_num,
		uint8_t* pbuf, uint32_t buf_size)
{
    46dc:	b580      	push	{r7, lr}
    46de:	b086      	sub	sp, #24
    46e0:	af00      	add	r7, sp, #0
    46e2:	60f8      	str	r0, [r7, #12]
    46e4:	607a      	str	r2, [r7, #4]
    46e6:	603b      	str	r3, [r7, #0]
    46e8:	230b      	movs	r3, #11
    46ea:	18fb      	adds	r3, r7, r3
    46ec:	1c0a      	adds	r2, r1, #0
    46ee:	701a      	strb	r2, [r3, #0]
	Assert(module_inst);
	Assert(module_inst->hw);
	Assert(ep_num < USB_EPT_NUM);

	uint8_t flag;
	flag = (uint8_t)(module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.bit.EPTYPE1);
    46f0:	68fb      	ldr	r3, [r7, #12]
    46f2:	681b      	ldr	r3, [r3, #0]
    46f4:	220b      	movs	r2, #11
    46f6:	18ba      	adds	r2, r7, r2
    46f8:	7812      	ldrb	r2, [r2, #0]
    46fa:	3208      	adds	r2, #8
    46fc:	0152      	lsls	r2, r2, #5
    46fe:	5cd3      	ldrb	r3, [r2, r3]
    4700:	065b      	lsls	r3, r3, #25
    4702:	0f5b      	lsrs	r3, r3, #29
    4704:	b2da      	uxtb	r2, r3
    4706:	2317      	movs	r3, #23
    4708:	18fb      	adds	r3, r7, r3
    470a:	701a      	strb	r2, [r3, #0]
	if ((enum usb_device_endpoint_type)(flag) == USB_DEVICE_ENDPOINT_TYPE_DISABLE) {
    470c:	2317      	movs	r3, #23
    470e:	18fb      	adds	r3, r7, r3
    4710:	781b      	ldrb	r3, [r3, #0]
    4712:	2b00      	cmp	r3, #0
    4714:	d101      	bne.n	471a <usb_device_endpoint_write_buffer_job+0x3e>
		return STATUS_ERR_DENIED;
    4716:	231c      	movs	r3, #28
    4718:	e032      	b.n	4780 <usb_device_endpoint_write_buffer_job+0xa4>
	};

	/* get endpoint configuration from setting register */
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].ADDR.reg = (uint32_t)pbuf;
    471a:	230b      	movs	r3, #11
    471c:	18fb      	adds	r3, r7, r3
    471e:	781b      	ldrb	r3, [r3, #0]
    4720:	687a      	ldr	r2, [r7, #4]
    4722:	4919      	ldr	r1, [pc, #100]	; (4788 <usb_device_endpoint_write_buffer_job+0xac>)
    4724:	015b      	lsls	r3, r3, #5
    4726:	18cb      	adds	r3, r1, r3
    4728:	3310      	adds	r3, #16
    472a:	601a      	str	r2, [r3, #0]
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.bit.MULTI_PACKET_SIZE = 0;
    472c:	230b      	movs	r3, #11
    472e:	18fb      	adds	r3, r7, r3
    4730:	781b      	ldrb	r3, [r3, #0]
    4732:	4a15      	ldr	r2, [pc, #84]	; (4788 <usb_device_endpoint_write_buffer_job+0xac>)
    4734:	015b      	lsls	r3, r3, #5
    4736:	18d3      	adds	r3, r2, r3
    4738:	3310      	adds	r3, #16
    473a:	685a      	ldr	r2, [r3, #4]
    473c:	4913      	ldr	r1, [pc, #76]	; (478c <usb_device_endpoint_write_buffer_job+0xb0>)
    473e:	400a      	ands	r2, r1
    4740:	605a      	str	r2, [r3, #4]
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = buf_size;
    4742:	230b      	movs	r3, #11
    4744:	18fb      	adds	r3, r7, r3
    4746:	781b      	ldrb	r3, [r3, #0]
    4748:	683a      	ldr	r2, [r7, #0]
    474a:	b292      	uxth	r2, r2
    474c:	0492      	lsls	r2, r2, #18
    474e:	0c92      	lsrs	r2, r2, #18
    4750:	b291      	uxth	r1, r2
    4752:	4a0d      	ldr	r2, [pc, #52]	; (4788 <usb_device_endpoint_write_buffer_job+0xac>)
    4754:	015b      	lsls	r3, r3, #5
    4756:	18d3      	adds	r3, r2, r3
    4758:	3310      	adds	r3, #16
    475a:	685a      	ldr	r2, [r3, #4]
    475c:	0489      	lsls	r1, r1, #18
    475e:	0c89      	lsrs	r1, r1, #18
    4760:	0b92      	lsrs	r2, r2, #14
    4762:	0392      	lsls	r2, r2, #14
    4764:	430a      	orrs	r2, r1
    4766:	605a      	str	r2, [r3, #4]
	module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK1RDY;
    4768:	68fb      	ldr	r3, [r7, #12]
    476a:	681a      	ldr	r2, [r3, #0]
    476c:	230b      	movs	r3, #11
    476e:	18fb      	adds	r3, r7, r3
    4770:	781b      	ldrb	r3, [r3, #0]
    4772:	3308      	adds	r3, #8
    4774:	015b      	lsls	r3, r3, #5
    4776:	18d3      	adds	r3, r2, r3
    4778:	3305      	adds	r3, #5
    477a:	2280      	movs	r2, #128	; 0x80
    477c:	701a      	strb	r2, [r3, #0]

	return STATUS_OK;
    477e:	2300      	movs	r3, #0
}
    4780:	0018      	movs	r0, r3
    4782:	46bd      	mov	sp, r7
    4784:	b006      	add	sp, #24
    4786:	bd80      	pop	{r7, pc}
    4788:	200028ec 	.word	0x200028ec
    478c:	f0003fff 	.word	0xf0003fff

00004790 <usb_device_endpoint_read_buffer_job>:
 * \retval STATUS_OK Job started successfully
 * \retval STATUS_ERR_DENIED Endpoint is not ready
 */
enum status_code usb_device_endpoint_read_buffer_job(struct usb_module *module_inst,uint8_t ep_num,
		uint8_t* pbuf, uint32_t buf_size)
{
    4790:	b580      	push	{r7, lr}
    4792:	b086      	sub	sp, #24
    4794:	af00      	add	r7, sp, #0
    4796:	60f8      	str	r0, [r7, #12]
    4798:	607a      	str	r2, [r7, #4]
    479a:	603b      	str	r3, [r7, #0]
    479c:	230b      	movs	r3, #11
    479e:	18fb      	adds	r3, r7, r3
    47a0:	1c0a      	adds	r2, r1, #0
    47a2:	701a      	strb	r2, [r3, #0]
	Assert(module_inst);
	Assert(module_inst->hw);
	Assert(ep_num < USB_EPT_NUM);

	uint8_t flag;
	flag = (uint8_t)(module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.bit.EPTYPE0);
    47a4:	68fb      	ldr	r3, [r7, #12]
    47a6:	681b      	ldr	r3, [r3, #0]
    47a8:	220b      	movs	r2, #11
    47aa:	18ba      	adds	r2, r7, r2
    47ac:	7812      	ldrb	r2, [r2, #0]
    47ae:	3208      	adds	r2, #8
    47b0:	0152      	lsls	r2, r2, #5
    47b2:	5cd3      	ldrb	r3, [r2, r3]
    47b4:	075b      	lsls	r3, r3, #29
    47b6:	0f5b      	lsrs	r3, r3, #29
    47b8:	b2da      	uxtb	r2, r3
    47ba:	2317      	movs	r3, #23
    47bc:	18fb      	adds	r3, r7, r3
    47be:	701a      	strb	r2, [r3, #0]
	if ((enum usb_device_endpoint_type)(flag) == USB_DEVICE_ENDPOINT_TYPE_DISABLE) {
    47c0:	2317      	movs	r3, #23
    47c2:	18fb      	adds	r3, r7, r3
    47c4:	781b      	ldrb	r3, [r3, #0]
    47c6:	2b00      	cmp	r3, #0
    47c8:	d101      	bne.n	47ce <usb_device_endpoint_read_buffer_job+0x3e>
		return STATUS_ERR_DENIED;
    47ca:	231c      	movs	r3, #28
    47cc:	e02f      	b.n	482e <usb_device_endpoint_read_buffer_job+0x9e>
	};

	/* get endpoint configuration from setting register */
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].ADDR.reg = (uint32_t)pbuf;
    47ce:	230b      	movs	r3, #11
    47d0:	18fb      	adds	r3, r7, r3
    47d2:	781a      	ldrb	r2, [r3, #0]
    47d4:	6879      	ldr	r1, [r7, #4]
    47d6:	4b18      	ldr	r3, [pc, #96]	; (4838 <usb_device_endpoint_read_buffer_job+0xa8>)
    47d8:	0152      	lsls	r2, r2, #5
    47da:	50d1      	str	r1, [r2, r3]
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = buf_size;
    47dc:	230b      	movs	r3, #11
    47de:	18fb      	adds	r3, r7, r3
    47e0:	781b      	ldrb	r3, [r3, #0]
    47e2:	683a      	ldr	r2, [r7, #0]
    47e4:	b292      	uxth	r2, r2
    47e6:	0492      	lsls	r2, r2, #18
    47e8:	0c92      	lsrs	r2, r2, #18
    47ea:	b291      	uxth	r1, r2
    47ec:	4a12      	ldr	r2, [pc, #72]	; (4838 <usb_device_endpoint_read_buffer_job+0xa8>)
    47ee:	015b      	lsls	r3, r3, #5
    47f0:	18d3      	adds	r3, r2, r3
    47f2:	685a      	ldr	r2, [r3, #4]
    47f4:	0489      	lsls	r1, r1, #18
    47f6:	0c89      	lsrs	r1, r1, #18
    47f8:	0389      	lsls	r1, r1, #14
    47fa:	4810      	ldr	r0, [pc, #64]	; (483c <usb_device_endpoint_read_buffer_job+0xac>)
    47fc:	4002      	ands	r2, r0
    47fe:	430a      	orrs	r2, r1
    4800:	605a      	str	r2, [r3, #4]
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = 0;
    4802:	230b      	movs	r3, #11
    4804:	18fb      	adds	r3, r7, r3
    4806:	781b      	ldrb	r3, [r3, #0]
    4808:	4a0b      	ldr	r2, [pc, #44]	; (4838 <usb_device_endpoint_read_buffer_job+0xa8>)
    480a:	015b      	lsls	r3, r3, #5
    480c:	18d3      	adds	r3, r2, r3
    480e:	685a      	ldr	r2, [r3, #4]
    4810:	0b92      	lsrs	r2, r2, #14
    4812:	0392      	lsls	r2, r2, #14
    4814:	605a      	str	r2, [r3, #4]
	module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK0RDY;
    4816:	68fb      	ldr	r3, [r7, #12]
    4818:	681a      	ldr	r2, [r3, #0]
    481a:	230b      	movs	r3, #11
    481c:	18fb      	adds	r3, r7, r3
    481e:	781b      	ldrb	r3, [r3, #0]
    4820:	3308      	adds	r3, #8
    4822:	015b      	lsls	r3, r3, #5
    4824:	18d3      	adds	r3, r2, r3
    4826:	3304      	adds	r3, #4
    4828:	2240      	movs	r2, #64	; 0x40
    482a:	701a      	strb	r2, [r3, #0]

	return STATUS_OK;
    482c:	2300      	movs	r3, #0
}
    482e:	0018      	movs	r0, r3
    4830:	46bd      	mov	sp, r7
    4832:	b006      	add	sp, #24
    4834:	bd80      	pop	{r7, pc}
    4836:	46c0      	nop			; (mov r8, r8)
    4838:	200028ec 	.word	0x200028ec
    483c:	f0003fff 	.word	0xf0003fff

00004840 <usb_device_endpoint_setup_buffer_job>:
 * \retval STATUS_OK Job started successfully
 * \retval STATUS_ERR_DENIED Endpoint is not ready
 */
enum status_code usb_device_endpoint_setup_buffer_job(struct usb_module *module_inst,
		uint8_t* pbuf)
{
    4840:	b580      	push	{r7, lr}
    4842:	b082      	sub	sp, #8
    4844:	af00      	add	r7, sp, #0
    4846:	6078      	str	r0, [r7, #4]
    4848:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* get endpoint configuration from setting register */
	usb_descriptor_table.usb_endpoint_table[0].DeviceDescBank[0].ADDR.reg = (uint32_t)pbuf;
    484a:	683a      	ldr	r2, [r7, #0]
    484c:	4b0c      	ldr	r3, [pc, #48]	; (4880 <usb_device_endpoint_setup_buffer_job+0x40>)
    484e:	601a      	str	r2, [r3, #0]
	usb_descriptor_table.usb_endpoint_table[0].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = 8;
    4850:	4b0b      	ldr	r3, [pc, #44]	; (4880 <usb_device_endpoint_setup_buffer_job+0x40>)
    4852:	685a      	ldr	r2, [r3, #4]
    4854:	490b      	ldr	r1, [pc, #44]	; (4884 <usb_device_endpoint_setup_buffer_job+0x44>)
    4856:	400a      	ands	r2, r1
    4858:	2180      	movs	r1, #128	; 0x80
    485a:	0289      	lsls	r1, r1, #10
    485c:	430a      	orrs	r2, r1
    485e:	605a      	str	r2, [r3, #4]
	usb_descriptor_table.usb_endpoint_table[0].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = 0;
    4860:	4b07      	ldr	r3, [pc, #28]	; (4880 <usb_device_endpoint_setup_buffer_job+0x40>)
    4862:	685a      	ldr	r2, [r3, #4]
    4864:	0b92      	lsrs	r2, r2, #14
    4866:	0392      	lsls	r2, r2, #14
    4868:	605a      	str	r2, [r3, #4]
	module_inst->hw->DEVICE.DeviceEndpoint[0].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK0RDY;
    486a:	687b      	ldr	r3, [r7, #4]
    486c:	681a      	ldr	r2, [r3, #0]
    486e:	2382      	movs	r3, #130	; 0x82
    4870:	005b      	lsls	r3, r3, #1
    4872:	2140      	movs	r1, #64	; 0x40
    4874:	54d1      	strb	r1, [r2, r3]

	return STATUS_OK;
    4876:	2300      	movs	r3, #0
}
    4878:	0018      	movs	r0, r3
    487a:	46bd      	mov	sp, r7
    487c:	b002      	add	sp, #8
    487e:	bd80      	pop	{r7, pc}
    4880:	200028ec 	.word	0x200028ec
    4884:	f0003fff 	.word	0xf0003fff

00004888 <_usb_device_interrupt_handler>:

static void _usb_device_interrupt_handler(void)
{
    4888:	b580      	push	{r7, lr}
    488a:	b084      	sub	sp, #16
    488c:	af00      	add	r7, sp, #0
	uint16_t ep_inst;
	uint16_t flags, flags_run;
	ep_inst = _usb_instances->hw->DEVICE.EPINTSMRY.reg;
    488e:	4bbd      	ldr	r3, [pc, #756]	; (4b84 <_usb_device_interrupt_handler+0x2fc>)
    4890:	681b      	ldr	r3, [r3, #0]
    4892:	681a      	ldr	r2, [r3, #0]
    4894:	2308      	movs	r3, #8
    4896:	18fb      	adds	r3, r7, r3
    4898:	8c12      	ldrh	r2, [r2, #32]
    489a:	801a      	strh	r2, [r3, #0]

	/* device interrupt */
	if (0 == ep_inst) {
    489c:	2308      	movs	r3, #8
    489e:	18fb      	adds	r3, r7, r3
    48a0:	881b      	ldrh	r3, [r3, #0]
    48a2:	2b00      	cmp	r3, #0
    48a4:	d155      	bne.n	4952 <_usb_device_interrupt_handler+0xca>
		int i;

		/* get interrupt flags */
		flags = _usb_instances->hw->DEVICE.INTFLAG.reg;
    48a6:	4bb7      	ldr	r3, [pc, #732]	; (4b84 <_usb_device_interrupt_handler+0x2fc>)
    48a8:	681b      	ldr	r3, [r3, #0]
    48aa:	681a      	ldr	r2, [r3, #0]
    48ac:	1dbb      	adds	r3, r7, #6
    48ae:	8b92      	ldrh	r2, [r2, #28]
    48b0:	801a      	strh	r2, [r3, #0]
		flags_run = flags &
				_usb_instances->device_enabled_callback_mask &
    48b2:	4bb4      	ldr	r3, [pc, #720]	; (4b84 <_usb_device_interrupt_handler+0x2fc>)
    48b4:	681a      	ldr	r2, [r3, #0]
    48b6:	23ab      	movs	r3, #171	; 0xab
    48b8:	005b      	lsls	r3, r3, #1
    48ba:	5ad3      	ldrh	r3, [r2, r3]
		flags_run = flags &
    48bc:	1dba      	adds	r2, r7, #6
    48be:	8812      	ldrh	r2, [r2, #0]
    48c0:	4013      	ands	r3, r2
    48c2:	b29a      	uxth	r2, r3
				_usb_instances->device_registered_callback_mask;
    48c4:	4baf      	ldr	r3, [pc, #700]	; (4b84 <_usb_device_interrupt_handler+0x2fc>)
    48c6:	6819      	ldr	r1, [r3, #0]
    48c8:	23aa      	movs	r3, #170	; 0xaa
    48ca:	005b      	lsls	r3, r3, #1
    48cc:	5ac9      	ldrh	r1, [r1, r3]
		flags_run = flags &
    48ce:	1d3b      	adds	r3, r7, #4
    48d0:	400a      	ands	r2, r1
    48d2:	801a      	strh	r2, [r3, #0]

		for (i = 0; i < USB_DEVICE_CALLBACK_N; i ++) {
    48d4:	2300      	movs	r3, #0
    48d6:	60fb      	str	r3, [r7, #12]
    48d8:	e037      	b.n	494a <_usb_device_interrupt_handler+0xc2>
			if (flags & _usb_device_irq_bits[i]) {
    48da:	4bab      	ldr	r3, [pc, #684]	; (4b88 <_usb_device_interrupt_handler+0x300>)
    48dc:	68fa      	ldr	r2, [r7, #12]
    48de:	0052      	lsls	r2, r2, #1
    48e0:	5ad3      	ldrh	r3, [r2, r3]
    48e2:	1dba      	adds	r2, r7, #6
    48e4:	8812      	ldrh	r2, [r2, #0]
    48e6:	4013      	ands	r3, r2
    48e8:	b29b      	uxth	r3, r3
    48ea:	2b00      	cmp	r3, #0
    48ec:	d007      	beq.n	48fe <_usb_device_interrupt_handler+0x76>
				_usb_instances->hw->DEVICE.INTFLAG.reg =
    48ee:	4ba5      	ldr	r3, [pc, #660]	; (4b84 <_usb_device_interrupt_handler+0x2fc>)
    48f0:	681b      	ldr	r3, [r3, #0]
    48f2:	681b      	ldr	r3, [r3, #0]
						_usb_device_irq_bits[i];
    48f4:	4aa4      	ldr	r2, [pc, #656]	; (4b88 <_usb_device_interrupt_handler+0x300>)
    48f6:	68f9      	ldr	r1, [r7, #12]
    48f8:	0049      	lsls	r1, r1, #1
    48fa:	5a8a      	ldrh	r2, [r1, r2]
				_usb_instances->hw->DEVICE.INTFLAG.reg =
    48fc:	839a      	strh	r2, [r3, #28]
			}
			if (flags_run & _usb_device_irq_bits[i]) {
    48fe:	4ba2      	ldr	r3, [pc, #648]	; (4b88 <_usb_device_interrupt_handler+0x300>)
    4900:	68fa      	ldr	r2, [r7, #12]
    4902:	0052      	lsls	r2, r2, #1
    4904:	5ad3      	ldrh	r3, [r2, r3]
    4906:	1d3a      	adds	r2, r7, #4
    4908:	8812      	ldrh	r2, [r2, #0]
    490a:	4013      	ands	r3, r2
    490c:	b29b      	uxth	r3, r3
    490e:	2b00      	cmp	r3, #0
    4910:	d018      	beq.n	4944 <_usb_device_interrupt_handler+0xbc>
				if (i == USB_DEVICE_CALLBACK_LPMSUSP) {
    4912:	68fb      	ldr	r3, [r7, #12]
    4914:	2b06      	cmp	r3, #6
    4916:	d10a      	bne.n	492e <_usb_device_interrupt_handler+0xa6>
					device_callback_lpm_wakeup_enable =
							usb_descriptor_table.usb_endpoint_table[0].DeviceDescBank[0].EXTREG.bit.VARIABLE
    4918:	4b9c      	ldr	r3, [pc, #624]	; (4b8c <_usb_device_interrupt_handler+0x304>)
    491a:	891b      	ldrh	r3, [r3, #8]
    491c:	045b      	lsls	r3, r3, #17
    491e:	0d5b      	lsrs	r3, r3, #21
    4920:	b29b      	uxth	r3, r3
							& USB_LPM_ATTRIBUT_REMOTEWAKE_MASK;
    4922:	001a      	movs	r2, r3
    4924:	2380      	movs	r3, #128	; 0x80
    4926:	005b      	lsls	r3, r3, #1
    4928:	401a      	ands	r2, r3
					device_callback_lpm_wakeup_enable =
    492a:	4b99      	ldr	r3, [pc, #612]	; (4b90 <_usb_device_interrupt_handler+0x308>)
    492c:	601a      	str	r2, [r3, #0]
				}
				(_usb_instances->device_callback[i])(_usb_instances, &device_callback_lpm_wakeup_enable);
    492e:	4b95      	ldr	r3, [pc, #596]	; (4b84 <_usb_device_interrupt_handler+0x2fc>)
    4930:	681b      	ldr	r3, [r3, #0]
    4932:	68fa      	ldr	r2, [r7, #12]
    4934:	322e      	adds	r2, #46	; 0x2e
    4936:	0092      	lsls	r2, r2, #2
    4938:	58d2      	ldr	r2, [r2, r3]
    493a:	4b92      	ldr	r3, [pc, #584]	; (4b84 <_usb_device_interrupt_handler+0x2fc>)
    493c:	681b      	ldr	r3, [r3, #0]
    493e:	4994      	ldr	r1, [pc, #592]	; (4b90 <_usb_device_interrupt_handler+0x308>)
    4940:	0018      	movs	r0, r3
    4942:	4790      	blx	r2
		for (i = 0; i < USB_DEVICE_CALLBACK_N; i ++) {
    4944:	68fb      	ldr	r3, [r7, #12]
    4946:	3301      	adds	r3, #1
    4948:	60fb      	str	r3, [r7, #12]
    494a:	68fb      	ldr	r3, [r7, #12]
    494c:	2b06      	cmp	r3, #6
    494e:	ddc4      	ble.n	48da <_usb_device_interrupt_handler+0x52>
    4950:	e250      	b.n	4df4 <_usb_device_interrupt_handler+0x56c>
		}

	} else {
		/* endpoint interrupt */

		for (uint8_t i = 0; i < USB_EPT_NUM; i++) {
    4952:	230b      	movs	r3, #11
    4954:	18fb      	adds	r3, r7, r3
    4956:	2200      	movs	r2, #0
    4958:	701a      	strb	r2, [r3, #0]
    495a:	e23b      	b.n	4dd4 <_usb_device_interrupt_handler+0x54c>

			if (ep_inst & (1 << i)) {
    495c:	2308      	movs	r3, #8
    495e:	18fb      	adds	r3, r7, r3
    4960:	881a      	ldrh	r2, [r3, #0]
    4962:	230b      	movs	r3, #11
    4964:	18fb      	adds	r3, r7, r3
    4966:	781b      	ldrb	r3, [r3, #0]
    4968:	411a      	asrs	r2, r3
    496a:	0013      	movs	r3, r2
    496c:	2201      	movs	r2, #1
    496e:	4013      	ands	r3, r2
    4970:	d100      	bne.n	4974 <_usb_device_interrupt_handler+0xec>
    4972:	e228      	b.n	4dc6 <_usb_device_interrupt_handler+0x53e>
				flags = _usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg;
    4974:	4b83      	ldr	r3, [pc, #524]	; (4b84 <_usb_device_interrupt_handler+0x2fc>)
    4976:	681b      	ldr	r3, [r3, #0]
    4978:	681a      	ldr	r2, [r3, #0]
    497a:	230b      	movs	r3, #11
    497c:	18fb      	adds	r3, r7, r3
    497e:	781b      	ldrb	r3, [r3, #0]
    4980:	3308      	adds	r3, #8
    4982:	015b      	lsls	r3, r3, #5
    4984:	18d3      	adds	r3, r2, r3
    4986:	3307      	adds	r3, #7
    4988:	781b      	ldrb	r3, [r3, #0]
    498a:	b2da      	uxtb	r2, r3
    498c:	1dbb      	adds	r3, r7, #6
    498e:	801a      	strh	r2, [r3, #0]
				flags_run = flags &
						_usb_instances->device_endpoint_enabled_callback_mask[i] &
    4990:	4b7c      	ldr	r3, [pc, #496]	; (4b84 <_usb_device_interrupt_handler+0x2fc>)
    4992:	6819      	ldr	r1, [r3, #0]
    4994:	230b      	movs	r3, #11
    4996:	18fb      	adds	r3, r7, r3
    4998:	781a      	ldrb	r2, [r3, #0]
    499a:	23b0      	movs	r3, #176	; 0xb0
    499c:	005b      	lsls	r3, r3, #1
    499e:	188a      	adds	r2, r1, r2
    49a0:	18d3      	adds	r3, r2, r3
    49a2:	781b      	ldrb	r3, [r3, #0]
    49a4:	b29b      	uxth	r3, r3
				flags_run = flags &
    49a6:	1dba      	adds	r2, r7, #6
    49a8:	8812      	ldrh	r2, [r2, #0]
    49aa:	4013      	ands	r3, r2
    49ac:	b29b      	uxth	r3, r3
    49ae:	b21a      	sxth	r2, r3
						_usb_instances->device_endpoint_registered_callback_mask[i];
    49b0:	4b74      	ldr	r3, [pc, #464]	; (4b84 <_usb_device_interrupt_handler+0x2fc>)
    49b2:	6818      	ldr	r0, [r3, #0]
    49b4:	230b      	movs	r3, #11
    49b6:	18fb      	adds	r3, r7, r3
    49b8:	7819      	ldrb	r1, [r3, #0]
    49ba:	23ac      	movs	r3, #172	; 0xac
    49bc:	005b      	lsls	r3, r3, #1
    49be:	1841      	adds	r1, r0, r1
    49c0:	18cb      	adds	r3, r1, r3
    49c2:	781b      	ldrb	r3, [r3, #0]
    49c4:	b21b      	sxth	r3, r3
						_usb_instances->device_endpoint_enabled_callback_mask[i] &
    49c6:	4013      	ands	r3, r2
    49c8:	b21a      	sxth	r2, r3
				flags_run = flags &
    49ca:	1d3b      	adds	r3, r7, #4
    49cc:	801a      	strh	r2, [r3, #0]

				// endpoint transfer stall interrupt
				if (flags & USB_DEVICE_EPINTFLAG_STALL_Msk) {
    49ce:	1dbb      	adds	r3, r7, #6
    49d0:	881b      	ldrh	r3, [r3, #0]
    49d2:	2260      	movs	r2, #96	; 0x60
    49d4:	4013      	ands	r3, r2
    49d6:	d05c      	beq.n	4a92 <_usb_device_interrupt_handler+0x20a>
					if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_STALL1) {
    49d8:	4b6a      	ldr	r3, [pc, #424]	; (4b84 <_usb_device_interrupt_handler+0x2fc>)
    49da:	681b      	ldr	r3, [r3, #0]
    49dc:	681a      	ldr	r2, [r3, #0]
    49de:	230b      	movs	r3, #11
    49e0:	18fb      	adds	r3, r7, r3
    49e2:	781b      	ldrb	r3, [r3, #0]
    49e4:	3308      	adds	r3, #8
    49e6:	015b      	lsls	r3, r3, #5
    49e8:	18d3      	adds	r3, r2, r3
    49ea:	3307      	adds	r3, #7
    49ec:	781b      	ldrb	r3, [r3, #0]
    49ee:	b2db      	uxtb	r3, r3
    49f0:	001a      	movs	r2, r3
    49f2:	2340      	movs	r3, #64	; 0x40
    49f4:	4013      	ands	r3, r2
    49f6:	d015      	beq.n	4a24 <_usb_device_interrupt_handler+0x19c>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL1;
    49f8:	4b62      	ldr	r3, [pc, #392]	; (4b84 <_usb_device_interrupt_handler+0x2fc>)
    49fa:	681b      	ldr	r3, [r3, #0]
    49fc:	681a      	ldr	r2, [r3, #0]
    49fe:	230b      	movs	r3, #11
    4a00:	18fb      	adds	r3, r7, r3
    4a02:	781b      	ldrb	r3, [r3, #0]
    4a04:	3308      	adds	r3, #8
    4a06:	015b      	lsls	r3, r3, #5
    4a08:	18d3      	adds	r3, r2, r3
    4a0a:	3307      	adds	r3, #7
    4a0c:	2240      	movs	r2, #64	; 0x40
    4a0e:	701a      	strb	r2, [r3, #0]
						ep_callback_para.endpoint_address = USB_EP_DIR_IN | i;
    4a10:	230b      	movs	r3, #11
    4a12:	18fb      	adds	r3, r7, r3
    4a14:	781b      	ldrb	r3, [r3, #0]
    4a16:	2280      	movs	r2, #128	; 0x80
    4a18:	4252      	negs	r2, r2
    4a1a:	4313      	orrs	r3, r2
    4a1c:	b2da      	uxtb	r2, r3
    4a1e:	4b5d      	ldr	r3, [pc, #372]	; (4b94 <_usb_device_interrupt_handler+0x30c>)
    4a20:	719a      	strb	r2, [r3, #6]
    4a22:	e020      	b.n	4a66 <_usb_device_interrupt_handler+0x1de>
					} else if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_STALL0) {
    4a24:	4b57      	ldr	r3, [pc, #348]	; (4b84 <_usb_device_interrupt_handler+0x2fc>)
    4a26:	681b      	ldr	r3, [r3, #0]
    4a28:	681a      	ldr	r2, [r3, #0]
    4a2a:	230b      	movs	r3, #11
    4a2c:	18fb      	adds	r3, r7, r3
    4a2e:	781b      	ldrb	r3, [r3, #0]
    4a30:	3308      	adds	r3, #8
    4a32:	015b      	lsls	r3, r3, #5
    4a34:	18d3      	adds	r3, r2, r3
    4a36:	3307      	adds	r3, #7
    4a38:	781b      	ldrb	r3, [r3, #0]
    4a3a:	b2db      	uxtb	r3, r3
    4a3c:	001a      	movs	r2, r3
    4a3e:	2320      	movs	r3, #32
    4a40:	4013      	ands	r3, r2
    4a42:	d010      	beq.n	4a66 <_usb_device_interrupt_handler+0x1de>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL0;
    4a44:	4b4f      	ldr	r3, [pc, #316]	; (4b84 <_usb_device_interrupt_handler+0x2fc>)
    4a46:	681b      	ldr	r3, [r3, #0]
    4a48:	681a      	ldr	r2, [r3, #0]
    4a4a:	230b      	movs	r3, #11
    4a4c:	18fb      	adds	r3, r7, r3
    4a4e:	781b      	ldrb	r3, [r3, #0]
    4a50:	3308      	adds	r3, #8
    4a52:	015b      	lsls	r3, r3, #5
    4a54:	18d3      	adds	r3, r2, r3
    4a56:	3307      	adds	r3, #7
    4a58:	2220      	movs	r2, #32
    4a5a:	701a      	strb	r2, [r3, #0]
						ep_callback_para.endpoint_address = USB_EP_DIR_OUT | i;
    4a5c:	4b4d      	ldr	r3, [pc, #308]	; (4b94 <_usb_device_interrupt_handler+0x30c>)
    4a5e:	220b      	movs	r2, #11
    4a60:	18ba      	adds	r2, r7, r2
    4a62:	7812      	ldrb	r2, [r2, #0]
    4a64:	719a      	strb	r2, [r3, #6]
					}

					if (flags_run & USB_DEVICE_EPINTFLAG_STALL_Msk) {
    4a66:	1d3b      	adds	r3, r7, #4
    4a68:	881b      	ldrh	r3, [r3, #0]
    4a6a:	2260      	movs	r2, #96	; 0x60
    4a6c:	4013      	ands	r3, r2
    4a6e:	d100      	bne.n	4a72 <_usb_device_interrupt_handler+0x1ea>
    4a70:	e1b7      	b.n	4de2 <_usb_device_interrupt_handler+0x55a>
						(_usb_instances->device_endpoint_callback[i][USB_DEVICE_ENDPOINT_CALLBACK_STALL])(_usb_instances,&ep_callback_para);
    4a72:	4b44      	ldr	r3, [pc, #272]	; (4b84 <_usb_device_interrupt_handler+0x2fc>)
    4a74:	681a      	ldr	r2, [r3, #0]
    4a76:	230b      	movs	r3, #11
    4a78:	18fb      	adds	r3, r7, r3
    4a7a:	781b      	ldrb	r3, [r3, #0]
    4a7c:	21e0      	movs	r1, #224	; 0xe0
    4a7e:	011b      	lsls	r3, r3, #4
    4a80:	18d3      	adds	r3, r2, r3
    4a82:	185b      	adds	r3, r3, r1
    4a84:	681a      	ldr	r2, [r3, #0]
    4a86:	4b3f      	ldr	r3, [pc, #252]	; (4b84 <_usb_device_interrupt_handler+0x2fc>)
    4a88:	681b      	ldr	r3, [r3, #0]
    4a8a:	4942      	ldr	r1, [pc, #264]	; (4b94 <_usb_device_interrupt_handler+0x30c>)
    4a8c:	0018      	movs	r0, r3
    4a8e:	4790      	blx	r2
					}
					return;
    4a90:	e1a7      	b.n	4de2 <_usb_device_interrupt_handler+0x55a>
				}

				// endpoint received setup interrupt
				if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    4a92:	1dbb      	adds	r3, r7, #6
    4a94:	881b      	ldrh	r3, [r3, #0]
    4a96:	2210      	movs	r2, #16
    4a98:	4013      	ands	r3, r2
    4a9a:	d038      	beq.n	4b0e <_usb_device_interrupt_handler+0x286>
					_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_RXSTP;
    4a9c:	4b39      	ldr	r3, [pc, #228]	; (4b84 <_usb_device_interrupt_handler+0x2fc>)
    4a9e:	681b      	ldr	r3, [r3, #0]
    4aa0:	681a      	ldr	r2, [r3, #0]
    4aa2:	230b      	movs	r3, #11
    4aa4:	18fb      	adds	r3, r7, r3
    4aa6:	781b      	ldrb	r3, [r3, #0]
    4aa8:	3308      	adds	r3, #8
    4aaa:	015b      	lsls	r3, r3, #5
    4aac:	18d3      	adds	r3, r2, r3
    4aae:	3307      	adds	r3, #7
    4ab0:	2210      	movs	r2, #16
    4ab2:	701a      	strb	r2, [r3, #0]
					if(_usb_instances->device_endpoint_enabled_callback_mask[i] & _usb_endpoint_irq_bits[USB_DEVICE_ENDPOINT_CALLBACK_RXSTP]) {
    4ab4:	4b33      	ldr	r3, [pc, #204]	; (4b84 <_usb_device_interrupt_handler+0x2fc>)
    4ab6:	6819      	ldr	r1, [r3, #0]
    4ab8:	230b      	movs	r3, #11
    4aba:	18fb      	adds	r3, r7, r3
    4abc:	781a      	ldrb	r2, [r3, #0]
    4abe:	23b0      	movs	r3, #176	; 0xb0
    4ac0:	005b      	lsls	r3, r3, #1
    4ac2:	188a      	adds	r2, r1, r2
    4ac4:	18d3      	adds	r3, r2, r3
    4ac6:	781b      	ldrb	r3, [r3, #0]
    4ac8:	2210      	movs	r2, #16
    4aca:	4013      	ands	r3, r2
    4acc:	b2db      	uxtb	r3, r3
    4ace:	2b00      	cmp	r3, #0
    4ad0:	d100      	bne.n	4ad4 <_usb_device_interrupt_handler+0x24c>
    4ad2:	e188      	b.n	4de6 <_usb_device_interrupt_handler+0x55e>
						ep_callback_para.received_bytes = (uint16_t)(usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT);
    4ad4:	230b      	movs	r3, #11
    4ad6:	18fb      	adds	r3, r7, r3
    4ad8:	781b      	ldrb	r3, [r3, #0]
    4ada:	4a2c      	ldr	r2, [pc, #176]	; (4b8c <_usb_device_interrupt_handler+0x304>)
    4adc:	015b      	lsls	r3, r3, #5
    4ade:	18d3      	adds	r3, r2, r3
    4ae0:	685b      	ldr	r3, [r3, #4]
    4ae2:	049b      	lsls	r3, r3, #18
    4ae4:	0c9b      	lsrs	r3, r3, #18
    4ae6:	b29b      	uxth	r3, r3
    4ae8:	001a      	movs	r2, r3
    4aea:	4b2a      	ldr	r3, [pc, #168]	; (4b94 <_usb_device_interrupt_handler+0x30c>)
    4aec:	801a      	strh	r2, [r3, #0]
						(_usb_instances->device_endpoint_callback[i][USB_DEVICE_ENDPOINT_CALLBACK_RXSTP])(_usb_instances,&ep_callback_para);
    4aee:	4b25      	ldr	r3, [pc, #148]	; (4b84 <_usb_device_interrupt_handler+0x2fc>)
    4af0:	681a      	ldr	r2, [r3, #0]
    4af2:	230b      	movs	r3, #11
    4af4:	18fb      	adds	r3, r7, r3
    4af6:	781b      	ldrb	r3, [r3, #0]
    4af8:	21dc      	movs	r1, #220	; 0xdc
    4afa:	011b      	lsls	r3, r3, #4
    4afc:	18d3      	adds	r3, r2, r3
    4afe:	185b      	adds	r3, r3, r1
    4b00:	681a      	ldr	r2, [r3, #0]
    4b02:	4b20      	ldr	r3, [pc, #128]	; (4b84 <_usb_device_interrupt_handler+0x2fc>)
    4b04:	681b      	ldr	r3, [r3, #0]
    4b06:	4923      	ldr	r1, [pc, #140]	; (4b94 <_usb_device_interrupt_handler+0x30c>)
    4b08:	0018      	movs	r0, r3
    4b0a:	4790      	blx	r2
					}
					return;
    4b0c:	e16b      	b.n	4de6 <_usb_device_interrupt_handler+0x55e>
				}

				// endpoint transfer complete interrupt
				if (flags & USB_DEVICE_EPINTFLAG_TRCPT_Msk) {
    4b0e:	1dbb      	adds	r3, r7, #6
    4b10:	881b      	ldrh	r3, [r3, #0]
    4b12:	2203      	movs	r2, #3
    4b14:	4013      	ands	r3, r2
    4b16:	d100      	bne.n	4b1a <_usb_device_interrupt_handler+0x292>
    4b18:	e08f      	b.n	4c3a <_usb_device_interrupt_handler+0x3b2>
					if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRCPT1) {
    4b1a:	4b1a      	ldr	r3, [pc, #104]	; (4b84 <_usb_device_interrupt_handler+0x2fc>)
    4b1c:	681b      	ldr	r3, [r3, #0]
    4b1e:	681a      	ldr	r2, [r3, #0]
    4b20:	230b      	movs	r3, #11
    4b22:	18fb      	adds	r3, r7, r3
    4b24:	781b      	ldrb	r3, [r3, #0]
    4b26:	3308      	adds	r3, #8
    4b28:	015b      	lsls	r3, r3, #5
    4b2a:	18d3      	adds	r3, r2, r3
    4b2c:	3307      	adds	r3, #7
    4b2e:	781b      	ldrb	r3, [r3, #0]
    4b30:	b2db      	uxtb	r3, r3
    4b32:	001a      	movs	r2, r3
    4b34:	2302      	movs	r3, #2
    4b36:	4013      	ands	r3, r2
    4b38:	d02e      	beq.n	4b98 <_usb_device_interrupt_handler+0x310>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT1;
    4b3a:	4b12      	ldr	r3, [pc, #72]	; (4b84 <_usb_device_interrupt_handler+0x2fc>)
    4b3c:	681b      	ldr	r3, [r3, #0]
    4b3e:	681a      	ldr	r2, [r3, #0]
    4b40:	230b      	movs	r3, #11
    4b42:	18fb      	adds	r3, r7, r3
    4b44:	781b      	ldrb	r3, [r3, #0]
    4b46:	3308      	adds	r3, #8
    4b48:	015b      	lsls	r3, r3, #5
    4b4a:	18d3      	adds	r3, r2, r3
    4b4c:	3307      	adds	r3, #7
    4b4e:	2202      	movs	r2, #2
    4b50:	701a      	strb	r2, [r3, #0]
						ep_callback_para.endpoint_address = USB_EP_DIR_IN | i;
    4b52:	230b      	movs	r3, #11
    4b54:	18fb      	adds	r3, r7, r3
    4b56:	781b      	ldrb	r3, [r3, #0]
    4b58:	2280      	movs	r2, #128	; 0x80
    4b5a:	4252      	negs	r2, r2
    4b5c:	4313      	orrs	r3, r2
    4b5e:	b2da      	uxtb	r2, r3
    4b60:	4b0c      	ldr	r3, [pc, #48]	; (4b94 <_usb_device_interrupt_handler+0x30c>)
    4b62:	719a      	strb	r2, [r3, #6]
						ep_callback_para.sent_bytes = (uint16_t)(usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT);
    4b64:	230b      	movs	r3, #11
    4b66:	18fb      	adds	r3, r7, r3
    4b68:	781b      	ldrb	r3, [r3, #0]
    4b6a:	4a08      	ldr	r2, [pc, #32]	; (4b8c <_usb_device_interrupt_handler+0x304>)
    4b6c:	015b      	lsls	r3, r3, #5
    4b6e:	18d3      	adds	r3, r2, r3
    4b70:	3310      	adds	r3, #16
    4b72:	685b      	ldr	r3, [r3, #4]
    4b74:	049b      	lsls	r3, r3, #18
    4b76:	0c9b      	lsrs	r3, r3, #18
    4b78:	b29b      	uxth	r3, r3
    4b7a:	001a      	movs	r2, r3
    4b7c:	4b05      	ldr	r3, [pc, #20]	; (4b94 <_usb_device_interrupt_handler+0x30c>)
    4b7e:	805a      	strh	r2, [r3, #2]
    4b80:	e045      	b.n	4c0e <_usb_device_interrupt_handler+0x386>
    4b82:	46c0      	nop			; (mov r8, r8)
    4b84:	20000520 	.word	0x20000520
    4b88:	0001f83c 	.word	0x0001f83c
    4b8c:	200028ec 	.word	0x200028ec
    4b90:	2000052c 	.word	0x2000052c
    4b94:	20000530 	.word	0x20000530

					} else if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRCPT0) {
    4b98:	4b98      	ldr	r3, [pc, #608]	; (4dfc <_usb_device_interrupt_handler+0x574>)
    4b9a:	681b      	ldr	r3, [r3, #0]
    4b9c:	681a      	ldr	r2, [r3, #0]
    4b9e:	230b      	movs	r3, #11
    4ba0:	18fb      	adds	r3, r7, r3
    4ba2:	781b      	ldrb	r3, [r3, #0]
    4ba4:	3308      	adds	r3, #8
    4ba6:	015b      	lsls	r3, r3, #5
    4ba8:	18d3      	adds	r3, r2, r3
    4baa:	3307      	adds	r3, #7
    4bac:	781b      	ldrb	r3, [r3, #0]
    4bae:	b2db      	uxtb	r3, r3
    4bb0:	001a      	movs	r2, r3
    4bb2:	2301      	movs	r3, #1
    4bb4:	4013      	ands	r3, r2
    4bb6:	d02a      	beq.n	4c0e <_usb_device_interrupt_handler+0x386>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT0;
    4bb8:	4b90      	ldr	r3, [pc, #576]	; (4dfc <_usb_device_interrupt_handler+0x574>)
    4bba:	681b      	ldr	r3, [r3, #0]
    4bbc:	681a      	ldr	r2, [r3, #0]
    4bbe:	230b      	movs	r3, #11
    4bc0:	18fb      	adds	r3, r7, r3
    4bc2:	781b      	ldrb	r3, [r3, #0]
    4bc4:	3308      	adds	r3, #8
    4bc6:	015b      	lsls	r3, r3, #5
    4bc8:	18d3      	adds	r3, r2, r3
    4bca:	3307      	adds	r3, #7
    4bcc:	2201      	movs	r2, #1
    4bce:	701a      	strb	r2, [r3, #0]
						ep_callback_para.endpoint_address = USB_EP_DIR_OUT | i;
    4bd0:	4b8b      	ldr	r3, [pc, #556]	; (4e00 <_usb_device_interrupt_handler+0x578>)
    4bd2:	220b      	movs	r2, #11
    4bd4:	18ba      	adds	r2, r7, r2
    4bd6:	7812      	ldrb	r2, [r2, #0]
    4bd8:	719a      	strb	r2, [r3, #6]
						ep_callback_para.received_bytes = (uint16_t)(usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT);
    4bda:	230b      	movs	r3, #11
    4bdc:	18fb      	adds	r3, r7, r3
    4bde:	781b      	ldrb	r3, [r3, #0]
    4be0:	4a88      	ldr	r2, [pc, #544]	; (4e04 <_usb_device_interrupt_handler+0x57c>)
    4be2:	015b      	lsls	r3, r3, #5
    4be4:	18d3      	adds	r3, r2, r3
    4be6:	685b      	ldr	r3, [r3, #4]
    4be8:	049b      	lsls	r3, r3, #18
    4bea:	0c9b      	lsrs	r3, r3, #18
    4bec:	b29b      	uxth	r3, r3
    4bee:	001a      	movs	r2, r3
    4bf0:	4b83      	ldr	r3, [pc, #524]	; (4e00 <_usb_device_interrupt_handler+0x578>)
    4bf2:	801a      	strh	r2, [r3, #0]
						ep_callback_para.out_buffer_size = (uint16_t)(usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE);
    4bf4:	230b      	movs	r3, #11
    4bf6:	18fb      	adds	r3, r7, r3
    4bf8:	781b      	ldrb	r3, [r3, #0]
    4bfa:	4a82      	ldr	r2, [pc, #520]	; (4e04 <_usb_device_interrupt_handler+0x57c>)
    4bfc:	015b      	lsls	r3, r3, #5
    4bfe:	18d3      	adds	r3, r2, r3
    4c00:	685b      	ldr	r3, [r3, #4]
    4c02:	011b      	lsls	r3, r3, #4
    4c04:	0c9b      	lsrs	r3, r3, #18
    4c06:	b29b      	uxth	r3, r3
    4c08:	001a      	movs	r2, r3
    4c0a:	4b7d      	ldr	r3, [pc, #500]	; (4e00 <_usb_device_interrupt_handler+0x578>)
    4c0c:	809a      	strh	r2, [r3, #4]
					}
					if(flags_run & USB_DEVICE_EPINTFLAG_TRCPT_Msk) {
    4c0e:	1d3b      	adds	r3, r7, #4
    4c10:	881b      	ldrh	r3, [r3, #0]
    4c12:	2203      	movs	r2, #3
    4c14:	4013      	ands	r3, r2
    4c16:	d100      	bne.n	4c1a <_usb_device_interrupt_handler+0x392>
    4c18:	e0e7      	b.n	4dea <_usb_device_interrupt_handler+0x562>
						(_usb_instances->device_endpoint_callback[i][USB_DEVICE_ENDPOINT_CALLBACK_TRCPT])(_usb_instances,&ep_callback_para);
    4c1a:	4b78      	ldr	r3, [pc, #480]	; (4dfc <_usb_device_interrupt_handler+0x574>)
    4c1c:	681a      	ldr	r2, [r3, #0]
    4c1e:	230b      	movs	r3, #11
    4c20:	18fb      	adds	r3, r7, r3
    4c22:	781b      	ldrb	r3, [r3, #0]
    4c24:	330d      	adds	r3, #13
    4c26:	011b      	lsls	r3, r3, #4
    4c28:	18d3      	adds	r3, r2, r3
    4c2a:	3304      	adds	r3, #4
    4c2c:	681a      	ldr	r2, [r3, #0]
    4c2e:	4b73      	ldr	r3, [pc, #460]	; (4dfc <_usb_device_interrupt_handler+0x574>)
    4c30:	681b      	ldr	r3, [r3, #0]
    4c32:	4973      	ldr	r1, [pc, #460]	; (4e00 <_usb_device_interrupt_handler+0x578>)
    4c34:	0018      	movs	r0, r3
    4c36:	4790      	blx	r2
					}
					return;
    4c38:	e0d7      	b.n	4dea <_usb_device_interrupt_handler+0x562>
				}

				// endpoint transfer fail interrupt
				if (flags & USB_DEVICE_EPINTFLAG_TRFAIL_Msk) {
    4c3a:	1dbb      	adds	r3, r7, #6
    4c3c:	881b      	ldrh	r3, [r3, #0]
    4c3e:	220c      	movs	r2, #12
    4c40:	4013      	ands	r3, r2
    4c42:	d100      	bne.n	4c46 <_usb_device_interrupt_handler+0x3be>
    4c44:	e0bf      	b.n	4dc6 <_usb_device_interrupt_handler+0x53e>
					if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    4c46:	4b6d      	ldr	r3, [pc, #436]	; (4dfc <_usb_device_interrupt_handler+0x574>)
    4c48:	681b      	ldr	r3, [r3, #0]
    4c4a:	681a      	ldr	r2, [r3, #0]
    4c4c:	230b      	movs	r3, #11
    4c4e:	18fb      	adds	r3, r7, r3
    4c50:	781b      	ldrb	r3, [r3, #0]
    4c52:	3308      	adds	r3, #8
    4c54:	015b      	lsls	r3, r3, #5
    4c56:	18d3      	adds	r3, r2, r3
    4c58:	3307      	adds	r3, #7
    4c5a:	781b      	ldrb	r3, [r3, #0]
    4c5c:	b2db      	uxtb	r3, r3
    4c5e:	001a      	movs	r2, r3
    4c60:	2308      	movs	r3, #8
    4c62:	4013      	ands	r3, r2
    4c64:	d047      	beq.n	4cf6 <_usb_device_interrupt_handler+0x46e>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRFAIL1;
    4c66:	4b65      	ldr	r3, [pc, #404]	; (4dfc <_usb_device_interrupt_handler+0x574>)
    4c68:	681b      	ldr	r3, [r3, #0]
    4c6a:	681a      	ldr	r2, [r3, #0]
    4c6c:	230b      	movs	r3, #11
    4c6e:	18fb      	adds	r3, r7, r3
    4c70:	781b      	ldrb	r3, [r3, #0]
    4c72:	3308      	adds	r3, #8
    4c74:	015b      	lsls	r3, r3, #5
    4c76:	18d3      	adds	r3, r2, r3
    4c78:	3307      	adds	r3, #7
    4c7a:	2208      	movs	r2, #8
    4c7c:	701a      	strb	r2, [r3, #0]
						if (usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[1].STATUS_BK.reg & USB_DEVICE_STATUS_BK_ERRORFLOW) {
    4c7e:	230b      	movs	r3, #11
    4c80:	18fb      	adds	r3, r7, r3
    4c82:	781b      	ldrb	r3, [r3, #0]
    4c84:	4a5f      	ldr	r2, [pc, #380]	; (4e04 <_usb_device_interrupt_handler+0x57c>)
    4c86:	015b      	lsls	r3, r3, #5
    4c88:	18d3      	adds	r3, r2, r3
    4c8a:	331a      	adds	r3, #26
    4c8c:	781b      	ldrb	r3, [r3, #0]
    4c8e:	b2db      	uxtb	r3, r3
    4c90:	001a      	movs	r2, r3
    4c92:	2302      	movs	r3, #2
    4c94:	4013      	ands	r3, r2
    4c96:	d014      	beq.n	4cc2 <_usb_device_interrupt_handler+0x43a>
							usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[1].STATUS_BK.reg &= ~USB_DEVICE_STATUS_BK_ERRORFLOW;
    4c98:	230b      	movs	r3, #11
    4c9a:	18fb      	adds	r3, r7, r3
    4c9c:	781b      	ldrb	r3, [r3, #0]
    4c9e:	220b      	movs	r2, #11
    4ca0:	18ba      	adds	r2, r7, r2
    4ca2:	7812      	ldrb	r2, [r2, #0]
    4ca4:	4957      	ldr	r1, [pc, #348]	; (4e04 <_usb_device_interrupt_handler+0x57c>)
    4ca6:	0152      	lsls	r2, r2, #5
    4ca8:	188a      	adds	r2, r1, r2
    4caa:	321a      	adds	r2, #26
    4cac:	7812      	ldrb	r2, [r2, #0]
    4cae:	b2d2      	uxtb	r2, r2
    4cb0:	2102      	movs	r1, #2
    4cb2:	438a      	bics	r2, r1
    4cb4:	b2d1      	uxtb	r1, r2
    4cb6:	4a53      	ldr	r2, [pc, #332]	; (4e04 <_usb_device_interrupt_handler+0x57c>)
    4cb8:	015b      	lsls	r3, r3, #5
    4cba:	18d3      	adds	r3, r2, r3
    4cbc:	331a      	adds	r3, #26
    4cbe:	1c0a      	adds	r2, r1, #0
    4cc0:	701a      	strb	r2, [r3, #0]
						}
						ep_callback_para.endpoint_address = USB_EP_DIR_IN | i;
    4cc2:	230b      	movs	r3, #11
    4cc4:	18fb      	adds	r3, r7, r3
    4cc6:	781b      	ldrb	r3, [r3, #0]
    4cc8:	2280      	movs	r2, #128	; 0x80
    4cca:	4252      	negs	r2, r2
    4ccc:	4313      	orrs	r3, r2
    4cce:	b2da      	uxtb	r2, r3
    4cd0:	4b4b      	ldr	r3, [pc, #300]	; (4e00 <_usb_device_interrupt_handler+0x578>)
    4cd2:	719a      	strb	r2, [r3, #6]
						if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRCPT1) {
    4cd4:	4b49      	ldr	r3, [pc, #292]	; (4dfc <_usb_device_interrupt_handler+0x574>)
    4cd6:	681b      	ldr	r3, [r3, #0]
    4cd8:	681a      	ldr	r2, [r3, #0]
    4cda:	230b      	movs	r3, #11
    4cdc:	18fb      	adds	r3, r7, r3
    4cde:	781b      	ldrb	r3, [r3, #0]
    4ce0:	3308      	adds	r3, #8
    4ce2:	015b      	lsls	r3, r3, #5
    4ce4:	18d3      	adds	r3, r2, r3
    4ce6:	3307      	adds	r3, #7
    4ce8:	781b      	ldrb	r3, [r3, #0]
    4cea:	b2db      	uxtb	r3, r3
    4cec:	001a      	movs	r2, r3
    4cee:	2302      	movs	r3, #2
    4cf0:	4013      	ands	r3, r2
    4cf2:	d053      	beq.n	4d9c <_usb_device_interrupt_handler+0x514>
							return;
    4cf4:	e07e      	b.n	4df4 <_usb_device_interrupt_handler+0x56c>
						}
					} else if(_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    4cf6:	4b41      	ldr	r3, [pc, #260]	; (4dfc <_usb_device_interrupt_handler+0x574>)
    4cf8:	681b      	ldr	r3, [r3, #0]
    4cfa:	681a      	ldr	r2, [r3, #0]
    4cfc:	230b      	movs	r3, #11
    4cfe:	18fb      	adds	r3, r7, r3
    4d00:	781b      	ldrb	r3, [r3, #0]
    4d02:	3308      	adds	r3, #8
    4d04:	015b      	lsls	r3, r3, #5
    4d06:	18d3      	adds	r3, r2, r3
    4d08:	3307      	adds	r3, #7
    4d0a:	781b      	ldrb	r3, [r3, #0]
    4d0c:	b2db      	uxtb	r3, r3
    4d0e:	001a      	movs	r2, r3
    4d10:	2304      	movs	r3, #4
    4d12:	4013      	ands	r3, r2
    4d14:	d042      	beq.n	4d9c <_usb_device_interrupt_handler+0x514>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRFAIL0;
    4d16:	4b39      	ldr	r3, [pc, #228]	; (4dfc <_usb_device_interrupt_handler+0x574>)
    4d18:	681b      	ldr	r3, [r3, #0]
    4d1a:	681a      	ldr	r2, [r3, #0]
    4d1c:	230b      	movs	r3, #11
    4d1e:	18fb      	adds	r3, r7, r3
    4d20:	781b      	ldrb	r3, [r3, #0]
    4d22:	3308      	adds	r3, #8
    4d24:	015b      	lsls	r3, r3, #5
    4d26:	18d3      	adds	r3, r2, r3
    4d28:	3307      	adds	r3, #7
    4d2a:	2204      	movs	r2, #4
    4d2c:	701a      	strb	r2, [r3, #0]
						if (usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].STATUS_BK.reg & USB_DEVICE_STATUS_BK_ERRORFLOW) {
    4d2e:	230b      	movs	r3, #11
    4d30:	18fb      	adds	r3, r7, r3
    4d32:	781b      	ldrb	r3, [r3, #0]
    4d34:	4a33      	ldr	r2, [pc, #204]	; (4e04 <_usb_device_interrupt_handler+0x57c>)
    4d36:	015b      	lsls	r3, r3, #5
    4d38:	18d3      	adds	r3, r2, r3
    4d3a:	330a      	adds	r3, #10
    4d3c:	781b      	ldrb	r3, [r3, #0]
    4d3e:	b2db      	uxtb	r3, r3
    4d40:	001a      	movs	r2, r3
    4d42:	2302      	movs	r3, #2
    4d44:	4013      	ands	r3, r2
    4d46:	d014      	beq.n	4d72 <_usb_device_interrupt_handler+0x4ea>
							usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].STATUS_BK.reg &= ~USB_DEVICE_STATUS_BK_ERRORFLOW;
    4d48:	230b      	movs	r3, #11
    4d4a:	18fb      	adds	r3, r7, r3
    4d4c:	781b      	ldrb	r3, [r3, #0]
    4d4e:	220b      	movs	r2, #11
    4d50:	18ba      	adds	r2, r7, r2
    4d52:	7812      	ldrb	r2, [r2, #0]
    4d54:	492b      	ldr	r1, [pc, #172]	; (4e04 <_usb_device_interrupt_handler+0x57c>)
    4d56:	0152      	lsls	r2, r2, #5
    4d58:	188a      	adds	r2, r1, r2
    4d5a:	320a      	adds	r2, #10
    4d5c:	7812      	ldrb	r2, [r2, #0]
    4d5e:	b2d2      	uxtb	r2, r2
    4d60:	2102      	movs	r1, #2
    4d62:	438a      	bics	r2, r1
    4d64:	b2d1      	uxtb	r1, r2
    4d66:	4a27      	ldr	r2, [pc, #156]	; (4e04 <_usb_device_interrupt_handler+0x57c>)
    4d68:	015b      	lsls	r3, r3, #5
    4d6a:	18d3      	adds	r3, r2, r3
    4d6c:	330a      	adds	r3, #10
    4d6e:	1c0a      	adds	r2, r1, #0
    4d70:	701a      	strb	r2, [r3, #0]
						}
						ep_callback_para.endpoint_address = USB_EP_DIR_OUT | i;
    4d72:	4b23      	ldr	r3, [pc, #140]	; (4e00 <_usb_device_interrupt_handler+0x578>)
    4d74:	220b      	movs	r2, #11
    4d76:	18ba      	adds	r2, r7, r2
    4d78:	7812      	ldrb	r2, [r2, #0]
    4d7a:	719a      	strb	r2, [r3, #6]
						if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRCPT0) {
    4d7c:	4b1f      	ldr	r3, [pc, #124]	; (4dfc <_usb_device_interrupt_handler+0x574>)
    4d7e:	681b      	ldr	r3, [r3, #0]
    4d80:	681a      	ldr	r2, [r3, #0]
    4d82:	230b      	movs	r3, #11
    4d84:	18fb      	adds	r3, r7, r3
    4d86:	781b      	ldrb	r3, [r3, #0]
    4d88:	3308      	adds	r3, #8
    4d8a:	015b      	lsls	r3, r3, #5
    4d8c:	18d3      	adds	r3, r2, r3
    4d8e:	3307      	adds	r3, #7
    4d90:	781b      	ldrb	r3, [r3, #0]
    4d92:	b2db      	uxtb	r3, r3
    4d94:	001a      	movs	r2, r3
    4d96:	2301      	movs	r3, #1
    4d98:	4013      	ands	r3, r2
    4d9a:	d128      	bne.n	4dee <_usb_device_interrupt_handler+0x566>
							return;
						}
					}

					if(flags_run & USB_DEVICE_EPINTFLAG_TRFAIL_Msk) {
    4d9c:	1d3b      	adds	r3, r7, #4
    4d9e:	881b      	ldrh	r3, [r3, #0]
    4da0:	220c      	movs	r2, #12
    4da2:	4013      	ands	r3, r2
    4da4:	d025      	beq.n	4df2 <_usb_device_interrupt_handler+0x56a>
						(_usb_instances->device_endpoint_callback[i][USB_DEVICE_ENDPOINT_CALLBACK_TRFAIL])(_usb_instances,&ep_callback_para);
    4da6:	4b15      	ldr	r3, [pc, #84]	; (4dfc <_usb_device_interrupt_handler+0x574>)
    4da8:	681a      	ldr	r2, [r3, #0]
    4daa:	230b      	movs	r3, #11
    4dac:	18fb      	adds	r3, r7, r3
    4dae:	781b      	ldrb	r3, [r3, #0]
    4db0:	21d8      	movs	r1, #216	; 0xd8
    4db2:	011b      	lsls	r3, r3, #4
    4db4:	18d3      	adds	r3, r2, r3
    4db6:	185b      	adds	r3, r3, r1
    4db8:	681a      	ldr	r2, [r3, #0]
    4dba:	4b10      	ldr	r3, [pc, #64]	; (4dfc <_usb_device_interrupt_handler+0x574>)
    4dbc:	681b      	ldr	r3, [r3, #0]
    4dbe:	4910      	ldr	r1, [pc, #64]	; (4e00 <_usb_device_interrupt_handler+0x578>)
    4dc0:	0018      	movs	r0, r3
    4dc2:	4790      	blx	r2
					}
					return;
    4dc4:	e015      	b.n	4df2 <_usb_device_interrupt_handler+0x56a>
		for (uint8_t i = 0; i < USB_EPT_NUM; i++) {
    4dc6:	230b      	movs	r3, #11
    4dc8:	18fb      	adds	r3, r7, r3
    4dca:	781a      	ldrb	r2, [r3, #0]
    4dcc:	230b      	movs	r3, #11
    4dce:	18fb      	adds	r3, r7, r3
    4dd0:	3201      	adds	r2, #1
    4dd2:	701a      	strb	r2, [r3, #0]
    4dd4:	230b      	movs	r3, #11
    4dd6:	18fb      	adds	r3, r7, r3
    4dd8:	781b      	ldrb	r3, [r3, #0]
    4dda:	2b07      	cmp	r3, #7
    4ddc:	d800      	bhi.n	4de0 <_usb_device_interrupt_handler+0x558>
    4dde:	e5bd      	b.n	495c <_usb_device_interrupt_handler+0xd4>
    4de0:	e008      	b.n	4df4 <_usb_device_interrupt_handler+0x56c>
					return;
    4de2:	46c0      	nop			; (mov r8, r8)
    4de4:	e006      	b.n	4df4 <_usb_device_interrupt_handler+0x56c>
					return;
    4de6:	46c0      	nop			; (mov r8, r8)
    4de8:	e004      	b.n	4df4 <_usb_device_interrupt_handler+0x56c>
					return;
    4dea:	46c0      	nop			; (mov r8, r8)
    4dec:	e002      	b.n	4df4 <_usb_device_interrupt_handler+0x56c>
							return;
    4dee:	46c0      	nop			; (mov r8, r8)
    4df0:	e000      	b.n	4df4 <_usb_device_interrupt_handler+0x56c>
					return;
    4df2:	46c0      	nop			; (mov r8, r8)
				}
			}
		}
	}
}
    4df4:	46bd      	mov	sp, r7
    4df6:	b004      	add	sp, #16
    4df8:	bd80      	pop	{r7, pc}
    4dfa:	46c0      	nop			; (mov r8, r8)
    4dfc:	20000520 	.word	0x20000520
    4e00:	20000530 	.word	0x20000530
    4e04:	200028ec 	.word	0x200028ec

00004e08 <usb_enable>:
 * \brief Enable the USB module peripheral
 *
 * \param module_inst pointer to USB module instance
 */
void usb_enable(struct usb_module *module_inst)
{
    4e08:	b580      	push	{r7, lr}
    4e0a:	b082      	sub	sp, #8
    4e0c:	af00      	add	r7, sp, #0
    4e0e:	6078      	str	r0, [r7, #4]
	Assert(module_inst);
	Assert(module_inst->hw);

	module_inst->hw->DEVICE.CTRLA.reg |= USB_CTRLA_ENABLE;
    4e10:	687b      	ldr	r3, [r7, #4]
    4e12:	681a      	ldr	r2, [r3, #0]
    4e14:	687b      	ldr	r3, [r7, #4]
    4e16:	681b      	ldr	r3, [r3, #0]
    4e18:	781b      	ldrb	r3, [r3, #0]
    4e1a:	b2db      	uxtb	r3, r3
    4e1c:	2102      	movs	r1, #2
    4e1e:	430b      	orrs	r3, r1
    4e20:	b2db      	uxtb	r3, r3
    4e22:	7013      	strb	r3, [r2, #0]
	while (module_inst->hw->DEVICE.SYNCBUSY.reg == USB_SYNCBUSY_ENABLE);
    4e24:	46c0      	nop			; (mov r8, r8)
    4e26:	687b      	ldr	r3, [r7, #4]
    4e28:	681b      	ldr	r3, [r3, #0]
    4e2a:	789b      	ldrb	r3, [r3, #2]
    4e2c:	b2db      	uxtb	r3, r3
    4e2e:	2b02      	cmp	r3, #2
    4e30:	d0f9      	beq.n	4e26 <usb_enable+0x1e>
}
    4e32:	46c0      	nop			; (mov r8, r8)
    4e34:	46bd      	mov	sp, r7
    4e36:	b002      	add	sp, #8
    4e38:	bd80      	pop	{r7, pc}
	...

00004e3c <USB_Handler>:

/**
 * \brief Interrupt handler for the USB module.
 */
void USB_Handler(void)
{
    4e3c:	b580      	push	{r7, lr}
    4e3e:	af00      	add	r7, sp, #0
	if (_usb_instances->hw->DEVICE.CTRLA.bit.MODE) {
    4e40:	4b08      	ldr	r3, [pc, #32]	; (4e64 <USB_Handler+0x28>)
    4e42:	681b      	ldr	r3, [r3, #0]
    4e44:	681b      	ldr	r3, [r3, #0]
    4e46:	781b      	ldrb	r3, [r3, #0]
    4e48:	061b      	lsls	r3, r3, #24
    4e4a:	0fdb      	lsrs	r3, r3, #31
    4e4c:	b2db      	uxtb	r3, r3
    4e4e:	2b00      	cmp	r3, #0
    4e50:	d002      	beq.n	4e58 <USB_Handler+0x1c>
#if !SAMD11
		/*host mode ISR */
		_usb_host_interrupt_handler();
    4e52:	4b05      	ldr	r3, [pc, #20]	; (4e68 <USB_Handler+0x2c>)
    4e54:	4798      	blx	r3
#endif
	} else {
		/*device mode ISR */
		_usb_device_interrupt_handler();
	}
}
    4e56:	e001      	b.n	4e5c <USB_Handler+0x20>
		_usb_device_interrupt_handler();
    4e58:	4b04      	ldr	r3, [pc, #16]	; (4e6c <USB_Handler+0x30>)
    4e5a:	4798      	blx	r3
}
    4e5c:	46c0      	nop			; (mov r8, r8)
    4e5e:	46bd      	mov	sp, r7
    4e60:	bd80      	pop	{r7, pc}
    4e62:	46c0      	nop			; (mov r8, r8)
    4e64:	20000520 	.word	0x20000520
    4e68:	00003525 	.word	0x00003525
    4e6c:	00004889 	.word	0x00004889

00004e70 <usb_get_config_defaults>:
 * \brief Get the default USB module settings
 *
 * \param[out] module_config  Configuration structure to initialize to default values
 */
void usb_get_config_defaults(struct usb_config *module_config)
{
    4e70:	b580      	push	{r7, lr}
    4e72:	b082      	sub	sp, #8
    4e74:	af00      	add	r7, sp, #0
    4e76:	6078      	str	r0, [r7, #4]
	Assert(module_config);

	/* Sanity check arguments */
	Assert(module_config);
	/* Write default configuration to config struct */
	module_config->select_host_mode = 0;
    4e78:	687b      	ldr	r3, [r7, #4]
    4e7a:	2200      	movs	r2, #0
    4e7c:	701a      	strb	r2, [r3, #0]
	module_config->run_in_standby = 1;
    4e7e:	687b      	ldr	r3, [r7, #4]
    4e80:	2201      	movs	r2, #1
    4e82:	705a      	strb	r2, [r3, #1]
	module_config->source_generator = GCLK_GENERATOR_0;
    4e84:	687b      	ldr	r3, [r7, #4]
    4e86:	2200      	movs	r2, #0
    4e88:	709a      	strb	r2, [r3, #2]
	module_config->speed_mode = USB_SPEED_FULL;
    4e8a:	687b      	ldr	r3, [r7, #4]
    4e8c:	2201      	movs	r2, #1
    4e8e:	70da      	strb	r2, [r3, #3]
}
    4e90:	46c0      	nop			; (mov r8, r8)
    4e92:	46bd      	mov	sp, r7
    4e94:	b002      	add	sp, #8
    4e96:	bd80      	pop	{r7, pc}

00004e98 <usb_init>:
 *
 * \retval STATUS_OK           The module was initialized successfully
 */
enum status_code usb_init(struct usb_module *module_inst, Usb *const hw,
		struct usb_config *module_config)
{
    4e98:	b580      	push	{r7, lr}
    4e9a:	b08c      	sub	sp, #48	; 0x30
    4e9c:	af00      	add	r7, sp, #0
    4e9e:	60f8      	str	r0, [r7, #12]
    4ea0:	60b9      	str	r1, [r7, #8]
    4ea2:	607a      	str	r2, [r7, #4]
	uint32_t pad_transn, pad_transp, pad_trim;
	struct system_pinmux_config pin_config;
	struct system_gclk_chan_config gclk_chan_config;

#if !SAMD11
	host_pipe_job_busy_status = 0;
    4ea4:	4bc4      	ldr	r3, [pc, #784]	; (51b8 <usb_init+0x320>)
    4ea6:	2200      	movs	r2, #0
    4ea8:	601a      	str	r2, [r3, #0]
#endif

	_usb_instances = module_inst;
    4eaa:	4bc4      	ldr	r3, [pc, #784]	; (51bc <usb_init+0x324>)
    4eac:	68fa      	ldr	r2, [r7, #12]
    4eae:	601a      	str	r2, [r3, #0]

	/* Associate the software module instance with the hardware module */
	module_inst->hw = hw;
    4eb0:	68fb      	ldr	r3, [r7, #12]
    4eb2:	68ba      	ldr	r2, [r7, #8]
    4eb4:	601a      	str	r2, [r3, #0]

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBB, PM_APBBMASK_USB);
    4eb6:	2120      	movs	r1, #32
    4eb8:	2001      	movs	r0, #1
    4eba:	4bc1      	ldr	r3, [pc, #772]	; (51c0 <usb_init+0x328>)
    4ebc:	4798      	blx	r3

	/* Set up the USB DP/DN pins */
	system_pinmux_get_config_defaults(&pin_config);
    4ebe:	2318      	movs	r3, #24
    4ec0:	18fb      	adds	r3, r7, r3
    4ec2:	0018      	movs	r0, r3
    4ec4:	4bbf      	ldr	r3, [pc, #764]	; (51c4 <usb_init+0x32c>)
    4ec6:	4798      	blx	r3
	pin_config.mux_position = MUX_PA24G_USB_DM;
    4ec8:	2318      	movs	r3, #24
    4eca:	18fb      	adds	r3, r7, r3
    4ecc:	2206      	movs	r2, #6
    4ece:	701a      	strb	r2, [r3, #0]
	system_pinmux_pin_set_config(PIN_PA24G_USB_DM, &pin_config);
    4ed0:	2318      	movs	r3, #24
    4ed2:	18fb      	adds	r3, r7, r3
    4ed4:	0019      	movs	r1, r3
    4ed6:	2018      	movs	r0, #24
    4ed8:	4bbb      	ldr	r3, [pc, #748]	; (51c8 <usb_init+0x330>)
    4eda:	4798      	blx	r3
	pin_config.mux_position = MUX_PA25G_USB_DP;
    4edc:	2318      	movs	r3, #24
    4ede:	18fb      	adds	r3, r7, r3
    4ee0:	2206      	movs	r2, #6
    4ee2:	701a      	strb	r2, [r3, #0]
	system_pinmux_pin_set_config(PIN_PA25G_USB_DP, &pin_config);
    4ee4:	2318      	movs	r3, #24
    4ee6:	18fb      	adds	r3, r7, r3
    4ee8:	0019      	movs	r1, r3
    4eea:	2019      	movs	r0, #25
    4eec:	4bb6      	ldr	r3, [pc, #728]	; (51c8 <usb_init+0x330>)
    4eee:	4798      	blx	r3

	/* Setup clock for module */
	system_gclk_chan_get_config_defaults(&gclk_chan_config);
    4ef0:	2314      	movs	r3, #20
    4ef2:	18fb      	adds	r3, r7, r3
    4ef4:	0018      	movs	r0, r3
    4ef6:	4bb5      	ldr	r3, [pc, #724]	; (51cc <usb_init+0x334>)
    4ef8:	4798      	blx	r3
	gclk_chan_config.source_generator = module_config->source_generator;
    4efa:	687b      	ldr	r3, [r7, #4]
    4efc:	789a      	ldrb	r2, [r3, #2]
    4efe:	2314      	movs	r3, #20
    4f00:	18fb      	adds	r3, r7, r3
    4f02:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(USB_GCLK_ID, &gclk_chan_config);
    4f04:	2314      	movs	r3, #20
    4f06:	18fb      	adds	r3, r7, r3
    4f08:	0019      	movs	r1, r3
    4f0a:	2006      	movs	r0, #6
    4f0c:	4bb0      	ldr	r3, [pc, #704]	; (51d0 <usb_init+0x338>)
    4f0e:	4798      	blx	r3
	system_gclk_chan_enable(USB_GCLK_ID);
    4f10:	2006      	movs	r0, #6
    4f12:	4bb0      	ldr	r3, [pc, #704]	; (51d4 <usb_init+0x33c>)
    4f14:	4798      	blx	r3

	/* Reset */
	hw->DEVICE.CTRLA.bit.SWRST = 1;
    4f16:	68ba      	ldr	r2, [r7, #8]
    4f18:	7813      	ldrb	r3, [r2, #0]
    4f1a:	2101      	movs	r1, #1
    4f1c:	430b      	orrs	r3, r1
    4f1e:	7013      	strb	r3, [r2, #0]
	while (hw->DEVICE.SYNCBUSY.bit.SWRST) {
    4f20:	46c0      	nop			; (mov r8, r8)
    4f22:	68bb      	ldr	r3, [r7, #8]
    4f24:	789b      	ldrb	r3, [r3, #2]
    4f26:	07db      	lsls	r3, r3, #31
    4f28:	0fdb      	lsrs	r3, r3, #31
    4f2a:	b2db      	uxtb	r3, r3
    4f2c:	2b00      	cmp	r3, #0
    4f2e:	d1f8      	bne.n	4f22 <usb_init+0x8a>
		/* Sync wait */
	}

	/* Change QOS values to have the best performance and correct USB behaviour */
	USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    4f30:	4aa9      	ldr	r2, [pc, #676]	; (51d8 <usb_init+0x340>)
    4f32:	78d3      	ldrb	r3, [r2, #3]
    4f34:	2103      	movs	r1, #3
    4f36:	438b      	bics	r3, r1
    4f38:	1c19      	adds	r1, r3, #0
    4f3a:	2302      	movs	r3, #2
    4f3c:	430b      	orrs	r3, r1
    4f3e:	70d3      	strb	r3, [r2, #3]
	USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    4f40:	4aa5      	ldr	r2, [pc, #660]	; (51d8 <usb_init+0x340>)
    4f42:	78d3      	ldrb	r3, [r2, #3]
    4f44:	210c      	movs	r1, #12
    4f46:	438b      	bics	r3, r1
    4f48:	1c19      	adds	r1, r3, #0
    4f4a:	2308      	movs	r3, #8
    4f4c:	430b      	orrs	r3, r1
    4f4e:	70d3      	strb	r3, [r2, #3]

	/* Load Pad Calibration */
	pad_transn =( *((uint32_t *)(NVMCTRL_OTP4)
    4f50:	4ba2      	ldr	r3, [pc, #648]	; (51dc <usb_init+0x344>)
    4f52:	681b      	ldr	r3, [r3, #0]
			+ (NVM_USB_PAD_TRANSN_POS / 32))
		>> (NVM_USB_PAD_TRANSN_POS % 32))
    4f54:	0b5b      	lsrs	r3, r3, #13
	pad_transn =( *((uint32_t *)(NVMCTRL_OTP4)
    4f56:	221f      	movs	r2, #31
    4f58:	4013      	ands	r3, r2
    4f5a:	627b      	str	r3, [r7, #36]	; 0x24
		& ((1 << NVM_USB_PAD_TRANSN_SIZE) - 1);

	if (pad_transn == 0x1F) {
    4f5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    4f5e:	2b1f      	cmp	r3, #31
    4f60:	d101      	bne.n	4f66 <usb_init+0xce>
		pad_transn = 5;
    4f62:	2305      	movs	r3, #5
    4f64:	627b      	str	r3, [r7, #36]	; 0x24
	}

	hw->DEVICE.PADCAL.bit.TRANSN = pad_transn;
    4f66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    4f68:	b2db      	uxtb	r3, r3
    4f6a:	1c1a      	adds	r2, r3, #0
    4f6c:	231f      	movs	r3, #31
    4f6e:	4013      	ands	r3, r2
    4f70:	b2d9      	uxtb	r1, r3
    4f72:	68ba      	ldr	r2, [r7, #8]
    4f74:	8d13      	ldrh	r3, [r2, #40]	; 0x28
    4f76:	1c08      	adds	r0, r1, #0
    4f78:	211f      	movs	r1, #31
    4f7a:	4001      	ands	r1, r0
    4f7c:	0188      	lsls	r0, r1, #6
    4f7e:	4998      	ldr	r1, [pc, #608]	; (51e0 <usb_init+0x348>)
    4f80:	400b      	ands	r3, r1
    4f82:	1c19      	adds	r1, r3, #0
    4f84:	1c03      	adds	r3, r0, #0
    4f86:	430b      	orrs	r3, r1
    4f88:	8513      	strh	r3, [r2, #40]	; 0x28

	pad_transp =( *((uint32_t *)(NVMCTRL_OTP4)
    4f8a:	4b94      	ldr	r3, [pc, #592]	; (51dc <usb_init+0x344>)
    4f8c:	681b      	ldr	r3, [r3, #0]
			+ (NVM_USB_PAD_TRANSP_POS / 32))
			>> (NVM_USB_PAD_TRANSP_POS % 32))
    4f8e:	0c9b      	lsrs	r3, r3, #18
	pad_transp =( *((uint32_t *)(NVMCTRL_OTP4)
    4f90:	221f      	movs	r2, #31
    4f92:	4013      	ands	r3, r2
    4f94:	623b      	str	r3, [r7, #32]
			& ((1 << NVM_USB_PAD_TRANSP_SIZE) - 1);

	if (pad_transp == 0x1F) {
    4f96:	6a3b      	ldr	r3, [r7, #32]
    4f98:	2b1f      	cmp	r3, #31
    4f9a:	d101      	bne.n	4fa0 <usb_init+0x108>
		pad_transp = 29;
    4f9c:	231d      	movs	r3, #29
    4f9e:	623b      	str	r3, [r7, #32]
	}

	hw->DEVICE.PADCAL.bit.TRANSP = pad_transp;
    4fa0:	6a3b      	ldr	r3, [r7, #32]
    4fa2:	b2db      	uxtb	r3, r3
    4fa4:	1c1a      	adds	r2, r3, #0
    4fa6:	231f      	movs	r3, #31
    4fa8:	4013      	ands	r3, r2
    4faa:	b2d9      	uxtb	r1, r3
    4fac:	68ba      	ldr	r2, [r7, #8]
    4fae:	8d13      	ldrh	r3, [r2, #40]	; 0x28
    4fb0:	1c08      	adds	r0, r1, #0
    4fb2:	211f      	movs	r1, #31
    4fb4:	4008      	ands	r0, r1
    4fb6:	211f      	movs	r1, #31
    4fb8:	438b      	bics	r3, r1
    4fba:	1c19      	adds	r1, r3, #0
    4fbc:	1c03      	adds	r3, r0, #0
    4fbe:	430b      	orrs	r3, r1
    4fc0:	8513      	strh	r3, [r2, #40]	; 0x28

	pad_trim =( *((uint32_t *)(NVMCTRL_OTP4)
    4fc2:	4b86      	ldr	r3, [pc, #536]	; (51dc <usb_init+0x344>)
    4fc4:	681b      	ldr	r3, [r3, #0]
			+ (NVM_USB_PAD_TRIM_POS / 32))
			>> (NVM_USB_PAD_TRIM_POS % 32))
    4fc6:	0ddb      	lsrs	r3, r3, #23
	pad_trim =( *((uint32_t *)(NVMCTRL_OTP4)
    4fc8:	2207      	movs	r2, #7
    4fca:	4013      	ands	r3, r2
    4fcc:	61fb      	str	r3, [r7, #28]
			& ((1 << NVM_USB_PAD_TRIM_SIZE) - 1);

	if (pad_trim == 0x7) {
    4fce:	69fb      	ldr	r3, [r7, #28]
    4fd0:	2b07      	cmp	r3, #7
    4fd2:	d101      	bne.n	4fd8 <usb_init+0x140>
		pad_trim = 3;
    4fd4:	2303      	movs	r3, #3
    4fd6:	61fb      	str	r3, [r7, #28]
	}

	hw->DEVICE.PADCAL.bit.TRIM = pad_trim;
    4fd8:	69fb      	ldr	r3, [r7, #28]
    4fda:	b2db      	uxtb	r3, r3
    4fdc:	1c1a      	adds	r2, r3, #0
    4fde:	2307      	movs	r3, #7
    4fe0:	4013      	ands	r3, r2
    4fe2:	b2d9      	uxtb	r1, r3
    4fe4:	68ba      	ldr	r2, [r7, #8]
    4fe6:	8d13      	ldrh	r3, [r2, #40]	; 0x28
    4fe8:	1c08      	adds	r0, r1, #0
    4fea:	2107      	movs	r1, #7
    4fec:	4001      	ands	r1, r0
    4fee:	0308      	lsls	r0, r1, #12
    4ff0:	497c      	ldr	r1, [pc, #496]	; (51e4 <usb_init+0x34c>)
    4ff2:	400b      	ands	r3, r1
    4ff4:	1c19      	adds	r1, r3, #0
    4ff6:	1c03      	adds	r3, r0, #0
    4ff8:	430b      	orrs	r3, r1
    4ffa:	8513      	strh	r3, [r2, #40]	; 0x28

	/* Set the configuration */
	hw->DEVICE.CTRLA.bit.MODE = module_config->select_host_mode;
    4ffc:	687b      	ldr	r3, [r7, #4]
    4ffe:	7819      	ldrb	r1, [r3, #0]
    5000:	68ba      	ldr	r2, [r7, #8]
    5002:	7813      	ldrb	r3, [r2, #0]
    5004:	01c8      	lsls	r0, r1, #7
    5006:	217f      	movs	r1, #127	; 0x7f
    5008:	400b      	ands	r3, r1
    500a:	1c19      	adds	r1, r3, #0
    500c:	1c03      	adds	r3, r0, #0
    500e:	430b      	orrs	r3, r1
    5010:	7013      	strb	r3, [r2, #0]
	hw->DEVICE.CTRLA.bit.RUNSTDBY = module_config->run_in_standby;
    5012:	687b      	ldr	r3, [r7, #4]
    5014:	7859      	ldrb	r1, [r3, #1]
    5016:	68ba      	ldr	r2, [r7, #8]
    5018:	7813      	ldrb	r3, [r2, #0]
    501a:	2001      	movs	r0, #1
    501c:	4001      	ands	r1, r0
    501e:	0088      	lsls	r0, r1, #2
    5020:	2104      	movs	r1, #4
    5022:	438b      	bics	r3, r1
    5024:	1c19      	adds	r1, r3, #0
    5026:	1c03      	adds	r3, r0, #0
    5028:	430b      	orrs	r3, r1
    502a:	7013      	strb	r3, [r2, #0]
	hw->DEVICE.DESCADD.reg = (uint32_t)(&usb_descriptor_table.usb_endpoint_table[0]);
    502c:	4a6e      	ldr	r2, [pc, #440]	; (51e8 <usb_init+0x350>)
    502e:	68bb      	ldr	r3, [r7, #8]
    5030:	625a      	str	r2, [r3, #36]	; 0x24
	if (USB_SPEED_FULL == module_config->speed_mode) {
    5032:	687b      	ldr	r3, [r7, #4]
    5034:	78db      	ldrb	r3, [r3, #3]
    5036:	2b01      	cmp	r3, #1
    5038:	d106      	bne.n	5048 <usb_init+0x1b0>
		module_inst->hw->DEVICE.CTRLB.bit.SPDCONF = USB_DEVICE_CTRLB_SPDCONF_FS_Val;
    503a:	68fb      	ldr	r3, [r7, #12]
    503c:	681a      	ldr	r2, [r3, #0]
    503e:	8913      	ldrh	r3, [r2, #8]
    5040:	210c      	movs	r1, #12
    5042:	438b      	bics	r3, r1
    5044:	8113      	strh	r3, [r2, #8]
    5046:	e00c      	b.n	5062 <usb_init+0x1ca>
	} else if(USB_SPEED_LOW == module_config->speed_mode) {
    5048:	687b      	ldr	r3, [r7, #4]
    504a:	78db      	ldrb	r3, [r3, #3]
    504c:	2b00      	cmp	r3, #0
    504e:	d108      	bne.n	5062 <usb_init+0x1ca>
		module_inst->hw->DEVICE.CTRLB.bit.SPDCONF = USB_DEVICE_CTRLB_SPDCONF_LS_Val;
    5050:	68fb      	ldr	r3, [r7, #12]
    5052:	681a      	ldr	r2, [r3, #0]
    5054:	8913      	ldrh	r3, [r2, #8]
    5056:	210c      	movs	r1, #12
    5058:	438b      	bics	r3, r1
    505a:	1c19      	adds	r1, r3, #0
    505c:	2304      	movs	r3, #4
    505e:	430b      	orrs	r3, r1
    5060:	8113      	strh	r3, [r2, #8]
	}

	memset((uint8_t *)(&usb_descriptor_table.usb_endpoint_table[0]), 0,
    5062:	2380      	movs	r3, #128	; 0x80
    5064:	005a      	lsls	r2, r3, #1
    5066:	4b60      	ldr	r3, [pc, #384]	; (51e8 <usb_init+0x350>)
    5068:	2100      	movs	r1, #0
    506a:	0018      	movs	r0, r3
    506c:	4b5f      	ldr	r3, [pc, #380]	; (51ec <usb_init+0x354>)
    506e:	4798      	blx	r3
			sizeof(usb_descriptor_table.usb_endpoint_table));

#if !SAMD11
	/* callback related init */
	for (i = 0; i < USB_HOST_CALLBACK_N; i++) {
    5070:	2300      	movs	r3, #0
    5072:	62fb      	str	r3, [r7, #44]	; 0x2c
    5074:	e009      	b.n	508a <usb_init+0x1f2>
		module_inst->host_callback[i] = NULL;
    5076:	68fa      	ldr	r2, [r7, #12]
    5078:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    507a:	009b      	lsls	r3, r3, #2
    507c:	18d3      	adds	r3, r2, r3
    507e:	3304      	adds	r3, #4
    5080:	2200      	movs	r2, #0
    5082:	601a      	str	r2, [r3, #0]
	for (i = 0; i < USB_HOST_CALLBACK_N; i++) {
    5084:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    5086:	3301      	adds	r3, #1
    5088:	62fb      	str	r3, [r7, #44]	; 0x2c
    508a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    508c:	2b07      	cmp	r3, #7
    508e:	d9f2      	bls.n	5076 <usb_init+0x1de>
	};
	for (i = 0; i < USB_PIPE_NUM; i++) {
    5090:	2300      	movs	r3, #0
    5092:	62fb      	str	r3, [r7, #44]	; 0x2c
    5094:	e016      	b.n	50c4 <usb_init+0x22c>
		for (j = 0; j < USB_HOST_PIPE_CALLBACK_N; j++) {
    5096:	2300      	movs	r3, #0
    5098:	62bb      	str	r3, [r7, #40]	; 0x28
    509a:	e00d      	b.n	50b8 <usb_init+0x220>
			module_inst->host_pipe_callback[i][j] = NULL;
    509c:	68fa      	ldr	r2, [r7, #12]
    509e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    50a0:	0099      	lsls	r1, r3, #2
    50a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
    50a4:	18cb      	adds	r3, r1, r3
    50a6:	3308      	adds	r3, #8
    50a8:	009b      	lsls	r3, r3, #2
    50aa:	18d3      	adds	r3, r2, r3
    50ac:	3304      	adds	r3, #4
    50ae:	2200      	movs	r2, #0
    50b0:	601a      	str	r2, [r3, #0]
		for (j = 0; j < USB_HOST_PIPE_CALLBACK_N; j++) {
    50b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
    50b4:	3301      	adds	r3, #1
    50b6:	62bb      	str	r3, [r7, #40]	; 0x28
    50b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
    50ba:	2b03      	cmp	r3, #3
    50bc:	d9ee      	bls.n	509c <usb_init+0x204>
	for (i = 0; i < USB_PIPE_NUM; i++) {
    50be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    50c0:	3301      	adds	r3, #1
    50c2:	62fb      	str	r3, [r7, #44]	; 0x2c
    50c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    50c6:	2b07      	cmp	r3, #7
    50c8:	d9e5      	bls.n	5096 <usb_init+0x1fe>
		}
	};
	module_inst->host_registered_callback_mask = 0;
    50ca:	68fb      	ldr	r3, [r7, #12]
    50cc:	22a4      	movs	r2, #164	; 0xa4
    50ce:	2100      	movs	r1, #0
    50d0:	5499      	strb	r1, [r3, r2]
	module_inst->host_enabled_callback_mask = 0;
    50d2:	68fb      	ldr	r3, [r7, #12]
    50d4:	22a5      	movs	r2, #165	; 0xa5
    50d6:	2100      	movs	r1, #0
    50d8:	5499      	strb	r1, [r3, r2]
	for (i = 0; i < USB_PIPE_NUM; i++) {
    50da:	2300      	movs	r3, #0
    50dc:	62fb      	str	r3, [r7, #44]	; 0x2c
    50de:	e010      	b.n	5102 <usb_init+0x26a>
		module_inst->host_pipe_registered_callback_mask[i] = 0;
    50e0:	68fa      	ldr	r2, [r7, #12]
    50e2:	21a6      	movs	r1, #166	; 0xa6
    50e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    50e6:	18d3      	adds	r3, r2, r3
    50e8:	185b      	adds	r3, r3, r1
    50ea:	2200      	movs	r2, #0
    50ec:	701a      	strb	r2, [r3, #0]
		module_inst->host_pipe_enabled_callback_mask[i] = 0;
    50ee:	68fa      	ldr	r2, [r7, #12]
    50f0:	21ae      	movs	r1, #174	; 0xae
    50f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    50f4:	18d3      	adds	r3, r2, r3
    50f6:	185b      	adds	r3, r3, r1
    50f8:	2200      	movs	r2, #0
    50fa:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < USB_PIPE_NUM; i++) {
    50fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    50fe:	3301      	adds	r3, #1
    5100:	62fb      	str	r3, [r7, #44]	; 0x2c
    5102:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    5104:	2b07      	cmp	r3, #7
    5106:	d9eb      	bls.n	50e0 <usb_init+0x248>
	}
#endif

	/*  device callback related */
	for (i = 0; i < USB_DEVICE_CALLBACK_N; i++) {
    5108:	2300      	movs	r3, #0
    510a:	62fb      	str	r3, [r7, #44]	; 0x2c
    510c:	e008      	b.n	5120 <usb_init+0x288>
		module_inst->device_callback[i] = NULL;
    510e:	68fb      	ldr	r3, [r7, #12]
    5110:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    5112:	322e      	adds	r2, #46	; 0x2e
    5114:	0092      	lsls	r2, r2, #2
    5116:	2100      	movs	r1, #0
    5118:	50d1      	str	r1, [r2, r3]
	for (i = 0; i < USB_DEVICE_CALLBACK_N; i++) {
    511a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    511c:	3301      	adds	r3, #1
    511e:	62fb      	str	r3, [r7, #44]	; 0x2c
    5120:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    5122:	2b06      	cmp	r3, #6
    5124:	d9f3      	bls.n	510e <usb_init+0x276>
	}
	for (i = 0; i < USB_EPT_NUM; i++) {
    5126:	2300      	movs	r3, #0
    5128:	62fb      	str	r3, [r7, #44]	; 0x2c
    512a:	e016      	b.n	515a <usb_init+0x2c2>
		for(j = 0; j < USB_DEVICE_EP_CALLBACK_N; j++) {
    512c:	2300      	movs	r3, #0
    512e:	62bb      	str	r3, [r7, #40]	; 0x28
    5130:	e00d      	b.n	514e <usb_init+0x2b6>
			module_inst->device_endpoint_callback[i][j] = NULL;
    5132:	68fa      	ldr	r2, [r7, #12]
    5134:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    5136:	0099      	lsls	r1, r3, #2
    5138:	6abb      	ldr	r3, [r7, #40]	; 0x28
    513a:	18cb      	adds	r3, r1, r3
    513c:	3334      	adds	r3, #52	; 0x34
    513e:	009b      	lsls	r3, r3, #2
    5140:	18d3      	adds	r3, r2, r3
    5142:	3304      	adds	r3, #4
    5144:	2200      	movs	r2, #0
    5146:	601a      	str	r2, [r3, #0]
		for(j = 0; j < USB_DEVICE_EP_CALLBACK_N; j++) {
    5148:	6abb      	ldr	r3, [r7, #40]	; 0x28
    514a:	3301      	adds	r3, #1
    514c:	62bb      	str	r3, [r7, #40]	; 0x28
    514e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    5150:	2b03      	cmp	r3, #3
    5152:	d9ee      	bls.n	5132 <usb_init+0x29a>
	for (i = 0; i < USB_EPT_NUM; i++) {
    5154:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    5156:	3301      	adds	r3, #1
    5158:	62fb      	str	r3, [r7, #44]	; 0x2c
    515a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    515c:	2b07      	cmp	r3, #7
    515e:	d9e5      	bls.n	512c <usb_init+0x294>
		}
	}
	module_inst->device_registered_callback_mask = 0;
    5160:	68fa      	ldr	r2, [r7, #12]
    5162:	23aa      	movs	r3, #170	; 0xaa
    5164:	005b      	lsls	r3, r3, #1
    5166:	2100      	movs	r1, #0
    5168:	52d1      	strh	r1, [r2, r3]
	module_inst->device_enabled_callback_mask = 0;
    516a:	68fa      	ldr	r2, [r7, #12]
    516c:	23ab      	movs	r3, #171	; 0xab
    516e:	005b      	lsls	r3, r3, #1
    5170:	2100      	movs	r1, #0
    5172:	52d1      	strh	r1, [r2, r3]
	for (j = 0; j < USB_EPT_NUM; j++) {
    5174:	2300      	movs	r3, #0
    5176:	62bb      	str	r3, [r7, #40]	; 0x28
    5178:	e012      	b.n	51a0 <usb_init+0x308>
		module_inst->device_endpoint_registered_callback_mask[j] = 0;
    517a:	68f9      	ldr	r1, [r7, #12]
    517c:	23ac      	movs	r3, #172	; 0xac
    517e:	005b      	lsls	r3, r3, #1
    5180:	6aba      	ldr	r2, [r7, #40]	; 0x28
    5182:	188a      	adds	r2, r1, r2
    5184:	18d3      	adds	r3, r2, r3
    5186:	2200      	movs	r2, #0
    5188:	701a      	strb	r2, [r3, #0]
		module_inst->device_endpoint_enabled_callback_mask[j] = 0;
    518a:	68f9      	ldr	r1, [r7, #12]
    518c:	23b0      	movs	r3, #176	; 0xb0
    518e:	005b      	lsls	r3, r3, #1
    5190:	6aba      	ldr	r2, [r7, #40]	; 0x28
    5192:	188a      	adds	r2, r1, r2
    5194:	18d3      	adds	r3, r2, r3
    5196:	2200      	movs	r2, #0
    5198:	701a      	strb	r2, [r3, #0]
	for (j = 0; j < USB_EPT_NUM; j++) {
    519a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    519c:	3301      	adds	r3, #1
    519e:	62bb      	str	r3, [r7, #40]	; 0x28
    51a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
    51a2:	2b07      	cmp	r3, #7
    51a4:	d9e9      	bls.n	517a <usb_init+0x2e2>
	}

	/* Enable interrupts for this USB module */
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_USB);
    51a6:	2007      	movs	r0, #7
    51a8:	4b11      	ldr	r3, [pc, #68]	; (51f0 <usb_init+0x358>)
    51aa:	4798      	blx	r3

	return STATUS_OK;
    51ac:	2300      	movs	r3, #0
}
    51ae:	0018      	movs	r0, r3
    51b0:	46bd      	mov	sp, r7
    51b2:	b00c      	add	sp, #48	; 0x30
    51b4:	bd80      	pop	{r7, pc}
    51b6:	46c0      	nop			; (mov r8, r8)
    51b8:	20000538 	.word	0x20000538
    51bc:	20000520 	.word	0x20000520
    51c0:	00003475 	.word	0x00003475
    51c4:	000034d1 	.word	0x000034d1
    51c8:	000003a1 	.word	0x000003a1
    51cc:	0000345d 	.word	0x0000345d
    51d0:	0000f23d 	.word	0x0000f23d
    51d4:	0000f281 	.word	0x0000f281
    51d8:	41005000 	.word	0x41005000
    51dc:	00806024 	.word	0x00806024
    51e0:	fffff83f 	.word	0xfffff83f
    51e4:	ffff8fff 	.word	0xffff8fff
    51e8:	200028ec 	.word	0x200028ec
    51ec:	0001c173 	.word	0x0001c173
    51f0:	000034f9 	.word	0x000034f9

000051f4 <system_gclk_chan_get_config_defaults>:
{
    51f4:	b580      	push	{r7, lr}
    51f6:	b082      	sub	sp, #8
    51f8:	af00      	add	r7, sp, #0
    51fa:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
    51fc:	687b      	ldr	r3, [r7, #4]
    51fe:	2200      	movs	r2, #0
    5200:	701a      	strb	r2, [r3, #0]
}
    5202:	46c0      	nop			; (mov r8, r8)
    5204:	46bd      	mov	sp, r7
    5206:	b002      	add	sp, #8
    5208:	bd80      	pop	{r7, pc}
	...

0000520c <system_apb_clock_set_mask>:
{
    520c:	b580      	push	{r7, lr}
    520e:	b082      	sub	sp, #8
    5210:	af00      	add	r7, sp, #0
    5212:	0002      	movs	r2, r0
    5214:	6039      	str	r1, [r7, #0]
    5216:	1dfb      	adds	r3, r7, #7
    5218:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    521a:	1dfb      	adds	r3, r7, #7
    521c:	781b      	ldrb	r3, [r3, #0]
    521e:	2b01      	cmp	r3, #1
    5220:	d00a      	beq.n	5238 <system_apb_clock_set_mask+0x2c>
    5222:	2b02      	cmp	r3, #2
    5224:	d00f      	beq.n	5246 <system_apb_clock_set_mask+0x3a>
    5226:	2b00      	cmp	r3, #0
    5228:	d114      	bne.n	5254 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
    522a:	4b0e      	ldr	r3, [pc, #56]	; (5264 <system_apb_clock_set_mask+0x58>)
    522c:	4a0d      	ldr	r2, [pc, #52]	; (5264 <system_apb_clock_set_mask+0x58>)
    522e:	6991      	ldr	r1, [r2, #24]
    5230:	683a      	ldr	r2, [r7, #0]
    5232:	430a      	orrs	r2, r1
    5234:	619a      	str	r2, [r3, #24]
			break;
    5236:	e00f      	b.n	5258 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
    5238:	4b0a      	ldr	r3, [pc, #40]	; (5264 <system_apb_clock_set_mask+0x58>)
    523a:	4a0a      	ldr	r2, [pc, #40]	; (5264 <system_apb_clock_set_mask+0x58>)
    523c:	69d1      	ldr	r1, [r2, #28]
    523e:	683a      	ldr	r2, [r7, #0]
    5240:	430a      	orrs	r2, r1
    5242:	61da      	str	r2, [r3, #28]
			break;
    5244:	e008      	b.n	5258 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
    5246:	4b07      	ldr	r3, [pc, #28]	; (5264 <system_apb_clock_set_mask+0x58>)
    5248:	4a06      	ldr	r2, [pc, #24]	; (5264 <system_apb_clock_set_mask+0x58>)
    524a:	6a11      	ldr	r1, [r2, #32]
    524c:	683a      	ldr	r2, [r7, #0]
    524e:	430a      	orrs	r2, r1
    5250:	621a      	str	r2, [r3, #32]
			break;
    5252:	e001      	b.n	5258 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
    5254:	2317      	movs	r3, #23
    5256:	e000      	b.n	525a <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
    5258:	2300      	movs	r3, #0
}
    525a:	0018      	movs	r0, r3
    525c:	46bd      	mov	sp, r7
    525e:	b002      	add	sp, #8
    5260:	bd80      	pop	{r7, pc}
    5262:	46c0      	nop			; (mov r8, r8)
    5264:	40000400 	.word	0x40000400

00005268 <rtc_count_is_syncing>:
 *
 * \retval true  if the module synchronization is ongoing
 * \retval false if the module has completed synchronization
 */
static bool rtc_count_is_syncing(struct rtc_module *const module)
{
    5268:	b580      	push	{r7, lr}
    526a:	b084      	sub	sp, #16
    526c:	af00      	add	r7, sp, #0
    526e:	6078      	str	r0, [r7, #4]
 	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    5270:	687b      	ldr	r3, [r7, #4]
    5272:	681b      	ldr	r3, [r3, #0]
    5274:	60fb      	str	r3, [r7, #12]

        if (rtc_module->MODE0.STATUS.reg & RTC_STATUS_SYNCBUSY) {
    5276:	68fb      	ldr	r3, [r7, #12]
    5278:	7a9b      	ldrb	r3, [r3, #10]
    527a:	b2db      	uxtb	r3, r3
    527c:	b25b      	sxtb	r3, r3
    527e:	2b00      	cmp	r3, #0
    5280:	da01      	bge.n	5286 <rtc_count_is_syncing+0x1e>
                return true;
    5282:	2301      	movs	r3, #1
    5284:	e000      	b.n	5288 <rtc_count_is_syncing+0x20>
        }

        return false;
    5286:	2300      	movs	r3, #0
}
    5288:	0018      	movs	r0, r3
    528a:	46bd      	mov	sp, r7
    528c:	b004      	add	sp, #16
    528e:	bd80      	pop	{r7, pc}

00005290 <rtc_count_enable>:
 * module configuration parameters cannot be altered while the module is enabled.
 *
 * \param[in,out]  module  RTC hardware module
 */
void rtc_count_enable(struct rtc_module *const module)
{
    5290:	b580      	push	{r7, lr}
    5292:	b084      	sub	sp, #16
    5294:	af00      	add	r7, sp, #0
    5296:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    5298:	687b      	ldr	r3, [r7, #4]
    529a:	681b      	ldr	r3, [r3, #0]
    529c:	60fb      	str	r3, [r7, #12]

#if RTC_COUNT_ASYNC == true
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_RTC);
#endif

	while (rtc_count_is_syncing(module)) {
    529e:	46c0      	nop			; (mov r8, r8)
    52a0:	687b      	ldr	r3, [r7, #4]
    52a2:	0018      	movs	r0, r3
    52a4:	4b07      	ldr	r3, [pc, #28]	; (52c4 <rtc_count_enable+0x34>)
    52a6:	4798      	blx	r3
    52a8:	1e03      	subs	r3, r0, #0
    52aa:	d1f9      	bne.n	52a0 <rtc_count_enable+0x10>
		/* Wait for synchronization */
	}

	/* Enable RTC module. */
	rtc_module->MODE0.CTRL.reg |= RTC_MODE0_CTRL_ENABLE;
    52ac:	68fb      	ldr	r3, [r7, #12]
    52ae:	881b      	ldrh	r3, [r3, #0]
    52b0:	b29b      	uxth	r3, r3
    52b2:	2202      	movs	r2, #2
    52b4:	4313      	orrs	r3, r2
    52b6:	b29a      	uxth	r2, r3
    52b8:	68fb      	ldr	r3, [r7, #12]
    52ba:	801a      	strh	r2, [r3, #0]
}
    52bc:	46c0      	nop			; (mov r8, r8)
    52be:	46bd      	mov	sp, r7
    52c0:	b004      	add	sp, #16
    52c2:	bd80      	pop	{r7, pc}
    52c4:	00005269 	.word	0x00005269

000052c8 <rtc_count_disable>:
 * Disables the RTC module.
 *
 * \param[in,out]  module  RTC hardware module
 */
void rtc_count_disable(struct rtc_module *const module)
{
    52c8:	b580      	push	{r7, lr}
    52ca:	b084      	sub	sp, #16
    52cc:	af00      	add	r7, sp, #0
    52ce:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    52d0:	687b      	ldr	r3, [r7, #4]
    52d2:	681b      	ldr	r3, [r3, #0]
    52d4:	60fb      	str	r3, [r7, #12]

#if RTC_COUNT_ASYNC == true
	system_interrupt_disable(SYSTEM_INTERRUPT_MODULE_RTC);
#endif

	while (rtc_count_is_syncing(module)) {
    52d6:	46c0      	nop			; (mov r8, r8)
    52d8:	687b      	ldr	r3, [r7, #4]
    52da:	0018      	movs	r0, r3
    52dc:	4b0a      	ldr	r3, [pc, #40]	; (5308 <rtc_count_disable+0x40>)
    52de:	4798      	blx	r3
    52e0:	1e03      	subs	r3, r0, #0
    52e2:	d1f9      	bne.n	52d8 <rtc_count_disable+0x10>
		/* Wait for synchronization */
	}

	/* Disbale interrupt */
	rtc_module->MODE0.INTENCLR.reg = RTC_MODE0_INTENCLR_MASK;
    52e4:	68fb      	ldr	r3, [r7, #12]
    52e6:	22c1      	movs	r2, #193	; 0xc1
    52e8:	719a      	strb	r2, [r3, #6]
	/* Clear interrupt flag */
	rtc_module->MODE0.INTFLAG.reg = RTC_MODE0_INTFLAG_MASK;
    52ea:	68fb      	ldr	r3, [r7, #12]
    52ec:	22c1      	movs	r2, #193	; 0xc1
    52ee:	721a      	strb	r2, [r3, #8]

	/* Disable RTC module. */
	rtc_module->MODE0.CTRL.reg &= ~RTC_MODE0_CTRL_ENABLE;
    52f0:	68fb      	ldr	r3, [r7, #12]
    52f2:	881b      	ldrh	r3, [r3, #0]
    52f4:	b29b      	uxth	r3, r3
    52f6:	2202      	movs	r2, #2
    52f8:	4393      	bics	r3, r2
    52fa:	b29a      	uxth	r2, r3
    52fc:	68fb      	ldr	r3, [r7, #12]
    52fe:	801a      	strh	r2, [r3, #0]
}
    5300:	46c0      	nop			; (mov r8, r8)
    5302:	46bd      	mov	sp, r7
    5304:	b004      	add	sp, #16
    5306:	bd80      	pop	{r7, pc}
    5308:	00005269 	.word	0x00005269

0000530c <rtc_count_reset>:
 * Resets the RTC to hardware defaults.
 *
 * \param[in,out]  module  Pointer to the software instance struct
 */
void rtc_count_reset(struct rtc_module *const module)
{
    530c:	b580      	push	{r7, lr}
    530e:	b084      	sub	sp, #16
    5310:	af00      	add	r7, sp, #0
    5312:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    5314:	687b      	ldr	r3, [r7, #4]
    5316:	681b      	ldr	r3, [r3, #0]
    5318:	60fb      	str	r3, [r7, #12]

	/* Disable module before reset. */
	rtc_count_disable(module);
    531a:	687b      	ldr	r3, [r7, #4]
    531c:	0018      	movs	r0, r3
    531e:	4b0a      	ldr	r3, [pc, #40]	; (5348 <rtc_count_reset+0x3c>)
    5320:	4798      	blx	r3
#if RTC_COUNT_ASYNC == true
	module->registered_callback = 0;
	module->enabled_callback    = 0;
#endif

	while (rtc_count_is_syncing(module)) {
    5322:	46c0      	nop			; (mov r8, r8)
    5324:	687b      	ldr	r3, [r7, #4]
    5326:	0018      	movs	r0, r3
    5328:	4b08      	ldr	r3, [pc, #32]	; (534c <rtc_count_reset+0x40>)
    532a:	4798      	blx	r3
    532c:	1e03      	subs	r3, r0, #0
    532e:	d1f9      	bne.n	5324 <rtc_count_reset+0x18>
		/* Wait for synchronization */
	}

	/* Initiate software reset. */
	rtc_module->MODE0.CTRL.reg |= RTC_MODE0_CTRL_SWRST;
    5330:	68fb      	ldr	r3, [r7, #12]
    5332:	881b      	ldrh	r3, [r3, #0]
    5334:	b29b      	uxth	r3, r3
    5336:	2201      	movs	r2, #1
    5338:	4313      	orrs	r3, r2
    533a:	b29a      	uxth	r2, r3
    533c:	68fb      	ldr	r3, [r7, #12]
    533e:	801a      	strh	r2, [r3, #0]
}
    5340:	46c0      	nop			; (mov r8, r8)
    5342:	46bd      	mov	sp, r7
    5344:	b004      	add	sp, #16
    5346:	bd80      	pop	{r7, pc}
    5348:	000052c9 	.word	0x000052c9
    534c:	00005269 	.word	0x00005269

00005350 <_rtc_count_set_config>:
 * \retval STATUS_ERR_INVALID_ARG  If invalid argument(s) were given.
 */
static enum status_code _rtc_count_set_config(
		struct rtc_module *const module,
		const struct rtc_count_config *const config)
{
    5350:	b580      	push	{r7, lr}
    5352:	b084      	sub	sp, #16
    5354:	af00      	add	r7, sp, #0
    5356:	6078      	str	r0, [r7, #4]
    5358:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    535a:	687b      	ldr	r3, [r7, #4]
    535c:	681b      	ldr	r3, [r3, #0]
    535e:	60bb      	str	r3, [r7, #8]

	rtc_module->MODE0.CTRL.reg = RTC_MODE0_CTRL_MODE(0) | config->prescaler;
    5360:	683b      	ldr	r3, [r7, #0]
    5362:	881a      	ldrh	r2, [r3, #0]
    5364:	68bb      	ldr	r3, [r7, #8]
    5366:	801a      	strh	r2, [r3, #0]

	/* Set mode and clear on match if applicable. */
	switch (config->mode) {
    5368:	683b      	ldr	r3, [r7, #0]
    536a:	789b      	ldrb	r3, [r3, #2]
    536c:	2b00      	cmp	r3, #0
    536e:	d03a      	beq.n	53e6 <_rtc_count_set_config+0x96>
    5370:	2b01      	cmp	r3, #1
    5372:	d000      	beq.n	5376 <_rtc_count_set_config+0x26>
    5374:	e06c      	b.n	5450 <_rtc_count_set_config+0x100>
		case RTC_COUNT_MODE_32BIT:
			/* Set 32bit mode and clear on match if applicable. */
			rtc_module->MODE0.CTRL.reg |= RTC_MODE0_CTRL_MODE(0);
    5376:	68bb      	ldr	r3, [r7, #8]
    5378:	881b      	ldrh	r3, [r3, #0]
    537a:	b29a      	uxth	r2, r3
    537c:	68bb      	ldr	r3, [r7, #8]
    537e:	801a      	strh	r2, [r3, #0]

			/* Check if clear on compare match should be set. */
			if (config->clear_on_match) {
    5380:	683b      	ldr	r3, [r7, #0]
    5382:	78db      	ldrb	r3, [r3, #3]
    5384:	2b00      	cmp	r3, #0
    5386:	d007      	beq.n	5398 <_rtc_count_set_config+0x48>
				/* Set clear on match. */
				rtc_module->MODE0.CTRL.reg |= RTC_MODE0_CTRL_MATCHCLR;
    5388:	68bb      	ldr	r3, [r7, #8]
    538a:	881b      	ldrh	r3, [r3, #0]
    538c:	b29b      	uxth	r3, r3
    538e:	2280      	movs	r2, #128	; 0x80
    5390:	4313      	orrs	r3, r2
    5392:	b29a      	uxth	r2, r3
    5394:	68bb      	ldr	r3, [r7, #8]
    5396:	801a      	strh	r2, [r3, #0]
			}
			/* Set compare values. */
			for (uint8_t i = 0; i < RTC_NUM_OF_COMP32; i++) {
    5398:	230f      	movs	r3, #15
    539a:	18fb      	adds	r3, r7, r3
    539c:	2200      	movs	r2, #0
    539e:	701a      	strb	r2, [r3, #0]
    53a0:	e01b      	b.n	53da <_rtc_count_set_config+0x8a>
				while (rtc_count_is_syncing(module)) {
    53a2:	46c0      	nop			; (mov r8, r8)
    53a4:	687b      	ldr	r3, [r7, #4]
    53a6:	0018      	movs	r0, r3
    53a8:	4b33      	ldr	r3, [pc, #204]	; (5478 <_rtc_count_set_config+0x128>)
    53aa:	4798      	blx	r3
    53ac:	1e03      	subs	r3, r0, #0
    53ae:	d1f9      	bne.n	53a4 <_rtc_count_set_config+0x54>
					/* Wait for synchronization */
				}

				rtc_count_set_compare(module, config->compare_values[i],
    53b0:	230f      	movs	r3, #15
    53b2:	18fb      	adds	r3, r7, r3
    53b4:	781a      	ldrb	r2, [r3, #0]
    53b6:	683b      	ldr	r3, [r7, #0]
    53b8:	3202      	adds	r2, #2
    53ba:	0092      	lsls	r2, r2, #2
    53bc:	58d1      	ldr	r1, [r2, r3]
    53be:	230f      	movs	r3, #15
    53c0:	18fb      	adds	r3, r7, r3
    53c2:	781a      	ldrb	r2, [r3, #0]
    53c4:	687b      	ldr	r3, [r7, #4]
    53c6:	0018      	movs	r0, r3
    53c8:	4b2c      	ldr	r3, [pc, #176]	; (547c <_rtc_count_set_config+0x12c>)
    53ca:	4798      	blx	r3
			for (uint8_t i = 0; i < RTC_NUM_OF_COMP32; i++) {
    53cc:	230f      	movs	r3, #15
    53ce:	18fb      	adds	r3, r7, r3
    53d0:	781a      	ldrb	r2, [r3, #0]
    53d2:	230f      	movs	r3, #15
    53d4:	18fb      	adds	r3, r7, r3
    53d6:	3201      	adds	r2, #1
    53d8:	701a      	strb	r2, [r3, #0]
    53da:	230f      	movs	r3, #15
    53dc:	18fb      	adds	r3, r7, r3
    53de:	781b      	ldrb	r3, [r3, #0]
    53e0:	2b00      	cmp	r3, #0
    53e2:	d0de      	beq.n	53a2 <_rtc_count_set_config+0x52>
						(enum rtc_count_compare)i);
			}
			break;
    53e4:	e036      	b.n	5454 <_rtc_count_set_config+0x104>

		case RTC_COUNT_MODE_16BIT:
			/* Set 16bit mode. */
			rtc_module->MODE1.CTRL.reg |= RTC_MODE1_CTRL_MODE(1);
    53e6:	68bb      	ldr	r3, [r7, #8]
    53e8:	881b      	ldrh	r3, [r3, #0]
    53ea:	b29b      	uxth	r3, r3
    53ec:	2204      	movs	r2, #4
    53ee:	4313      	orrs	r3, r2
    53f0:	b29a      	uxth	r2, r3
    53f2:	68bb      	ldr	r3, [r7, #8]
    53f4:	801a      	strh	r2, [r3, #0]

			/* Check if match on clear is set, and return invalid
			 * argument if set. */
			if (config->clear_on_match) {
    53f6:	683b      	ldr	r3, [r7, #0]
    53f8:	78db      	ldrb	r3, [r3, #3]
    53fa:	2b00      	cmp	r3, #0
    53fc:	d001      	beq.n	5402 <_rtc_count_set_config+0xb2>
				Assert(false);
				return STATUS_ERR_INVALID_ARG;
    53fe:	2317      	movs	r3, #23
    5400:	e036      	b.n	5470 <_rtc_count_set_config+0x120>
			}
			/* Set compare values. */
			for (uint8_t i = 0; i < RTC_NUM_OF_COMP16; i++) {
    5402:	230e      	movs	r3, #14
    5404:	18fb      	adds	r3, r7, r3
    5406:	2200      	movs	r2, #0
    5408:	701a      	strb	r2, [r3, #0]
    540a:	e01b      	b.n	5444 <_rtc_count_set_config+0xf4>
				while (rtc_count_is_syncing(module)) {
    540c:	46c0      	nop			; (mov r8, r8)
    540e:	687b      	ldr	r3, [r7, #4]
    5410:	0018      	movs	r0, r3
    5412:	4b19      	ldr	r3, [pc, #100]	; (5478 <_rtc_count_set_config+0x128>)
    5414:	4798      	blx	r3
    5416:	1e03      	subs	r3, r0, #0
    5418:	d1f9      	bne.n	540e <_rtc_count_set_config+0xbe>
					/* Wait for synchronization */
				}

				rtc_count_set_compare(module, config->compare_values[i],
    541a:	230e      	movs	r3, #14
    541c:	18fb      	adds	r3, r7, r3
    541e:	781a      	ldrb	r2, [r3, #0]
    5420:	683b      	ldr	r3, [r7, #0]
    5422:	3202      	adds	r2, #2
    5424:	0092      	lsls	r2, r2, #2
    5426:	58d1      	ldr	r1, [r2, r3]
    5428:	230e      	movs	r3, #14
    542a:	18fb      	adds	r3, r7, r3
    542c:	781a      	ldrb	r2, [r3, #0]
    542e:	687b      	ldr	r3, [r7, #4]
    5430:	0018      	movs	r0, r3
    5432:	4b12      	ldr	r3, [pc, #72]	; (547c <_rtc_count_set_config+0x12c>)
    5434:	4798      	blx	r3
			for (uint8_t i = 0; i < RTC_NUM_OF_COMP16; i++) {
    5436:	230e      	movs	r3, #14
    5438:	18fb      	adds	r3, r7, r3
    543a:	781a      	ldrb	r2, [r3, #0]
    543c:	230e      	movs	r3, #14
    543e:	18fb      	adds	r3, r7, r3
    5440:	3201      	adds	r2, #1
    5442:	701a      	strb	r2, [r3, #0]
    5444:	230e      	movs	r3, #14
    5446:	18fb      	adds	r3, r7, r3
    5448:	781b      	ldrb	r3, [r3, #0]
    544a:	2b01      	cmp	r3, #1
    544c:	d9de      	bls.n	540c <_rtc_count_set_config+0xbc>
						(enum rtc_count_compare)i);
			}
			break;
    544e:	e001      	b.n	5454 <_rtc_count_set_config+0x104>
		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
    5450:	2317      	movs	r3, #23
    5452:	e00d      	b.n	5470 <_rtc_count_set_config+0x120>
	}

	/* Check to set continuously clock read update mode. */
	if (config->continuously_update) {
    5454:	683b      	ldr	r3, [r7, #0]
    5456:	791b      	ldrb	r3, [r3, #4]
    5458:	2b00      	cmp	r3, #0
    545a:	d008      	beq.n	546e <_rtc_count_set_config+0x11e>
		/* Set continuously mode. */
		rtc_module->MODE0.READREQ.reg |= RTC_READREQ_RCONT;
    545c:	68bb      	ldr	r3, [r7, #8]
    545e:	885b      	ldrh	r3, [r3, #2]
    5460:	b29b      	uxth	r3, r3
    5462:	2280      	movs	r2, #128	; 0x80
    5464:	01d2      	lsls	r2, r2, #7
    5466:	4313      	orrs	r3, r2
    5468:	b29a      	uxth	r2, r3
    546a:	68bb      	ldr	r3, [r7, #8]
    546c:	805a      	strh	r2, [r3, #2]
	}

	/* Return status OK if everything was configured. */
	return STATUS_OK;
    546e:	2300      	movs	r3, #0
}
    5470:	0018      	movs	r0, r3
    5472:	46bd      	mov	sp, r7
    5474:	b004      	add	sp, #16
    5476:	bd80      	pop	{r7, pc}
    5478:	00005269 	.word	0x00005269
    547c:	0000560d 	.word	0x0000560d

00005480 <rtc_count_init>:
 */
enum status_code rtc_count_init(
		struct rtc_module *const module,
		Rtc *const hw,
		const struct rtc_count_config *const config)
{
    5480:	b580      	push	{r7, lr}
    5482:	b086      	sub	sp, #24
    5484:	af00      	add	r7, sp, #0
    5486:	60f8      	str	r0, [r7, #12]
    5488:	60b9      	str	r1, [r7, #8]
    548a:	607a      	str	r2, [r7, #4]
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
    548c:	68fb      	ldr	r3, [r7, #12]
    548e:	68ba      	ldr	r2, [r7, #8]
    5490:	601a      	str	r2, [r3, #0]

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_RTC);
    5492:	2120      	movs	r1, #32
    5494:	2000      	movs	r0, #0
    5496:	4b17      	ldr	r3, [pc, #92]	; (54f4 <rtc_count_init+0x74>)
    5498:	4798      	blx	r3

	/* Set up GCLK */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
    549a:	2314      	movs	r3, #20
    549c:	18fb      	adds	r3, r7, r3
    549e:	0018      	movs	r0, r3
    54a0:	4b15      	ldr	r3, [pc, #84]	; (54f8 <rtc_count_init+0x78>)
    54a2:	4798      	blx	r3
	gclk_chan_conf.source_generator = GCLK_GENERATOR_2;
    54a4:	2314      	movs	r3, #20
    54a6:	18fb      	adds	r3, r7, r3
    54a8:	2202      	movs	r2, #2
    54aa:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(RTC_GCLK_ID, &gclk_chan_conf);
    54ac:	2314      	movs	r3, #20
    54ae:	18fb      	adds	r3, r7, r3
    54b0:	0019      	movs	r1, r3
    54b2:	2004      	movs	r0, #4
    54b4:	4b11      	ldr	r3, [pc, #68]	; (54fc <rtc_count_init+0x7c>)
    54b6:	4798      	blx	r3
	system_gclk_chan_enable(RTC_GCLK_ID);
    54b8:	2004      	movs	r0, #4
    54ba:	4b11      	ldr	r3, [pc, #68]	; (5500 <rtc_count_init+0x80>)
    54bc:	4798      	blx	r3

	/* Reset module to hardware defaults. */
	rtc_count_reset(module);
    54be:	68fb      	ldr	r3, [r7, #12]
    54c0:	0018      	movs	r0, r3
    54c2:	4b10      	ldr	r3, [pc, #64]	; (5504 <rtc_count_init+0x84>)
    54c4:	4798      	blx	r3

	/* Save conf_struct internally for continued use. */
	module->mode                = config->mode;
    54c6:	687b      	ldr	r3, [r7, #4]
    54c8:	789a      	ldrb	r2, [r3, #2]
    54ca:	68fb      	ldr	r3, [r7, #12]
    54cc:	711a      	strb	r2, [r3, #4]
	module->continuously_update = config->continuously_update;
    54ce:	687b      	ldr	r3, [r7, #4]
    54d0:	791a      	ldrb	r2, [r3, #4]
    54d2:	68fb      	ldr	r3, [r7, #12]
    54d4:	715a      	strb	r2, [r3, #5]

#  if (RTC_INST_NUM == 1)
	_rtc_instance[0] = module;
    54d6:	4b0c      	ldr	r3, [pc, #48]	; (5508 <rtc_count_init+0x88>)
    54d8:	68fa      	ldr	r2, [r7, #12]
    54da:	601a      	str	r2, [r3, #0]
	/* Register this instance for callbacks*/
	_rtc_instance[_rtc_get_inst_index(hw)] = module;
#  endif

	/* Set config and return status. */
	return _rtc_count_set_config(module, config);
    54dc:	687a      	ldr	r2, [r7, #4]
    54de:	68fb      	ldr	r3, [r7, #12]
    54e0:	0011      	movs	r1, r2
    54e2:	0018      	movs	r0, r3
    54e4:	4b09      	ldr	r3, [pc, #36]	; (550c <rtc_count_init+0x8c>)
    54e6:	4798      	blx	r3
    54e8:	0003      	movs	r3, r0
}
    54ea:	0018      	movs	r0, r3
    54ec:	46bd      	mov	sp, r7
    54ee:	b006      	add	sp, #24
    54f0:	bd80      	pop	{r7, pc}
    54f2:	46c0      	nop			; (mov r8, r8)
    54f4:	0000520d 	.word	0x0000520d
    54f8:	000051f5 	.word	0x000051f5
    54fc:	0000f23d 	.word	0x0000f23d
    5500:	0000f281 	.word	0x0000f281
    5504:	0000530d 	.word	0x0000530d
    5508:	200029ec 	.word	0x200029ec
    550c:	00005351 	.word	0x00005351

00005510 <rtc_count_set_count>:
 * \retval STATUS_ERR_INVALID_ARG  If invalid argument(s) were provided
 */
enum status_code rtc_count_set_count(
		struct rtc_module *const module,
		const uint32_t count_value)
{
    5510:	b580      	push	{r7, lr}
    5512:	b084      	sub	sp, #16
    5514:	af00      	add	r7, sp, #0
    5516:	6078      	str	r0, [r7, #4]
    5518:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    551a:	687b      	ldr	r3, [r7, #4]
    551c:	681b      	ldr	r3, [r3, #0]
    551e:	60fb      	str	r3, [r7, #12]

	while (rtc_count_is_syncing(module)) {
    5520:	46c0      	nop			; (mov r8, r8)
    5522:	687b      	ldr	r3, [r7, #4]
    5524:	0018      	movs	r0, r3
    5526:	4b10      	ldr	r3, [pc, #64]	; (5568 <rtc_count_set_count+0x58>)
    5528:	4798      	blx	r3
    552a:	1e03      	subs	r3, r0, #0
    552c:	d1f9      	bne.n	5522 <rtc_count_set_count+0x12>
		/* Wait for synchronization */
	}

	/* Set count according to mode */
	switch(module->mode){
    552e:	687b      	ldr	r3, [r7, #4]
    5530:	791b      	ldrb	r3, [r3, #4]
    5532:	2b00      	cmp	r3, #0
    5534:	d005      	beq.n	5542 <rtc_count_set_count+0x32>
    5536:	2b01      	cmp	r3, #1
    5538:	d10e      	bne.n	5558 <rtc_count_set_count+0x48>
		case RTC_COUNT_MODE_32BIT:
			/* Write value to register. */
			rtc_module->MODE0.COUNT.reg = count_value;
    553a:	68fb      	ldr	r3, [r7, #12]
    553c:	683a      	ldr	r2, [r7, #0]
    553e:	611a      	str	r2, [r3, #16]

			break;
    5540:	e00c      	b.n	555c <rtc_count_set_count+0x4c>

		case RTC_COUNT_MODE_16BIT:
			/* Check if 16-bit value is provided. */
			if(count_value > 0xffff){
    5542:	683b      	ldr	r3, [r7, #0]
    5544:	4a09      	ldr	r2, [pc, #36]	; (556c <rtc_count_set_count+0x5c>)
    5546:	4293      	cmp	r3, r2
    5548:	d901      	bls.n	554e <rtc_count_set_count+0x3e>
				return STATUS_ERR_INVALID_ARG;
    554a:	2317      	movs	r3, #23
    554c:	e007      	b.n	555e <rtc_count_set_count+0x4e>
			}

			/* Write value to register. */
			rtc_module->MODE1.COUNT.reg = (uint32_t)count_value;
    554e:	683b      	ldr	r3, [r7, #0]
    5550:	b29a      	uxth	r2, r3
    5552:	68fb      	ldr	r3, [r7, #12]
    5554:	821a      	strh	r2, [r3, #16]

			break;
    5556:	e001      	b.n	555c <rtc_count_set_count+0x4c>

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
    5558:	2317      	movs	r3, #23
    555a:	e000      	b.n	555e <rtc_count_set_count+0x4e>
	}
	return STATUS_OK;
    555c:	2300      	movs	r3, #0
}
    555e:	0018      	movs	r0, r3
    5560:	46bd      	mov	sp, r7
    5562:	b004      	add	sp, #16
    5564:	bd80      	pop	{r7, pc}
    5566:	46c0      	nop			; (mov r8, r8)
    5568:	00005269 	.word	0x00005269
    556c:	0000ffff 	.word	0x0000ffff

00005570 <rtc_count_get_count>:
 * Returns the current count value.
 *
 * \return The current counter value as a 32-bit unsigned integer.
 */
uint32_t rtc_count_get_count(struct rtc_module *const module)
{
    5570:	b580      	push	{r7, lr}
    5572:	b084      	sub	sp, #16
    5574:	af00      	add	r7, sp, #0
    5576:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    5578:	687b      	ldr	r3, [r7, #4]
    557a:	681b      	ldr	r3, [r3, #0]
    557c:	60bb      	str	r3, [r7, #8]
	/* Initialize return value. */
	uint32_t ret_val;

	/* Change of read method based on value of continuously_update value in
	 * the configuration structure. */
	if(!(module->continuously_update)) {
    557e:	687b      	ldr	r3, [r7, #4]
    5580:	795b      	ldrb	r3, [r3, #5]
    5582:	2201      	movs	r2, #1
    5584:	4053      	eors	r3, r2
    5586:	b2db      	uxtb	r3, r3
    5588:	2b00      	cmp	r3, #0
    558a:	d00a      	beq.n	55a2 <rtc_count_get_count+0x32>
		/* Request read on count register. */
		rtc_module->MODE0.READREQ.reg = RTC_READREQ_RREQ;
    558c:	68bb      	ldr	r3, [r7, #8]
    558e:	4a1c      	ldr	r2, [pc, #112]	; (5600 <rtc_count_get_count+0x90>)
    5590:	805a      	strh	r2, [r3, #2]

		while (rtc_count_is_syncing(module)) {
    5592:	46c0      	nop			; (mov r8, r8)
    5594:	687b      	ldr	r3, [r7, #4]
    5596:	0018      	movs	r0, r3
    5598:	4b1a      	ldr	r3, [pc, #104]	; (5604 <rtc_count_get_count+0x94>)
    559a:	4798      	blx	r3
    559c:	1e03      	subs	r3, r0, #0
    559e:	d1f9      	bne.n	5594 <rtc_count_get_count+0x24>
    55a0:	e016      	b.n	55d0 <rtc_count_get_count+0x60>
			/* Wait for synchronization */
		}
	} else if (!(rtc_module->MODE0.READREQ.reg & RTC_READREQ_RCONT)){
    55a2:	68bb      	ldr	r3, [r7, #8]
    55a4:	885b      	ldrh	r3, [r3, #2]
    55a6:	b29b      	uxth	r3, r3
    55a8:	001a      	movs	r2, r3
    55aa:	2380      	movs	r3, #128	; 0x80
    55ac:	01db      	lsls	r3, r3, #7
    55ae:	4013      	ands	r3, r2
    55b0:	d10e      	bne.n	55d0 <rtc_count_get_count+0x60>
		rtc_module->MODE0.READREQ.reg |= RTC_READREQ_RCONT | RTC_READREQ_RREQ;
    55b2:	68bb      	ldr	r3, [r7, #8]
    55b4:	885b      	ldrh	r3, [r3, #2]
    55b6:	b29b      	uxth	r3, r3
    55b8:	4a13      	ldr	r2, [pc, #76]	; (5608 <rtc_count_get_count+0x98>)
    55ba:	4313      	orrs	r3, r2
    55bc:	b29a      	uxth	r2, r3
    55be:	68bb      	ldr	r3, [r7, #8]
    55c0:	805a      	strh	r2, [r3, #2]
		 /* wait that the first Read request finishes */
		while (rtc_count_is_syncing(module)) {
    55c2:	46c0      	nop			; (mov r8, r8)
    55c4:	687b      	ldr	r3, [r7, #4]
    55c6:	0018      	movs	r0, r3
    55c8:	4b0e      	ldr	r3, [pc, #56]	; (5604 <rtc_count_get_count+0x94>)
    55ca:	4798      	blx	r3
    55cc:	1e03      	subs	r3, r0, #0
    55ce:	d1f9      	bne.n	55c4 <rtc_count_get_count+0x54>
			/* Wait for synchronization */
		}
	}

	/* Read value based on mode. */
	switch (module->mode) {
    55d0:	687b      	ldr	r3, [r7, #4]
    55d2:	791b      	ldrb	r3, [r3, #4]
    55d4:	2b00      	cmp	r3, #0
    55d6:	d005      	beq.n	55e4 <rtc_count_get_count+0x74>
    55d8:	2b01      	cmp	r3, #1
    55da:	d108      	bne.n	55ee <rtc_count_get_count+0x7e>
		case RTC_COUNT_MODE_32BIT:
			/* Return count value in 32-bit mode. */
			ret_val = rtc_module->MODE0.COUNT.reg;
    55dc:	68bb      	ldr	r3, [r7, #8]
    55de:	691b      	ldr	r3, [r3, #16]
    55e0:	60fb      	str	r3, [r7, #12]

			break;
    55e2:	e007      	b.n	55f4 <rtc_count_get_count+0x84>

		case RTC_COUNT_MODE_16BIT:
			/* Return count value in 16-bit mode. */
			ret_val = (uint32_t)rtc_module->MODE1.COUNT.reg;
    55e4:	68bb      	ldr	r3, [r7, #8]
    55e6:	8a1b      	ldrh	r3, [r3, #16]
    55e8:	b29b      	uxth	r3, r3
    55ea:	60fb      	str	r3, [r7, #12]

			break;
    55ec:	e002      	b.n	55f4 <rtc_count_get_count+0x84>

		default:
			Assert(false);
			/* Counter not initialized. Assume counter value 0.*/
			ret_val = 0;
    55ee:	2300      	movs	r3, #0
    55f0:	60fb      	str	r3, [r7, #12]
			break;
    55f2:	46c0      	nop			; (mov r8, r8)
	}

	return ret_val;
    55f4:	68fb      	ldr	r3, [r7, #12]
}
    55f6:	0018      	movs	r0, r3
    55f8:	46bd      	mov	sp, r7
    55fa:	b004      	add	sp, #16
    55fc:	bd80      	pop	{r7, pc}
    55fe:	46c0      	nop			; (mov r8, r8)
    5600:	ffff8000 	.word	0xffff8000
    5604:	00005269 	.word	0x00005269
    5608:	ffffc000 	.word	0xffffc000

0000560c <rtc_count_set_compare>:
 */
enum status_code rtc_count_set_compare(
		struct rtc_module *const module,
		const uint32_t comp_value,
		const enum rtc_count_compare comp_index)
{
    560c:	b580      	push	{r7, lr}
    560e:	b086      	sub	sp, #24
    5610:	af00      	add	r7, sp, #0
    5612:	60f8      	str	r0, [r7, #12]
    5614:	60b9      	str	r1, [r7, #8]
    5616:	1dfb      	adds	r3, r7, #7
    5618:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    561a:	68fb      	ldr	r3, [r7, #12]
    561c:	681b      	ldr	r3, [r3, #0]
    561e:	617b      	str	r3, [r7, #20]

	while (rtc_count_is_syncing(module)) {
    5620:	46c0      	nop			; (mov r8, r8)
    5622:	68fb      	ldr	r3, [r7, #12]
    5624:	0018      	movs	r0, r3
    5626:	4b1a      	ldr	r3, [pc, #104]	; (5690 <rtc_count_set_compare+0x84>)
    5628:	4798      	blx	r3
    562a:	1e03      	subs	r3, r0, #0
    562c:	d1f9      	bne.n	5622 <rtc_count_set_compare+0x16>
		/* Wait for synchronization */
	}

	/* Set compare values based on operation mode. */
	switch (module->mode) {
    562e:	68fb      	ldr	r3, [r7, #12]
    5630:	791b      	ldrb	r3, [r3, #4]
    5632:	2b00      	cmp	r3, #0
    5634:	d00f      	beq.n	5656 <rtc_count_set_compare+0x4a>
    5636:	2b01      	cmp	r3, #1
    5638:	d122      	bne.n	5680 <rtc_count_set_compare+0x74>
		case RTC_COUNT_MODE_32BIT:
			/* Check sanity of comp_index. */
			if ((uint32_t)comp_index > RTC_NUM_OF_COMP32) {
    563a:	1dfb      	adds	r3, r7, #7
    563c:	781b      	ldrb	r3, [r3, #0]
    563e:	2b01      	cmp	r3, #1
    5640:	d901      	bls.n	5646 <rtc_count_set_compare+0x3a>
				return STATUS_ERR_INVALID_ARG;
    5642:	2317      	movs	r3, #23
    5644:	e01f      	b.n	5686 <rtc_count_set_compare+0x7a>
			}

			/* Set compare value for COMP. */
			rtc_module->MODE0.COMP[comp_index].reg = comp_value;
    5646:	1dfb      	adds	r3, r7, #7
    5648:	781a      	ldrb	r2, [r3, #0]
    564a:	697b      	ldr	r3, [r7, #20]
    564c:	3206      	adds	r2, #6
    564e:	0092      	lsls	r2, r2, #2
    5650:	68b9      	ldr	r1, [r7, #8]
    5652:	50d1      	str	r1, [r2, r3]

			break;
    5654:	e016      	b.n	5684 <rtc_count_set_compare+0x78>

		case RTC_COUNT_MODE_16BIT:
			/* Check sanity of comp_index. */
			if ((uint32_t)comp_index > RTC_NUM_OF_COMP16) {
    5656:	1dfb      	adds	r3, r7, #7
    5658:	781b      	ldrb	r3, [r3, #0]
    565a:	2b02      	cmp	r3, #2
    565c:	d901      	bls.n	5662 <rtc_count_set_compare+0x56>
				return STATUS_ERR_INVALID_ARG;
    565e:	2317      	movs	r3, #23
    5660:	e011      	b.n	5686 <rtc_count_set_compare+0x7a>
			}

			/* Check that 16-bit value is provided. */
			if (comp_value > 0xffff) {
    5662:	68bb      	ldr	r3, [r7, #8]
    5664:	4a0b      	ldr	r2, [pc, #44]	; (5694 <rtc_count_set_compare+0x88>)
    5666:	4293      	cmp	r3, r2
    5668:	d901      	bls.n	566e <rtc_count_set_compare+0x62>
				Assert(false);
				return STATUS_ERR_INVALID_ARG;
    566a:	2317      	movs	r3, #23
    566c:	e00b      	b.n	5686 <rtc_count_set_compare+0x7a>
			}

			/* Set compare value for COMP. */
			rtc_module->MODE1.COMP[comp_index].reg = comp_value & 0xffff;
    566e:	1dfb      	adds	r3, r7, #7
    5670:	781a      	ldrb	r2, [r3, #0]
    5672:	68bb      	ldr	r3, [r7, #8]
    5674:	b299      	uxth	r1, r3
    5676:	697b      	ldr	r3, [r7, #20]
    5678:	320c      	adds	r2, #12
    567a:	0052      	lsls	r2, r2, #1
    567c:	52d1      	strh	r1, [r2, r3]

			break;
    567e:	e001      	b.n	5684 <rtc_count_set_compare+0x78>

		default:
			Assert(false);
			return STATUS_ERR_BAD_FORMAT;
    5680:	231a      	movs	r3, #26
    5682:	e000      	b.n	5686 <rtc_count_set_compare+0x7a>
	}

	/* Return status if everything is OK. */
	return STATUS_OK;
    5684:	2300      	movs	r3, #0
}
    5686:	0018      	movs	r0, r3
    5688:	46bd      	mov	sp, r7
    568a:	b006      	add	sp, #24
    568c:	bd80      	pop	{r7, pc}
    568e:	46c0      	nop			; (mov r8, r8)
    5690:	00005269 	.word	0x00005269
    5694:	0000ffff 	.word	0x0000ffff

00005698 <system_gclk_chan_get_config_defaults>:
{
    5698:	b580      	push	{r7, lr}
    569a:	b082      	sub	sp, #8
    569c:	af00      	add	r7, sp, #0
    569e:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
    56a0:	687b      	ldr	r3, [r7, #4]
    56a2:	2200      	movs	r2, #0
    56a4:	701a      	strb	r2, [r3, #0]
}
    56a6:	46c0      	nop			; (mov r8, r8)
    56a8:	46bd      	mov	sp, r7
    56aa:	b002      	add	sp, #8
    56ac:	bd80      	pop	{r7, pc}
	...

000056b0 <system_apb_clock_set_mask>:
{
    56b0:	b580      	push	{r7, lr}
    56b2:	b082      	sub	sp, #8
    56b4:	af00      	add	r7, sp, #0
    56b6:	0002      	movs	r2, r0
    56b8:	6039      	str	r1, [r7, #0]
    56ba:	1dfb      	adds	r3, r7, #7
    56bc:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    56be:	1dfb      	adds	r3, r7, #7
    56c0:	781b      	ldrb	r3, [r3, #0]
    56c2:	2b01      	cmp	r3, #1
    56c4:	d00a      	beq.n	56dc <system_apb_clock_set_mask+0x2c>
    56c6:	2b02      	cmp	r3, #2
    56c8:	d00f      	beq.n	56ea <system_apb_clock_set_mask+0x3a>
    56ca:	2b00      	cmp	r3, #0
    56cc:	d114      	bne.n	56f8 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
    56ce:	4b0e      	ldr	r3, [pc, #56]	; (5708 <system_apb_clock_set_mask+0x58>)
    56d0:	4a0d      	ldr	r2, [pc, #52]	; (5708 <system_apb_clock_set_mask+0x58>)
    56d2:	6991      	ldr	r1, [r2, #24]
    56d4:	683a      	ldr	r2, [r7, #0]
    56d6:	430a      	orrs	r2, r1
    56d8:	619a      	str	r2, [r3, #24]
			break;
    56da:	e00f      	b.n	56fc <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
    56dc:	4b0a      	ldr	r3, [pc, #40]	; (5708 <system_apb_clock_set_mask+0x58>)
    56de:	4a0a      	ldr	r2, [pc, #40]	; (5708 <system_apb_clock_set_mask+0x58>)
    56e0:	69d1      	ldr	r1, [r2, #28]
    56e2:	683a      	ldr	r2, [r7, #0]
    56e4:	430a      	orrs	r2, r1
    56e6:	61da      	str	r2, [r3, #28]
			break;
    56e8:	e008      	b.n	56fc <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
    56ea:	4b07      	ldr	r3, [pc, #28]	; (5708 <system_apb_clock_set_mask+0x58>)
    56ec:	4a06      	ldr	r2, [pc, #24]	; (5708 <system_apb_clock_set_mask+0x58>)
    56ee:	6a11      	ldr	r1, [r2, #32]
    56f0:	683a      	ldr	r2, [r7, #0]
    56f2:	430a      	orrs	r2, r1
    56f4:	621a      	str	r2, [r3, #32]
			break;
    56f6:	e001      	b.n	56fc <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
    56f8:	2317      	movs	r3, #23
    56fa:	e000      	b.n	56fe <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
    56fc:	2300      	movs	r3, #0
}
    56fe:	0018      	movs	r0, r3
    5700:	46bd      	mov	sp, r7
    5702:	b002      	add	sp, #8
    5704:	bd80      	pop	{r7, pc}
    5706:	46c0      	nop			; (mov r8, r8)
    5708:	40000400 	.word	0x40000400

0000570c <system_pinmux_get_config_defaults>:
{
    570c:	b580      	push	{r7, lr}
    570e:	b082      	sub	sp, #8
    5710:	af00      	add	r7, sp, #0
    5712:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    5714:	687b      	ldr	r3, [r7, #4]
    5716:	2280      	movs	r2, #128	; 0x80
    5718:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    571a:	687b      	ldr	r3, [r7, #4]
    571c:	2200      	movs	r2, #0
    571e:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    5720:	687b      	ldr	r3, [r7, #4]
    5722:	2201      	movs	r2, #1
    5724:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    5726:	687b      	ldr	r3, [r7, #4]
    5728:	2200      	movs	r2, #0
    572a:	70da      	strb	r2, [r3, #3]
}
    572c:	46c0      	nop			; (mov r8, r8)
    572e:	46bd      	mov	sp, r7
    5730:	b002      	add	sp, #8
    5732:	bd80      	pop	{r7, pc}

00005734 <system_is_debugger_present>:
 * \retval true  Debugger is connected to the system
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
    5734:	b580      	push	{r7, lr}
    5736:	af00      	add	r7, sp, #0
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
    5738:	4b05      	ldr	r3, [pc, #20]	; (5750 <system_is_debugger_present+0x1c>)
    573a:	789b      	ldrb	r3, [r3, #2]
    573c:	b2db      	uxtb	r3, r3
    573e:	001a      	movs	r2, r3
    5740:	2302      	movs	r3, #2
    5742:	4013      	ands	r3, r2
    5744:	1e5a      	subs	r2, r3, #1
    5746:	4193      	sbcs	r3, r2
    5748:	b2db      	uxtb	r3, r3
}
    574a:	0018      	movs	r0, r3
    574c:	46bd      	mov	sp, r7
    574e:	bd80      	pop	{r7, pc}
    5750:	41002000 	.word	0x41002000

00005754 <i2c_master_is_syncing>:
 * \retval true   Module is busy synchronizing
 * \retval false  Module is not synchronizing
 */
static inline bool i2c_master_is_syncing (
		const struct i2c_master_module *const module)
{
    5754:	b580      	push	{r7, lr}
    5756:	b084      	sub	sp, #16
    5758:	af00      	add	r7, sp, #0
    575a:	6078      	str	r0, [r7, #4]
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
    575c:	687b      	ldr	r3, [r7, #4]
    575e:	681b      	ldr	r3, [r3, #0]
    5760:	60fb      	str	r3, [r7, #12]

#if defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_1)
	return (i2c_hw->STATUS.reg & SERCOM_I2CM_STATUS_SYNCBUSY);
#elif defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_2)
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
    5762:	68fb      	ldr	r3, [r7, #12]
    5764:	69db      	ldr	r3, [r3, #28]
    5766:	2207      	movs	r2, #7
    5768:	4013      	ands	r3, r2
    576a:	1e5a      	subs	r2, r3, #1
    576c:	4193      	sbcs	r3, r2
    576e:	b2db      	uxtb	r3, r3
#else
#  error Unknown SERCOM SYNCBUSY scheme!
#endif
}
    5770:	0018      	movs	r0, r3
    5772:	46bd      	mov	sp, r7
    5774:	b004      	add	sp, #16
    5776:	bd80      	pop	{r7, pc}

00005778 <_i2c_master_wait_for_sync>:
 *
 * \param[in]  module  Pointer to software module structure
 */
static void _i2c_master_wait_for_sync(
		const struct i2c_master_module *const module)
{
    5778:	b580      	push	{r7, lr}
    577a:	b082      	sub	sp, #8
    577c:	af00      	add	r7, sp, #0
    577e:	6078      	str	r0, [r7, #4]
	/* Sanity check */
	Assert(module);

	while (i2c_master_is_syncing(module)) {
    5780:	46c0      	nop			; (mov r8, r8)
    5782:	687b      	ldr	r3, [r7, #4]
    5784:	0018      	movs	r0, r3
    5786:	4b04      	ldr	r3, [pc, #16]	; (5798 <_i2c_master_wait_for_sync+0x20>)
    5788:	4798      	blx	r3
    578a:	1e03      	subs	r3, r0, #0
    578c:	d1f9      	bne.n	5782 <_i2c_master_wait_for_sync+0xa>
		/* Wait for I2C module to sync. */
	}
}
    578e:	46c0      	nop			; (mov r8, r8)
    5790:	46bd      	mov	sp, r7
    5792:	b002      	add	sp, #8
    5794:	bd80      	pop	{r7, pc}
    5796:	46c0      	nop			; (mov r8, r8)
    5798:	00005755 	.word	0x00005755

0000579c <i2c_master_disable>:
 *
 * \param[in]  module  Pointer to the software module struct
 */
static inline void i2c_master_disable(
		const struct i2c_master_module *const module)
{
    579c:	b580      	push	{r7, lr}
    579e:	b084      	sub	sp, #16
    57a0:	af00      	add	r7, sp, #0
    57a2:	6078      	str	r0, [r7, #4]
	/* Sanity check of arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    57a4:	687b      	ldr	r3, [r7, #4]
    57a6:	681b      	ldr	r3, [r3, #0]
    57a8:	60fb      	str	r3, [r7, #12]
		/* Disable module interrupts */
		system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
#endif

	/* Wait for module to sync */
	_i2c_master_wait_for_sync(module);
    57aa:	687b      	ldr	r3, [r7, #4]
    57ac:	0018      	movs	r0, r3
    57ae:	4b09      	ldr	r3, [pc, #36]	; (57d4 <i2c_master_disable+0x38>)
    57b0:	4798      	blx	r3

	/* Disbale interrupt */
	i2c_module->INTENCLR.reg = SERCOM_I2CM_INTENCLR_MASK;
    57b2:	68fb      	ldr	r3, [r7, #12]
    57b4:	2283      	movs	r2, #131	; 0x83
    57b6:	751a      	strb	r2, [r3, #20]
	/* Clear interrupt flag */
	i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_MASK;
    57b8:	68fb      	ldr	r3, [r7, #12]
    57ba:	2283      	movs	r2, #131	; 0x83
    57bc:	761a      	strb	r2, [r3, #24]

	/* Disable module */
	i2c_module->CTRLA.reg &= ~SERCOM_I2CM_CTRLA_ENABLE;
    57be:	68fb      	ldr	r3, [r7, #12]
    57c0:	681b      	ldr	r3, [r3, #0]
    57c2:	2202      	movs	r2, #2
    57c4:	4393      	bics	r3, r2
    57c6:	001a      	movs	r2, r3
    57c8:	68fb      	ldr	r3, [r7, #12]
    57ca:	601a      	str	r2, [r3, #0]

}
    57cc:	46c0      	nop			; (mov r8, r8)
    57ce:	46bd      	mov	sp, r7
    57d0:	b004      	add	sp, #16
    57d2:	bd80      	pop	{r7, pc}
    57d4:	00005779 	.word	0x00005779

000057d8 <_i2c_master_set_config>:
 *                                          with set GCLK frequency
 */
static enum status_code _i2c_master_set_config(
		struct i2c_master_module *const module,
		const struct i2c_master_config *const config)
{
    57d8:	b5f0      	push	{r4, r5, r6, r7, lr}
    57da:	b097      	sub	sp, #92	; 0x5c
    57dc:	af00      	add	r7, sp, #0
    57de:	6178      	str	r0, [r7, #20]
    57e0:	6139      	str	r1, [r7, #16]
	Assert(module->hw);
	Assert(config);

	/* Temporary variables. */
	uint32_t tmp_ctrla;
	int32_t tmp_baud = 0;
    57e2:	2300      	movs	r3, #0
    57e4:	63fb      	str	r3, [r7, #60]	; 0x3c
	int32_t tmp_baud_hs = 0;
    57e6:	2300      	movs	r3, #0
    57e8:	653b      	str	r3, [r7, #80]	; 0x50
	int32_t tmp_baudlow_hs = 0;
    57ea:	2300      	movs	r3, #0
    57ec:	64fb      	str	r3, [r7, #76]	; 0x4c
	enum status_code tmp_status_code = STATUS_OK;
    57ee:	233b      	movs	r3, #59	; 0x3b
    57f0:	2210      	movs	r2, #16
    57f2:	4694      	mov	ip, r2
    57f4:	44bc      	add	ip, r7
    57f6:	4463      	add	r3, ip
    57f8:	2200      	movs	r2, #0
    57fa:	701a      	strb	r2, [r3, #0]

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    57fc:	697b      	ldr	r3, [r7, #20]
    57fe:	681b      	ldr	r3, [r3, #0]
    5800:	63bb      	str	r3, [r7, #56]	; 0x38
	Sercom *const sercom_hw = module->hw;
    5802:	697b      	ldr	r3, [r7, #20]
    5804:	681b      	ldr	r3, [r3, #0]
    5806:	637b      	str	r3, [r7, #52]	; 0x34

	uint8_t sercom_index = _sercom_get_sercom_inst_index(sercom_hw);
    5808:	2323      	movs	r3, #35	; 0x23
    580a:	2210      	movs	r2, #16
    580c:	18ba      	adds	r2, r7, r2
    580e:	18d4      	adds	r4, r2, r3
    5810:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    5812:	0018      	movs	r0, r3
    5814:	4bc0      	ldr	r3, [pc, #768]	; (5b18 <_i2c_master_set_config+0x340>)
    5816:	4798      	blx	r3
    5818:	0003      	movs	r3, r0
    581a:	7023      	strb	r3, [r4, #0]

	/* Pin configuration */
	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
    581c:	230c      	movs	r3, #12
    581e:	2210      	movs	r2, #16
    5820:	4694      	mov	ip, r2
    5822:	44bc      	add	ip, r7
    5824:	4463      	add	r3, ip
    5826:	0018      	movs	r0, r3
    5828:	4bbc      	ldr	r3, [pc, #752]	; (5b1c <_i2c_master_set_config+0x344>)
    582a:	4798      	blx	r3

	uint32_t pad0 = config->pinmux_pad0;
    582c:	693b      	ldr	r3, [r7, #16]
    582e:	69db      	ldr	r3, [r3, #28]
    5830:	647b      	str	r3, [r7, #68]	; 0x44
	uint32_t pad1 = config->pinmux_pad1;
    5832:	693b      	ldr	r3, [r7, #16]
    5834:	6a1b      	ldr	r3, [r3, #32]
    5836:	643b      	str	r3, [r7, #64]	; 0x40

	/* SERCOM PAD0 - SDA */
	if (pad0 == PINMUX_DEFAULT) {
    5838:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    583a:	2b00      	cmp	r3, #0
    583c:	d106      	bne.n	584c <_i2c_master_set_config+0x74>
		pad0 = _sercom_get_default_pad(sercom_hw, 0);
    583e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    5840:	2100      	movs	r1, #0
    5842:	0018      	movs	r0, r3
    5844:	4bb6      	ldr	r3, [pc, #728]	; (5b20 <_i2c_master_set_config+0x348>)
    5846:	4798      	blx	r3
    5848:	0003      	movs	r3, r0
    584a:	647b      	str	r3, [r7, #68]	; 0x44
	}
	pin_conf.mux_position = pad0 & 0xFFFF;
    584c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    584e:	b2da      	uxtb	r2, r3
    5850:	230c      	movs	r3, #12
    5852:	2110      	movs	r1, #16
    5854:	468c      	mov	ip, r1
    5856:	44bc      	add	ip, r7
    5858:	4463      	add	r3, ip
    585a:	701a      	strb	r2, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
    585c:	230c      	movs	r3, #12
    585e:	2210      	movs	r2, #16
    5860:	4694      	mov	ip, r2
    5862:	44bc      	add	ip, r7
    5864:	4463      	add	r3, ip
    5866:	2202      	movs	r2, #2
    5868:	705a      	strb	r2, [r3, #1]
	system_pinmux_pin_set_config(pad0 >> 16, &pin_conf);
    586a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    586c:	0c1b      	lsrs	r3, r3, #16
    586e:	b2db      	uxtb	r3, r3
    5870:	220c      	movs	r2, #12
    5872:	2110      	movs	r1, #16
    5874:	468c      	mov	ip, r1
    5876:	44bc      	add	ip, r7
    5878:	4462      	add	r2, ip
    587a:	0011      	movs	r1, r2
    587c:	0018      	movs	r0, r3
    587e:	4ba9      	ldr	r3, [pc, #676]	; (5b24 <_i2c_master_set_config+0x34c>)
    5880:	4798      	blx	r3

	/* SERCOM PAD1 - SCL */
	if (pad1 == PINMUX_DEFAULT) {
    5882:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    5884:	2b00      	cmp	r3, #0
    5886:	d106      	bne.n	5896 <_i2c_master_set_config+0xbe>
		pad1 = _sercom_get_default_pad(sercom_hw, 1);
    5888:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    588a:	2101      	movs	r1, #1
    588c:	0018      	movs	r0, r3
    588e:	4ba4      	ldr	r3, [pc, #656]	; (5b20 <_i2c_master_set_config+0x348>)
    5890:	4798      	blx	r3
    5892:	0003      	movs	r3, r0
    5894:	643b      	str	r3, [r7, #64]	; 0x40
	}
	pin_conf.mux_position = pad1 & 0xFFFF;
    5896:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    5898:	b2da      	uxtb	r2, r3
    589a:	230c      	movs	r3, #12
    589c:	2110      	movs	r1, #16
    589e:	468c      	mov	ip, r1
    58a0:	44bc      	add	ip, r7
    58a2:	4463      	add	r3, ip
    58a4:	701a      	strb	r2, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
    58a6:	230c      	movs	r3, #12
    58a8:	2210      	movs	r2, #16
    58aa:	4694      	mov	ip, r2
    58ac:	44bc      	add	ip, r7
    58ae:	4463      	add	r3, ip
    58b0:	2202      	movs	r2, #2
    58b2:	705a      	strb	r2, [r3, #1]
	system_pinmux_pin_set_config(pad1 >> 16, &pin_conf);
    58b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    58b6:	0c1b      	lsrs	r3, r3, #16
    58b8:	b2db      	uxtb	r3, r3
    58ba:	220c      	movs	r2, #12
    58bc:	2110      	movs	r1, #16
    58be:	468c      	mov	ip, r1
    58c0:	44bc      	add	ip, r7
    58c2:	4462      	add	r2, ip
    58c4:	0011      	movs	r1, r2
    58c6:	0018      	movs	r0, r3
    58c8:	4b96      	ldr	r3, [pc, #600]	; (5b24 <_i2c_master_set_config+0x34c>)
    58ca:	4798      	blx	r3

	/* Save timeout on unknown bus state in software module. */
	module->unknown_bus_state_timeout = config->unknown_bus_state_timeout;
    58cc:	693b      	ldr	r3, [r7, #16]
    58ce:	8a9a      	ldrh	r2, [r3, #20]
    58d0:	697b      	ldr	r3, [r7, #20]
    58d2:	80da      	strh	r2, [r3, #6]

	/* Save timeout on buffer write. */
	module->buffer_timeout = config->buffer_timeout;
    58d4:	693b      	ldr	r3, [r7, #16]
    58d6:	8ada      	ldrh	r2, [r3, #22]
    58d8:	697b      	ldr	r3, [r7, #20]
    58da:	811a      	strh	r2, [r3, #8]

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
    58dc:	693b      	ldr	r3, [r7, #16]
    58de:	7e1b      	ldrb	r3, [r3, #24]
    58e0:	2b00      	cmp	r3, #0
    58e2:	d103      	bne.n	58ec <_i2c_master_set_config+0x114>
    58e4:	4b90      	ldr	r3, [pc, #576]	; (5b28 <_i2c_master_set_config+0x350>)
    58e6:	4798      	blx	r3
    58e8:	1e03      	subs	r3, r0, #0
    58ea:	d002      	beq.n	58f2 <_i2c_master_set_config+0x11a>
		tmp_ctrla = SERCOM_I2CM_CTRLA_RUNSTDBY;
    58ec:	2380      	movs	r3, #128	; 0x80
    58ee:	657b      	str	r3, [r7, #84]	; 0x54
    58f0:	e001      	b.n	58f6 <_i2c_master_set_config+0x11e>
	} else {
		tmp_ctrla = 0;
    58f2:	2300      	movs	r3, #0
    58f4:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Check and set start data hold timeout. */
	if (config->start_hold_time != I2C_MASTER_START_HOLD_TIME_DISABLED) {
    58f6:	693b      	ldr	r3, [r7, #16]
    58f8:	691b      	ldr	r3, [r3, #16]
    58fa:	2b00      	cmp	r3, #0
    58fc:	d004      	beq.n	5908 <_i2c_master_set_config+0x130>
		tmp_ctrla |= config->start_hold_time;
    58fe:	693b      	ldr	r3, [r7, #16]
    5900:	691b      	ldr	r3, [r3, #16]
    5902:	6d7a      	ldr	r2, [r7, #84]	; 0x54
    5904:	4313      	orrs	r3, r2
    5906:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Check and set transfer speed */
	tmp_ctrla |= config->transfer_speed;
    5908:	693b      	ldr	r3, [r7, #16]
    590a:	689b      	ldr	r3, [r3, #8]
    590c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
    590e:	4313      	orrs	r3, r2
    5910:	657b      	str	r3, [r7, #84]	; 0x54

	/* Check and set SCL low timeout. */
	if (config->scl_low_timeout) {
    5912:	693b      	ldr	r3, [r7, #16]
    5914:	2224      	movs	r2, #36	; 0x24
    5916:	5c9b      	ldrb	r3, [r3, r2]
    5918:	2b00      	cmp	r3, #0
    591a:	d004      	beq.n	5926 <_i2c_master_set_config+0x14e>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_LOWTOUTEN;
    591c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    591e:	2280      	movs	r2, #128	; 0x80
    5920:	05d2      	lsls	r2, r2, #23
    5922:	4313      	orrs	r3, r2
    5924:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Check and set inactive bus timeout. */
	if (config->inactive_timeout != I2C_MASTER_INACTIVE_TIMEOUT_DISABLED) {
    5926:	693b      	ldr	r3, [r7, #16]
    5928:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    592a:	2b00      	cmp	r3, #0
    592c:	d004      	beq.n	5938 <_i2c_master_set_config+0x160>
		tmp_ctrla |= config->inactive_timeout;
    592e:	693b      	ldr	r3, [r7, #16]
    5930:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    5932:	6d7a      	ldr	r2, [r7, #84]	; 0x54
    5934:	4313      	orrs	r3, r2
    5936:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Check and set SCL clock stretch mode. */
	if (config->scl_stretch_only_after_ack_bit || (config->transfer_speed == I2C_MASTER_SPEED_HIGH_SPEED)) {
    5938:	693b      	ldr	r3, [r7, #16]
    593a:	222c      	movs	r2, #44	; 0x2c
    593c:	5c9b      	ldrb	r3, [r3, r2]
    593e:	2b00      	cmp	r3, #0
    5940:	d105      	bne.n	594e <_i2c_master_set_config+0x176>
    5942:	693b      	ldr	r3, [r7, #16]
    5944:	689a      	ldr	r2, [r3, #8]
    5946:	2380      	movs	r3, #128	; 0x80
    5948:	049b      	lsls	r3, r3, #18
    594a:	429a      	cmp	r2, r3
    594c:	d104      	bne.n	5958 <_i2c_master_set_config+0x180>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SCLSM;
    594e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    5950:	2280      	movs	r2, #128	; 0x80
    5952:	0512      	lsls	r2, r2, #20
    5954:	4313      	orrs	r3, r2
    5956:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Check and set slave SCL low extend timeout. */
	if (config->slave_scl_low_extend_timeout) {
    5958:	693b      	ldr	r3, [r7, #16]
    595a:	222d      	movs	r2, #45	; 0x2d
    595c:	5c9b      	ldrb	r3, [r3, r2]
    595e:	2b00      	cmp	r3, #0
    5960:	d004      	beq.n	596c <_i2c_master_set_config+0x194>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SEXTTOEN;
    5962:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    5964:	2280      	movs	r2, #128	; 0x80
    5966:	0412      	lsls	r2, r2, #16
    5968:	4313      	orrs	r3, r2
    596a:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Check and set master SCL low extend timeout. */
	if (config->master_scl_low_extend_timeout) {
    596c:	693b      	ldr	r3, [r7, #16]
    596e:	222e      	movs	r2, #46	; 0x2e
    5970:	5c9b      	ldrb	r3, [r3, r2]
    5972:	2b00      	cmp	r3, #0
    5974:	d004      	beq.n	5980 <_i2c_master_set_config+0x1a8>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_MEXTTOEN;
    5976:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    5978:	2280      	movs	r2, #128	; 0x80
    597a:	03d2      	lsls	r2, r2, #15
    597c:	4313      	orrs	r3, r2
    597e:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Write config to register CTRLA. */
	i2c_module->CTRLA.reg |= tmp_ctrla;
    5980:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    5982:	681a      	ldr	r2, [r3, #0]
    5984:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    5986:	431a      	orrs	r2, r3
    5988:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    598a:	601a      	str	r2, [r3, #0]

	/* Set configurations in CTRLB. */
	i2c_module->CTRLB.reg = SERCOM_I2CM_CTRLB_SMEN;
    598c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    598e:	2280      	movs	r2, #128	; 0x80
    5990:	0052      	lsls	r2, r2, #1
    5992:	605a      	str	r2, [r3, #4]

	/* Find and set baudrate, considering sda/scl rise time */
	uint32_t fgclk       = system_gclk_chan_get_hz(SERCOM0_GCLK_ID_CORE + sercom_index);
    5994:	2323      	movs	r3, #35	; 0x23
    5996:	2210      	movs	r2, #16
    5998:	4694      	mov	ip, r2
    599a:	44bc      	add	ip, r7
    599c:	4463      	add	r3, ip
    599e:	781b      	ldrb	r3, [r3, #0]
    59a0:	3314      	adds	r3, #20
    59a2:	b2db      	uxtb	r3, r3
    59a4:	0018      	movs	r0, r3
    59a6:	4b61      	ldr	r3, [pc, #388]	; (5b2c <_i2c_master_set_config+0x354>)
    59a8:	4798      	blx	r3
    59aa:	0003      	movs	r3, r0
    59ac:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t fscl        = 1000 * config->baud_rate;
    59ae:	693b      	ldr	r3, [r7, #16]
    59b0:	681b      	ldr	r3, [r3, #0]
    59b2:	22fa      	movs	r2, #250	; 0xfa
    59b4:	0092      	lsls	r2, r2, #2
    59b6:	4353      	muls	r3, r2
    59b8:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t fscl_hs     = 1000 * config->baud_rate_high_speed;
    59ba:	693b      	ldr	r3, [r7, #16]
    59bc:	685b      	ldr	r3, [r3, #4]
    59be:	22fa      	movs	r2, #250	; 0xfa
    59c0:	0092      	lsls	r2, r2, #2
    59c2:	4353      	muls	r3, r2
    59c4:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t trise       = config->sda_scl_rise_time_ns;
    59c6:	693b      	ldr	r3, [r7, #16]
    59c8:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
    59ca:	623b      	str	r3, [r7, #32]
	
	tmp_baud = (int32_t)(div_ceil(
    59cc:	4b58      	ldr	r3, [pc, #352]	; (5b30 <_i2c_master_set_config+0x358>)
    59ce:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    59d0:	4798      	blx	r3
    59d2:	0005      	movs	r5, r0
    59d4:	000e      	movs	r6, r1
    59d6:	4b56      	ldr	r3, [pc, #344]	; (5b30 <_i2c_master_set_config+0x358>)
    59d8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    59da:	4798      	blx	r3
    59dc:	60b8      	str	r0, [r7, #8]
    59de:	60f9      	str	r1, [r7, #12]
    59e0:	4b53      	ldr	r3, [pc, #332]	; (5b30 <_i2c_master_set_config+0x358>)
    59e2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    59e4:	4798      	blx	r3
    59e6:	4c53      	ldr	r4, [pc, #332]	; (5b34 <_i2c_master_set_config+0x35c>)
    59e8:	4a53      	ldr	r2, [pc, #332]	; (5b38 <_i2c_master_set_config+0x360>)
    59ea:	4b54      	ldr	r3, [pc, #336]	; (5b3c <_i2c_master_set_config+0x364>)
    59ec:	47a0      	blx	r4
    59ee:	0003      	movs	r3, r0
    59f0:	000c      	movs	r4, r1
    59f2:	603b      	str	r3, [r7, #0]
    59f4:	607c      	str	r4, [r7, #4]
    59f6:	4b4e      	ldr	r3, [pc, #312]	; (5b30 <_i2c_master_set_config+0x358>)
    59f8:	6a38      	ldr	r0, [r7, #32]
    59fa:	4798      	blx	r3
    59fc:	0002      	movs	r2, r0
    59fe:	000b      	movs	r3, r1
    5a00:	4c4c      	ldr	r4, [pc, #304]	; (5b34 <_i2c_master_set_config+0x35c>)
    5a02:	6838      	ldr	r0, [r7, #0]
    5a04:	6879      	ldr	r1, [r7, #4]
    5a06:	47a0      	blx	r4
    5a08:	0003      	movs	r3, r0
    5a0a:	000c      	movs	r4, r1
    5a0c:	0018      	movs	r0, r3
    5a0e:	0021      	movs	r1, r4
    5a10:	4c4b      	ldr	r4, [pc, #300]	; (5b40 <_i2c_master_set_config+0x368>)
    5a12:	2200      	movs	r2, #0
    5a14:	4b4b      	ldr	r3, [pc, #300]	; (5b44 <_i2c_master_set_config+0x36c>)
    5a16:	47a0      	blx	r4
    5a18:	0003      	movs	r3, r0
    5a1a:	000c      	movs	r4, r1
    5a1c:	001a      	movs	r2, r3
    5a1e:	0023      	movs	r3, r4
    5a20:	4c44      	ldr	r4, [pc, #272]	; (5b34 <_i2c_master_set_config+0x35c>)
    5a22:	68b8      	ldr	r0, [r7, #8]
    5a24:	68f9      	ldr	r1, [r7, #12]
    5a26:	47a0      	blx	r4
    5a28:	0003      	movs	r3, r0
    5a2a:	000c      	movs	r4, r1
    5a2c:	001a      	movs	r2, r3
    5a2e:	0023      	movs	r3, r4
    5a30:	4c45      	ldr	r4, [pc, #276]	; (5b48 <_i2c_master_set_config+0x370>)
    5a32:	0028      	movs	r0, r5
    5a34:	0031      	movs	r1, r6
    5a36:	47a0      	blx	r4
    5a38:	0003      	movs	r3, r0
    5a3a:	000c      	movs	r4, r1
    5a3c:	001d      	movs	r5, r3
    5a3e:	0026      	movs	r6, r4
    5a40:	6abb      	ldr	r3, [r7, #40]	; 0x28
    5a42:	005a      	lsls	r2, r3, #1
    5a44:	4b3a      	ldr	r3, [pc, #232]	; (5b30 <_i2c_master_set_config+0x358>)
    5a46:	0010      	movs	r0, r2
    5a48:	4798      	blx	r3
    5a4a:	0002      	movs	r2, r0
    5a4c:	000b      	movs	r3, r1
    5a4e:	4c3c      	ldr	r4, [pc, #240]	; (5b40 <_i2c_master_set_config+0x368>)
    5a50:	0028      	movs	r0, r5
    5a52:	0031      	movs	r1, r6
    5a54:	47a0      	blx	r4
    5a56:	0003      	movs	r3, r0
    5a58:	000c      	movs	r4, r1
    5a5a:	0018      	movs	r0, r3
    5a5c:	0021      	movs	r1, r4
    5a5e:	4c3a      	ldr	r4, [pc, #232]	; (5b48 <_i2c_master_set_config+0x370>)
    5a60:	2200      	movs	r2, #0
    5a62:	4b3a      	ldr	r3, [pc, #232]	; (5b4c <_i2c_master_set_config+0x374>)
    5a64:	47a0      	blx	r4
    5a66:	0003      	movs	r3, r0
    5a68:	000c      	movs	r4, r1
    5a6a:	001d      	movs	r5, r3
    5a6c:	0026      	movs	r6, r4
    5a6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    5a70:	005a      	lsls	r2, r3, #1
    5a72:	4b2f      	ldr	r3, [pc, #188]	; (5b30 <_i2c_master_set_config+0x358>)
    5a74:	0010      	movs	r0, r2
    5a76:	4798      	blx	r3
    5a78:	0002      	movs	r2, r0
    5a7a:	000b      	movs	r3, r1
    5a7c:	4c34      	ldr	r4, [pc, #208]	; (5b50 <_i2c_master_set_config+0x378>)
    5a7e:	0028      	movs	r0, r5
    5a80:	0031      	movs	r1, r6
    5a82:	47a0      	blx	r4
    5a84:	0003      	movs	r3, r0
    5a86:	000c      	movs	r4, r1
    5a88:	0019      	movs	r1, r3
    5a8a:	0022      	movs	r2, r4
    5a8c:	4b31      	ldr	r3, [pc, #196]	; (5b54 <_i2c_master_set_config+0x37c>)
    5a8e:	0008      	movs	r0, r1
    5a90:	0011      	movs	r1, r2
    5a92:	4798      	blx	r3
    5a94:	0003      	movs	r3, r0
    5a96:	63fb      	str	r3, [r7, #60]	; 0x3c
			fgclk - fscl * (10 + (fgclk * 0.000000001)* trise), 2 * fscl));
	
	/* For High speed mode, set the SCL ratio of high:low to 1:2. */
	if (config->transfer_speed == I2C_MASTER_SPEED_HIGH_SPEED) {
    5a98:	693b      	ldr	r3, [r7, #16]
    5a9a:	689a      	ldr	r2, [r3, #8]
    5a9c:	2380      	movs	r3, #128	; 0x80
    5a9e:	049b      	lsls	r3, r3, #18
    5aa0:	429a      	cmp	r2, r3
    5aa2:	d16a      	bne.n	5b7a <_i2c_master_set_config+0x3a2>
		tmp_baudlow_hs = (int32_t)((fgclk * 2.0) / (3.0 * fscl_hs) - 1);
    5aa4:	4b22      	ldr	r3, [pc, #136]	; (5b30 <_i2c_master_set_config+0x358>)
    5aa6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    5aa8:	4798      	blx	r3
    5aaa:	4c25      	ldr	r4, [pc, #148]	; (5b40 <_i2c_master_set_config+0x368>)
    5aac:	0002      	movs	r2, r0
    5aae:	000b      	movs	r3, r1
    5ab0:	47a0      	blx	r4
    5ab2:	0003      	movs	r3, r0
    5ab4:	000c      	movs	r4, r1
    5ab6:	001d      	movs	r5, r3
    5ab8:	0026      	movs	r6, r4
    5aba:	4b1d      	ldr	r3, [pc, #116]	; (5b30 <_i2c_master_set_config+0x358>)
    5abc:	6a78      	ldr	r0, [r7, #36]	; 0x24
    5abe:	4798      	blx	r3
    5ac0:	4c1c      	ldr	r4, [pc, #112]	; (5b34 <_i2c_master_set_config+0x35c>)
    5ac2:	2200      	movs	r2, #0
    5ac4:	4b24      	ldr	r3, [pc, #144]	; (5b58 <_i2c_master_set_config+0x380>)
    5ac6:	47a0      	blx	r4
    5ac8:	0003      	movs	r3, r0
    5aca:	000c      	movs	r4, r1
    5acc:	001a      	movs	r2, r3
    5ace:	0023      	movs	r3, r4
    5ad0:	4c1f      	ldr	r4, [pc, #124]	; (5b50 <_i2c_master_set_config+0x378>)
    5ad2:	0028      	movs	r0, r5
    5ad4:	0031      	movs	r1, r6
    5ad6:	47a0      	blx	r4
    5ad8:	0003      	movs	r3, r0
    5ada:	000c      	movs	r4, r1
    5adc:	0018      	movs	r0, r3
    5ade:	0021      	movs	r1, r4
    5ae0:	4c19      	ldr	r4, [pc, #100]	; (5b48 <_i2c_master_set_config+0x370>)
    5ae2:	2200      	movs	r2, #0
    5ae4:	4b19      	ldr	r3, [pc, #100]	; (5b4c <_i2c_master_set_config+0x374>)
    5ae6:	47a0      	blx	r4
    5ae8:	0003      	movs	r3, r0
    5aea:	000c      	movs	r4, r1
    5aec:	0019      	movs	r1, r3
    5aee:	0022      	movs	r2, r4
    5af0:	4b18      	ldr	r3, [pc, #96]	; (5b54 <_i2c_master_set_config+0x37c>)
    5af2:	0008      	movs	r0, r1
    5af4:	0011      	movs	r1, r2
    5af6:	4798      	blx	r3
    5af8:	0003      	movs	r3, r0
    5afa:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (tmp_baudlow_hs) {
    5afc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    5afe:	2b00      	cmp	r3, #0
    5b00:	d02e      	beq.n	5b60 <_i2c_master_set_config+0x388>
			tmp_baud_hs = (int32_t)(fgclk / fscl_hs) - 2 - tmp_baudlow_hs;
    5b02:	4b16      	ldr	r3, [pc, #88]	; (5b5c <_i2c_master_set_config+0x384>)
    5b04:	6a79      	ldr	r1, [r7, #36]	; 0x24
    5b06:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    5b08:	4798      	blx	r3
    5b0a:	0003      	movs	r3, r0
    5b0c:	1e9a      	subs	r2, r3, #2
    5b0e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    5b10:	1ad3      	subs	r3, r2, r3
    5b12:	653b      	str	r3, [r7, #80]	; 0x50
    5b14:	e031      	b.n	5b7a <_i2c_master_set_config+0x3a2>
    5b16:	46c0      	nop			; (mov r8, r8)
    5b18:	0000cdd5 	.word	0x0000cdd5
    5b1c:	0000570d 	.word	0x0000570d
    5b20:	0000cc19 	.word	0x0000cc19
    5b24:	000003a1 	.word	0x000003a1
    5b28:	00005735 	.word	0x00005735
    5b2c:	0000f361 	.word	0x0000f361
    5b30:	0001bbed 	.word	0x0001bbed
    5b34:	0001afd5 	.word	0x0001afd5
    5b38:	e826d695 	.word	0xe826d695
    5b3c:	3e112e0b 	.word	0x3e112e0b
    5b40:	0001a14d 	.word	0x0001a14d
    5b44:	40240000 	.word	0x40240000
    5b48:	0001b4d5 	.word	0x0001b4d5
    5b4c:	3ff00000 	.word	0x3ff00000
    5b50:	0001a76d 	.word	0x0001a76d
    5b54:	0001bb01 	.word	0x0001bb01
    5b58:	40080000 	.word	0x40080000
    5b5c:	00019cd9 	.word	0x00019cd9
		} else {
			tmp_baud_hs = (int32_t)(div_ceil(fgclk, 2 * fscl_hs)) - 1;
    5b60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5b62:	005a      	lsls	r2, r3, #1
    5b64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    5b66:	18d3      	adds	r3, r2, r3
    5b68:	1e5a      	subs	r2, r3, #1
    5b6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5b6c:	0059      	lsls	r1, r3, #1
    5b6e:	4b1d      	ldr	r3, [pc, #116]	; (5be4 <_i2c_master_set_config+0x40c>)
    5b70:	0010      	movs	r0, r2
    5b72:	4798      	blx	r3
    5b74:	0003      	movs	r3, r0
    5b76:	3b01      	subs	r3, #1
    5b78:	653b      	str	r3, [r7, #80]	; 0x50
		}
	}

	/* Check that baudrate is supported at current speed. */
	if (tmp_baud > 255 || tmp_baud < 0 || tmp_baud_hs > 255 || tmp_baud_hs < 0) {
    5b7a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    5b7c:	2bff      	cmp	r3, #255	; 0xff
    5b7e:	dc08      	bgt.n	5b92 <_i2c_master_set_config+0x3ba>
    5b80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    5b82:	2b00      	cmp	r3, #0
    5b84:	db05      	blt.n	5b92 <_i2c_master_set_config+0x3ba>
    5b86:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    5b88:	2bff      	cmp	r3, #255	; 0xff
    5b8a:	dc02      	bgt.n	5b92 <_i2c_master_set_config+0x3ba>
    5b8c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    5b8e:	2b00      	cmp	r3, #0
    5b90:	da06      	bge.n	5ba0 <_i2c_master_set_config+0x3c8>
		/* Baud rate not supported. */
		tmp_status_code = STATUS_ERR_BAUDRATE_UNAVAILABLE;
    5b92:	233b      	movs	r3, #59	; 0x3b
    5b94:	2210      	movs	r2, #16
    5b96:	4694      	mov	ip, r2
    5b98:	44bc      	add	ip, r7
    5b9a:	4463      	add	r3, ip
    5b9c:	2240      	movs	r2, #64	; 0x40
    5b9e:	701a      	strb	r2, [r3, #0]
	}
	if (tmp_status_code != STATUS_ERR_BAUDRATE_UNAVAILABLE) {
    5ba0:	233b      	movs	r3, #59	; 0x3b
    5ba2:	2210      	movs	r2, #16
    5ba4:	4694      	mov	ip, r2
    5ba6:	44bc      	add	ip, r7
    5ba8:	4463      	add	r3, ip
    5baa:	781b      	ldrb	r3, [r3, #0]
    5bac:	2b40      	cmp	r3, #64	; 0x40
    5bae:	d00e      	beq.n	5bce <_i2c_master_set_config+0x3f6>
		/* Baud rate acceptable. */
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
    5bb0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    5bb2:	22ff      	movs	r2, #255	; 0xff
    5bb4:	401a      	ands	r2, r3
			SERCOM_I2CM_BAUD_HSBAUD(tmp_baud_hs) | SERCOM_I2CM_BAUD_HSBAUDLOW(tmp_baudlow_hs);
    5bb6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    5bb8:	041b      	lsls	r3, r3, #16
    5bba:	0019      	movs	r1, r3
    5bbc:	23ff      	movs	r3, #255	; 0xff
    5bbe:	041b      	lsls	r3, r3, #16
    5bc0:	400b      	ands	r3, r1
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
    5bc2:	4313      	orrs	r3, r2
			SERCOM_I2CM_BAUD_HSBAUD(tmp_baud_hs) | SERCOM_I2CM_BAUD_HSBAUDLOW(tmp_baudlow_hs);
    5bc4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
    5bc6:	0612      	lsls	r2, r2, #24
    5bc8:	431a      	orrs	r2, r3
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
    5bca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    5bcc:	60da      	str	r2, [r3, #12]
	}

	return tmp_status_code;
    5bce:	233b      	movs	r3, #59	; 0x3b
    5bd0:	2210      	movs	r2, #16
    5bd2:	4694      	mov	ip, r2
    5bd4:	44bc      	add	ip, r7
    5bd6:	4463      	add	r3, ip
    5bd8:	781b      	ldrb	r3, [r3, #0]
}
    5bda:	0018      	movs	r0, r3
    5bdc:	46bd      	mov	sp, r7
    5bde:	b017      	add	sp, #92	; 0x5c
    5be0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5be2:	46c0      	nop			; (mov r8, r8)
    5be4:	00019cd9 	.word	0x00019cd9

00005be8 <i2c_master_init>:
 */
enum status_code i2c_master_init(
		struct i2c_master_module *const module,
		Sercom *const hw,
		const struct i2c_master_config *const config)
{
    5be8:	b580      	push	{r7, lr}
    5bea:	b08a      	sub	sp, #40	; 0x28
    5bec:	af00      	add	r7, sp, #0
    5bee:	60f8      	str	r0, [r7, #12]
    5bf0:	60b9      	str	r1, [r7, #8]
    5bf2:	607a      	str	r2, [r7, #4]
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize software module */
	module->hw = hw;
    5bf4:	68fb      	ldr	r3, [r7, #12]
    5bf6:	68ba      	ldr	r2, [r7, #8]
    5bf8:	601a      	str	r2, [r3, #0]

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    5bfa:	68fb      	ldr	r3, [r7, #12]
    5bfc:	681b      	ldr	r3, [r3, #0]
    5bfe:	627b      	str	r3, [r7, #36]	; 0x24

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    5c00:	68fb      	ldr	r3, [r7, #12]
    5c02:	681b      	ldr	r3, [r3, #0]
    5c04:	0018      	movs	r0, r3
    5c06:	4b25      	ldr	r3, [pc, #148]	; (5c9c <i2c_master_init+0xb4>)
    5c08:	4798      	blx	r3
    5c0a:	0003      	movs	r3, r0
    5c0c:	623b      	str	r3, [r7, #32]
		gclk_index   = SERCOM5_GCLK_ID_CORE;
	} else {
		gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
	}
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    5c0e:	6a3b      	ldr	r3, [r7, #32]
    5c10:	3302      	adds	r3, #2
    5c12:	61fb      	str	r3, [r7, #28]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    5c14:	6a3b      	ldr	r3, [r7, #32]
    5c16:	3314      	adds	r3, #20
    5c18:	61bb      	str	r3, [r7, #24]
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    5c1a:	2201      	movs	r2, #1
    5c1c:	69fb      	ldr	r3, [r7, #28]
    5c1e:	409a      	lsls	r2, r3
    5c20:	0013      	movs	r3, r2
    5c22:	0019      	movs	r1, r3
    5c24:	2002      	movs	r0, #2
    5c26:	4b1e      	ldr	r3, [pc, #120]	; (5ca0 <i2c_master_init+0xb8>)
    5c28:	4798      	blx	r3
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
    5c2a:	2314      	movs	r3, #20
    5c2c:	18fb      	adds	r3, r7, r3
    5c2e:	0018      	movs	r0, r3
    5c30:	4b1c      	ldr	r3, [pc, #112]	; (5ca4 <i2c_master_init+0xbc>)
    5c32:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->generator_source;
    5c34:	687b      	ldr	r3, [r7, #4]
    5c36:	7b1a      	ldrb	r2, [r3, #12]
    5c38:	2314      	movs	r3, #20
    5c3a:	18fb      	adds	r3, r7, r3
    5c3c:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    5c3e:	69bb      	ldr	r3, [r7, #24]
    5c40:	b2db      	uxtb	r3, r3
    5c42:	2214      	movs	r2, #20
    5c44:	18ba      	adds	r2, r7, r2
    5c46:	0011      	movs	r1, r2
    5c48:	0018      	movs	r0, r3
    5c4a:	4b17      	ldr	r3, [pc, #92]	; (5ca8 <i2c_master_init+0xc0>)
    5c4c:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    5c4e:	69bb      	ldr	r3, [r7, #24]
    5c50:	b2db      	uxtb	r3, r3
    5c52:	0018      	movs	r0, r3
    5c54:	4b15      	ldr	r3, [pc, #84]	; (5cac <i2c_master_init+0xc4>)
    5c56:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    5c58:	687b      	ldr	r3, [r7, #4]
    5c5a:	7b1b      	ldrb	r3, [r3, #12]
    5c5c:	2100      	movs	r1, #0
    5c5e:	0018      	movs	r0, r3
    5c60:	4b13      	ldr	r3, [pc, #76]	; (5cb0 <i2c_master_init+0xc8>)
    5c62:	4798      	blx	r3

	/* Check if module is enabled. */
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_ENABLE) {
    5c64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5c66:	681b      	ldr	r3, [r3, #0]
    5c68:	2202      	movs	r2, #2
    5c6a:	4013      	ands	r3, r2
    5c6c:	d001      	beq.n	5c72 <i2c_master_init+0x8a>
		return STATUS_ERR_DENIED;
    5c6e:	231c      	movs	r3, #28
    5c70:	e010      	b.n	5c94 <i2c_master_init+0xac>
	}

	/* Check if reset is in progress. */
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_SWRST) {
    5c72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5c74:	681b      	ldr	r3, [r3, #0]
    5c76:	2201      	movs	r2, #1
    5c78:	4013      	ands	r3, r2
    5c7a:	d001      	beq.n	5c80 <i2c_master_init+0x98>
		return STATUS_BUSY;
    5c7c:	2305      	movs	r3, #5
    5c7e:	e009      	b.n	5c94 <i2c_master_init+0xac>
	module->status = STATUS_OK;
	module->buffer = NULL;
#endif

	/* Set sercom module to operate in I2C master mode. */
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_MODE(0x5);
    5c80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5c82:	2214      	movs	r2, #20
    5c84:	601a      	str	r2, [r3, #0]

	/* Set config and return status. */
	return _i2c_master_set_config(module, config);
    5c86:	687a      	ldr	r2, [r7, #4]
    5c88:	68fb      	ldr	r3, [r7, #12]
    5c8a:	0011      	movs	r1, r2
    5c8c:	0018      	movs	r0, r3
    5c8e:	4b09      	ldr	r3, [pc, #36]	; (5cb4 <i2c_master_init+0xcc>)
    5c90:	4798      	blx	r3
    5c92:	0003      	movs	r3, r0
}
    5c94:	0018      	movs	r0, r3
    5c96:	46bd      	mov	sp, r7
    5c98:	b00a      	add	sp, #40	; 0x28
    5c9a:	bd80      	pop	{r7, pc}
    5c9c:	0000cdd5 	.word	0x0000cdd5
    5ca0:	000056b1 	.word	0x000056b1
    5ca4:	00005699 	.word	0x00005699
    5ca8:	0000f23d 	.word	0x0000f23d
    5cac:	0000f281 	.word	0x0000f281
    5cb0:	0000cb8d 	.word	0x0000cb8d
    5cb4:	000057d9 	.word	0x000057d9

00005cb8 <i2c_master_reset>:
 * Reset the module to hardware defaults.
 *
 * \param[in,out] module Pointer to software module structure
 */
void i2c_master_reset(struct i2c_master_module *const module)
{
    5cb8:	b580      	push	{r7, lr}
    5cba:	b084      	sub	sp, #16
    5cbc:	af00      	add	r7, sp, #0
    5cbe:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    5cc0:	687b      	ldr	r3, [r7, #4]
    5cc2:	681b      	ldr	r3, [r3, #0]
    5cc4:	60fb      	str	r3, [r7, #12]

	/* Wait for sync */
	_i2c_master_wait_for_sync(module);
    5cc6:	687b      	ldr	r3, [r7, #4]
    5cc8:	0018      	movs	r0, r3
    5cca:	4b08      	ldr	r3, [pc, #32]	; (5cec <i2c_master_reset+0x34>)
    5ccc:	4798      	blx	r3

	/* Disable module */
	i2c_master_disable(module);
    5cce:	687b      	ldr	r3, [r7, #4]
    5cd0:	0018      	movs	r0, r3
    5cd2:	4b07      	ldr	r3, [pc, #28]	; (5cf0 <i2c_master_reset+0x38>)
    5cd4:	4798      	blx	r3
	system_interrupt_clear_pending(_sercom_get_interrupt_vector(module->hw));
	system_interrupt_leave_critical_section();
#endif

	/* Wait for sync */
	_i2c_master_wait_for_sync(module);
    5cd6:	687b      	ldr	r3, [r7, #4]
    5cd8:	0018      	movs	r0, r3
    5cda:	4b04      	ldr	r3, [pc, #16]	; (5cec <i2c_master_reset+0x34>)
    5cdc:	4798      	blx	r3

	/* Reset module */
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_SWRST;
    5cde:	68fb      	ldr	r3, [r7, #12]
    5ce0:	2201      	movs	r2, #1
    5ce2:	601a      	str	r2, [r3, #0]
}
    5ce4:	46c0      	nop			; (mov r8, r8)
    5ce6:	46bd      	mov	sp, r7
    5ce8:	b004      	add	sp, #16
    5cea:	bd80      	pop	{r7, pc}
    5cec:	00005779 	.word	0x00005779
    5cf0:	0000579d 	.word	0x0000579d

00005cf4 <_i2c_master_address_response>:
 * \retval STATUS_ERR_BAD_ADDRESS       If slave is busy, or no slave
 *                                      acknowledged the address
 */
enum status_code _i2c_master_address_response(
		struct i2c_master_module *const module)
{
    5cf4:	b580      	push	{r7, lr}
    5cf6:	b084      	sub	sp, #16
    5cf8:	af00      	add	r7, sp, #0
    5cfa:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    5cfc:	687b      	ldr	r3, [r7, #4]
    5cfe:	681b      	ldr	r3, [r3, #0]
    5d00:	60fb      	str	r3, [r7, #12]

	/* Check for error and ignore bus-error; workaround for BUSSTATE stuck in
	 * BUSY */
	if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) {
    5d02:	68fb      	ldr	r3, [r7, #12]
    5d04:	7e1b      	ldrb	r3, [r3, #24]
    5d06:	b2db      	uxtb	r3, r3
    5d08:	001a      	movs	r2, r3
    5d0a:	2302      	movs	r3, #2
    5d0c:	4013      	ands	r3, r2
    5d0e:	d00b      	beq.n	5d28 <_i2c_master_address_response+0x34>

		/* Clear write interrupt flag */
		i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    5d10:	68fb      	ldr	r3, [r7, #12]
    5d12:	2202      	movs	r2, #2
    5d14:	761a      	strb	r2, [r3, #24]

		/* Check arbitration. */
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
    5d16:	68fb      	ldr	r3, [r7, #12]
    5d18:	8b5b      	ldrh	r3, [r3, #26]
    5d1a:	b29b      	uxth	r3, r3
    5d1c:	001a      	movs	r2, r3
    5d1e:	2302      	movs	r3, #2
    5d20:	4013      	ands	r3, r2
    5d22:	d011      	beq.n	5d48 <_i2c_master_address_response+0x54>
			/* Return packet collision. */
			return STATUS_ERR_PACKET_COLLISION;
    5d24:	2341      	movs	r3, #65	; 0x41
    5d26:	e010      	b.n	5d4a <_i2c_master_address_response+0x56>
		}
	/* Check that slave responded with ack. */
	} else if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
    5d28:	68fb      	ldr	r3, [r7, #12]
    5d2a:	8b5b      	ldrh	r3, [r3, #26]
    5d2c:	b29b      	uxth	r3, r3
    5d2e:	001a      	movs	r2, r3
    5d30:	2304      	movs	r3, #4
    5d32:	4013      	ands	r3, r2
    5d34:	d008      	beq.n	5d48 <_i2c_master_address_response+0x54>
		/* Slave busy. Issue ack and stop command. */
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    5d36:	68fb      	ldr	r3, [r7, #12]
    5d38:	685b      	ldr	r3, [r3, #4]
    5d3a:	22c0      	movs	r2, #192	; 0xc0
    5d3c:	0292      	lsls	r2, r2, #10
    5d3e:	431a      	orrs	r2, r3
    5d40:	68fb      	ldr	r3, [r7, #12]
    5d42:	605a      	str	r2, [r3, #4]

		/* Return bad address value. */
		return STATUS_ERR_BAD_ADDRESS;
    5d44:	2318      	movs	r3, #24
    5d46:	e000      	b.n	5d4a <_i2c_master_address_response+0x56>
	}

	return STATUS_OK;
    5d48:	2300      	movs	r3, #0
}
    5d4a:	0018      	movs	r0, r3
    5d4c:	46bd      	mov	sp, r7
    5d4e:	b004      	add	sp, #16
    5d50:	bd80      	pop	{r7, pc}

00005d52 <_i2c_master_wait_for_bus>:
 * \retval STATUS_ERR_TIMEOUT  If no response was given within specified timeout
 *                             period
 */
enum status_code _i2c_master_wait_for_bus(
		struct i2c_master_module *const module)
{
    5d52:	b580      	push	{r7, lr}
    5d54:	b084      	sub	sp, #16
    5d56:	af00      	add	r7, sp, #0
    5d58:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    5d5a:	687b      	ldr	r3, [r7, #4]
    5d5c:	681b      	ldr	r3, [r3, #0]
    5d5e:	60bb      	str	r3, [r7, #8]

	/* Wait for reply. */
	uint16_t timeout_counter = 0;
    5d60:	230e      	movs	r3, #14
    5d62:	18fb      	adds	r3, r7, r3
    5d64:	2200      	movs	r2, #0
    5d66:	801a      	strh	r2, [r3, #0]
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
    5d68:	e00f      	b.n	5d8a <_i2c_master_wait_for_bus+0x38>
			!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB)) {

		/* Check timeout condition. */
		if (++timeout_counter >= module->buffer_timeout) {
    5d6a:	230e      	movs	r3, #14
    5d6c:	18fb      	adds	r3, r7, r3
    5d6e:	220e      	movs	r2, #14
    5d70:	18ba      	adds	r2, r7, r2
    5d72:	8812      	ldrh	r2, [r2, #0]
    5d74:	3201      	adds	r2, #1
    5d76:	801a      	strh	r2, [r3, #0]
    5d78:	687b      	ldr	r3, [r7, #4]
    5d7a:	891b      	ldrh	r3, [r3, #8]
    5d7c:	220e      	movs	r2, #14
    5d7e:	18ba      	adds	r2, r7, r2
    5d80:	8812      	ldrh	r2, [r2, #0]
    5d82:	429a      	cmp	r2, r3
    5d84:	d301      	bcc.n	5d8a <_i2c_master_wait_for_bus+0x38>
			return STATUS_ERR_TIMEOUT;
    5d86:	2312      	movs	r3, #18
    5d88:	e00e      	b.n	5da8 <_i2c_master_wait_for_bus+0x56>
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
    5d8a:	68bb      	ldr	r3, [r7, #8]
    5d8c:	7e1b      	ldrb	r3, [r3, #24]
    5d8e:	b2db      	uxtb	r3, r3
    5d90:	001a      	movs	r2, r3
    5d92:	2301      	movs	r3, #1
    5d94:	4013      	ands	r3, r2
    5d96:	d106      	bne.n	5da6 <_i2c_master_wait_for_bus+0x54>
			!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB)) {
    5d98:	68bb      	ldr	r3, [r7, #8]
    5d9a:	7e1b      	ldrb	r3, [r3, #24]
    5d9c:	b2db      	uxtb	r3, r3
    5d9e:	001a      	movs	r2, r3
    5da0:	2302      	movs	r3, #2
    5da2:	4013      	ands	r3, r2
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
    5da4:	d0e1      	beq.n	5d6a <_i2c_master_wait_for_bus+0x18>
		}
	}
	return STATUS_OK;
    5da6:	2300      	movs	r3, #0
}
    5da8:	0018      	movs	r0, r3
    5daa:	46bd      	mov	sp, r7
    5dac:	b004      	add	sp, #16
    5dae:	bd80      	pop	{r7, pc}

00005db0 <_i2c_master_send_hs_master_code>:
 * \retval STATUS_OK           No error happen
 */
enum status_code _i2c_master_send_hs_master_code(
		struct i2c_master_module *const module,
		uint8_t hs_master_code)
{
    5db0:	b590      	push	{r4, r7, lr}
    5db2:	b085      	sub	sp, #20
    5db4:	af00      	add	r7, sp, #0
    5db6:	6078      	str	r0, [r7, #4]
    5db8:	000a      	movs	r2, r1
    5dba:	1cfb      	adds	r3, r7, #3
    5dbc:	701a      	strb	r2, [r3, #0]
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    5dbe:	687b      	ldr	r3, [r7, #4]
    5dc0:	681b      	ldr	r3, [r3, #0]
    5dc2:	60fb      	str	r3, [r7, #12]
	/* Return value. */
	enum status_code tmp_status;

	/* Set NACK for high speed code */
	i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    5dc4:	68fb      	ldr	r3, [r7, #12]
    5dc6:	685b      	ldr	r3, [r3, #4]
    5dc8:	2280      	movs	r2, #128	; 0x80
    5dca:	02d2      	lsls	r2, r2, #11
    5dcc:	431a      	orrs	r2, r3
    5dce:	68fb      	ldr	r3, [r7, #12]
    5dd0:	605a      	str	r2, [r3, #4]
	/* Send high speed code */
	i2c_module->ADDR.reg = hs_master_code;
    5dd2:	1cfb      	adds	r3, r7, #3
    5dd4:	781a      	ldrb	r2, [r3, #0]
    5dd6:	68fb      	ldr	r3, [r7, #12]
    5dd8:	625a      	str	r2, [r3, #36]	; 0x24
	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
    5dda:	230b      	movs	r3, #11
    5ddc:	18fc      	adds	r4, r7, r3
    5dde:	687b      	ldr	r3, [r7, #4]
    5de0:	0018      	movs	r0, r3
    5de2:	4b07      	ldr	r3, [pc, #28]	; (5e00 <_i2c_master_send_hs_master_code+0x50>)
    5de4:	4798      	blx	r3
    5de6:	0003      	movs	r3, r0
    5de8:	7023      	strb	r3, [r4, #0]
	/* Clear write interrupt flag */
	i2c_module->INTFLAG.reg = SERCOM_I2CM_INTENCLR_MB;
    5dea:	68fb      	ldr	r3, [r7, #12]
    5dec:	2201      	movs	r2, #1
    5dee:	761a      	strb	r2, [r3, #24]

	return tmp_status;
    5df0:	230b      	movs	r3, #11
    5df2:	18fb      	adds	r3, r7, r3
    5df4:	781b      	ldrb	r3, [r3, #0]
}
    5df6:	0018      	movs	r0, r3
    5df8:	46bd      	mov	sp, r7
    5dfa:	b005      	add	sp, #20
    5dfc:	bd90      	pop	{r4, r7, pc}
    5dfe:	46c0      	nop			; (mov r8, r8)
    5e00:	00005d53 	.word	0x00005d53

00005e04 <_i2c_master_read_packet>:
 *
 */
static enum status_code _i2c_master_read_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
    5e04:	b590      	push	{r4, r7, lr}
    5e06:	b087      	sub	sp, #28
    5e08:	af00      	add	r7, sp, #0
    5e0a:	6078      	str	r0, [r7, #4]
    5e0c:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    5e0e:	687b      	ldr	r3, [r7, #4]
    5e10:	681b      	ldr	r3, [r3, #0]
    5e12:	60fb      	str	r3, [r7, #12]

	/* Return value. */
	enum status_code tmp_status;
	uint16_t tmp_data_length = packet->data_length;
    5e14:	2314      	movs	r3, #20
    5e16:	18fb      	adds	r3, r7, r3
    5e18:	683a      	ldr	r2, [r7, #0]
    5e1a:	8852      	ldrh	r2, [r2, #2]
    5e1c:	801a      	strh	r2, [r3, #0]

	/* Written buffer counter. */
	uint16_t counter = 0;
    5e1e:	2312      	movs	r3, #18
    5e20:	18fb      	adds	r3, r7, r3
    5e22:	2200      	movs	r2, #0
    5e24:	801a      	strh	r2, [r3, #0]

	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
    5e26:	68fb      	ldr	r3, [r7, #12]
    5e28:	681b      	ldr	r3, [r3, #0]
    5e2a:	011b      	lsls	r3, r3, #4
    5e2c:	0fdb      	lsrs	r3, r3, #31
    5e2e:	b2db      	uxtb	r3, r3
    5e30:	001a      	movs	r2, r3
    5e32:	230b      	movs	r3, #11
    5e34:	18fb      	adds	r3, r7, r3
    5e36:	1e51      	subs	r1, r2, #1
    5e38:	418a      	sbcs	r2, r1
    5e3a:	701a      	strb	r2, [r3, #0]

	/* Switch to high speed mode */
	if (packet->high_speed) {
    5e3c:	683b      	ldr	r3, [r7, #0]
    5e3e:	7a5b      	ldrb	r3, [r3, #9]
    5e40:	2b00      	cmp	r3, #0
    5e42:	d006      	beq.n	5e52 <_i2c_master_read_packet+0x4e>
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
    5e44:	683b      	ldr	r3, [r7, #0]
    5e46:	7a9a      	ldrb	r2, [r3, #10]
    5e48:	687b      	ldr	r3, [r7, #4]
    5e4a:	0011      	movs	r1, r2
    5e4c:	0018      	movs	r0, r3
    5e4e:	4b85      	ldr	r3, [pc, #532]	; (6064 <_i2c_master_read_packet+0x260>)
    5e50:	4798      	blx	r3
	}

	/* Set action to ACK. */
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    5e52:	68fb      	ldr	r3, [r7, #12]
    5e54:	685b      	ldr	r3, [r3, #4]
    5e56:	4a84      	ldr	r2, [pc, #528]	; (6068 <_i2c_master_read_packet+0x264>)
    5e58:	401a      	ands	r2, r3
    5e5a:	68fb      	ldr	r3, [r7, #12]
    5e5c:	605a      	str	r2, [r3, #4]

	/* Set address and direction bit. Will send start command on bus. */
	if (packet->ten_bit_address) {
    5e5e:	683b      	ldr	r3, [r7, #0]
    5e60:	7a1b      	ldrb	r3, [r3, #8]
    5e62:	2b00      	cmp	r3, #0
    5e64:	d042      	beq.n	5eec <_i2c_master_read_packet+0xe8>
		/*
		 * Write ADDR.ADDR[10:1] with the 10-bit address. ADDR.TENBITEN must
		 * be set and read/write bit (ADDR.ADDR[0]) equal to 0.
		 */
		i2c_module->ADDR.reg = (packet->address << 1) |
    5e66:	683b      	ldr	r3, [r7, #0]
    5e68:	881b      	ldrh	r3, [r3, #0]
    5e6a:	005a      	lsls	r2, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    5e6c:	683b      	ldr	r3, [r7, #0]
    5e6e:	7a5b      	ldrb	r3, [r3, #9]
    5e70:	039b      	lsls	r3, r3, #14
		i2c_module->ADDR.reg = (packet->address << 1) |
    5e72:	4313      	orrs	r3, r2
    5e74:	001a      	movs	r2, r3
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    5e76:	2380      	movs	r3, #128	; 0x80
    5e78:	021b      	lsls	r3, r3, #8
    5e7a:	431a      	orrs	r2, r3
		i2c_module->ADDR.reg = (packet->address << 1) |
    5e7c:	68fb      	ldr	r3, [r7, #12]
    5e7e:	625a      	str	r2, [r3, #36]	; 0x24
			SERCOM_I2CM_ADDR_TENBITEN;

		/* Wait for response on bus. */
		tmp_status = _i2c_master_wait_for_bus(module);
    5e80:	2317      	movs	r3, #23
    5e82:	18fc      	adds	r4, r7, r3
    5e84:	687b      	ldr	r3, [r7, #4]
    5e86:	0018      	movs	r0, r3
    5e88:	4b78      	ldr	r3, [pc, #480]	; (606c <_i2c_master_read_packet+0x268>)
    5e8a:	4798      	blx	r3
    5e8c:	0003      	movs	r3, r0
    5e8e:	7023      	strb	r3, [r4, #0]

		/* Set action to ack. */
		i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    5e90:	68fb      	ldr	r3, [r7, #12]
    5e92:	685b      	ldr	r3, [r3, #4]
    5e94:	4a74      	ldr	r2, [pc, #464]	; (6068 <_i2c_master_read_packet+0x264>)
    5e96:	401a      	ands	r2, r3
    5e98:	68fb      	ldr	r3, [r7, #12]
    5e9a:	605a      	str	r2, [r3, #4]

		/* Check for address response error unless previous error is
		 * detected. */
		if (tmp_status == STATUS_OK) {
    5e9c:	2317      	movs	r3, #23
    5e9e:	18fb      	adds	r3, r7, r3
    5ea0:	781b      	ldrb	r3, [r3, #0]
    5ea2:	2b00      	cmp	r3, #0
    5ea4:	d107      	bne.n	5eb6 <_i2c_master_read_packet+0xb2>
			tmp_status = _i2c_master_address_response(module);
    5ea6:	2317      	movs	r3, #23
    5ea8:	18fc      	adds	r4, r7, r3
    5eaa:	687b      	ldr	r3, [r7, #4]
    5eac:	0018      	movs	r0, r3
    5eae:	4b70      	ldr	r3, [pc, #448]	; (6070 <_i2c_master_read_packet+0x26c>)
    5eb0:	4798      	blx	r3
    5eb2:	0003      	movs	r3, r0
    5eb4:	7023      	strb	r3, [r4, #0]
		}

		if (tmp_status == STATUS_OK) {
    5eb6:	2317      	movs	r3, #23
    5eb8:	18fb      	adds	r3, r7, r3
    5eba:	781b      	ldrb	r3, [r3, #0]
    5ebc:	2b00      	cmp	r3, #0
    5ebe:	d111      	bne.n	5ee4 <_i2c_master_read_packet+0xe0>
			/*
			 * Write ADDR[7:0] register to "11110 address[9:8] 1"
			 * ADDR.TENBITEN must be cleared
			 */
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
    5ec0:	683b      	ldr	r3, [r7, #0]
    5ec2:	881b      	ldrh	r3, [r3, #0]
    5ec4:	0a1b      	lsrs	r3, r3, #8
    5ec6:	b29b      	uxth	r3, r3
    5ec8:	2278      	movs	r2, #120	; 0x78
    5eca:	4313      	orrs	r3, r2
    5ecc:	b29b      	uxth	r3, r3
    5ece:	005a      	lsls	r2, r3, #1
				(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    5ed0:	683b      	ldr	r3, [r7, #0]
    5ed2:	7a5b      	ldrb	r3, [r3, #9]
    5ed4:	039b      	lsls	r3, r3, #14
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
    5ed6:	4313      	orrs	r3, r2
				(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    5ed8:	2201      	movs	r2, #1
    5eda:	4313      	orrs	r3, r2
    5edc:	001a      	movs	r2, r3
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
    5ede:	68fb      	ldr	r3, [r7, #12]
    5ee0:	625a      	str	r2, [r3, #36]	; 0x24
    5ee2:	e00f      	b.n	5f04 <_i2c_master_read_packet+0x100>
				I2C_TRANSFER_READ;
		} else {
			return tmp_status;
    5ee4:	2317      	movs	r3, #23
    5ee6:	18fb      	adds	r3, r7, r3
    5ee8:	781b      	ldrb	r3, [r3, #0]
    5eea:	e0b6      	b.n	605a <_i2c_master_read_packet+0x256>
		}
	} else {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_READ |
    5eec:	683b      	ldr	r3, [r7, #0]
    5eee:	881b      	ldrh	r3, [r3, #0]
    5ef0:	005b      	lsls	r3, r3, #1
    5ef2:	2201      	movs	r2, #1
    5ef4:	431a      	orrs	r2, r3
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
    5ef6:	683b      	ldr	r3, [r7, #0]
    5ef8:	7a5b      	ldrb	r3, [r3, #9]
    5efa:	039b      	lsls	r3, r3, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_READ |
    5efc:	4313      	orrs	r3, r2
    5efe:	001a      	movs	r2, r3
    5f00:	68fb      	ldr	r3, [r7, #12]
    5f02:	625a      	str	r2, [r3, #36]	; 0x24
	}

	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
    5f04:	2317      	movs	r3, #23
    5f06:	18fc      	adds	r4, r7, r3
    5f08:	687b      	ldr	r3, [r7, #4]
    5f0a:	0018      	movs	r0, r3
    5f0c:	4b57      	ldr	r3, [pc, #348]	; (606c <_i2c_master_read_packet+0x268>)
    5f0e:	4798      	blx	r3
    5f10:	0003      	movs	r3, r0
    5f12:	7023      	strb	r3, [r4, #0]

	/* Set action to ack or nack. */
	if ((sclsm_flag) && (packet->data_length == 1)) {
    5f14:	230b      	movs	r3, #11
    5f16:	18fb      	adds	r3, r7, r3
    5f18:	781b      	ldrb	r3, [r3, #0]
    5f1a:	2b00      	cmp	r3, #0
    5f1c:	d00b      	beq.n	5f36 <_i2c_master_read_packet+0x132>
    5f1e:	683b      	ldr	r3, [r7, #0]
    5f20:	885b      	ldrh	r3, [r3, #2]
    5f22:	2b01      	cmp	r3, #1
    5f24:	d107      	bne.n	5f36 <_i2c_master_read_packet+0x132>
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    5f26:	68fb      	ldr	r3, [r7, #12]
    5f28:	685b      	ldr	r3, [r3, #4]
    5f2a:	2280      	movs	r2, #128	; 0x80
    5f2c:	02d2      	lsls	r2, r2, #11
    5f2e:	431a      	orrs	r2, r3
    5f30:	68fb      	ldr	r3, [r7, #12]
    5f32:	605a      	str	r2, [r3, #4]
    5f34:	e005      	b.n	5f42 <_i2c_master_read_packet+0x13e>
	} else {
		i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;	
    5f36:	68fb      	ldr	r3, [r7, #12]
    5f38:	685b      	ldr	r3, [r3, #4]
    5f3a:	4a4b      	ldr	r2, [pc, #300]	; (6068 <_i2c_master_read_packet+0x264>)
    5f3c:	401a      	ands	r2, r3
    5f3e:	68fb      	ldr	r3, [r7, #12]
    5f40:	605a      	str	r2, [r3, #4]
	}

	/* Check for address response error unless previous error is
	 * detected. */
	if (tmp_status == STATUS_OK) {
    5f42:	2317      	movs	r3, #23
    5f44:	18fb      	adds	r3, r7, r3
    5f46:	781b      	ldrb	r3, [r3, #0]
    5f48:	2b00      	cmp	r3, #0
    5f4a:	d107      	bne.n	5f5c <_i2c_master_read_packet+0x158>
		tmp_status = _i2c_master_address_response(module);
    5f4c:	2317      	movs	r3, #23
    5f4e:	18fc      	adds	r4, r7, r3
    5f50:	687b      	ldr	r3, [r7, #4]
    5f52:	0018      	movs	r0, r3
    5f54:	4b46      	ldr	r3, [pc, #280]	; (6070 <_i2c_master_read_packet+0x26c>)
    5f56:	4798      	blx	r3
    5f58:	0003      	movs	r3, r0
    5f5a:	7023      	strb	r3, [r4, #0]
	}

	/* Check that no error has occurred. */
	if (tmp_status == STATUS_OK) {
    5f5c:	2317      	movs	r3, #23
    5f5e:	18fb      	adds	r3, r7, r3
    5f60:	781b      	ldrb	r3, [r3, #0]
    5f62:	2b00      	cmp	r3, #0
    5f64:	d000      	beq.n	5f68 <_i2c_master_read_packet+0x164>
    5f66:	e075      	b.n	6054 <_i2c_master_read_packet+0x250>
		/* Read data buffer. */
		while (tmp_data_length--) {
    5f68:	e04b      	b.n	6002 <_i2c_master_read_packet+0x1fe>
			/* Check that bus ownership is not lost. */
			if (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) {
    5f6a:	68fb      	ldr	r3, [r7, #12]
    5f6c:	8b5b      	ldrh	r3, [r3, #26]
    5f6e:	b29b      	uxth	r3, r3
    5f70:	001a      	movs	r2, r3
    5f72:	2320      	movs	r3, #32
    5f74:	4013      	ands	r3, r2
    5f76:	d101      	bne.n	5f7c <_i2c_master_read_packet+0x178>
				return STATUS_ERR_PACKET_COLLISION;
    5f78:	2341      	movs	r3, #65	; 0x41
    5f7a:	e06e      	b.n	605a <_i2c_master_read_packet+0x256>
			}

			if (module->send_nack && (((!sclsm_flag) && (tmp_data_length == 0)) ||
    5f7c:	687b      	ldr	r3, [r7, #4]
    5f7e:	7adb      	ldrb	r3, [r3, #11]
    5f80:	2b00      	cmp	r3, #0
    5f82:	d01e      	beq.n	5fc2 <_i2c_master_read_packet+0x1be>
    5f84:	230b      	movs	r3, #11
    5f86:	18fb      	adds	r3, r7, r3
    5f88:	781b      	ldrb	r3, [r3, #0]
    5f8a:	2201      	movs	r2, #1
    5f8c:	4053      	eors	r3, r2
    5f8e:	b2db      	uxtb	r3, r3
    5f90:	2b00      	cmp	r3, #0
    5f92:	d004      	beq.n	5f9e <_i2c_master_read_packet+0x19a>
    5f94:	2314      	movs	r3, #20
    5f96:	18fb      	adds	r3, r7, r3
    5f98:	881b      	ldrh	r3, [r3, #0]
    5f9a:	2b00      	cmp	r3, #0
    5f9c:	d009      	beq.n	5fb2 <_i2c_master_read_packet+0x1ae>
    5f9e:	230b      	movs	r3, #11
    5fa0:	18fb      	adds	r3, r7, r3
    5fa2:	781b      	ldrb	r3, [r3, #0]
    5fa4:	2b00      	cmp	r3, #0
    5fa6:	d00c      	beq.n	5fc2 <_i2c_master_read_packet+0x1be>
					((sclsm_flag) && (tmp_data_length == 1)))) {
    5fa8:	2314      	movs	r3, #20
    5faa:	18fb      	adds	r3, r7, r3
    5fac:	881b      	ldrh	r3, [r3, #0]
    5fae:	2b01      	cmp	r3, #1
    5fb0:	d107      	bne.n	5fc2 <_i2c_master_read_packet+0x1be>
				/* Set action to NACK */
				i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    5fb2:	68fb      	ldr	r3, [r7, #12]
    5fb4:	685b      	ldr	r3, [r3, #4]
    5fb6:	2280      	movs	r2, #128	; 0x80
    5fb8:	02d2      	lsls	r2, r2, #11
    5fba:	431a      	orrs	r2, r3
    5fbc:	68fb      	ldr	r3, [r7, #12]
    5fbe:	605a      	str	r2, [r3, #4]
    5fc0:	e01a      	b.n	5ff8 <_i2c_master_read_packet+0x1f4>
			} else {
				/* Save data to buffer. */
				_i2c_master_wait_for_sync(module);
    5fc2:	687b      	ldr	r3, [r7, #4]
    5fc4:	0018      	movs	r0, r3
    5fc6:	4b2b      	ldr	r3, [pc, #172]	; (6074 <_i2c_master_read_packet+0x270>)
    5fc8:	4798      	blx	r3
				packet->data[counter++] = i2c_module->DATA.reg;
    5fca:	683b      	ldr	r3, [r7, #0]
    5fcc:	685a      	ldr	r2, [r3, #4]
    5fce:	2312      	movs	r3, #18
    5fd0:	18fb      	adds	r3, r7, r3
    5fd2:	881b      	ldrh	r3, [r3, #0]
    5fd4:	2112      	movs	r1, #18
    5fd6:	1879      	adds	r1, r7, r1
    5fd8:	1c58      	adds	r0, r3, #1
    5fda:	8008      	strh	r0, [r1, #0]
    5fdc:	18d3      	adds	r3, r2, r3
    5fde:	68fa      	ldr	r2, [r7, #12]
    5fe0:	2128      	movs	r1, #40	; 0x28
    5fe2:	5c52      	ldrb	r2, [r2, r1]
    5fe4:	b2d2      	uxtb	r2, r2
    5fe6:	701a      	strb	r2, [r3, #0]
				/* Wait for response. */
				tmp_status = _i2c_master_wait_for_bus(module);
    5fe8:	2317      	movs	r3, #23
    5fea:	18fc      	adds	r4, r7, r3
    5fec:	687b      	ldr	r3, [r7, #4]
    5fee:	0018      	movs	r0, r3
    5ff0:	4b1e      	ldr	r3, [pc, #120]	; (606c <_i2c_master_read_packet+0x268>)
    5ff2:	4798      	blx	r3
    5ff4:	0003      	movs	r3, r0
    5ff6:	7023      	strb	r3, [r4, #0]
			}

			/* Check for error. */
			if (tmp_status != STATUS_OK) {
    5ff8:	2317      	movs	r3, #23
    5ffa:	18fb      	adds	r3, r7, r3
    5ffc:	781b      	ldrb	r3, [r3, #0]
    5ffe:	2b00      	cmp	r3, #0
    6000:	d109      	bne.n	6016 <_i2c_master_read_packet+0x212>
		while (tmp_data_length--) {
    6002:	2314      	movs	r3, #20
    6004:	18fb      	adds	r3, r7, r3
    6006:	881b      	ldrh	r3, [r3, #0]
    6008:	2214      	movs	r2, #20
    600a:	18ba      	adds	r2, r7, r2
    600c:	1e59      	subs	r1, r3, #1
    600e:	8011      	strh	r1, [r2, #0]
    6010:	2b00      	cmp	r3, #0
    6012:	d1aa      	bne.n	5f6a <_i2c_master_read_packet+0x166>
    6014:	e000      	b.n	6018 <_i2c_master_read_packet+0x214>
				break;
    6016:	46c0      	nop			; (mov r8, r8)
			}
		}

		if (module->send_stop) {
    6018:	687b      	ldr	r3, [r7, #4]
    601a:	7a9b      	ldrb	r3, [r3, #10]
    601c:	2b00      	cmp	r3, #0
    601e:	d00a      	beq.n	6036 <_i2c_master_read_packet+0x232>
			/* Send stop command unless arbitration is lost. */
			_i2c_master_wait_for_sync(module);
    6020:	687b      	ldr	r3, [r7, #4]
    6022:	0018      	movs	r0, r3
    6024:	4b13      	ldr	r3, [pc, #76]	; (6074 <_i2c_master_read_packet+0x270>)
    6026:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    6028:	68fb      	ldr	r3, [r7, #12]
    602a:	685b      	ldr	r3, [r3, #4]
    602c:	22c0      	movs	r2, #192	; 0xc0
    602e:	0292      	lsls	r2, r2, #10
    6030:	431a      	orrs	r2, r3
    6032:	68fb      	ldr	r3, [r7, #12]
    6034:	605a      	str	r2, [r3, #4]
		}

		/* Save last data to buffer. */
		_i2c_master_wait_for_sync(module);
    6036:	687b      	ldr	r3, [r7, #4]
    6038:	0018      	movs	r0, r3
    603a:	4b0e      	ldr	r3, [pc, #56]	; (6074 <_i2c_master_read_packet+0x270>)
    603c:	4798      	blx	r3
		packet->data[counter] = i2c_module->DATA.reg;
    603e:	683b      	ldr	r3, [r7, #0]
    6040:	685a      	ldr	r2, [r3, #4]
    6042:	2312      	movs	r3, #18
    6044:	18fb      	adds	r3, r7, r3
    6046:	881b      	ldrh	r3, [r3, #0]
    6048:	18d3      	adds	r3, r2, r3
    604a:	68fa      	ldr	r2, [r7, #12]
    604c:	2128      	movs	r1, #40	; 0x28
    604e:	5c52      	ldrb	r2, [r2, r1]
    6050:	b2d2      	uxtb	r2, r2
    6052:	701a      	strb	r2, [r3, #0]
	}

	return tmp_status;
    6054:	2317      	movs	r3, #23
    6056:	18fb      	adds	r3, r7, r3
    6058:	781b      	ldrb	r3, [r3, #0]
}
    605a:	0018      	movs	r0, r3
    605c:	46bd      	mov	sp, r7
    605e:	b007      	add	sp, #28
    6060:	bd90      	pop	{r4, r7, pc}
    6062:	46c0      	nop			; (mov r8, r8)
    6064:	00005db1 	.word	0x00005db1
    6068:	fffbffff 	.word	0xfffbffff
    606c:	00005d53 	.word	0x00005d53
    6070:	00005cf5 	.word	0x00005cf5
    6074:	00005779 	.word	0x00005779

00006078 <i2c_master_read_packet_wait>:
 *                                      acknowledged the address
 */
enum status_code i2c_master_read_packet_wait(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
    6078:	b580      	push	{r7, lr}
    607a:	b082      	sub	sp, #8
    607c:	af00      	add	r7, sp, #0
    607e:	6078      	str	r0, [r7, #4]
    6080:	6039      	str	r1, [r7, #0]
	if (module->buffer_remaining > 0) {
		return STATUS_BUSY;
	}
#endif

	module->send_stop = true;
    6082:	687b      	ldr	r3, [r7, #4]
    6084:	2201      	movs	r2, #1
    6086:	729a      	strb	r2, [r3, #10]
	module->send_nack = true;
    6088:	687b      	ldr	r3, [r7, #4]
    608a:	2201      	movs	r2, #1
    608c:	72da      	strb	r2, [r3, #11]

	return _i2c_master_read_packet(module, packet);
    608e:	683a      	ldr	r2, [r7, #0]
    6090:	687b      	ldr	r3, [r7, #4]
    6092:	0011      	movs	r1, r2
    6094:	0018      	movs	r0, r3
    6096:	4b03      	ldr	r3, [pc, #12]	; (60a4 <i2c_master_read_packet_wait+0x2c>)
    6098:	4798      	blx	r3
    609a:	0003      	movs	r3, r0
}
    609c:	0018      	movs	r0, r3
    609e:	46bd      	mov	sp, r7
    60a0:	b002      	add	sp, #8
    60a2:	bd80      	pop	{r7, pc}
    60a4:	00005e05 	.word	0x00005e05

000060a8 <_i2c_master_write_packet>:
 *                                      acknowledged the address
 */
static enum status_code _i2c_master_write_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
    60a8:	b590      	push	{r4, r7, lr}
    60aa:	b087      	sub	sp, #28
    60ac:	af00      	add	r7, sp, #0
    60ae:	6078      	str	r0, [r7, #4]
    60b0:	6039      	str	r1, [r7, #0]
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    60b2:	687b      	ldr	r3, [r7, #4]
    60b4:	681b      	ldr	r3, [r3, #0]
    60b6:	60fb      	str	r3, [r7, #12]

	/* Return value. */
	enum status_code tmp_status;
	uint16_t tmp_data_length = packet->data_length;
    60b8:	2314      	movs	r3, #20
    60ba:	18fb      	adds	r3, r7, r3
    60bc:	683a      	ldr	r2, [r7, #0]
    60be:	8852      	ldrh	r2, [r2, #2]
    60c0:	801a      	strh	r2, [r3, #0]

	_i2c_master_wait_for_sync(module);
    60c2:	687b      	ldr	r3, [r7, #4]
    60c4:	0018      	movs	r0, r3
    60c6:	4b51      	ldr	r3, [pc, #324]	; (620c <_i2c_master_write_packet+0x164>)
    60c8:	4798      	blx	r3

	/* Switch to high speed mode */
	if (packet->high_speed) {
    60ca:	683b      	ldr	r3, [r7, #0]
    60cc:	7a5b      	ldrb	r3, [r3, #9]
    60ce:	2b00      	cmp	r3, #0
    60d0:	d006      	beq.n	60e0 <_i2c_master_write_packet+0x38>
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
    60d2:	683b      	ldr	r3, [r7, #0]
    60d4:	7a9a      	ldrb	r2, [r3, #10]
    60d6:	687b      	ldr	r3, [r7, #4]
    60d8:	0011      	movs	r1, r2
    60da:	0018      	movs	r0, r3
    60dc:	4b4c      	ldr	r3, [pc, #304]	; (6210 <_i2c_master_write_packet+0x168>)
    60de:	4798      	blx	r3
	}

	/* Set action to ACK. */
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    60e0:	68fb      	ldr	r3, [r7, #12]
    60e2:	685b      	ldr	r3, [r3, #4]
    60e4:	4a4b      	ldr	r2, [pc, #300]	; (6214 <_i2c_master_write_packet+0x16c>)
    60e6:	401a      	ands	r2, r3
    60e8:	68fb      	ldr	r3, [r7, #12]
    60ea:	605a      	str	r2, [r3, #4]

	/* Set address and direction bit. Will send start command on bus. */
	if (packet->ten_bit_address) {
    60ec:	683b      	ldr	r3, [r7, #0]
    60ee:	7a1b      	ldrb	r3, [r3, #8]
    60f0:	2b00      	cmp	r3, #0
    60f2:	d00d      	beq.n	6110 <_i2c_master_write_packet+0x68>
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    60f4:	683b      	ldr	r3, [r7, #0]
    60f6:	881b      	ldrh	r3, [r3, #0]
    60f8:	005a      	lsls	r2, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    60fa:	683b      	ldr	r3, [r7, #0]
    60fc:	7a5b      	ldrb	r3, [r3, #9]
    60fe:	039b      	lsls	r3, r3, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    6100:	4313      	orrs	r3, r2
    6102:	001a      	movs	r2, r3
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    6104:	2380      	movs	r3, #128	; 0x80
    6106:	021b      	lsls	r3, r3, #8
    6108:	431a      	orrs	r2, r3
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    610a:	68fb      	ldr	r3, [r7, #12]
    610c:	625a      	str	r2, [r3, #36]	; 0x24
    610e:	e009      	b.n	6124 <_i2c_master_write_packet+0x7c>
			SERCOM_I2CM_ADDR_TENBITEN;
	} else {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    6110:	683b      	ldr	r3, [r7, #0]
    6112:	881b      	ldrh	r3, [r3, #0]
    6114:	005a      	lsls	r2, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
    6116:	683b      	ldr	r3, [r7, #0]
    6118:	7a5b      	ldrb	r3, [r3, #9]
    611a:	039b      	lsls	r3, r3, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    611c:	4313      	orrs	r3, r2
    611e:	001a      	movs	r2, r3
    6120:	68fb      	ldr	r3, [r7, #12]
    6122:	625a      	str	r2, [r3, #36]	; 0x24
	}
	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
    6124:	2317      	movs	r3, #23
    6126:	18fc      	adds	r4, r7, r3
    6128:	687b      	ldr	r3, [r7, #4]
    612a:	0018      	movs	r0, r3
    612c:	4b3a      	ldr	r3, [pc, #232]	; (6218 <_i2c_master_write_packet+0x170>)
    612e:	4798      	blx	r3
    6130:	0003      	movs	r3, r0
    6132:	7023      	strb	r3, [r4, #0]

	/* Check for address response error unless previous error is
	 * detected. */
	if (tmp_status == STATUS_OK) {
    6134:	2317      	movs	r3, #23
    6136:	18fb      	adds	r3, r7, r3
    6138:	781b      	ldrb	r3, [r3, #0]
    613a:	2b00      	cmp	r3, #0
    613c:	d107      	bne.n	614e <_i2c_master_write_packet+0xa6>
		tmp_status = _i2c_master_address_response(module);
    613e:	2317      	movs	r3, #23
    6140:	18fc      	adds	r4, r7, r3
    6142:	687b      	ldr	r3, [r7, #4]
    6144:	0018      	movs	r0, r3
    6146:	4b35      	ldr	r3, [pc, #212]	; (621c <_i2c_master_write_packet+0x174>)
    6148:	4798      	blx	r3
    614a:	0003      	movs	r3, r0
    614c:	7023      	strb	r3, [r4, #0]
	}

	/* Check that no error has occurred. */
	if (tmp_status == STATUS_OK) {
    614e:	2317      	movs	r3, #23
    6150:	18fb      	adds	r3, r7, r3
    6152:	781b      	ldrb	r3, [r3, #0]
    6154:	2b00      	cmp	r3, #0
    6156:	d152      	bne.n	61fe <_i2c_master_write_packet+0x156>
		/* Buffer counter. */
		uint16_t buffer_counter = 0;
    6158:	2312      	movs	r3, #18
    615a:	18fb      	adds	r3, r7, r3
    615c:	2200      	movs	r2, #0
    615e:	801a      	strh	r2, [r3, #0]

		/* Write data buffer. */
		while (tmp_data_length--) {
    6160:	e033      	b.n	61ca <_i2c_master_write_packet+0x122>
			/* Check that bus ownership is not lost. */
			if (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) {
    6162:	68fb      	ldr	r3, [r7, #12]
    6164:	8b5b      	ldrh	r3, [r3, #26]
    6166:	b29b      	uxth	r3, r3
    6168:	001a      	movs	r2, r3
    616a:	2320      	movs	r3, #32
    616c:	4013      	ands	r3, r2
    616e:	d101      	bne.n	6174 <_i2c_master_write_packet+0xcc>
				return STATUS_ERR_PACKET_COLLISION;
    6170:	2341      	movs	r3, #65	; 0x41
    6172:	e047      	b.n	6204 <_i2c_master_write_packet+0x15c>
			}

			/* Write byte to slave. */
			_i2c_master_wait_for_sync(module);
    6174:	687b      	ldr	r3, [r7, #4]
    6176:	0018      	movs	r0, r3
    6178:	4b24      	ldr	r3, [pc, #144]	; (620c <_i2c_master_write_packet+0x164>)
    617a:	4798      	blx	r3
			i2c_module->DATA.reg = packet->data[buffer_counter++];
    617c:	683b      	ldr	r3, [r7, #0]
    617e:	685a      	ldr	r2, [r3, #4]
    6180:	2312      	movs	r3, #18
    6182:	18fb      	adds	r3, r7, r3
    6184:	881b      	ldrh	r3, [r3, #0]
    6186:	2112      	movs	r1, #18
    6188:	1879      	adds	r1, r7, r1
    618a:	1c58      	adds	r0, r3, #1
    618c:	8008      	strh	r0, [r1, #0]
    618e:	18d3      	adds	r3, r2, r3
    6190:	7819      	ldrb	r1, [r3, #0]
    6192:	68fb      	ldr	r3, [r7, #12]
    6194:	2228      	movs	r2, #40	; 0x28
    6196:	5499      	strb	r1, [r3, r2]

			/* Wait for response. */
			tmp_status = _i2c_master_wait_for_bus(module);
    6198:	2317      	movs	r3, #23
    619a:	18fc      	adds	r4, r7, r3
    619c:	687b      	ldr	r3, [r7, #4]
    619e:	0018      	movs	r0, r3
    61a0:	4b1d      	ldr	r3, [pc, #116]	; (6218 <_i2c_master_write_packet+0x170>)
    61a2:	4798      	blx	r3
    61a4:	0003      	movs	r3, r0
    61a6:	7023      	strb	r3, [r4, #0]

			/* Check for error. */
			if (tmp_status != STATUS_OK) {
    61a8:	2317      	movs	r3, #23
    61aa:	18fb      	adds	r3, r7, r3
    61ac:	781b      	ldrb	r3, [r3, #0]
    61ae:	2b00      	cmp	r3, #0
    61b0:	d115      	bne.n	61de <_i2c_master_write_packet+0x136>
				break;
			}

			/* Check for NACK from slave. */
			if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
    61b2:	68fb      	ldr	r3, [r7, #12]
    61b4:	8b5b      	ldrh	r3, [r3, #26]
    61b6:	b29b      	uxth	r3, r3
    61b8:	001a      	movs	r2, r3
    61ba:	2304      	movs	r3, #4
    61bc:	4013      	ands	r3, r2
    61be:	d004      	beq.n	61ca <_i2c_master_write_packet+0x122>
				/* Return bad data value. */
				tmp_status = STATUS_ERR_OVERFLOW;
    61c0:	2317      	movs	r3, #23
    61c2:	18fb      	adds	r3, r7, r3
    61c4:	221e      	movs	r2, #30
    61c6:	701a      	strb	r2, [r3, #0]
				break;
    61c8:	e00a      	b.n	61e0 <_i2c_master_write_packet+0x138>
		while (tmp_data_length--) {
    61ca:	2314      	movs	r3, #20
    61cc:	18fb      	adds	r3, r7, r3
    61ce:	881b      	ldrh	r3, [r3, #0]
    61d0:	2214      	movs	r2, #20
    61d2:	18ba      	adds	r2, r7, r2
    61d4:	1e59      	subs	r1, r3, #1
    61d6:	8011      	strh	r1, [r2, #0]
    61d8:	2b00      	cmp	r3, #0
    61da:	d1c2      	bne.n	6162 <_i2c_master_write_packet+0xba>
    61dc:	e000      	b.n	61e0 <_i2c_master_write_packet+0x138>
				break;
    61de:	46c0      	nop			; (mov r8, r8)
			}
		}

		if (module->send_stop) {
    61e0:	687b      	ldr	r3, [r7, #4]
    61e2:	7a9b      	ldrb	r3, [r3, #10]
    61e4:	2b00      	cmp	r3, #0
    61e6:	d00a      	beq.n	61fe <_i2c_master_write_packet+0x156>
			/* Stop command */
			_i2c_master_wait_for_sync(module);
    61e8:	687b      	ldr	r3, [r7, #4]
    61ea:	0018      	movs	r0, r3
    61ec:	4b07      	ldr	r3, [pc, #28]	; (620c <_i2c_master_write_packet+0x164>)
    61ee:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    61f0:	68fb      	ldr	r3, [r7, #12]
    61f2:	685b      	ldr	r3, [r3, #4]
    61f4:	22c0      	movs	r2, #192	; 0xc0
    61f6:	0292      	lsls	r2, r2, #10
    61f8:	431a      	orrs	r2, r3
    61fa:	68fb      	ldr	r3, [r7, #12]
    61fc:	605a      	str	r2, [r3, #4]
		}
	}

	return tmp_status;
    61fe:	2317      	movs	r3, #23
    6200:	18fb      	adds	r3, r7, r3
    6202:	781b      	ldrb	r3, [r3, #0]
}
    6204:	0018      	movs	r0, r3
    6206:	46bd      	mov	sp, r7
    6208:	b007      	add	sp, #28
    620a:	bd90      	pop	{r4, r7, pc}
    620c:	00005779 	.word	0x00005779
    6210:	00005db1 	.word	0x00005db1
    6214:	fffbffff 	.word	0xfffbffff
    6218:	00005d53 	.word	0x00005d53
    621c:	00005cf5 	.word	0x00005cf5

00006220 <i2c_master_write_packet_wait>:
 *                                      last data sent
 */
enum status_code i2c_master_write_packet_wait(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
    6220:	b580      	push	{r7, lr}
    6222:	b082      	sub	sp, #8
    6224:	af00      	add	r7, sp, #0
    6226:	6078      	str	r0, [r7, #4]
    6228:	6039      	str	r1, [r7, #0]
	if (module->buffer_remaining > 0) {
		return STATUS_BUSY;
	}
#endif

	module->send_stop = true;
    622a:	687b      	ldr	r3, [r7, #4]
    622c:	2201      	movs	r2, #1
    622e:	729a      	strb	r2, [r3, #10]
	module->send_nack = true;
    6230:	687b      	ldr	r3, [r7, #4]
    6232:	2201      	movs	r2, #1
    6234:	72da      	strb	r2, [r3, #11]

	return _i2c_master_write_packet(module, packet);
    6236:	683a      	ldr	r2, [r7, #0]
    6238:	687b      	ldr	r3, [r7, #4]
    623a:	0011      	movs	r1, r2
    623c:	0018      	movs	r0, r3
    623e:	4b03      	ldr	r3, [pc, #12]	; (624c <i2c_master_write_packet_wait+0x2c>)
    6240:	4798      	blx	r3
    6242:	0003      	movs	r3, r0
}
    6244:	0018      	movs	r0, r3
    6246:	46bd      	mov	sp, r7
    6248:	b002      	add	sp, #8
    624a:	bd80      	pop	{r7, pc}
    624c:	000060a9 	.word	0x000060a9

00006250 <system_pinmux_get_group_from_gpio_pin>:
{
    6250:	b580      	push	{r7, lr}
    6252:	b084      	sub	sp, #16
    6254:	af00      	add	r7, sp, #0
    6256:	0002      	movs	r2, r0
    6258:	1dfb      	adds	r3, r7, #7
    625a:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    625c:	230f      	movs	r3, #15
    625e:	18fb      	adds	r3, r7, r3
    6260:	1dfa      	adds	r2, r7, #7
    6262:	7812      	ldrb	r2, [r2, #0]
    6264:	09d2      	lsrs	r2, r2, #7
    6266:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    6268:	230e      	movs	r3, #14
    626a:	18fb      	adds	r3, r7, r3
    626c:	1dfa      	adds	r2, r7, #7
    626e:	7812      	ldrb	r2, [r2, #0]
    6270:	0952      	lsrs	r2, r2, #5
    6272:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    6274:	4b0d      	ldr	r3, [pc, #52]	; (62ac <system_pinmux_get_group_from_gpio_pin+0x5c>)
    6276:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
    6278:	230f      	movs	r3, #15
    627a:	18fb      	adds	r3, r7, r3
    627c:	781b      	ldrb	r3, [r3, #0]
    627e:	2b00      	cmp	r3, #0
    6280:	d10f      	bne.n	62a2 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    6282:	230f      	movs	r3, #15
    6284:	18fb      	adds	r3, r7, r3
    6286:	781b      	ldrb	r3, [r3, #0]
    6288:	009b      	lsls	r3, r3, #2
    628a:	2210      	movs	r2, #16
    628c:	4694      	mov	ip, r2
    628e:	44bc      	add	ip, r7
    6290:	4463      	add	r3, ip
    6292:	3b08      	subs	r3, #8
    6294:	681a      	ldr	r2, [r3, #0]
    6296:	230e      	movs	r3, #14
    6298:	18fb      	adds	r3, r7, r3
    629a:	781b      	ldrb	r3, [r3, #0]
    629c:	01db      	lsls	r3, r3, #7
    629e:	18d3      	adds	r3, r2, r3
    62a0:	e000      	b.n	62a4 <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
    62a2:	2300      	movs	r3, #0
}
    62a4:	0018      	movs	r0, r3
    62a6:	46bd      	mov	sp, r7
    62a8:	b004      	add	sp, #16
    62aa:	bd80      	pop	{r7, pc}
    62ac:	41004400 	.word	0x41004400

000062b0 <port_get_group_from_gpio_pin>:
{
    62b0:	b580      	push	{r7, lr}
    62b2:	b082      	sub	sp, #8
    62b4:	af00      	add	r7, sp, #0
    62b6:	0002      	movs	r2, r0
    62b8:	1dfb      	adds	r3, r7, #7
    62ba:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
    62bc:	1dfb      	adds	r3, r7, #7
    62be:	781b      	ldrb	r3, [r3, #0]
    62c0:	0018      	movs	r0, r3
    62c2:	4b03      	ldr	r3, [pc, #12]	; (62d0 <port_get_group_from_gpio_pin+0x20>)
    62c4:	4798      	blx	r3
    62c6:	0003      	movs	r3, r0
}
    62c8:	0018      	movs	r0, r3
    62ca:	46bd      	mov	sp, r7
    62cc:	b002      	add	sp, #8
    62ce:	bd80      	pop	{r7, pc}
    62d0:	00006251 	.word	0x00006251

000062d4 <port_get_config_defaults>:
{
    62d4:	b580      	push	{r7, lr}
    62d6:	b082      	sub	sp, #8
    62d8:	af00      	add	r7, sp, #0
    62da:	6078      	str	r0, [r7, #4]
	config->direction  = PORT_PIN_DIR_INPUT;
    62dc:	687b      	ldr	r3, [r7, #4]
    62de:	2200      	movs	r2, #0
    62e0:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
    62e2:	687b      	ldr	r3, [r7, #4]
    62e4:	2201      	movs	r2, #1
    62e6:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
    62e8:	687b      	ldr	r3, [r7, #4]
    62ea:	2200      	movs	r2, #0
    62ec:	709a      	strb	r2, [r3, #2]
}
    62ee:	46c0      	nop			; (mov r8, r8)
    62f0:	46bd      	mov	sp, r7
    62f2:	b002      	add	sp, #8
    62f4:	bd80      	pop	{r7, pc}
	...

000062f8 <port_pin_set_output_level>:
{
    62f8:	b580      	push	{r7, lr}
    62fa:	b084      	sub	sp, #16
    62fc:	af00      	add	r7, sp, #0
    62fe:	0002      	movs	r2, r0
    6300:	1dfb      	adds	r3, r7, #7
    6302:	701a      	strb	r2, [r3, #0]
    6304:	1dbb      	adds	r3, r7, #6
    6306:	1c0a      	adds	r2, r1, #0
    6308:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    630a:	1dfb      	adds	r3, r7, #7
    630c:	781b      	ldrb	r3, [r3, #0]
    630e:	0018      	movs	r0, r3
    6310:	4b0d      	ldr	r3, [pc, #52]	; (6348 <port_pin_set_output_level+0x50>)
    6312:	4798      	blx	r3
    6314:	0003      	movs	r3, r0
    6316:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    6318:	1dfb      	adds	r3, r7, #7
    631a:	781b      	ldrb	r3, [r3, #0]
    631c:	221f      	movs	r2, #31
    631e:	4013      	ands	r3, r2
    6320:	2201      	movs	r2, #1
    6322:	409a      	lsls	r2, r3
    6324:	0013      	movs	r3, r2
    6326:	60bb      	str	r3, [r7, #8]
	if (level) {
    6328:	1dbb      	adds	r3, r7, #6
    632a:	781b      	ldrb	r3, [r3, #0]
    632c:	2b00      	cmp	r3, #0
    632e:	d003      	beq.n	6338 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
    6330:	68fb      	ldr	r3, [r7, #12]
    6332:	68ba      	ldr	r2, [r7, #8]
    6334:	619a      	str	r2, [r3, #24]
}
    6336:	e002      	b.n	633e <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
    6338:	68fb      	ldr	r3, [r7, #12]
    633a:	68ba      	ldr	r2, [r7, #8]
    633c:	615a      	str	r2, [r3, #20]
}
    633e:	46c0      	nop			; (mov r8, r8)
    6340:	46bd      	mov	sp, r7
    6342:	b004      	add	sp, #16
    6344:	bd80      	pop	{r7, pc}
    6346:	46c0      	nop			; (mov r8, r8)
    6348:	000062b1 	.word	0x000062b1

0000634c <system_interrupt_enable_global>:
{
    634c:	b580      	push	{r7, lr}
    634e:	af00      	add	r7, sp, #0
	cpu_irq_enable();
    6350:	4b04      	ldr	r3, [pc, #16]	; (6364 <system_interrupt_enable_global+0x18>)
    6352:	2201      	movs	r2, #1
    6354:	701a      	strb	r2, [r3, #0]
    6356:	f3bf 8f5f 	dmb	sy
    635a:	b662      	cpsie	i
}
    635c:	46c0      	nop			; (mov r8, r8)
    635e:	46bd      	mov	sp, r7
    6360:	bd80      	pop	{r7, pc}
    6362:	46c0      	nop			; (mov r8, r8)
    6364:	20000000 	.word	0x20000000

00006368 <chip_isr>:
#include "conf_winc.h"

static tpfNmBspIsr gpfIsr;

static void chip_isr(void)
{
    6368:	b580      	push	{r7, lr}
    636a:	af00      	add	r7, sp, #0
	if (gpfIsr) {
    636c:	4b04      	ldr	r3, [pc, #16]	; (6380 <chip_isr+0x18>)
    636e:	681b      	ldr	r3, [r3, #0]
    6370:	2b00      	cmp	r3, #0
    6372:	d002      	beq.n	637a <chip_isr+0x12>
		gpfIsr();
    6374:	4b02      	ldr	r3, [pc, #8]	; (6380 <chip_isr+0x18>)
    6376:	681b      	ldr	r3, [r3, #0]
    6378:	4798      	blx	r3
	}
}
    637a:	46c0      	nop			; (mov r8, r8)
    637c:	46bd      	mov	sp, r7
    637e:	bd80      	pop	{r7, pc}
    6380:	2000053c 	.word	0x2000053c

00006384 <init_chip_pins>:
/*
 *	@fn		init_chip_pins
 *	@brief	Initialize reset, chip enable and wake pin
 */
static void init_chip_pins(void)
{
    6384:	b580      	push	{r7, lr}
    6386:	b082      	sub	sp, #8
    6388:	af00      	add	r7, sp, #0
	struct port_config pin_conf;

	port_get_config_defaults(&pin_conf);
    638a:	1d3b      	adds	r3, r7, #4
    638c:	0018      	movs	r0, r3
    638e:	4b10      	ldr	r3, [pc, #64]	; (63d0 <init_chip_pins+0x4c>)
    6390:	4798      	blx	r3

	/* Configure control pins as output. */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    6392:	1d3b      	adds	r3, r7, #4
    6394:	2201      	movs	r2, #1
    6396:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(CONF_WINC_PIN_RESET, &pin_conf);
    6398:	1d3b      	adds	r3, r7, #4
    639a:	0019      	movs	r1, r3
    639c:	2026      	movs	r0, #38	; 0x26
    639e:	4b0d      	ldr	r3, [pc, #52]	; (63d4 <init_chip_pins+0x50>)
    63a0:	4798      	blx	r3
	port_pin_set_config(CONF_WINC_PIN_CHIP_ENABLE, &pin_conf);
    63a2:	1d3b      	adds	r3, r7, #4
    63a4:	0019      	movs	r1, r3
    63a6:	2025      	movs	r0, #37	; 0x25
    63a8:	4b0a      	ldr	r3, [pc, #40]	; (63d4 <init_chip_pins+0x50>)
    63aa:	4798      	blx	r3
	port_pin_set_config(CONF_WINC_PIN_WAKE, &pin_conf);
    63ac:	1d3b      	adds	r3, r7, #4
    63ae:	0019      	movs	r1, r3
    63b0:	2027      	movs	r0, #39	; 0x27
    63b2:	4b08      	ldr	r3, [pc, #32]	; (63d4 <init_chip_pins+0x50>)
    63b4:	4798      	blx	r3
	port_pin_set_output_level(CONF_WINC_PIN_CHIP_ENABLE, false);
    63b6:	2100      	movs	r1, #0
    63b8:	2025      	movs	r0, #37	; 0x25
    63ba:	4b07      	ldr	r3, [pc, #28]	; (63d8 <init_chip_pins+0x54>)
    63bc:	4798      	blx	r3
	port_pin_set_output_level(CONF_WINC_PIN_RESET, false);
    63be:	2100      	movs	r1, #0
    63c0:	2026      	movs	r0, #38	; 0x26
    63c2:	4b05      	ldr	r3, [pc, #20]	; (63d8 <init_chip_pins+0x54>)
    63c4:	4798      	blx	r3
}
    63c6:	46c0      	nop			; (mov r8, r8)
    63c8:	46bd      	mov	sp, r7
    63ca:	b002      	add	sp, #8
    63cc:	bd80      	pop	{r7, pc}
    63ce:	46c0      	nop			; (mov r8, r8)
    63d0:	000062d5 	.word	0x000062d5
    63d4:	000001d1 	.word	0x000001d1
    63d8:	000062f9 	.word	0x000062f9

000063dc <nm_bsp_init>:
 *	@fn		nm_bsp_init
 *	@brief	Initialize BSP
 *	@return	0 in case of success and -1 in case of failure
 */
sint8 nm_bsp_init(void)
{
    63dc:	b580      	push	{r7, lr}
    63de:	af00      	add	r7, sp, #0
	gpfIsr = NULL;
    63e0:	4b0c      	ldr	r3, [pc, #48]	; (6414 <nm_bsp_init+0x38>)
    63e2:	2200      	movs	r2, #0
    63e4:	601a      	str	r2, [r3, #0]

	/* Initialize chip IOs. */
	init_chip_pins();
    63e6:	4b0c      	ldr	r3, [pc, #48]	; (6418 <nm_bsp_init+0x3c>)
    63e8:	4798      	blx	r3

    /* Make sure a 1ms Systick is configured. */
    if (!(SysTick->CTRL & SysTick_CTRL_ENABLE_Msk && SysTick->CTRL & SysTick_CTRL_TICKINT_Msk)) {
    63ea:	4b0c      	ldr	r3, [pc, #48]	; (641c <nm_bsp_init+0x40>)
    63ec:	681b      	ldr	r3, [r3, #0]
    63ee:	2201      	movs	r2, #1
    63f0:	4013      	ands	r3, r2
    63f2:	d004      	beq.n	63fe <nm_bsp_init+0x22>
    63f4:	4b09      	ldr	r3, [pc, #36]	; (641c <nm_bsp_init+0x40>)
    63f6:	681b      	ldr	r3, [r3, #0]
    63f8:	2202      	movs	r2, #2
    63fa:	4013      	ands	r3, r2
    63fc:	d101      	bne.n	6402 <nm_bsp_init+0x26>
	    delay_init();
    63fe:	4b08      	ldr	r3, [pc, #32]	; (6420 <nm_bsp_init+0x44>)
    6400:	4798      	blx	r3
    }

	/* Perform chip reset. */
	nm_bsp_reset();
    6402:	4b08      	ldr	r3, [pc, #32]	; (6424 <nm_bsp_init+0x48>)
    6404:	4798      	blx	r3

	system_interrupt_enable_global();
    6406:	4b08      	ldr	r3, [pc, #32]	; (6428 <nm_bsp_init+0x4c>)
    6408:	4798      	blx	r3

	return M2M_SUCCESS;
    640a:	2300      	movs	r3, #0
}
    640c:	0018      	movs	r0, r3
    640e:	46bd      	mov	sp, r7
    6410:	bd80      	pop	{r7, pc}
    6412:	46c0      	nop			; (mov r8, r8)
    6414:	2000053c 	.word	0x2000053c
    6418:	00006385 	.word	0x00006385
    641c:	e000e010 	.word	0xe000e010
    6420:	000004b1 	.word	0x000004b1
    6424:	0000642d 	.word	0x0000642d
    6428:	0000634d 	.word	0x0000634d

0000642c <nm_bsp_reset>:
 *	@fn		nm_bsp_reset
 *	@brief	Reset NMC1500 SoC by setting CHIP_EN and RESET_N signals low,
 *           CHIP_EN high then RESET_N high
 */
void nm_bsp_reset(void)
{
    642c:	b580      	push	{r7, lr}
    642e:	af00      	add	r7, sp, #0
	port_pin_set_output_level(CONF_WINC_PIN_CHIP_ENABLE, false);
    6430:	2100      	movs	r1, #0
    6432:	2025      	movs	r0, #37	; 0x25
    6434:	4b0c      	ldr	r3, [pc, #48]	; (6468 <nm_bsp_reset+0x3c>)
    6436:	4798      	blx	r3
	port_pin_set_output_level(CONF_WINC_PIN_RESET, false);
    6438:	2100      	movs	r1, #0
    643a:	2026      	movs	r0, #38	; 0x26
    643c:	4b0a      	ldr	r3, [pc, #40]	; (6468 <nm_bsp_reset+0x3c>)
    643e:	4798      	blx	r3
	nm_bsp_sleep(100);
    6440:	2064      	movs	r0, #100	; 0x64
    6442:	4b0a      	ldr	r3, [pc, #40]	; (646c <nm_bsp_reset+0x40>)
    6444:	4798      	blx	r3
	port_pin_set_output_level(CONF_WINC_PIN_CHIP_ENABLE, true);
    6446:	2101      	movs	r1, #1
    6448:	2025      	movs	r0, #37	; 0x25
    644a:	4b07      	ldr	r3, [pc, #28]	; (6468 <nm_bsp_reset+0x3c>)
    644c:	4798      	blx	r3
	nm_bsp_sleep(100);
    644e:	2064      	movs	r0, #100	; 0x64
    6450:	4b06      	ldr	r3, [pc, #24]	; (646c <nm_bsp_reset+0x40>)
    6452:	4798      	blx	r3
	port_pin_set_output_level(CONF_WINC_PIN_RESET, true);
    6454:	2101      	movs	r1, #1
    6456:	2026      	movs	r0, #38	; 0x26
    6458:	4b03      	ldr	r3, [pc, #12]	; (6468 <nm_bsp_reset+0x3c>)
    645a:	4798      	blx	r3
	nm_bsp_sleep(100);
    645c:	2064      	movs	r0, #100	; 0x64
    645e:	4b03      	ldr	r3, [pc, #12]	; (646c <nm_bsp_reset+0x40>)
    6460:	4798      	blx	r3
}
    6462:	46c0      	nop			; (mov r8, r8)
    6464:	46bd      	mov	sp, r7
    6466:	bd80      	pop	{r7, pc}
    6468:	000062f9 	.word	0x000062f9
    646c:	00006471 	.word	0x00006471

00006470 <nm_bsp_sleep>:
 *	@brief	Sleep in units of mSec
 *	@param[IN]	u32TimeMsec
 *				Time in milliseconds
 */
void nm_bsp_sleep(uint32 u32TimeMsec)
{
    6470:	b580      	push	{r7, lr}
    6472:	b082      	sub	sp, #8
    6474:	af00      	add	r7, sp, #0
    6476:	6078      	str	r0, [r7, #4]
	while (u32TimeMsec--) {
    6478:	e002      	b.n	6480 <nm_bsp_sleep+0x10>
		delay_ms(1);
    647a:	2001      	movs	r0, #1
    647c:	4b05      	ldr	r3, [pc, #20]	; (6494 <nm_bsp_sleep+0x24>)
    647e:	4798      	blx	r3
	while (u32TimeMsec--) {
    6480:	687b      	ldr	r3, [r7, #4]
    6482:	1e5a      	subs	r2, r3, #1
    6484:	607a      	str	r2, [r7, #4]
    6486:	2b00      	cmp	r3, #0
    6488:	d1f7      	bne.n	647a <nm_bsp_sleep+0xa>
	}
}
    648a:	46c0      	nop			; (mov r8, r8)
    648c:	46bd      	mov	sp, r7
    648e:	b002      	add	sp, #8
    6490:	bd80      	pop	{r7, pc}
    6492:	46c0      	nop			; (mov r8, r8)
    6494:	00000539 	.word	0x00000539

00006498 <nm_bsp_register_isr>:
 *	@brief	Register interrupt service routine
 *	@param[IN]	pfIsr
 *				Pointer to ISR handler
 */
void nm_bsp_register_isr(tpfNmBspIsr pfIsr)
{
    6498:	b580      	push	{r7, lr}
    649a:	b086      	sub	sp, #24
    649c:	af00      	add	r7, sp, #0
    649e:	6078      	str	r0, [r7, #4]
	struct extint_chan_conf config_extint_chan;

	gpfIsr = pfIsr;
    64a0:	4b15      	ldr	r3, [pc, #84]	; (64f8 <nm_bsp_register_isr+0x60>)
    64a2:	687a      	ldr	r2, [r7, #4]
    64a4:	601a      	str	r2, [r3, #0]

	extint_chan_get_config_defaults(&config_extint_chan);
    64a6:	230c      	movs	r3, #12
    64a8:	18fb      	adds	r3, r7, r3
    64aa:	0018      	movs	r0, r3
    64ac:	4b13      	ldr	r3, [pc, #76]	; (64fc <nm_bsp_register_isr+0x64>)
    64ae:	4798      	blx	r3
	config_extint_chan.gpio_pin = CONF_WINC_SPI_INT_PIN;
    64b0:	230c      	movs	r3, #12
    64b2:	18fb      	adds	r3, r7, r3
    64b4:	2224      	movs	r2, #36	; 0x24
    64b6:	601a      	str	r2, [r3, #0]
	config_extint_chan.gpio_pin_mux = CONF_WINC_SPI_INT_MUX;
    64b8:	230c      	movs	r3, #12
    64ba:	18fb      	adds	r3, r7, r3
    64bc:	2200      	movs	r2, #0
    64be:	605a      	str	r2, [r3, #4]
	config_extint_chan.gpio_pin_pull = EXTINT_PULL_UP;
    64c0:	230c      	movs	r3, #12
    64c2:	18fb      	adds	r3, r7, r3
    64c4:	2201      	movs	r2, #1
    64c6:	721a      	strb	r2, [r3, #8]
	config_extint_chan.detection_criteria = EXTINT_DETECT_FALLING;
    64c8:	230c      	movs	r3, #12
    64ca:	18fb      	adds	r3, r7, r3
    64cc:	2202      	movs	r2, #2
    64ce:	72da      	strb	r2, [r3, #11]

	extint_chan_set_config(CONF_WINC_SPI_INT_EIC, &config_extint_chan);
    64d0:	230c      	movs	r3, #12
    64d2:	18fb      	adds	r3, r7, r3
    64d4:	0019      	movs	r1, r3
    64d6:	2004      	movs	r0, #4
    64d8:	4b09      	ldr	r3, [pc, #36]	; (6500 <nm_bsp_register_isr+0x68>)
    64da:	4798      	blx	r3
	extint_register_callback(chip_isr, CONF_WINC_SPI_INT_EIC,
    64dc:	4b09      	ldr	r3, [pc, #36]	; (6504 <nm_bsp_register_isr+0x6c>)
    64de:	2200      	movs	r2, #0
    64e0:	2104      	movs	r1, #4
    64e2:	0018      	movs	r0, r3
    64e4:	4b08      	ldr	r3, [pc, #32]	; (6508 <nm_bsp_register_isr+0x70>)
    64e6:	4798      	blx	r3
			EXTINT_CALLBACK_TYPE_DETECT);
	extint_chan_enable_callback(CONF_WINC_SPI_INT_EIC,
    64e8:	2100      	movs	r1, #0
    64ea:	2004      	movs	r0, #4
    64ec:	4b07      	ldr	r3, [pc, #28]	; (650c <nm_bsp_register_isr+0x74>)
    64ee:	4798      	blx	r3
			EXTINT_CALLBACK_TYPE_DETECT);
}
    64f0:	46c0      	nop			; (mov r8, r8)
    64f2:	46bd      	mov	sp, r7
    64f4:	b006      	add	sp, #24
    64f6:	bd80      	pop	{r7, pc}
    64f8:	2000053c 	.word	0x2000053c
    64fc:	0000c729 	.word	0x0000c729
    6500:	0000c75d 	.word	0x0000c75d
    6504:	00006369 	.word	0x00006369
    6508:	0000c329 	.word	0x0000c329
    650c:	0000c38d 	.word	0x0000c38d

00006510 <nm_bsp_interrupt_ctrl>:
 *	@brief	Enable/Disable interrupts
 *	@param[IN]	u8Enable
 *				'0' disable interrupts. '1' enable interrupts
 */
void nm_bsp_interrupt_ctrl(uint8 u8Enable)
{
    6510:	b580      	push	{r7, lr}
    6512:	b082      	sub	sp, #8
    6514:	af00      	add	r7, sp, #0
    6516:	0002      	movs	r2, r0
    6518:	1dfb      	adds	r3, r7, #7
    651a:	701a      	strb	r2, [r3, #0]
	if (u8Enable) {
    651c:	1dfb      	adds	r3, r7, #7
    651e:	781b      	ldrb	r3, [r3, #0]
    6520:	2b00      	cmp	r3, #0
    6522:	d004      	beq.n	652e <nm_bsp_interrupt_ctrl+0x1e>
		extint_chan_enable_callback(CONF_WINC_SPI_INT_EIC,
    6524:	2100      	movs	r1, #0
    6526:	2004      	movs	r0, #4
    6528:	4b05      	ldr	r3, [pc, #20]	; (6540 <nm_bsp_interrupt_ctrl+0x30>)
    652a:	4798      	blx	r3
				EXTINT_CALLBACK_TYPE_DETECT);
	} else {
		extint_chan_disable_callback(CONF_WINC_SPI_INT_EIC,
				EXTINT_CALLBACK_TYPE_DETECT);
	}
}
    652c:	e003      	b.n	6536 <nm_bsp_interrupt_ctrl+0x26>
		extint_chan_disable_callback(CONF_WINC_SPI_INT_EIC,
    652e:	2100      	movs	r1, #0
    6530:	2004      	movs	r0, #4
    6532:	4b04      	ldr	r3, [pc, #16]	; (6544 <nm_bsp_interrupt_ctrl+0x34>)
    6534:	4798      	blx	r3
}
    6536:	46c0      	nop			; (mov r8, r8)
    6538:	46bd      	mov	sp, r7
    653a:	b002      	add	sp, #8
    653c:	bd80      	pop	{r7, pc}
    653e:	46c0      	nop			; (mov r8, r8)
    6540:	0000c38d 	.word	0x0000c38d
    6544:	0000c3d5 	.word	0x0000c3d5

00006548 <system_pinmux_get_group_from_gpio_pin>:
{
    6548:	b580      	push	{r7, lr}
    654a:	b084      	sub	sp, #16
    654c:	af00      	add	r7, sp, #0
    654e:	0002      	movs	r2, r0
    6550:	1dfb      	adds	r3, r7, #7
    6552:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    6554:	230f      	movs	r3, #15
    6556:	18fb      	adds	r3, r7, r3
    6558:	1dfa      	adds	r2, r7, #7
    655a:	7812      	ldrb	r2, [r2, #0]
    655c:	09d2      	lsrs	r2, r2, #7
    655e:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    6560:	230e      	movs	r3, #14
    6562:	18fb      	adds	r3, r7, r3
    6564:	1dfa      	adds	r2, r7, #7
    6566:	7812      	ldrb	r2, [r2, #0]
    6568:	0952      	lsrs	r2, r2, #5
    656a:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    656c:	4b0d      	ldr	r3, [pc, #52]	; (65a4 <system_pinmux_get_group_from_gpio_pin+0x5c>)
    656e:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
    6570:	230f      	movs	r3, #15
    6572:	18fb      	adds	r3, r7, r3
    6574:	781b      	ldrb	r3, [r3, #0]
    6576:	2b00      	cmp	r3, #0
    6578:	d10f      	bne.n	659a <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    657a:	230f      	movs	r3, #15
    657c:	18fb      	adds	r3, r7, r3
    657e:	781b      	ldrb	r3, [r3, #0]
    6580:	009b      	lsls	r3, r3, #2
    6582:	2210      	movs	r2, #16
    6584:	4694      	mov	ip, r2
    6586:	44bc      	add	ip, r7
    6588:	4463      	add	r3, ip
    658a:	3b08      	subs	r3, #8
    658c:	681a      	ldr	r2, [r3, #0]
    658e:	230e      	movs	r3, #14
    6590:	18fb      	adds	r3, r7, r3
    6592:	781b      	ldrb	r3, [r3, #0]
    6594:	01db      	lsls	r3, r3, #7
    6596:	18d3      	adds	r3, r2, r3
    6598:	e000      	b.n	659c <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
    659a:	2300      	movs	r3, #0
}
    659c:	0018      	movs	r0, r3
    659e:	46bd      	mov	sp, r7
    65a0:	b004      	add	sp, #16
    65a2:	bd80      	pop	{r7, pc}
    65a4:	41004400 	.word	0x41004400

000065a8 <port_get_group_from_gpio_pin>:
{
    65a8:	b580      	push	{r7, lr}
    65aa:	b082      	sub	sp, #8
    65ac:	af00      	add	r7, sp, #0
    65ae:	0002      	movs	r2, r0
    65b0:	1dfb      	adds	r3, r7, #7
    65b2:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
    65b4:	1dfb      	adds	r3, r7, #7
    65b6:	781b      	ldrb	r3, [r3, #0]
    65b8:	0018      	movs	r0, r3
    65ba:	4b03      	ldr	r3, [pc, #12]	; (65c8 <port_get_group_from_gpio_pin+0x20>)
    65bc:	4798      	blx	r3
    65be:	0003      	movs	r3, r0
}
    65c0:	0018      	movs	r0, r3
    65c2:	46bd      	mov	sp, r7
    65c4:	b002      	add	sp, #8
    65c6:	bd80      	pop	{r7, pc}
    65c8:	00006549 	.word	0x00006549

000065cc <port_get_config_defaults>:
{
    65cc:	b580      	push	{r7, lr}
    65ce:	b082      	sub	sp, #8
    65d0:	af00      	add	r7, sp, #0
    65d2:	6078      	str	r0, [r7, #4]
	config->direction  = PORT_PIN_DIR_INPUT;
    65d4:	687b      	ldr	r3, [r7, #4]
    65d6:	2200      	movs	r2, #0
    65d8:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
    65da:	687b      	ldr	r3, [r7, #4]
    65dc:	2201      	movs	r2, #1
    65de:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
    65e0:	687b      	ldr	r3, [r7, #4]
    65e2:	2200      	movs	r2, #0
    65e4:	709a      	strb	r2, [r3, #2]
}
    65e6:	46c0      	nop			; (mov r8, r8)
    65e8:	46bd      	mov	sp, r7
    65ea:	b002      	add	sp, #8
    65ec:	bd80      	pop	{r7, pc}
	...

000065f0 <port_pin_set_output_level>:
{
    65f0:	b580      	push	{r7, lr}
    65f2:	b084      	sub	sp, #16
    65f4:	af00      	add	r7, sp, #0
    65f6:	0002      	movs	r2, r0
    65f8:	1dfb      	adds	r3, r7, #7
    65fa:	701a      	strb	r2, [r3, #0]
    65fc:	1dbb      	adds	r3, r7, #6
    65fe:	1c0a      	adds	r2, r1, #0
    6600:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    6602:	1dfb      	adds	r3, r7, #7
    6604:	781b      	ldrb	r3, [r3, #0]
    6606:	0018      	movs	r0, r3
    6608:	4b0d      	ldr	r3, [pc, #52]	; (6640 <port_pin_set_output_level+0x50>)
    660a:	4798      	blx	r3
    660c:	0003      	movs	r3, r0
    660e:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    6610:	1dfb      	adds	r3, r7, #7
    6612:	781b      	ldrb	r3, [r3, #0]
    6614:	221f      	movs	r2, #31
    6616:	4013      	ands	r3, r2
    6618:	2201      	movs	r2, #1
    661a:	409a      	lsls	r2, r3
    661c:	0013      	movs	r3, r2
    661e:	60bb      	str	r3, [r7, #8]
	if (level) {
    6620:	1dbb      	adds	r3, r7, #6
    6622:	781b      	ldrb	r3, [r3, #0]
    6624:	2b00      	cmp	r3, #0
    6626:	d003      	beq.n	6630 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
    6628:	68fb      	ldr	r3, [r7, #12]
    662a:	68ba      	ldr	r2, [r7, #8]
    662c:	619a      	str	r2, [r3, #24]
}
    662e:	e002      	b.n	6636 <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
    6630:	68fb      	ldr	r3, [r7, #12]
    6632:	68ba      	ldr	r2, [r7, #8]
    6634:	615a      	str	r2, [r3, #20]
}
    6636:	46c0      	nop			; (mov r8, r8)
    6638:	46bd      	mov	sp, r7
    663a:	b004      	add	sp, #16
    663c:	bd80      	pop	{r7, pc}
    663e:	46c0      	nop			; (mov r8, r8)
    6640:	000065a9 	.word	0x000065a9

00006644 <system_interrupt_enable>:
{
    6644:	b580      	push	{r7, lr}
    6646:	b082      	sub	sp, #8
    6648:	af00      	add	r7, sp, #0
    664a:	0002      	movs	r2, r0
    664c:	1dfb      	adds	r3, r7, #7
    664e:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    6650:	4b06      	ldr	r3, [pc, #24]	; (666c <system_interrupt_enable+0x28>)
    6652:	1dfa      	adds	r2, r7, #7
    6654:	7812      	ldrb	r2, [r2, #0]
    6656:	0011      	movs	r1, r2
    6658:	221f      	movs	r2, #31
    665a:	400a      	ands	r2, r1
    665c:	2101      	movs	r1, #1
    665e:	4091      	lsls	r1, r2
    6660:	000a      	movs	r2, r1
    6662:	601a      	str	r2, [r3, #0]
}
    6664:	46c0      	nop			; (mov r8, r8)
    6666:	46bd      	mov	sp, r7
    6668:	b002      	add	sp, #8
    666a:	bd80      	pop	{r7, pc}
    666c:	e000e100 	.word	0xe000e100

00006670 <system_interrupt_disable>:
 *
 * \param[in] vector  Interrupt vector to disable
 */
static inline void system_interrupt_disable(
		const enum system_interrupt_vector vector)
{
    6670:	b580      	push	{r7, lr}
    6672:	b082      	sub	sp, #8
    6674:	af00      	add	r7, sp, #0
    6676:	0002      	movs	r2, r0
    6678:	1dfb      	adds	r3, r7, #7
    667a:	701a      	strb	r2, [r3, #0]
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    667c:	4a07      	ldr	r2, [pc, #28]	; (669c <system_interrupt_disable+0x2c>)
    667e:	1dfb      	adds	r3, r7, #7
    6680:	781b      	ldrb	r3, [r3, #0]
    6682:	0019      	movs	r1, r3
    6684:	231f      	movs	r3, #31
    6686:	400b      	ands	r3, r1
    6688:	2101      	movs	r1, #1
    668a:	4099      	lsls	r1, r3
    668c:	000b      	movs	r3, r1
    668e:	0019      	movs	r1, r3
    6690:	2380      	movs	r3, #128	; 0x80
    6692:	50d1      	str	r1, [r2, r3]
}
    6694:	46c0      	nop			; (mov r8, r8)
    6696:	46bd      	mov	sp, r7
    6698:	b002      	add	sp, #8
    669a:	bd80      	pop	{r7, pc}
    669c:	e000e100 	.word	0xe000e100

000066a0 <spi_is_syncing>:
 * \retval false  Module synchronization is not ongoing
 *
 */
static inline bool spi_is_syncing(
		struct spi_module *const module)
{
    66a0:	b580      	push	{r7, lr}
    66a2:	b084      	sub	sp, #16
    66a4:	af00      	add	r7, sp, #0
    66a6:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    66a8:	687b      	ldr	r3, [r7, #4]
    66aa:	681b      	ldr	r3, [r3, #0]
    66ac:	60fb      	str	r3, [r7, #12]

#  ifdef FEATURE_SPI_SYNC_SCHEME_VERSION_2
	/* Return synchronization status */
	return (spi_module->SYNCBUSY.reg);
    66ae:	68fb      	ldr	r3, [r7, #12]
    66b0:	69db      	ldr	r3, [r3, #28]
    66b2:	1e5a      	subs	r2, r3, #1
    66b4:	4193      	sbcs	r3, r2
    66b6:	b2db      	uxtb	r3, r3
#  else
	/* Return synchronization status */
	return (spi_module->STATUS.reg & SERCOM_SPI_STATUS_SYNCBUSY);
#  endif
}
    66b8:	0018      	movs	r0, r3
    66ba:	46bd      	mov	sp, r7
    66bc:	b004      	add	sp, #16
    66be:	bd80      	pop	{r7, pc}

000066c0 <spi_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void spi_get_config_defaults(
		struct spi_config *const config)
{
    66c0:	b580      	push	{r7, lr}
    66c2:	b082      	sub	sp, #8
    66c4:	af00      	add	r7, sp, #0
    66c6:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mode             = SPI_MODE_MASTER;
    66c8:	687b      	ldr	r3, [r7, #4]
    66ca:	2201      	movs	r2, #1
    66cc:	701a      	strb	r2, [r3, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
    66ce:	687b      	ldr	r3, [r7, #4]
    66d0:	2200      	movs	r2, #0
    66d2:	605a      	str	r2, [r3, #4]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
    66d4:	687b      	ldr	r3, [r7, #4]
    66d6:	2200      	movs	r2, #0
    66d8:	609a      	str	r2, [r3, #8]
	config->mux_setting      = SPI_SIGNAL_MUX_SETTING_D;
    66da:	687b      	ldr	r3, [r7, #4]
    66dc:	22c0      	movs	r2, #192	; 0xc0
    66de:	0392      	lsls	r2, r2, #14
    66e0:	60da      	str	r2, [r3, #12]
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
    66e2:	687b      	ldr	r3, [r7, #4]
    66e4:	2200      	movs	r2, #0
    66e6:	741a      	strb	r2, [r3, #16]
	config->run_in_standby   = false;
    66e8:	687b      	ldr	r3, [r7, #4]
    66ea:	2200      	movs	r2, #0
    66ec:	745a      	strb	r2, [r3, #17]
	config->receiver_enable  = true;
    66ee:	687b      	ldr	r3, [r7, #4]
    66f0:	2201      	movs	r2, #1
    66f2:	749a      	strb	r2, [r3, #18]
#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	config->select_slave_low_detect_enable= true;
    66f4:	687b      	ldr	r3, [r7, #4]
    66f6:	2201      	movs	r2, #1
    66f8:	74da      	strb	r2, [r3, #19]
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	config->master_slave_select_enable= false;
    66fa:	687b      	ldr	r3, [r7, #4]
    66fc:	2200      	movs	r2, #0
    66fe:	751a      	strb	r2, [r3, #20]
#  endif
	config->generator_source = GCLK_GENERATOR_0;
    6700:	687b      	ldr	r3, [r7, #4]
    6702:	2224      	movs	r2, #36	; 0x24
    6704:	2100      	movs	r1, #0
    6706:	5499      	strb	r1, [r3, r2]

	/* Clear mode specific config */
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
    6708:	687b      	ldr	r3, [r7, #4]
    670a:	3318      	adds	r3, #24
    670c:	220c      	movs	r2, #12
    670e:	2100      	movs	r1, #0
    6710:	0018      	movs	r0, r3
    6712:	4b0a      	ldr	r3, [pc, #40]	; (673c <spi_get_config_defaults+0x7c>)
    6714:	4798      	blx	r3

	/* Master config defaults */
	config->mode_specific.master.baudrate = 100000;
    6716:	687b      	ldr	r3, [r7, #4]
    6718:	4a09      	ldr	r2, [pc, #36]	; (6740 <spi_get_config_defaults+0x80>)
    671a:	619a      	str	r2, [r3, #24]

	/* pinmux config defaults */
	config->pinmux_pad0 = PINMUX_DEFAULT;
    671c:	687b      	ldr	r3, [r7, #4]
    671e:	2200      	movs	r2, #0
    6720:	629a      	str	r2, [r3, #40]	; 0x28
	config->pinmux_pad1 = PINMUX_DEFAULT;
    6722:	687b      	ldr	r3, [r7, #4]
    6724:	2200      	movs	r2, #0
    6726:	62da      	str	r2, [r3, #44]	; 0x2c
	config->pinmux_pad2 = PINMUX_DEFAULT;
    6728:	687b      	ldr	r3, [r7, #4]
    672a:	2200      	movs	r2, #0
    672c:	631a      	str	r2, [r3, #48]	; 0x30
	config->pinmux_pad3 = PINMUX_DEFAULT;
    672e:	687b      	ldr	r3, [r7, #4]
    6730:	2200      	movs	r2, #0
    6732:	635a      	str	r2, [r3, #52]	; 0x34

};
    6734:	46c0      	nop			; (mov r8, r8)
    6736:	46bd      	mov	sp, r7
    6738:	b002      	add	sp, #8
    673a:	bd80      	pop	{r7, pc}
    673c:	0001c173 	.word	0x0001c173
    6740:	000186a0 	.word	0x000186a0

00006744 <spi_slave_inst_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void spi_slave_inst_get_config_defaults(
		struct spi_slave_inst_config *const config)
{
    6744:	b580      	push	{r7, lr}
    6746:	b082      	sub	sp, #8
    6748:	af00      	add	r7, sp, #0
    674a:	6078      	str	r0, [r7, #4]
	Assert(config);

	config->ss_pin          = 10;
    674c:	687b      	ldr	r3, [r7, #4]
    674e:	220a      	movs	r2, #10
    6750:	701a      	strb	r2, [r3, #0]
	config->address_enabled = false;
    6752:	687b      	ldr	r3, [r7, #4]
    6754:	2200      	movs	r2, #0
    6756:	705a      	strb	r2, [r3, #1]
	config->address         = 0;
    6758:	687b      	ldr	r3, [r7, #4]
    675a:	2200      	movs	r2, #0
    675c:	709a      	strb	r2, [r3, #2]
}
    675e:	46c0      	nop			; (mov r8, r8)
    6760:	46bd      	mov	sp, r7
    6762:	b002      	add	sp, #8
    6764:	bd80      	pop	{r7, pc}
	...

00006768 <spi_attach_slave>:
 *
 */
static inline void spi_attach_slave(
		struct spi_slave_inst *const slave,
		const struct spi_slave_inst_config *const config)
{
    6768:	b580      	push	{r7, lr}
    676a:	b084      	sub	sp, #16
    676c:	af00      	add	r7, sp, #0
    676e:	6078      	str	r0, [r7, #4]
    6770:	6039      	str	r1, [r7, #0]
	Assert(slave);
	Assert(config);

	slave->ss_pin          = config->ss_pin;
    6772:	683b      	ldr	r3, [r7, #0]
    6774:	781a      	ldrb	r2, [r3, #0]
    6776:	687b      	ldr	r3, [r7, #4]
    6778:	701a      	strb	r2, [r3, #0]
	slave->address_enabled = config->address_enabled;
    677a:	683b      	ldr	r3, [r7, #0]
    677c:	785a      	ldrb	r2, [r3, #1]
    677e:	687b      	ldr	r3, [r7, #4]
    6780:	705a      	strb	r2, [r3, #1]
	slave->address         = config->address;
    6782:	683b      	ldr	r3, [r7, #0]
    6784:	789a      	ldrb	r2, [r3, #2]
    6786:	687b      	ldr	r3, [r7, #4]
    6788:	709a      	strb	r2, [r3, #2]

	/* Get default config for pin */
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);
    678a:	230c      	movs	r3, #12
    678c:	18fb      	adds	r3, r7, r3
    678e:	0018      	movs	r0, r3
    6790:	4b0b      	ldr	r3, [pc, #44]	; (67c0 <spi_attach_slave+0x58>)
    6792:	4798      	blx	r3

	/* Edit config to set the pin as output */
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
    6794:	230c      	movs	r3, #12
    6796:	18fb      	adds	r3, r7, r3
    6798:	2201      	movs	r2, #1
    679a:	701a      	strb	r2, [r3, #0]

	/* Set config on Slave Select pin */
	port_pin_set_config(slave->ss_pin, &pin_conf);
    679c:	687b      	ldr	r3, [r7, #4]
    679e:	781b      	ldrb	r3, [r3, #0]
    67a0:	220c      	movs	r2, #12
    67a2:	18ba      	adds	r2, r7, r2
    67a4:	0011      	movs	r1, r2
    67a6:	0018      	movs	r0, r3
    67a8:	4b06      	ldr	r3, [pc, #24]	; (67c4 <spi_attach_slave+0x5c>)
    67aa:	4798      	blx	r3
	port_pin_set_output_level(slave->ss_pin, true);
    67ac:	687b      	ldr	r3, [r7, #4]
    67ae:	781b      	ldrb	r3, [r3, #0]
    67b0:	2101      	movs	r1, #1
    67b2:	0018      	movs	r0, r3
    67b4:	4b04      	ldr	r3, [pc, #16]	; (67c8 <spi_attach_slave+0x60>)
    67b6:	4798      	blx	r3
}
    67b8:	46c0      	nop			; (mov r8, r8)
    67ba:	46bd      	mov	sp, r7
    67bc:	b004      	add	sp, #16
    67be:	bd80      	pop	{r7, pc}
    67c0:	000065cd 	.word	0x000065cd
    67c4:	000001d1 	.word	0x000001d1
    67c8:	000065f1 	.word	0x000065f1

000067cc <spi_enable>:
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
static inline void spi_enable(
		struct spi_module *const module)
{
    67cc:	b580      	push	{r7, lr}
    67ce:	b084      	sub	sp, #16
    67d0:	af00      	add	r7, sp, #0
    67d2:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    67d4:	687b      	ldr	r3, [r7, #4]
    67d6:	681b      	ldr	r3, [r3, #0]
    67d8:	60fb      	str	r3, [r7, #12]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    67da:	687b      	ldr	r3, [r7, #4]
    67dc:	681b      	ldr	r3, [r3, #0]
    67de:	0018      	movs	r0, r3
    67e0:	4b0b      	ldr	r3, [pc, #44]	; (6810 <spi_enable+0x44>)
    67e2:	4798      	blx	r3
    67e4:	0003      	movs	r3, r0
    67e6:	0018      	movs	r0, r3
    67e8:	4b0a      	ldr	r3, [pc, #40]	; (6814 <spi_enable+0x48>)
    67ea:	4798      	blx	r3
#  endif

	while (spi_is_syncing(module)) {
    67ec:	46c0      	nop			; (mov r8, r8)
    67ee:	687b      	ldr	r3, [r7, #4]
    67f0:	0018      	movs	r0, r3
    67f2:	4b09      	ldr	r3, [pc, #36]	; (6818 <spi_enable+0x4c>)
    67f4:	4798      	blx	r3
    67f6:	1e03      	subs	r3, r0, #0
    67f8:	d1f9      	bne.n	67ee <spi_enable+0x22>
		/* Wait until the synchronization is complete */
	}

	/* Enable SPI */
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    67fa:	68fb      	ldr	r3, [r7, #12]
    67fc:	681b      	ldr	r3, [r3, #0]
    67fe:	2202      	movs	r2, #2
    6800:	431a      	orrs	r2, r3
    6802:	68fb      	ldr	r3, [r7, #12]
    6804:	601a      	str	r2, [r3, #0]
}
    6806:	46c0      	nop			; (mov r8, r8)
    6808:	46bd      	mov	sp, r7
    680a:	b004      	add	sp, #16
    680c:	bd80      	pop	{r7, pc}
    680e:	46c0      	nop			; (mov r8, r8)
    6810:	0000cea5 	.word	0x0000cea5
    6814:	00006645 	.word	0x00006645
    6818:	000066a1 	.word	0x000066a1

0000681c <spi_disable>:
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
static inline void spi_disable(
		struct spi_module *const module)
{
    681c:	b580      	push	{r7, lr}
    681e:	b084      	sub	sp, #16
    6820:	af00      	add	r7, sp, #0
    6822:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    6824:	687b      	ldr	r3, [r7, #4]
    6826:	681b      	ldr	r3, [r3, #0]
    6828:	60fb      	str	r3, [r7, #12]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
    682a:	687b      	ldr	r3, [r7, #4]
    682c:	681b      	ldr	r3, [r3, #0]
    682e:	0018      	movs	r0, r3
    6830:	4b0e      	ldr	r3, [pc, #56]	; (686c <spi_disable+0x50>)
    6832:	4798      	blx	r3
    6834:	0003      	movs	r3, r0
    6836:	0018      	movs	r0, r3
    6838:	4b0d      	ldr	r3, [pc, #52]	; (6870 <spi_disable+0x54>)
    683a:	4798      	blx	r3
#  endif

	while (spi_is_syncing(module)) {
    683c:	46c0      	nop			; (mov r8, r8)
    683e:	687b      	ldr	r3, [r7, #4]
    6840:	0018      	movs	r0, r3
    6842:	4b0c      	ldr	r3, [pc, #48]	; (6874 <spi_disable+0x58>)
    6844:	4798      	blx	r3
    6846:	1e03      	subs	r3, r0, #0
    6848:	d1f9      	bne.n	683e <spi_disable+0x22>
		/* Wait until the synchronization is complete */
	}

	/* Disbale interrupt */
	spi_module->INTENCLR.reg = SERCOM_SPI_INTENCLR_MASK;
    684a:	68fb      	ldr	r3, [r7, #12]
    684c:	228f      	movs	r2, #143	; 0x8f
    684e:	751a      	strb	r2, [r3, #20]
	/* Clear interrupt flag */
	spi_module->INTFLAG.reg = SERCOM_SPI_INTFLAG_MASK;
    6850:	68fb      	ldr	r3, [r7, #12]
    6852:	228f      	movs	r2, #143	; 0x8f
    6854:	761a      	strb	r2, [r3, #24]

	/* Disable SPI */
	spi_module->CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
    6856:	68fb      	ldr	r3, [r7, #12]
    6858:	681b      	ldr	r3, [r3, #0]
    685a:	2202      	movs	r2, #2
    685c:	4393      	bics	r3, r2
    685e:	001a      	movs	r2, r3
    6860:	68fb      	ldr	r3, [r7, #12]
    6862:	601a      	str	r2, [r3, #0]
}
    6864:	46c0      	nop			; (mov r8, r8)
    6866:	46bd      	mov	sp, r7
    6868:	b004      	add	sp, #16
    686a:	bd80      	pop	{r7, pc}
    686c:	0000cea5 	.word	0x0000cea5
    6870:	00006671 	.word	0x00006671
    6874:	000066a1 	.word	0x000066a1

00006878 <spi_is_write_complete>:
 *                has been drawn high for SPI slave
 * \retval false  If the SPI master module has not shifted out data
 */
static inline bool spi_is_write_complete(
		struct spi_module *const module)
{
    6878:	b580      	push	{r7, lr}
    687a:	b084      	sub	sp, #16
    687c:	af00      	add	r7, sp, #0
    687e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    6880:	687b      	ldr	r3, [r7, #4]
    6882:	681b      	ldr	r3, [r3, #0]
    6884:	60fb      	str	r3, [r7, #12]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    6886:	68fb      	ldr	r3, [r7, #12]
    6888:	7e1b      	ldrb	r3, [r3, #24]
    688a:	b2db      	uxtb	r3, r3
    688c:	001a      	movs	r2, r3
    688e:	2302      	movs	r3, #2
    6890:	4013      	ands	r3, r2
    6892:	1e5a      	subs	r2, r3, #1
    6894:	4193      	sbcs	r3, r2
    6896:	b2db      	uxtb	r3, r3
}
    6898:	0018      	movs	r0, r3
    689a:	46bd      	mov	sp, r7
    689c:	b004      	add	sp, #16
    689e:	bd80      	pop	{r7, pc}

000068a0 <spi_is_ready_to_write>:
 * \retval true   If the SPI module is ready to write data
 * \retval false  If the SPI module is not ready to write data
 */
static inline bool spi_is_ready_to_write(
		struct spi_module *const module)
{
    68a0:	b580      	push	{r7, lr}
    68a2:	b084      	sub	sp, #16
    68a4:	af00      	add	r7, sp, #0
    68a6:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    68a8:	687b      	ldr	r3, [r7, #4]
    68aa:	681b      	ldr	r3, [r3, #0]
    68ac:	60fb      	str	r3, [r7, #12]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    68ae:	68fb      	ldr	r3, [r7, #12]
    68b0:	7e1b      	ldrb	r3, [r3, #24]
    68b2:	b2db      	uxtb	r3, r3
    68b4:	001a      	movs	r2, r3
    68b6:	2301      	movs	r3, #1
    68b8:	4013      	ands	r3, r2
    68ba:	1e5a      	subs	r2, r3, #1
    68bc:	4193      	sbcs	r3, r2
    68be:	b2db      	uxtb	r3, r3
}
    68c0:	0018      	movs	r0, r3
    68c2:	46bd      	mov	sp, r7
    68c4:	b004      	add	sp, #16
    68c6:	bd80      	pop	{r7, pc}

000068c8 <spi_is_ready_to_read>:
 * \retval true   If the SPI module is ready to read data
 * \retval false  If the SPI module is not ready to read data
 */
static inline bool spi_is_ready_to_read(
		struct spi_module *const module)
{
    68c8:	b580      	push	{r7, lr}
    68ca:	b084      	sub	sp, #16
    68cc:	af00      	add	r7, sp, #0
    68ce:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    68d0:	687b      	ldr	r3, [r7, #4]
    68d2:	681b      	ldr	r3, [r3, #0]
    68d4:	60fb      	str	r3, [r7, #12]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    68d6:	68fb      	ldr	r3, [r7, #12]
    68d8:	7e1b      	ldrb	r3, [r3, #24]
    68da:	b2db      	uxtb	r3, r3
    68dc:	001a      	movs	r2, r3
    68de:	2304      	movs	r3, #4
    68e0:	4013      	ands	r3, r2
    68e2:	1e5a      	subs	r2, r3, #1
    68e4:	4193      	sbcs	r3, r2
    68e6:	b2db      	uxtb	r3, r3
}
    68e8:	0018      	movs	r0, r3
    68ea:	46bd      	mov	sp, r7
    68ec:	b004      	add	sp, #16
    68ee:	bd80      	pop	{r7, pc}

000068f0 <spi_write>:
 * \retval STATUS_BUSY  If the last write was not completed
 */
static inline enum status_code spi_write(
		struct spi_module *module,
		uint16_t tx_data)
{
    68f0:	b580      	push	{r7, lr}
    68f2:	b084      	sub	sp, #16
    68f4:	af00      	add	r7, sp, #0
    68f6:	6078      	str	r0, [r7, #4]
    68f8:	000a      	movs	r2, r1
    68fa:	1cbb      	adds	r3, r7, #2
    68fc:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    68fe:	687b      	ldr	r3, [r7, #4]
    6900:	681b      	ldr	r3, [r3, #0]
    6902:	60fb      	str	r3, [r7, #12]

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    6904:	687b      	ldr	r3, [r7, #4]
    6906:	0018      	movs	r0, r3
    6908:	4b0a      	ldr	r3, [pc, #40]	; (6934 <spi_write+0x44>)
    690a:	4798      	blx	r3
    690c:	0003      	movs	r3, r0
    690e:	001a      	movs	r2, r3
    6910:	2301      	movs	r3, #1
    6912:	4053      	eors	r3, r2
    6914:	b2db      	uxtb	r3, r3
    6916:	2b00      	cmp	r3, #0
    6918:	d001      	beq.n	691e <spi_write+0x2e>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
    691a:	2305      	movs	r3, #5
    691c:	e006      	b.n	692c <spi_write+0x3c>
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    691e:	1cbb      	adds	r3, r7, #2
    6920:	881b      	ldrh	r3, [r3, #0]
    6922:	05db      	lsls	r3, r3, #23
    6924:	0dda      	lsrs	r2, r3, #23
    6926:	68fb      	ldr	r3, [r7, #12]
    6928:	629a      	str	r2, [r3, #40]	; 0x28

	return STATUS_OK;
    692a:	2300      	movs	r3, #0
}
    692c:	0018      	movs	r0, r3
    692e:	46bd      	mov	sp, r7
    6930:	b004      	add	sp, #16
    6932:	bd80      	pop	{r7, pc}
    6934:	000068a1 	.word	0x000068a1

00006938 <spi_read>:
 * \retval STATUS_ERR_OVERFLOW  If the data is overflown
 */
static inline enum status_code spi_read(
		struct spi_module *const module,
		uint16_t *rx_data)
{
    6938:	b580      	push	{r7, lr}
    693a:	b084      	sub	sp, #16
    693c:	af00      	add	r7, sp, #0
    693e:	6078      	str	r0, [r7, #4]
    6940:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    6942:	687b      	ldr	r3, [r7, #4]
    6944:	681b      	ldr	r3, [r3, #0]
    6946:	60bb      	str	r3, [r7, #8]

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    6948:	687b      	ldr	r3, [r7, #4]
    694a:	0018      	movs	r0, r3
    694c:	4b1b      	ldr	r3, [pc, #108]	; (69bc <spi_read+0x84>)
    694e:	4798      	blx	r3
    6950:	0003      	movs	r3, r0
    6952:	001a      	movs	r2, r3
    6954:	2301      	movs	r3, #1
    6956:	4053      	eors	r3, r2
    6958:	b2db      	uxtb	r3, r3
    695a:	2b00      	cmp	r3, #0
    695c:	d001      	beq.n	6962 <spi_read+0x2a>
		/* No data has been received, return */
		return STATUS_ERR_IO;
    695e:	2310      	movs	r3, #16
    6960:	e027      	b.n	69b2 <spi_read+0x7a>
	}

	/* Return value */
	enum status_code retval = STATUS_OK;
    6962:	230f      	movs	r3, #15
    6964:	18fb      	adds	r3, r7, r3
    6966:	2200      	movs	r2, #0
    6968:	701a      	strb	r2, [r3, #0]

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    696a:	68bb      	ldr	r3, [r7, #8]
    696c:	8b5b      	ldrh	r3, [r3, #26]
    696e:	b29b      	uxth	r3, r3
    6970:	001a      	movs	r2, r3
    6972:	2304      	movs	r3, #4
    6974:	4013      	ands	r3, r2
    6976:	d006      	beq.n	6986 <spi_read+0x4e>
		retval = STATUS_ERR_OVERFLOW;
    6978:	230f      	movs	r3, #15
    697a:	18fb      	adds	r3, r7, r3
    697c:	221e      	movs	r2, #30
    697e:	701a      	strb	r2, [r3, #0]
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    6980:	68bb      	ldr	r3, [r7, #8]
    6982:	2204      	movs	r2, #4
    6984:	835a      	strh	r2, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    6986:	687b      	ldr	r3, [r7, #4]
    6988:	799b      	ldrb	r3, [r3, #6]
    698a:	2b01      	cmp	r3, #1
    698c:	d108      	bne.n	69a0 <spi_read+0x68>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    698e:	68bb      	ldr	r3, [r7, #8]
    6990:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6992:	b29b      	uxth	r3, r3
    6994:	05db      	lsls	r3, r3, #23
    6996:	0ddb      	lsrs	r3, r3, #23
    6998:	b29a      	uxth	r2, r3
    699a:	683b      	ldr	r3, [r7, #0]
    699c:	801a      	strh	r2, [r3, #0]
    699e:	e005      	b.n	69ac <spi_read+0x74>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    69a0:	68bb      	ldr	r3, [r7, #8]
    69a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    69a4:	b2db      	uxtb	r3, r3
    69a6:	b29a      	uxth	r2, r3
    69a8:	683b      	ldr	r3, [r7, #0]
    69aa:	801a      	strh	r2, [r3, #0]
	}

	return retval;
    69ac:	230f      	movs	r3, #15
    69ae:	18fb      	adds	r3, r7, r3
    69b0:	781b      	ldrb	r3, [r3, #0]
}
    69b2:	0018      	movs	r0, r3
    69b4:	46bd      	mov	sp, r7
    69b6:	b004      	add	sp, #16
    69b8:	bd80      	pop	{r7, pc}
    69ba:	46c0      	nop			; (mov r8, r8)
    69bc:	000068c9 	.word	0x000068c9

000069c0 <spi_rw>:

struct spi_module master;
struct spi_slave_inst slave_inst;

static sint8 spi_rw(uint8* pu8Mosi, uint8* pu8Miso, uint16 u16Sz)
{
    69c0:	b580      	push	{r7, lr}
    69c2:	b086      	sub	sp, #24
    69c4:	af00      	add	r7, sp, #0
    69c6:	60f8      	str	r0, [r7, #12]
    69c8:	60b9      	str	r1, [r7, #8]
    69ca:	1dbb      	adds	r3, r7, #6
    69cc:	801a      	strh	r2, [r3, #0]
	uint8 u8Dummy = 0;
    69ce:	2313      	movs	r3, #19
    69d0:	18fb      	adds	r3, r7, r3
    69d2:	2200      	movs	r2, #0
    69d4:	701a      	strb	r2, [r3, #0]
	uint8 u8SkipMosi = 0, u8SkipMiso = 0;
    69d6:	2317      	movs	r3, #23
    69d8:	18fb      	adds	r3, r7, r3
    69da:	2200      	movs	r2, #0
    69dc:	701a      	strb	r2, [r3, #0]
    69de:	2316      	movs	r3, #22
    69e0:	18fb      	adds	r3, r7, r3
    69e2:	2200      	movs	r2, #0
    69e4:	701a      	strb	r2, [r3, #0]
	uint16_t txd_data = 0;
    69e6:	2314      	movs	r3, #20
    69e8:	18fb      	adds	r3, r7, r3
    69ea:	2200      	movs	r2, #0
    69ec:	801a      	strh	r2, [r3, #0]
	uint16_t rxd_data = 0;
    69ee:	2310      	movs	r3, #16
    69f0:	18fb      	adds	r3, r7, r3
    69f2:	2200      	movs	r2, #0
    69f4:	801a      	strh	r2, [r3, #0]

	if(((pu8Miso == NULL) && (pu8Mosi == NULL)) ||(u16Sz == 0)) {
    69f6:	68bb      	ldr	r3, [r7, #8]
    69f8:	2b00      	cmp	r3, #0
    69fa:	d102      	bne.n	6a02 <spi_rw+0x42>
    69fc:	68fb      	ldr	r3, [r7, #12]
    69fe:	2b00      	cmp	r3, #0
    6a00:	d003      	beq.n	6a0a <spi_rw+0x4a>
    6a02:	1dbb      	adds	r3, r7, #6
    6a04:	881b      	ldrh	r3, [r3, #0]
    6a06:	2b00      	cmp	r3, #0
    6a08:	d102      	bne.n	6a10 <spi_rw+0x50>
		return M2M_ERR_INVALID_ARG;
    6a0a:	230f      	movs	r3, #15
    6a0c:	425b      	negs	r3, r3
    6a0e:	e07e      	b.n	6b0e <spi_rw+0x14e>
	}

	if (pu8Mosi == NULL) {
    6a10:	68fb      	ldr	r3, [r7, #12]
    6a12:	2b00      	cmp	r3, #0
    6a14:	d106      	bne.n	6a24 <spi_rw+0x64>
		pu8Mosi = &u8Dummy;
    6a16:	2313      	movs	r3, #19
    6a18:	18fb      	adds	r3, r7, r3
    6a1a:	60fb      	str	r3, [r7, #12]
		u8SkipMosi = 1;
    6a1c:	2317      	movs	r3, #23
    6a1e:	18fb      	adds	r3, r7, r3
    6a20:	2201      	movs	r2, #1
    6a22:	701a      	strb	r2, [r3, #0]
	}
	if(pu8Miso == NULL) {
    6a24:	68bb      	ldr	r3, [r7, #8]
    6a26:	2b00      	cmp	r3, #0
    6a28:	d106      	bne.n	6a38 <spi_rw+0x78>
		pu8Miso = &u8Dummy;
    6a2a:	2313      	movs	r3, #19
    6a2c:	18fb      	adds	r3, r7, r3
    6a2e:	60bb      	str	r3, [r7, #8]
		u8SkipMiso = 1;
    6a30:	2316      	movs	r3, #22
    6a32:	18fb      	adds	r3, r7, r3
    6a34:	2201      	movs	r2, #1
    6a36:	701a      	strb	r2, [r3, #0]
	}

	spi_select_slave(&master, &slave_inst, true);
    6a38:	4937      	ldr	r1, [pc, #220]	; (6b18 <spi_rw+0x158>)
    6a3a:	4b38      	ldr	r3, [pc, #224]	; (6b1c <spi_rw+0x15c>)
    6a3c:	2201      	movs	r2, #1
    6a3e:	0018      	movs	r0, r3
    6a40:	4b37      	ldr	r3, [pc, #220]	; (6b20 <spi_rw+0x160>)
    6a42:	4798      	blx	r3

	while (u16Sz) {
    6a44:	e04c      	b.n	6ae0 <spi_rw+0x120>
		txd_data = *pu8Mosi;
    6a46:	68fb      	ldr	r3, [r7, #12]
    6a48:	781a      	ldrb	r2, [r3, #0]
    6a4a:	2314      	movs	r3, #20
    6a4c:	18fb      	adds	r3, r7, r3
    6a4e:	801a      	strh	r2, [r3, #0]
		while (!spi_is_ready_to_write(&master))
    6a50:	46c0      	nop			; (mov r8, r8)
    6a52:	4b32      	ldr	r3, [pc, #200]	; (6b1c <spi_rw+0x15c>)
    6a54:	0018      	movs	r0, r3
    6a56:	4b33      	ldr	r3, [pc, #204]	; (6b24 <spi_rw+0x164>)
    6a58:	4798      	blx	r3
    6a5a:	0003      	movs	r3, r0
    6a5c:	001a      	movs	r2, r3
    6a5e:	2301      	movs	r3, #1
    6a60:	4053      	eors	r3, r2
    6a62:	b2db      	uxtb	r3, r3
    6a64:	2b00      	cmp	r3, #0
    6a66:	d1f4      	bne.n	6a52 <spi_rw+0x92>
			;
		while(spi_write(&master, txd_data) != STATUS_OK)
    6a68:	46c0      	nop			; (mov r8, r8)
    6a6a:	2314      	movs	r3, #20
    6a6c:	18fb      	adds	r3, r7, r3
    6a6e:	881a      	ldrh	r2, [r3, #0]
    6a70:	4b2a      	ldr	r3, [pc, #168]	; (6b1c <spi_rw+0x15c>)
    6a72:	0011      	movs	r1, r2
    6a74:	0018      	movs	r0, r3
    6a76:	4b2c      	ldr	r3, [pc, #176]	; (6b28 <spi_rw+0x168>)
    6a78:	4798      	blx	r3
    6a7a:	1e03      	subs	r3, r0, #0
    6a7c:	d1f5      	bne.n	6a6a <spi_rw+0xaa>
			;

		/* Read SPI master data register. */
		while (!spi_is_ready_to_read(&master))
    6a7e:	46c0      	nop			; (mov r8, r8)
    6a80:	4b26      	ldr	r3, [pc, #152]	; (6b1c <spi_rw+0x15c>)
    6a82:	0018      	movs	r0, r3
    6a84:	4b29      	ldr	r3, [pc, #164]	; (6b2c <spi_rw+0x16c>)
    6a86:	4798      	blx	r3
    6a88:	0003      	movs	r3, r0
    6a8a:	001a      	movs	r2, r3
    6a8c:	2301      	movs	r3, #1
    6a8e:	4053      	eors	r3, r2
    6a90:	b2db      	uxtb	r3, r3
    6a92:	2b00      	cmp	r3, #0
    6a94:	d1f4      	bne.n	6a80 <spi_rw+0xc0>
			;
		while (spi_read(&master, &rxd_data) != STATUS_OK)
    6a96:	46c0      	nop			; (mov r8, r8)
    6a98:	2310      	movs	r3, #16
    6a9a:	18fa      	adds	r2, r7, r3
    6a9c:	4b1f      	ldr	r3, [pc, #124]	; (6b1c <spi_rw+0x15c>)
    6a9e:	0011      	movs	r1, r2
    6aa0:	0018      	movs	r0, r3
    6aa2:	4b23      	ldr	r3, [pc, #140]	; (6b30 <spi_rw+0x170>)
    6aa4:	4798      	blx	r3
    6aa6:	1e03      	subs	r3, r0, #0
    6aa8:	d1f6      	bne.n	6a98 <spi_rw+0xd8>
			;
		*pu8Miso = rxd_data;
    6aaa:	2310      	movs	r3, #16
    6aac:	18fb      	adds	r3, r7, r3
    6aae:	881b      	ldrh	r3, [r3, #0]
    6ab0:	b2da      	uxtb	r2, r3
    6ab2:	68bb      	ldr	r3, [r7, #8]
    6ab4:	701a      	strb	r2, [r3, #0]
			
		u16Sz--;
    6ab6:	1dbb      	adds	r3, r7, #6
    6ab8:	881a      	ldrh	r2, [r3, #0]
    6aba:	1dbb      	adds	r3, r7, #6
    6abc:	3a01      	subs	r2, #1
    6abe:	801a      	strh	r2, [r3, #0]
		if (!u8SkipMiso)
    6ac0:	2316      	movs	r3, #22
    6ac2:	18fb      	adds	r3, r7, r3
    6ac4:	781b      	ldrb	r3, [r3, #0]
    6ac6:	2b00      	cmp	r3, #0
    6ac8:	d102      	bne.n	6ad0 <spi_rw+0x110>
			pu8Miso++;
    6aca:	68bb      	ldr	r3, [r7, #8]
    6acc:	3301      	adds	r3, #1
    6ace:	60bb      	str	r3, [r7, #8]
		if (!u8SkipMosi)
    6ad0:	2317      	movs	r3, #23
    6ad2:	18fb      	adds	r3, r7, r3
    6ad4:	781b      	ldrb	r3, [r3, #0]
    6ad6:	2b00      	cmp	r3, #0
    6ad8:	d102      	bne.n	6ae0 <spi_rw+0x120>
			pu8Mosi++;
    6ada:	68fb      	ldr	r3, [r7, #12]
    6adc:	3301      	adds	r3, #1
    6ade:	60fb      	str	r3, [r7, #12]
	while (u16Sz) {
    6ae0:	1dbb      	adds	r3, r7, #6
    6ae2:	881b      	ldrh	r3, [r3, #0]
    6ae4:	2b00      	cmp	r3, #0
    6ae6:	d1ae      	bne.n	6a46 <spi_rw+0x86>
	}

	while (!spi_is_write_complete(&master))
    6ae8:	46c0      	nop			; (mov r8, r8)
    6aea:	4b0c      	ldr	r3, [pc, #48]	; (6b1c <spi_rw+0x15c>)
    6aec:	0018      	movs	r0, r3
    6aee:	4b11      	ldr	r3, [pc, #68]	; (6b34 <spi_rw+0x174>)
    6af0:	4798      	blx	r3
    6af2:	0003      	movs	r3, r0
    6af4:	001a      	movs	r2, r3
    6af6:	2301      	movs	r3, #1
    6af8:	4053      	eors	r3, r2
    6afa:	b2db      	uxtb	r3, r3
    6afc:	2b00      	cmp	r3, #0
    6afe:	d1f4      	bne.n	6aea <spi_rw+0x12a>
		;

	spi_select_slave(&master, &slave_inst, false);
    6b00:	4905      	ldr	r1, [pc, #20]	; (6b18 <spi_rw+0x158>)
    6b02:	4b06      	ldr	r3, [pc, #24]	; (6b1c <spi_rw+0x15c>)
    6b04:	2200      	movs	r2, #0
    6b06:	0018      	movs	r0, r3
    6b08:	4b05      	ldr	r3, [pc, #20]	; (6b20 <spi_rw+0x160>)
    6b0a:	4798      	blx	r3

	return M2M_SUCCESS;
    6b0c:	2300      	movs	r3, #0
}
    6b0e:	0018      	movs	r0, r3
    6b10:	46bd      	mov	sp, r7
    6b12:	b006      	add	sp, #24
    6b14:	bd80      	pop	{r7, pc}
    6b16:	46c0      	nop			; (mov r8, r8)
    6b18:	200029f0 	.word	0x200029f0
    6b1c:	200029f4 	.word	0x200029f4
    6b20:	0000d5cd 	.word	0x0000d5cd
    6b24:	000068a1 	.word	0x000068a1
    6b28:	000068f1 	.word	0x000068f1
    6b2c:	000068c9 	.word	0x000068c9
    6b30:	00006939 	.word	0x00006939
    6b34:	00006879 	.word	0x00006879

00006b38 <nm_bus_init>:
*	@fn		nm_bus_init
*	@brief	Initialize the bus wrapper
*	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
*/
sint8 nm_bus_init(void *pvinit)
{
    6b38:	b580      	push	{r7, lr}
    6b3a:	b092      	sub	sp, #72	; 0x48
    6b3c:	af00      	add	r7, sp, #0
    6b3e:	6078      	str	r0, [r7, #4]
	sint8 result = M2M_SUCCESS;
    6b40:	2347      	movs	r3, #71	; 0x47
    6b42:	18fb      	adds	r3, r7, r3
    6b44:	2200      	movs	r2, #0
    6b46:	701a      	strb	r2, [r3, #0]
	struct spi_config config;
	struct spi_slave_inst_config slave_config;

	/* Select SPI slave CS pin. */
	/* This step will set the CS high */
	spi_slave_inst_get_config_defaults(&slave_config);
    6b48:	2308      	movs	r3, #8
    6b4a:	18fb      	adds	r3, r7, r3
    6b4c:	0018      	movs	r0, r3
    6b4e:	4b26      	ldr	r3, [pc, #152]	; (6be8 <nm_bus_init+0xb0>)
    6b50:	4798      	blx	r3
	slave_config.ss_pin = CONF_WINC_SPI_CS_PIN;
    6b52:	2308      	movs	r3, #8
    6b54:	18fb      	adds	r3, r7, r3
    6b56:	2205      	movs	r2, #5
    6b58:	701a      	strb	r2, [r3, #0]
	spi_attach_slave(&slave_inst, &slave_config);
    6b5a:	2308      	movs	r3, #8
    6b5c:	18fa      	adds	r2, r7, r3
    6b5e:	4b23      	ldr	r3, [pc, #140]	; (6bec <nm_bus_init+0xb4>)
    6b60:	0011      	movs	r1, r2
    6b62:	0018      	movs	r0, r3
    6b64:	4b22      	ldr	r3, [pc, #136]	; (6bf0 <nm_bus_init+0xb8>)
    6b66:	4798      	blx	r3

	/* Configure the SPI master. */
	spi_get_config_defaults(&config);
    6b68:	230c      	movs	r3, #12
    6b6a:	18fb      	adds	r3, r7, r3
    6b6c:	0018      	movs	r0, r3
    6b6e:	4b21      	ldr	r3, [pc, #132]	; (6bf4 <nm_bus_init+0xbc>)
    6b70:	4798      	blx	r3
	config.mux_setting = CONF_WINC_SPI_SERCOM_MUX;
    6b72:	230c      	movs	r3, #12
    6b74:	18fb      	adds	r3, r7, r3
    6b76:	2280      	movs	r2, #128	; 0x80
    6b78:	0252      	lsls	r2, r2, #9
    6b7a:	60da      	str	r2, [r3, #12]
	config.pinmux_pad0 = CONF_WINC_SPI_PINMUX_PAD0;
    6b7c:	230c      	movs	r3, #12
    6b7e:	18fb      	adds	r3, r7, r3
    6b80:	4a1d      	ldr	r2, [pc, #116]	; (6bf8 <nm_bus_init+0xc0>)
    6b82:	629a      	str	r2, [r3, #40]	; 0x28
	config.pinmux_pad1 = CONF_WINC_SPI_PINMUX_PAD1;
    6b84:	230c      	movs	r3, #12
    6b86:	18fb      	adds	r3, r7, r3
    6b88:	2201      	movs	r2, #1
    6b8a:	4252      	negs	r2, r2
    6b8c:	62da      	str	r2, [r3, #44]	; 0x2c
	config.pinmux_pad2 = CONF_WINC_SPI_PINMUX_PAD2;
    6b8e:	230c      	movs	r3, #12
    6b90:	18fb      	adds	r3, r7, r3
    6b92:	4a1a      	ldr	r2, [pc, #104]	; (6bfc <nm_bus_init+0xc4>)
    6b94:	631a      	str	r2, [r3, #48]	; 0x30
	config.pinmux_pad3 = CONF_WINC_SPI_PINMUX_PAD3;
    6b96:	230c      	movs	r3, #12
    6b98:	18fb      	adds	r3, r7, r3
    6b9a:	4a19      	ldr	r2, [pc, #100]	; (6c00 <nm_bus_init+0xc8>)
    6b9c:	635a      	str	r2, [r3, #52]	; 0x34
	config.master_slave_select_enable = false;
    6b9e:	230c      	movs	r3, #12
    6ba0:	18fb      	adds	r3, r7, r3
    6ba2:	2200      	movs	r2, #0
    6ba4:	751a      	strb	r2, [r3, #20]
	
	config.mode_specific.master.baudrate = CONF_WINC_SPI_CLOCK;
    6ba6:	230c      	movs	r3, #12
    6ba8:	18fb      	adds	r3, r7, r3
    6baa:	4a16      	ldr	r2, [pc, #88]	; (6c04 <nm_bus_init+0xcc>)
    6bac:	619a      	str	r2, [r3, #24]
	if (spi_init(&master, CONF_WINC_SPI_MODULE, &config) != STATUS_OK) {
    6bae:	230c      	movs	r3, #12
    6bb0:	18fa      	adds	r2, r7, r3
    6bb2:	4915      	ldr	r1, [pc, #84]	; (6c08 <nm_bus_init+0xd0>)
    6bb4:	4b15      	ldr	r3, [pc, #84]	; (6c0c <nm_bus_init+0xd4>)
    6bb6:	0018      	movs	r0, r3
    6bb8:	4b15      	ldr	r3, [pc, #84]	; (6c10 <nm_bus_init+0xd8>)
    6bba:	4798      	blx	r3
    6bbc:	1e03      	subs	r3, r0, #0
    6bbe:	d002      	beq.n	6bc6 <nm_bus_init+0x8e>
		return M2M_ERR_BUS_FAIL;
    6bc0:	2306      	movs	r3, #6
    6bc2:	425b      	negs	r3, r3
    6bc4:	e00c      	b.n	6be0 <nm_bus_init+0xa8>
	}

	/* Enable the SPI master. */
	spi_enable(&master);
    6bc6:	4b11      	ldr	r3, [pc, #68]	; (6c0c <nm_bus_init+0xd4>)
    6bc8:	0018      	movs	r0, r3
    6bca:	4b12      	ldr	r3, [pc, #72]	; (6c14 <nm_bus_init+0xdc>)
    6bcc:	4798      	blx	r3

	nm_bsp_reset();
    6bce:	4b12      	ldr	r3, [pc, #72]	; (6c18 <nm_bus_init+0xe0>)
    6bd0:	4798      	blx	r3
	nm_bsp_sleep(1);
    6bd2:	2001      	movs	r0, #1
    6bd4:	4b11      	ldr	r3, [pc, #68]	; (6c1c <nm_bus_init+0xe4>)
    6bd6:	4798      	blx	r3
#endif
	return result;
    6bd8:	2347      	movs	r3, #71	; 0x47
    6bda:	18fb      	adds	r3, r7, r3
    6bdc:	781b      	ldrb	r3, [r3, #0]
    6bde:	b25b      	sxtb	r3, r3
}
    6be0:	0018      	movs	r0, r3
    6be2:	46bd      	mov	sp, r7
    6be4:	b012      	add	sp, #72	; 0x48
    6be6:	bd80      	pop	{r7, pc}
    6be8:	00006745 	.word	0x00006745
    6bec:	200029f0 	.word	0x200029f0
    6bf0:	00006769 	.word	0x00006769
    6bf4:	000066c1 	.word	0x000066c1
    6bf8:	00040003 	.word	0x00040003
    6bfc:	00060003 	.word	0x00060003
    6c00:	00070003 	.word	0x00070003
    6c04:	00b71b00 	.word	0x00b71b00
    6c08:	42000800 	.word	0x42000800
    6c0c:	200029f4 	.word	0x200029f4
    6c10:	0000d43d 	.word	0x0000d43d
    6c14:	000067cd 	.word	0x000067cd
    6c18:	0000642d 	.word	0x0000642d
    6c1c:	00006471 	.word	0x00006471

00006c20 <nm_bus_ioctl>:
*					Arbitrary parameter depenging on IOCTL
*	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
*	@note	For SPI only, it's important to be able to send/receive at the same time
*/
sint8 nm_bus_ioctl(uint8 u8Cmd, void* pvParameter)
{
    6c20:	b590      	push	{r4, r7, lr}
    6c22:	b085      	sub	sp, #20
    6c24:	af00      	add	r7, sp, #0
    6c26:	0002      	movs	r2, r0
    6c28:	6039      	str	r1, [r7, #0]
    6c2a:	1dfb      	adds	r3, r7, #7
    6c2c:	701a      	strb	r2, [r3, #0]
	sint8 s8Ret = 0;
    6c2e:	230f      	movs	r3, #15
    6c30:	18fb      	adds	r3, r7, r3
    6c32:	2200      	movs	r2, #0
    6c34:	701a      	strb	r2, [r3, #0]
	switch(u8Cmd)
    6c36:	1dfb      	adds	r3, r7, #7
    6c38:	781b      	ldrb	r3, [r3, #0]
    6c3a:	2b03      	cmp	r3, #3
    6c3c:	d10f      	bne.n	6c5e <nm_bus_ioctl+0x3e>
			s8Ret = nm_i2c_write_special(pstrParam->pu8Buf1, pstrParam->u16Sz1, pstrParam->pu8Buf2, pstrParam->u16Sz2);
		}
		break;
#elif defined CONF_WINC_USE_SPI
		case NM_BUS_IOCTL_RW: {
			tstrNmSpiRw *pstrParam = (tstrNmSpiRw *)pvParameter;
    6c3e:	683b      	ldr	r3, [r7, #0]
    6c40:	60bb      	str	r3, [r7, #8]
			s8Ret = spi_rw(pstrParam->pu8InBuf, pstrParam->pu8OutBuf, pstrParam->u16Sz);
    6c42:	68bb      	ldr	r3, [r7, #8]
    6c44:	6818      	ldr	r0, [r3, #0]
    6c46:	68bb      	ldr	r3, [r7, #8]
    6c48:	6859      	ldr	r1, [r3, #4]
    6c4a:	68bb      	ldr	r3, [r7, #8]
    6c4c:	891b      	ldrh	r3, [r3, #8]
    6c4e:	220f      	movs	r2, #15
    6c50:	18bc      	adds	r4, r7, r2
    6c52:	001a      	movs	r2, r3
    6c54:	4b10      	ldr	r3, [pc, #64]	; (6c98 <nm_bus_ioctl+0x78>)
    6c56:	4798      	blx	r3
    6c58:	0003      	movs	r3, r0
    6c5a:	7023      	strb	r3, [r4, #0]
		}
		break;
    6c5c:	e013      	b.n	6c86 <nm_bus_ioctl+0x66>
#endif
		default:
			s8Ret = -1;
    6c5e:	230f      	movs	r3, #15
    6c60:	18fb      	adds	r3, r7, r3
    6c62:	22ff      	movs	r2, #255	; 0xff
    6c64:	701a      	strb	r2, [r3, #0]
			M2M_ERR("invalide ioclt cmd\n");
    6c66:	230e      	movs	r3, #14
    6c68:	33ff      	adds	r3, #255	; 0xff
    6c6a:	001a      	movs	r2, r3
    6c6c:	490b      	ldr	r1, [pc, #44]	; (6c9c <nm_bus_ioctl+0x7c>)
    6c6e:	4b0c      	ldr	r3, [pc, #48]	; (6ca0 <nm_bus_ioctl+0x80>)
    6c70:	0018      	movs	r0, r3
    6c72:	4b0c      	ldr	r3, [pc, #48]	; (6ca4 <nm_bus_ioctl+0x84>)
    6c74:	4798      	blx	r3
    6c76:	4b0c      	ldr	r3, [pc, #48]	; (6ca8 <nm_bus_ioctl+0x88>)
    6c78:	0018      	movs	r0, r3
    6c7a:	4b0c      	ldr	r3, [pc, #48]	; (6cac <nm_bus_ioctl+0x8c>)
    6c7c:	4798      	blx	r3
    6c7e:	200d      	movs	r0, #13
    6c80:	4b0b      	ldr	r3, [pc, #44]	; (6cb0 <nm_bus_ioctl+0x90>)
    6c82:	4798      	blx	r3
			break;
    6c84:	46c0      	nop			; (mov r8, r8)
	}

	return s8Ret;
    6c86:	230f      	movs	r3, #15
    6c88:	18fb      	adds	r3, r7, r3
    6c8a:	781b      	ldrb	r3, [r3, #0]
    6c8c:	b25b      	sxtb	r3, r3
}
    6c8e:	0018      	movs	r0, r3
    6c90:	46bd      	mov	sp, r7
    6c92:	b005      	add	sp, #20
    6c94:	bd90      	pop	{r4, r7, pc}
    6c96:	46c0      	nop			; (mov r8, r8)
    6c98:	000069c1 	.word	0x000069c1
    6c9c:	0001f88c 	.word	0x0001f88c
    6ca0:	0001f864 	.word	0x0001f864
    6ca4:	0001c2d5 	.word	0x0001c2d5
    6ca8:	0001f878 	.word	0x0001f878
    6cac:	0001c3f1 	.word	0x0001c3f1
    6cb0:	0001c309 	.word	0x0001c309

00006cb4 <nm_bus_deinit>:
/*
*	@fn		nm_bus_deinit
*	@brief	De-initialize the bus wrapper
*/
sint8 nm_bus_deinit(void)
{
    6cb4:	b580      	push	{r7, lr}
    6cb6:	b082      	sub	sp, #8
    6cb8:	af00      	add	r7, sp, #0
	sint8 result = M2M_SUCCESS;
    6cba:	1dfb      	adds	r3, r7, #7
    6cbc:	2200      	movs	r2, #0
    6cbe:	701a      	strb	r2, [r3, #0]
	struct port_config pin_conf;
		
	port_get_config_defaults(&pin_conf);
    6cc0:	1d3b      	adds	r3, r7, #4
    6cc2:	0018      	movs	r0, r3
    6cc4:	4b13      	ldr	r3, [pc, #76]	; (6d14 <nm_bus_deinit+0x60>)
    6cc6:	4798      	blx	r3
	/* Configure control pins as input no pull up. */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
    6cc8:	1d3b      	adds	r3, r7, #4
    6cca:	2200      	movs	r2, #0
    6ccc:	701a      	strb	r2, [r3, #0]
	pin_conf.input_pull = PORT_PIN_PULL_NONE;
    6cce:	1d3b      	adds	r3, r7, #4
    6cd0:	2200      	movs	r2, #0
    6cd2:	705a      	strb	r2, [r3, #1]
	i2c_master_disable(&i2c_master_instance);
	port_pin_set_config(CONF_WINC_I2C_SCL, &pin_conf);
	port_pin_set_config(CONF_WINC_I2C_SDA, &pin_conf);
#endif /* CONF_WINC_USE_I2C */
#ifdef CONF_WINC_USE_SPI
	spi_disable(&master);
    6cd4:	4b10      	ldr	r3, [pc, #64]	; (6d18 <nm_bus_deinit+0x64>)
    6cd6:	0018      	movs	r0, r3
    6cd8:	4b10      	ldr	r3, [pc, #64]	; (6d1c <nm_bus_deinit+0x68>)
    6cda:	4798      	blx	r3
	port_pin_set_config(CONF_WINC_SPI_MOSI, &pin_conf);
    6cdc:	1d3b      	adds	r3, r7, #4
    6cde:	0019      	movs	r1, r3
    6ce0:	2006      	movs	r0, #6
    6ce2:	4b0f      	ldr	r3, [pc, #60]	; (6d20 <nm_bus_deinit+0x6c>)
    6ce4:	4798      	blx	r3
	port_pin_set_config(CONF_WINC_SPI_MISO, &pin_conf);
    6ce6:	1d3b      	adds	r3, r7, #4
    6ce8:	0019      	movs	r1, r3
    6cea:	2004      	movs	r0, #4
    6cec:	4b0c      	ldr	r3, [pc, #48]	; (6d20 <nm_bus_deinit+0x6c>)
    6cee:	4798      	blx	r3
	port_pin_set_config(CONF_WINC_SPI_SCK,  &pin_conf);
    6cf0:	1d3b      	adds	r3, r7, #4
    6cf2:	0019      	movs	r1, r3
    6cf4:	2007      	movs	r0, #7
    6cf6:	4b0a      	ldr	r3, [pc, #40]	; (6d20 <nm_bus_deinit+0x6c>)
    6cf8:	4798      	blx	r3
	port_pin_set_config(CONF_WINC_SPI_SS,   &pin_conf);
    6cfa:	1d3b      	adds	r3, r7, #4
    6cfc:	0019      	movs	r1, r3
    6cfe:	2005      	movs	r0, #5
    6d00:	4b07      	ldr	r3, [pc, #28]	; (6d20 <nm_bus_deinit+0x6c>)
    6d02:	4798      	blx	r3
	//port_pin_set_output_level(CONF_WINC_SPI_MOSI, false);
	//port_pin_set_output_level(CONF_WINC_SPI_MISO, false);
	//port_pin_set_output_level(CONF_WINC_SPI_SCK,  false);
	//port_pin_set_output_level(CONF_WINC_SPI_SS,   false);
#endif /* CONF_WINC_USE_SPI */
	return result;
    6d04:	1dfb      	adds	r3, r7, #7
    6d06:	781b      	ldrb	r3, [r3, #0]
    6d08:	b25b      	sxtb	r3, r3
}
    6d0a:	0018      	movs	r0, r3
    6d0c:	46bd      	mov	sp, r7
    6d0e:	b002      	add	sp, #8
    6d10:	bd80      	pop	{r7, pc}
    6d12:	46c0      	nop			; (mov r8, r8)
    6d14:	000065cd 	.word	0x000065cd
    6d18:	200029f4 	.word	0x200029f4
    6d1c:	0000681d 	.word	0x0000681d
    6d20:	000001d1 	.word	0x000001d1

00006d24 <m2m_memcpy>:
 *
 */
#include "common/include/nm_common.h"

void m2m_memcpy(uint8* pDst,uint8* pSrc,uint32 sz)
{
    6d24:	b580      	push	{r7, lr}
    6d26:	b084      	sub	sp, #16
    6d28:	af00      	add	r7, sp, #0
    6d2a:	60f8      	str	r0, [r7, #12]
    6d2c:	60b9      	str	r1, [r7, #8]
    6d2e:	607a      	str	r2, [r7, #4]
	if(sz == 0) return;
    6d30:	687b      	ldr	r3, [r7, #4]
    6d32:	2b00      	cmp	r3, #0
    6d34:	d010      	beq.n	6d58 <m2m_memcpy+0x34>
	do
	{
		*pDst = *pSrc;
    6d36:	68bb      	ldr	r3, [r7, #8]
    6d38:	781a      	ldrb	r2, [r3, #0]
    6d3a:	68fb      	ldr	r3, [r7, #12]
    6d3c:	701a      	strb	r2, [r3, #0]
		pDst++;
    6d3e:	68fb      	ldr	r3, [r7, #12]
    6d40:	3301      	adds	r3, #1
    6d42:	60fb      	str	r3, [r7, #12]
		pSrc++;
    6d44:	68bb      	ldr	r3, [r7, #8]
    6d46:	3301      	adds	r3, #1
    6d48:	60bb      	str	r3, [r7, #8]
	}while(--sz);
    6d4a:	687b      	ldr	r3, [r7, #4]
    6d4c:	3b01      	subs	r3, #1
    6d4e:	607b      	str	r3, [r7, #4]
    6d50:	687b      	ldr	r3, [r7, #4]
    6d52:	2b00      	cmp	r3, #0
    6d54:	d1ef      	bne.n	6d36 <m2m_memcpy+0x12>
    6d56:	e000      	b.n	6d5a <m2m_memcpy+0x36>
	if(sz == 0) return;
    6d58:	46c0      	nop			; (mov r8, r8)
}
    6d5a:	46bd      	mov	sp, r7
    6d5c:	b004      	add	sp, #16
    6d5e:	bd80      	pop	{r7, pc}

00006d60 <m2m_memset>:

	return cs;
}

void m2m_memset(uint8* pBuf,uint8 val,uint32 sz)
{
    6d60:	b580      	push	{r7, lr}
    6d62:	b084      	sub	sp, #16
    6d64:	af00      	add	r7, sp, #0
    6d66:	60f8      	str	r0, [r7, #12]
    6d68:	607a      	str	r2, [r7, #4]
    6d6a:	230b      	movs	r3, #11
    6d6c:	18fb      	adds	r3, r7, r3
    6d6e:	1c0a      	adds	r2, r1, #0
    6d70:	701a      	strb	r2, [r3, #0]
	if(sz == 0) return;
    6d72:	687b      	ldr	r3, [r7, #4]
    6d74:	2b00      	cmp	r3, #0
    6d76:	d00e      	beq.n	6d96 <m2m_memset+0x36>
	do
	{
		*pBuf = val;
    6d78:	68fb      	ldr	r3, [r7, #12]
    6d7a:	220b      	movs	r2, #11
    6d7c:	18ba      	adds	r2, r7, r2
    6d7e:	7812      	ldrb	r2, [r2, #0]
    6d80:	701a      	strb	r2, [r3, #0]
		pBuf++;
    6d82:	68fb      	ldr	r3, [r7, #12]
    6d84:	3301      	adds	r3, #1
    6d86:	60fb      	str	r3, [r7, #12]
	}while(--sz);
    6d88:	687b      	ldr	r3, [r7, #4]
    6d8a:	3b01      	subs	r3, #1
    6d8c:	607b      	str	r3, [r7, #4]
    6d8e:	687b      	ldr	r3, [r7, #4]
    6d90:	2b00      	cmp	r3, #0
    6d92:	d1f1      	bne.n	6d78 <m2m_memset+0x18>
    6d94:	e000      	b.n	6d98 <m2m_memset+0x38>
	if(sz == 0) return;
    6d96:	46c0      	nop			; (mov r8, r8)
}
    6d98:	46bd      	mov	sp, r7
    6d9a:	b004      	add	sp, #16
    6d9c:	bd80      	pop	{r7, pc}

00006d9e <m2m_strlen>:

uint16 m2m_strlen(uint8 * pcStr)
{
    6d9e:	b580      	push	{r7, lr}
    6da0:	b084      	sub	sp, #16
    6da2:	af00      	add	r7, sp, #0
    6da4:	6078      	str	r0, [r7, #4]
	uint16	u16StrLen = 0;
    6da6:	230e      	movs	r3, #14
    6da8:	18fb      	adds	r3, r7, r3
    6daa:	2200      	movs	r2, #0
    6dac:	801a      	strh	r2, [r3, #0]
	while(*pcStr)
    6dae:	e009      	b.n	6dc4 <m2m_strlen+0x26>
	{
		u16StrLen ++;
    6db0:	230e      	movs	r3, #14
    6db2:	18fb      	adds	r3, r7, r3
    6db4:	881a      	ldrh	r2, [r3, #0]
    6db6:	230e      	movs	r3, #14
    6db8:	18fb      	adds	r3, r7, r3
    6dba:	3201      	adds	r2, #1
    6dbc:	801a      	strh	r2, [r3, #0]
		pcStr++;
    6dbe:	687b      	ldr	r3, [r7, #4]
    6dc0:	3301      	adds	r3, #1
    6dc2:	607b      	str	r3, [r7, #4]
	while(*pcStr)
    6dc4:	687b      	ldr	r3, [r7, #4]
    6dc6:	781b      	ldrb	r3, [r3, #0]
    6dc8:	2b00      	cmp	r3, #0
    6dca:	d1f1      	bne.n	6db0 <m2m_strlen+0x12>
	}
	return u16StrLen;
    6dcc:	230e      	movs	r3, #14
    6dce:	18fb      	adds	r3, r7, r3
    6dd0:	881b      	ldrh	r3, [r3, #0]
}
    6dd2:	0018      	movs	r0, r3
    6dd4:	46bd      	mov	sp, r7
    6dd6:	b004      	add	sp, #16
    6dd8:	bd80      	pop	{r7, pc}
	...

00006ddc <isr>:
}tstrHifContext;

volatile tstrHifContext gstrHifCxt;

static void isr(void)
{
    6ddc:	b580      	push	{r7, lr}
    6dde:	af00      	add	r7, sp, #0
	gstrHifCxt.u8Interrupt++;
    6de0:	4b04      	ldr	r3, [pc, #16]	; (6df4 <isr+0x18>)
    6de2:	78db      	ldrb	r3, [r3, #3]
    6de4:	b2db      	uxtb	r3, r3
    6de6:	3301      	adds	r3, #1
    6de8:	b2da      	uxtb	r2, r3
    6dea:	4b02      	ldr	r3, [pc, #8]	; (6df4 <isr+0x18>)
    6dec:	70da      	strb	r2, [r3, #3]
#ifdef NM_LEVEL_INTERRUPT
	nm_bsp_interrupt_ctrl(0);
#endif
}
    6dee:	46c0      	nop			; (mov r8, r8)
    6df0:	46bd      	mov	sp, r7
    6df2:	bd80      	pop	{r7, pc}
    6df4:	20002a30 	.word	0x20002a30

00006df8 <hif_set_rx_done>:
static sint8 hif_set_rx_done(void)
{
    6df8:	b590      	push	{r4, r7, lr}
    6dfa:	b083      	sub	sp, #12
    6dfc:	af00      	add	r7, sp, #0
	uint32 reg;
	sint8 ret = M2M_SUCCESS;
    6dfe:	1dfb      	adds	r3, r7, #7
    6e00:	2200      	movs	r2, #0
    6e02:	701a      	strb	r2, [r3, #0]

	gstrHifCxt.u8HifRXDone = 0;
    6e04:	4b14      	ldr	r3, [pc, #80]	; (6e58 <hif_set_rx_done+0x60>)
    6e06:	2200      	movs	r2, #0
    6e08:	709a      	strb	r2, [r3, #2]
#ifdef NM_EDGE_INTERRUPT
	nm_bsp_interrupt_ctrl(1);
    6e0a:	2001      	movs	r0, #1
    6e0c:	4b13      	ldr	r3, [pc, #76]	; (6e5c <hif_set_rx_done+0x64>)
    6e0e:	4798      	blx	r3
#endif
	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0,&reg);
    6e10:	1dfc      	adds	r4, r7, #7
    6e12:	003b      	movs	r3, r7
    6e14:	4a12      	ldr	r2, [pc, #72]	; (6e60 <hif_set_rx_done+0x68>)
    6e16:	0019      	movs	r1, r3
    6e18:	0010      	movs	r0, r2
    6e1a:	4b12      	ldr	r3, [pc, #72]	; (6e64 <hif_set_rx_done+0x6c>)
    6e1c:	4798      	blx	r3
    6e1e:	0003      	movs	r3, r0
    6e20:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS)goto ERR1;
    6e22:	1dfb      	adds	r3, r7, #7
    6e24:	781b      	ldrb	r3, [r3, #0]
    6e26:	b25b      	sxtb	r3, r3
    6e28:	2b00      	cmp	r3, #0
    6e2a:	d10d      	bne.n	6e48 <hif_set_rx_done+0x50>
	/* Set RX Done */
	reg |= NBIT1;
    6e2c:	683b      	ldr	r3, [r7, #0]
    6e2e:	2202      	movs	r2, #2
    6e30:	4313      	orrs	r3, r2
    6e32:	603b      	str	r3, [r7, #0]
	ret = nm_write_reg(WIFI_HOST_RCV_CTRL_0,reg);
    6e34:	683b      	ldr	r3, [r7, #0]
    6e36:	1dfc      	adds	r4, r7, #7
    6e38:	4a09      	ldr	r2, [pc, #36]	; (6e60 <hif_set_rx_done+0x68>)
    6e3a:	0019      	movs	r1, r3
    6e3c:	0010      	movs	r0, r2
    6e3e:	4b0a      	ldr	r3, [pc, #40]	; (6e68 <hif_set_rx_done+0x70>)
    6e40:	4798      	blx	r3
    6e42:	0003      	movs	r3, r0
    6e44:	7023      	strb	r3, [r4, #0]
    6e46:	e000      	b.n	6e4a <hif_set_rx_done+0x52>
	if(ret != M2M_SUCCESS)goto ERR1;
    6e48:	46c0      	nop			; (mov r8, r8)
	if(ret != M2M_SUCCESS)goto ERR1;
#ifdef NM_LEVEL_INTERRUPT
	nm_bsp_interrupt_ctrl(1);
#endif
ERR1:
	return ret;
    6e4a:	1dfb      	adds	r3, r7, #7
    6e4c:	781b      	ldrb	r3, [r3, #0]
    6e4e:	b25b      	sxtb	r3, r3

}
    6e50:	0018      	movs	r0, r3
    6e52:	46bd      	mov	sp, r7
    6e54:	b003      	add	sp, #12
    6e56:	bd90      	pop	{r4, r7, pc}
    6e58:	20002a30 	.word	0x20002a30
    6e5c:	00006511 	.word	0x00006511
    6e60:	00001070 	.word	0x00001070
    6e64:	00009155 	.word	0x00009155
    6e68:	00009179 	.word	0x00009179

00006e6c <m2m_hif_cb>:
*	@author
*	@date
*	@version	1.0
*/
static void m2m_hif_cb(uint8 u8OpCode, uint16 u16DataSize, uint32 u32Addr)
{
    6e6c:	b580      	push	{r7, lr}
    6e6e:	b082      	sub	sp, #8
    6e70:	af00      	add	r7, sp, #0
    6e72:	603a      	str	r2, [r7, #0]
    6e74:	1dfb      	adds	r3, r7, #7
    6e76:	1c02      	adds	r2, r0, #0
    6e78:	701a      	strb	r2, [r3, #0]
    6e7a:	1d3b      	adds	r3, r7, #4
    6e7c:	1c0a      	adds	r2, r1, #0
    6e7e:	801a      	strh	r2, [r3, #0]


}
    6e80:	46c0      	nop			; (mov r8, r8)
    6e82:	46bd      	mov	sp, r7
    6e84:	b002      	add	sp, #8
    6e86:	bd80      	pop	{r7, pc}

00006e88 <hif_chip_wake>:
*	@brief	To Wakeup the chip.
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_wake(void)
{
    6e88:	b590      	push	{r4, r7, lr}
    6e8a:	b083      	sub	sp, #12
    6e8c:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;
    6e8e:	1dfb      	adds	r3, r7, #7
    6e90:	2200      	movs	r2, #0
    6e92:	701a      	strb	r2, [r3, #0]
	if(gstrHifCxt.u8HifRXDone)
    6e94:	4b16      	ldr	r3, [pc, #88]	; (6ef0 <hif_chip_wake+0x68>)
    6e96:	789b      	ldrb	r3, [r3, #2]
    6e98:	b2db      	uxtb	r3, r3
    6e9a:	2b00      	cmp	r3, #0
    6e9c:	d003      	beq.n	6ea6 <hif_chip_wake+0x1e>
	{
		/*chip already wake for the rx not done no need to send wake request*/
		return ret;
    6e9e:	1dfb      	adds	r3, r7, #7
    6ea0:	781b      	ldrb	r3, [r3, #0]
    6ea2:	b25b      	sxtb	r3, r3
    6ea4:	e01f      	b.n	6ee6 <hif_chip_wake+0x5e>
	}
	if(gstrHifCxt.u8ChipSleep == 0)
    6ea6:	4b12      	ldr	r3, [pc, #72]	; (6ef0 <hif_chip_wake+0x68>)
    6ea8:	785b      	ldrb	r3, [r3, #1]
    6eaa:	b2db      	uxtb	r3, r3
    6eac:	2b00      	cmp	r3, #0
    6eae:	d10e      	bne.n	6ece <hif_chip_wake+0x46>
	{
		if(gstrHifCxt.u8ChipMode != M2M_NO_PS)
    6eb0:	4b0f      	ldr	r3, [pc, #60]	; (6ef0 <hif_chip_wake+0x68>)
    6eb2:	781b      	ldrb	r3, [r3, #0]
    6eb4:	b2db      	uxtb	r3, r3
    6eb6:	2b00      	cmp	r3, #0
    6eb8:	d009      	beq.n	6ece <hif_chip_wake+0x46>
		{
			ret = chip_wake();
    6eba:	1dfc      	adds	r4, r7, #7
    6ebc:	4b0d      	ldr	r3, [pc, #52]	; (6ef4 <hif_chip_wake+0x6c>)
    6ebe:	4798      	blx	r3
    6ec0:	0003      	movs	r3, r0
    6ec2:	7023      	strb	r3, [r4, #0]
			if(ret != M2M_SUCCESS)goto ERR1;
    6ec4:	1dfb      	adds	r3, r7, #7
    6ec6:	781b      	ldrb	r3, [r3, #0]
    6ec8:	b25b      	sxtb	r3, r3
    6eca:	2b00      	cmp	r3, #0
    6ecc:	d107      	bne.n	6ede <hif_chip_wake+0x56>
		}
		else
		{
		}
	}
	gstrHifCxt.u8ChipSleep++;
    6ece:	4b08      	ldr	r3, [pc, #32]	; (6ef0 <hif_chip_wake+0x68>)
    6ed0:	785b      	ldrb	r3, [r3, #1]
    6ed2:	b2db      	uxtb	r3, r3
    6ed4:	3301      	adds	r3, #1
    6ed6:	b2da      	uxtb	r2, r3
    6ed8:	4b05      	ldr	r3, [pc, #20]	; (6ef0 <hif_chip_wake+0x68>)
    6eda:	705a      	strb	r2, [r3, #1]
    6edc:	e000      	b.n	6ee0 <hif_chip_wake+0x58>
			if(ret != M2M_SUCCESS)goto ERR1;
    6ede:	46c0      	nop			; (mov r8, r8)
ERR1:
	return ret;
    6ee0:	1dfb      	adds	r3, r7, #7
    6ee2:	781b      	ldrb	r3, [r3, #0]
    6ee4:	b25b      	sxtb	r3, r3
}
    6ee6:	0018      	movs	r0, r3
    6ee8:	46bd      	mov	sp, r7
    6eea:	b003      	add	sp, #12
    6eec:	bd90      	pop	{r4, r7, pc}
    6eee:	46c0      	nop			; (mov r8, r8)
    6ef0:	20002a30 	.word	0x20002a30
    6ef4:	00008b45 	.word	0x00008b45

00006ef8 <hif_chip_sleep_sc>:
*	@brief	To clear the chip sleep but keep the chip sleep
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_sleep_sc(void)
{
    6ef8:	b580      	push	{r7, lr}
    6efa:	af00      	add	r7, sp, #0
	if(gstrHifCxt.u8ChipSleep >= 1)
    6efc:	4b07      	ldr	r3, [pc, #28]	; (6f1c <hif_chip_sleep_sc+0x24>)
    6efe:	785b      	ldrb	r3, [r3, #1]
    6f00:	b2db      	uxtb	r3, r3
    6f02:	2b00      	cmp	r3, #0
    6f04:	d006      	beq.n	6f14 <hif_chip_sleep_sc+0x1c>
	{
		gstrHifCxt.u8ChipSleep--;
    6f06:	4b05      	ldr	r3, [pc, #20]	; (6f1c <hif_chip_sleep_sc+0x24>)
    6f08:	785b      	ldrb	r3, [r3, #1]
    6f0a:	b2db      	uxtb	r3, r3
    6f0c:	3b01      	subs	r3, #1
    6f0e:	b2da      	uxtb	r2, r3
    6f10:	4b02      	ldr	r3, [pc, #8]	; (6f1c <hif_chip_sleep_sc+0x24>)
    6f12:	705a      	strb	r2, [r3, #1]
	}
	return M2M_SUCCESS;
    6f14:	2300      	movs	r3, #0
}
    6f16:	0018      	movs	r0, r3
    6f18:	46bd      	mov	sp, r7
    6f1a:	bd80      	pop	{r7, pc}
    6f1c:	20002a30 	.word	0x20002a30

00006f20 <hif_chip_sleep>:
*	@brief	To make the chip sleep.
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_sleep(void)
{
    6f20:	b590      	push	{r4, r7, lr}
    6f22:	b083      	sub	sp, #12
    6f24:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;
    6f26:	1dfb      	adds	r3, r7, #7
    6f28:	2200      	movs	r2, #0
    6f2a:	701a      	strb	r2, [r3, #0]

	if(gstrHifCxt.u8ChipSleep >= 1)
    6f2c:	4b10      	ldr	r3, [pc, #64]	; (6f70 <hif_chip_sleep+0x50>)
    6f2e:	785b      	ldrb	r3, [r3, #1]
    6f30:	b2db      	uxtb	r3, r3
    6f32:	2b00      	cmp	r3, #0
    6f34:	d006      	beq.n	6f44 <hif_chip_sleep+0x24>
	{
		gstrHifCxt.u8ChipSleep--;
    6f36:	4b0e      	ldr	r3, [pc, #56]	; (6f70 <hif_chip_sleep+0x50>)
    6f38:	785b      	ldrb	r3, [r3, #1]
    6f3a:	b2db      	uxtb	r3, r3
    6f3c:	3b01      	subs	r3, #1
    6f3e:	b2da      	uxtb	r2, r3
    6f40:	4b0b      	ldr	r3, [pc, #44]	; (6f70 <hif_chip_sleep+0x50>)
    6f42:	705a      	strb	r2, [r3, #1]
	}
	
	if(gstrHifCxt.u8ChipSleep == 0)
    6f44:	4b0a      	ldr	r3, [pc, #40]	; (6f70 <hif_chip_sleep+0x50>)
    6f46:	785b      	ldrb	r3, [r3, #1]
    6f48:	b2db      	uxtb	r3, r3
    6f4a:	2b00      	cmp	r3, #0
    6f4c:	d109      	bne.n	6f62 <hif_chip_sleep+0x42>
	{
		if(gstrHifCxt.u8ChipMode != M2M_NO_PS)
    6f4e:	4b08      	ldr	r3, [pc, #32]	; (6f70 <hif_chip_sleep+0x50>)
    6f50:	781b      	ldrb	r3, [r3, #0]
    6f52:	b2db      	uxtb	r3, r3
    6f54:	2b00      	cmp	r3, #0
    6f56:	d004      	beq.n	6f62 <hif_chip_sleep+0x42>
		{
			ret = chip_sleep();
    6f58:	1dfc      	adds	r4, r7, #7
    6f5a:	4b06      	ldr	r3, [pc, #24]	; (6f74 <hif_chip_sleep+0x54>)
    6f5c:	4798      	blx	r3
    6f5e:	0003      	movs	r3, r0
    6f60:	7023      	strb	r3, [r4, #0]
		else
		{
		}
	}
ERR1:
	return ret;
    6f62:	1dfb      	adds	r3, r7, #7
    6f64:	781b      	ldrb	r3, [r3, #0]
    6f66:	b25b      	sxtb	r3, r3
}
    6f68:	0018      	movs	r0, r3
    6f6a:	46bd      	mov	sp, r7
    6f6c:	b003      	add	sp, #12
    6f6e:	bd90      	pop	{r4, r7, pc}
    6f70:	20002a30 	.word	0x20002a30
    6f74:	00008a6d 	.word	0x00008a6d

00006f78 <hif_init>:
*				Pointer to the arguments.
*   @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_init(void * arg)
{
    6f78:	b580      	push	{r7, lr}
    6f7a:	b082      	sub	sp, #8
    6f7c:	af00      	add	r7, sp, #0
    6f7e:	6078      	str	r0, [r7, #4]
	m2m_memset((uint8*)&gstrHifCxt,0,sizeof(tstrHifContext));
    6f80:	4b09      	ldr	r3, [pc, #36]	; (6fa8 <hif_init+0x30>)
    6f82:	2228      	movs	r2, #40	; 0x28
    6f84:	2100      	movs	r1, #0
    6f86:	0018      	movs	r0, r3
    6f88:	4b08      	ldr	r3, [pc, #32]	; (6fac <hif_init+0x34>)
    6f8a:	4798      	blx	r3
	nm_bsp_register_isr(isr);
    6f8c:	4b08      	ldr	r3, [pc, #32]	; (6fb0 <hif_init+0x38>)
    6f8e:	0018      	movs	r0, r3
    6f90:	4b08      	ldr	r3, [pc, #32]	; (6fb4 <hif_init+0x3c>)
    6f92:	4798      	blx	r3
	hif_register_cb(M2M_REQ_GROUP_HIF,m2m_hif_cb);
    6f94:	4b08      	ldr	r3, [pc, #32]	; (6fb8 <hif_init+0x40>)
    6f96:	0019      	movs	r1, r3
    6f98:	2003      	movs	r0, #3
    6f9a:	4b08      	ldr	r3, [pc, #32]	; (6fbc <hif_init+0x44>)
    6f9c:	4798      	blx	r3
	return M2M_SUCCESS;
    6f9e:	2300      	movs	r3, #0
}
    6fa0:	0018      	movs	r0, r3
    6fa2:	46bd      	mov	sp, r7
    6fa4:	b002      	add	sp, #8
    6fa6:	bd80      	pop	{r7, pc}
    6fa8:	20002a30 	.word	0x20002a30
    6fac:	00006d61 	.word	0x00006d61
    6fb0:	00006ddd 	.word	0x00006ddd
    6fb4:	00006499 	.word	0x00006499
    6fb8:	00006e6d 	.word	0x00006e6d
    6fbc:	00007a35 	.word	0x00007a35

00006fc0 <hif_send>:
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_send(uint8 u8Gid,uint8 u8Opcode,uint8 *pu8CtrlBuf,uint16 u16CtrlBufSize,
			   uint8 *pu8DataBuf,uint16 u16DataSize, uint16 u16DataOffset)
{
    6fc0:	b590      	push	{r4, r7, lr}
    6fc2:	b089      	sub	sp, #36	; 0x24
    6fc4:	af00      	add	r7, sp, #0
    6fc6:	0004      	movs	r4, r0
    6fc8:	0008      	movs	r0, r1
    6fca:	603a      	str	r2, [r7, #0]
    6fcc:	0019      	movs	r1, r3
    6fce:	1dfb      	adds	r3, r7, #7
    6fd0:	1c22      	adds	r2, r4, #0
    6fd2:	701a      	strb	r2, [r3, #0]
    6fd4:	1dbb      	adds	r3, r7, #6
    6fd6:	1c02      	adds	r2, r0, #0
    6fd8:	701a      	strb	r2, [r3, #0]
    6fda:	1d3b      	adds	r3, r7, #4
    6fdc:	1c0a      	adds	r2, r1, #0
    6fde:	801a      	strh	r2, [r3, #0]
	sint8		ret = M2M_ERR_SEND;
    6fe0:	231f      	movs	r3, #31
    6fe2:	18fb      	adds	r3, r7, r3
    6fe4:	22ff      	movs	r2, #255	; 0xff
    6fe6:	701a      	strb	r2, [r3, #0]
	volatile tstrHifHdr	strHif;

	strHif.u8Opcode		= u8Opcode&(~NBIT7);
    6fe8:	1dbb      	adds	r3, r7, #6
    6fea:	781b      	ldrb	r3, [r3, #0]
    6fec:	227f      	movs	r2, #127	; 0x7f
    6fee:	4013      	ands	r3, r2
    6ff0:	b2da      	uxtb	r2, r3
    6ff2:	2318      	movs	r3, #24
    6ff4:	18fb      	adds	r3, r7, r3
    6ff6:	705a      	strb	r2, [r3, #1]
	strHif.u8Gid		= u8Gid;
    6ff8:	2318      	movs	r3, #24
    6ffa:	18fb      	adds	r3, r7, r3
    6ffc:	1dfa      	adds	r2, r7, #7
    6ffe:	7812      	ldrb	r2, [r2, #0]
    7000:	701a      	strb	r2, [r3, #0]
	strHif.u16Length	= M2M_HIF_HDR_OFFSET;
    7002:	2318      	movs	r3, #24
    7004:	18fb      	adds	r3, r7, r3
    7006:	2208      	movs	r2, #8
    7008:	805a      	strh	r2, [r3, #2]
	if(pu8DataBuf != NULL)
    700a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    700c:	2b00      	cmp	r3, #0
    700e:	d011      	beq.n	7034 <hif_send+0x74>
	{
		strHif.u16Length += u16DataOffset + u16DataSize;
    7010:	2318      	movs	r3, #24
    7012:	18fb      	adds	r3, r7, r3
    7014:	885b      	ldrh	r3, [r3, #2]
    7016:	b29a      	uxth	r2, r3
    7018:	2338      	movs	r3, #56	; 0x38
    701a:	18f9      	adds	r1, r7, r3
    701c:	2334      	movs	r3, #52	; 0x34
    701e:	18fb      	adds	r3, r7, r3
    7020:	8809      	ldrh	r1, [r1, #0]
    7022:	881b      	ldrh	r3, [r3, #0]
    7024:	18cb      	adds	r3, r1, r3
    7026:	b29b      	uxth	r3, r3
    7028:	18d3      	adds	r3, r2, r3
    702a:	b29a      	uxth	r2, r3
    702c:	2318      	movs	r3, #24
    702e:	18fb      	adds	r3, r7, r3
    7030:	805a      	strh	r2, [r3, #2]
    7032:	e00a      	b.n	704a <hif_send+0x8a>
	}
	else
	{
		strHif.u16Length += u16CtrlBufSize;
    7034:	2318      	movs	r3, #24
    7036:	18fb      	adds	r3, r7, r3
    7038:	885b      	ldrh	r3, [r3, #2]
    703a:	b29a      	uxth	r2, r3
    703c:	1d3b      	adds	r3, r7, #4
    703e:	881b      	ldrh	r3, [r3, #0]
    7040:	18d3      	adds	r3, r2, r3
    7042:	b29a      	uxth	r2, r3
    7044:	2318      	movs	r3, #24
    7046:	18fb      	adds	r3, r7, r3
    7048:	805a      	strh	r2, [r3, #2]
	}
	ret = hif_chip_wake();
    704a:	231f      	movs	r3, #31
    704c:	18fc      	adds	r4, r7, r3
    704e:	4bb0      	ldr	r3, [pc, #704]	; (7310 <hif_send+0x350>)
    7050:	4798      	blx	r3
    7052:	0003      	movs	r3, r0
    7054:	7023      	strb	r3, [r4, #0]
	if(ret == M2M_SUCCESS)
    7056:	231f      	movs	r3, #31
    7058:	18fb      	adds	r3, r7, r3
    705a:	781b      	ldrb	r3, [r3, #0]
    705c:	b25b      	sxtb	r3, r3
    705e:	2b00      	cmp	r3, #0
    7060:	d000      	beq.n	7064 <hif_send+0xa4>
    7062:	e127      	b.n	72b4 <hif_send+0x2f4>
	{
		volatile uint32 reg, dma_addr = 0;
    7064:	2300      	movs	r3, #0
    7066:	613b      	str	r3, [r7, #16]
		volatile uint16 cnt = 0;
    7068:	230e      	movs	r3, #14
    706a:	18fb      	adds	r3, r7, r3
    706c:	2200      	movs	r2, #0
    706e:	801a      	strh	r2, [r3, #0]
//#define OPTIMIZE_BUS 
/*please define in firmware also*/
#ifndef OPTIMIZE_BUS
		reg = 0UL;
    7070:	2300      	movs	r3, #0
    7072:	617b      	str	r3, [r7, #20]
		reg |= (uint32)u8Gid;
    7074:	1dfb      	adds	r3, r7, #7
    7076:	781a      	ldrb	r2, [r3, #0]
    7078:	697b      	ldr	r3, [r7, #20]
    707a:	4313      	orrs	r3, r2
    707c:	617b      	str	r3, [r7, #20]
		reg |= ((uint32)u8Opcode<<8);
    707e:	1dbb      	adds	r3, r7, #6
    7080:	781b      	ldrb	r3, [r3, #0]
    7082:	021a      	lsls	r2, r3, #8
    7084:	697b      	ldr	r3, [r7, #20]
    7086:	4313      	orrs	r3, r2
    7088:	617b      	str	r3, [r7, #20]
		reg |= ((uint32)strHif.u16Length<<16);
    708a:	2318      	movs	r3, #24
    708c:	18fb      	adds	r3, r7, r3
    708e:	885b      	ldrh	r3, [r3, #2]
    7090:	b29b      	uxth	r3, r3
    7092:	041a      	lsls	r2, r3, #16
    7094:	697b      	ldr	r3, [r7, #20]
    7096:	4313      	orrs	r3, r2
    7098:	617b      	str	r3, [r7, #20]
		ret = nm_write_reg(NMI_STATE_REG,reg);
    709a:	697b      	ldr	r3, [r7, #20]
    709c:	221f      	movs	r2, #31
    709e:	18bc      	adds	r4, r7, r2
    70a0:	4a9c      	ldr	r2, [pc, #624]	; (7314 <hif_send+0x354>)
    70a2:	0019      	movs	r1, r3
    70a4:	0010      	movs	r0, r2
    70a6:	4b9c      	ldr	r3, [pc, #624]	; (7318 <hif_send+0x358>)
    70a8:	4798      	blx	r3
    70aa:	0003      	movs	r3, r0
    70ac:	7023      	strb	r3, [r4, #0]
		if(M2M_SUCCESS != ret) goto ERR1;
    70ae:	231f      	movs	r3, #31
    70b0:	18fb      	adds	r3, r7, r3
    70b2:	781b      	ldrb	r3, [r3, #0]
    70b4:	b25b      	sxtb	r3, r3
    70b6:	2b00      	cmp	r3, #0
    70b8:	d000      	beq.n	70bc <hif_send+0xfc>
    70ba:	e115      	b.n	72e8 <hif_send+0x328>

		reg = 0UL;
    70bc:	2300      	movs	r3, #0
    70be:	617b      	str	r3, [r7, #20]
		reg |= NBIT1;
    70c0:	697b      	ldr	r3, [r7, #20]
    70c2:	2202      	movs	r2, #2
    70c4:	4313      	orrs	r3, r2
    70c6:	617b      	str	r3, [r7, #20]
		ret = nm_write_reg(WIFI_HOST_RCV_CTRL_2, reg);
    70c8:	697b      	ldr	r3, [r7, #20]
    70ca:	221f      	movs	r2, #31
    70cc:	18bc      	adds	r4, r7, r2
    70ce:	4a93      	ldr	r2, [pc, #588]	; (731c <hif_send+0x35c>)
    70d0:	0019      	movs	r1, r3
    70d2:	0010      	movs	r0, r2
    70d4:	4b90      	ldr	r3, [pc, #576]	; (7318 <hif_send+0x358>)
    70d6:	4798      	blx	r3
    70d8:	0003      	movs	r3, r0
    70da:	7023      	strb	r3, [r4, #0]
		if(M2M_SUCCESS != ret) goto ERR1;
    70dc:	231f      	movs	r3, #31
    70de:	18fb      	adds	r3, r7, r3
    70e0:	781b      	ldrb	r3, [r3, #0]
    70e2:	b25b      	sxtb	r3, r3
    70e4:	2b00      	cmp	r3, #0
    70e6:	d000      	beq.n	70ea <hif_send+0x12a>
    70e8:	e100      	b.n	72ec <hif_send+0x32c>
		reg |= (u8Gid == M2M_REQ_GROUP_IP) ? (NBIT3):(0); /*IP = 1 or non IP*/
		reg |= ((uint32)strHif.u16Length << 4); /*length of pkt max = 4096*/
		ret = nm_write_reg(WIFI_HOST_RCV_CTRL_2, reg);
		if(M2M_SUCCESS != ret) goto ERR1;
#endif
		dma_addr = 0;
    70ea:	2300      	movs	r3, #0
    70ec:	613b      	str	r3, [r7, #16]
		
		for(cnt = 0; cnt < 1000; cnt ++)
    70ee:	230e      	movs	r3, #14
    70f0:	18fb      	adds	r3, r7, r3
    70f2:	2200      	movs	r2, #0
    70f4:	801a      	strh	r2, [r3, #0]
    70f6:	e04f      	b.n	7198 <hif_send+0x1d8>
		{
			ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_2,(uint32 *)&reg);
    70f8:	231f      	movs	r3, #31
    70fa:	18fc      	adds	r4, r7, r3
    70fc:	2314      	movs	r3, #20
    70fe:	18fb      	adds	r3, r7, r3
    7100:	4a86      	ldr	r2, [pc, #536]	; (731c <hif_send+0x35c>)
    7102:	0019      	movs	r1, r3
    7104:	0010      	movs	r0, r2
    7106:	4b86      	ldr	r3, [pc, #536]	; (7320 <hif_send+0x360>)
    7108:	4798      	blx	r3
    710a:	0003      	movs	r3, r0
    710c:	7023      	strb	r3, [r4, #0]
			if(ret != M2M_SUCCESS) break;
    710e:	231f      	movs	r3, #31
    7110:	18fb      	adds	r3, r7, r3
    7112:	781b      	ldrb	r3, [r3, #0]
    7114:	b25b      	sxtb	r3, r3
    7116:	2b00      	cmp	r3, #0
    7118:	d146      	bne.n	71a8 <hif_send+0x1e8>
			/*
			 * If it takes too long to get a response, the slow down to 
			 * avoid back-to-back register read operations.
			 */
			if(cnt >= 500) {
    711a:	230e      	movs	r3, #14
    711c:	18fb      	adds	r3, r7, r3
    711e:	881b      	ldrh	r3, [r3, #0]
    7120:	b29a      	uxth	r2, r3
    7122:	23f4      	movs	r3, #244	; 0xf4
    7124:	33ff      	adds	r3, #255	; 0xff
    7126:	429a      	cmp	r2, r3
    7128:	d915      	bls.n	7156 <hif_send+0x196>
				if(cnt < 501) {
    712a:	230e      	movs	r3, #14
    712c:	18fb      	adds	r3, r7, r3
    712e:	881b      	ldrh	r3, [r3, #0]
    7130:	b29a      	uxth	r2, r3
    7132:	23fa      	movs	r3, #250	; 0xfa
    7134:	005b      	lsls	r3, r3, #1
    7136:	429a      	cmp	r2, r3
    7138:	d80a      	bhi.n	7150 <hif_send+0x190>
					M2M_INFO("Slowing down...\n");
    713a:	4b7a      	ldr	r3, [pc, #488]	; (7324 <hif_send+0x364>)
    713c:	0018      	movs	r0, r3
    713e:	4b7a      	ldr	r3, [pc, #488]	; (7328 <hif_send+0x368>)
    7140:	4798      	blx	r3
    7142:	4b7a      	ldr	r3, [pc, #488]	; (732c <hif_send+0x36c>)
    7144:	0018      	movs	r0, r3
    7146:	4b7a      	ldr	r3, [pc, #488]	; (7330 <hif_send+0x370>)
    7148:	4798      	blx	r3
    714a:	200d      	movs	r0, #13
    714c:	4b79      	ldr	r3, [pc, #484]	; (7334 <hif_send+0x374>)
    714e:	4798      	blx	r3
				}
				nm_bsp_sleep(1);
    7150:	2001      	movs	r0, #1
    7152:	4b79      	ldr	r3, [pc, #484]	; (7338 <hif_send+0x378>)
    7154:	4798      	blx	r3
			}
			if (!(reg & NBIT1))
    7156:	697b      	ldr	r3, [r7, #20]
    7158:	2202      	movs	r2, #2
    715a:	4013      	ands	r3, r2
    715c:	d113      	bne.n	7186 <hif_send+0x1c6>
			{
				ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_4,(uint32 *)&dma_addr);
    715e:	231f      	movs	r3, #31
    7160:	18fc      	adds	r4, r7, r3
    7162:	2310      	movs	r3, #16
    7164:	18fb      	adds	r3, r7, r3
    7166:	4a75      	ldr	r2, [pc, #468]	; (733c <hif_send+0x37c>)
    7168:	0019      	movs	r1, r3
    716a:	0010      	movs	r0, r2
    716c:	4b6c      	ldr	r3, [pc, #432]	; (7320 <hif_send+0x360>)
    716e:	4798      	blx	r3
    7170:	0003      	movs	r3, r0
    7172:	7023      	strb	r3, [r4, #0]
				if(ret != M2M_SUCCESS) {
    7174:	231f      	movs	r3, #31
    7176:	18fb      	adds	r3, r7, r3
    7178:	781b      	ldrb	r3, [r3, #0]
    717a:	b25b      	sxtb	r3, r3
    717c:	2b00      	cmp	r3, #0
    717e:	d015      	beq.n	71ac <hif_send+0x1ec>
					/*in case of read error clear the DMA address and return error*/
					dma_addr = 0;
    7180:	2300      	movs	r3, #0
    7182:	613b      	str	r3, [r7, #16]
					goto ERR1;
    7184:	e0b9      	b.n	72fa <hif_send+0x33a>
		for(cnt = 0; cnt < 1000; cnt ++)
    7186:	230e      	movs	r3, #14
    7188:	18fb      	adds	r3, r7, r3
    718a:	881b      	ldrh	r3, [r3, #0]
    718c:	b29b      	uxth	r3, r3
    718e:	3301      	adds	r3, #1
    7190:	b29a      	uxth	r2, r3
    7192:	230e      	movs	r3, #14
    7194:	18fb      	adds	r3, r7, r3
    7196:	801a      	strh	r2, [r3, #0]
    7198:	230e      	movs	r3, #14
    719a:	18fb      	adds	r3, r7, r3
    719c:	881b      	ldrh	r3, [r3, #0]
    719e:	b29b      	uxth	r3, r3
    71a0:	4a67      	ldr	r2, [pc, #412]	; (7340 <hif_send+0x380>)
    71a2:	4293      	cmp	r3, r2
    71a4:	d9a8      	bls.n	70f8 <hif_send+0x138>
    71a6:	e002      	b.n	71ae <hif_send+0x1ee>
			if(ret != M2M_SUCCESS) break;
    71a8:	46c0      	nop			; (mov r8, r8)
    71aa:	e000      	b.n	71ae <hif_send+0x1ee>
				}
				/*in case of success break */
				break;
    71ac:	46c0      	nop			; (mov r8, r8)
			}
		}

		if (dma_addr != 0)
    71ae:	693b      	ldr	r3, [r7, #16]
    71b0:	2b00      	cmp	r3, #0
    71b2:	d100      	bne.n	71b6 <hif_send+0x1f6>
    71b4:	e073      	b.n	729e <hif_send+0x2de>
		{
			volatile uint32	u32CurrAddr;
			u32CurrAddr = dma_addr;
    71b6:	693b      	ldr	r3, [r7, #16]
    71b8:	60bb      	str	r3, [r7, #8]
			strHif.u16Length=NM_BSP_B_L_16(strHif.u16Length);
    71ba:	2318      	movs	r3, #24
    71bc:	18fb      	adds	r3, r7, r3
    71be:	885b      	ldrh	r3, [r3, #2]
    71c0:	b29a      	uxth	r2, r3
    71c2:	2318      	movs	r3, #24
    71c4:	18fb      	adds	r3, r7, r3
    71c6:	805a      	strh	r2, [r3, #2]
			ret = nm_write_block(u32CurrAddr, (uint8*)&strHif, M2M_HIF_HDR_OFFSET);
    71c8:	68bb      	ldr	r3, [r7, #8]
    71ca:	221f      	movs	r2, #31
    71cc:	18bc      	adds	r4, r7, r2
    71ce:	2218      	movs	r2, #24
    71d0:	18b9      	adds	r1, r7, r2
    71d2:	2208      	movs	r2, #8
    71d4:	0018      	movs	r0, r3
    71d6:	4b5b      	ldr	r3, [pc, #364]	; (7344 <hif_send+0x384>)
    71d8:	4798      	blx	r3
    71da:	0003      	movs	r3, r0
    71dc:	7023      	strb	r3, [r4, #0]
			if(M2M_SUCCESS != ret) goto ERR1;
    71de:	231f      	movs	r3, #31
    71e0:	18fb      	adds	r3, r7, r3
    71e2:	781b      	ldrb	r3, [r3, #0]
    71e4:	b25b      	sxtb	r3, r3
    71e6:	2b00      	cmp	r3, #0
    71e8:	d000      	beq.n	71ec <hif_send+0x22c>
    71ea:	e081      	b.n	72f0 <hif_send+0x330>
			u32CurrAddr += M2M_HIF_HDR_OFFSET;
    71ec:	68bb      	ldr	r3, [r7, #8]
    71ee:	3308      	adds	r3, #8
    71f0:	60bb      	str	r3, [r7, #8]
			if(pu8CtrlBuf != NULL)
    71f2:	683b      	ldr	r3, [r7, #0]
    71f4:	2b00      	cmp	r3, #0
    71f6:	d015      	beq.n	7224 <hif_send+0x264>
			{
				ret = nm_write_block(u32CurrAddr, pu8CtrlBuf, u16CtrlBufSize);
    71f8:	68b8      	ldr	r0, [r7, #8]
    71fa:	1d3b      	adds	r3, r7, #4
    71fc:	881a      	ldrh	r2, [r3, #0]
    71fe:	231f      	movs	r3, #31
    7200:	18fc      	adds	r4, r7, r3
    7202:	683b      	ldr	r3, [r7, #0]
    7204:	0019      	movs	r1, r3
    7206:	4b4f      	ldr	r3, [pc, #316]	; (7344 <hif_send+0x384>)
    7208:	4798      	blx	r3
    720a:	0003      	movs	r3, r0
    720c:	7023      	strb	r3, [r4, #0]
				if(M2M_SUCCESS != ret) goto ERR1;
    720e:	231f      	movs	r3, #31
    7210:	18fb      	adds	r3, r7, r3
    7212:	781b      	ldrb	r3, [r3, #0]
    7214:	b25b      	sxtb	r3, r3
    7216:	2b00      	cmp	r3, #0
    7218:	d16c      	bne.n	72f4 <hif_send+0x334>
				u32CurrAddr += u16CtrlBufSize;
    721a:	1d3b      	adds	r3, r7, #4
    721c:	881a      	ldrh	r2, [r3, #0]
    721e:	68bb      	ldr	r3, [r7, #8]
    7220:	18d3      	adds	r3, r2, r3
    7222:	60bb      	str	r3, [r7, #8]
			}
			if(pu8DataBuf != NULL)
    7224:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    7226:	2b00      	cmp	r3, #0
    7228:	d021      	beq.n	726e <hif_send+0x2ae>
			{
				u32CurrAddr += (u16DataOffset - u16CtrlBufSize);
    722a:	2338      	movs	r3, #56	; 0x38
    722c:	18fb      	adds	r3, r7, r3
    722e:	881a      	ldrh	r2, [r3, #0]
    7230:	1d3b      	adds	r3, r7, #4
    7232:	881b      	ldrh	r3, [r3, #0]
    7234:	1ad3      	subs	r3, r2, r3
    7236:	001a      	movs	r2, r3
    7238:	68bb      	ldr	r3, [r7, #8]
    723a:	18d3      	adds	r3, r2, r3
    723c:	60bb      	str	r3, [r7, #8]
				ret = nm_write_block(u32CurrAddr, pu8DataBuf, u16DataSize);
    723e:	68b8      	ldr	r0, [r7, #8]
    7240:	2334      	movs	r3, #52	; 0x34
    7242:	18fb      	adds	r3, r7, r3
    7244:	881a      	ldrh	r2, [r3, #0]
    7246:	231f      	movs	r3, #31
    7248:	18fc      	adds	r4, r7, r3
    724a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    724c:	0019      	movs	r1, r3
    724e:	4b3d      	ldr	r3, [pc, #244]	; (7344 <hif_send+0x384>)
    7250:	4798      	blx	r3
    7252:	0003      	movs	r3, r0
    7254:	7023      	strb	r3, [r4, #0]
				if(M2M_SUCCESS != ret) goto ERR1;
    7256:	231f      	movs	r3, #31
    7258:	18fb      	adds	r3, r7, r3
    725a:	781b      	ldrb	r3, [r3, #0]
    725c:	b25b      	sxtb	r3, r3
    725e:	2b00      	cmp	r3, #0
    7260:	d14a      	bne.n	72f8 <hif_send+0x338>
				u32CurrAddr += u16DataSize;
    7262:	2334      	movs	r3, #52	; 0x34
    7264:	18fb      	adds	r3, r7, r3
    7266:	881a      	ldrh	r2, [r3, #0]
    7268:	68bb      	ldr	r3, [r7, #8]
    726a:	18d3      	adds	r3, r2, r3
    726c:	60bb      	str	r3, [r7, #8]
			}

			reg = dma_addr << 2;
    726e:	693b      	ldr	r3, [r7, #16]
    7270:	009b      	lsls	r3, r3, #2
    7272:	617b      	str	r3, [r7, #20]
			reg |= NBIT1;
    7274:	697b      	ldr	r3, [r7, #20]
    7276:	2202      	movs	r2, #2
    7278:	4313      	orrs	r3, r2
    727a:	617b      	str	r3, [r7, #20]
			ret = nm_write_reg(WIFI_HOST_RCV_CTRL_3, reg);
    727c:	697b      	ldr	r3, [r7, #20]
    727e:	221f      	movs	r2, #31
    7280:	18bc      	adds	r4, r7, r2
    7282:	4a31      	ldr	r2, [pc, #196]	; (7348 <hif_send+0x388>)
    7284:	0019      	movs	r1, r3
    7286:	0010      	movs	r0, r2
    7288:	4b23      	ldr	r3, [pc, #140]	; (7318 <hif_send+0x358>)
    728a:	4798      	blx	r3
    728c:	0003      	movs	r3, r0
    728e:	7023      	strb	r3, [r4, #0]
			if(M2M_SUCCESS != ret) goto ERR1;
    7290:	231f      	movs	r3, #31
    7292:	18fb      	adds	r3, r7, r3
    7294:	781b      	ldrb	r3, [r3, #0]
    7296:	b25b      	sxtb	r3, r3
    7298:	2b00      	cmp	r3, #0
    729a:	d01a      	beq.n	72d2 <hif_send+0x312>
    729c:	e02d      	b.n	72fa <hif_send+0x33a>
		}
		else
		{
			ret = hif_chip_sleep();
    729e:	231f      	movs	r3, #31
    72a0:	18fc      	adds	r4, r7, r3
    72a2:	4b2a      	ldr	r3, [pc, #168]	; (734c <hif_send+0x38c>)
    72a4:	4798      	blx	r3
    72a6:	0003      	movs	r3, r0
    72a8:	7023      	strb	r3, [r4, #0]
			M2M_DBG("Failed to alloc rx size %d\r",ret);
			ret = M2M_ERR_MEM_ALLOC;
    72aa:	231f      	movs	r3, #31
    72ac:	18fb      	adds	r3, r7, r3
    72ae:	22fd      	movs	r2, #253	; 0xfd
    72b0:	701a      	strb	r2, [r3, #0]
			goto ERR2;
    72b2:	e024      	b.n	72fe <hif_send+0x33e>
		}

	}
	else
	{
		M2M_ERR("(HIF)Fail to wakup the chip\n");
    72b4:	23cb      	movs	r3, #203	; 0xcb
    72b6:	005a      	lsls	r2, r3, #1
    72b8:	4925      	ldr	r1, [pc, #148]	; (7350 <hif_send+0x390>)
    72ba:	4b26      	ldr	r3, [pc, #152]	; (7354 <hif_send+0x394>)
    72bc:	0018      	movs	r0, r3
    72be:	4b1a      	ldr	r3, [pc, #104]	; (7328 <hif_send+0x368>)
    72c0:	4798      	blx	r3
    72c2:	4b25      	ldr	r3, [pc, #148]	; (7358 <hif_send+0x398>)
    72c4:	0018      	movs	r0, r3
    72c6:	4b1a      	ldr	r3, [pc, #104]	; (7330 <hif_send+0x370>)
    72c8:	4798      	blx	r3
    72ca:	200d      	movs	r0, #13
    72cc:	4b19      	ldr	r3, [pc, #100]	; (7334 <hif_send+0x374>)
    72ce:	4798      	blx	r3
		goto ERR2;
    72d0:	e015      	b.n	72fe <hif_send+0x33e>
	}
	/*actual sleep ret = M2M_SUCCESS*/
 	ret = hif_chip_sleep();
    72d2:	231f      	movs	r3, #31
    72d4:	18fc      	adds	r4, r7, r3
    72d6:	4b1d      	ldr	r3, [pc, #116]	; (734c <hif_send+0x38c>)
    72d8:	4798      	blx	r3
    72da:	0003      	movs	r3, r0
    72dc:	7023      	strb	r3, [r4, #0]
	return ret;
    72de:	231f      	movs	r3, #31
    72e0:	18fb      	adds	r3, r7, r3
    72e2:	781b      	ldrb	r3, [r3, #0]
    72e4:	b25b      	sxtb	r3, r3
    72e6:	e00e      	b.n	7306 <hif_send+0x346>
		if(M2M_SUCCESS != ret) goto ERR1;
    72e8:	46c0      	nop			; (mov r8, r8)
    72ea:	e006      	b.n	72fa <hif_send+0x33a>
		if(M2M_SUCCESS != ret) goto ERR1;
    72ec:	46c0      	nop			; (mov r8, r8)
    72ee:	e004      	b.n	72fa <hif_send+0x33a>
			if(M2M_SUCCESS != ret) goto ERR1;
    72f0:	46c0      	nop			; (mov r8, r8)
    72f2:	e002      	b.n	72fa <hif_send+0x33a>
				if(M2M_SUCCESS != ret) goto ERR1;
    72f4:	46c0      	nop			; (mov r8, r8)
    72f6:	e000      	b.n	72fa <hif_send+0x33a>
				if(M2M_SUCCESS != ret) goto ERR1;
    72f8:	46c0      	nop			; (mov r8, r8)
ERR1:
	/*reset the count but no actual sleep as it already bus error*/
	hif_chip_sleep_sc();
    72fa:	4b18      	ldr	r3, [pc, #96]	; (735c <hif_send+0x39c>)
    72fc:	4798      	blx	r3
ERR2:
	/*logical error*/
	return ret;
    72fe:	231f      	movs	r3, #31
    7300:	18fb      	adds	r3, r7, r3
    7302:	781b      	ldrb	r3, [r3, #0]
    7304:	b25b      	sxtb	r3, r3
}
    7306:	0018      	movs	r0, r3
    7308:	46bd      	mov	sp, r7
    730a:	b009      	add	sp, #36	; 0x24
    730c:	bd90      	pop	{r4, r7, pc}
    730e:	46c0      	nop			; (mov r8, r8)
    7310:	00006e89 	.word	0x00006e89
    7314:	0000108c 	.word	0x0000108c
    7318:	00009179 	.word	0x00009179
    731c:	00001078 	.word	0x00001078
    7320:	00009155 	.word	0x00009155
    7324:	0001f89c 	.word	0x0001f89c
    7328:	0001c2d5 	.word	0x0001c2d5
    732c:	0001f8a8 	.word	0x0001f8a8
    7330:	0001c3f1 	.word	0x0001c3f1
    7334:	0001c309 	.word	0x0001c309
    7338:	00006471 	.word	0x00006471
    733c:	00150400 	.word	0x00150400
    7340:	000003e7 	.word	0x000003e7
    7344:	000092c1 	.word	0x000092c1
    7348:	0000106c 	.word	0x0000106c
    734c:	00006f21 	.word	0x00006f21
    7350:	0001fbb0 	.word	0x0001fbb0
    7354:	0001f8b8 	.word	0x0001f8b8
    7358:	0001f8cc 	.word	0x0001f8cc
    735c:	00006ef9 	.word	0x00006ef9

00007360 <hif_isr>:
*	@date	15 July 2012
*	@return	1 in case of interrupt received else 0 will be returned
*	@version	1.0
*/
static sint8 hif_isr(void)
{
    7360:	b590      	push	{r4, r7, lr}
    7362:	b087      	sub	sp, #28
    7364:	af02      	add	r7, sp, #8
	sint8 ret = M2M_SUCCESS;
    7366:	230f      	movs	r3, #15
    7368:	18fb      	adds	r3, r7, r3
    736a:	2200      	movs	r2, #0
    736c:	701a      	strb	r2, [r3, #0]
	uint32 reg;
	volatile tstrHifHdr strHif;

	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0, &reg);
    736e:	230f      	movs	r3, #15
    7370:	18fc      	adds	r4, r7, r3
    7372:	2308      	movs	r3, #8
    7374:	18fb      	adds	r3, r7, r3
    7376:	4ad6      	ldr	r2, [pc, #856]	; (76d0 <hif_isr+0x370>)
    7378:	0019      	movs	r1, r3
    737a:	0010      	movs	r0, r2
    737c:	4bd5      	ldr	r3, [pc, #852]	; (76d4 <hif_isr+0x374>)
    737e:	4798      	blx	r3
    7380:	0003      	movs	r3, r0
    7382:	7023      	strb	r3, [r4, #0]
	if(M2M_SUCCESS == ret)
    7384:	230f      	movs	r3, #15
    7386:	18fb      	adds	r3, r7, r3
    7388:	781b      	ldrb	r3, [r3, #0]
    738a:	b25b      	sxtb	r3, r3
    738c:	2b00      	cmp	r3, #0
    738e:	d000      	beq.n	7392 <hif_isr+0x32>
    7390:	e217      	b.n	77c2 <hif_isr+0x462>
	{
		if(reg & 0x1)	/* New interrupt has been received */
    7392:	68bb      	ldr	r3, [r7, #8]
    7394:	2201      	movs	r2, #1
    7396:	4013      	ands	r3, r2
    7398:	d100      	bne.n	739c <hif_isr+0x3c>
    739a:	e1fd      	b.n	7798 <hif_isr+0x438>
		{
			uint16 size;

			nm_bsp_interrupt_ctrl(0);
    739c:	2000      	movs	r0, #0
    739e:	4bce      	ldr	r3, [pc, #824]	; (76d8 <hif_isr+0x378>)
    73a0:	4798      	blx	r3
			/*Clearing RX interrupt*/
			reg &= ~NBIT0;
    73a2:	68bb      	ldr	r3, [r7, #8]
    73a4:	2201      	movs	r2, #1
    73a6:	4393      	bics	r3, r2
    73a8:	60bb      	str	r3, [r7, #8]
			ret = nm_write_reg(WIFI_HOST_RCV_CTRL_0,reg);
    73aa:	68bb      	ldr	r3, [r7, #8]
    73ac:	220f      	movs	r2, #15
    73ae:	18bc      	adds	r4, r7, r2
    73b0:	4ac7      	ldr	r2, [pc, #796]	; (76d0 <hif_isr+0x370>)
    73b2:	0019      	movs	r1, r3
    73b4:	0010      	movs	r0, r2
    73b6:	4bc9      	ldr	r3, [pc, #804]	; (76dc <hif_isr+0x37c>)
    73b8:	4798      	blx	r3
    73ba:	0003      	movs	r3, r0
    73bc:	7023      	strb	r3, [r4, #0]
			if(ret != M2M_SUCCESS)goto ERR1;
    73be:	230f      	movs	r3, #15
    73c0:	18fb      	adds	r3, r7, r3
    73c2:	781b      	ldrb	r3, [r3, #0]
    73c4:	b25b      	sxtb	r3, r3
    73c6:	2b00      	cmp	r3, #0
    73c8:	d000      	beq.n	73cc <hif_isr+0x6c>
    73ca:	e208      	b.n	77de <hif_isr+0x47e>
			gstrHifCxt.u8HifRXDone = 1;
    73cc:	4bc4      	ldr	r3, [pc, #784]	; (76e0 <hif_isr+0x380>)
    73ce:	2201      	movs	r2, #1
    73d0:	709a      	strb	r2, [r3, #2]
			size = (uint16)((reg >> 2) & 0xfff);
    73d2:	68bb      	ldr	r3, [r7, #8]
    73d4:	089b      	lsrs	r3, r3, #2
    73d6:	b29a      	uxth	r2, r3
    73d8:	230c      	movs	r3, #12
    73da:	18fb      	adds	r3, r7, r3
    73dc:	0512      	lsls	r2, r2, #20
    73de:	0d12      	lsrs	r2, r2, #20
    73e0:	801a      	strh	r2, [r3, #0]
			if (size > 0) {
    73e2:	230c      	movs	r3, #12
    73e4:	18fb      	adds	r3, r7, r3
    73e6:	881b      	ldrh	r3, [r3, #0]
    73e8:	2b00      	cmp	r3, #0
    73ea:	d100      	bne.n	73ee <hif_isr+0x8e>
    73ec:	e1c1      	b.n	7772 <hif_isr+0x412>
				uint32 address = 0;
    73ee:	2300      	movs	r3, #0
    73f0:	603b      	str	r3, [r7, #0]
				/**
				start bus transfer
				**/
				ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_1, &address);
    73f2:	230f      	movs	r3, #15
    73f4:	18fc      	adds	r4, r7, r3
    73f6:	003b      	movs	r3, r7
    73f8:	4aba      	ldr	r2, [pc, #744]	; (76e4 <hif_isr+0x384>)
    73fa:	0019      	movs	r1, r3
    73fc:	0010      	movs	r0, r2
    73fe:	4bb5      	ldr	r3, [pc, #724]	; (76d4 <hif_isr+0x374>)
    7400:	4798      	blx	r3
    7402:	0003      	movs	r3, r0
    7404:	7023      	strb	r3, [r4, #0]
				if(M2M_SUCCESS != ret)
    7406:	230f      	movs	r3, #15
    7408:	18fb      	adds	r3, r7, r3
    740a:	781b      	ldrb	r3, [r3, #0]
    740c:	b25b      	sxtb	r3, r3
    740e:	2b00      	cmp	r3, #0
    7410:	d012      	beq.n	7438 <hif_isr+0xd8>
				{
					M2M_ERR("(hif) WIFI_HOST_RCV_CTRL_1 bus fail\n");
    7412:	23c8      	movs	r3, #200	; 0xc8
    7414:	33ff      	adds	r3, #255	; 0xff
    7416:	001a      	movs	r2, r3
    7418:	49b3      	ldr	r1, [pc, #716]	; (76e8 <hif_isr+0x388>)
    741a:	4bb4      	ldr	r3, [pc, #720]	; (76ec <hif_isr+0x38c>)
    741c:	0018      	movs	r0, r3
    741e:	4bb4      	ldr	r3, [pc, #720]	; (76f0 <hif_isr+0x390>)
    7420:	4798      	blx	r3
    7422:	4bb4      	ldr	r3, [pc, #720]	; (76f4 <hif_isr+0x394>)
    7424:	0018      	movs	r0, r3
    7426:	4bb4      	ldr	r3, [pc, #720]	; (76f8 <hif_isr+0x398>)
    7428:	4798      	blx	r3
    742a:	200d      	movs	r0, #13
    742c:	4bb3      	ldr	r3, [pc, #716]	; (76fc <hif_isr+0x39c>)
    742e:	4798      	blx	r3
					nm_bsp_interrupt_ctrl(1);
    7430:	2001      	movs	r0, #1
    7432:	4ba9      	ldr	r3, [pc, #676]	; (76d8 <hif_isr+0x378>)
    7434:	4798      	blx	r3
					goto ERR1;
    7436:	e1d3      	b.n	77e0 <hif_isr+0x480>
				}
				gstrHifCxt.u32RxAddr = address;
    7438:	683a      	ldr	r2, [r7, #0]
    743a:	4ba9      	ldr	r3, [pc, #676]	; (76e0 <hif_isr+0x380>)
    743c:	605a      	str	r2, [r3, #4]
				gstrHifCxt.u32RxSize = size;
    743e:	230c      	movs	r3, #12
    7440:	18fb      	adds	r3, r7, r3
    7442:	881a      	ldrh	r2, [r3, #0]
    7444:	4ba6      	ldr	r3, [pc, #664]	; (76e0 <hif_isr+0x380>)
    7446:	609a      	str	r2, [r3, #8]
				ret = nm_read_block(address, (uint8*)&strHif, sizeof(tstrHifHdr));
    7448:	683b      	ldr	r3, [r7, #0]
    744a:	220f      	movs	r2, #15
    744c:	18bc      	adds	r4, r7, r2
    744e:	1d39      	adds	r1, r7, #4
    7450:	2204      	movs	r2, #4
    7452:	0018      	movs	r0, r3
    7454:	4baa      	ldr	r3, [pc, #680]	; (7700 <hif_isr+0x3a0>)
    7456:	4798      	blx	r3
    7458:	0003      	movs	r3, r0
    745a:	7023      	strb	r3, [r4, #0]
				strHif.u16Length = NM_BSP_B_L_16(strHif.u16Length);
    745c:	1d3b      	adds	r3, r7, #4
    745e:	885b      	ldrh	r3, [r3, #2]
    7460:	b29a      	uxth	r2, r3
    7462:	1d3b      	adds	r3, r7, #4
    7464:	805a      	strh	r2, [r3, #2]
				if(M2M_SUCCESS != ret)
    7466:	230f      	movs	r3, #15
    7468:	18fb      	adds	r3, r7, r3
    746a:	781b      	ldrb	r3, [r3, #0]
    746c:	b25b      	sxtb	r3, r3
    746e:	2b00      	cmp	r3, #0
    7470:	d012      	beq.n	7498 <hif_isr+0x138>
				{
					M2M_ERR("(hif) address bus fail\n");
    7472:	23d2      	movs	r3, #210	; 0xd2
    7474:	33ff      	adds	r3, #255	; 0xff
    7476:	001a      	movs	r2, r3
    7478:	499b      	ldr	r1, [pc, #620]	; (76e8 <hif_isr+0x388>)
    747a:	4b9c      	ldr	r3, [pc, #624]	; (76ec <hif_isr+0x38c>)
    747c:	0018      	movs	r0, r3
    747e:	4b9c      	ldr	r3, [pc, #624]	; (76f0 <hif_isr+0x390>)
    7480:	4798      	blx	r3
    7482:	4ba0      	ldr	r3, [pc, #640]	; (7704 <hif_isr+0x3a4>)
    7484:	0018      	movs	r0, r3
    7486:	4b9c      	ldr	r3, [pc, #624]	; (76f8 <hif_isr+0x398>)
    7488:	4798      	blx	r3
    748a:	200d      	movs	r0, #13
    748c:	4b9b      	ldr	r3, [pc, #620]	; (76fc <hif_isr+0x39c>)
    748e:	4798      	blx	r3
					nm_bsp_interrupt_ctrl(1);
    7490:	2001      	movs	r0, #1
    7492:	4b91      	ldr	r3, [pc, #580]	; (76d8 <hif_isr+0x378>)
    7494:	4798      	blx	r3
					goto ERR1;
    7496:	e1a3      	b.n	77e0 <hif_isr+0x480>
				}
				if(strHif.u16Length != size)
    7498:	1d3b      	adds	r3, r7, #4
    749a:	885b      	ldrh	r3, [r3, #2]
    749c:	b29b      	uxth	r3, r3
    749e:	220c      	movs	r2, #12
    74a0:	18ba      	adds	r2, r7, r2
    74a2:	8812      	ldrh	r2, [r2, #0]
    74a4:	429a      	cmp	r2, r3
    74a6:	d02d      	beq.n	7504 <hif_isr+0x1a4>
				{
					if((size - strHif.u16Length) > 4)
    74a8:	230c      	movs	r3, #12
    74aa:	18fb      	adds	r3, r7, r3
    74ac:	881b      	ldrh	r3, [r3, #0]
    74ae:	1d3a      	adds	r2, r7, #4
    74b0:	8852      	ldrh	r2, [r2, #2]
    74b2:	b292      	uxth	r2, r2
    74b4:	1a9b      	subs	r3, r3, r2
    74b6:	2b04      	cmp	r3, #4
    74b8:	dd24      	ble.n	7504 <hif_isr+0x1a4>
					{
						M2M_ERR("(hif) Corrupted packet Size = %u <L = %u, G = %u, OP = %02X>\n",
    74ba:	23ed      	movs	r3, #237	; 0xed
    74bc:	005a      	lsls	r2, r3, #1
    74be:	498a      	ldr	r1, [pc, #552]	; (76e8 <hif_isr+0x388>)
    74c0:	4b8a      	ldr	r3, [pc, #552]	; (76ec <hif_isr+0x38c>)
    74c2:	0018      	movs	r0, r3
    74c4:	4b8a      	ldr	r3, [pc, #552]	; (76f0 <hif_isr+0x390>)
    74c6:	4798      	blx	r3
    74c8:	230c      	movs	r3, #12
    74ca:	18fb      	adds	r3, r7, r3
    74cc:	8819      	ldrh	r1, [r3, #0]
    74ce:	1d3b      	adds	r3, r7, #4
    74d0:	885b      	ldrh	r3, [r3, #2]
    74d2:	b29b      	uxth	r3, r3
    74d4:	001a      	movs	r2, r3
    74d6:	1d3b      	adds	r3, r7, #4
    74d8:	781b      	ldrb	r3, [r3, #0]
    74da:	b2db      	uxtb	r3, r3
    74dc:	001c      	movs	r4, r3
    74de:	1d3b      	adds	r3, r7, #4
    74e0:	785b      	ldrb	r3, [r3, #1]
    74e2:	b2db      	uxtb	r3, r3
    74e4:	4888      	ldr	r0, [pc, #544]	; (7708 <hif_isr+0x3a8>)
    74e6:	9300      	str	r3, [sp, #0]
    74e8:	0023      	movs	r3, r4
    74ea:	4c81      	ldr	r4, [pc, #516]	; (76f0 <hif_isr+0x390>)
    74ec:	47a0      	blx	r4
    74ee:	200d      	movs	r0, #13
    74f0:	4b82      	ldr	r3, [pc, #520]	; (76fc <hif_isr+0x39c>)
    74f2:	4798      	blx	r3
							size, strHif.u16Length, strHif.u8Gid, strHif.u8Opcode);
						nm_bsp_interrupt_ctrl(1);
    74f4:	2001      	movs	r0, #1
    74f6:	4b78      	ldr	r3, [pc, #480]	; (76d8 <hif_isr+0x378>)
    74f8:	4798      	blx	r3
						ret = M2M_ERR_BUS_FAIL;
    74fa:	230f      	movs	r3, #15
    74fc:	18fb      	adds	r3, r7, r3
    74fe:	22fa      	movs	r2, #250	; 0xfa
    7500:	701a      	strb	r2, [r3, #0]
						goto ERR1;
    7502:	e16d      	b.n	77e0 <hif_isr+0x480>
					}
				}

				if(M2M_REQ_GROUP_WIFI == strHif.u8Gid)
    7504:	1d3b      	adds	r3, r7, #4
    7506:	781b      	ldrb	r3, [r3, #0]
    7508:	b2db      	uxtb	r3, r3
    750a:	2b01      	cmp	r3, #1
    750c:	d120      	bne.n	7550 <hif_isr+0x1f0>
				{
					if(gstrHifCxt.pfWifiCb)
    750e:	4b74      	ldr	r3, [pc, #464]	; (76e0 <hif_isr+0x380>)
    7510:	68db      	ldr	r3, [r3, #12]
    7512:	2b00      	cmp	r3, #0
    7514:	d00d      	beq.n	7532 <hif_isr+0x1d2>
						gstrHifCxt.pfWifiCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
    7516:	4b72      	ldr	r3, [pc, #456]	; (76e0 <hif_isr+0x380>)
    7518:	68db      	ldr	r3, [r3, #12]
    751a:	1d3a      	adds	r2, r7, #4
    751c:	7852      	ldrb	r2, [r2, #1]
    751e:	b2d0      	uxtb	r0, r2
    7520:	1d3a      	adds	r2, r7, #4
    7522:	8852      	ldrh	r2, [r2, #2]
    7524:	b292      	uxth	r2, r2
    7526:	3a08      	subs	r2, #8
    7528:	b291      	uxth	r1, r2
    752a:	683a      	ldr	r2, [r7, #0]
    752c:	3208      	adds	r2, #8
    752e:	4798      	blx	r3
    7530:	e0fe      	b.n	7730 <hif_isr+0x3d0>
					else
						M2M_ERR("WIFI callback is not registered\n");
    7532:	23f3      	movs	r3, #243	; 0xf3
    7534:	005a      	lsls	r2, r3, #1
    7536:	496c      	ldr	r1, [pc, #432]	; (76e8 <hif_isr+0x388>)
    7538:	4b6c      	ldr	r3, [pc, #432]	; (76ec <hif_isr+0x38c>)
    753a:	0018      	movs	r0, r3
    753c:	4b6c      	ldr	r3, [pc, #432]	; (76f0 <hif_isr+0x390>)
    753e:	4798      	blx	r3
    7540:	4b72      	ldr	r3, [pc, #456]	; (770c <hif_isr+0x3ac>)
    7542:	0018      	movs	r0, r3
    7544:	4b6c      	ldr	r3, [pc, #432]	; (76f8 <hif_isr+0x398>)
    7546:	4798      	blx	r3
    7548:	200d      	movs	r0, #13
    754a:	4b6c      	ldr	r3, [pc, #432]	; (76fc <hif_isr+0x39c>)
    754c:	4798      	blx	r3
    754e:	e0ef      	b.n	7730 <hif_isr+0x3d0>

				}
				else if(M2M_REQ_GROUP_IP == strHif.u8Gid)
    7550:	1d3b      	adds	r3, r7, #4
    7552:	781b      	ldrb	r3, [r3, #0]
    7554:	b2db      	uxtb	r3, r3
    7556:	2b02      	cmp	r3, #2
    7558:	d120      	bne.n	759c <hif_isr+0x23c>
				{
					if(gstrHifCxt.pfIpCb)
    755a:	4b61      	ldr	r3, [pc, #388]	; (76e0 <hif_isr+0x380>)
    755c:	691b      	ldr	r3, [r3, #16]
    755e:	2b00      	cmp	r3, #0
    7560:	d00d      	beq.n	757e <hif_isr+0x21e>
						gstrHifCxt.pfIpCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
    7562:	4b5f      	ldr	r3, [pc, #380]	; (76e0 <hif_isr+0x380>)
    7564:	691b      	ldr	r3, [r3, #16]
    7566:	1d3a      	adds	r2, r7, #4
    7568:	7852      	ldrb	r2, [r2, #1]
    756a:	b2d0      	uxtb	r0, r2
    756c:	1d3a      	adds	r2, r7, #4
    756e:	8852      	ldrh	r2, [r2, #2]
    7570:	b292      	uxth	r2, r2
    7572:	3a08      	subs	r2, #8
    7574:	b291      	uxth	r1, r2
    7576:	683a      	ldr	r2, [r7, #0]
    7578:	3208      	adds	r2, #8
    757a:	4798      	blx	r3
    757c:	e0d8      	b.n	7730 <hif_isr+0x3d0>
					else
						M2M_ERR("Scoket callback is not registered\n");
    757e:	23f7      	movs	r3, #247	; 0xf7
    7580:	005a      	lsls	r2, r3, #1
    7582:	4959      	ldr	r1, [pc, #356]	; (76e8 <hif_isr+0x388>)
    7584:	4b59      	ldr	r3, [pc, #356]	; (76ec <hif_isr+0x38c>)
    7586:	0018      	movs	r0, r3
    7588:	4b59      	ldr	r3, [pc, #356]	; (76f0 <hif_isr+0x390>)
    758a:	4798      	blx	r3
    758c:	4b60      	ldr	r3, [pc, #384]	; (7710 <hif_isr+0x3b0>)
    758e:	0018      	movs	r0, r3
    7590:	4b59      	ldr	r3, [pc, #356]	; (76f8 <hif_isr+0x398>)
    7592:	4798      	blx	r3
    7594:	200d      	movs	r0, #13
    7596:	4b59      	ldr	r3, [pc, #356]	; (76fc <hif_isr+0x39c>)
    7598:	4798      	blx	r3
    759a:	e0c9      	b.n	7730 <hif_isr+0x3d0>

				}
				else if(M2M_REQ_GROUP_OTA == strHif.u8Gid)
    759c:	1d3b      	adds	r3, r7, #4
    759e:	781b      	ldrb	r3, [r3, #0]
    75a0:	b2db      	uxtb	r3, r3
    75a2:	2b04      	cmp	r3, #4
    75a4:	d120      	bne.n	75e8 <hif_isr+0x288>
				{
					if(gstrHifCxt.pfOtaCb)
    75a6:	4b4e      	ldr	r3, [pc, #312]	; (76e0 <hif_isr+0x380>)
    75a8:	695b      	ldr	r3, [r3, #20]
    75aa:	2b00      	cmp	r3, #0
    75ac:	d00d      	beq.n	75ca <hif_isr+0x26a>
						gstrHifCxt.pfOtaCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
    75ae:	4b4c      	ldr	r3, [pc, #304]	; (76e0 <hif_isr+0x380>)
    75b0:	695b      	ldr	r3, [r3, #20]
    75b2:	1d3a      	adds	r2, r7, #4
    75b4:	7852      	ldrb	r2, [r2, #1]
    75b6:	b2d0      	uxtb	r0, r2
    75b8:	1d3a      	adds	r2, r7, #4
    75ba:	8852      	ldrh	r2, [r2, #2]
    75bc:	b292      	uxth	r2, r2
    75be:	3a08      	subs	r2, #8
    75c0:	b291      	uxth	r1, r2
    75c2:	683a      	ldr	r2, [r7, #0]
    75c4:	3208      	adds	r2, #8
    75c6:	4798      	blx	r3
    75c8:	e0b2      	b.n	7730 <hif_isr+0x3d0>
					else
						M2M_ERR("Ota callback is not registered\n");
    75ca:	23fb      	movs	r3, #251	; 0xfb
    75cc:	005a      	lsls	r2, r3, #1
    75ce:	4946      	ldr	r1, [pc, #280]	; (76e8 <hif_isr+0x388>)
    75d0:	4b46      	ldr	r3, [pc, #280]	; (76ec <hif_isr+0x38c>)
    75d2:	0018      	movs	r0, r3
    75d4:	4b46      	ldr	r3, [pc, #280]	; (76f0 <hif_isr+0x390>)
    75d6:	4798      	blx	r3
    75d8:	4b4e      	ldr	r3, [pc, #312]	; (7714 <hif_isr+0x3b4>)
    75da:	0018      	movs	r0, r3
    75dc:	4b46      	ldr	r3, [pc, #280]	; (76f8 <hif_isr+0x398>)
    75de:	4798      	blx	r3
    75e0:	200d      	movs	r0, #13
    75e2:	4b46      	ldr	r3, [pc, #280]	; (76fc <hif_isr+0x39c>)
    75e4:	4798      	blx	r3
    75e6:	e0a3      	b.n	7730 <hif_isr+0x3d0>

				}
				else if(M2M_REQ_GROUP_CRYPTO == strHif.u8Gid)
    75e8:	1d3b      	adds	r3, r7, #4
    75ea:	781b      	ldrb	r3, [r3, #0]
    75ec:	b2db      	uxtb	r3, r3
    75ee:	2b06      	cmp	r3, #6
    75f0:	d11f      	bne.n	7632 <hif_isr+0x2d2>
				{
					if(gstrHifCxt.pfCryptoCb)
    75f2:	4b3b      	ldr	r3, [pc, #236]	; (76e0 <hif_isr+0x380>)
    75f4:	6a1b      	ldr	r3, [r3, #32]
    75f6:	2b00      	cmp	r3, #0
    75f8:	d00d      	beq.n	7616 <hif_isr+0x2b6>
						gstrHifCxt.pfCryptoCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
    75fa:	4b39      	ldr	r3, [pc, #228]	; (76e0 <hif_isr+0x380>)
    75fc:	6a1b      	ldr	r3, [r3, #32]
    75fe:	1d3a      	adds	r2, r7, #4
    7600:	7852      	ldrb	r2, [r2, #1]
    7602:	b2d0      	uxtb	r0, r2
    7604:	1d3a      	adds	r2, r7, #4
    7606:	8852      	ldrh	r2, [r2, #2]
    7608:	b292      	uxth	r2, r2
    760a:	3a08      	subs	r2, #8
    760c:	b291      	uxth	r1, r2
    760e:	683a      	ldr	r2, [r7, #0]
    7610:	3208      	adds	r2, #8
    7612:	4798      	blx	r3
    7614:	e08c      	b.n	7730 <hif_isr+0x3d0>

					else
						M2M_ERR("Crypto callback is not registered\n");
    7616:	4a40      	ldr	r2, [pc, #256]	; (7718 <hif_isr+0x3b8>)
    7618:	4933      	ldr	r1, [pc, #204]	; (76e8 <hif_isr+0x388>)
    761a:	4b34      	ldr	r3, [pc, #208]	; (76ec <hif_isr+0x38c>)
    761c:	0018      	movs	r0, r3
    761e:	4b34      	ldr	r3, [pc, #208]	; (76f0 <hif_isr+0x390>)
    7620:	4798      	blx	r3
    7622:	4b3e      	ldr	r3, [pc, #248]	; (771c <hif_isr+0x3bc>)
    7624:	0018      	movs	r0, r3
    7626:	4b34      	ldr	r3, [pc, #208]	; (76f8 <hif_isr+0x398>)
    7628:	4798      	blx	r3
    762a:	200d      	movs	r0, #13
    762c:	4b33      	ldr	r3, [pc, #204]	; (76fc <hif_isr+0x39c>)
    762e:	4798      	blx	r3
    7630:	e07e      	b.n	7730 <hif_isr+0x3d0>
				}
				else if(M2M_REQ_GROUP_SIGMA == strHif.u8Gid)
    7632:	1d3b      	adds	r3, r7, #4
    7634:	781b      	ldrb	r3, [r3, #0]
    7636:	b2db      	uxtb	r3, r3
    7638:	2b07      	cmp	r3, #7
    763a:	d11f      	bne.n	767c <hif_isr+0x31c>
				{
					if(gstrHifCxt.pfSigmaCb)
    763c:	4b28      	ldr	r3, [pc, #160]	; (76e0 <hif_isr+0x380>)
    763e:	699b      	ldr	r3, [r3, #24]
    7640:	2b00      	cmp	r3, #0
    7642:	d00d      	beq.n	7660 <hif_isr+0x300>
						gstrHifCxt.pfSigmaCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
    7644:	4b26      	ldr	r3, [pc, #152]	; (76e0 <hif_isr+0x380>)
    7646:	699b      	ldr	r3, [r3, #24]
    7648:	1d3a      	adds	r2, r7, #4
    764a:	7852      	ldrb	r2, [r2, #1]
    764c:	b2d0      	uxtb	r0, r2
    764e:	1d3a      	adds	r2, r7, #4
    7650:	8852      	ldrh	r2, [r2, #2]
    7652:	b292      	uxth	r2, r2
    7654:	3a08      	subs	r2, #8
    7656:	b291      	uxth	r1, r2
    7658:	683a      	ldr	r2, [r7, #0]
    765a:	3208      	adds	r2, #8
    765c:	4798      	blx	r3
    765e:	e067      	b.n	7730 <hif_isr+0x3d0>
					else
						M2M_ERR("Sigma callback is not registered\n");
    7660:	4a2f      	ldr	r2, [pc, #188]	; (7720 <hif_isr+0x3c0>)
    7662:	4921      	ldr	r1, [pc, #132]	; (76e8 <hif_isr+0x388>)
    7664:	4b21      	ldr	r3, [pc, #132]	; (76ec <hif_isr+0x38c>)
    7666:	0018      	movs	r0, r3
    7668:	4b21      	ldr	r3, [pc, #132]	; (76f0 <hif_isr+0x390>)
    766a:	4798      	blx	r3
    766c:	4b2d      	ldr	r3, [pc, #180]	; (7724 <hif_isr+0x3c4>)
    766e:	0018      	movs	r0, r3
    7670:	4b21      	ldr	r3, [pc, #132]	; (76f8 <hif_isr+0x398>)
    7672:	4798      	blx	r3
    7674:	200d      	movs	r0, #13
    7676:	4b21      	ldr	r3, [pc, #132]	; (76fc <hif_isr+0x39c>)
    7678:	4798      	blx	r3
    767a:	e059      	b.n	7730 <hif_isr+0x3d0>
				}
				else if(M2M_REQ_GROUP_SSL == strHif.u8Gid)
    767c:	1d3b      	adds	r3, r7, #4
    767e:	781b      	ldrb	r3, [r3, #0]
    7680:	b2db      	uxtb	r3, r3
    7682:	2b05      	cmp	r3, #5
    7684:	d111      	bne.n	76aa <hif_isr+0x34a>
				{
				    if(gstrHifCxt.pfSslCb)
    7686:	4b16      	ldr	r3, [pc, #88]	; (76e0 <hif_isr+0x380>)
    7688:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    768a:	2b00      	cmp	r3, #0
    768c:	d050      	beq.n	7730 <hif_isr+0x3d0>
						gstrHifCxt.pfSslCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
    768e:	4b14      	ldr	r3, [pc, #80]	; (76e0 <hif_isr+0x380>)
    7690:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    7692:	1d3a      	adds	r2, r7, #4
    7694:	7852      	ldrb	r2, [r2, #1]
    7696:	b2d0      	uxtb	r0, r2
    7698:	1d3a      	adds	r2, r7, #4
    769a:	8852      	ldrh	r2, [r2, #2]
    769c:	b292      	uxth	r2, r2
    769e:	3a08      	subs	r2, #8
    76a0:	b291      	uxth	r1, r2
    76a2:	683a      	ldr	r2, [r7, #0]
    76a4:	3208      	adds	r2, #8
    76a6:	4798      	blx	r3
    76a8:	e042      	b.n	7730 <hif_isr+0x3d0>
				}
				else
				{
					M2M_ERR("(hif) invalid group ID\n");
    76aa:	4a1f      	ldr	r2, [pc, #124]	; (7728 <hif_isr+0x3c8>)
    76ac:	490e      	ldr	r1, [pc, #56]	; (76e8 <hif_isr+0x388>)
    76ae:	4b0f      	ldr	r3, [pc, #60]	; (76ec <hif_isr+0x38c>)
    76b0:	0018      	movs	r0, r3
    76b2:	4b0f      	ldr	r3, [pc, #60]	; (76f0 <hif_isr+0x390>)
    76b4:	4798      	blx	r3
    76b6:	4b1d      	ldr	r3, [pc, #116]	; (772c <hif_isr+0x3cc>)
    76b8:	0018      	movs	r0, r3
    76ba:	4b0f      	ldr	r3, [pc, #60]	; (76f8 <hif_isr+0x398>)
    76bc:	4798      	blx	r3
    76be:	200d      	movs	r0, #13
    76c0:	4b0e      	ldr	r3, [pc, #56]	; (76fc <hif_isr+0x39c>)
    76c2:	4798      	blx	r3
					ret = M2M_ERR_BUS_FAIL;
    76c4:	230f      	movs	r3, #15
    76c6:	18fb      	adds	r3, r7, r3
    76c8:	22fa      	movs	r2, #250	; 0xfa
    76ca:	701a      	strb	r2, [r3, #0]
					goto ERR1;
    76cc:	e088      	b.n	77e0 <hif_isr+0x480>
    76ce:	46c0      	nop			; (mov r8, r8)
    76d0:	00001070 	.word	0x00001070
    76d4:	00009155 	.word	0x00009155
    76d8:	00006511 	.word	0x00006511
    76dc:	00009179 	.word	0x00009179
    76e0:	20002a30 	.word	0x20002a30
    76e4:	00001084 	.word	0x00001084
    76e8:	0001fbbc 	.word	0x0001fbbc
    76ec:	0001f8b8 	.word	0x0001f8b8
    76f0:	0001c2d5 	.word	0x0001c2d5
    76f4:	0001f8e8 	.word	0x0001f8e8
    76f8:	0001c3f1 	.word	0x0001c3f1
    76fc:	0001c309 	.word	0x0001c309
    7700:	000091c9 	.word	0x000091c9
    7704:	0001f90c 	.word	0x0001f90c
    7708:	0001f924 	.word	0x0001f924
    770c:	0001f964 	.word	0x0001f964
    7710:	0001f984 	.word	0x0001f984
    7714:	0001f9a8 	.word	0x0001f9a8
    7718:	000001ff 	.word	0x000001ff
    771c:	0001f9c8 	.word	0x0001f9c8
    7720:	00000206 	.word	0x00000206
    7724:	0001f9ec 	.word	0x0001f9ec
    7728:	0000020f 	.word	0x0000020f
    772c:	0001fa10 	.word	0x0001fa10
				}
				if(gstrHifCxt.u8HifRXDone)
    7730:	4b2f      	ldr	r3, [pc, #188]	; (77f0 <hif_isr+0x490>)
    7732:	789b      	ldrb	r3, [r3, #2]
    7734:	b2db      	uxtb	r3, r3
    7736:	2b00      	cmp	r3, #0
    7738:	d052      	beq.n	77e0 <hif_isr+0x480>
				{
					M2M_ERR("(hif) host app didn't set RX Done <%u><%X>\n", strHif.u8Gid, strHif.u8Opcode);
    773a:	4a2e      	ldr	r2, [pc, #184]	; (77f4 <hif_isr+0x494>)
    773c:	492e      	ldr	r1, [pc, #184]	; (77f8 <hif_isr+0x498>)
    773e:	4b2f      	ldr	r3, [pc, #188]	; (77fc <hif_isr+0x49c>)
    7740:	0018      	movs	r0, r3
    7742:	4b2f      	ldr	r3, [pc, #188]	; (7800 <hif_isr+0x4a0>)
    7744:	4798      	blx	r3
    7746:	1d3b      	adds	r3, r7, #4
    7748:	781b      	ldrb	r3, [r3, #0]
    774a:	b2db      	uxtb	r3, r3
    774c:	0019      	movs	r1, r3
    774e:	1d3b      	adds	r3, r7, #4
    7750:	785b      	ldrb	r3, [r3, #1]
    7752:	b2db      	uxtb	r3, r3
    7754:	001a      	movs	r2, r3
    7756:	4b2b      	ldr	r3, [pc, #172]	; (7804 <hif_isr+0x4a4>)
    7758:	0018      	movs	r0, r3
    775a:	4b29      	ldr	r3, [pc, #164]	; (7800 <hif_isr+0x4a0>)
    775c:	4798      	blx	r3
    775e:	200d      	movs	r0, #13
    7760:	4b29      	ldr	r3, [pc, #164]	; (7808 <hif_isr+0x4a8>)
    7762:	4798      	blx	r3
					ret = hif_set_rx_done();
    7764:	230f      	movs	r3, #15
    7766:	18fc      	adds	r4, r7, r3
    7768:	4b28      	ldr	r3, [pc, #160]	; (780c <hif_isr+0x4ac>)
    776a:	4798      	blx	r3
    776c:	0003      	movs	r3, r0
    776e:	7023      	strb	r3, [r4, #0]
    7770:	e036      	b.n	77e0 <hif_isr+0x480>
					if(ret != M2M_SUCCESS) goto ERR1;
				}
			}
			else
			{
				M2M_ERR("(hif) Wrong Size\n");
    7772:	2387      	movs	r3, #135	; 0x87
    7774:	009a      	lsls	r2, r3, #2
    7776:	4920      	ldr	r1, [pc, #128]	; (77f8 <hif_isr+0x498>)
    7778:	4b20      	ldr	r3, [pc, #128]	; (77fc <hif_isr+0x49c>)
    777a:	0018      	movs	r0, r3
    777c:	4b20      	ldr	r3, [pc, #128]	; (7800 <hif_isr+0x4a0>)
    777e:	4798      	blx	r3
    7780:	4b23      	ldr	r3, [pc, #140]	; (7810 <hif_isr+0x4b0>)
    7782:	0018      	movs	r0, r3
    7784:	4b23      	ldr	r3, [pc, #140]	; (7814 <hif_isr+0x4b4>)
    7786:	4798      	blx	r3
    7788:	200d      	movs	r0, #13
    778a:	4b1f      	ldr	r3, [pc, #124]	; (7808 <hif_isr+0x4a8>)
    778c:	4798      	blx	r3
				ret = M2M_ERR_RCV;
    778e:	230f      	movs	r3, #15
    7790:	18fb      	adds	r3, r7, r3
    7792:	22fe      	movs	r2, #254	; 0xfe
    7794:	701a      	strb	r2, [r3, #0]
				goto ERR1;
    7796:	e023      	b.n	77e0 <hif_isr+0x480>
			}
		}
		else
		{
#ifndef WIN32
			M2M_ERR("(hif) False interrupt %lx",reg);
    7798:	2389      	movs	r3, #137	; 0x89
    779a:	009a      	lsls	r2, r3, #2
    779c:	4916      	ldr	r1, [pc, #88]	; (77f8 <hif_isr+0x498>)
    779e:	4b17      	ldr	r3, [pc, #92]	; (77fc <hif_isr+0x49c>)
    77a0:	0018      	movs	r0, r3
    77a2:	4b17      	ldr	r3, [pc, #92]	; (7800 <hif_isr+0x4a0>)
    77a4:	4798      	blx	r3
    77a6:	68ba      	ldr	r2, [r7, #8]
    77a8:	4b1b      	ldr	r3, [pc, #108]	; (7818 <hif_isr+0x4b8>)
    77aa:	0011      	movs	r1, r2
    77ac:	0018      	movs	r0, r3
    77ae:	4b14      	ldr	r3, [pc, #80]	; (7800 <hif_isr+0x4a0>)
    77b0:	4798      	blx	r3
    77b2:	200d      	movs	r0, #13
    77b4:	4b14      	ldr	r3, [pc, #80]	; (7808 <hif_isr+0x4a8>)
    77b6:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    77b8:	230f      	movs	r3, #15
    77ba:	18fb      	adds	r3, r7, r3
    77bc:	22f4      	movs	r2, #244	; 0xf4
    77be:	701a      	strb	r2, [r3, #0]
			goto ERR1;
    77c0:	e00e      	b.n	77e0 <hif_isr+0x480>
#endif
		}
	}
	else
	{
		M2M_ERR("(hif) Fail to Read interrupt reg\n");
    77c2:	4a16      	ldr	r2, [pc, #88]	; (781c <hif_isr+0x4bc>)
    77c4:	490c      	ldr	r1, [pc, #48]	; (77f8 <hif_isr+0x498>)
    77c6:	4b0d      	ldr	r3, [pc, #52]	; (77fc <hif_isr+0x49c>)
    77c8:	0018      	movs	r0, r3
    77ca:	4b0d      	ldr	r3, [pc, #52]	; (7800 <hif_isr+0x4a0>)
    77cc:	4798      	blx	r3
    77ce:	4b14      	ldr	r3, [pc, #80]	; (7820 <hif_isr+0x4c0>)
    77d0:	0018      	movs	r0, r3
    77d2:	4b10      	ldr	r3, [pc, #64]	; (7814 <hif_isr+0x4b4>)
    77d4:	4798      	blx	r3
    77d6:	200d      	movs	r0, #13
    77d8:	4b0b      	ldr	r3, [pc, #44]	; (7808 <hif_isr+0x4a8>)
    77da:	4798      	blx	r3
		goto ERR1;
    77dc:	e000      	b.n	77e0 <hif_isr+0x480>
			if(ret != M2M_SUCCESS)goto ERR1;
    77de:	46c0      	nop			; (mov r8, r8)
	}

ERR1:
	return ret;
    77e0:	230f      	movs	r3, #15
    77e2:	18fb      	adds	r3, r7, r3
    77e4:	781b      	ldrb	r3, [r3, #0]
    77e6:	b25b      	sxtb	r3, r3
}
    77e8:	0018      	movs	r0, r3
    77ea:	46bd      	mov	sp, r7
    77ec:	b005      	add	sp, #20
    77ee:	bd90      	pop	{r4, r7, pc}
    77f0:	20002a30 	.word	0x20002a30
    77f4:	00000215 	.word	0x00000215
    77f8:	0001fbbc 	.word	0x0001fbbc
    77fc:	0001f8b8 	.word	0x0001f8b8
    7800:	0001c2d5 	.word	0x0001c2d5
    7804:	0001fa28 	.word	0x0001fa28
    7808:	0001c309 	.word	0x0001c309
    780c:	00006df9 	.word	0x00006df9
    7810:	0001fa54 	.word	0x0001fa54
    7814:	0001c3f1 	.word	0x0001c3f1
    7818:	0001fa68 	.word	0x0001fa68
    781c:	0000022d 	.word	0x0000022d
    7820:	0001fa84 	.word	0x0001fa84

00007824 <hif_handle_isr>:
*	@brief	Handle interrupt received from NMC1500 firmware.
*   @return     The function SHALL return 0 for success and a negative value otherwise.
*/

sint8 hif_handle_isr(void)
{
    7824:	b590      	push	{r4, r7, lr}
    7826:	b083      	sub	sp, #12
    7828:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;	
    782a:	1dfb      	adds	r3, r7, #7
    782c:	2200      	movs	r2, #0
    782e:	701a      	strb	r2, [r3, #0]
	while (gstrHifCxt.u8Interrupt) {
    7830:	e023      	b.n	787a <hif_handle_isr+0x56>
		/*must be at that place because of the race of interrupt increment and that decrement*/
		/*when the interrupt enabled*/
		gstrHifCxt.u8Interrupt--;
    7832:	4b18      	ldr	r3, [pc, #96]	; (7894 <hif_handle_isr+0x70>)
    7834:	78db      	ldrb	r3, [r3, #3]
    7836:	b2db      	uxtb	r3, r3
    7838:	3b01      	subs	r3, #1
    783a:	b2da      	uxtb	r2, r3
    783c:	4b15      	ldr	r3, [pc, #84]	; (7894 <hif_handle_isr+0x70>)
    783e:	70da      	strb	r2, [r3, #3]
		while(1)
		{
			ret = hif_isr();
    7840:	1dfc      	adds	r4, r7, #7
    7842:	4b15      	ldr	r3, [pc, #84]	; (7898 <hif_handle_isr+0x74>)
    7844:	4798      	blx	r3
    7846:	0003      	movs	r3, r0
    7848:	7023      	strb	r3, [r4, #0]
			if(ret == M2M_SUCCESS) {
    784a:	1dfb      	adds	r3, r7, #7
    784c:	781b      	ldrb	r3, [r3, #0]
    784e:	b25b      	sxtb	r3, r3
    7850:	2b00      	cmp	r3, #0
    7852:	d100      	bne.n	7856 <hif_handle_isr+0x32>
				/*we will try forever untill we get that interrupt*/
				/*Fail return errors here due to bus errors (reading expected values)*/
				break;
    7854:	e011      	b.n	787a <hif_handle_isr+0x56>
			} else {
				M2M_ERR("(HIF) Fail to handle interrupt %d try Again..\n",ret);
    7856:	4a11      	ldr	r2, [pc, #68]	; (789c <hif_handle_isr+0x78>)
    7858:	4911      	ldr	r1, [pc, #68]	; (78a0 <hif_handle_isr+0x7c>)
    785a:	4b12      	ldr	r3, [pc, #72]	; (78a4 <hif_handle_isr+0x80>)
    785c:	0018      	movs	r0, r3
    785e:	4b12      	ldr	r3, [pc, #72]	; (78a8 <hif_handle_isr+0x84>)
    7860:	4798      	blx	r3
    7862:	1dfb      	adds	r3, r7, #7
    7864:	2200      	movs	r2, #0
    7866:	569a      	ldrsb	r2, [r3, r2]
    7868:	4b10      	ldr	r3, [pc, #64]	; (78ac <hif_handle_isr+0x88>)
    786a:	0011      	movs	r1, r2
    786c:	0018      	movs	r0, r3
    786e:	4b0e      	ldr	r3, [pc, #56]	; (78a8 <hif_handle_isr+0x84>)
    7870:	4798      	blx	r3
    7872:	200d      	movs	r0, #13
    7874:	4b0e      	ldr	r3, [pc, #56]	; (78b0 <hif_handle_isr+0x8c>)
    7876:	4798      	blx	r3
			ret = hif_isr();
    7878:	e7e2      	b.n	7840 <hif_handle_isr+0x1c>
	while (gstrHifCxt.u8Interrupt) {
    787a:	4b06      	ldr	r3, [pc, #24]	; (7894 <hif_handle_isr+0x70>)
    787c:	78db      	ldrb	r3, [r3, #3]
    787e:	b2db      	uxtb	r3, r3
    7880:	2b00      	cmp	r3, #0
    7882:	d1d6      	bne.n	7832 <hif_handle_isr+0xe>
			}
		}
	}

	return ret;
    7884:	1dfb      	adds	r3, r7, #7
    7886:	781b      	ldrb	r3, [r3, #0]
    7888:	b25b      	sxtb	r3, r3
}
    788a:	0018      	movs	r0, r3
    788c:	46bd      	mov	sp, r7
    788e:	b003      	add	sp, #12
    7890:	bd90      	pop	{r4, r7, pc}
    7892:	46c0      	nop			; (mov r8, r8)
    7894:	20002a30 	.word	0x20002a30
    7898:	00007361 	.word	0x00007361
    789c:	0000024a 	.word	0x0000024a
    78a0:	0001fbc4 	.word	0x0001fbc4
    78a4:	0001f8b8 	.word	0x0001f8b8
    78a8:	0001c2d5 	.word	0x0001c2d5
    78ac:	0001faa8 	.word	0x0001faa8
    78b0:	0001c309 	.word	0x0001c309

000078b4 <hif_receive>:
*	@param [in]	isDone
*				If you don't need any more packets send True otherwise send false
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/
sint8 hif_receive(uint32 u32Addr, uint8 *pu8Buf, uint16 u16Sz, uint8 isDone)
{
    78b4:	b590      	push	{r4, r7, lr}
    78b6:	b087      	sub	sp, #28
    78b8:	af00      	add	r7, sp, #0
    78ba:	60f8      	str	r0, [r7, #12]
    78bc:	60b9      	str	r1, [r7, #8]
    78be:	0019      	movs	r1, r3
    78c0:	1dbb      	adds	r3, r7, #6
    78c2:	801a      	strh	r2, [r3, #0]
    78c4:	1d7b      	adds	r3, r7, #5
    78c6:	1c0a      	adds	r2, r1, #0
    78c8:	701a      	strb	r2, [r3, #0]
	sint8 ret = M2M_SUCCESS;
    78ca:	2317      	movs	r3, #23
    78cc:	18fb      	adds	r3, r7, r3
    78ce:	2200      	movs	r2, #0
    78d0:	701a      	strb	r2, [r3, #0]
	if((u32Addr == 0)||(pu8Buf == NULL) || (u16Sz == 0))
    78d2:	68fb      	ldr	r3, [r7, #12]
    78d4:	2b00      	cmp	r3, #0
    78d6:	d006      	beq.n	78e6 <hif_receive+0x32>
    78d8:	68bb      	ldr	r3, [r7, #8]
    78da:	2b00      	cmp	r3, #0
    78dc:	d003      	beq.n	78e6 <hif_receive+0x32>
    78de:	1dbb      	adds	r3, r7, #6
    78e0:	881b      	ldrh	r3, [r3, #0]
    78e2:	2b00      	cmp	r3, #0
    78e4:	d11c      	bne.n	7920 <hif_receive+0x6c>
	{
		if(isDone)
    78e6:	1d7b      	adds	r3, r7, #5
    78e8:	781b      	ldrb	r3, [r3, #0]
    78ea:	2b00      	cmp	r3, #0
    78ec:	d006      	beq.n	78fc <hif_receive+0x48>
		{			
			/* set RX done */
			ret = hif_set_rx_done();
    78ee:	2317      	movs	r3, #23
    78f0:	18fc      	adds	r4, r7, r3
    78f2:	4b42      	ldr	r3, [pc, #264]	; (79fc <hif_receive+0x148>)
    78f4:	4798      	blx	r3
    78f6:	0003      	movs	r3, r0
    78f8:	7023      	strb	r3, [r4, #0]
		else
		{
			ret = M2M_ERR_FAIL;
			M2M_ERR(" hif_receive: Invalid argument\n");
		}
		goto ERR1;
    78fa:	e077      	b.n	79ec <hif_receive+0x138>
			ret = M2M_ERR_FAIL;
    78fc:	2317      	movs	r3, #23
    78fe:	18fb      	adds	r3, r7, r3
    7900:	22f4      	movs	r2, #244	; 0xf4
    7902:	701a      	strb	r2, [r3, #0]
			M2M_ERR(" hif_receive: Invalid argument\n");
    7904:	4a3e      	ldr	r2, [pc, #248]	; (7a00 <hif_receive+0x14c>)
    7906:	493f      	ldr	r1, [pc, #252]	; (7a04 <hif_receive+0x150>)
    7908:	4b3f      	ldr	r3, [pc, #252]	; (7a08 <hif_receive+0x154>)
    790a:	0018      	movs	r0, r3
    790c:	4b3f      	ldr	r3, [pc, #252]	; (7a0c <hif_receive+0x158>)
    790e:	4798      	blx	r3
    7910:	4b3f      	ldr	r3, [pc, #252]	; (7a10 <hif_receive+0x15c>)
    7912:	0018      	movs	r0, r3
    7914:	4b3f      	ldr	r3, [pc, #252]	; (7a14 <hif_receive+0x160>)
    7916:	4798      	blx	r3
    7918:	200d      	movs	r0, #13
    791a:	4b3f      	ldr	r3, [pc, #252]	; (7a18 <hif_receive+0x164>)
    791c:	4798      	blx	r3
		goto ERR1;
    791e:	e065      	b.n	79ec <hif_receive+0x138>
	}

	if(u16Sz > gstrHifCxt.u32RxSize)
    7920:	1dbb      	adds	r3, r7, #6
    7922:	881a      	ldrh	r2, [r3, #0]
    7924:	4b3d      	ldr	r3, [pc, #244]	; (7a1c <hif_receive+0x168>)
    7926:	689b      	ldr	r3, [r3, #8]
    7928:	429a      	cmp	r2, r3
    792a:	d915      	bls.n	7958 <hif_receive+0xa4>
	{
		ret = M2M_ERR_FAIL;
    792c:	2317      	movs	r3, #23
    792e:	18fb      	adds	r3, r7, r3
    7930:	22f4      	movs	r2, #244	; 0xf4
    7932:	701a      	strb	r2, [r3, #0]
		M2M_ERR("APP Requested Size is larger than the recived buffer size <%u><%lu>\n",u16Sz, gstrHifCxt.u32RxSize);
    7934:	4a3a      	ldr	r2, [pc, #232]	; (7a20 <hif_receive+0x16c>)
    7936:	4933      	ldr	r1, [pc, #204]	; (7a04 <hif_receive+0x150>)
    7938:	4b33      	ldr	r3, [pc, #204]	; (7a08 <hif_receive+0x154>)
    793a:	0018      	movs	r0, r3
    793c:	4b33      	ldr	r3, [pc, #204]	; (7a0c <hif_receive+0x158>)
    793e:	4798      	blx	r3
    7940:	1dbb      	adds	r3, r7, #6
    7942:	8819      	ldrh	r1, [r3, #0]
    7944:	4b35      	ldr	r3, [pc, #212]	; (7a1c <hif_receive+0x168>)
    7946:	689a      	ldr	r2, [r3, #8]
    7948:	4b36      	ldr	r3, [pc, #216]	; (7a24 <hif_receive+0x170>)
    794a:	0018      	movs	r0, r3
    794c:	4b2f      	ldr	r3, [pc, #188]	; (7a0c <hif_receive+0x158>)
    794e:	4798      	blx	r3
    7950:	200d      	movs	r0, #13
    7952:	4b31      	ldr	r3, [pc, #196]	; (7a18 <hif_receive+0x164>)
    7954:	4798      	blx	r3
		goto ERR1;
    7956:	e049      	b.n	79ec <hif_receive+0x138>
	}
	if((u32Addr < gstrHifCxt.u32RxAddr)||((u32Addr + u16Sz)>(gstrHifCxt.u32RxAddr + gstrHifCxt.u32RxSize)))
    7958:	4b30      	ldr	r3, [pc, #192]	; (7a1c <hif_receive+0x168>)
    795a:	685a      	ldr	r2, [r3, #4]
    795c:	68fb      	ldr	r3, [r7, #12]
    795e:	429a      	cmp	r2, r3
    7960:	d80a      	bhi.n	7978 <hif_receive+0xc4>
    7962:	1dbb      	adds	r3, r7, #6
    7964:	881a      	ldrh	r2, [r3, #0]
    7966:	68fb      	ldr	r3, [r7, #12]
    7968:	18d2      	adds	r2, r2, r3
    796a:	4b2c      	ldr	r3, [pc, #176]	; (7a1c <hif_receive+0x168>)
    796c:	6859      	ldr	r1, [r3, #4]
    796e:	4b2b      	ldr	r3, [pc, #172]	; (7a1c <hif_receive+0x168>)
    7970:	689b      	ldr	r3, [r3, #8]
    7972:	18cb      	adds	r3, r1, r3
    7974:	429a      	cmp	r2, r3
    7976:	d911      	bls.n	799c <hif_receive+0xe8>
	{
		ret = M2M_ERR_FAIL;
    7978:	2317      	movs	r3, #23
    797a:	18fb      	adds	r3, r7, r3
    797c:	22f4      	movs	r2, #244	; 0xf4
    797e:	701a      	strb	r2, [r3, #0]
		M2M_ERR("APP Requested Address beyond the recived buffer address and length\n");
    7980:	4a29      	ldr	r2, [pc, #164]	; (7a28 <hif_receive+0x174>)
    7982:	4920      	ldr	r1, [pc, #128]	; (7a04 <hif_receive+0x150>)
    7984:	4b20      	ldr	r3, [pc, #128]	; (7a08 <hif_receive+0x154>)
    7986:	0018      	movs	r0, r3
    7988:	4b20      	ldr	r3, [pc, #128]	; (7a0c <hif_receive+0x158>)
    798a:	4798      	blx	r3
    798c:	4b27      	ldr	r3, [pc, #156]	; (7a2c <hif_receive+0x178>)
    798e:	0018      	movs	r0, r3
    7990:	4b20      	ldr	r3, [pc, #128]	; (7a14 <hif_receive+0x160>)
    7992:	4798      	blx	r3
    7994:	200d      	movs	r0, #13
    7996:	4b20      	ldr	r3, [pc, #128]	; (7a18 <hif_receive+0x164>)
    7998:	4798      	blx	r3
		goto ERR1;
    799a:	e027      	b.n	79ec <hif_receive+0x138>
	}
	
	/* Receive the payload */
	ret = nm_read_block(u32Addr, pu8Buf, u16Sz);
    799c:	1dbb      	adds	r3, r7, #6
    799e:	881a      	ldrh	r2, [r3, #0]
    79a0:	2317      	movs	r3, #23
    79a2:	18fc      	adds	r4, r7, r3
    79a4:	68b9      	ldr	r1, [r7, #8]
    79a6:	68fb      	ldr	r3, [r7, #12]
    79a8:	0018      	movs	r0, r3
    79aa:	4b21      	ldr	r3, [pc, #132]	; (7a30 <hif_receive+0x17c>)
    79ac:	4798      	blx	r3
    79ae:	0003      	movs	r3, r0
    79b0:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS)goto ERR1;
    79b2:	2317      	movs	r3, #23
    79b4:	18fb      	adds	r3, r7, r3
    79b6:	781b      	ldrb	r3, [r3, #0]
    79b8:	b25b      	sxtb	r3, r3
    79ba:	2b00      	cmp	r3, #0
    79bc:	d115      	bne.n	79ea <hif_receive+0x136>

	/* check if this is the last packet */
	if((((gstrHifCxt.u32RxAddr + gstrHifCxt.u32RxSize) - (u32Addr + u16Sz)) <= 0) || isDone)
    79be:	4b17      	ldr	r3, [pc, #92]	; (7a1c <hif_receive+0x168>)
    79c0:	685a      	ldr	r2, [r3, #4]
    79c2:	4b16      	ldr	r3, [pc, #88]	; (7a1c <hif_receive+0x168>)
    79c4:	689b      	ldr	r3, [r3, #8]
    79c6:	18d2      	adds	r2, r2, r3
    79c8:	1dbb      	adds	r3, r7, #6
    79ca:	8819      	ldrh	r1, [r3, #0]
    79cc:	68fb      	ldr	r3, [r7, #12]
    79ce:	18cb      	adds	r3, r1, r3
    79d0:	429a      	cmp	r2, r3
    79d2:	d003      	beq.n	79dc <hif_receive+0x128>
    79d4:	1d7b      	adds	r3, r7, #5
    79d6:	781b      	ldrb	r3, [r3, #0]
    79d8:	2b00      	cmp	r3, #0
    79da:	d007      	beq.n	79ec <hif_receive+0x138>
	{
		/* set RX done */
		ret = hif_set_rx_done();
    79dc:	2317      	movs	r3, #23
    79de:	18fc      	adds	r4, r7, r3
    79e0:	4b06      	ldr	r3, [pc, #24]	; (79fc <hif_receive+0x148>)
    79e2:	4798      	blx	r3
    79e4:	0003      	movs	r3, r0
    79e6:	7023      	strb	r3, [r4, #0]
    79e8:	e000      	b.n	79ec <hif_receive+0x138>
	if(ret != M2M_SUCCESS)goto ERR1;
    79ea:	46c0      	nop			; (mov r8, r8)
	}

ERR1:
	return ret;
    79ec:	2317      	movs	r3, #23
    79ee:	18fb      	adds	r3, r7, r3
    79f0:	781b      	ldrb	r3, [r3, #0]
    79f2:	b25b      	sxtb	r3, r3
}
    79f4:	0018      	movs	r0, r3
    79f6:	46bd      	mov	sp, r7
    79f8:	b007      	add	sp, #28
    79fa:	bd90      	pop	{r4, r7, pc}
    79fc:	00006df9 	.word	0x00006df9
    7a00:	0000026b 	.word	0x0000026b
    7a04:	0001fbd4 	.word	0x0001fbd4
    7a08:	0001f8b8 	.word	0x0001f8b8
    7a0c:	0001c2d5 	.word	0x0001c2d5
    7a10:	0001fad8 	.word	0x0001fad8
    7a14:	0001c3f1 	.word	0x0001c3f1
    7a18:	0001c309 	.word	0x0001c309
    7a1c:	20002a30 	.word	0x20002a30
    7a20:	00000273 	.word	0x00000273
    7a24:	0001faf8 	.word	0x0001faf8
    7a28:	00000279 	.word	0x00000279
    7a2c:	0001fb40 	.word	0x0001fb40
    7a30:	000091c9 	.word	0x000091c9

00007a34 <hif_register_cb>:
*				function to be set
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_register_cb(uint8 u8Grp,tpfHifCallBack fn)
{
    7a34:	b580      	push	{r7, lr}
    7a36:	b084      	sub	sp, #16
    7a38:	af00      	add	r7, sp, #0
    7a3a:	0002      	movs	r2, r0
    7a3c:	6039      	str	r1, [r7, #0]
    7a3e:	1dfb      	adds	r3, r7, #7
    7a40:	701a      	strb	r2, [r3, #0]
	sint8 ret = M2M_SUCCESS;
    7a42:	230f      	movs	r3, #15
    7a44:	18fb      	adds	r3, r7, r3
    7a46:	2200      	movs	r2, #0
    7a48:	701a      	strb	r2, [r3, #0]
	switch(u8Grp)
    7a4a:	1dfb      	adds	r3, r7, #7
    7a4c:	781b      	ldrb	r3, [r3, #0]
    7a4e:	2b07      	cmp	r3, #7
    7a50:	d820      	bhi.n	7a94 <hif_register_cb+0x60>
    7a52:	009a      	lsls	r2, r3, #2
    7a54:	4b1e      	ldr	r3, [pc, #120]	; (7ad0 <hif_register_cb+0x9c>)
    7a56:	18d3      	adds	r3, r2, r3
    7a58:	681b      	ldr	r3, [r3, #0]
    7a5a:	469f      	mov	pc, r3
	{
		case M2M_REQ_GROUP_IP:
			gstrHifCxt.pfIpCb = fn;
    7a5c:	4b1d      	ldr	r3, [pc, #116]	; (7ad4 <hif_register_cb+0xa0>)
    7a5e:	683a      	ldr	r2, [r7, #0]
    7a60:	611a      	str	r2, [r3, #16]
			break;
    7a62:	e02c      	b.n	7abe <hif_register_cb+0x8a>
		case M2M_REQ_GROUP_WIFI:
			gstrHifCxt.pfWifiCb = fn;
    7a64:	4b1b      	ldr	r3, [pc, #108]	; (7ad4 <hif_register_cb+0xa0>)
    7a66:	683a      	ldr	r2, [r7, #0]
    7a68:	60da      	str	r2, [r3, #12]
			break;
    7a6a:	e028      	b.n	7abe <hif_register_cb+0x8a>
		case M2M_REQ_GROUP_OTA:
			gstrHifCxt.pfOtaCb = fn;
    7a6c:	4b19      	ldr	r3, [pc, #100]	; (7ad4 <hif_register_cb+0xa0>)
    7a6e:	683a      	ldr	r2, [r7, #0]
    7a70:	615a      	str	r2, [r3, #20]
			break;
    7a72:	e024      	b.n	7abe <hif_register_cb+0x8a>
		case M2M_REQ_GROUP_HIF:
			gstrHifCxt.pfHifCb = fn;
    7a74:	4b17      	ldr	r3, [pc, #92]	; (7ad4 <hif_register_cb+0xa0>)
    7a76:	683a      	ldr	r2, [r7, #0]
    7a78:	61da      	str	r2, [r3, #28]
			break;
    7a7a:	e020      	b.n	7abe <hif_register_cb+0x8a>
		case M2M_REQ_GROUP_CRYPTO:
			gstrHifCxt.pfCryptoCb = fn;
    7a7c:	4b15      	ldr	r3, [pc, #84]	; (7ad4 <hif_register_cb+0xa0>)
    7a7e:	683a      	ldr	r2, [r7, #0]
    7a80:	621a      	str	r2, [r3, #32]
			break;
    7a82:	e01c      	b.n	7abe <hif_register_cb+0x8a>
		case M2M_REQ_GROUP_SIGMA:
			gstrHifCxt.pfSigmaCb = fn;
    7a84:	4b13      	ldr	r3, [pc, #76]	; (7ad4 <hif_register_cb+0xa0>)
    7a86:	683a      	ldr	r2, [r7, #0]
    7a88:	619a      	str	r2, [r3, #24]
			break;
    7a8a:	e018      	b.n	7abe <hif_register_cb+0x8a>
		case M2M_REQ_GROUP_SSL:
			gstrHifCxt.pfSslCb = fn;
    7a8c:	4b11      	ldr	r3, [pc, #68]	; (7ad4 <hif_register_cb+0xa0>)
    7a8e:	683a      	ldr	r2, [r7, #0]
    7a90:	625a      	str	r2, [r3, #36]	; 0x24
			break;
    7a92:	e014      	b.n	7abe <hif_register_cb+0x8a>
		default:
			M2M_ERR("GRp ? %d\n",u8Grp);
    7a94:	4a10      	ldr	r2, [pc, #64]	; (7ad8 <hif_register_cb+0xa4>)
    7a96:	4911      	ldr	r1, [pc, #68]	; (7adc <hif_register_cb+0xa8>)
    7a98:	4b11      	ldr	r3, [pc, #68]	; (7ae0 <hif_register_cb+0xac>)
    7a9a:	0018      	movs	r0, r3
    7a9c:	4b11      	ldr	r3, [pc, #68]	; (7ae4 <hif_register_cb+0xb0>)
    7a9e:	4798      	blx	r3
    7aa0:	1dfb      	adds	r3, r7, #7
    7aa2:	781a      	ldrb	r2, [r3, #0]
    7aa4:	4b10      	ldr	r3, [pc, #64]	; (7ae8 <hif_register_cb+0xb4>)
    7aa6:	0011      	movs	r1, r2
    7aa8:	0018      	movs	r0, r3
    7aaa:	4b0e      	ldr	r3, [pc, #56]	; (7ae4 <hif_register_cb+0xb0>)
    7aac:	4798      	blx	r3
    7aae:	200d      	movs	r0, #13
    7ab0:	4b0e      	ldr	r3, [pc, #56]	; (7aec <hif_register_cb+0xb8>)
    7ab2:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    7ab4:	230f      	movs	r3, #15
    7ab6:	18fb      	adds	r3, r7, r3
    7ab8:	22f4      	movs	r2, #244	; 0xf4
    7aba:	701a      	strb	r2, [r3, #0]
			break;
    7abc:	46c0      	nop			; (mov r8, r8)
	}
	return ret;
    7abe:	230f      	movs	r3, #15
    7ac0:	18fb      	adds	r3, r7, r3
    7ac2:	781b      	ldrb	r3, [r3, #0]
    7ac4:	b25b      	sxtb	r3, r3
}
    7ac6:	0018      	movs	r0, r3
    7ac8:	46bd      	mov	sp, r7
    7aca:	b004      	add	sp, #16
    7acc:	bd80      	pop	{r7, pc}
    7ace:	46c0      	nop			; (mov r8, r8)
    7ad0:	0001fb90 	.word	0x0001fb90
    7ad4:	20002a30 	.word	0x20002a30
    7ad8:	000002b1 	.word	0x000002b1
    7adc:	0001fbe0 	.word	0x0001fbe0
    7ae0:	0001f8b8 	.word	0x0001f8b8
    7ae4:	0001c2d5 	.word	0x0001c2d5
    7ae8:	0001fb84 	.word	0x0001fb84
    7aec:	0001c309 	.word	0x0001c309

00007af0 <m2m_periph_pullup_ctrl>:
	return M2M_SUCCESS;
}


sint8 m2m_periph_pullup_ctrl(uint32 pinmask, uint8 enable)
{
    7af0:	b580      	push	{r7, lr}
    7af2:	b082      	sub	sp, #8
    7af4:	af00      	add	r7, sp, #0
    7af6:	6078      	str	r0, [r7, #4]
    7af8:	000a      	movs	r2, r1
    7afa:	1cfb      	adds	r3, r7, #3
    7afc:	701a      	strb	r2, [r3, #0]
	return pullup_ctrl(pinmask, enable);
    7afe:	1cfb      	adds	r3, r7, #3
    7b00:	781a      	ldrb	r2, [r3, #0]
    7b02:	687b      	ldr	r3, [r7, #4]
    7b04:	0011      	movs	r1, r2
    7b06:	0018      	movs	r0, r3
    7b08:	4b03      	ldr	r3, [pc, #12]	; (7b18 <m2m_periph_pullup_ctrl+0x28>)
    7b0a:	4798      	blx	r3
    7b0c:	0003      	movs	r3, r0
}
    7b0e:	0018      	movs	r0, r3
    7b10:	46bd      	mov	sp, r7
    7b12:	b002      	add	sp, #8
    7b14:	bd80      	pop	{r7, pc}
    7b16:	46c0      	nop			; (mov r8, r8)
    7b18:	00008fd5 	.word	0x00008fd5

00007b1c <m2m_ssl_cb>:
				HIF data length.
	@param [in]	u32Addr
				HIF address.
*/
static void m2m_ssl_cb(uint8 u8OpCode, uint16 u16DataSize, uint32 u32Addr)
{
    7b1c:	b5b0      	push	{r4, r5, r7, lr}
    7b1e:	b0a0      	sub	sp, #128	; 0x80
    7b20:	af00      	add	r7, sp, #0
    7b22:	603a      	str	r2, [r7, #0]
    7b24:	1dfb      	adds	r3, r7, #7
    7b26:	1c02      	adds	r2, r0, #0
    7b28:	701a      	strb	r2, [r3, #0]
    7b2a:	1d3b      	adds	r3, r7, #4
    7b2c:	1c0a      	adds	r2, r1, #0
    7b2e:	801a      	strh	r2, [r3, #0]
	sint8 s8tmp = M2M_SUCCESS;
    7b30:	237f      	movs	r3, #127	; 0x7f
    7b32:	18fb      	adds	r3, r7, r3
    7b34:	2200      	movs	r2, #0
    7b36:	701a      	strb	r2, [r3, #0]
	switch(u8OpCode)
    7b38:	1dfb      	adds	r3, r7, #7
    7b3a:	781b      	ldrb	r3, [r3, #0]
    7b3c:	2b01      	cmp	r3, #1
    7b3e:	d002      	beq.n	7b46 <m2m_ssl_cb+0x2a>
    7b40:	2b06      	cmp	r3, #6
    7b42:	d022      	beq.n	7b8a <m2m_ssl_cb+0x6e>
    7b44:	e041      	b.n	7bca <m2m_ssl_cb+0xae>
	{
		case M2M_SSL_REQ_ECC:
		{
			tstrEccReqInfo strEccREQ;
			s8tmp = hif_receive(u32Addr, (uint8*)&strEccREQ, sizeof(tstrEccReqInfo), 0);
    7b46:	237f      	movs	r3, #127	; 0x7f
    7b48:	18fc      	adds	r4, r7, r3
    7b4a:	2308      	movs	r3, #8
    7b4c:	18f9      	adds	r1, r7, r3
    7b4e:	6838      	ldr	r0, [r7, #0]
    7b50:	2300      	movs	r3, #0
    7b52:	2270      	movs	r2, #112	; 0x70
    7b54:	4d28      	ldr	r5, [pc, #160]	; (7bf8 <m2m_ssl_cb+0xdc>)
    7b56:	47a8      	blx	r5
    7b58:	0003      	movs	r3, r0
    7b5a:	7023      	strb	r3, [r4, #0]
			if(s8tmp == M2M_SUCCESS)
    7b5c:	237f      	movs	r3, #127	; 0x7f
    7b5e:	18fb      	adds	r3, r7, r3
    7b60:	781b      	ldrb	r3, [r3, #0]
    7b62:	b25b      	sxtb	r3, r3
    7b64:	2b00      	cmp	r3, #0
    7b66:	d12d      	bne.n	7bc4 <m2m_ssl_cb+0xa8>
			{
				if (gpfAppSSLCb)
    7b68:	4b24      	ldr	r3, [pc, #144]	; (7bfc <m2m_ssl_cb+0xe0>)
    7b6a:	681b      	ldr	r3, [r3, #0]
    7b6c:	2b00      	cmp	r3, #0
    7b6e:	d029      	beq.n	7bc4 <m2m_ssl_cb+0xa8>
				{
					gu32HIFAddr = u32Addr + sizeof(tstrEccReqInfo);
    7b70:	683b      	ldr	r3, [r7, #0]
    7b72:	3370      	adds	r3, #112	; 0x70
    7b74:	001a      	movs	r2, r3
    7b76:	4b22      	ldr	r3, [pc, #136]	; (7c00 <m2m_ssl_cb+0xe4>)
    7b78:	601a      	str	r2, [r3, #0]
					gpfAppSSLCb(M2M_SSL_REQ_ECC, &strEccREQ);
    7b7a:	4b20      	ldr	r3, [pc, #128]	; (7bfc <m2m_ssl_cb+0xe0>)
    7b7c:	681b      	ldr	r3, [r3, #0]
    7b7e:	2208      	movs	r2, #8
    7b80:	18ba      	adds	r2, r7, r2
    7b82:	0011      	movs	r1, r2
    7b84:	2001      	movs	r0, #1
    7b86:	4798      	blx	r3
				}
			}
		}
		break;
    7b88:	e01c      	b.n	7bc4 <m2m_ssl_cb+0xa8>
		case M2M_SSL_RESP_SET_CS_LIST:
		{
			tstrSslSetActiveCsList strCsList;
			s8tmp = hif_receive(u32Addr, (uint8*)&strCsList, sizeof(tstrSslSetActiveCsList), 0);
    7b8a:	237f      	movs	r3, #127	; 0x7f
    7b8c:	18fc      	adds	r4, r7, r3
    7b8e:	2378      	movs	r3, #120	; 0x78
    7b90:	18f9      	adds	r1, r7, r3
    7b92:	6838      	ldr	r0, [r7, #0]
    7b94:	2300      	movs	r3, #0
    7b96:	2204      	movs	r2, #4
    7b98:	4d17      	ldr	r5, [pc, #92]	; (7bf8 <m2m_ssl_cb+0xdc>)
    7b9a:	47a8      	blx	r5
    7b9c:	0003      	movs	r3, r0
    7b9e:	7023      	strb	r3, [r4, #0]
			if(s8tmp == M2M_SUCCESS)
    7ba0:	237f      	movs	r3, #127	; 0x7f
    7ba2:	18fb      	adds	r3, r7, r3
    7ba4:	781b      	ldrb	r3, [r3, #0]
    7ba6:	b25b      	sxtb	r3, r3
    7ba8:	2b00      	cmp	r3, #0
    7baa:	d10d      	bne.n	7bc8 <m2m_ssl_cb+0xac>
			{
				if (gpfAppSSLCb)
    7bac:	4b13      	ldr	r3, [pc, #76]	; (7bfc <m2m_ssl_cb+0xe0>)
    7bae:	681b      	ldr	r3, [r3, #0]
    7bb0:	2b00      	cmp	r3, #0
    7bb2:	d009      	beq.n	7bc8 <m2m_ssl_cb+0xac>
					gpfAppSSLCb(M2M_SSL_RESP_SET_CS_LIST, &strCsList);
    7bb4:	4b11      	ldr	r3, [pc, #68]	; (7bfc <m2m_ssl_cb+0xe0>)
    7bb6:	681b      	ldr	r3, [r3, #0]
    7bb8:	2278      	movs	r2, #120	; 0x78
    7bba:	18ba      	adds	r2, r7, r2
    7bbc:	0011      	movs	r1, r2
    7bbe:	2006      	movs	r0, #6
    7bc0:	4798      	blx	r3
			}
		}
		break;
    7bc2:	e001      	b.n	7bc8 <m2m_ssl_cb+0xac>
		break;
    7bc4:	46c0      	nop			; (mov r8, r8)
    7bc6:	e000      	b.n	7bca <m2m_ssl_cb+0xae>
		break;
    7bc8:	46c0      	nop			; (mov r8, r8)
	}
	if(s8tmp != M2M_SUCCESS)
    7bca:	237f      	movs	r3, #127	; 0x7f
    7bcc:	18fb      	adds	r3, r7, r3
    7bce:	781b      	ldrb	r3, [r3, #0]
    7bd0:	b25b      	sxtb	r3, r3
    7bd2:	2b00      	cmp	r3, #0
    7bd4:	d00c      	beq.n	7bf0 <m2m_ssl_cb+0xd4>
	{
		M2M_ERR("Error receiving SSL from the HIF\n");
    7bd6:	490b      	ldr	r1, [pc, #44]	; (7c04 <m2m_ssl_cb+0xe8>)
    7bd8:	4b0b      	ldr	r3, [pc, #44]	; (7c08 <m2m_ssl_cb+0xec>)
    7bda:	226b      	movs	r2, #107	; 0x6b
    7bdc:	0018      	movs	r0, r3
    7bde:	4b0b      	ldr	r3, [pc, #44]	; (7c0c <m2m_ssl_cb+0xf0>)
    7be0:	4798      	blx	r3
    7be2:	4b0b      	ldr	r3, [pc, #44]	; (7c10 <m2m_ssl_cb+0xf4>)
    7be4:	0018      	movs	r0, r3
    7be6:	4b0b      	ldr	r3, [pc, #44]	; (7c14 <m2m_ssl_cb+0xf8>)
    7be8:	4798      	blx	r3
    7bea:	200d      	movs	r0, #13
    7bec:	4b0a      	ldr	r3, [pc, #40]	; (7c18 <m2m_ssl_cb+0xfc>)
    7bee:	4798      	blx	r3
	}
}
    7bf0:	46c0      	nop			; (mov r8, r8)
    7bf2:	46bd      	mov	sp, r7
    7bf4:	b020      	add	sp, #128	; 0x80
    7bf6:	bdb0      	pop	{r4, r5, r7, pc}
    7bf8:	000078b5 	.word	0x000078b5
    7bfc:	20000540 	.word	0x20000540
    7c00:	20000544 	.word	0x20000544
    7c04:	0001fc50 	.word	0x0001fc50
    7c08:	0001fbf0 	.word	0x0001fbf0
    7c0c:	0001c2d5 	.word	0x0001c2d5
    7c10:	0001fc04 	.word	0x0001fc04
    7c14:	0001c3f1 	.word	0x0001c3f1
    7c18:	0001c309 	.word	0x0001c309

00007c1c <m2m_ssl_set_active_ciphersuites>:
@return		
	- [SOCK_ERR_NO_ERROR](@ref SOCK_ERR_NO_ERROR)
	- [SOCK_ERR_INVALID_ARG](@ref SOCK_ERR_INVALID_ARG)
*/
sint8 m2m_ssl_set_active_ciphersuites(uint32 u32SslCsBMP)
{
    7c1c:	b5b0      	push	{r4, r5, r7, lr}
    7c1e:	b088      	sub	sp, #32
    7c20:	af04      	add	r7, sp, #16
    7c22:	6078      	str	r0, [r7, #4]
	sint8 s8Ret = M2M_SUCCESS;
    7c24:	230f      	movs	r3, #15
    7c26:	18fb      	adds	r3, r7, r3
    7c28:	2200      	movs	r2, #0
    7c2a:	701a      	strb	r2, [r3, #0]
	tstrSslSetActiveCsList	strCsList;
	
	strCsList.u32CsBMP = u32SslCsBMP;
    7c2c:	687b      	ldr	r3, [r7, #4]
    7c2e:	60bb      	str	r3, [r7, #8]
	s8Ret = hif_send(M2M_REQ_GROUP_SSL, M2M_SSL_REQ_SET_CS_LIST, (uint8*)&strCsList, sizeof(tstrSslSetActiveCsList), NULL, 0, 0);
    7c30:	230f      	movs	r3, #15
    7c32:	18fc      	adds	r4, r7, r3
    7c34:	2308      	movs	r3, #8
    7c36:	18fa      	adds	r2, r7, r3
    7c38:	2300      	movs	r3, #0
    7c3a:	9302      	str	r3, [sp, #8]
    7c3c:	2300      	movs	r3, #0
    7c3e:	9301      	str	r3, [sp, #4]
    7c40:	2300      	movs	r3, #0
    7c42:	9300      	str	r3, [sp, #0]
    7c44:	2304      	movs	r3, #4
    7c46:	2105      	movs	r1, #5
    7c48:	2005      	movs	r0, #5
    7c4a:	4d06      	ldr	r5, [pc, #24]	; (7c64 <m2m_ssl_set_active_ciphersuites+0x48>)
    7c4c:	47a8      	blx	r5
    7c4e:	0003      	movs	r3, r0
    7c50:	7023      	strb	r3, [r4, #0]

	return s8Ret;
    7c52:	230f      	movs	r3, #15
    7c54:	18fb      	adds	r3, r7, r3
    7c56:	781b      	ldrb	r3, [r3, #0]
    7c58:	b25b      	sxtb	r3, r3
}
    7c5a:	0018      	movs	r0, r3
    7c5c:	46bd      	mov	sp, r7
    7c5e:	b004      	add	sp, #16
    7c60:	bdb0      	pop	{r4, r5, r7, pc}
    7c62:	46c0      	nop			; (mov r8, r8)
    7c64:	00006fc1 	.word	0x00006fc1

00007c68 <m2m_ssl_init>:
	@param [in]	pfAppSslCb
	Application SSL callback function.
	@return		The function SHALL return 0 for success and a negative value otherwise.
*/
NMI_API sint8 m2m_ssl_init(tpfAppSSLCb pfAppSSLCb)
{
    7c68:	b590      	push	{r4, r7, lr}
    7c6a:	b085      	sub	sp, #20
    7c6c:	af00      	add	r7, sp, #0
    7c6e:	6078      	str	r0, [r7, #4]
	sint8 s8Ret = M2M_SUCCESS;
    7c70:	230f      	movs	r3, #15
    7c72:	18fb      	adds	r3, r7, r3
    7c74:	2200      	movs	r2, #0
    7c76:	701a      	strb	r2, [r3, #0]

	gpfAppSSLCb = pfAppSSLCb;
    7c78:	4b18      	ldr	r3, [pc, #96]	; (7cdc <m2m_ssl_init+0x74>)
    7c7a:	687a      	ldr	r2, [r7, #4]
    7c7c:	601a      	str	r2, [r3, #0]
	gu32HIFAddr = 0;
    7c7e:	4b18      	ldr	r3, [pc, #96]	; (7ce0 <m2m_ssl_init+0x78>)
    7c80:	2200      	movs	r2, #0
    7c82:	601a      	str	r2, [r3, #0]

	s8Ret = hif_register_cb(M2M_REQ_GROUP_SSL,m2m_ssl_cb);
    7c84:	230f      	movs	r3, #15
    7c86:	18fc      	adds	r4, r7, r3
    7c88:	4b16      	ldr	r3, [pc, #88]	; (7ce4 <m2m_ssl_init+0x7c>)
    7c8a:	0019      	movs	r1, r3
    7c8c:	2005      	movs	r0, #5
    7c8e:	4b16      	ldr	r3, [pc, #88]	; (7ce8 <m2m_ssl_init+0x80>)
    7c90:	4798      	blx	r3
    7c92:	0003      	movs	r3, r0
    7c94:	7023      	strb	r3, [r4, #0]
	if (s8Ret != M2M_SUCCESS)
    7c96:	230f      	movs	r3, #15
    7c98:	18fb      	adds	r3, r7, r3
    7c9a:	781b      	ldrb	r3, [r3, #0]
    7c9c:	b25b      	sxtb	r3, r3
    7c9e:	2b00      	cmp	r3, #0
    7ca0:	d013      	beq.n	7cca <m2m_ssl_init+0x62>
	{
		M2M_ERR("hif_register_cb() failed with ret=%d", s8Ret);
    7ca2:	2330      	movs	r3, #48	; 0x30
    7ca4:	33ff      	adds	r3, #255	; 0xff
    7ca6:	001a      	movs	r2, r3
    7ca8:	4910      	ldr	r1, [pc, #64]	; (7cec <m2m_ssl_init+0x84>)
    7caa:	4b11      	ldr	r3, [pc, #68]	; (7cf0 <m2m_ssl_init+0x88>)
    7cac:	0018      	movs	r0, r3
    7cae:	4b11      	ldr	r3, [pc, #68]	; (7cf4 <m2m_ssl_init+0x8c>)
    7cb0:	4798      	blx	r3
    7cb2:	230f      	movs	r3, #15
    7cb4:	18fb      	adds	r3, r7, r3
    7cb6:	2200      	movs	r2, #0
    7cb8:	569a      	ldrsb	r2, [r3, r2]
    7cba:	4b0f      	ldr	r3, [pc, #60]	; (7cf8 <m2m_ssl_init+0x90>)
    7cbc:	0011      	movs	r1, r2
    7cbe:	0018      	movs	r0, r3
    7cc0:	4b0c      	ldr	r3, [pc, #48]	; (7cf4 <m2m_ssl_init+0x8c>)
    7cc2:	4798      	blx	r3
    7cc4:	200d      	movs	r0, #13
    7cc6:	4b0d      	ldr	r3, [pc, #52]	; (7cfc <m2m_ssl_init+0x94>)
    7cc8:	4798      	blx	r3
	}
	return s8Ret;
    7cca:	230f      	movs	r3, #15
    7ccc:	18fb      	adds	r3, r7, r3
    7cce:	781b      	ldrb	r3, [r3, #0]
    7cd0:	b25b      	sxtb	r3, r3
    7cd2:	0018      	movs	r0, r3
    7cd4:	46bd      	mov	sp, r7
    7cd6:	b005      	add	sp, #20
    7cd8:	bd90      	pop	{r4, r7, pc}
    7cda:	46c0      	nop			; (mov r8, r8)
    7cdc:	20000540 	.word	0x20000540
    7ce0:	20000544 	.word	0x20000544
    7ce4:	00007b1d 	.word	0x00007b1d
    7ce8:	00007a35 	.word	0x00007a35
    7cec:	0001fc5c 	.word	0x0001fc5c
    7cf0:	0001fbf0 	.word	0x0001fbf0
    7cf4:	0001c2d5 	.word	0x0001c2d5
    7cf8:	0001fc28 	.word	0x0001fc28
    7cfc:	0001c309 	.word	0x0001c309

00007d00 <m2m_wifi_cb>:
*	@author
*	@date
*	@version	1.0
*/
static void m2m_wifi_cb(uint8 u8OpCode, uint16 u16DataSize, uint32 u32Addr)
{
    7d00:	b590      	push	{r4, r7, lr}
    7d02:	b0ad      	sub	sp, #180	; 0xb4
    7d04:	af02      	add	r7, sp, #8
    7d06:	603a      	str	r2, [r7, #0]
    7d08:	1dfb      	adds	r3, r7, #7
    7d0a:	1c02      	adds	r2, r0, #0
    7d0c:	701a      	strb	r2, [r3, #0]
    7d0e:	1d3b      	adds	r3, r7, #4
    7d10:	1c0a      	adds	r2, r1, #0
    7d12:	801a      	strh	r2, [r3, #0]
	uint8 rx_buf[8];
	if (u8OpCode == M2M_WIFI_RESP_CON_STATE_CHANGED)
    7d14:	1dfb      	adds	r3, r7, #7
    7d16:	781b      	ldrb	r3, [r3, #0]
    7d18:	2b2c      	cmp	r3, #44	; 0x2c
    7d1a:	d116      	bne.n	7d4a <m2m_wifi_cb+0x4a>
	{
		tstrM2mWifiStateChanged strState;
		if (hif_receive(u32Addr, (uint8*) &strState,sizeof(tstrM2mWifiStateChanged), 0) == M2M_SUCCESS)
    7d1c:	239c      	movs	r3, #156	; 0x9c
    7d1e:	18f9      	adds	r1, r7, r3
    7d20:	6838      	ldr	r0, [r7, #0]
    7d22:	2300      	movs	r3, #0
    7d24:	2204      	movs	r2, #4
    7d26:	4cc6      	ldr	r4, [pc, #792]	; (8040 <m2m_wifi_cb+0x340>)
    7d28:	47a0      	blx	r4
    7d2a:	1e03      	subs	r3, r0, #0
    7d2c:	d000      	beq.n	7d30 <m2m_wifi_cb+0x30>
    7d2e:	e1aa      	b.n	8086 <m2m_wifi_cb+0x386>
		{
			if (gpfAppWifiCb)
    7d30:	4bc4      	ldr	r3, [pc, #784]	; (8044 <m2m_wifi_cb+0x344>)
    7d32:	681b      	ldr	r3, [r3, #0]
    7d34:	2b00      	cmp	r3, #0
    7d36:	d100      	bne.n	7d3a <m2m_wifi_cb+0x3a>
    7d38:	e1a5      	b.n	8086 <m2m_wifi_cb+0x386>
				gpfAppWifiCb(M2M_WIFI_RESP_CON_STATE_CHANGED, &strState);
    7d3a:	4bc2      	ldr	r3, [pc, #776]	; (8044 <m2m_wifi_cb+0x344>)
    7d3c:	681b      	ldr	r3, [r3, #0]
    7d3e:	229c      	movs	r2, #156	; 0x9c
    7d40:	18ba      	adds	r2, r7, r2
    7d42:	0011      	movs	r1, r2
    7d44:	202c      	movs	r0, #44	; 0x2c
    7d46:	4798      	blx	r3
#endif
	else
	{
		M2M_ERR("REQ Not defined %d\n",u8OpCode);
	}
}
    7d48:	e19d      	b.n	8086 <m2m_wifi_cb+0x386>
	else if (u8OpCode == M2M_WIFI_RESP_GET_SYS_TIME)
    7d4a:	1dfb      	adds	r3, r7, #7
    7d4c:	781b      	ldrb	r3, [r3, #0]
    7d4e:	2b1b      	cmp	r3, #27
    7d50:	d116      	bne.n	7d80 <m2m_wifi_cb+0x80>
		if (hif_receive(u32Addr, (uint8*) &strSysTime,sizeof(tstrSystemTime), 0) == M2M_SUCCESS)
    7d52:	2394      	movs	r3, #148	; 0x94
    7d54:	18f9      	adds	r1, r7, r3
    7d56:	6838      	ldr	r0, [r7, #0]
    7d58:	2300      	movs	r3, #0
    7d5a:	2208      	movs	r2, #8
    7d5c:	4cb8      	ldr	r4, [pc, #736]	; (8040 <m2m_wifi_cb+0x340>)
    7d5e:	47a0      	blx	r4
    7d60:	1e03      	subs	r3, r0, #0
    7d62:	d000      	beq.n	7d66 <m2m_wifi_cb+0x66>
    7d64:	e18f      	b.n	8086 <m2m_wifi_cb+0x386>
			if (gpfAppWifiCb)
    7d66:	4bb7      	ldr	r3, [pc, #732]	; (8044 <m2m_wifi_cb+0x344>)
    7d68:	681b      	ldr	r3, [r3, #0]
    7d6a:	2b00      	cmp	r3, #0
    7d6c:	d100      	bne.n	7d70 <m2m_wifi_cb+0x70>
    7d6e:	e18a      	b.n	8086 <m2m_wifi_cb+0x386>
				gpfAppWifiCb(M2M_WIFI_RESP_GET_SYS_TIME, &strSysTime);
    7d70:	4bb4      	ldr	r3, [pc, #720]	; (8044 <m2m_wifi_cb+0x344>)
    7d72:	681b      	ldr	r3, [r3, #0]
    7d74:	2294      	movs	r2, #148	; 0x94
    7d76:	18ba      	adds	r2, r7, r2
    7d78:	0011      	movs	r1, r2
    7d7a:	201b      	movs	r0, #27
    7d7c:	4798      	blx	r3
}
    7d7e:	e182      	b.n	8086 <m2m_wifi_cb+0x386>
	else if(u8OpCode == M2M_WIFI_RESP_CONN_INFO)
    7d80:	1dfb      	adds	r3, r7, #7
    7d82:	781b      	ldrb	r3, [r3, #0]
    7d84:	2b06      	cmp	r3, #6
    7d86:	d116      	bne.n	7db6 <m2m_wifi_cb+0xb6>
		if(hif_receive(u32Addr, (uint8*)&strConnInfo, sizeof(tstrM2MConnInfo), 1) == M2M_SUCCESS)
    7d88:	2308      	movs	r3, #8
    7d8a:	18f9      	adds	r1, r7, r3
    7d8c:	6838      	ldr	r0, [r7, #0]
    7d8e:	2301      	movs	r3, #1
    7d90:	2230      	movs	r2, #48	; 0x30
    7d92:	4cab      	ldr	r4, [pc, #684]	; (8040 <m2m_wifi_cb+0x340>)
    7d94:	47a0      	blx	r4
    7d96:	1e03      	subs	r3, r0, #0
    7d98:	d000      	beq.n	7d9c <m2m_wifi_cb+0x9c>
    7d9a:	e174      	b.n	8086 <m2m_wifi_cb+0x386>
			if(gpfAppWifiCb)
    7d9c:	4ba9      	ldr	r3, [pc, #676]	; (8044 <m2m_wifi_cb+0x344>)
    7d9e:	681b      	ldr	r3, [r3, #0]
    7da0:	2b00      	cmp	r3, #0
    7da2:	d100      	bne.n	7da6 <m2m_wifi_cb+0xa6>
    7da4:	e16f      	b.n	8086 <m2m_wifi_cb+0x386>
				gpfAppWifiCb(M2M_WIFI_RESP_CONN_INFO, &strConnInfo);
    7da6:	4ba7      	ldr	r3, [pc, #668]	; (8044 <m2m_wifi_cb+0x344>)
    7da8:	681b      	ldr	r3, [r3, #0]
    7daa:	2208      	movs	r2, #8
    7dac:	18ba      	adds	r2, r7, r2
    7dae:	0011      	movs	r1, r2
    7db0:	2006      	movs	r0, #6
    7db2:	4798      	blx	r3
}
    7db4:	e167      	b.n	8086 <m2m_wifi_cb+0x386>
	else if (u8OpCode == M2M_WIFI_RESP_MEMORY_RECOVER)
    7db6:	1dfb      	adds	r3, r7, #7
    7db8:	781b      	ldrb	r3, [r3, #0]
    7dba:	2b0e      	cmp	r3, #14
    7dbc:	d100      	bne.n	7dc0 <m2m_wifi_cb+0xc0>
    7dbe:	e162      	b.n	8086 <m2m_wifi_cb+0x386>
	else if (u8OpCode == M2M_WIFI_REQ_DHCP_CONF)
    7dc0:	1dfb      	adds	r3, r7, #7
    7dc2:	781b      	ldrb	r3, [r3, #0]
    7dc4:	2b32      	cmp	r3, #50	; 0x32
    7dc6:	d116      	bne.n	7df6 <m2m_wifi_cb+0xf6>
		if (hif_receive(u32Addr, (uint8 *)&strIpConfig, sizeof(tstrM2MIPConfig), 0) == M2M_SUCCESS)
    7dc8:	2380      	movs	r3, #128	; 0x80
    7dca:	18f9      	adds	r1, r7, r3
    7dcc:	6838      	ldr	r0, [r7, #0]
    7dce:	2300      	movs	r3, #0
    7dd0:	2214      	movs	r2, #20
    7dd2:	4c9b      	ldr	r4, [pc, #620]	; (8040 <m2m_wifi_cb+0x340>)
    7dd4:	47a0      	blx	r4
    7dd6:	1e03      	subs	r3, r0, #0
    7dd8:	d000      	beq.n	7ddc <m2m_wifi_cb+0xdc>
    7dda:	e154      	b.n	8086 <m2m_wifi_cb+0x386>
			if (gpfAppWifiCb)
    7ddc:	4b99      	ldr	r3, [pc, #612]	; (8044 <m2m_wifi_cb+0x344>)
    7dde:	681b      	ldr	r3, [r3, #0]
    7de0:	2b00      	cmp	r3, #0
    7de2:	d100      	bne.n	7de6 <m2m_wifi_cb+0xe6>
    7de4:	e14f      	b.n	8086 <m2m_wifi_cb+0x386>
				gpfAppWifiCb(M2M_WIFI_REQ_DHCP_CONF, (uint8 *)&strIpConfig);
    7de6:	4b97      	ldr	r3, [pc, #604]	; (8044 <m2m_wifi_cb+0x344>)
    7de8:	681b      	ldr	r3, [r3, #0]
    7dea:	2280      	movs	r2, #128	; 0x80
    7dec:	18ba      	adds	r2, r7, r2
    7dee:	0011      	movs	r1, r2
    7df0:	2032      	movs	r0, #50	; 0x32
    7df2:	4798      	blx	r3
}
    7df4:	e147      	b.n	8086 <m2m_wifi_cb+0x386>
	else if (u8OpCode == M2M_WIFI_REQ_WPS)
    7df6:	1dfb      	adds	r3, r7, #7
    7df8:	781b      	ldrb	r3, [r3, #0]
    7dfa:	2b2f      	cmp	r3, #47	; 0x2f
    7dfc:	d11d      	bne.n	7e3a <m2m_wifi_cb+0x13a>
		m2m_memset((uint8*)&strWps,0,sizeof(tstrM2MWPSInfo));
    7dfe:	2308      	movs	r3, #8
    7e00:	18fb      	adds	r3, r7, r3
    7e02:	2264      	movs	r2, #100	; 0x64
    7e04:	2100      	movs	r1, #0
    7e06:	0018      	movs	r0, r3
    7e08:	4b8f      	ldr	r3, [pc, #572]	; (8048 <m2m_wifi_cb+0x348>)
    7e0a:	4798      	blx	r3
		if(hif_receive(u32Addr, (uint8*)&strWps, sizeof(tstrM2MWPSInfo), 0) == M2M_SUCCESS)
    7e0c:	2308      	movs	r3, #8
    7e0e:	18f9      	adds	r1, r7, r3
    7e10:	6838      	ldr	r0, [r7, #0]
    7e12:	2300      	movs	r3, #0
    7e14:	2264      	movs	r2, #100	; 0x64
    7e16:	4c8a      	ldr	r4, [pc, #552]	; (8040 <m2m_wifi_cb+0x340>)
    7e18:	47a0      	blx	r4
    7e1a:	1e03      	subs	r3, r0, #0
    7e1c:	d000      	beq.n	7e20 <m2m_wifi_cb+0x120>
    7e1e:	e132      	b.n	8086 <m2m_wifi_cb+0x386>
			if (gpfAppWifiCb)
    7e20:	4b88      	ldr	r3, [pc, #544]	; (8044 <m2m_wifi_cb+0x344>)
    7e22:	681b      	ldr	r3, [r3, #0]
    7e24:	2b00      	cmp	r3, #0
    7e26:	d100      	bne.n	7e2a <m2m_wifi_cb+0x12a>
    7e28:	e12d      	b.n	8086 <m2m_wifi_cb+0x386>
				gpfAppWifiCb(M2M_WIFI_REQ_WPS, &strWps);
    7e2a:	4b86      	ldr	r3, [pc, #536]	; (8044 <m2m_wifi_cb+0x344>)
    7e2c:	681b      	ldr	r3, [r3, #0]
    7e2e:	2208      	movs	r2, #8
    7e30:	18ba      	adds	r2, r7, r2
    7e32:	0011      	movs	r1, r2
    7e34:	202f      	movs	r0, #47	; 0x2f
    7e36:	4798      	blx	r3
}
    7e38:	e125      	b.n	8086 <m2m_wifi_cb+0x386>
	else if (u8OpCode == M2M_WIFI_RESP_IP_CONFLICT)
    7e3a:	1dfb      	adds	r3, r7, #7
    7e3c:	781b      	ldrb	r3, [r3, #0]
    7e3e:	2b34      	cmp	r3, #52	; 0x34
    7e40:	d12e      	bne.n	7ea0 <m2m_wifi_cb+0x1a0>
		if(hif_receive(u32Addr, (uint8 *)&u32ConflictedIP, sizeof(u32ConflictedIP), 0) == M2M_SUCCESS)
    7e42:	237c      	movs	r3, #124	; 0x7c
    7e44:	18f9      	adds	r1, r7, r3
    7e46:	6838      	ldr	r0, [r7, #0]
    7e48:	2300      	movs	r3, #0
    7e4a:	2204      	movs	r2, #4
    7e4c:	4c7c      	ldr	r4, [pc, #496]	; (8040 <m2m_wifi_cb+0x340>)
    7e4e:	47a0      	blx	r4
    7e50:	1e03      	subs	r3, r0, #0
    7e52:	d000      	beq.n	7e56 <m2m_wifi_cb+0x156>
    7e54:	e117      	b.n	8086 <m2m_wifi_cb+0x386>
			M2M_INFO("Conflicted IP \" %u.%u.%u.%u \" \n", 
    7e56:	4b7d      	ldr	r3, [pc, #500]	; (804c <m2m_wifi_cb+0x34c>)
    7e58:	0018      	movs	r0, r3
    7e5a:	4b7d      	ldr	r3, [pc, #500]	; (8050 <m2m_wifi_cb+0x350>)
    7e5c:	4798      	blx	r3
    7e5e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    7e60:	0e1b      	lsrs	r3, r3, #24
    7e62:	b2db      	uxtb	r3, r3
    7e64:	0019      	movs	r1, r3
    7e66:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    7e68:	0c1b      	lsrs	r3, r3, #16
    7e6a:	b2db      	uxtb	r3, r3
    7e6c:	001a      	movs	r2, r3
    7e6e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    7e70:	0a1b      	lsrs	r3, r3, #8
    7e72:	b2db      	uxtb	r3, r3
    7e74:	001c      	movs	r4, r3
    7e76:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    7e78:	b2db      	uxtb	r3, r3
    7e7a:	4876      	ldr	r0, [pc, #472]	; (8054 <m2m_wifi_cb+0x354>)
    7e7c:	9300      	str	r3, [sp, #0]
    7e7e:	0023      	movs	r3, r4
    7e80:	4c73      	ldr	r4, [pc, #460]	; (8050 <m2m_wifi_cb+0x350>)
    7e82:	47a0      	blx	r4
    7e84:	200d      	movs	r0, #13
    7e86:	4b74      	ldr	r3, [pc, #464]	; (8058 <m2m_wifi_cb+0x358>)
    7e88:	4798      	blx	r3
			if (gpfAppWifiCb)
    7e8a:	4b6e      	ldr	r3, [pc, #440]	; (8044 <m2m_wifi_cb+0x344>)
    7e8c:	681b      	ldr	r3, [r3, #0]
    7e8e:	2b00      	cmp	r3, #0
    7e90:	d100      	bne.n	7e94 <m2m_wifi_cb+0x194>
    7e92:	e0f8      	b.n	8086 <m2m_wifi_cb+0x386>
				gpfAppWifiCb(M2M_WIFI_RESP_IP_CONFLICT, NULL);
    7e94:	4b6b      	ldr	r3, [pc, #428]	; (8044 <m2m_wifi_cb+0x344>)
    7e96:	681b      	ldr	r3, [r3, #0]
    7e98:	2100      	movs	r1, #0
    7e9a:	2034      	movs	r0, #52	; 0x34
    7e9c:	4798      	blx	r3
}
    7e9e:	e0f2      	b.n	8086 <m2m_wifi_cb+0x386>
	else if (u8OpCode == M2M_WIFI_RESP_SCAN_DONE)
    7ea0:	1dfb      	adds	r3, r7, #7
    7ea2:	781b      	ldrb	r3, [r3, #0]
    7ea4:	2b11      	cmp	r3, #17
    7ea6:	d11e      	bne.n	7ee6 <m2m_wifi_cb+0x1e6>
		gu8scanInProgress = 0;
    7ea8:	4b6c      	ldr	r3, [pc, #432]	; (805c <m2m_wifi_cb+0x35c>)
    7eaa:	2200      	movs	r2, #0
    7eac:	701a      	strb	r2, [r3, #0]
		if(hif_receive(u32Addr, (uint8*)&strState, sizeof(tstrM2mScanDone), 0) == M2M_SUCCESS)
    7eae:	2378      	movs	r3, #120	; 0x78
    7eb0:	18f9      	adds	r1, r7, r3
    7eb2:	6838      	ldr	r0, [r7, #0]
    7eb4:	2300      	movs	r3, #0
    7eb6:	2204      	movs	r2, #4
    7eb8:	4c61      	ldr	r4, [pc, #388]	; (8040 <m2m_wifi_cb+0x340>)
    7eba:	47a0      	blx	r4
    7ebc:	1e03      	subs	r3, r0, #0
    7ebe:	d000      	beq.n	7ec2 <m2m_wifi_cb+0x1c2>
    7ec0:	e0e1      	b.n	8086 <m2m_wifi_cb+0x386>
			gu8ChNum = strState.u8NumofCh;
    7ec2:	2378      	movs	r3, #120	; 0x78
    7ec4:	18fb      	adds	r3, r7, r3
    7ec6:	781a      	ldrb	r2, [r3, #0]
    7ec8:	4b65      	ldr	r3, [pc, #404]	; (8060 <m2m_wifi_cb+0x360>)
    7eca:	701a      	strb	r2, [r3, #0]
			if (gpfAppWifiCb)
    7ecc:	4b5d      	ldr	r3, [pc, #372]	; (8044 <m2m_wifi_cb+0x344>)
    7ece:	681b      	ldr	r3, [r3, #0]
    7ed0:	2b00      	cmp	r3, #0
    7ed2:	d100      	bne.n	7ed6 <m2m_wifi_cb+0x1d6>
    7ed4:	e0d7      	b.n	8086 <m2m_wifi_cb+0x386>
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_DONE, &strState);
    7ed6:	4b5b      	ldr	r3, [pc, #364]	; (8044 <m2m_wifi_cb+0x344>)
    7ed8:	681b      	ldr	r3, [r3, #0]
    7eda:	2278      	movs	r2, #120	; 0x78
    7edc:	18ba      	adds	r2, r7, r2
    7ede:	0011      	movs	r1, r2
    7ee0:	2011      	movs	r0, #17
    7ee2:	4798      	blx	r3
}
    7ee4:	e0cf      	b.n	8086 <m2m_wifi_cb+0x386>
	else if (u8OpCode == M2M_WIFI_RESP_SCAN_RESULT)
    7ee6:	1dfb      	adds	r3, r7, #7
    7ee8:	781b      	ldrb	r3, [r3, #0]
    7eea:	2b13      	cmp	r3, #19
    7eec:	d116      	bne.n	7f1c <m2m_wifi_cb+0x21c>
		if(hif_receive(u32Addr, (uint8*)&strScanResult, sizeof(tstrM2mWifiscanResult), 0) == M2M_SUCCESS)
    7eee:	2308      	movs	r3, #8
    7ef0:	18f9      	adds	r1, r7, r3
    7ef2:	6838      	ldr	r0, [r7, #0]
    7ef4:	2300      	movs	r3, #0
    7ef6:	222c      	movs	r2, #44	; 0x2c
    7ef8:	4c51      	ldr	r4, [pc, #324]	; (8040 <m2m_wifi_cb+0x340>)
    7efa:	47a0      	blx	r4
    7efc:	1e03      	subs	r3, r0, #0
    7efe:	d000      	beq.n	7f02 <m2m_wifi_cb+0x202>
    7f00:	e0c1      	b.n	8086 <m2m_wifi_cb+0x386>
			if (gpfAppWifiCb)
    7f02:	4b50      	ldr	r3, [pc, #320]	; (8044 <m2m_wifi_cb+0x344>)
    7f04:	681b      	ldr	r3, [r3, #0]
    7f06:	2b00      	cmp	r3, #0
    7f08:	d100      	bne.n	7f0c <m2m_wifi_cb+0x20c>
    7f0a:	e0bc      	b.n	8086 <m2m_wifi_cb+0x386>
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_RESULT, &strScanResult);
    7f0c:	4b4d      	ldr	r3, [pc, #308]	; (8044 <m2m_wifi_cb+0x344>)
    7f0e:	681b      	ldr	r3, [r3, #0]
    7f10:	2208      	movs	r2, #8
    7f12:	18ba      	adds	r2, r7, r2
    7f14:	0011      	movs	r1, r2
    7f16:	2013      	movs	r0, #19
    7f18:	4798      	blx	r3
}
    7f1a:	e0b4      	b.n	8086 <m2m_wifi_cb+0x386>
	else if (u8OpCode == M2M_WIFI_RESP_CURRENT_RSSI)
    7f1c:	1dfb      	adds	r3, r7, #7
    7f1e:	781b      	ldrb	r3, [r3, #0]
    7f20:	2b04      	cmp	r3, #4
    7f22:	d116      	bne.n	7f52 <m2m_wifi_cb+0x252>
		if (hif_receive(u32Addr, rx_buf, 4, 0) == M2M_SUCCESS)
    7f24:	23a0      	movs	r3, #160	; 0xa0
    7f26:	18f9      	adds	r1, r7, r3
    7f28:	6838      	ldr	r0, [r7, #0]
    7f2a:	2300      	movs	r3, #0
    7f2c:	2204      	movs	r2, #4
    7f2e:	4c44      	ldr	r4, [pc, #272]	; (8040 <m2m_wifi_cb+0x340>)
    7f30:	47a0      	blx	r4
    7f32:	1e03      	subs	r3, r0, #0
    7f34:	d000      	beq.n	7f38 <m2m_wifi_cb+0x238>
    7f36:	e0a6      	b.n	8086 <m2m_wifi_cb+0x386>
			if (gpfAppWifiCb)
    7f38:	4b42      	ldr	r3, [pc, #264]	; (8044 <m2m_wifi_cb+0x344>)
    7f3a:	681b      	ldr	r3, [r3, #0]
    7f3c:	2b00      	cmp	r3, #0
    7f3e:	d100      	bne.n	7f42 <m2m_wifi_cb+0x242>
    7f40:	e0a1      	b.n	8086 <m2m_wifi_cb+0x386>
				gpfAppWifiCb(M2M_WIFI_RESP_CURRENT_RSSI, rx_buf);
    7f42:	4b40      	ldr	r3, [pc, #256]	; (8044 <m2m_wifi_cb+0x344>)
    7f44:	681b      	ldr	r3, [r3, #0]
    7f46:	22a0      	movs	r2, #160	; 0xa0
    7f48:	18ba      	adds	r2, r7, r2
    7f4a:	0011      	movs	r1, r2
    7f4c:	2004      	movs	r0, #4
    7f4e:	4798      	blx	r3
}
    7f50:	e099      	b.n	8086 <m2m_wifi_cb+0x386>
	else if (u8OpCode == M2M_WIFI_RESP_CLIENT_INFO)
    7f52:	1dfb      	adds	r3, r7, #7
    7f54:	781b      	ldrb	r3, [r3, #0]
    7f56:	2b65      	cmp	r3, #101	; 0x65
    7f58:	d116      	bne.n	7f88 <m2m_wifi_cb+0x288>
		if (hif_receive(u32Addr, rx_buf, 4, 0) == M2M_SUCCESS)
    7f5a:	23a0      	movs	r3, #160	; 0xa0
    7f5c:	18f9      	adds	r1, r7, r3
    7f5e:	6838      	ldr	r0, [r7, #0]
    7f60:	2300      	movs	r3, #0
    7f62:	2204      	movs	r2, #4
    7f64:	4c36      	ldr	r4, [pc, #216]	; (8040 <m2m_wifi_cb+0x340>)
    7f66:	47a0      	blx	r4
    7f68:	1e03      	subs	r3, r0, #0
    7f6a:	d000      	beq.n	7f6e <m2m_wifi_cb+0x26e>
    7f6c:	e08b      	b.n	8086 <m2m_wifi_cb+0x386>
			if (gpfAppWifiCb)
    7f6e:	4b35      	ldr	r3, [pc, #212]	; (8044 <m2m_wifi_cb+0x344>)
    7f70:	681b      	ldr	r3, [r3, #0]
    7f72:	2b00      	cmp	r3, #0
    7f74:	d100      	bne.n	7f78 <m2m_wifi_cb+0x278>
    7f76:	e086      	b.n	8086 <m2m_wifi_cb+0x386>
				gpfAppWifiCb(M2M_WIFI_RESP_CLIENT_INFO, rx_buf);
    7f78:	4b32      	ldr	r3, [pc, #200]	; (8044 <m2m_wifi_cb+0x344>)
    7f7a:	681b      	ldr	r3, [r3, #0]
    7f7c:	22a0      	movs	r2, #160	; 0xa0
    7f7e:	18ba      	adds	r2, r7, r2
    7f80:	0011      	movs	r1, r2
    7f82:	2065      	movs	r0, #101	; 0x65
    7f84:	4798      	blx	r3
}
    7f86:	e07e      	b.n	8086 <m2m_wifi_cb+0x386>
	else if(u8OpCode == M2M_WIFI_RESP_PROVISION_INFO)
    7f88:	1dfb      	adds	r3, r7, #7
    7f8a:	781b      	ldrb	r3, [r3, #0]
    7f8c:	2b09      	cmp	r3, #9
    7f8e:	d116      	bne.n	7fbe <m2m_wifi_cb+0x2be>
		if(hif_receive(u32Addr, (uint8*)&strProvInfo, sizeof(tstrM2MProvisionInfo), 1) == M2M_SUCCESS)
    7f90:	2308      	movs	r3, #8
    7f92:	18f9      	adds	r1, r7, r3
    7f94:	6838      	ldr	r0, [r7, #0]
    7f96:	2301      	movs	r3, #1
    7f98:	2264      	movs	r2, #100	; 0x64
    7f9a:	4c29      	ldr	r4, [pc, #164]	; (8040 <m2m_wifi_cb+0x340>)
    7f9c:	47a0      	blx	r4
    7f9e:	1e03      	subs	r3, r0, #0
    7fa0:	d000      	beq.n	7fa4 <m2m_wifi_cb+0x2a4>
    7fa2:	e070      	b.n	8086 <m2m_wifi_cb+0x386>
			if(gpfAppWifiCb)
    7fa4:	4b27      	ldr	r3, [pc, #156]	; (8044 <m2m_wifi_cb+0x344>)
    7fa6:	681b      	ldr	r3, [r3, #0]
    7fa8:	2b00      	cmp	r3, #0
    7faa:	d100      	bne.n	7fae <m2m_wifi_cb+0x2ae>
    7fac:	e06b      	b.n	8086 <m2m_wifi_cb+0x386>
				gpfAppWifiCb(M2M_WIFI_RESP_PROVISION_INFO, &strProvInfo);
    7fae:	4b25      	ldr	r3, [pc, #148]	; (8044 <m2m_wifi_cb+0x344>)
    7fb0:	681b      	ldr	r3, [r3, #0]
    7fb2:	2208      	movs	r2, #8
    7fb4:	18ba      	adds	r2, r7, r2
    7fb6:	0011      	movs	r1, r2
    7fb8:	2009      	movs	r0, #9
    7fba:	4798      	blx	r3
}
    7fbc:	e063      	b.n	8086 <m2m_wifi_cb+0x386>
	else if(u8OpCode == M2M_WIFI_RESP_DEFAULT_CONNECT)
    7fbe:	1dfb      	adds	r3, r7, #7
    7fc0:	781b      	ldrb	r3, [r3, #0]
    7fc2:	2b2a      	cmp	r3, #42	; 0x2a
    7fc4:	d114      	bne.n	7ff0 <m2m_wifi_cb+0x2f0>
		if(hif_receive(u32Addr, (uint8*)&strResp, sizeof(tstrM2MDefaultConnResp), 1) == M2M_SUCCESS)
    7fc6:	2374      	movs	r3, #116	; 0x74
    7fc8:	18f9      	adds	r1, r7, r3
    7fca:	6838      	ldr	r0, [r7, #0]
    7fcc:	2301      	movs	r3, #1
    7fce:	2204      	movs	r2, #4
    7fd0:	4c1b      	ldr	r4, [pc, #108]	; (8040 <m2m_wifi_cb+0x340>)
    7fd2:	47a0      	blx	r4
    7fd4:	1e03      	subs	r3, r0, #0
    7fd6:	d156      	bne.n	8086 <m2m_wifi_cb+0x386>
			if(gpfAppWifiCb)
    7fd8:	4b1a      	ldr	r3, [pc, #104]	; (8044 <m2m_wifi_cb+0x344>)
    7fda:	681b      	ldr	r3, [r3, #0]
    7fdc:	2b00      	cmp	r3, #0
    7fde:	d052      	beq.n	8086 <m2m_wifi_cb+0x386>
				gpfAppWifiCb(M2M_WIFI_RESP_DEFAULT_CONNECT, &strResp);
    7fe0:	4b18      	ldr	r3, [pc, #96]	; (8044 <m2m_wifi_cb+0x344>)
    7fe2:	681b      	ldr	r3, [r3, #0]
    7fe4:	2274      	movs	r2, #116	; 0x74
    7fe6:	18ba      	adds	r2, r7, r2
    7fe8:	0011      	movs	r1, r2
    7fea:	202a      	movs	r0, #42	; 0x2a
    7fec:	4798      	blx	r3
}
    7fee:	e04a      	b.n	8086 <m2m_wifi_cb+0x386>
	else if(u8OpCode == M2M_WIFI_RESP_GET_PRNG)
    7ff0:	1dfb      	adds	r3, r7, #7
    7ff2:	781b      	ldrb	r3, [r3, #0]
    7ff4:	2b20      	cmp	r3, #32
    7ff6:	d135      	bne.n	8064 <m2m_wifi_cb+0x364>
		if(hif_receive(u32Addr, (uint8*)&strPrng,sizeof(tstrPrng), 0) == M2M_SUCCESS)
    7ff8:	236c      	movs	r3, #108	; 0x6c
    7ffa:	18f9      	adds	r1, r7, r3
    7ffc:	6838      	ldr	r0, [r7, #0]
    7ffe:	2300      	movs	r3, #0
    8000:	2208      	movs	r2, #8
    8002:	4c0f      	ldr	r4, [pc, #60]	; (8040 <m2m_wifi_cb+0x340>)
    8004:	47a0      	blx	r4
    8006:	1e03      	subs	r3, r0, #0
    8008:	d13d      	bne.n	8086 <m2m_wifi_cb+0x386>
			if(hif_receive(u32Addr + sizeof(tstrPrng),strPrng.pu8RngBuff,strPrng.u16PrngSize, 1) == M2M_SUCCESS)
    800a:	683b      	ldr	r3, [r7, #0]
    800c:	3308      	adds	r3, #8
    800e:	0018      	movs	r0, r3
    8010:	236c      	movs	r3, #108	; 0x6c
    8012:	18fb      	adds	r3, r7, r3
    8014:	6819      	ldr	r1, [r3, #0]
    8016:	236c      	movs	r3, #108	; 0x6c
    8018:	18fb      	adds	r3, r7, r3
    801a:	889a      	ldrh	r2, [r3, #4]
    801c:	2301      	movs	r3, #1
    801e:	4c08      	ldr	r4, [pc, #32]	; (8040 <m2m_wifi_cb+0x340>)
    8020:	47a0      	blx	r4
    8022:	1e03      	subs	r3, r0, #0
    8024:	d12f      	bne.n	8086 <m2m_wifi_cb+0x386>
				if(gpfAppWifiCb)
    8026:	4b07      	ldr	r3, [pc, #28]	; (8044 <m2m_wifi_cb+0x344>)
    8028:	681b      	ldr	r3, [r3, #0]
    802a:	2b00      	cmp	r3, #0
    802c:	d02b      	beq.n	8086 <m2m_wifi_cb+0x386>
					gpfAppWifiCb(M2M_WIFI_RESP_GET_PRNG,&strPrng);
    802e:	4b05      	ldr	r3, [pc, #20]	; (8044 <m2m_wifi_cb+0x344>)
    8030:	681b      	ldr	r3, [r3, #0]
    8032:	226c      	movs	r2, #108	; 0x6c
    8034:	18ba      	adds	r2, r7, r2
    8036:	0011      	movs	r1, r2
    8038:	2020      	movs	r0, #32
    803a:	4798      	blx	r3
}
    803c:	e023      	b.n	8086 <m2m_wifi_cb+0x386>
    803e:	46c0      	nop			; (mov r8, r8)
    8040:	000078b5 	.word	0x000078b5
    8044:	2000054c 	.word	0x2000054c
    8048:	00006d61 	.word	0x00006d61
    804c:	0001fc6c 	.word	0x0001fc6c
    8050:	0001c2d5 	.word	0x0001c2d5
    8054:	0001fc78 	.word	0x0001fc78
    8058:	0001c309 	.word	0x0001c309
    805c:	20000549 	.word	0x20000549
    8060:	20000548 	.word	0x20000548
		M2M_ERR("REQ Not defined %d\n",u8OpCode);
    8064:	2392      	movs	r3, #146	; 0x92
    8066:	005a      	lsls	r2, r3, #1
    8068:	4909      	ldr	r1, [pc, #36]	; (8090 <m2m_wifi_cb+0x390>)
    806a:	4b0a      	ldr	r3, [pc, #40]	; (8094 <m2m_wifi_cb+0x394>)
    806c:	0018      	movs	r0, r3
    806e:	4b0a      	ldr	r3, [pc, #40]	; (8098 <m2m_wifi_cb+0x398>)
    8070:	4798      	blx	r3
    8072:	1dfb      	adds	r3, r7, #7
    8074:	781a      	ldrb	r2, [r3, #0]
    8076:	4b09      	ldr	r3, [pc, #36]	; (809c <m2m_wifi_cb+0x39c>)
    8078:	0011      	movs	r1, r2
    807a:	0018      	movs	r0, r3
    807c:	4b06      	ldr	r3, [pc, #24]	; (8098 <m2m_wifi_cb+0x398>)
    807e:	4798      	blx	r3
    8080:	200d      	movs	r0, #13
    8082:	4b07      	ldr	r3, [pc, #28]	; (80a0 <m2m_wifi_cb+0x3a0>)
    8084:	4798      	blx	r3
}
    8086:	46c0      	nop			; (mov r8, r8)
    8088:	46bd      	mov	sp, r7
    808a:	b02b      	add	sp, #172	; 0xac
    808c:	bd90      	pop	{r4, r7, pc}
    808e:	46c0      	nop			; (mov r8, r8)
    8090:	00020020 	.word	0x00020020
    8094:	0001fc98 	.word	0x0001fc98
    8098:	0001c2d5 	.word	0x0001c2d5
    809c:	0001fcac 	.word	0x0001fcac
    80a0:	0001c309 	.word	0x0001c309

000080a4 <m2m_wifi_init>:
	s8Ret = hif_send(M2M_REQ_GROUP_SSL, M2M_SSL_IND_CRL|M2M_REQ_DATA_PKT, NULL, 0, (uint8*)pCRL, sizeof(tstrTlsCrlInfo), 0);
	return s8Ret;
}

sint8 m2m_wifi_init(tstrWifiInitParam * param)
{
    80a4:	b590      	push	{r4, r7, lr}
    80a6:	b091      	sub	sp, #68	; 0x44
    80a8:	af02      	add	r7, sp, #8
    80aa:	6078      	str	r0, [r7, #4]
	tstrM2mRev strtmp;
	sint8 ret = M2M_SUCCESS;
    80ac:	2337      	movs	r3, #55	; 0x37
    80ae:	18fb      	adds	r3, r7, r3
    80b0:	2200      	movs	r2, #0
    80b2:	701a      	strb	r2, [r3, #0]
	uint8 u8WifiMode = M2M_WIFI_MODE_NORMAL;
    80b4:	230b      	movs	r3, #11
    80b6:	18fb      	adds	r3, r7, r3
    80b8:	2201      	movs	r2, #1
    80ba:	701a      	strb	r2, [r3, #0]
	
	if(param == NULL) {
    80bc:	687b      	ldr	r3, [r7, #4]
    80be:	2b00      	cmp	r3, #0
    80c0:	d104      	bne.n	80cc <m2m_wifi_init+0x28>
		ret = M2M_ERR_FAIL;
    80c2:	2337      	movs	r3, #55	; 0x37
    80c4:	18fb      	adds	r3, r7, r3
    80c6:	22f4      	movs	r2, #244	; 0xf4
    80c8:	701a      	strb	r2, [r3, #0]
		goto _EXIT0;
    80ca:	e0ad      	b.n	8228 <m2m_wifi_init+0x184>
	}
	
	gpfAppWifiCb = param->pfAppWifiCb;
    80cc:	687b      	ldr	r3, [r7, #4]
    80ce:	681a      	ldr	r2, [r3, #0]
    80d0:	4b59      	ldr	r3, [pc, #356]	; (8238 <m2m_wifi_init+0x194>)
    80d2:	601a      	str	r2, [r3, #0]
#endif /* ETH_MODE */

#ifdef CONF_MGMT
	gpfAppMonCb  = param->pfAppMonCb;
#endif
	gu8scanInProgress = 0;
    80d4:	4b59      	ldr	r3, [pc, #356]	; (823c <m2m_wifi_init+0x198>)
    80d6:	2200      	movs	r2, #0
    80d8:	701a      	strb	r2, [r3, #0]
	/* Apply device specific initialization. */
	ret = nm_drv_init(&u8WifiMode);
    80da:	2337      	movs	r3, #55	; 0x37
    80dc:	18fc      	adds	r4, r7, r3
    80de:	230b      	movs	r3, #11
    80e0:	18fb      	adds	r3, r7, r3
    80e2:	0018      	movs	r0, r3
    80e4:	4b56      	ldr	r3, [pc, #344]	; (8240 <m2m_wifi_init+0x19c>)
    80e6:	4798      	blx	r3
    80e8:	0003      	movs	r3, r0
    80ea:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS) 	goto _EXIT0;
    80ec:	2337      	movs	r3, #55	; 0x37
    80ee:	18fb      	adds	r3, r7, r3
    80f0:	781b      	ldrb	r3, [r3, #0]
    80f2:	b25b      	sxtb	r3, r3
    80f4:	2b00      	cmp	r3, #0
    80f6:	d000      	beq.n	80fa <m2m_wifi_init+0x56>
    80f8:	e093      	b.n	8222 <m2m_wifi_init+0x17e>
	/* Initialize host interface module */
	ret = hif_init(NULL);
    80fa:	2337      	movs	r3, #55	; 0x37
    80fc:	18fc      	adds	r4, r7, r3
    80fe:	2000      	movs	r0, #0
    8100:	4b50      	ldr	r3, [pc, #320]	; (8244 <m2m_wifi_init+0x1a0>)
    8102:	4798      	blx	r3
    8104:	0003      	movs	r3, r0
    8106:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS) 	goto _EXIT1;
    8108:	2337      	movs	r3, #55	; 0x37
    810a:	18fb      	adds	r3, r7, r3
    810c:	781b      	ldrb	r3, [r3, #0]
    810e:	b25b      	sxtb	r3, r3
    8110:	2b00      	cmp	r3, #0
    8112:	d000      	beq.n	8116 <m2m_wifi_init+0x72>
    8114:	e080      	b.n	8218 <m2m_wifi_init+0x174>

	hif_register_cb(M2M_REQ_GROUP_WIFI,m2m_wifi_cb);
    8116:	4b4c      	ldr	r3, [pc, #304]	; (8248 <m2m_wifi_init+0x1a4>)
    8118:	0019      	movs	r1, r3
    811a:	2001      	movs	r0, #1
    811c:	4b4b      	ldr	r3, [pc, #300]	; (824c <m2m_wifi_init+0x1a8>)
    811e:	4798      	blx	r3

	ret = nm_get_firmware_full_info(&strtmp);
    8120:	2337      	movs	r3, #55	; 0x37
    8122:	18fc      	adds	r4, r7, r3
    8124:	230c      	movs	r3, #12
    8126:	18fb      	adds	r3, r7, r3
    8128:	0018      	movs	r0, r3
    812a:	4b49      	ldr	r3, [pc, #292]	; (8250 <m2m_wifi_init+0x1ac>)
    812c:	4798      	blx	r3
    812e:	0003      	movs	r3, r0
    8130:	7023      	strb	r3, [r4, #0]

	M2M_INFO("Firmware ver   : %u.%u.%u Svnrev %u\n", strtmp.u8FirmwareMajor, strtmp.u8FirmwareMinor, strtmp.u8FirmwarePatch,strtmp.u16FirmwareSvnNum);
    8132:	4b48      	ldr	r3, [pc, #288]	; (8254 <m2m_wifi_init+0x1b0>)
    8134:	0018      	movs	r0, r3
    8136:	4b48      	ldr	r3, [pc, #288]	; (8258 <m2m_wifi_init+0x1b4>)
    8138:	4798      	blx	r3
    813a:	230c      	movs	r3, #12
    813c:	18fb      	adds	r3, r7, r3
    813e:	791b      	ldrb	r3, [r3, #4]
    8140:	0019      	movs	r1, r3
    8142:	230c      	movs	r3, #12
    8144:	18fb      	adds	r3, r7, r3
    8146:	795b      	ldrb	r3, [r3, #5]
    8148:	001a      	movs	r2, r3
    814a:	230c      	movs	r3, #12
    814c:	18fb      	adds	r3, r7, r3
    814e:	799b      	ldrb	r3, [r3, #6]
    8150:	001c      	movs	r4, r3
    8152:	230c      	movs	r3, #12
    8154:	18fb      	adds	r3, r7, r3
    8156:	8c1b      	ldrh	r3, [r3, #32]
    8158:	4840      	ldr	r0, [pc, #256]	; (825c <m2m_wifi_init+0x1b8>)
    815a:	9300      	str	r3, [sp, #0]
    815c:	0023      	movs	r3, r4
    815e:	4c3e      	ldr	r4, [pc, #248]	; (8258 <m2m_wifi_init+0x1b4>)
    8160:	47a0      	blx	r4
    8162:	200d      	movs	r0, #13
    8164:	4b3e      	ldr	r3, [pc, #248]	; (8260 <m2m_wifi_init+0x1bc>)
    8166:	4798      	blx	r3
	M2M_INFO("Firmware Build %s Time %s\n",strtmp.BuildDate,strtmp.BuildTime);
    8168:	4b3a      	ldr	r3, [pc, #232]	; (8254 <m2m_wifi_init+0x1b0>)
    816a:	0018      	movs	r0, r3
    816c:	4b3a      	ldr	r3, [pc, #232]	; (8258 <m2m_wifi_init+0x1b4>)
    816e:	4798      	blx	r3
    8170:	230c      	movs	r3, #12
    8172:	18fb      	adds	r3, r7, r3
    8174:	3316      	adds	r3, #22
    8176:	001a      	movs	r2, r3
    8178:	230c      	movs	r3, #12
    817a:	18fb      	adds	r3, r7, r3
    817c:	330a      	adds	r3, #10
    817e:	0019      	movs	r1, r3
    8180:	4b38      	ldr	r3, [pc, #224]	; (8264 <m2m_wifi_init+0x1c0>)
    8182:	0018      	movs	r0, r3
    8184:	4b34      	ldr	r3, [pc, #208]	; (8258 <m2m_wifi_init+0x1b4>)
    8186:	4798      	blx	r3
    8188:	200d      	movs	r0, #13
    818a:	4b35      	ldr	r3, [pc, #212]	; (8260 <m2m_wifi_init+0x1bc>)
    818c:	4798      	blx	r3
	M2M_INFO("Firmware Min driver ver : %u.%u.%u\n", strtmp.u8DriverMajor, strtmp.u8DriverMinor, strtmp.u8DriverPatch);
    818e:	4b31      	ldr	r3, [pc, #196]	; (8254 <m2m_wifi_init+0x1b0>)
    8190:	0018      	movs	r0, r3
    8192:	4b31      	ldr	r3, [pc, #196]	; (8258 <m2m_wifi_init+0x1b4>)
    8194:	4798      	blx	r3
    8196:	230c      	movs	r3, #12
    8198:	18fb      	adds	r3, r7, r3
    819a:	79db      	ldrb	r3, [r3, #7]
    819c:	0019      	movs	r1, r3
    819e:	230c      	movs	r3, #12
    81a0:	18fb      	adds	r3, r7, r3
    81a2:	7a1b      	ldrb	r3, [r3, #8]
    81a4:	001a      	movs	r2, r3
    81a6:	230c      	movs	r3, #12
    81a8:	18fb      	adds	r3, r7, r3
    81aa:	7a5b      	ldrb	r3, [r3, #9]
    81ac:	482e      	ldr	r0, [pc, #184]	; (8268 <m2m_wifi_init+0x1c4>)
    81ae:	4c2a      	ldr	r4, [pc, #168]	; (8258 <m2m_wifi_init+0x1b4>)
    81b0:	47a0      	blx	r4
    81b2:	200d      	movs	r0, #13
    81b4:	4b2a      	ldr	r3, [pc, #168]	; (8260 <m2m_wifi_init+0x1bc>)
    81b6:	4798      	blx	r3
	M2M_INFO("Driver ver: %u.%u.%u\n", M2M_RELEASE_VERSION_MAJOR_NO, M2M_RELEASE_VERSION_MINOR_NO, M2M_RELEASE_VERSION_PATCH_NO);
    81b8:	4b26      	ldr	r3, [pc, #152]	; (8254 <m2m_wifi_init+0x1b0>)
    81ba:	0018      	movs	r0, r3
    81bc:	4b26      	ldr	r3, [pc, #152]	; (8258 <m2m_wifi_init+0x1b4>)
    81be:	4798      	blx	r3
    81c0:	482a      	ldr	r0, [pc, #168]	; (826c <m2m_wifi_init+0x1c8>)
    81c2:	2302      	movs	r3, #2
    81c4:	2205      	movs	r2, #5
    81c6:	2113      	movs	r1, #19
    81c8:	4c23      	ldr	r4, [pc, #140]	; (8258 <m2m_wifi_init+0x1b4>)
    81ca:	47a0      	blx	r4
    81cc:	200d      	movs	r0, #13
    81ce:	4b24      	ldr	r3, [pc, #144]	; (8260 <m2m_wifi_init+0x1bc>)
    81d0:	4798      	blx	r3
	M2M_INFO("Driver built at %s\t%s\n",__DATE__,__TIME__);
    81d2:	4b20      	ldr	r3, [pc, #128]	; (8254 <m2m_wifi_init+0x1b0>)
    81d4:	0018      	movs	r0, r3
    81d6:	4b20      	ldr	r3, [pc, #128]	; (8258 <m2m_wifi_init+0x1b4>)
    81d8:	4798      	blx	r3
    81da:	4a25      	ldr	r2, [pc, #148]	; (8270 <m2m_wifi_init+0x1cc>)
    81dc:	4925      	ldr	r1, [pc, #148]	; (8274 <m2m_wifi_init+0x1d0>)
    81de:	4b26      	ldr	r3, [pc, #152]	; (8278 <m2m_wifi_init+0x1d4>)
    81e0:	0018      	movs	r0, r3
    81e2:	4b1d      	ldr	r3, [pc, #116]	; (8258 <m2m_wifi_init+0x1b4>)
    81e4:	4798      	blx	r3
    81e6:	200d      	movs	r0, #13
    81e8:	4b1d      	ldr	r3, [pc, #116]	; (8260 <m2m_wifi_init+0x1bc>)
    81ea:	4798      	blx	r3
	if(M2M_ERR_FW_VER_MISMATCH == ret)
    81ec:	2337      	movs	r3, #55	; 0x37
    81ee:	18fb      	adds	r3, r7, r3
    81f0:	781b      	ldrb	r3, [r3, #0]
    81f2:	b25b      	sxtb	r3, r3
    81f4:	330d      	adds	r3, #13
    81f6:	d116      	bne.n	8226 <m2m_wifi_init+0x182>
	{
		M2M_ERR("Mismatch Firmawre Version\n");
    81f8:	23e8      	movs	r3, #232	; 0xe8
    81fa:	33ff      	adds	r3, #255	; 0xff
    81fc:	001a      	movs	r2, r3
    81fe:	491f      	ldr	r1, [pc, #124]	; (827c <m2m_wifi_init+0x1d8>)
    8200:	4b1f      	ldr	r3, [pc, #124]	; (8280 <m2m_wifi_init+0x1dc>)
    8202:	0018      	movs	r0, r3
    8204:	4b14      	ldr	r3, [pc, #80]	; (8258 <m2m_wifi_init+0x1b4>)
    8206:	4798      	blx	r3
    8208:	4b1e      	ldr	r3, [pc, #120]	; (8284 <m2m_wifi_init+0x1e0>)
    820a:	0018      	movs	r0, r3
    820c:	4b1e      	ldr	r3, [pc, #120]	; (8288 <m2m_wifi_init+0x1e4>)
    820e:	4798      	blx	r3
    8210:	200d      	movs	r0, #13
    8212:	4b13      	ldr	r3, [pc, #76]	; (8260 <m2m_wifi_init+0x1bc>)
    8214:	4798      	blx	r3
	}

	goto _EXIT0;
    8216:	e006      	b.n	8226 <m2m_wifi_init+0x182>
	if(ret != M2M_SUCCESS) 	goto _EXIT1;
    8218:	46c0      	nop			; (mov r8, r8)

_EXIT1:
	nm_drv_deinit(NULL);
    821a:	2000      	movs	r0, #0
    821c:	4b1b      	ldr	r3, [pc, #108]	; (828c <m2m_wifi_init+0x1e8>)
    821e:	4798      	blx	r3
    8220:	e002      	b.n	8228 <m2m_wifi_init+0x184>
	if(ret != M2M_SUCCESS) 	goto _EXIT0;
    8222:	46c0      	nop			; (mov r8, r8)
    8224:	e000      	b.n	8228 <m2m_wifi_init+0x184>
	goto _EXIT0;
    8226:	46c0      	nop			; (mov r8, r8)
_EXIT0:
	return ret;
    8228:	2337      	movs	r3, #55	; 0x37
    822a:	18fb      	adds	r3, r7, r3
    822c:	781b      	ldrb	r3, [r3, #0]
    822e:	b25b      	sxtb	r3, r3
}
    8230:	0018      	movs	r0, r3
    8232:	46bd      	mov	sp, r7
    8234:	b00f      	add	sp, #60	; 0x3c
    8236:	bd90      	pop	{r4, r7, pc}
    8238:	2000054c 	.word	0x2000054c
    823c:	20000549 	.word	0x20000549
    8240:	00009559 	.word	0x00009559
    8244:	00006f79 	.word	0x00006f79
    8248:	00007d01 	.word	0x00007d01
    824c:	00007a35 	.word	0x00007a35
    8250:	0000938d 	.word	0x0000938d
    8254:	0001fc6c 	.word	0x0001fc6c
    8258:	0001c2d5 	.word	0x0001c2d5
    825c:	0001fe00 	.word	0x0001fe00
    8260:	0001c309 	.word	0x0001c309
    8264:	0001fe28 	.word	0x0001fe28
    8268:	0001fe44 	.word	0x0001fe44
    826c:	0001fe68 	.word	0x0001fe68
    8270:	0001fe80 	.word	0x0001fe80
    8274:	0001fe8c 	.word	0x0001fe8c
    8278:	0001fe98 	.word	0x0001fe98
    827c:	0002002c 	.word	0x0002002c
    8280:	0001fc98 	.word	0x0001fc98
    8284:	0001feb0 	.word	0x0001feb0
    8288:	0001c3f1 	.word	0x0001c3f1
    828c:	00009701 	.word	0x00009701

00008290 <m2m_wifi_handle_events>:
	return M2M_SUCCESS;
}


sint8 m2m_wifi_handle_events(void * arg)
{
    8290:	b580      	push	{r7, lr}
    8292:	b082      	sub	sp, #8
    8294:	af00      	add	r7, sp, #0
    8296:	6078      	str	r0, [r7, #4]
	return hif_handle_isr();
    8298:	4b03      	ldr	r3, [pc, #12]	; (82a8 <m2m_wifi_handle_events+0x18>)
    829a:	4798      	blx	r3
    829c:	0003      	movs	r3, r0
}
    829e:	0018      	movs	r0, r3
    82a0:	46bd      	mov	sp, r7
    82a2:	b002      	add	sp, #8
    82a4:	bd80      	pop	{r7, pc}
    82a6:	46c0      	nop			; (mov r8, r8)
    82a8:	00007825 	.word	0x00007825

000082ac <m2m_wifi_connect>:
{
	return hif_send(M2M_REQ_GROUP_WIFI, M2M_WIFI_REQ_DEFAULT_CONNECT, NULL, 0,NULL, 0,0);
}

sint8 m2m_wifi_connect(char *pcSsid, uint8 u8SsidLen, uint8 u8SecType, void *pvAuthInfo, uint16 u16Ch)
{
    82ac:	b590      	push	{r4, r7, lr}
    82ae:	b087      	sub	sp, #28
    82b0:	af02      	add	r7, sp, #8
    82b2:	60f8      	str	r0, [r7, #12]
    82b4:	0008      	movs	r0, r1
    82b6:	0011      	movs	r1, r2
    82b8:	607b      	str	r3, [r7, #4]
    82ba:	230b      	movs	r3, #11
    82bc:	18fb      	adds	r3, r7, r3
    82be:	1c02      	adds	r2, r0, #0
    82c0:	701a      	strb	r2, [r3, #0]
    82c2:	230a      	movs	r3, #10
    82c4:	18fb      	adds	r3, r7, r3
    82c6:	1c0a      	adds	r2, r1, #0
    82c8:	701a      	strb	r2, [r3, #0]
	return m2m_wifi_connect_sc(pcSsid, u8SsidLen, u8SecType, pvAuthInfo,  u16Ch,0);
    82ca:	687c      	ldr	r4, [r7, #4]
    82cc:	230a      	movs	r3, #10
    82ce:	18fb      	adds	r3, r7, r3
    82d0:	781a      	ldrb	r2, [r3, #0]
    82d2:	230b      	movs	r3, #11
    82d4:	18fb      	adds	r3, r7, r3
    82d6:	7819      	ldrb	r1, [r3, #0]
    82d8:	68f8      	ldr	r0, [r7, #12]
    82da:	2300      	movs	r3, #0
    82dc:	9301      	str	r3, [sp, #4]
    82de:	2320      	movs	r3, #32
    82e0:	18fb      	adds	r3, r7, r3
    82e2:	881b      	ldrh	r3, [r3, #0]
    82e4:	9300      	str	r3, [sp, #0]
    82e6:	0023      	movs	r3, r4
    82e8:	4c03      	ldr	r4, [pc, #12]	; (82f8 <m2m_wifi_connect+0x4c>)
    82ea:	47a0      	blx	r4
    82ec:	0003      	movs	r3, r0
}
    82ee:	0018      	movs	r0, r3
    82f0:	46bd      	mov	sp, r7
    82f2:	b005      	add	sp, #20
    82f4:	bd90      	pop	{r4, r7, pc}
    82f6:	46c0      	nop			; (mov r8, r8)
    82f8:	000082fd 	.word	0x000082fd

000082fc <m2m_wifi_connect_sc>:
sint8 m2m_wifi_connect_sc(char *pcSsid, uint8 u8SsidLen, uint8 u8SecType, void *pvAuthInfo, uint16 u16Ch, uint8 u8NoSaveCred)
{
    82fc:	b5b0      	push	{r4, r5, r7, lr}
    82fe:	b0aa      	sub	sp, #168	; 0xa8
    8300:	af04      	add	r7, sp, #16
    8302:	60f8      	str	r0, [r7, #12]
    8304:	0008      	movs	r0, r1
    8306:	0011      	movs	r1, r2
    8308:	607b      	str	r3, [r7, #4]
    830a:	230b      	movs	r3, #11
    830c:	18fb      	adds	r3, r7, r3
    830e:	1c02      	adds	r2, r0, #0
    8310:	701a      	strb	r2, [r3, #0]
    8312:	230a      	movs	r3, #10
    8314:	18fb      	adds	r3, r7, r3
    8316:	1c0a      	adds	r2, r1, #0
    8318:	701a      	strb	r2, [r3, #0]
	sint8				ret = M2M_SUCCESS;
    831a:	2397      	movs	r3, #151	; 0x97
    831c:	18fb      	adds	r3, r7, r3
    831e:	2200      	movs	r2, #0
    8320:	701a      	strb	r2, [r3, #0]
	tstrM2mWifiConnect	strConnect;
	tstrM2MWifiSecInfo	*pstrAuthInfo;

	if(u8SecType != M2M_WIFI_SEC_OPEN)
    8322:	230a      	movs	r3, #10
    8324:	18fb      	adds	r3, r7, r3
    8326:	781b      	ldrb	r3, [r3, #0]
    8328:	2b01      	cmp	r3, #1
    832a:	d100      	bne.n	832e <m2m_wifi_connect_sc+0x32>
    832c:	e083      	b.n	8436 <m2m_wifi_connect_sc+0x13a>
	{
		if(pvAuthInfo == NULL)
    832e:	687b      	ldr	r3, [r7, #4]
    8330:	2b00      	cmp	r3, #0
    8332:	d111      	bne.n	8358 <m2m_wifi_connect_sc+0x5c>
		{
			M2M_ERR("Key is not valid\n");
    8334:	4adb      	ldr	r2, [pc, #876]	; (86a4 <m2m_wifi_connect_sc+0x3a8>)
    8336:	49dc      	ldr	r1, [pc, #880]	; (86a8 <m2m_wifi_connect_sc+0x3ac>)
    8338:	4bdc      	ldr	r3, [pc, #880]	; (86ac <m2m_wifi_connect_sc+0x3b0>)
    833a:	0018      	movs	r0, r3
    833c:	4bdc      	ldr	r3, [pc, #880]	; (86b0 <m2m_wifi_connect_sc+0x3b4>)
    833e:	4798      	blx	r3
    8340:	4bdc      	ldr	r3, [pc, #880]	; (86b4 <m2m_wifi_connect_sc+0x3b8>)
    8342:	0018      	movs	r0, r3
    8344:	4bdc      	ldr	r3, [pc, #880]	; (86b8 <m2m_wifi_connect_sc+0x3bc>)
    8346:	4798      	blx	r3
    8348:	200d      	movs	r0, #13
    834a:	4bdc      	ldr	r3, [pc, #880]	; (86bc <m2m_wifi_connect_sc+0x3c0>)
    834c:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    834e:	2397      	movs	r3, #151	; 0x97
    8350:	18fb      	adds	r3, r7, r3
    8352:	22f4      	movs	r2, #244	; 0xf4
    8354:	701a      	strb	r2, [r3, #0]
			goto ERR1;
    8356:	e1f5      	b.n	8744 <m2m_wifi_connect_sc+0x448>
		}
		if((u8SecType == M2M_WIFI_SEC_WPA_PSK) && (m2m_strlen(pvAuthInfo) == (M2M_MAX_PSK_LEN-1)))
    8358:	230a      	movs	r3, #10
    835a:	18fb      	adds	r3, r7, r3
    835c:	781b      	ldrb	r3, [r3, #0]
    835e:	2b02      	cmp	r3, #2
    8360:	d169      	bne.n	8436 <m2m_wifi_connect_sc+0x13a>
    8362:	687b      	ldr	r3, [r7, #4]
    8364:	0018      	movs	r0, r3
    8366:	4bd6      	ldr	r3, [pc, #856]	; (86c0 <m2m_wifi_connect_sc+0x3c4>)
    8368:	4798      	blx	r3
    836a:	0003      	movs	r3, r0
    836c:	2b40      	cmp	r3, #64	; 0x40
    836e:	d162      	bne.n	8436 <m2m_wifi_connect_sc+0x13a>
		{
			uint8 i = 0;
    8370:	2396      	movs	r3, #150	; 0x96
    8372:	18fb      	adds	r3, r7, r3
    8374:	2200      	movs	r2, #0
    8376:	701a      	strb	r2, [r3, #0]
			uint8* pu8Psk = (uint8*)pvAuthInfo;
    8378:	687b      	ldr	r3, [r7, #4]
    837a:	2290      	movs	r2, #144	; 0x90
    837c:	18ba      	adds	r2, r7, r2
    837e:	6013      	str	r3, [r2, #0]
			while(i < (M2M_MAX_PSK_LEN-1))
    8380:	e054      	b.n	842c <m2m_wifi_connect_sc+0x130>
			{
				if(pu8Psk[i]<'0' || (pu8Psk[i]>'9' && pu8Psk[i] < 'A')|| (pu8Psk[i]>'F' && pu8Psk[i] < 'a') || pu8Psk[i] > 'f')
    8382:	2396      	movs	r3, #150	; 0x96
    8384:	18fb      	adds	r3, r7, r3
    8386:	781b      	ldrb	r3, [r3, #0]
    8388:	2290      	movs	r2, #144	; 0x90
    838a:	18ba      	adds	r2, r7, r2
    838c:	6812      	ldr	r2, [r2, #0]
    838e:	18d3      	adds	r3, r2, r3
    8390:	781b      	ldrb	r3, [r3, #0]
    8392:	2b2f      	cmp	r3, #47	; 0x2f
    8394:	d931      	bls.n	83fa <m2m_wifi_connect_sc+0xfe>
    8396:	2396      	movs	r3, #150	; 0x96
    8398:	18fb      	adds	r3, r7, r3
    839a:	781b      	ldrb	r3, [r3, #0]
    839c:	2290      	movs	r2, #144	; 0x90
    839e:	18ba      	adds	r2, r7, r2
    83a0:	6812      	ldr	r2, [r2, #0]
    83a2:	18d3      	adds	r3, r2, r3
    83a4:	781b      	ldrb	r3, [r3, #0]
    83a6:	2b39      	cmp	r3, #57	; 0x39
    83a8:	d909      	bls.n	83be <m2m_wifi_connect_sc+0xc2>
    83aa:	2396      	movs	r3, #150	; 0x96
    83ac:	18fb      	adds	r3, r7, r3
    83ae:	781b      	ldrb	r3, [r3, #0]
    83b0:	2290      	movs	r2, #144	; 0x90
    83b2:	18ba      	adds	r2, r7, r2
    83b4:	6812      	ldr	r2, [r2, #0]
    83b6:	18d3      	adds	r3, r2, r3
    83b8:	781b      	ldrb	r3, [r3, #0]
    83ba:	2b40      	cmp	r3, #64	; 0x40
    83bc:	d91d      	bls.n	83fa <m2m_wifi_connect_sc+0xfe>
    83be:	2396      	movs	r3, #150	; 0x96
    83c0:	18fb      	adds	r3, r7, r3
    83c2:	781b      	ldrb	r3, [r3, #0]
    83c4:	2290      	movs	r2, #144	; 0x90
    83c6:	18ba      	adds	r2, r7, r2
    83c8:	6812      	ldr	r2, [r2, #0]
    83ca:	18d3      	adds	r3, r2, r3
    83cc:	781b      	ldrb	r3, [r3, #0]
    83ce:	2b46      	cmp	r3, #70	; 0x46
    83d0:	d909      	bls.n	83e6 <m2m_wifi_connect_sc+0xea>
    83d2:	2396      	movs	r3, #150	; 0x96
    83d4:	18fb      	adds	r3, r7, r3
    83d6:	781b      	ldrb	r3, [r3, #0]
    83d8:	2290      	movs	r2, #144	; 0x90
    83da:	18ba      	adds	r2, r7, r2
    83dc:	6812      	ldr	r2, [r2, #0]
    83de:	18d3      	adds	r3, r2, r3
    83e0:	781b      	ldrb	r3, [r3, #0]
    83e2:	2b60      	cmp	r3, #96	; 0x60
    83e4:	d909      	bls.n	83fa <m2m_wifi_connect_sc+0xfe>
    83e6:	2396      	movs	r3, #150	; 0x96
    83e8:	18fb      	adds	r3, r7, r3
    83ea:	781b      	ldrb	r3, [r3, #0]
    83ec:	2290      	movs	r2, #144	; 0x90
    83ee:	18ba      	adds	r2, r7, r2
    83f0:	6812      	ldr	r2, [r2, #0]
    83f2:	18d3      	adds	r3, r2, r3
    83f4:	781b      	ldrb	r3, [r3, #0]
    83f6:	2b66      	cmp	r3, #102	; 0x66
    83f8:	d911      	bls.n	841e <m2m_wifi_connect_sc+0x122>
				{
					M2M_ERR("Invalid Key\n");
    83fa:	4ab2      	ldr	r2, [pc, #712]	; (86c4 <m2m_wifi_connect_sc+0x3c8>)
    83fc:	49aa      	ldr	r1, [pc, #680]	; (86a8 <m2m_wifi_connect_sc+0x3ac>)
    83fe:	4bab      	ldr	r3, [pc, #684]	; (86ac <m2m_wifi_connect_sc+0x3b0>)
    8400:	0018      	movs	r0, r3
    8402:	4bab      	ldr	r3, [pc, #684]	; (86b0 <m2m_wifi_connect_sc+0x3b4>)
    8404:	4798      	blx	r3
    8406:	4bb0      	ldr	r3, [pc, #704]	; (86c8 <m2m_wifi_connect_sc+0x3cc>)
    8408:	0018      	movs	r0, r3
    840a:	4bab      	ldr	r3, [pc, #684]	; (86b8 <m2m_wifi_connect_sc+0x3bc>)
    840c:	4798      	blx	r3
    840e:	200d      	movs	r0, #13
    8410:	4baa      	ldr	r3, [pc, #680]	; (86bc <m2m_wifi_connect_sc+0x3c0>)
    8412:	4798      	blx	r3
					ret = M2M_ERR_FAIL;
    8414:	2397      	movs	r3, #151	; 0x97
    8416:	18fb      	adds	r3, r7, r3
    8418:	22f4      	movs	r2, #244	; 0xf4
    841a:	701a      	strb	r2, [r3, #0]
					goto ERR1;
    841c:	e192      	b.n	8744 <m2m_wifi_connect_sc+0x448>
				}
				i++;
    841e:	2396      	movs	r3, #150	; 0x96
    8420:	18fb      	adds	r3, r7, r3
    8422:	781a      	ldrb	r2, [r3, #0]
    8424:	2396      	movs	r3, #150	; 0x96
    8426:	18fb      	adds	r3, r7, r3
    8428:	3201      	adds	r2, #1
    842a:	701a      	strb	r2, [r3, #0]
			while(i < (M2M_MAX_PSK_LEN-1))
    842c:	2396      	movs	r3, #150	; 0x96
    842e:	18fb      	adds	r3, r7, r3
    8430:	781b      	ldrb	r3, [r3, #0]
    8432:	2b3f      	cmp	r3, #63	; 0x3f
    8434:	d9a5      	bls.n	8382 <m2m_wifi_connect_sc+0x86>
			}
		}
	}
	if((u8SsidLen<=0)||(u8SsidLen>=M2M_MAX_SSID_LEN))
    8436:	230b      	movs	r3, #11
    8438:	18fb      	adds	r3, r7, r3
    843a:	781b      	ldrb	r3, [r3, #0]
    843c:	2b00      	cmp	r3, #0
    843e:	d004      	beq.n	844a <m2m_wifi_connect_sc+0x14e>
    8440:	230b      	movs	r3, #11
    8442:	18fb      	adds	r3, r7, r3
    8444:	781b      	ldrb	r3, [r3, #0]
    8446:	2b20      	cmp	r3, #32
    8448:	d911      	bls.n	846e <m2m_wifi_connect_sc+0x172>
	{
		M2M_ERR("SSID LEN INVALID\n");
    844a:	4aa0      	ldr	r2, [pc, #640]	; (86cc <m2m_wifi_connect_sc+0x3d0>)
    844c:	4996      	ldr	r1, [pc, #600]	; (86a8 <m2m_wifi_connect_sc+0x3ac>)
    844e:	4b97      	ldr	r3, [pc, #604]	; (86ac <m2m_wifi_connect_sc+0x3b0>)
    8450:	0018      	movs	r0, r3
    8452:	4b97      	ldr	r3, [pc, #604]	; (86b0 <m2m_wifi_connect_sc+0x3b4>)
    8454:	4798      	blx	r3
    8456:	4b9e      	ldr	r3, [pc, #632]	; (86d0 <m2m_wifi_connect_sc+0x3d4>)
    8458:	0018      	movs	r0, r3
    845a:	4b97      	ldr	r3, [pc, #604]	; (86b8 <m2m_wifi_connect_sc+0x3bc>)
    845c:	4798      	blx	r3
    845e:	200d      	movs	r0, #13
    8460:	4b96      	ldr	r3, [pc, #600]	; (86bc <m2m_wifi_connect_sc+0x3c0>)
    8462:	4798      	blx	r3
		ret = M2M_ERR_FAIL;
    8464:	2397      	movs	r3, #151	; 0x97
    8466:	18fb      	adds	r3, r7, r3
    8468:	22f4      	movs	r2, #244	; 0xf4
    846a:	701a      	strb	r2, [r3, #0]
		goto ERR1;
    846c:	e16a      	b.n	8744 <m2m_wifi_connect_sc+0x448>
	}

	if(u16Ch < M2M_WIFI_CH_1|| u16Ch > M2M_WIFI_CH_14)
    846e:	23a8      	movs	r3, #168	; 0xa8
    8470:	18fb      	adds	r3, r7, r3
    8472:	881b      	ldrh	r3, [r3, #0]
    8474:	2b00      	cmp	r3, #0
    8476:	d004      	beq.n	8482 <m2m_wifi_connect_sc+0x186>
    8478:	23a8      	movs	r3, #168	; 0xa8
    847a:	18fb      	adds	r3, r7, r3
    847c:	881b      	ldrh	r3, [r3, #0]
    847e:	2b0e      	cmp	r3, #14
    8480:	d917      	bls.n	84b2 <m2m_wifi_connect_sc+0x1b6>
	{
		if(u16Ch!=M2M_WIFI_CH_ALL)
    8482:	23a8      	movs	r3, #168	; 0xa8
    8484:	18fb      	adds	r3, r7, r3
    8486:	881b      	ldrh	r3, [r3, #0]
    8488:	2bff      	cmp	r3, #255	; 0xff
    848a:	d012      	beq.n	84b2 <m2m_wifi_connect_sc+0x1b6>
		{
			M2M_ERR("CH INVALID\n");
    848c:	238d      	movs	r3, #141	; 0x8d
    848e:	009a      	lsls	r2, r3, #2
    8490:	4985      	ldr	r1, [pc, #532]	; (86a8 <m2m_wifi_connect_sc+0x3ac>)
    8492:	4b86      	ldr	r3, [pc, #536]	; (86ac <m2m_wifi_connect_sc+0x3b0>)
    8494:	0018      	movs	r0, r3
    8496:	4b86      	ldr	r3, [pc, #536]	; (86b0 <m2m_wifi_connect_sc+0x3b4>)
    8498:	4798      	blx	r3
    849a:	4b8e      	ldr	r3, [pc, #568]	; (86d4 <m2m_wifi_connect_sc+0x3d8>)
    849c:	0018      	movs	r0, r3
    849e:	4b86      	ldr	r3, [pc, #536]	; (86b8 <m2m_wifi_connect_sc+0x3bc>)
    84a0:	4798      	blx	r3
    84a2:	200d      	movs	r0, #13
    84a4:	4b85      	ldr	r3, [pc, #532]	; (86bc <m2m_wifi_connect_sc+0x3c0>)
    84a6:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    84a8:	2397      	movs	r3, #151	; 0x97
    84aa:	18fb      	adds	r3, r7, r3
    84ac:	22f4      	movs	r2, #244	; 0xf4
    84ae:	701a      	strb	r2, [r3, #0]
			goto ERR1;
    84b0:	e148      	b.n	8744 <m2m_wifi_connect_sc+0x448>
		}
	}


	m2m_memcpy(strConnect.au8SSID, (uint8*)pcSsid, u8SsidLen);
    84b2:	230b      	movs	r3, #11
    84b4:	18fb      	adds	r3, r7, r3
    84b6:	781a      	ldrb	r2, [r3, #0]
    84b8:	68f9      	ldr	r1, [r7, #12]
    84ba:	2314      	movs	r3, #20
    84bc:	18fb      	adds	r3, r7, r3
    84be:	3346      	adds	r3, #70	; 0x46
    84c0:	0018      	movs	r0, r3
    84c2:	4b85      	ldr	r3, [pc, #532]	; (86d8 <m2m_wifi_connect_sc+0x3dc>)
    84c4:	4798      	blx	r3
	strConnect.au8SSID[u8SsidLen]	= 0;
    84c6:	230b      	movs	r3, #11
    84c8:	18fb      	adds	r3, r7, r3
    84ca:	781b      	ldrb	r3, [r3, #0]
    84cc:	2214      	movs	r2, #20
    84ce:	18ba      	adds	r2, r7, r2
    84d0:	2146      	movs	r1, #70	; 0x46
    84d2:	18d3      	adds	r3, r2, r3
    84d4:	185b      	adds	r3, r3, r1
    84d6:	2200      	movs	r2, #0
    84d8:	701a      	strb	r2, [r3, #0]
	strConnect.u16Ch				= NM_BSP_B_L_16(u16Ch);
    84da:	2314      	movs	r3, #20
    84dc:	18fb      	adds	r3, r7, r3
    84de:	22a8      	movs	r2, #168	; 0xa8
    84e0:	18ba      	adds	r2, r7, r2
    84e2:	2144      	movs	r1, #68	; 0x44
    84e4:	8812      	ldrh	r2, [r2, #0]
    84e6:	525a      	strh	r2, [r3, r1]
	/* Credentials will be Not be saved if u8NoSaveCred is set */ 
	strConnect.u8NoSaveCred 			= u8NoSaveCred ? 1:0;
    84e8:	23ac      	movs	r3, #172	; 0xac
    84ea:	18fb      	adds	r3, r7, r3
    84ec:	781b      	ldrb	r3, [r3, #0]
    84ee:	1e5a      	subs	r2, r3, #1
    84f0:	4193      	sbcs	r3, r2
    84f2:	b2db      	uxtb	r3, r3
    84f4:	0019      	movs	r1, r3
    84f6:	2314      	movs	r3, #20
    84f8:	18fb      	adds	r3, r7, r3
    84fa:	2267      	movs	r2, #103	; 0x67
    84fc:	5499      	strb	r1, [r3, r2]
	pstrAuthInfo = &strConnect.strSec;
    84fe:	2314      	movs	r3, #20
    8500:	18fb      	adds	r3, r7, r3
    8502:	228c      	movs	r2, #140	; 0x8c
    8504:	18ba      	adds	r2, r7, r2
    8506:	6013      	str	r3, [r2, #0]
	pstrAuthInfo->u8SecType		= u8SecType;
    8508:	238c      	movs	r3, #140	; 0x8c
    850a:	18fb      	adds	r3, r7, r3
    850c:	681b      	ldr	r3, [r3, #0]
    850e:	220a      	movs	r2, #10
    8510:	18ba      	adds	r2, r7, r2
    8512:	2141      	movs	r1, #65	; 0x41
    8514:	7812      	ldrb	r2, [r2, #0]
    8516:	545a      	strb	r2, [r3, r1]

	if(u8SecType == M2M_WIFI_SEC_WEP)
    8518:	230a      	movs	r3, #10
    851a:	18fb      	adds	r3, r7, r3
    851c:	781b      	ldrb	r3, [r3, #0]
    851e:	2b03      	cmp	r3, #3
    8520:	d000      	beq.n	8524 <m2m_wifi_connect_sc+0x228>
    8522:	e07a      	b.n	861a <m2m_wifi_connect_sc+0x31e>
	{
		tstrM2mWifiWepParams	* pstrWepParams = (tstrM2mWifiWepParams*)pvAuthInfo;
    8524:	687b      	ldr	r3, [r7, #4]
    8526:	2288      	movs	r2, #136	; 0x88
    8528:	18ba      	adds	r2, r7, r2
    852a:	6013      	str	r3, [r2, #0]
		tstrM2mWifiWepParams	*pstrWep = &pstrAuthInfo->uniAuth.strWepInfo;
    852c:	238c      	movs	r3, #140	; 0x8c
    852e:	18fb      	adds	r3, r7, r3
    8530:	681b      	ldr	r3, [r3, #0]
    8532:	2284      	movs	r2, #132	; 0x84
    8534:	18ba      	adds	r2, r7, r2
    8536:	6013      	str	r3, [r2, #0]
		pstrWep->u8KeyIndx =pstrWepParams->u8KeyIndx-1;
    8538:	2388      	movs	r3, #136	; 0x88
    853a:	18fb      	adds	r3, r7, r3
    853c:	681b      	ldr	r3, [r3, #0]
    853e:	781b      	ldrb	r3, [r3, #0]
    8540:	3b01      	subs	r3, #1
    8542:	b2da      	uxtb	r2, r3
    8544:	2384      	movs	r3, #132	; 0x84
    8546:	18fb      	adds	r3, r7, r3
    8548:	681b      	ldr	r3, [r3, #0]
    854a:	701a      	strb	r2, [r3, #0]

		if(pstrWep->u8KeyIndx >= WEP_KEY_MAX_INDEX)
    854c:	2384      	movs	r3, #132	; 0x84
    854e:	18fb      	adds	r3, r7, r3
    8550:	681b      	ldr	r3, [r3, #0]
    8552:	781b      	ldrb	r3, [r3, #0]
    8554:	2b03      	cmp	r3, #3
    8556:	d917      	bls.n	8588 <m2m_wifi_connect_sc+0x28c>
		{
			M2M_ERR("Invalid Wep key index %d\n", pstrWep->u8KeyIndx);
    8558:	4a60      	ldr	r2, [pc, #384]	; (86dc <m2m_wifi_connect_sc+0x3e0>)
    855a:	4953      	ldr	r1, [pc, #332]	; (86a8 <m2m_wifi_connect_sc+0x3ac>)
    855c:	4b53      	ldr	r3, [pc, #332]	; (86ac <m2m_wifi_connect_sc+0x3b0>)
    855e:	0018      	movs	r0, r3
    8560:	4b53      	ldr	r3, [pc, #332]	; (86b0 <m2m_wifi_connect_sc+0x3b4>)
    8562:	4798      	blx	r3
    8564:	2384      	movs	r3, #132	; 0x84
    8566:	18fb      	adds	r3, r7, r3
    8568:	681b      	ldr	r3, [r3, #0]
    856a:	781b      	ldrb	r3, [r3, #0]
    856c:	001a      	movs	r2, r3
    856e:	4b5c      	ldr	r3, [pc, #368]	; (86e0 <m2m_wifi_connect_sc+0x3e4>)
    8570:	0011      	movs	r1, r2
    8572:	0018      	movs	r0, r3
    8574:	4b4e      	ldr	r3, [pc, #312]	; (86b0 <m2m_wifi_connect_sc+0x3b4>)
    8576:	4798      	blx	r3
    8578:	200d      	movs	r0, #13
    857a:	4b50      	ldr	r3, [pc, #320]	; (86bc <m2m_wifi_connect_sc+0x3c0>)
    857c:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    857e:	2397      	movs	r3, #151	; 0x97
    8580:	18fb      	adds	r3, r7, r3
    8582:	22f4      	movs	r2, #244	; 0xf4
    8584:	701a      	strb	r2, [r3, #0]
			goto ERR1;
    8586:	e0dd      	b.n	8744 <m2m_wifi_connect_sc+0x448>
		}
		pstrWep->u8KeySz = pstrWepParams->u8KeySz-1;
    8588:	2388      	movs	r3, #136	; 0x88
    858a:	18fb      	adds	r3, r7, r3
    858c:	681b      	ldr	r3, [r3, #0]
    858e:	785b      	ldrb	r3, [r3, #1]
    8590:	3b01      	subs	r3, #1
    8592:	b2da      	uxtb	r2, r3
    8594:	2384      	movs	r3, #132	; 0x84
    8596:	18fb      	adds	r3, r7, r3
    8598:	681b      	ldr	r3, [r3, #0]
    859a:	705a      	strb	r2, [r3, #1]
		if ((pstrWep->u8KeySz != WEP_40_KEY_STRING_SIZE)&& (pstrWep->u8KeySz != WEP_104_KEY_STRING_SIZE))
    859c:	2384      	movs	r3, #132	; 0x84
    859e:	18fb      	adds	r3, r7, r3
    85a0:	681b      	ldr	r3, [r3, #0]
    85a2:	785b      	ldrb	r3, [r3, #1]
    85a4:	2b0a      	cmp	r3, #10
    85a6:	d01d      	beq.n	85e4 <m2m_wifi_connect_sc+0x2e8>
    85a8:	2384      	movs	r3, #132	; 0x84
    85aa:	18fb      	adds	r3, r7, r3
    85ac:	681b      	ldr	r3, [r3, #0]
    85ae:	785b      	ldrb	r3, [r3, #1]
    85b0:	2b1a      	cmp	r3, #26
    85b2:	d017      	beq.n	85e4 <m2m_wifi_connect_sc+0x2e8>
		{
			M2M_ERR("Invalid Wep key length %d\n", pstrWep->u8KeySz);
    85b4:	4a4b      	ldr	r2, [pc, #300]	; (86e4 <m2m_wifi_connect_sc+0x3e8>)
    85b6:	493c      	ldr	r1, [pc, #240]	; (86a8 <m2m_wifi_connect_sc+0x3ac>)
    85b8:	4b3c      	ldr	r3, [pc, #240]	; (86ac <m2m_wifi_connect_sc+0x3b0>)
    85ba:	0018      	movs	r0, r3
    85bc:	4b3c      	ldr	r3, [pc, #240]	; (86b0 <m2m_wifi_connect_sc+0x3b4>)
    85be:	4798      	blx	r3
    85c0:	2384      	movs	r3, #132	; 0x84
    85c2:	18fb      	adds	r3, r7, r3
    85c4:	681b      	ldr	r3, [r3, #0]
    85c6:	785b      	ldrb	r3, [r3, #1]
    85c8:	001a      	movs	r2, r3
    85ca:	4b47      	ldr	r3, [pc, #284]	; (86e8 <m2m_wifi_connect_sc+0x3ec>)
    85cc:	0011      	movs	r1, r2
    85ce:	0018      	movs	r0, r3
    85d0:	4b37      	ldr	r3, [pc, #220]	; (86b0 <m2m_wifi_connect_sc+0x3b4>)
    85d2:	4798      	blx	r3
    85d4:	200d      	movs	r0, #13
    85d6:	4b39      	ldr	r3, [pc, #228]	; (86bc <m2m_wifi_connect_sc+0x3c0>)
    85d8:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    85da:	2397      	movs	r3, #151	; 0x97
    85dc:	18fb      	adds	r3, r7, r3
    85de:	22f4      	movs	r2, #244	; 0xf4
    85e0:	701a      	strb	r2, [r3, #0]
			goto ERR1;
    85e2:	e0af      	b.n	8744 <m2m_wifi_connect_sc+0x448>
		}
		m2m_memcpy((uint8*)pstrWep->au8WepKey,(uint8*)pstrWepParams->au8WepKey, pstrWepParams->u8KeySz);
    85e4:	2384      	movs	r3, #132	; 0x84
    85e6:	18fb      	adds	r3, r7, r3
    85e8:	681b      	ldr	r3, [r3, #0]
    85ea:	1c98      	adds	r0, r3, #2
    85ec:	2388      	movs	r3, #136	; 0x88
    85ee:	18fb      	adds	r3, r7, r3
    85f0:	681b      	ldr	r3, [r3, #0]
    85f2:	1c99      	adds	r1, r3, #2
    85f4:	2388      	movs	r3, #136	; 0x88
    85f6:	18fb      	adds	r3, r7, r3
    85f8:	681b      	ldr	r3, [r3, #0]
    85fa:	785b      	ldrb	r3, [r3, #1]
    85fc:	001a      	movs	r2, r3
    85fe:	4b36      	ldr	r3, [pc, #216]	; (86d8 <m2m_wifi_connect_sc+0x3dc>)
    8600:	4798      	blx	r3
		pstrWep->au8WepKey[pstrWepParams->u8KeySz] = 0;
    8602:	2388      	movs	r3, #136	; 0x88
    8604:	18fb      	adds	r3, r7, r3
    8606:	681b      	ldr	r3, [r3, #0]
    8608:	785b      	ldrb	r3, [r3, #1]
    860a:	001a      	movs	r2, r3
    860c:	2384      	movs	r3, #132	; 0x84
    860e:	18fb      	adds	r3, r7, r3
    8610:	681b      	ldr	r3, [r3, #0]
    8612:	189b      	adds	r3, r3, r2
    8614:	2200      	movs	r2, #0
    8616:	709a      	strb	r2, [r3, #2]
    8618:	e083      	b.n	8722 <m2m_wifi_connect_sc+0x426>

	}


	else if(u8SecType == M2M_WIFI_SEC_WPA_PSK)
    861a:	230a      	movs	r3, #10
    861c:	18fb      	adds	r3, r7, r3
    861e:	781b      	ldrb	r3, [r3, #0]
    8620:	2b02      	cmp	r3, #2
    8622:	d130      	bne.n	8686 <m2m_wifi_connect_sc+0x38a>
	{
		uint16	u16KeyLen = m2m_strlen((uint8*)pvAuthInfo);
    8624:	2382      	movs	r3, #130	; 0x82
    8626:	18fc      	adds	r4, r7, r3
    8628:	687b      	ldr	r3, [r7, #4]
    862a:	0018      	movs	r0, r3
    862c:	4b24      	ldr	r3, [pc, #144]	; (86c0 <m2m_wifi_connect_sc+0x3c4>)
    862e:	4798      	blx	r3
    8630:	0003      	movs	r3, r0
    8632:	8023      	strh	r3, [r4, #0]
		if((u16KeyLen <= 0)||(u16KeyLen >= M2M_MAX_PSK_LEN))
    8634:	2382      	movs	r3, #130	; 0x82
    8636:	18fb      	adds	r3, r7, r3
    8638:	881b      	ldrh	r3, [r3, #0]
    863a:	2b00      	cmp	r3, #0
    863c:	d004      	beq.n	8648 <m2m_wifi_connect_sc+0x34c>
    863e:	2382      	movs	r3, #130	; 0x82
    8640:	18fb      	adds	r3, r7, r3
    8642:	881b      	ldrh	r3, [r3, #0]
    8644:	2b40      	cmp	r3, #64	; 0x40
    8646:	d911      	bls.n	866c <m2m_wifi_connect_sc+0x370>
		{
			M2M_ERR("Incorrect PSK key length\n");
    8648:	4a28      	ldr	r2, [pc, #160]	; (86ec <m2m_wifi_connect_sc+0x3f0>)
    864a:	4917      	ldr	r1, [pc, #92]	; (86a8 <m2m_wifi_connect_sc+0x3ac>)
    864c:	4b17      	ldr	r3, [pc, #92]	; (86ac <m2m_wifi_connect_sc+0x3b0>)
    864e:	0018      	movs	r0, r3
    8650:	4b17      	ldr	r3, [pc, #92]	; (86b0 <m2m_wifi_connect_sc+0x3b4>)
    8652:	4798      	blx	r3
    8654:	4b26      	ldr	r3, [pc, #152]	; (86f0 <m2m_wifi_connect_sc+0x3f4>)
    8656:	0018      	movs	r0, r3
    8658:	4b17      	ldr	r3, [pc, #92]	; (86b8 <m2m_wifi_connect_sc+0x3bc>)
    865a:	4798      	blx	r3
    865c:	200d      	movs	r0, #13
    865e:	4b17      	ldr	r3, [pc, #92]	; (86bc <m2m_wifi_connect_sc+0x3c0>)
    8660:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    8662:	2397      	movs	r3, #151	; 0x97
    8664:	18fb      	adds	r3, r7, r3
    8666:	22f4      	movs	r2, #244	; 0xf4
    8668:	701a      	strb	r2, [r3, #0]
			goto ERR1;
    866a:	e06b      	b.n	8744 <m2m_wifi_connect_sc+0x448>
		}
		m2m_memcpy(pstrAuthInfo->uniAuth.au8PSK, (uint8*)pvAuthInfo, u16KeyLen + 1);
    866c:	238c      	movs	r3, #140	; 0x8c
    866e:	18fb      	adds	r3, r7, r3
    8670:	6818      	ldr	r0, [r3, #0]
    8672:	2382      	movs	r3, #130	; 0x82
    8674:	18fb      	adds	r3, r7, r3
    8676:	881b      	ldrh	r3, [r3, #0]
    8678:	3301      	adds	r3, #1
    867a:	001a      	movs	r2, r3
    867c:	687b      	ldr	r3, [r7, #4]
    867e:	0019      	movs	r1, r3
    8680:	4b15      	ldr	r3, [pc, #84]	; (86d8 <m2m_wifi_connect_sc+0x3dc>)
    8682:	4798      	blx	r3
    8684:	e04d      	b.n	8722 <m2m_wifi_connect_sc+0x426>
	}
	else if(u8SecType == M2M_WIFI_SEC_802_1X)
    8686:	230a      	movs	r3, #10
    8688:	18fb      	adds	r3, r7, r3
    868a:	781b      	ldrb	r3, [r3, #0]
    868c:	2b04      	cmp	r3, #4
    868e:	d131      	bne.n	86f4 <m2m_wifi_connect_sc+0x3f8>
	{
		m2m_memcpy((uint8*)&pstrAuthInfo->uniAuth.strCred1x, (uint8*)pvAuthInfo, sizeof(tstr1xAuthCredentials));
    8690:	238c      	movs	r3, #140	; 0x8c
    8692:	18fb      	adds	r3, r7, r3
    8694:	681b      	ldr	r3, [r3, #0]
    8696:	6879      	ldr	r1, [r7, #4]
    8698:	223e      	movs	r2, #62	; 0x3e
    869a:	0018      	movs	r0, r3
    869c:	4b0e      	ldr	r3, [pc, #56]	; (86d8 <m2m_wifi_connect_sc+0x3dc>)
    869e:	4798      	blx	r3
    86a0:	e03f      	b.n	8722 <m2m_wifi_connect_sc+0x426>
    86a2:	46c0      	nop			; (mov r8, r8)
    86a4:	00000215 	.word	0x00000215
    86a8:	0002003c 	.word	0x0002003c
    86ac:	0001fc98 	.word	0x0001fc98
    86b0:	0001c2d5 	.word	0x0001c2d5
    86b4:	0001fecc 	.word	0x0001fecc
    86b8:	0001c3f1 	.word	0x0001c3f1
    86bc:	0001c309 	.word	0x0001c309
    86c0:	00006d9f 	.word	0x00006d9f
    86c4:	00000221 	.word	0x00000221
    86c8:	0001fee0 	.word	0x0001fee0
    86cc:	0000022b 	.word	0x0000022b
    86d0:	0001feec 	.word	0x0001feec
    86d4:	0001ff00 	.word	0x0001ff00
    86d8:	00006d25 	.word	0x00006d25
    86dc:	0000024b 	.word	0x0000024b
    86e0:	0001ff0c 	.word	0x0001ff0c
    86e4:	00000252 	.word	0x00000252
    86e8:	0001ff28 	.word	0x0001ff28
    86ec:	00000261 	.word	0x00000261
    86f0:	0001ff44 	.word	0x0001ff44
	}
	else if(u8SecType == M2M_WIFI_SEC_OPEN)
    86f4:	230a      	movs	r3, #10
    86f6:	18fb      	adds	r3, r7, r3
    86f8:	781b      	ldrb	r3, [r3, #0]
    86fa:	2b01      	cmp	r3, #1
    86fc:	d011      	beq.n	8722 <m2m_wifi_connect_sc+0x426>
	{

	}
	else
	{
		M2M_ERR("undefined sec type\n");
    86fe:	4a15      	ldr	r2, [pc, #84]	; (8754 <m2m_wifi_connect_sc+0x458>)
    8700:	4915      	ldr	r1, [pc, #84]	; (8758 <m2m_wifi_connect_sc+0x45c>)
    8702:	4b16      	ldr	r3, [pc, #88]	; (875c <m2m_wifi_connect_sc+0x460>)
    8704:	0018      	movs	r0, r3
    8706:	4b16      	ldr	r3, [pc, #88]	; (8760 <m2m_wifi_connect_sc+0x464>)
    8708:	4798      	blx	r3
    870a:	4b16      	ldr	r3, [pc, #88]	; (8764 <m2m_wifi_connect_sc+0x468>)
    870c:	0018      	movs	r0, r3
    870e:	4b16      	ldr	r3, [pc, #88]	; (8768 <m2m_wifi_connect_sc+0x46c>)
    8710:	4798      	blx	r3
    8712:	200d      	movs	r0, #13
    8714:	4b15      	ldr	r3, [pc, #84]	; (876c <m2m_wifi_connect_sc+0x470>)
    8716:	4798      	blx	r3
		ret = M2M_ERR_FAIL;
    8718:	2397      	movs	r3, #151	; 0x97
    871a:	18fb      	adds	r3, r7, r3
    871c:	22f4      	movs	r2, #244	; 0xf4
    871e:	701a      	strb	r2, [r3, #0]
		goto ERR1;
    8720:	e010      	b.n	8744 <m2m_wifi_connect_sc+0x448>
	}

	ret = hif_send(M2M_REQ_GROUP_WIFI, M2M_WIFI_REQ_CONNECT, (uint8*)&strConnect, sizeof(tstrM2mWifiConnect),NULL, 0,0);
    8722:	2397      	movs	r3, #151	; 0x97
    8724:	18fc      	adds	r4, r7, r3
    8726:	2314      	movs	r3, #20
    8728:	18fa      	adds	r2, r7, r3
    872a:	2300      	movs	r3, #0
    872c:	9302      	str	r3, [sp, #8]
    872e:	2300      	movs	r3, #0
    8730:	9301      	str	r3, [sp, #4]
    8732:	2300      	movs	r3, #0
    8734:	9300      	str	r3, [sp, #0]
    8736:	236c      	movs	r3, #108	; 0x6c
    8738:	2128      	movs	r1, #40	; 0x28
    873a:	2001      	movs	r0, #1
    873c:	4d0c      	ldr	r5, [pc, #48]	; (8770 <m2m_wifi_connect_sc+0x474>)
    873e:	47a8      	blx	r5
    8740:	0003      	movs	r3, r0
    8742:	7023      	strb	r3, [r4, #0]

ERR1:
	return ret;
    8744:	2397      	movs	r3, #151	; 0x97
    8746:	18fb      	adds	r3, r7, r3
    8748:	781b      	ldrb	r3, [r3, #0]
    874a:	b25b      	sxtb	r3, r3
}
    874c:	0018      	movs	r0, r3
    874e:	46bd      	mov	sp, r7
    8750:	b026      	add	sp, #152	; 0x98
    8752:	bdb0      	pop	{r4, r5, r7, pc}
    8754:	00000271 	.word	0x00000271
    8758:	0002003c 	.word	0x0002003c
    875c:	0001fc98 	.word	0x0001fc98
    8760:	0001c2d5 	.word	0x0001c2d5
    8764:	0001ff60 	.word	0x0001ff60
    8768:	0001c3f1 	.word	0x0001c3f1
    876c:	0001c309 	.word	0x0001c309
    8770:	00006fc1 	.word	0x00006fc1

00008774 <m2m_wifi_get_firmware_version>:
	m2m_memcpy(strDeviceName.au8DeviceName, pu8DeviceName, u8DeviceNameLength);
	return hif_send(M2M_REQ_GROUP_WIFI, M2M_WIFI_REQ_SET_DEVICE_NAME,
		(uint8*)&strDeviceName, sizeof(tstrM2MDeviceNameConfig), NULL, 0,0);
}
sint8 m2m_wifi_get_firmware_version(tstrM2mRev *pstrRev)
{
    8774:	b590      	push	{r4, r7, lr}
    8776:	b085      	sub	sp, #20
    8778:	af00      	add	r7, sp, #0
    877a:	6078      	str	r0, [r7, #4]
	sint8 ret = M2M_SUCCESS;
    877c:	230f      	movs	r3, #15
    877e:	18fb      	adds	r3, r7, r3
    8780:	2200      	movs	r2, #0
    8782:	701a      	strb	r2, [r3, #0]
	ret = hif_chip_wake();
    8784:	230f      	movs	r3, #15
    8786:	18fc      	adds	r4, r7, r3
    8788:	4b0d      	ldr	r3, [pc, #52]	; (87c0 <m2m_wifi_get_firmware_version+0x4c>)
    878a:	4798      	blx	r3
    878c:	0003      	movs	r3, r0
    878e:	7023      	strb	r3, [r4, #0]
	if(ret == M2M_SUCCESS)
    8790:	230f      	movs	r3, #15
    8792:	18fb      	adds	r3, r7, r3
    8794:	781b      	ldrb	r3, [r3, #0]
    8796:	b25b      	sxtb	r3, r3
    8798:	2b00      	cmp	r3, #0
    879a:	d109      	bne.n	87b0 <m2m_wifi_get_firmware_version+0x3c>
	{
    	ret = nm_get_firmware_full_info(pstrRev);
    879c:	230f      	movs	r3, #15
    879e:	18fc      	adds	r4, r7, r3
    87a0:	687b      	ldr	r3, [r7, #4]
    87a2:	0018      	movs	r0, r3
    87a4:	4b07      	ldr	r3, [pc, #28]	; (87c4 <m2m_wifi_get_firmware_version+0x50>)
    87a6:	4798      	blx	r3
    87a8:	0003      	movs	r3, r0
    87aa:	7023      	strb	r3, [r4, #0]
		hif_chip_sleep();
    87ac:	4b06      	ldr	r3, [pc, #24]	; (87c8 <m2m_wifi_get_firmware_version+0x54>)
    87ae:	4798      	blx	r3
	}
	return ret;
    87b0:	230f      	movs	r3, #15
    87b2:	18fb      	adds	r3, r7, r3
    87b4:	781b      	ldrb	r3, [r3, #0]
    87b6:	b25b      	sxtb	r3, r3
}
    87b8:	0018      	movs	r0, r3
    87ba:	46bd      	mov	sp, r7
    87bc:	b005      	add	sp, #20
    87be:	bd90      	pop	{r4, r7, pc}
    87c0:	00006e89 	.word	0x00006e89
    87c4:	0000938d 	.word	0x0000938d
    87c8:	00006f21 	.word	0x00006f21

000087cc <m2m_wifi_get_sytem_time>:
 * @note         get the system time from the sntp client
 *		         using the API \ref m2m_wifi_get_sytem_time.
 * @return        The function returns @ref M2M_SUCCESS for successful operations and a negative value otherwise.
 */
sint8 m2m_wifi_get_sytem_time(void)
{
    87cc:	b590      	push	{r4, r7, lr}
    87ce:	b085      	sub	sp, #20
    87d0:	af04      	add	r7, sp, #16
	return hif_send(M2M_REQ_GROUP_WIFI, M2M_WIFI_REQ_GET_SYS_TIME, NULL,0, NULL, 0, 0);
    87d2:	2300      	movs	r3, #0
    87d4:	9302      	str	r3, [sp, #8]
    87d6:	2300      	movs	r3, #0
    87d8:	9301      	str	r3, [sp, #4]
    87da:	2300      	movs	r3, #0
    87dc:	9300      	str	r3, [sp, #0]
    87de:	2300      	movs	r3, #0
    87e0:	2200      	movs	r2, #0
    87e2:	211a      	movs	r1, #26
    87e4:	2001      	movs	r0, #1
    87e6:	4c03      	ldr	r4, [pc, #12]	; (87f4 <m2m_wifi_get_sytem_time+0x28>)
    87e8:	47a0      	blx	r4
    87ea:	0003      	movs	r3, r0
}
    87ec:	0018      	movs	r0, r3
    87ee:	46bd      	mov	sp, r7
    87f0:	b001      	add	sp, #4
    87f2:	bd90      	pop	{r4, r7, pc}
    87f4:	00006fc1 	.word	0x00006fc1

000087f8 <m2m_wifi_enable_sntp>:

sint8 m2m_wifi_enable_sntp(uint8 bEnable)
{
    87f8:	b590      	push	{r4, r7, lr}
    87fa:	b089      	sub	sp, #36	; 0x24
    87fc:	af04      	add	r7, sp, #16
    87fe:	0002      	movs	r2, r0
    8800:	1dfb      	adds	r3, r7, #7
    8802:	701a      	strb	r2, [r3, #0]
	uint8	u8Req;

	u8Req = bEnable ? M2M_WIFI_REQ_ENABLE_SNTP_CLIENT : M2M_WIFI_REQ_DISABLE_SNTP_CLIENT;
    8804:	1dfb      	adds	r3, r7, #7
    8806:	781b      	ldrb	r3, [r3, #0]
    8808:	2b00      	cmp	r3, #0
    880a:	d001      	beq.n	8810 <m2m_wifi_enable_sntp+0x18>
    880c:	220c      	movs	r2, #12
    880e:	e000      	b.n	8812 <m2m_wifi_enable_sntp+0x1a>
    8810:	220d      	movs	r2, #13
    8812:	230f      	movs	r3, #15
    8814:	18fb      	adds	r3, r7, r3
    8816:	701a      	strb	r2, [r3, #0]
	return hif_send(M2M_REQ_GROUP_WIFI, u8Req, NULL, 0, NULL, 0, 0);
    8818:	230f      	movs	r3, #15
    881a:	18fb      	adds	r3, r7, r3
    881c:	7819      	ldrb	r1, [r3, #0]
    881e:	2300      	movs	r3, #0
    8820:	9302      	str	r3, [sp, #8]
    8822:	2300      	movs	r3, #0
    8824:	9301      	str	r3, [sp, #4]
    8826:	2300      	movs	r3, #0
    8828:	9300      	str	r3, [sp, #0]
    882a:	2300      	movs	r3, #0
    882c:	2200      	movs	r2, #0
    882e:	2001      	movs	r0, #1
    8830:	4c03      	ldr	r4, [pc, #12]	; (8840 <m2m_wifi_enable_sntp+0x48>)
    8832:	47a0      	blx	r4
    8834:	0003      	movs	r3, r0
}
    8836:	0018      	movs	r0, r3
    8838:	46bd      	mov	sp, r7
    883a:	b005      	add	sp, #20
    883c:	bd90      	pop	{r4, r7, pc}
    883e:	46c0      	nop			; (mov r8, r8)
    8840:	00006fc1 	.word	0x00006fc1

00008844 <chip_apply_conf>:

#define TIMEOUT						(0xfffffffful)
#define WAKUP_TRAILS_TIMEOUT		(4)

sint8 chip_apply_conf(uint32 u32Conf)
{
    8844:	b590      	push	{r4, r7, lr}
    8846:	b087      	sub	sp, #28
    8848:	af00      	add	r7, sp, #0
    884a:	6078      	str	r0, [r7, #4]
	sint8 ret = M2M_SUCCESS;
    884c:	2317      	movs	r3, #23
    884e:	18fb      	adds	r3, r7, r3
    8850:	2200      	movs	r2, #0
    8852:	701a      	strb	r2, [r3, #0]
	uint32 val32 = u32Conf;
    8854:	687b      	ldr	r3, [r7, #4]
    8856:	613b      	str	r3, [r7, #16]
#endif
#ifdef __DISABLE_FIRMWARE_LOGS__
	val32 |= rHAVE_LOGS_DISABLED_BIT;
#endif

	val32 |= rHAVE_RESERVED1_BIT;
    8858:	693b      	ldr	r3, [r7, #16]
    885a:	2280      	movs	r2, #128	; 0x80
    885c:	0052      	lsls	r2, r2, #1
    885e:	4313      	orrs	r3, r2
    8860:	613b      	str	r3, [r7, #16]
	do  {
		nm_write_reg(rNMI_GP_REG_1, val32);
    8862:	693a      	ldr	r2, [r7, #16]
    8864:	23a5      	movs	r3, #165	; 0xa5
    8866:	015b      	lsls	r3, r3, #5
    8868:	0011      	movs	r1, r2
    886a:	0018      	movs	r0, r3
    886c:	4b12      	ldr	r3, [pc, #72]	; (88b8 <chip_apply_conf+0x74>)
    886e:	4798      	blx	r3
		if(val32 != 0) {		
    8870:	693b      	ldr	r3, [r7, #16]
    8872:	2b00      	cmp	r3, #0
    8874:	d018      	beq.n	88a8 <chip_apply_conf+0x64>
			uint32 reg = 0;
    8876:	2300      	movs	r3, #0
    8878:	60fb      	str	r3, [r7, #12]
			ret = nm_read_reg_with_ret(rNMI_GP_REG_1, &reg);
    887a:	2317      	movs	r3, #23
    887c:	18fc      	adds	r4, r7, r3
    887e:	230c      	movs	r3, #12
    8880:	18fa      	adds	r2, r7, r3
    8882:	23a5      	movs	r3, #165	; 0xa5
    8884:	015b      	lsls	r3, r3, #5
    8886:	0011      	movs	r1, r2
    8888:	0018      	movs	r0, r3
    888a:	4b0c      	ldr	r3, [pc, #48]	; (88bc <chip_apply_conf+0x78>)
    888c:	4798      	blx	r3
    888e:	0003      	movs	r3, r0
    8890:	7023      	strb	r3, [r4, #0]
			if(ret == M2M_SUCCESS) {
    8892:	2317      	movs	r3, #23
    8894:	18fb      	adds	r3, r7, r3
    8896:	781b      	ldrb	r3, [r3, #0]
    8898:	b25b      	sxtb	r3, r3
    889a:	2b00      	cmp	r3, #0
    889c:	d1e1      	bne.n	8862 <chip_apply_conf+0x1e>
				if(reg == val32)
    889e:	68fa      	ldr	r2, [r7, #12]
    88a0:	693b      	ldr	r3, [r7, #16]
    88a2:	429a      	cmp	r2, r3
    88a4:	d002      	beq.n	88ac <chip_apply_conf+0x68>
		nm_write_reg(rNMI_GP_REG_1, val32);
    88a6:	e7dc      	b.n	8862 <chip_apply_conf+0x1e>
					break;
			}
		} else {
			break;
    88a8:	46c0      	nop			; (mov r8, r8)
    88aa:	e000      	b.n	88ae <chip_apply_conf+0x6a>
					break;
    88ac:	46c0      	nop			; (mov r8, r8)
		}
	} while(1);

	return M2M_SUCCESS;
    88ae:	2300      	movs	r3, #0
}
    88b0:	0018      	movs	r0, r3
    88b2:	46bd      	mov	sp, r7
    88b4:	b007      	add	sp, #28
    88b6:	bd90      	pop	{r4, r7, pc}
    88b8:	00009179 	.word	0x00009179
    88bc:	00009155 	.word	0x00009155

000088c0 <enable_interrupts>:
		nm_write_reg(WAKE_CLK_REG, reg);
	}
}

sint8 enable_interrupts(void)
{
    88c0:	b590      	push	{r4, r7, lr}
    88c2:	b083      	sub	sp, #12
    88c4:	af00      	add	r7, sp, #0
	uint32 reg = 0;
    88c6:	2300      	movs	r3, #0
    88c8:	603b      	str	r3, [r7, #0]
	sint8 ret = M2M_SUCCESS;
    88ca:	1dfb      	adds	r3, r7, #7
    88cc:	2200      	movs	r2, #0
    88ce:	701a      	strb	r2, [r3, #0]
	/**
	interrupt pin mux select
	**/
	ret = nm_read_reg_with_ret(NMI_PIN_MUX_0, &reg);
    88d0:	1dfc      	adds	r4, r7, #7
    88d2:	003b      	movs	r3, r7
    88d4:	4a24      	ldr	r2, [pc, #144]	; (8968 <enable_interrupts+0xa8>)
    88d6:	0019      	movs	r1, r3
    88d8:	0010      	movs	r0, r2
    88da:	4b24      	ldr	r3, [pc, #144]	; (896c <enable_interrupts+0xac>)
    88dc:	4798      	blx	r3
    88de:	0003      	movs	r3, r0
    88e0:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) goto ERR1;
    88e2:	1dfb      	adds	r3, r7, #7
    88e4:	781b      	ldrb	r3, [r3, #0]
    88e6:	b25b      	sxtb	r3, r3
    88e8:	2b00      	cmp	r3, #0
    88ea:	d131      	bne.n	8950 <enable_interrupts+0x90>
	
	reg |= ((uint32) 1 << 8);
    88ec:	683b      	ldr	r3, [r7, #0]
    88ee:	2280      	movs	r2, #128	; 0x80
    88f0:	0052      	lsls	r2, r2, #1
    88f2:	4313      	orrs	r3, r2
    88f4:	603b      	str	r3, [r7, #0]
	ret = nm_write_reg(NMI_PIN_MUX_0, reg);
    88f6:	683b      	ldr	r3, [r7, #0]
    88f8:	1dfc      	adds	r4, r7, #7
    88fa:	4a1b      	ldr	r2, [pc, #108]	; (8968 <enable_interrupts+0xa8>)
    88fc:	0019      	movs	r1, r3
    88fe:	0010      	movs	r0, r2
    8900:	4b1b      	ldr	r3, [pc, #108]	; (8970 <enable_interrupts+0xb0>)
    8902:	4798      	blx	r3
    8904:	0003      	movs	r3, r0
    8906:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) goto ERR1;
    8908:	1dfb      	adds	r3, r7, #7
    890a:	781b      	ldrb	r3, [r3, #0]
    890c:	b25b      	sxtb	r3, r3
    890e:	2b00      	cmp	r3, #0
    8910:	d120      	bne.n	8954 <enable_interrupts+0x94>
	
	/**
	interrupt enable
	**/
	ret = nm_read_reg_with_ret(NMI_INTR_ENABLE, &reg);
    8912:	1dfc      	adds	r4, r7, #7
    8914:	003a      	movs	r2, r7
    8916:	23d0      	movs	r3, #208	; 0xd0
    8918:	015b      	lsls	r3, r3, #5
    891a:	0011      	movs	r1, r2
    891c:	0018      	movs	r0, r3
    891e:	4b13      	ldr	r3, [pc, #76]	; (896c <enable_interrupts+0xac>)
    8920:	4798      	blx	r3
    8922:	0003      	movs	r3, r0
    8924:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) goto ERR1;
    8926:	1dfb      	adds	r3, r7, #7
    8928:	781b      	ldrb	r3, [r3, #0]
    892a:	b25b      	sxtb	r3, r3
    892c:	2b00      	cmp	r3, #0
    892e:	d113      	bne.n	8958 <enable_interrupts+0x98>
	
	reg |= ((uint32) 1 << 16);
    8930:	683b      	ldr	r3, [r7, #0]
    8932:	2280      	movs	r2, #128	; 0x80
    8934:	0252      	lsls	r2, r2, #9
    8936:	4313      	orrs	r3, r2
    8938:	603b      	str	r3, [r7, #0]
	ret = nm_write_reg(NMI_INTR_ENABLE, reg);
    893a:	683a      	ldr	r2, [r7, #0]
    893c:	1dfc      	adds	r4, r7, #7
    893e:	23d0      	movs	r3, #208	; 0xd0
    8940:	015b      	lsls	r3, r3, #5
    8942:	0011      	movs	r1, r2
    8944:	0018      	movs	r0, r3
    8946:	4b0a      	ldr	r3, [pc, #40]	; (8970 <enable_interrupts+0xb0>)
    8948:	4798      	blx	r3
    894a:	0003      	movs	r3, r0
    894c:	7023      	strb	r3, [r4, #0]
    894e:	e004      	b.n	895a <enable_interrupts+0x9a>
	if (M2M_SUCCESS != ret) goto ERR1;
    8950:	46c0      	nop			; (mov r8, r8)
    8952:	e002      	b.n	895a <enable_interrupts+0x9a>
	if (M2M_SUCCESS != ret) goto ERR1;
    8954:	46c0      	nop			; (mov r8, r8)
    8956:	e000      	b.n	895a <enable_interrupts+0x9a>
	if (M2M_SUCCESS != ret) goto ERR1;
    8958:	46c0      	nop			; (mov r8, r8)
	if (M2M_SUCCESS != ret) goto ERR1;
ERR1:	
	return ret;
    895a:	1dfb      	adds	r3, r7, #7
    895c:	781b      	ldrb	r3, [r3, #0]
    895e:	b25b      	sxtb	r3, r3
}
    8960:	0018      	movs	r0, r3
    8962:	46bd      	mov	sp, r7
    8964:	b003      	add	sp, #12
    8966:	bd90      	pop	{r4, r7, pc}
    8968:	00001408 	.word	0x00001408
    896c:	00009155 	.word	0x00009155
    8970:	00009179 	.word	0x00009179

00008974 <nmi_get_chipid>:
	nm_bsp_sleep(1);
	return ret;
}

uint32 nmi_get_chipid(void)
{
    8974:	b580      	push	{r7, lr}
    8976:	b082      	sub	sp, #8
    8978:	af00      	add	r7, sp, #0
	static uint32 chipid = 0;

	if (chipid == 0) {
    897a:	4b32      	ldr	r3, [pc, #200]	; (8a44 <nmi_get_chipid+0xd0>)
    897c:	681b      	ldr	r3, [r3, #0]
    897e:	2b00      	cmp	r3, #0
    8980:	d159      	bne.n	8a36 <nmi_get_chipid+0xc2>
		uint32 rfrevid;
		
		if((nm_read_reg_with_ret(0x1000, &chipid)) != M2M_SUCCESS) {
    8982:	4a30      	ldr	r2, [pc, #192]	; (8a44 <nmi_get_chipid+0xd0>)
    8984:	2380      	movs	r3, #128	; 0x80
    8986:	015b      	lsls	r3, r3, #5
    8988:	0011      	movs	r1, r2
    898a:	0018      	movs	r0, r3
    898c:	4b2e      	ldr	r3, [pc, #184]	; (8a48 <nmi_get_chipid+0xd4>)
    898e:	4798      	blx	r3
    8990:	1e03      	subs	r3, r0, #0
    8992:	d004      	beq.n	899e <nmi_get_chipid+0x2a>
			chipid = 0;
    8994:	4b2b      	ldr	r3, [pc, #172]	; (8a44 <nmi_get_chipid+0xd0>)
    8996:	2200      	movs	r2, #0
    8998:	601a      	str	r2, [r3, #0]
			return 0;
    899a:	2300      	movs	r3, #0
    899c:	e04d      	b.n	8a3a <nmi_get_chipid+0xc6>
		}
		//if((ret = nm_read_reg_with_ret(0x11fc, &revid)) != M2M_SUCCESS) {
		//	return 0;
		//}
		if((nm_read_reg_with_ret(0x13f4, &rfrevid)) != M2M_SUCCESS) {
    899e:	1d3b      	adds	r3, r7, #4
    89a0:	4a2a      	ldr	r2, [pc, #168]	; (8a4c <nmi_get_chipid+0xd8>)
    89a2:	0019      	movs	r1, r3
    89a4:	0010      	movs	r0, r2
    89a6:	4b28      	ldr	r3, [pc, #160]	; (8a48 <nmi_get_chipid+0xd4>)
    89a8:	4798      	blx	r3
    89aa:	1e03      	subs	r3, r0, #0
    89ac:	d004      	beq.n	89b8 <nmi_get_chipid+0x44>
			chipid = 0;
    89ae:	4b25      	ldr	r3, [pc, #148]	; (8a44 <nmi_get_chipid+0xd0>)
    89b0:	2200      	movs	r2, #0
    89b2:	601a      	str	r2, [r3, #0]
			return 0;
    89b4:	2300      	movs	r3, #0
    89b6:	e040      	b.n	8a3a <nmi_get_chipid+0xc6>
		}

		if (chipid == 0x1002a0)  {
    89b8:	4b22      	ldr	r3, [pc, #136]	; (8a44 <nmi_get_chipid+0xd0>)
    89ba:	681b      	ldr	r3, [r3, #0]
    89bc:	4a24      	ldr	r2, [pc, #144]	; (8a50 <nmi_get_chipid+0xdc>)
    89be:	4293      	cmp	r3, r2
    89c0:	d106      	bne.n	89d0 <nmi_get_chipid+0x5c>
			if (rfrevid == 0x1) { /* 1002A0 */
    89c2:	687b      	ldr	r3, [r7, #4]
    89c4:	2b01      	cmp	r3, #1
    89c6:	d029      	beq.n	8a1c <nmi_get_chipid+0xa8>
			} else /* if (rfrevid == 0x2) */ { /* 1002A1 */
				chipid = 0x1002a1;
    89c8:	4b1e      	ldr	r3, [pc, #120]	; (8a44 <nmi_get_chipid+0xd0>)
    89ca:	4a22      	ldr	r2, [pc, #136]	; (8a54 <nmi_get_chipid+0xe0>)
    89cc:	601a      	str	r2, [r3, #0]
    89ce:	e025      	b.n	8a1c <nmi_get_chipid+0xa8>
			}
		} else if(chipid == 0x1002b0) {
    89d0:	4b1c      	ldr	r3, [pc, #112]	; (8a44 <nmi_get_chipid+0xd0>)
    89d2:	681b      	ldr	r3, [r3, #0]
    89d4:	4a20      	ldr	r2, [pc, #128]	; (8a58 <nmi_get_chipid+0xe4>)
    89d6:	4293      	cmp	r3, r2
    89d8:	d10d      	bne.n	89f6 <nmi_get_chipid+0x82>
			if(rfrevid == 3) { /* 1002B0 */
    89da:	687b      	ldr	r3, [r7, #4]
    89dc:	2b03      	cmp	r3, #3
    89de:	d01d      	beq.n	8a1c <nmi_get_chipid+0xa8>
			} else if(rfrevid == 4) { /* 1002B1 */
    89e0:	687b      	ldr	r3, [r7, #4]
    89e2:	2b04      	cmp	r3, #4
    89e4:	d103      	bne.n	89ee <nmi_get_chipid+0x7a>
				chipid = 0x1002b1;
    89e6:	4b17      	ldr	r3, [pc, #92]	; (8a44 <nmi_get_chipid+0xd0>)
    89e8:	4a1c      	ldr	r2, [pc, #112]	; (8a5c <nmi_get_chipid+0xe8>)
    89ea:	601a      	str	r2, [r3, #0]
    89ec:	e016      	b.n	8a1c <nmi_get_chipid+0xa8>
			} else /* if(rfrevid == 5) */ { /* 1002B2 */
				chipid = 0x1002b2;
    89ee:	4b15      	ldr	r3, [pc, #84]	; (8a44 <nmi_get_chipid+0xd0>)
    89f0:	4a1b      	ldr	r2, [pc, #108]	; (8a60 <nmi_get_chipid+0xec>)
    89f2:	601a      	str	r2, [r3, #0]
    89f4:	e012      	b.n	8a1c <nmi_get_chipid+0xa8>
			}
		}else if(chipid == 0x1000F0) { 
    89f6:	4b13      	ldr	r3, [pc, #76]	; (8a44 <nmi_get_chipid+0xd0>)
    89f8:	681b      	ldr	r3, [r3, #0]
    89fa:	4a1a      	ldr	r2, [pc, #104]	; (8a64 <nmi_get_chipid+0xf0>)
    89fc:	4293      	cmp	r3, r2
    89fe:	d10d      	bne.n	8a1c <nmi_get_chipid+0xa8>
			if((nm_read_reg_with_ret(0x3B0000, &chipid)) != M2M_SUCCESS) {
    8a00:	4a10      	ldr	r2, [pc, #64]	; (8a44 <nmi_get_chipid+0xd0>)
    8a02:	23ec      	movs	r3, #236	; 0xec
    8a04:	039b      	lsls	r3, r3, #14
    8a06:	0011      	movs	r1, r2
    8a08:	0018      	movs	r0, r3
    8a0a:	4b0f      	ldr	r3, [pc, #60]	; (8a48 <nmi_get_chipid+0xd4>)
    8a0c:	4798      	blx	r3
    8a0e:	1e03      	subs	r3, r0, #0
    8a10:	d004      	beq.n	8a1c <nmi_get_chipid+0xa8>
			chipid = 0;
    8a12:	4b0c      	ldr	r3, [pc, #48]	; (8a44 <nmi_get_chipid+0xd0>)
    8a14:	2200      	movs	r2, #0
    8a16:	601a      	str	r2, [r3, #0]
			return 0;
    8a18:	2300      	movs	r3, #0
    8a1a:	e00e      	b.n	8a3a <nmi_get_chipid+0xc6>
				chipid |= 0x050000;
			}
		}
#else
		/*M2M is by default have SPI flash*/
		chipid &= ~(0x0f0000);
    8a1c:	4b09      	ldr	r3, [pc, #36]	; (8a44 <nmi_get_chipid+0xd0>)
    8a1e:	681b      	ldr	r3, [r3, #0]
    8a20:	4a11      	ldr	r2, [pc, #68]	; (8a68 <nmi_get_chipid+0xf4>)
    8a22:	401a      	ands	r2, r3
    8a24:	4b07      	ldr	r3, [pc, #28]	; (8a44 <nmi_get_chipid+0xd0>)
    8a26:	601a      	str	r2, [r3, #0]
		chipid |= 0x050000;
    8a28:	4b06      	ldr	r3, [pc, #24]	; (8a44 <nmi_get_chipid+0xd0>)
    8a2a:	681b      	ldr	r3, [r3, #0]
    8a2c:	22a0      	movs	r2, #160	; 0xa0
    8a2e:	02d2      	lsls	r2, r2, #11
    8a30:	431a      	orrs	r2, r3
    8a32:	4b04      	ldr	r3, [pc, #16]	; (8a44 <nmi_get_chipid+0xd0>)
    8a34:	601a      	str	r2, [r3, #0]
#endif /* PROBE_FLASH */
	}
	return chipid;
    8a36:	4b03      	ldr	r3, [pc, #12]	; (8a44 <nmi_get_chipid+0xd0>)
    8a38:	681b      	ldr	r3, [r3, #0]
}
    8a3a:	0018      	movs	r0, r3
    8a3c:	46bd      	mov	sp, r7
    8a3e:	b002      	add	sp, #8
    8a40:	bd80      	pop	{r7, pc}
    8a42:	46c0      	nop			; (mov r8, r8)
    8a44:	20000550 	.word	0x20000550
    8a48:	00009155 	.word	0x00009155
    8a4c:	000013f4 	.word	0x000013f4
    8a50:	001002a0 	.word	0x001002a0
    8a54:	001002a1 	.word	0x001002a1
    8a58:	001002b0 	.word	0x001002b0
    8a5c:	001002b1 	.word	0x001002b1
    8a60:	001002b2 	.word	0x001002b2
    8a64:	001000f0 	.word	0x001000f0
    8a68:	fff0ffff 	.word	0xfff0ffff

00008a6c <chip_sleep>:

	/* Do PLL update */
	nmi_update_pll();
}
sint8 chip_sleep(void)
{
    8a6c:	b590      	push	{r4, r7, lr}
    8a6e:	b083      	sub	sp, #12
    8a70:	af00      	add	r7, sp, #0
	uint32 reg;
	sint8 ret = M2M_SUCCESS;
    8a72:	1dfb      	adds	r3, r7, #7
    8a74:	2200      	movs	r2, #0
    8a76:	701a      	strb	r2, [r3, #0]
	
	while(1)
	{
		ret = nm_read_reg_with_ret(CORT_HOST_COMM,&reg);
    8a78:	1dfc      	adds	r4, r7, #7
    8a7a:	003b      	movs	r3, r7
    8a7c:	0019      	movs	r1, r3
    8a7e:	2010      	movs	r0, #16
    8a80:	4b2e      	ldr	r3, [pc, #184]	; (8b3c <chip_sleep+0xd0>)
    8a82:	4798      	blx	r3
    8a84:	0003      	movs	r3, r0
    8a86:	7023      	strb	r3, [r4, #0]
		if(ret != M2M_SUCCESS) goto ERR1;
    8a88:	1dfb      	adds	r3, r7, #7
    8a8a:	781b      	ldrb	r3, [r3, #0]
    8a8c:	b25b      	sxtb	r3, r3
    8a8e:	2b00      	cmp	r3, #0
    8a90:	d145      	bne.n	8b1e <chip_sleep+0xb2>
		if((reg & NBIT0) == 0) break;
    8a92:	683b      	ldr	r3, [r7, #0]
    8a94:	2201      	movs	r2, #1
    8a96:	4013      	ands	r3, r2
    8a98:	d000      	beq.n	8a9c <chip_sleep+0x30>
		ret = nm_read_reg_with_ret(CORT_HOST_COMM,&reg);
    8a9a:	e7ed      	b.n	8a78 <chip_sleep+0xc>
		if((reg & NBIT0) == 0) break;
    8a9c:	46c0      	nop			; (mov r8, r8)
	}
	
	/* Clear bit 1 */
	ret = nm_read_reg_with_ret(WAKE_CLK_REG, &reg);
    8a9e:	1dfc      	adds	r4, r7, #7
    8aa0:	003b      	movs	r3, r7
    8aa2:	0019      	movs	r1, r3
    8aa4:	2001      	movs	r0, #1
    8aa6:	4b25      	ldr	r3, [pc, #148]	; (8b3c <chip_sleep+0xd0>)
    8aa8:	4798      	blx	r3
    8aaa:	0003      	movs	r3, r0
    8aac:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS)goto ERR1;
    8aae:	1dfb      	adds	r3, r7, #7
    8ab0:	781b      	ldrb	r3, [r3, #0]
    8ab2:	b25b      	sxtb	r3, r3
    8ab4:	2b00      	cmp	r3, #0
    8ab6:	d134      	bne.n	8b22 <chip_sleep+0xb6>
	if(reg & NBIT1)
    8ab8:	683b      	ldr	r3, [r7, #0]
    8aba:	2202      	movs	r2, #2
    8abc:	4013      	ands	r3, r2
    8abe:	d010      	beq.n	8ae2 <chip_sleep+0x76>
	{
		reg &=~NBIT1;
    8ac0:	683b      	ldr	r3, [r7, #0]
    8ac2:	2202      	movs	r2, #2
    8ac4:	4393      	bics	r3, r2
    8ac6:	603b      	str	r3, [r7, #0]
		ret = nm_write_reg(WAKE_CLK_REG, reg);
    8ac8:	683b      	ldr	r3, [r7, #0]
    8aca:	1dfc      	adds	r4, r7, #7
    8acc:	0019      	movs	r1, r3
    8ace:	2001      	movs	r0, #1
    8ad0:	4b1b      	ldr	r3, [pc, #108]	; (8b40 <chip_sleep+0xd4>)
    8ad2:	4798      	blx	r3
    8ad4:	0003      	movs	r3, r0
    8ad6:	7023      	strb	r3, [r4, #0]
		if(ret != M2M_SUCCESS)goto ERR1;
    8ad8:	1dfb      	adds	r3, r7, #7
    8ada:	781b      	ldrb	r3, [r3, #0]
    8adc:	b25b      	sxtb	r3, r3
    8ade:	2b00      	cmp	r3, #0
    8ae0:	d121      	bne.n	8b26 <chip_sleep+0xba>
	}
	
	ret = nm_read_reg_with_ret(HOST_CORT_COMM, &reg);
    8ae2:	1dfc      	adds	r4, r7, #7
    8ae4:	003b      	movs	r3, r7
    8ae6:	0019      	movs	r1, r3
    8ae8:	200b      	movs	r0, #11
    8aea:	4b14      	ldr	r3, [pc, #80]	; (8b3c <chip_sleep+0xd0>)
    8aec:	4798      	blx	r3
    8aee:	0003      	movs	r3, r0
    8af0:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS)goto ERR1;
    8af2:	1dfb      	adds	r3, r7, #7
    8af4:	781b      	ldrb	r3, [r3, #0]
    8af6:	b25b      	sxtb	r3, r3
    8af8:	2b00      	cmp	r3, #0
    8afa:	d116      	bne.n	8b2a <chip_sleep+0xbe>
	if(reg & NBIT0)
    8afc:	683b      	ldr	r3, [r7, #0]
    8afe:	2201      	movs	r2, #1
    8b00:	4013      	ands	r3, r2
    8b02:	d013      	beq.n	8b2c <chip_sleep+0xc0>
	{
		reg &= ~NBIT0;
    8b04:	683b      	ldr	r3, [r7, #0]
    8b06:	2201      	movs	r2, #1
    8b08:	4393      	bics	r3, r2
    8b0a:	603b      	str	r3, [r7, #0]
		ret = nm_write_reg(HOST_CORT_COMM, reg);
    8b0c:	683b      	ldr	r3, [r7, #0]
    8b0e:	1dfc      	adds	r4, r7, #7
    8b10:	0019      	movs	r1, r3
    8b12:	200b      	movs	r0, #11
    8b14:	4b0a      	ldr	r3, [pc, #40]	; (8b40 <chip_sleep+0xd4>)
    8b16:	4798      	blx	r3
    8b18:	0003      	movs	r3, r0
    8b1a:	7023      	strb	r3, [r4, #0]
    8b1c:	e006      	b.n	8b2c <chip_sleep+0xc0>
		if(ret != M2M_SUCCESS) goto ERR1;
    8b1e:	46c0      	nop			; (mov r8, r8)
    8b20:	e004      	b.n	8b2c <chip_sleep+0xc0>
	if(ret != M2M_SUCCESS)goto ERR1;
    8b22:	46c0      	nop			; (mov r8, r8)
    8b24:	e002      	b.n	8b2c <chip_sleep+0xc0>
		if(ret != M2M_SUCCESS)goto ERR1;
    8b26:	46c0      	nop			; (mov r8, r8)
    8b28:	e000      	b.n	8b2c <chip_sleep+0xc0>
	if(ret != M2M_SUCCESS)goto ERR1;
    8b2a:	46c0      	nop			; (mov r8, r8)
		if(ret != M2M_SUCCESS)goto ERR1;
	}

ERR1:
	return ret;
    8b2c:	1dfb      	adds	r3, r7, #7
    8b2e:	781b      	ldrb	r3, [r3, #0]
    8b30:	b25b      	sxtb	r3, r3
}
    8b32:	0018      	movs	r0, r3
    8b34:	46bd      	mov	sp, r7
    8b36:	b003      	add	sp, #12
    8b38:	bd90      	pop	{r4, r7, pc}
    8b3a:	46c0      	nop			; (mov r8, r8)
    8b3c:	00009155 	.word	0x00009155
    8b40:	00009179 	.word	0x00009179

00008b44 <chip_wake>:
sint8 chip_wake(void)
{
    8b44:	b590      	push	{r4, r7, lr}
    8b46:	b085      	sub	sp, #20
    8b48:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;
    8b4a:	230f      	movs	r3, #15
    8b4c:	18fb      	adds	r3, r7, r3
    8b4e:	2200      	movs	r2, #0
    8b50:	701a      	strb	r2, [r3, #0]
	uint32 reg = 0, clk_status_reg = 0,trials = 0;
    8b52:	2300      	movs	r3, #0
    8b54:	607b      	str	r3, [r7, #4]
    8b56:	2300      	movs	r3, #0
    8b58:	603b      	str	r3, [r7, #0]
    8b5a:	2300      	movs	r3, #0
    8b5c:	60bb      	str	r3, [r7, #8]

	ret = nm_read_reg_with_ret(HOST_CORT_COMM, &reg);
    8b5e:	230f      	movs	r3, #15
    8b60:	18fc      	adds	r4, r7, r3
    8b62:	1d3b      	adds	r3, r7, #4
    8b64:	0019      	movs	r1, r3
    8b66:	200b      	movs	r0, #11
    8b68:	4b4c      	ldr	r3, [pc, #304]	; (8c9c <chip_wake+0x158>)
    8b6a:	4798      	blx	r3
    8b6c:	0003      	movs	r3, r0
    8b6e:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
    8b70:	230f      	movs	r3, #15
    8b72:	18fb      	adds	r3, r7, r3
    8b74:	781b      	ldrb	r3, [r3, #0]
    8b76:	b25b      	sxtb	r3, r3
    8b78:	2b00      	cmp	r3, #0
    8b7a:	d000      	beq.n	8b7e <chip_wake+0x3a>
    8b7c:	e07f      	b.n	8c7e <chip_wake+0x13a>
	
	if(!(reg & NBIT0))
    8b7e:	687b      	ldr	r3, [r7, #4]
    8b80:	2201      	movs	r2, #1
    8b82:	4013      	ands	r3, r2
    8b84:	d110      	bne.n	8ba8 <chip_wake+0x64>
	{
		/*USE bit 0 to indicate host wakeup*/
		ret = nm_write_reg(HOST_CORT_COMM, reg|NBIT0);
    8b86:	687b      	ldr	r3, [r7, #4]
    8b88:	2201      	movs	r2, #1
    8b8a:	4313      	orrs	r3, r2
    8b8c:	220f      	movs	r2, #15
    8b8e:	18bc      	adds	r4, r7, r2
    8b90:	0019      	movs	r1, r3
    8b92:	200b      	movs	r0, #11
    8b94:	4b42      	ldr	r3, [pc, #264]	; (8ca0 <chip_wake+0x15c>)
    8b96:	4798      	blx	r3
    8b98:	0003      	movs	r3, r0
    8b9a:	7023      	strb	r3, [r4, #0]
		if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
    8b9c:	230f      	movs	r3, #15
    8b9e:	18fb      	adds	r3, r7, r3
    8ba0:	781b      	ldrb	r3, [r3, #0]
    8ba2:	b25b      	sxtb	r3, r3
    8ba4:	2b00      	cmp	r3, #0
    8ba6:	d16c      	bne.n	8c82 <chip_wake+0x13e>
	}
		
	ret = nm_read_reg_with_ret(WAKE_CLK_REG, &reg);
    8ba8:	230f      	movs	r3, #15
    8baa:	18fc      	adds	r4, r7, r3
    8bac:	1d3b      	adds	r3, r7, #4
    8bae:	0019      	movs	r1, r3
    8bb0:	2001      	movs	r0, #1
    8bb2:	4b3a      	ldr	r3, [pc, #232]	; (8c9c <chip_wake+0x158>)
    8bb4:	4798      	blx	r3
    8bb6:	0003      	movs	r3, r0
    8bb8:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
    8bba:	230f      	movs	r3, #15
    8bbc:	18fb      	adds	r3, r7, r3
    8bbe:	781b      	ldrb	r3, [r3, #0]
    8bc0:	b25b      	sxtb	r3, r3
    8bc2:	2b00      	cmp	r3, #0
    8bc4:	d15f      	bne.n	8c86 <chip_wake+0x142>
	/* Set bit 1 */
	if(!(reg & NBIT1))
    8bc6:	687b      	ldr	r3, [r7, #4]
    8bc8:	2202      	movs	r2, #2
    8bca:	4013      	ands	r3, r2
    8bcc:	d110      	bne.n	8bf0 <chip_wake+0xac>
	{
		ret = nm_write_reg(WAKE_CLK_REG, reg | NBIT1);
    8bce:	687b      	ldr	r3, [r7, #4]
    8bd0:	2202      	movs	r2, #2
    8bd2:	4313      	orrs	r3, r2
    8bd4:	220f      	movs	r2, #15
    8bd6:	18bc      	adds	r4, r7, r2
    8bd8:	0019      	movs	r1, r3
    8bda:	2001      	movs	r0, #1
    8bdc:	4b30      	ldr	r3, [pc, #192]	; (8ca0 <chip_wake+0x15c>)
    8bde:	4798      	blx	r3
    8be0:	0003      	movs	r3, r0
    8be2:	7023      	strb	r3, [r4, #0]
		if(ret != M2M_SUCCESS) goto _WAKE_EXIT;	
    8be4:	230f      	movs	r3, #15
    8be6:	18fb      	adds	r3, r7, r3
    8be8:	781b      	ldrb	r3, [r3, #0]
    8bea:	b25b      	sxtb	r3, r3
    8bec:	2b00      	cmp	r3, #0
    8bee:	d14c      	bne.n	8c8a <chip_wake+0x146>
	}

	do
	{
		ret = nm_read_reg_with_ret(CLOCKS_EN_REG, &clk_status_reg);
    8bf0:	230f      	movs	r3, #15
    8bf2:	18fc      	adds	r4, r7, r3
    8bf4:	003b      	movs	r3, r7
    8bf6:	0019      	movs	r1, r3
    8bf8:	200f      	movs	r0, #15
    8bfa:	4b28      	ldr	r3, [pc, #160]	; (8c9c <chip_wake+0x158>)
    8bfc:	4798      	blx	r3
    8bfe:	0003      	movs	r3, r0
    8c00:	7023      	strb	r3, [r4, #0]
		if(ret != M2M_SUCCESS) {
    8c02:	230f      	movs	r3, #15
    8c04:	18fb      	adds	r3, r7, r3
    8c06:	781b      	ldrb	r3, [r3, #0]
    8c08:	b25b      	sxtb	r3, r3
    8c0a:	2b00      	cmp	r3, #0
    8c0c:	d013      	beq.n	8c36 <chip_wake+0xf2>
			M2M_ERR("Bus error (5).%d %lx\n",ret,clk_status_reg);
    8c0e:	23aa      	movs	r3, #170	; 0xaa
    8c10:	005a      	lsls	r2, r3, #1
    8c12:	4924      	ldr	r1, [pc, #144]	; (8ca4 <chip_wake+0x160>)
    8c14:	4b24      	ldr	r3, [pc, #144]	; (8ca8 <chip_wake+0x164>)
    8c16:	0018      	movs	r0, r3
    8c18:	4b24      	ldr	r3, [pc, #144]	; (8cac <chip_wake+0x168>)
    8c1a:	4798      	blx	r3
    8c1c:	230f      	movs	r3, #15
    8c1e:	18fb      	adds	r3, r7, r3
    8c20:	2100      	movs	r1, #0
    8c22:	5659      	ldrsb	r1, [r3, r1]
    8c24:	683a      	ldr	r2, [r7, #0]
    8c26:	4b22      	ldr	r3, [pc, #136]	; (8cb0 <chip_wake+0x16c>)
    8c28:	0018      	movs	r0, r3
    8c2a:	4b20      	ldr	r3, [pc, #128]	; (8cac <chip_wake+0x168>)
    8c2c:	4798      	blx	r3
    8c2e:	200d      	movs	r0, #13
    8c30:	4b20      	ldr	r3, [pc, #128]	; (8cb4 <chip_wake+0x170>)
    8c32:	4798      	blx	r3
			goto _WAKE_EXIT;
    8c34:	e02a      	b.n	8c8c <chip_wake+0x148>
		}
		if(clk_status_reg & NBIT2) {
    8c36:	683b      	ldr	r3, [r7, #0]
    8c38:	2204      	movs	r2, #4
    8c3a:	4013      	ands	r3, r2
    8c3c:	d11b      	bne.n	8c76 <chip_wake+0x132>
			break;
		}
		nm_bsp_sleep(2);
    8c3e:	2002      	movs	r0, #2
    8c40:	4b1d      	ldr	r3, [pc, #116]	; (8cb8 <chip_wake+0x174>)
    8c42:	4798      	blx	r3
		trials++;
    8c44:	68bb      	ldr	r3, [r7, #8]
    8c46:	3301      	adds	r3, #1
    8c48:	60bb      	str	r3, [r7, #8]
		if(trials > WAKUP_TRAILS_TIMEOUT)
    8c4a:	68bb      	ldr	r3, [r7, #8]
    8c4c:	2b04      	cmp	r3, #4
    8c4e:	d9cf      	bls.n	8bf0 <chip_wake+0xac>
		{
			M2M_ERR("Failed to wakup the chip\n");
    8c50:	23af      	movs	r3, #175	; 0xaf
    8c52:	005a      	lsls	r2, r3, #1
    8c54:	4913      	ldr	r1, [pc, #76]	; (8ca4 <chip_wake+0x160>)
    8c56:	4b14      	ldr	r3, [pc, #80]	; (8ca8 <chip_wake+0x164>)
    8c58:	0018      	movs	r0, r3
    8c5a:	4b14      	ldr	r3, [pc, #80]	; (8cac <chip_wake+0x168>)
    8c5c:	4798      	blx	r3
    8c5e:	4b17      	ldr	r3, [pc, #92]	; (8cbc <chip_wake+0x178>)
    8c60:	0018      	movs	r0, r3
    8c62:	4b17      	ldr	r3, [pc, #92]	; (8cc0 <chip_wake+0x17c>)
    8c64:	4798      	blx	r3
    8c66:	200d      	movs	r0, #13
    8c68:	4b12      	ldr	r3, [pc, #72]	; (8cb4 <chip_wake+0x170>)
    8c6a:	4798      	blx	r3
			ret = M2M_ERR_TIME_OUT;
    8c6c:	230f      	movs	r3, #15
    8c6e:	18fb      	adds	r3, r7, r3
    8c70:	22fc      	movs	r2, #252	; 0xfc
    8c72:	701a      	strb	r2, [r3, #0]
			goto _WAKE_EXIT;
    8c74:	e00a      	b.n	8c8c <chip_wake+0x148>
			break;
    8c76:	46c0      	nop			; (mov r8, r8)
		}
	}while(1);
	
	/*workaround sometimes spi fail to read clock regs after reading/writing clockless registers*/
	nm_bus_reset();
    8c78:	4b12      	ldr	r3, [pc, #72]	; (8cc4 <chip_wake+0x180>)
    8c7a:	4798      	blx	r3
    8c7c:	e006      	b.n	8c8c <chip_wake+0x148>
	if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
    8c7e:	46c0      	nop			; (mov r8, r8)
    8c80:	e004      	b.n	8c8c <chip_wake+0x148>
		if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
    8c82:	46c0      	nop			; (mov r8, r8)
    8c84:	e002      	b.n	8c8c <chip_wake+0x148>
	if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
    8c86:	46c0      	nop			; (mov r8, r8)
    8c88:	e000      	b.n	8c8c <chip_wake+0x148>
		if(ret != M2M_SUCCESS) goto _WAKE_EXIT;	
    8c8a:	46c0      	nop			; (mov r8, r8)
	
_WAKE_EXIT:
	return ret;
    8c8c:	230f      	movs	r3, #15
    8c8e:	18fb      	adds	r3, r7, r3
    8c90:	781b      	ldrb	r3, [r3, #0]
    8c92:	b25b      	sxtb	r3, r3
}
    8c94:	0018      	movs	r0, r3
    8c96:	46bd      	mov	sp, r7
    8c98:	b005      	add	sp, #20
    8c9a:	bd90      	pop	{r4, r7, pc}
    8c9c:	00009155 	.word	0x00009155
    8ca0:	00009179 	.word	0x00009179
    8ca4:	00020114 	.word	0x00020114
    8ca8:	00020050 	.word	0x00020050
    8cac:	0001c2d5 	.word	0x0001c2d5
    8cb0:	00020064 	.word	0x00020064
    8cb4:	0001c309 	.word	0x0001c309
    8cb8:	00006471 	.word	0x00006471
    8cbc:	0002007c 	.word	0x0002007c
    8cc0:	0001c3f1 	.word	0x0001c3f1
    8cc4:	00009115 	.word	0x00009115

00008cc8 <wait_for_bootrom>:
	nm_bsp_sleep(50);
	return ret;
}

sint8 wait_for_bootrom(uint8 arg)
{
    8cc8:	b580      	push	{r7, lr}
    8cca:	b088      	sub	sp, #32
    8ccc:	af00      	add	r7, sp, #0
    8cce:	0002      	movs	r2, r0
    8cd0:	1dfb      	adds	r3, r7, #7
    8cd2:	701a      	strb	r2, [r3, #0]
	sint8 ret = M2M_SUCCESS;
    8cd4:	2313      	movs	r3, #19
    8cd6:	18fb      	adds	r3, r7, r3
    8cd8:	2200      	movs	r2, #0
    8cda:	701a      	strb	r2, [r3, #0]
	uint32 reg = 0, cnt = 0;
    8cdc:	2300      	movs	r3, #0
    8cde:	61fb      	str	r3, [r7, #28]
    8ce0:	2300      	movs	r3, #0
    8ce2:	61bb      	str	r3, [r7, #24]
	uint32 u32GpReg1 = 0;
    8ce4:	2300      	movs	r3, #0
    8ce6:	617b      	str	r3, [r7, #20]
	uint32 u32DriverVerInfo = M2M_MAKE_VERSION_INFO(M2M_RELEASE_VERSION_MAJOR_NO,\
    8ce8:	4b4a      	ldr	r3, [pc, #296]	; (8e14 <wait_for_bootrom+0x14c>)
    8cea:	60fb      	str	r3, [r7, #12]
				M2M_RELEASE_VERSION_MINOR_NO, M2M_RELEASE_VERSION_PATCH_NO,\
				M2M_RELEASE_VERSION_MAJOR_NO, M2M_RELEASE_VERSION_MINOR_NO,\
				M2M_RELEASE_VERSION_PATCH_NO);


	reg = 0;
    8cec:	2300      	movs	r3, #0
    8cee:	61fb      	str	r3, [r7, #28]
	while(1) {
		reg = nm_read_reg(0x1014);	/* wait for efuse loading done */
    8cf0:	4b49      	ldr	r3, [pc, #292]	; (8e18 <wait_for_bootrom+0x150>)
    8cf2:	0018      	movs	r0, r3
    8cf4:	4b49      	ldr	r3, [pc, #292]	; (8e1c <wait_for_bootrom+0x154>)
    8cf6:	4798      	blx	r3
    8cf8:	0003      	movs	r3, r0
    8cfa:	61fb      	str	r3, [r7, #28]
		if (reg & 0x80000000) {
    8cfc:	69fb      	ldr	r3, [r7, #28]
    8cfe:	2b00      	cmp	r3, #0
    8d00:	db03      	blt.n	8d0a <wait_for_bootrom+0x42>
			break;
		}
		nm_bsp_sleep(1); /* TODO: Why bus error if this delay is not here. */
    8d02:	2001      	movs	r0, #1
    8d04:	4b46      	ldr	r3, [pc, #280]	; (8e20 <wait_for_bootrom+0x158>)
    8d06:	4798      	blx	r3
		reg = nm_read_reg(0x1014);	/* wait for efuse loading done */
    8d08:	e7f2      	b.n	8cf0 <wait_for_bootrom+0x28>
			break;
    8d0a:	46c0      	nop			; (mov r8, r8)
	}
	reg = nm_read_reg(M2M_WAIT_FOR_HOST_REG);
    8d0c:	4b45      	ldr	r3, [pc, #276]	; (8e24 <wait_for_bootrom+0x15c>)
    8d0e:	0018      	movs	r0, r3
    8d10:	4b42      	ldr	r3, [pc, #264]	; (8e1c <wait_for_bootrom+0x154>)
    8d12:	4798      	blx	r3
    8d14:	0003      	movs	r3, r0
    8d16:	61fb      	str	r3, [r7, #28]
	reg &= 0x1;
    8d18:	69fb      	ldr	r3, [r7, #28]
    8d1a:	2201      	movs	r2, #1
    8d1c:	4013      	ands	r3, r2
    8d1e:	61fb      	str	r3, [r7, #28]

	/* check if waiting for the host will be skipped or not */
	if(reg == 0)
    8d20:	69fb      	ldr	r3, [r7, #28]
    8d22:	2b00      	cmp	r3, #0
    8d24:	d112      	bne.n	8d4c <wait_for_bootrom+0x84>
	{
		reg = 0;
    8d26:	2300      	movs	r3, #0
    8d28:	61fb      	str	r3, [r7, #28]
		while(reg != M2M_FINISH_BOOT_ROM)
    8d2a:	e00b      	b.n	8d44 <wait_for_bootrom+0x7c>
		{
			nm_bsp_sleep(1);
    8d2c:	2001      	movs	r0, #1
    8d2e:	4b3c      	ldr	r3, [pc, #240]	; (8e20 <wait_for_bootrom+0x158>)
    8d30:	4798      	blx	r3
			reg = nm_read_reg(BOOTROM_REG);
    8d32:	4b3d      	ldr	r3, [pc, #244]	; (8e28 <wait_for_bootrom+0x160>)
    8d34:	0018      	movs	r0, r3
    8d36:	4b39      	ldr	r3, [pc, #228]	; (8e1c <wait_for_bootrom+0x154>)
    8d38:	4798      	blx	r3
    8d3a:	0003      	movs	r3, r0
    8d3c:	61fb      	str	r3, [r7, #28]

			if(++cnt > TIMEOUT)
    8d3e:	69bb      	ldr	r3, [r7, #24]
    8d40:	3301      	adds	r3, #1
    8d42:	61bb      	str	r3, [r7, #24]
		while(reg != M2M_FINISH_BOOT_ROM)
    8d44:	69fb      	ldr	r3, [r7, #28]
    8d46:	4a39      	ldr	r2, [pc, #228]	; (8e2c <wait_for_bootrom+0x164>)
    8d48:	4293      	cmp	r3, r2
    8d4a:	d1ef      	bne.n	8d2c <wait_for_bootrom+0x64>
				goto ERR2;
			}
		}
	}
	
	if(M2M_WIFI_MODE_ATE_HIGH == arg) {
    8d4c:	1dfb      	adds	r3, r7, #7
    8d4e:	781b      	ldrb	r3, [r3, #0]
    8d50:	2b02      	cmp	r3, #2
    8d52:	d10d      	bne.n	8d70 <wait_for_bootrom+0xa8>
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
    8d54:	4a36      	ldr	r2, [pc, #216]	; (8e30 <wait_for_bootrom+0x168>)
    8d56:	4b37      	ldr	r3, [pc, #220]	; (8e34 <wait_for_bootrom+0x16c>)
    8d58:	0011      	movs	r1, r2
    8d5a:	0018      	movs	r0, r3
    8d5c:	4b36      	ldr	r3, [pc, #216]	; (8e38 <wait_for_bootrom+0x170>)
    8d5e:	4798      	blx	r3
		nm_write_reg(NMI_STATE_REG, NBIT20);
    8d60:	2380      	movs	r3, #128	; 0x80
    8d62:	035b      	lsls	r3, r3, #13
    8d64:	4a35      	ldr	r2, [pc, #212]	; (8e3c <wait_for_bootrom+0x174>)
    8d66:	0019      	movs	r1, r3
    8d68:	0010      	movs	r0, r2
    8d6a:	4b33      	ldr	r3, [pc, #204]	; (8e38 <wait_for_bootrom+0x170>)
    8d6c:	4798      	blx	r3
    8d6e:	e022      	b.n	8db6 <wait_for_bootrom+0xee>
	}else if(M2M_WIFI_MODE_ATE_LOW == arg) {
    8d70:	1dfb      	adds	r3, r7, #7
    8d72:	781b      	ldrb	r3, [r3, #0]
    8d74:	2b03      	cmp	r3, #3
    8d76:	d10b      	bne.n	8d90 <wait_for_bootrom+0xc8>
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
    8d78:	4a2d      	ldr	r2, [pc, #180]	; (8e30 <wait_for_bootrom+0x168>)
    8d7a:	4b2e      	ldr	r3, [pc, #184]	; (8e34 <wait_for_bootrom+0x16c>)
    8d7c:	0011      	movs	r1, r2
    8d7e:	0018      	movs	r0, r3
    8d80:	4b2d      	ldr	r3, [pc, #180]	; (8e38 <wait_for_bootrom+0x170>)
    8d82:	4798      	blx	r3
		nm_write_reg(NMI_STATE_REG, 0);
    8d84:	4b2d      	ldr	r3, [pc, #180]	; (8e3c <wait_for_bootrom+0x174>)
    8d86:	2100      	movs	r1, #0
    8d88:	0018      	movs	r0, r3
    8d8a:	4b2b      	ldr	r3, [pc, #172]	; (8e38 <wait_for_bootrom+0x170>)
    8d8c:	4798      	blx	r3
    8d8e:	e012      	b.n	8db6 <wait_for_bootrom+0xee>
	}else if(M2M_WIFI_MODE_ETHERNET == arg){
    8d90:	1dfb      	adds	r3, r7, #7
    8d92:	781b      	ldrb	r3, [r3, #0]
    8d94:	2b04      	cmp	r3, #4
    8d96:	d108      	bne.n	8daa <wait_for_bootrom+0xe2>
		u32GpReg1 = rHAVE_ETHERNET_MODE_BIT;
    8d98:	2380      	movs	r3, #128	; 0x80
    8d9a:	617b      	str	r3, [r7, #20]
		nm_write_reg(NMI_STATE_REG, u32DriverVerInfo);
    8d9c:	68fb      	ldr	r3, [r7, #12]
    8d9e:	4a27      	ldr	r2, [pc, #156]	; (8e3c <wait_for_bootrom+0x174>)
    8da0:	0019      	movs	r1, r3
    8da2:	0010      	movs	r0, r2
    8da4:	4b24      	ldr	r3, [pc, #144]	; (8e38 <wait_for_bootrom+0x170>)
    8da6:	4798      	blx	r3
    8da8:	e005      	b.n	8db6 <wait_for_bootrom+0xee>
	} else {
		/*bypass this step*/
		nm_write_reg(NMI_STATE_REG, u32DriverVerInfo);
    8daa:	68fb      	ldr	r3, [r7, #12]
    8dac:	4a23      	ldr	r2, [pc, #140]	; (8e3c <wait_for_bootrom+0x174>)
    8dae:	0019      	movs	r1, r3
    8db0:	0010      	movs	r0, r2
    8db2:	4b21      	ldr	r3, [pc, #132]	; (8e38 <wait_for_bootrom+0x170>)
    8db4:	4798      	blx	r3
	}

	if(REV(nmi_get_chipid()) >= REV_3A0){
    8db6:	4b22      	ldr	r3, [pc, #136]	; (8e40 <wait_for_bootrom+0x178>)
    8db8:	4798      	blx	r3
    8dba:	0003      	movs	r3, r0
    8dbc:	051b      	lsls	r3, r3, #20
    8dbe:	0d1b      	lsrs	r3, r3, #20
    8dc0:	4a20      	ldr	r2, [pc, #128]	; (8e44 <wait_for_bootrom+0x17c>)
    8dc2:	4293      	cmp	r3, r2
    8dc4:	d906      	bls.n	8dd4 <wait_for_bootrom+0x10c>
		chip_apply_conf(u32GpReg1 | rHAVE_USE_PMU_BIT);
    8dc6:	697b      	ldr	r3, [r7, #20]
    8dc8:	2202      	movs	r2, #2
    8dca:	4313      	orrs	r3, r2
    8dcc:	0018      	movs	r0, r3
    8dce:	4b1e      	ldr	r3, [pc, #120]	; (8e48 <wait_for_bootrom+0x180>)
    8dd0:	4798      	blx	r3
    8dd2:	e003      	b.n	8ddc <wait_for_bootrom+0x114>
	} else {
		chip_apply_conf(u32GpReg1);
    8dd4:	697b      	ldr	r3, [r7, #20]
    8dd6:	0018      	movs	r0, r3
    8dd8:	4b1b      	ldr	r3, [pc, #108]	; (8e48 <wait_for_bootrom+0x180>)
    8dda:	4798      	blx	r3
	}
	M2M_INFO("DriverVerInfo: 0x%08lx\n",u32DriverVerInfo);
    8ddc:	4b1b      	ldr	r3, [pc, #108]	; (8e4c <wait_for_bootrom+0x184>)
    8dde:	0018      	movs	r0, r3
    8de0:	4b1b      	ldr	r3, [pc, #108]	; (8e50 <wait_for_bootrom+0x188>)
    8de2:	4798      	blx	r3
    8de4:	68fa      	ldr	r2, [r7, #12]
    8de6:	4b1b      	ldr	r3, [pc, #108]	; (8e54 <wait_for_bootrom+0x18c>)
    8de8:	0011      	movs	r1, r2
    8dea:	0018      	movs	r0, r3
    8dec:	4b18      	ldr	r3, [pc, #96]	; (8e50 <wait_for_bootrom+0x188>)
    8dee:	4798      	blx	r3
    8df0:	200d      	movs	r0, #13
    8df2:	4b19      	ldr	r3, [pc, #100]	; (8e58 <wait_for_bootrom+0x190>)
    8df4:	4798      	blx	r3

	nm_write_reg(BOOTROM_REG,M2M_START_FIRMWARE);
    8df6:	4a19      	ldr	r2, [pc, #100]	; (8e5c <wait_for_bootrom+0x194>)
    8df8:	4b0b      	ldr	r3, [pc, #44]	; (8e28 <wait_for_bootrom+0x160>)
    8dfa:	0011      	movs	r1, r2
    8dfc:	0018      	movs	r0, r3
    8dfe:	4b0e      	ldr	r3, [pc, #56]	; (8e38 <wait_for_bootrom+0x170>)
    8e00:	4798      	blx	r3
#ifdef __ROM_TEST__
	rom_test();
#endif /* __ROM_TEST__ */

ERR2:
	return ret;
    8e02:	2313      	movs	r3, #19
    8e04:	18fb      	adds	r3, r7, r3
    8e06:	781b      	ldrb	r3, [r3, #0]
    8e08:	b25b      	sxtb	r3, r3
}
    8e0a:	0018      	movs	r0, r3
    8e0c:	46bd      	mov	sp, r7
    8e0e:	b008      	add	sp, #32
    8e10:	bd80      	pop	{r7, pc}
    8e12:	46c0      	nop			; (mov r8, r8)
    8e14:	13521352 	.word	0x13521352
    8e18:	00001014 	.word	0x00001014
    8e1c:	00009135 	.word	0x00009135
    8e20:	00006471 	.word	0x00006471
    8e24:	000207bc 	.word	0x000207bc
    8e28:	000c000c 	.word	0x000c000c
    8e2c:	10add09e 	.word	0x10add09e
    8e30:	3c1cd57d 	.word	0x3c1cd57d
    8e34:	000207ac 	.word	0x000207ac
    8e38:	00009179 	.word	0x00009179
    8e3c:	0000108c 	.word	0x0000108c
    8e40:	00008975 	.word	0x00008975
    8e44:	0000039f 	.word	0x0000039f
    8e48:	00008845 	.word	0x00008845
    8e4c:	00020098 	.word	0x00020098
    8e50:	0001c2d5 	.word	0x0001c2d5
    8e54:	000200a4 	.word	0x000200a4
    8e58:	0001c309 	.word	0x0001c309
    8e5c:	ef522f61 	.word	0xef522f61

00008e60 <wait_for_firmware_start>:

sint8 wait_for_firmware_start(uint8 arg)
{
    8e60:	b580      	push	{r7, lr}
    8e62:	b088      	sub	sp, #32
    8e64:	af00      	add	r7, sp, #0
    8e66:	0002      	movs	r2, r0
    8e68:	1dfb      	adds	r3, r7, #7
    8e6a:	701a      	strb	r2, [r3, #0]
	sint8 ret = M2M_SUCCESS;
    8e6c:	231f      	movs	r3, #31
    8e6e:	18fb      	adds	r3, r7, r3
    8e70:	2200      	movs	r2, #0
    8e72:	701a      	strb	r2, [r3, #0]
	uint32 reg = 0, cnt = 0;
    8e74:	2300      	movs	r3, #0
    8e76:	61bb      	str	r3, [r7, #24]
    8e78:	2300      	movs	r3, #0
    8e7a:	617b      	str	r3, [r7, #20]
	uint32 u32Timeout = TIMEOUT;
    8e7c:	2301      	movs	r3, #1
    8e7e:	425b      	negs	r3, r3
    8e80:	613b      	str	r3, [r7, #16]
	volatile uint32 regAddress = NMI_STATE_REG;
    8e82:	4b1d      	ldr	r3, [pc, #116]	; (8ef8 <wait_for_firmware_start+0x98>)
    8e84:	60fb      	str	r3, [r7, #12]
	volatile uint32 checkValue = M2M_FINISH_INIT_STATE;
    8e86:	4b1d      	ldr	r3, [pc, #116]	; (8efc <wait_for_firmware_start+0x9c>)
    8e88:	60bb      	str	r3, [r7, #8]
	
	if((M2M_WIFI_MODE_ATE_HIGH == arg)||(M2M_WIFI_MODE_ATE_LOW == arg)) {
    8e8a:	1dfb      	adds	r3, r7, #7
    8e8c:	781b      	ldrb	r3, [r3, #0]
    8e8e:	2b02      	cmp	r3, #2
    8e90:	d003      	beq.n	8e9a <wait_for_firmware_start+0x3a>
    8e92:	1dfb      	adds	r3, r7, #7
    8e94:	781b      	ldrb	r3, [r3, #0]
    8e96:	2b03      	cmp	r3, #3
    8e98:	d119      	bne.n	8ece <wait_for_firmware_start+0x6e>
		regAddress = NMI_REV_REG;
    8e9a:	4b19      	ldr	r3, [pc, #100]	; (8f00 <wait_for_firmware_start+0xa0>)
    8e9c:	60fb      	str	r3, [r7, #12]
		checkValue = M2M_ATE_FW_IS_UP_VALUE;
    8e9e:	4b19      	ldr	r3, [pc, #100]	; (8f04 <wait_for_firmware_start+0xa4>)
    8ea0:	60bb      	str	r3, [r7, #8]
	} else {
		/*bypass this step*/
	}
	
	
	while (checkValue != reg)
    8ea2:	e014      	b.n	8ece <wait_for_firmware_start+0x6e>
	{
		nm_bsp_sleep(2); /* TODO: Why bus error if this delay is not here. */
    8ea4:	2002      	movs	r0, #2
    8ea6:	4b18      	ldr	r3, [pc, #96]	; (8f08 <wait_for_firmware_start+0xa8>)
    8ea8:	4798      	blx	r3
		M2M_DBG("%x %x %x\n",(unsigned int)nm_read_reg(0x108c),(unsigned int)nm_read_reg(0x108c),(unsigned int)nm_read_reg(0x14A0));
		reg = nm_read_reg(regAddress);
    8eaa:	68fb      	ldr	r3, [r7, #12]
    8eac:	0018      	movs	r0, r3
    8eae:	4b17      	ldr	r3, [pc, #92]	; (8f0c <wait_for_firmware_start+0xac>)
    8eb0:	4798      	blx	r3
    8eb2:	0003      	movs	r3, r0
    8eb4:	61bb      	str	r3, [r7, #24]
		if(++cnt >= u32Timeout)
    8eb6:	697b      	ldr	r3, [r7, #20]
    8eb8:	3301      	adds	r3, #1
    8eba:	617b      	str	r3, [r7, #20]
    8ebc:	697a      	ldr	r2, [r7, #20]
    8ebe:	693b      	ldr	r3, [r7, #16]
    8ec0:	429a      	cmp	r2, r3
    8ec2:	d304      	bcc.n	8ece <wait_for_firmware_start+0x6e>
		{
			M2M_DBG("Time out for wait firmware Run\n");
			ret = M2M_ERR_INIT;
    8ec4:	231f      	movs	r3, #31
    8ec6:	18fb      	adds	r3, r7, r3
    8ec8:	22fb      	movs	r2, #251	; 0xfb
    8eca:	701a      	strb	r2, [r3, #0]
			goto ERR;
    8ecc:	e00c      	b.n	8ee8 <wait_for_firmware_start+0x88>
	while (checkValue != reg)
    8ece:	68ba      	ldr	r2, [r7, #8]
    8ed0:	69bb      	ldr	r3, [r7, #24]
    8ed2:	429a      	cmp	r2, r3
    8ed4:	d1e6      	bne.n	8ea4 <wait_for_firmware_start+0x44>
		}
	}
	if(M2M_FINISH_INIT_STATE == checkValue)
    8ed6:	68bb      	ldr	r3, [r7, #8]
    8ed8:	4a08      	ldr	r2, [pc, #32]	; (8efc <wait_for_firmware_start+0x9c>)
    8eda:	4293      	cmp	r3, r2
    8edc:	d104      	bne.n	8ee8 <wait_for_firmware_start+0x88>
	{
		nm_write_reg(NMI_STATE_REG, 0);
    8ede:	4b06      	ldr	r3, [pc, #24]	; (8ef8 <wait_for_firmware_start+0x98>)
    8ee0:	2100      	movs	r1, #0
    8ee2:	0018      	movs	r0, r3
    8ee4:	4b0a      	ldr	r3, [pc, #40]	; (8f10 <wait_for_firmware_start+0xb0>)
    8ee6:	4798      	blx	r3
	}
ERR:
	return ret;
    8ee8:	231f      	movs	r3, #31
    8eea:	18fb      	adds	r3, r7, r3
    8eec:	781b      	ldrb	r3, [r3, #0]
    8eee:	b25b      	sxtb	r3, r3
}
    8ef0:	0018      	movs	r0, r3
    8ef2:	46bd      	mov	sp, r7
    8ef4:	b008      	add	sp, #32
    8ef6:	bd80      	pop	{r7, pc}
    8ef8:	0000108c 	.word	0x0000108c
    8efc:	02532636 	.word	0x02532636
    8f00:	000207ac 	.word	0x000207ac
    8f04:	d75dc1c3 	.word	0xd75dc1c3
    8f08:	00006471 	.word	0x00006471
    8f0c:	00009135 	.word	0x00009135
    8f10:	00009179 	.word	0x00009179

00008f14 <chip_deinit>:

sint8 chip_deinit(void)
{
    8f14:	b590      	push	{r4, r7, lr}
    8f16:	b083      	sub	sp, #12
    8f18:	af00      	add	r7, sp, #0
	uint32 reg = 0;
    8f1a:	2300      	movs	r3, #0
    8f1c:	603b      	str	r3, [r7, #0]
	sint8 ret;

	/**
	stop the firmware, need a re-download
	**/
	ret = nm_read_reg_with_ret(NMI_GLB_RESET_0, &reg);
    8f1e:	1dfc      	adds	r4, r7, #7
    8f20:	003a      	movs	r2, r7
    8f22:	23a0      	movs	r3, #160	; 0xa0
    8f24:	015b      	lsls	r3, r3, #5
    8f26:	0011      	movs	r1, r2
    8f28:	0018      	movs	r0, r3
    8f2a:	4b1f      	ldr	r3, [pc, #124]	; (8fa8 <chip_deinit+0x94>)
    8f2c:	4798      	blx	r3
    8f2e:	0003      	movs	r3, r0
    8f30:	7023      	strb	r3, [r4, #0]
	if (ret != M2M_SUCCESS) {
    8f32:	1dfb      	adds	r3, r7, #7
    8f34:	781b      	ldrb	r3, [r3, #0]
    8f36:	b25b      	sxtb	r3, r3
    8f38:	2b00      	cmp	r3, #0
    8f3a:	d00d      	beq.n	8f58 <chip_deinit+0x44>
		M2M_ERR("failed to de-initialize\n");
    8f3c:	4a1b      	ldr	r2, [pc, #108]	; (8fac <chip_deinit+0x98>)
    8f3e:	491c      	ldr	r1, [pc, #112]	; (8fb0 <chip_deinit+0x9c>)
    8f40:	4b1c      	ldr	r3, [pc, #112]	; (8fb4 <chip_deinit+0xa0>)
    8f42:	0018      	movs	r0, r3
    8f44:	4b1c      	ldr	r3, [pc, #112]	; (8fb8 <chip_deinit+0xa4>)
    8f46:	4798      	blx	r3
    8f48:	4b1c      	ldr	r3, [pc, #112]	; (8fbc <chip_deinit+0xa8>)
    8f4a:	0018      	movs	r0, r3
    8f4c:	4b1c      	ldr	r3, [pc, #112]	; (8fc0 <chip_deinit+0xac>)
    8f4e:	4798      	blx	r3
    8f50:	200d      	movs	r0, #13
    8f52:	4b1c      	ldr	r3, [pc, #112]	; (8fc4 <chip_deinit+0xb0>)
    8f54:	4798      	blx	r3
		goto ERR1;
    8f56:	e020      	b.n	8f9a <chip_deinit+0x86>
	}
	reg &= ~(1 << 10);
    8f58:	683b      	ldr	r3, [r7, #0]
    8f5a:	4a1b      	ldr	r2, [pc, #108]	; (8fc8 <chip_deinit+0xb4>)
    8f5c:	4013      	ands	r3, r2
    8f5e:	603b      	str	r3, [r7, #0]
	ret = nm_write_reg(NMI_GLB_RESET_0, reg);
    8f60:	683a      	ldr	r2, [r7, #0]
    8f62:	1dfc      	adds	r4, r7, #7
    8f64:	23a0      	movs	r3, #160	; 0xa0
    8f66:	015b      	lsls	r3, r3, #5
    8f68:	0011      	movs	r1, r2
    8f6a:	0018      	movs	r0, r3
    8f6c:	4b17      	ldr	r3, [pc, #92]	; (8fcc <chip_deinit+0xb8>)
    8f6e:	4798      	blx	r3
    8f70:	0003      	movs	r3, r0
    8f72:	7023      	strb	r3, [r4, #0]
	if (ret != M2M_SUCCESS) {
    8f74:	1dfb      	adds	r3, r7, #7
    8f76:	781b      	ldrb	r3, [r3, #0]
    8f78:	b25b      	sxtb	r3, r3
    8f7a:	2b00      	cmp	r3, #0
    8f7c:	d00d      	beq.n	8f9a <chip_deinit+0x86>
		M2M_ERR("failed to de-initialize\n");
    8f7e:	4a14      	ldr	r2, [pc, #80]	; (8fd0 <chip_deinit+0xbc>)
    8f80:	490b      	ldr	r1, [pc, #44]	; (8fb0 <chip_deinit+0x9c>)
    8f82:	4b0c      	ldr	r3, [pc, #48]	; (8fb4 <chip_deinit+0xa0>)
    8f84:	0018      	movs	r0, r3
    8f86:	4b0c      	ldr	r3, [pc, #48]	; (8fb8 <chip_deinit+0xa4>)
    8f88:	4798      	blx	r3
    8f8a:	4b0c      	ldr	r3, [pc, #48]	; (8fbc <chip_deinit+0xa8>)
    8f8c:	0018      	movs	r0, r3
    8f8e:	4b0c      	ldr	r3, [pc, #48]	; (8fc0 <chip_deinit+0xac>)
    8f90:	4798      	blx	r3
    8f92:	200d      	movs	r0, #13
    8f94:	4b0b      	ldr	r3, [pc, #44]	; (8fc4 <chip_deinit+0xb0>)
    8f96:	4798      	blx	r3
		goto ERR1;
    8f98:	46c0      	nop			; (mov r8, r8)
	}

ERR1:
	return ret;
    8f9a:	1dfb      	adds	r3, r7, #7
    8f9c:	781b      	ldrb	r3, [r3, #0]
    8f9e:	b25b      	sxtb	r3, r3
}
    8fa0:	0018      	movs	r0, r3
    8fa2:	46bd      	mov	sp, r7
    8fa4:	b003      	add	sp, #12
    8fa6:	bd90      	pop	{r4, r7, pc}
    8fa8:	00009155 	.word	0x00009155
    8fac:	00000205 	.word	0x00000205
    8fb0:	00020120 	.word	0x00020120
    8fb4:	00020050 	.word	0x00020050
    8fb8:	0001c2d5 	.word	0x0001c2d5
    8fbc:	000200bc 	.word	0x000200bc
    8fc0:	0001c3f1 	.word	0x0001c3f1
    8fc4:	0001c309 	.word	0x0001c309
    8fc8:	fffffbff 	.word	0xfffffbff
    8fcc:	00009179 	.word	0x00009179
    8fd0:	0000020b 	.word	0x0000020b

00008fd4 <pullup_ctrl>:
_EXIT:
	return ret;
}

sint8 pullup_ctrl(uint32 pinmask, uint8 enable)
{
    8fd4:	b590      	push	{r4, r7, lr}
    8fd6:	b085      	sub	sp, #20
    8fd8:	af00      	add	r7, sp, #0
    8fda:	6078      	str	r0, [r7, #4]
    8fdc:	000a      	movs	r2, r1
    8fde:	1cfb      	adds	r3, r7, #3
    8fe0:	701a      	strb	r2, [r3, #0]
	sint8 s8Ret;
	uint32 val32;
	s8Ret = nm_read_reg_with_ret(0x142c, &val32);
    8fe2:	230f      	movs	r3, #15
    8fe4:	18fc      	adds	r4, r7, r3
    8fe6:	2308      	movs	r3, #8
    8fe8:	18fb      	adds	r3, r7, r3
    8fea:	4a28      	ldr	r2, [pc, #160]	; (908c <pullup_ctrl+0xb8>)
    8fec:	0019      	movs	r1, r3
    8fee:	0010      	movs	r0, r2
    8ff0:	4b27      	ldr	r3, [pc, #156]	; (9090 <pullup_ctrl+0xbc>)
    8ff2:	4798      	blx	r3
    8ff4:	0003      	movs	r3, r0
    8ff6:	7023      	strb	r3, [r4, #0]
	if(s8Ret != M2M_SUCCESS) {
    8ff8:	230f      	movs	r3, #15
    8ffa:	18fb      	adds	r3, r7, r3
    8ffc:	781b      	ldrb	r3, [r3, #0]
    8ffe:	b25b      	sxtb	r3, r3
    9000:	2b00      	cmp	r3, #0
    9002:	d00e      	beq.n	9022 <pullup_ctrl+0x4e>
		M2M_ERR("[pullup_ctrl]: failed to read\n");
    9004:	2394      	movs	r3, #148	; 0x94
    9006:	009a      	lsls	r2, r3, #2
    9008:	4922      	ldr	r1, [pc, #136]	; (9094 <pullup_ctrl+0xc0>)
    900a:	4b23      	ldr	r3, [pc, #140]	; (9098 <pullup_ctrl+0xc4>)
    900c:	0018      	movs	r0, r3
    900e:	4b23      	ldr	r3, [pc, #140]	; (909c <pullup_ctrl+0xc8>)
    9010:	4798      	blx	r3
    9012:	4b23      	ldr	r3, [pc, #140]	; (90a0 <pullup_ctrl+0xcc>)
    9014:	0018      	movs	r0, r3
    9016:	4b23      	ldr	r3, [pc, #140]	; (90a4 <pullup_ctrl+0xd0>)
    9018:	4798      	blx	r3
    901a:	200d      	movs	r0, #13
    901c:	4b22      	ldr	r3, [pc, #136]	; (90a8 <pullup_ctrl+0xd4>)
    901e:	4798      	blx	r3
		goto _EXIT;
    9020:	e02b      	b.n	907a <pullup_ctrl+0xa6>
	}
	if(enable) {
    9022:	1cfb      	adds	r3, r7, #3
    9024:	781b      	ldrb	r3, [r3, #0]
    9026:	2b00      	cmp	r3, #0
    9028:	d005      	beq.n	9036 <pullup_ctrl+0x62>
		val32 &= ~pinmask;
    902a:	687b      	ldr	r3, [r7, #4]
    902c:	43db      	mvns	r3, r3
    902e:	68ba      	ldr	r2, [r7, #8]
    9030:	4013      	ands	r3, r2
    9032:	60bb      	str	r3, [r7, #8]
    9034:	e003      	b.n	903e <pullup_ctrl+0x6a>
		} else {
		val32 |= pinmask;
    9036:	68ba      	ldr	r2, [r7, #8]
    9038:	687b      	ldr	r3, [r7, #4]
    903a:	4313      	orrs	r3, r2
    903c:	60bb      	str	r3, [r7, #8]
	}
	s8Ret = nm_write_reg(0x142c, val32);
    903e:	68bb      	ldr	r3, [r7, #8]
    9040:	220f      	movs	r2, #15
    9042:	18bc      	adds	r4, r7, r2
    9044:	4a11      	ldr	r2, [pc, #68]	; (908c <pullup_ctrl+0xb8>)
    9046:	0019      	movs	r1, r3
    9048:	0010      	movs	r0, r2
    904a:	4b18      	ldr	r3, [pc, #96]	; (90ac <pullup_ctrl+0xd8>)
    904c:	4798      	blx	r3
    904e:	0003      	movs	r3, r0
    9050:	7023      	strb	r3, [r4, #0]
	if(s8Ret  != M2M_SUCCESS) {
    9052:	230f      	movs	r3, #15
    9054:	18fb      	adds	r3, r7, r3
    9056:	781b      	ldrb	r3, [r3, #0]
    9058:	b25b      	sxtb	r3, r3
    905a:	2b00      	cmp	r3, #0
    905c:	d00d      	beq.n	907a <pullup_ctrl+0xa6>
		M2M_ERR("[pullup_ctrl]: failed to write\n");
    905e:	4a14      	ldr	r2, [pc, #80]	; (90b0 <pullup_ctrl+0xdc>)
    9060:	490c      	ldr	r1, [pc, #48]	; (9094 <pullup_ctrl+0xc0>)
    9062:	4b0d      	ldr	r3, [pc, #52]	; (9098 <pullup_ctrl+0xc4>)
    9064:	0018      	movs	r0, r3
    9066:	4b0d      	ldr	r3, [pc, #52]	; (909c <pullup_ctrl+0xc8>)
    9068:	4798      	blx	r3
    906a:	4b12      	ldr	r3, [pc, #72]	; (90b4 <pullup_ctrl+0xe0>)
    906c:	0018      	movs	r0, r3
    906e:	4b0d      	ldr	r3, [pc, #52]	; (90a4 <pullup_ctrl+0xd0>)
    9070:	4798      	blx	r3
    9072:	200d      	movs	r0, #13
    9074:	4b0c      	ldr	r3, [pc, #48]	; (90a8 <pullup_ctrl+0xd4>)
    9076:	4798      	blx	r3
		goto _EXIT;
    9078:	46c0      	nop			; (mov r8, r8)
	}
_EXIT:
	return s8Ret;
    907a:	230f      	movs	r3, #15
    907c:	18fb      	adds	r3, r7, r3
    907e:	781b      	ldrb	r3, [r3, #0]
    9080:	b25b      	sxtb	r3, r3
}
    9082:	0018      	movs	r0, r3
    9084:	46bd      	mov	sp, r7
    9086:	b005      	add	sp, #20
    9088:	bd90      	pop	{r4, r7, pc}
    908a:	46c0      	nop			; (mov r8, r8)
    908c:	0000142c 	.word	0x0000142c
    9090:	00009155 	.word	0x00009155
    9094:	0002012c 	.word	0x0002012c
    9098:	00020050 	.word	0x00020050
    909c:	0001c2d5 	.word	0x0001c2d5
    90a0:	000200d4 	.word	0x000200d4
    90a4:	0001c3f1 	.word	0x0001c3f1
    90a8:	0001c309 	.word	0x0001c309
    90ac:	00009179 	.word	0x00009179
    90b0:	0000025a 	.word	0x0000025a
    90b4:	000200f4 	.word	0x000200f4

000090b8 <nm_bus_iface_init>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_bus_iface_init(void *pvInitVal)
{
    90b8:	b590      	push	{r4, r7, lr}
    90ba:	b085      	sub	sp, #20
    90bc:	af00      	add	r7, sp, #0
    90be:	6078      	str	r0, [r7, #4]
	sint8 ret = M2M_SUCCESS;
    90c0:	230f      	movs	r3, #15
    90c2:	18fb      	adds	r3, r7, r3
    90c4:	2200      	movs	r2, #0
    90c6:	701a      	strb	r2, [r3, #0]
	ret = nm_bus_init(pvInitVal);
    90c8:	230f      	movs	r3, #15
    90ca:	18fc      	adds	r4, r7, r3
    90cc:	687b      	ldr	r3, [r7, #4]
    90ce:	0018      	movs	r0, r3
    90d0:	4b05      	ldr	r3, [pc, #20]	; (90e8 <nm_bus_iface_init+0x30>)
    90d2:	4798      	blx	r3
    90d4:	0003      	movs	r3, r0
    90d6:	7023      	strb	r3, [r4, #0]
	return ret;
    90d8:	230f      	movs	r3, #15
    90da:	18fb      	adds	r3, r7, r3
    90dc:	781b      	ldrb	r3, [r3, #0]
    90de:	b25b      	sxtb	r3, r3
}
    90e0:	0018      	movs	r0, r3
    90e2:	46bd      	mov	sp, r7
    90e4:	b005      	add	sp, #20
    90e6:	bd90      	pop	{r4, r7, pc}
    90e8:	00006b39 	.word	0x00006b39

000090ec <nm_bus_iface_deinit>:
*	@author	Samer Sarhan
*	@date	07 April 2014
*	@version	1.0
*/
sint8 nm_bus_iface_deinit(void)
{
    90ec:	b590      	push	{r4, r7, lr}
    90ee:	b083      	sub	sp, #12
    90f0:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;
    90f2:	1dfb      	adds	r3, r7, #7
    90f4:	2200      	movs	r2, #0
    90f6:	701a      	strb	r2, [r3, #0]
	ret = nm_bus_deinit();
    90f8:	1dfc      	adds	r4, r7, #7
    90fa:	4b05      	ldr	r3, [pc, #20]	; (9110 <nm_bus_iface_deinit+0x24>)
    90fc:	4798      	blx	r3
    90fe:	0003      	movs	r3, r0
    9100:	7023      	strb	r3, [r4, #0]

	return ret;
    9102:	1dfb      	adds	r3, r7, #7
    9104:	781b      	ldrb	r3, [r3, #0]
    9106:	b25b      	sxtb	r3, r3
}
    9108:	0018      	movs	r0, r3
    910a:	46bd      	mov	sp, r7
    910c:	b003      	add	sp, #12
    910e:	bd90      	pop	{r4, r7, pc}
    9110:	00006cb5 	.word	0x00006cb5

00009114 <nm_bus_reset>:
*	@brief	reset bus interface
*	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
*	@version	1.0
*/
sint8 nm_bus_reset(void)
{
    9114:	b580      	push	{r7, lr}
    9116:	b082      	sub	sp, #8
    9118:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;
    911a:	1dfb      	adds	r3, r7, #7
    911c:	2200      	movs	r2, #0
    911e:	701a      	strb	r2, [r3, #0]
#ifdef CONF_WINC_USE_UART
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_reset();
    9120:	4b03      	ldr	r3, [pc, #12]	; (9130 <nm_bus_reset+0x1c>)
    9122:	4798      	blx	r3
    9124:	0003      	movs	r3, r0
#else
#error "Plesae define bus usage"
#endif

	return ret;
}
    9126:	0018      	movs	r0, r3
    9128:	46bd      	mov	sp, r7
    912a:	b002      	add	sp, #8
    912c:	bd80      	pop	{r7, pc}
    912e:	46c0      	nop			; (mov r8, r8)
    9130:	0000aa11 	.word	0x0000aa11

00009134 <nm_read_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
uint32 nm_read_reg(uint32 u32Addr)
{
    9134:	b580      	push	{r7, lr}
    9136:	b082      	sub	sp, #8
    9138:	af00      	add	r7, sp, #0
    913a:	6078      	str	r0, [r7, #4]
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_reg(u32Addr);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_reg(u32Addr);
    913c:	687b      	ldr	r3, [r7, #4]
    913e:	0018      	movs	r0, r3
    9140:	4b03      	ldr	r3, [pc, #12]	; (9150 <nm_read_reg+0x1c>)
    9142:	4798      	blx	r3
    9144:	0003      	movs	r3, r0
	return nm_i2c_read_reg(u32Addr);
#else
#error "Plesae define bus usage"
#endif

}
    9146:	0018      	movs	r0, r3
    9148:	46bd      	mov	sp, r7
    914a:	b002      	add	sp, #8
    914c:	bd80      	pop	{r7, pc}
    914e:	46c0      	nop			; (mov r8, r8)
    9150:	0000aba5 	.word	0x0000aba5

00009154 <nm_read_reg_with_ret>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_read_reg_with_ret(uint32 u32Addr, uint32* pu32RetVal)
{
    9154:	b580      	push	{r7, lr}
    9156:	b082      	sub	sp, #8
    9158:	af00      	add	r7, sp, #0
    915a:	6078      	str	r0, [r7, #4]
    915c:	6039      	str	r1, [r7, #0]
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_reg_with_ret(u32Addr,pu32RetVal);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_reg_with_ret(u32Addr,pu32RetVal);
    915e:	683a      	ldr	r2, [r7, #0]
    9160:	687b      	ldr	r3, [r7, #4]
    9162:	0011      	movs	r1, r2
    9164:	0018      	movs	r0, r3
    9166:	4b03      	ldr	r3, [pc, #12]	; (9174 <nm_read_reg_with_ret+0x20>)
    9168:	4798      	blx	r3
    916a:	0003      	movs	r3, r0
#elif defined (CONF_WINC_USE_I2C)
	return nm_i2c_read_reg_with_ret(u32Addr,pu32RetVal);
#else
#error "Plesae define bus usage"
#endif
}
    916c:	0018      	movs	r0, r3
    916e:	46bd      	mov	sp, r7
    9170:	b002      	add	sp, #8
    9172:	bd80      	pop	{r7, pc}
    9174:	0000abc9 	.word	0x0000abc9

00009178 <nm_write_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_write_reg(uint32 u32Addr, uint32 u32Val)
{
    9178:	b580      	push	{r7, lr}
    917a:	b082      	sub	sp, #8
    917c:	af00      	add	r7, sp, #0
    917e:	6078      	str	r0, [r7, #4]
    9180:	6039      	str	r1, [r7, #0]
#ifdef CONF_WINC_USE_UART
	return nm_uart_write_reg(u32Addr,u32Val);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_write_reg(u32Addr,u32Val);
    9182:	683a      	ldr	r2, [r7, #0]
    9184:	687b      	ldr	r3, [r7, #4]
    9186:	0011      	movs	r1, r2
    9188:	0018      	movs	r0, r3
    918a:	4b03      	ldr	r3, [pc, #12]	; (9198 <nm_write_reg+0x20>)
    918c:	4798      	blx	r3
    918e:	0003      	movs	r3, r0
#elif defined (CONF_WINC_USE_I2C)
	return nm_i2c_write_reg(u32Addr,u32Val);
#else
#error "Plesae define bus usage"
#endif
}
    9190:	0018      	movs	r0, r3
    9192:	46bd      	mov	sp, r7
    9194:	b002      	add	sp, #8
    9196:	bd80      	pop	{r7, pc}
    9198:	0000ac19 	.word	0x0000ac19

0000919c <p_nm_read_block>:

static sint8 p_nm_read_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
    919c:	b580      	push	{r7, lr}
    919e:	b084      	sub	sp, #16
    91a0:	af00      	add	r7, sp, #0
    91a2:	60f8      	str	r0, [r7, #12]
    91a4:	60b9      	str	r1, [r7, #8]
    91a6:	1dbb      	adds	r3, r7, #6
    91a8:	801a      	strh	r2, [r3, #0]
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_block(u32Addr,puBuf,u16Sz);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_block(u32Addr,puBuf,u16Sz);
    91aa:	1dbb      	adds	r3, r7, #6
    91ac:	881a      	ldrh	r2, [r3, #0]
    91ae:	68b9      	ldr	r1, [r7, #8]
    91b0:	68fb      	ldr	r3, [r7, #12]
    91b2:	0018      	movs	r0, r3
    91b4:	4b03      	ldr	r3, [pc, #12]	; (91c4 <p_nm_read_block+0x28>)
    91b6:	4798      	blx	r3
    91b8:	0003      	movs	r3, r0
	return nm_i2c_read_block(u32Addr,puBuf,u16Sz);
#else
#error "Plesae define bus usage"
#endif

}
    91ba:	0018      	movs	r0, r3
    91bc:	46bd      	mov	sp, r7
    91be:	b004      	add	sp, #16
    91c0:	bd80      	pop	{r7, pc}
    91c2:	46c0      	nop			; (mov r8, r8)
    91c4:	0000ac69 	.word	0x0000ac69

000091c8 <nm_read_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/ 
sint8 nm_read_block(uint32 u32Addr, uint8 *puBuf, uint32 u32Sz)
{
    91c8:	b580      	push	{r7, lr}
    91ca:	b086      	sub	sp, #24
    91cc:	af00      	add	r7, sp, #0
    91ce:	60f8      	str	r0, [r7, #12]
    91d0:	60b9      	str	r1, [r7, #8]
    91d2:	607a      	str	r2, [r7, #4]
	uint16 u16MaxTrxSz = egstrNmBusCapabilities.u16MaxTrxSz - MAX_TRX_CFG_SZ;
    91d4:	4b2d      	ldr	r3, [pc, #180]	; (928c <nm_read_block+0xc4>)
    91d6:	881a      	ldrh	r2, [r3, #0]
    91d8:	2310      	movs	r3, #16
    91da:	18fb      	adds	r3, r7, r3
    91dc:	3a08      	subs	r2, #8
    91de:	801a      	strh	r2, [r3, #0]
	uint32 off = 0;
    91e0:	2300      	movs	r3, #0
    91e2:	617b      	str	r3, [r7, #20]
	sint8 s8Ret = M2M_SUCCESS;
    91e4:	2313      	movs	r3, #19
    91e6:	18fb      	adds	r3, r7, r3
    91e8:	2200      	movs	r2, #0
    91ea:	701a      	strb	r2, [r3, #0]

	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
    91ec:	2310      	movs	r3, #16
    91ee:	18fb      	adds	r3, r7, r3
    91f0:	881a      	ldrh	r2, [r3, #0]
    91f2:	687b      	ldr	r3, [r7, #4]
    91f4:	429a      	cmp	r2, r3
    91f6:	d313      	bcc.n	9220 <nm_read_block+0x58>
		{
			s8Ret += p_nm_read_block(u32Addr, &puBuf[off], (uint16)u32Sz);	
    91f8:	68ba      	ldr	r2, [r7, #8]
    91fa:	697b      	ldr	r3, [r7, #20]
    91fc:	18d1      	adds	r1, r2, r3
    91fe:	687b      	ldr	r3, [r7, #4]
    9200:	b29a      	uxth	r2, r3
    9202:	68fb      	ldr	r3, [r7, #12]
    9204:	0018      	movs	r0, r3
    9206:	4b22      	ldr	r3, [pc, #136]	; (9290 <nm_read_block+0xc8>)
    9208:	4798      	blx	r3
    920a:	0003      	movs	r3, r0
    920c:	b2da      	uxtb	r2, r3
    920e:	2313      	movs	r3, #19
    9210:	18fb      	adds	r3, r7, r3
    9212:	781b      	ldrb	r3, [r3, #0]
    9214:	18d3      	adds	r3, r2, r3
    9216:	b2da      	uxtb	r2, r3
    9218:	2313      	movs	r3, #19
    921a:	18fb      	adds	r3, r7, r3
    921c:	701a      	strb	r2, [r3, #0]
			break;
    921e:	e02d      	b.n	927c <nm_read_block+0xb4>
		}
		else
		{
			s8Ret += p_nm_read_block(u32Addr, &puBuf[off], u16MaxTrxSz);
    9220:	68ba      	ldr	r2, [r7, #8]
    9222:	697b      	ldr	r3, [r7, #20]
    9224:	18d1      	adds	r1, r2, r3
    9226:	2310      	movs	r3, #16
    9228:	18fb      	adds	r3, r7, r3
    922a:	881a      	ldrh	r2, [r3, #0]
    922c:	68fb      	ldr	r3, [r7, #12]
    922e:	0018      	movs	r0, r3
    9230:	4b17      	ldr	r3, [pc, #92]	; (9290 <nm_read_block+0xc8>)
    9232:	4798      	blx	r3
    9234:	0003      	movs	r3, r0
    9236:	b2da      	uxtb	r2, r3
    9238:	2313      	movs	r3, #19
    923a:	18fb      	adds	r3, r7, r3
    923c:	781b      	ldrb	r3, [r3, #0]
    923e:	18d3      	adds	r3, r2, r3
    9240:	b2da      	uxtb	r2, r3
    9242:	2313      	movs	r3, #19
    9244:	18fb      	adds	r3, r7, r3
    9246:	701a      	strb	r2, [r3, #0]
			if(M2M_SUCCESS != s8Ret) break;
    9248:	2313      	movs	r3, #19
    924a:	18fb      	adds	r3, r7, r3
    924c:	781b      	ldrb	r3, [r3, #0]
    924e:	b25b      	sxtb	r3, r3
    9250:	2b00      	cmp	r3, #0
    9252:	d112      	bne.n	927a <nm_read_block+0xb2>
			u32Sz -= u16MaxTrxSz;
    9254:	2310      	movs	r3, #16
    9256:	18fb      	adds	r3, r7, r3
    9258:	881b      	ldrh	r3, [r3, #0]
    925a:	687a      	ldr	r2, [r7, #4]
    925c:	1ad3      	subs	r3, r2, r3
    925e:	607b      	str	r3, [r7, #4]
			off += u16MaxTrxSz;
    9260:	2310      	movs	r3, #16
    9262:	18fb      	adds	r3, r7, r3
    9264:	881b      	ldrh	r3, [r3, #0]
    9266:	697a      	ldr	r2, [r7, #20]
    9268:	18d3      	adds	r3, r2, r3
    926a:	617b      	str	r3, [r7, #20]
			u32Addr += u16MaxTrxSz;
    926c:	2310      	movs	r3, #16
    926e:	18fb      	adds	r3, r7, r3
    9270:	881b      	ldrh	r3, [r3, #0]
    9272:	68fa      	ldr	r2, [r7, #12]
    9274:	18d3      	adds	r3, r2, r3
    9276:	60fb      	str	r3, [r7, #12]
		if(u32Sz <= u16MaxTrxSz)
    9278:	e7b8      	b.n	91ec <nm_read_block+0x24>
			if(M2M_SUCCESS != s8Ret) break;
    927a:	46c0      	nop			; (mov r8, r8)
		}
	}

	return s8Ret;
    927c:	2313      	movs	r3, #19
    927e:	18fb      	adds	r3, r7, r3
    9280:	781b      	ldrb	r3, [r3, #0]
    9282:	b25b      	sxtb	r3, r3
}
    9284:	0018      	movs	r0, r3
    9286:	46bd      	mov	sp, r7
    9288:	b006      	add	sp, #24
    928a:	bd80      	pop	{r7, pc}
    928c:	2000011c 	.word	0x2000011c
    9290:	0000919d 	.word	0x0000919d

00009294 <p_nm_write_block>:

static sint8 p_nm_write_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
    9294:	b580      	push	{r7, lr}
    9296:	b084      	sub	sp, #16
    9298:	af00      	add	r7, sp, #0
    929a:	60f8      	str	r0, [r7, #12]
    929c:	60b9      	str	r1, [r7, #8]
    929e:	1dbb      	adds	r3, r7, #6
    92a0:	801a      	strh	r2, [r3, #0]
#ifdef CONF_WINC_USE_UART
	return nm_uart_write_block(u32Addr,puBuf,u16Sz);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_write_block(u32Addr,puBuf,u16Sz);
    92a2:	1dbb      	adds	r3, r7, #6
    92a4:	881a      	ldrh	r2, [r3, #0]
    92a6:	68b9      	ldr	r1, [r7, #8]
    92a8:	68fb      	ldr	r3, [r7, #12]
    92aa:	0018      	movs	r0, r3
    92ac:	4b03      	ldr	r3, [pc, #12]	; (92bc <p_nm_write_block+0x28>)
    92ae:	4798      	blx	r3
    92b0:	0003      	movs	r3, r0
	return nm_i2c_write_block(u32Addr,puBuf,u16Sz);
#else
#error "Plesae define bus usage"
#endif

}
    92b2:	0018      	movs	r0, r3
    92b4:	46bd      	mov	sp, r7
    92b6:	b004      	add	sp, #16
    92b8:	bd80      	pop	{r7, pc}
    92ba:	46c0      	nop			; (mov r8, r8)
    92bc:	0000acc1 	.word	0x0000acc1

000092c0 <nm_write_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/ 
sint8 nm_write_block(uint32 u32Addr, uint8 *puBuf, uint32 u32Sz)
{
    92c0:	b580      	push	{r7, lr}
    92c2:	b086      	sub	sp, #24
    92c4:	af00      	add	r7, sp, #0
    92c6:	60f8      	str	r0, [r7, #12]
    92c8:	60b9      	str	r1, [r7, #8]
    92ca:	607a      	str	r2, [r7, #4]
	uint16 u16MaxTrxSz = egstrNmBusCapabilities.u16MaxTrxSz - MAX_TRX_CFG_SZ;
    92cc:	4b2d      	ldr	r3, [pc, #180]	; (9384 <nm_write_block+0xc4>)
    92ce:	881a      	ldrh	r2, [r3, #0]
    92d0:	2310      	movs	r3, #16
    92d2:	18fb      	adds	r3, r7, r3
    92d4:	3a08      	subs	r2, #8
    92d6:	801a      	strh	r2, [r3, #0]
	uint32 off = 0;
    92d8:	2300      	movs	r3, #0
    92da:	617b      	str	r3, [r7, #20]
	sint8 s8Ret = M2M_SUCCESS;
    92dc:	2313      	movs	r3, #19
    92de:	18fb      	adds	r3, r7, r3
    92e0:	2200      	movs	r2, #0
    92e2:	701a      	strb	r2, [r3, #0]

	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
    92e4:	2310      	movs	r3, #16
    92e6:	18fb      	adds	r3, r7, r3
    92e8:	881a      	ldrh	r2, [r3, #0]
    92ea:	687b      	ldr	r3, [r7, #4]
    92ec:	429a      	cmp	r2, r3
    92ee:	d313      	bcc.n	9318 <nm_write_block+0x58>
		{
			s8Ret += p_nm_write_block(u32Addr, &puBuf[off], (uint16)u32Sz);	
    92f0:	68ba      	ldr	r2, [r7, #8]
    92f2:	697b      	ldr	r3, [r7, #20]
    92f4:	18d1      	adds	r1, r2, r3
    92f6:	687b      	ldr	r3, [r7, #4]
    92f8:	b29a      	uxth	r2, r3
    92fa:	68fb      	ldr	r3, [r7, #12]
    92fc:	0018      	movs	r0, r3
    92fe:	4b22      	ldr	r3, [pc, #136]	; (9388 <nm_write_block+0xc8>)
    9300:	4798      	blx	r3
    9302:	0003      	movs	r3, r0
    9304:	b2da      	uxtb	r2, r3
    9306:	2313      	movs	r3, #19
    9308:	18fb      	adds	r3, r7, r3
    930a:	781b      	ldrb	r3, [r3, #0]
    930c:	18d3      	adds	r3, r2, r3
    930e:	b2da      	uxtb	r2, r3
    9310:	2313      	movs	r3, #19
    9312:	18fb      	adds	r3, r7, r3
    9314:	701a      	strb	r2, [r3, #0]
			break;
    9316:	e02d      	b.n	9374 <nm_write_block+0xb4>
		}
		else
		{
			s8Ret += p_nm_write_block(u32Addr, &puBuf[off], u16MaxTrxSz);
    9318:	68ba      	ldr	r2, [r7, #8]
    931a:	697b      	ldr	r3, [r7, #20]
    931c:	18d1      	adds	r1, r2, r3
    931e:	2310      	movs	r3, #16
    9320:	18fb      	adds	r3, r7, r3
    9322:	881a      	ldrh	r2, [r3, #0]
    9324:	68fb      	ldr	r3, [r7, #12]
    9326:	0018      	movs	r0, r3
    9328:	4b17      	ldr	r3, [pc, #92]	; (9388 <nm_write_block+0xc8>)
    932a:	4798      	blx	r3
    932c:	0003      	movs	r3, r0
    932e:	b2da      	uxtb	r2, r3
    9330:	2313      	movs	r3, #19
    9332:	18fb      	adds	r3, r7, r3
    9334:	781b      	ldrb	r3, [r3, #0]
    9336:	18d3      	adds	r3, r2, r3
    9338:	b2da      	uxtb	r2, r3
    933a:	2313      	movs	r3, #19
    933c:	18fb      	adds	r3, r7, r3
    933e:	701a      	strb	r2, [r3, #0]
			if(M2M_SUCCESS != s8Ret) break;
    9340:	2313      	movs	r3, #19
    9342:	18fb      	adds	r3, r7, r3
    9344:	781b      	ldrb	r3, [r3, #0]
    9346:	b25b      	sxtb	r3, r3
    9348:	2b00      	cmp	r3, #0
    934a:	d112      	bne.n	9372 <nm_write_block+0xb2>
			u32Sz -= u16MaxTrxSz;
    934c:	2310      	movs	r3, #16
    934e:	18fb      	adds	r3, r7, r3
    9350:	881b      	ldrh	r3, [r3, #0]
    9352:	687a      	ldr	r2, [r7, #4]
    9354:	1ad3      	subs	r3, r2, r3
    9356:	607b      	str	r3, [r7, #4]
			off += u16MaxTrxSz;
    9358:	2310      	movs	r3, #16
    935a:	18fb      	adds	r3, r7, r3
    935c:	881b      	ldrh	r3, [r3, #0]
    935e:	697a      	ldr	r2, [r7, #20]
    9360:	18d3      	adds	r3, r2, r3
    9362:	617b      	str	r3, [r7, #20]
			u32Addr += u16MaxTrxSz;
    9364:	2310      	movs	r3, #16
    9366:	18fb      	adds	r3, r7, r3
    9368:	881b      	ldrh	r3, [r3, #0]
    936a:	68fa      	ldr	r2, [r7, #12]
    936c:	18d3      	adds	r3, r2, r3
    936e:	60fb      	str	r3, [r7, #12]
		if(u32Sz <= u16MaxTrxSz)
    9370:	e7b8      	b.n	92e4 <nm_write_block+0x24>
			if(M2M_SUCCESS != s8Ret) break;
    9372:	46c0      	nop			; (mov r8, r8)
		}
	}

	return s8Ret;
    9374:	2313      	movs	r3, #19
    9376:	18fb      	adds	r3, r7, r3
    9378:	781b      	ldrb	r3, [r3, #0]
    937a:	b25b      	sxtb	r3, r3
}
    937c:	0018      	movs	r0, r3
    937e:	46bd      	mov	sp, r7
    9380:	b006      	add	sp, #24
    9382:	bd80      	pop	{r7, pc}
    9384:	2000011c 	.word	0x2000011c
    9388:	00009295 	.word	0x00009295

0000938c <nm_get_firmware_full_info>:
*	@param [out]	M2mRev
*			    pointer holds address of structure "tstrM2mRev" that contains the firmware version parameters
*	@version	1.0
*/
sint8 nm_get_firmware_full_info(tstrM2mRev* pstrRev)
{
    938c:	b590      	push	{r4, r7, lr}
    938e:	b089      	sub	sp, #36	; 0x24
    9390:	af00      	add	r7, sp, #0
    9392:	6078      	str	r0, [r7, #4]
	uint16  curr_drv_ver, min_req_drv_ver,curr_firm_ver;
	uint32	reg = 0;
    9394:	2300      	movs	r3, #0
    9396:	617b      	str	r3, [r7, #20]
	sint8	ret = M2M_SUCCESS;
    9398:	231f      	movs	r3, #31
    939a:	18fb      	adds	r3, r7, r3
    939c:	2200      	movs	r2, #0
    939e:	701a      	strb	r2, [r3, #0]
	tstrGpRegs strgp = {0};
    93a0:	230c      	movs	r3, #12
    93a2:	18fb      	adds	r3, r7, r3
    93a4:	0018      	movs	r0, r3
    93a6:	2308      	movs	r3, #8
    93a8:	001a      	movs	r2, r3
    93aa:	2100      	movs	r1, #0
    93ac:	4b64      	ldr	r3, [pc, #400]	; (9540 <nm_get_firmware_full_info+0x1b4>)
    93ae:	4798      	blx	r3
	if (pstrRev != NULL)
    93b0:	687b      	ldr	r3, [r7, #4]
    93b2:	2b00      	cmp	r3, #0
    93b4:	d100      	bne.n	93b8 <nm_get_firmware_full_info+0x2c>
    93b6:	e0ba      	b.n	952e <nm_get_firmware_full_info+0x1a2>
	{
		m2m_memset((uint8*)pstrRev,0,sizeof(tstrM2mRev));
    93b8:	687b      	ldr	r3, [r7, #4]
    93ba:	2228      	movs	r2, #40	; 0x28
    93bc:	2100      	movs	r1, #0
    93be:	0018      	movs	r0, r3
    93c0:	4b60      	ldr	r3, [pc, #384]	; (9544 <nm_get_firmware_full_info+0x1b8>)
    93c2:	4798      	blx	r3
		ret = nm_read_reg_with_ret(rNMI_GP_REG_2, &reg);
    93c4:	231f      	movs	r3, #31
    93c6:	18fc      	adds	r4, r7, r3
    93c8:	2314      	movs	r3, #20
    93ca:	18fb      	adds	r3, r7, r3
    93cc:	4a5e      	ldr	r2, [pc, #376]	; (9548 <nm_get_firmware_full_info+0x1bc>)
    93ce:	0019      	movs	r1, r3
    93d0:	0010      	movs	r0, r2
    93d2:	4b5e      	ldr	r3, [pc, #376]	; (954c <nm_get_firmware_full_info+0x1c0>)
    93d4:	4798      	blx	r3
    93d6:	0003      	movs	r3, r0
    93d8:	7023      	strb	r3, [r4, #0]
		if(ret == M2M_SUCCESS)
    93da:	231f      	movs	r3, #31
    93dc:	18fb      	adds	r3, r7, r3
    93de:	781b      	ldrb	r3, [r3, #0]
    93e0:	b25b      	sxtb	r3, r3
    93e2:	2b00      	cmp	r3, #0
    93e4:	d000      	beq.n	93e8 <nm_get_firmware_full_info+0x5c>
    93e6:	e0a2      	b.n	952e <nm_get_firmware_full_info+0x1a2>
		{
			if(reg != 0)
    93e8:	697b      	ldr	r3, [r7, #20]
    93ea:	2b00      	cmp	r3, #0
    93ec:	d100      	bne.n	93f0 <nm_get_firmware_full_info+0x64>
    93ee:	e09a      	b.n	9526 <nm_get_firmware_full_info+0x19a>
			{
				ret = nm_read_block(reg|0x30000,(uint8*)&strgp,sizeof(tstrGpRegs));
    93f0:	697b      	ldr	r3, [r7, #20]
    93f2:	22c0      	movs	r2, #192	; 0xc0
    93f4:	0292      	lsls	r2, r2, #10
    93f6:	4313      	orrs	r3, r2
    93f8:	221f      	movs	r2, #31
    93fa:	18bc      	adds	r4, r7, r2
    93fc:	220c      	movs	r2, #12
    93fe:	18b9      	adds	r1, r7, r2
    9400:	2208      	movs	r2, #8
    9402:	0018      	movs	r0, r3
    9404:	4b52      	ldr	r3, [pc, #328]	; (9550 <nm_get_firmware_full_info+0x1c4>)
    9406:	4798      	blx	r3
    9408:	0003      	movs	r3, r0
    940a:	7023      	strb	r3, [r4, #0]
				if(ret == M2M_SUCCESS)
    940c:	231f      	movs	r3, #31
    940e:	18fb      	adds	r3, r7, r3
    9410:	781b      	ldrb	r3, [r3, #0]
    9412:	b25b      	sxtb	r3, r3
    9414:	2b00      	cmp	r3, #0
    9416:	d000      	beq.n	941a <nm_get_firmware_full_info+0x8e>
    9418:	e089      	b.n	952e <nm_get_firmware_full_info+0x1a2>
				{
					reg = strgp.u32Firmware_Ota_rev;
    941a:	230c      	movs	r3, #12
    941c:	18fb      	adds	r3, r7, r3
    941e:	685b      	ldr	r3, [r3, #4]
    9420:	617b      	str	r3, [r7, #20]
					reg &= 0x0000ffff;
    9422:	697b      	ldr	r3, [r7, #20]
    9424:	041b      	lsls	r3, r3, #16
    9426:	0c1b      	lsrs	r3, r3, #16
    9428:	617b      	str	r3, [r7, #20]
					if(reg != 0)
    942a:	697b      	ldr	r3, [r7, #20]
    942c:	2b00      	cmp	r3, #0
    942e:	d100      	bne.n	9432 <nm_get_firmware_full_info+0xa6>
    9430:	e074      	b.n	951c <nm_get_firmware_full_info+0x190>
					{
						ret = nm_read_block(reg|0x30000,(uint8*)pstrRev,sizeof(tstrM2mRev));
    9432:	697b      	ldr	r3, [r7, #20]
    9434:	22c0      	movs	r2, #192	; 0xc0
    9436:	0292      	lsls	r2, r2, #10
    9438:	4313      	orrs	r3, r2
    943a:	221f      	movs	r2, #31
    943c:	18bc      	adds	r4, r7, r2
    943e:	6879      	ldr	r1, [r7, #4]
    9440:	2228      	movs	r2, #40	; 0x28
    9442:	0018      	movs	r0, r3
    9444:	4b42      	ldr	r3, [pc, #264]	; (9550 <nm_get_firmware_full_info+0x1c4>)
    9446:	4798      	blx	r3
    9448:	0003      	movs	r3, r0
    944a:	7023      	strb	r3, [r4, #0]
						if(ret == M2M_SUCCESS)
    944c:	231f      	movs	r3, #31
    944e:	18fb      	adds	r3, r7, r3
    9450:	781b      	ldrb	r3, [r3, #0]
    9452:	b25b      	sxtb	r3, r3
    9454:	2b00      	cmp	r3, #0
    9456:	d16a      	bne.n	952e <nm_get_firmware_full_info+0x1a2>
						{
							curr_firm_ver   = M2M_MAKE_VERSION(pstrRev->u8FirmwareMajor, pstrRev->u8FirmwareMinor,pstrRev->u8FirmwarePatch);
    9458:	687b      	ldr	r3, [r7, #4]
    945a:	791b      	ldrb	r3, [r3, #4]
    945c:	021b      	lsls	r3, r3, #8
    945e:	b21a      	sxth	r2, r3
    9460:	687b      	ldr	r3, [r7, #4]
    9462:	795b      	ldrb	r3, [r3, #5]
    9464:	011b      	lsls	r3, r3, #4
    9466:	b21b      	sxth	r3, r3
    9468:	21ff      	movs	r1, #255	; 0xff
    946a:	400b      	ands	r3, r1
    946c:	b21b      	sxth	r3, r3
    946e:	4313      	orrs	r3, r2
    9470:	b21a      	sxth	r2, r3
    9472:	687b      	ldr	r3, [r7, #4]
    9474:	799b      	ldrb	r3, [r3, #6]
    9476:	b21b      	sxth	r3, r3
    9478:	210f      	movs	r1, #15
    947a:	400b      	ands	r3, r1
    947c:	b21b      	sxth	r3, r3
    947e:	4313      	orrs	r3, r2
    9480:	b21a      	sxth	r2, r3
    9482:	231c      	movs	r3, #28
    9484:	18fb      	adds	r3, r7, r3
    9486:	801a      	strh	r2, [r3, #0]
							curr_drv_ver    = M2M_MAKE_VERSION(M2M_RELEASE_VERSION_MAJOR_NO, M2M_RELEASE_VERSION_MINOR_NO, M2M_RELEASE_VERSION_PATCH_NO);
    9488:	231a      	movs	r3, #26
    948a:	18fb      	adds	r3, r7, r3
    948c:	4a31      	ldr	r2, [pc, #196]	; (9554 <nm_get_firmware_full_info+0x1c8>)
    948e:	801a      	strh	r2, [r3, #0]
							min_req_drv_ver = M2M_MAKE_VERSION(pstrRev->u8DriverMajor, pstrRev->u8DriverMinor,pstrRev->u8DriverPatch);
    9490:	687b      	ldr	r3, [r7, #4]
    9492:	79db      	ldrb	r3, [r3, #7]
    9494:	021b      	lsls	r3, r3, #8
    9496:	b21a      	sxth	r2, r3
    9498:	687b      	ldr	r3, [r7, #4]
    949a:	7a1b      	ldrb	r3, [r3, #8]
    949c:	011b      	lsls	r3, r3, #4
    949e:	b21b      	sxth	r3, r3
    94a0:	21ff      	movs	r1, #255	; 0xff
    94a2:	400b      	ands	r3, r1
    94a4:	b21b      	sxth	r3, r3
    94a6:	4313      	orrs	r3, r2
    94a8:	b21a      	sxth	r2, r3
    94aa:	687b      	ldr	r3, [r7, #4]
    94ac:	7a5b      	ldrb	r3, [r3, #9]
    94ae:	b21b      	sxth	r3, r3
    94b0:	210f      	movs	r1, #15
    94b2:	400b      	ands	r3, r1
    94b4:	b21b      	sxth	r3, r3
    94b6:	4313      	orrs	r3, r2
    94b8:	b21a      	sxth	r2, r3
    94ba:	2318      	movs	r3, #24
    94bc:	18fb      	adds	r3, r7, r3
    94be:	801a      	strh	r2, [r3, #0]
							if((curr_firm_ver == 0)||(min_req_drv_ver == 0)||(min_req_drv_ver == 0)){
    94c0:	231c      	movs	r3, #28
    94c2:	18fb      	adds	r3, r7, r3
    94c4:	881b      	ldrh	r3, [r3, #0]
    94c6:	2b00      	cmp	r3, #0
    94c8:	d009      	beq.n	94de <nm_get_firmware_full_info+0x152>
    94ca:	2318      	movs	r3, #24
    94cc:	18fb      	adds	r3, r7, r3
    94ce:	881b      	ldrh	r3, [r3, #0]
    94d0:	2b00      	cmp	r3, #0
    94d2:	d004      	beq.n	94de <nm_get_firmware_full_info+0x152>
    94d4:	2318      	movs	r3, #24
    94d6:	18fb      	adds	r3, r7, r3
    94d8:	881b      	ldrh	r3, [r3, #0]
    94da:	2b00      	cmp	r3, #0
    94dc:	d104      	bne.n	94e8 <nm_get_firmware_full_info+0x15c>
								ret = M2M_ERR_FAIL;
    94de:	231f      	movs	r3, #31
    94e0:	18fb      	adds	r3, r7, r3
    94e2:	22f4      	movs	r2, #244	; 0xf4
    94e4:	701a      	strb	r2, [r3, #0]
								goto EXIT;
    94e6:	e022      	b.n	952e <nm_get_firmware_full_info+0x1a2>
							}
							if(curr_drv_ver <  min_req_drv_ver) {
    94e8:	231a      	movs	r3, #26
    94ea:	18fa      	adds	r2, r7, r3
    94ec:	2318      	movs	r3, #24
    94ee:	18fb      	adds	r3, r7, r3
    94f0:	8812      	ldrh	r2, [r2, #0]
    94f2:	881b      	ldrh	r3, [r3, #0]
    94f4:	429a      	cmp	r2, r3
    94f6:	d204      	bcs.n	9502 <nm_get_firmware_full_info+0x176>
								/*The current driver version should be larger or equal 
								than the min driver that the current firmware support  */
								ret = M2M_ERR_FW_VER_MISMATCH;
    94f8:	231f      	movs	r3, #31
    94fa:	18fb      	adds	r3, r7, r3
    94fc:	22f3      	movs	r2, #243	; 0xf3
    94fe:	701a      	strb	r2, [r3, #0]
								goto EXIT;
    9500:	e015      	b.n	952e <nm_get_firmware_full_info+0x1a2>
							}
							if(curr_drv_ver >  curr_firm_ver) {
    9502:	231a      	movs	r3, #26
    9504:	18fa      	adds	r2, r7, r3
    9506:	231c      	movs	r3, #28
    9508:	18fb      	adds	r3, r7, r3
    950a:	8812      	ldrh	r2, [r2, #0]
    950c:	881b      	ldrh	r3, [r3, #0]
    950e:	429a      	cmp	r2, r3
    9510:	d90d      	bls.n	952e <nm_get_firmware_full_info+0x1a2>
								/*The current driver should be equal or less than the firmware version*/
								ret = M2M_ERR_FW_VER_MISMATCH;
    9512:	231f      	movs	r3, #31
    9514:	18fb      	adds	r3, r7, r3
    9516:	22f3      	movs	r2, #243	; 0xf3
    9518:	701a      	strb	r2, [r3, #0]
								goto EXIT;
    951a:	e008      	b.n	952e <nm_get_firmware_full_info+0x1a2>
							}
						}
					}else {
						ret = M2M_ERR_FAIL;
    951c:	231f      	movs	r3, #31
    951e:	18fb      	adds	r3, r7, r3
    9520:	22f4      	movs	r2, #244	; 0xf4
    9522:	701a      	strb	r2, [r3, #0]
    9524:	e003      	b.n	952e <nm_get_firmware_full_info+0x1a2>
					}
				}
			}else{
				ret = M2M_ERR_FAIL;
    9526:	231f      	movs	r3, #31
    9528:	18fb      	adds	r3, r7, r3
    952a:	22f4      	movs	r2, #244	; 0xf4
    952c:	701a      	strb	r2, [r3, #0]
			}
		}
	}
EXIT:
	return ret;
    952e:	231f      	movs	r3, #31
    9530:	18fb      	adds	r3, r7, r3
    9532:	781b      	ldrb	r3, [r3, #0]
    9534:	b25b      	sxtb	r3, r3
}
    9536:	0018      	movs	r0, r3
    9538:	46bd      	mov	sp, r7
    953a:	b009      	add	sp, #36	; 0x24
    953c:	bd90      	pop	{r4, r7, pc}
    953e:	46c0      	nop			; (mov r8, r8)
    9540:	0001c173 	.word	0x0001c173
    9544:	00006d61 	.word	0x00006d61
    9548:	000c0008 	.word	0x000c0008
    954c:	00009155 	.word	0x00009155
    9550:	000091c9 	.word	0x000091c9
    9554:	00001352 	.word	0x00001352

00009558 <nm_drv_init>:
*	@author	M. Abdelmawla
*	@date	15 July 2012
*	@version	1.0
*/
sint8 nm_drv_init(void * arg)
{
    9558:	b590      	push	{r4, r7, lr}
    955a:	b085      	sub	sp, #20
    955c:	af00      	add	r7, sp, #0
    955e:	6078      	str	r0, [r7, #4]
	sint8 ret = M2M_SUCCESS;
    9560:	230f      	movs	r3, #15
    9562:	18fb      	adds	r3, r7, r3
    9564:	2200      	movs	r2, #0
    9566:	701a      	strb	r2, [r3, #0]
	uint8 u8Mode;
    uint32 chipid;
	
	if(NULL != arg) {
    9568:	687b      	ldr	r3, [r7, #4]
    956a:	2b00      	cmp	r3, #0
    956c:	d013      	beq.n	9596 <nm_drv_init+0x3e>
		u8Mode = *((uint8 *)arg);
    956e:	230e      	movs	r3, #14
    9570:	18fb      	adds	r3, r7, r3
    9572:	687a      	ldr	r2, [r7, #4]
    9574:	7812      	ldrb	r2, [r2, #0]
    9576:	701a      	strb	r2, [r3, #0]
		if((u8Mode < M2M_WIFI_MODE_NORMAL)||(u8Mode >= M2M_WIFI_MODE_MAX)) {
    9578:	230e      	movs	r3, #14
    957a:	18fb      	adds	r3, r7, r3
    957c:	781b      	ldrb	r3, [r3, #0]
    957e:	2b00      	cmp	r3, #0
    9580:	d004      	beq.n	958c <nm_drv_init+0x34>
    9582:	230e      	movs	r3, #14
    9584:	18fb      	adds	r3, r7, r3
    9586:	781b      	ldrb	r3, [r3, #0]
    9588:	2b04      	cmp	r3, #4
    958a:	d908      	bls.n	959e <nm_drv_init+0x46>
			u8Mode = M2M_WIFI_MODE_NORMAL;
    958c:	230e      	movs	r3, #14
    958e:	18fb      	adds	r3, r7, r3
    9590:	2201      	movs	r2, #1
    9592:	701a      	strb	r2, [r3, #0]
    9594:	e003      	b.n	959e <nm_drv_init+0x46>
		}
	} else {
		u8Mode = M2M_WIFI_MODE_NORMAL;
    9596:	230e      	movs	r3, #14
    9598:	18fb      	adds	r3, r7, r3
    959a:	2201      	movs	r2, #1
    959c:	701a      	strb	r2, [r3, #0]
	}
	
	ret = nm_bus_iface_init(NULL);
    959e:	230f      	movs	r3, #15
    95a0:	18fc      	adds	r4, r7, r3
    95a2:	2000      	movs	r0, #0
    95a4:	4b45      	ldr	r3, [pc, #276]	; (96bc <nm_drv_init+0x164>)
    95a6:	4798      	blx	r3
    95a8:	0003      	movs	r3, r0
    95aa:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
    95ac:	230f      	movs	r3, #15
    95ae:	18fb      	adds	r3, r7, r3
    95b0:	781b      	ldrb	r3, [r3, #0]
    95b2:	b25b      	sxtb	r3, r3
    95b4:	2b00      	cmp	r3, #0
    95b6:	d00e      	beq.n	95d6 <nm_drv_init+0x7e>
		M2M_ERR("[nmi start]: fail init bus\n");
    95b8:	2394      	movs	r3, #148	; 0x94
    95ba:	005a      	lsls	r2, r3, #1
    95bc:	4940      	ldr	r1, [pc, #256]	; (96c0 <nm_drv_init+0x168>)
    95be:	4b41      	ldr	r3, [pc, #260]	; (96c4 <nm_drv_init+0x16c>)
    95c0:	0018      	movs	r0, r3
    95c2:	4b41      	ldr	r3, [pc, #260]	; (96c8 <nm_drv_init+0x170>)
    95c4:	4798      	blx	r3
    95c6:	4b41      	ldr	r3, [pc, #260]	; (96cc <nm_drv_init+0x174>)
    95c8:	0018      	movs	r0, r3
    95ca:	4b41      	ldr	r3, [pc, #260]	; (96d0 <nm_drv_init+0x178>)
    95cc:	4798      	blx	r3
    95ce:	200d      	movs	r0, #13
    95d0:	4b40      	ldr	r3, [pc, #256]	; (96d4 <nm_drv_init+0x17c>)
    95d2:	4798      	blx	r3
		goto ERR1;
    95d4:	e06a      	b.n	96ac <nm_drv_init+0x154>
	if (M2M_SUCCESS != ret) {
		goto ERR2;
	}
#endif
	/* Check to see if the device is attached */
	chipid = nmi_get_chipid();
    95d6:	4b40      	ldr	r3, [pc, #256]	; (96d8 <nm_drv_init+0x180>)
    95d8:	4798      	blx	r3
    95da:	0003      	movs	r3, r0
    95dc:	60bb      	str	r3, [r7, #8]
	if (0x1503a0 != chipid)
    95de:	68bb      	ldr	r3, [r7, #8]
    95e0:	4a3e      	ldr	r2, [pc, #248]	; (96dc <nm_drv_init+0x184>)
    95e2:	4293      	cmp	r3, r2
    95e4:	d004      	beq.n	95f0 <nm_drv_init+0x98>
	{
		ret =  M2M_ERR_TIME_OUT;
    95e6:	230f      	movs	r3, #15
    95e8:	18fb      	adds	r3, r7, r3
    95ea:	22fc      	movs	r2, #252	; 0xfc
    95ec:	701a      	strb	r2, [r3, #0]
		goto ERR2;
    95ee:	e05b      	b.n	96a8 <nm_drv_init+0x150>
	}

	M2M_INFO("Chip ID %lx\n", chipid);
    95f0:	4b3b      	ldr	r3, [pc, #236]	; (96e0 <nm_drv_init+0x188>)
    95f2:	0018      	movs	r0, r3
    95f4:	4b34      	ldr	r3, [pc, #208]	; (96c8 <nm_drv_init+0x170>)
    95f6:	4798      	blx	r3
    95f8:	68ba      	ldr	r2, [r7, #8]
    95fa:	4b3a      	ldr	r3, [pc, #232]	; (96e4 <nm_drv_init+0x18c>)
    95fc:	0011      	movs	r1, r2
    95fe:	0018      	movs	r0, r3
    9600:	4b31      	ldr	r3, [pc, #196]	; (96c8 <nm_drv_init+0x170>)
    9602:	4798      	blx	r3
    9604:	200d      	movs	r0, #13
    9606:	4b33      	ldr	r3, [pc, #204]	; (96d4 <nm_drv_init+0x17c>)
    9608:	4798      	blx	r3
#ifdef CONF_WINC_USE_SPI
	/* Must do this after global reset to set SPI data packet size. */
	nm_spi_init();
    960a:	4b37      	ldr	r3, [pc, #220]	; (96e8 <nm_drv_init+0x190>)
    960c:	4798      	blx	r3
#endif
	ret = wait_for_bootrom(u8Mode);
    960e:	230f      	movs	r3, #15
    9610:	18fc      	adds	r4, r7, r3
    9612:	230e      	movs	r3, #14
    9614:	18fb      	adds	r3, r7, r3
    9616:	781b      	ldrb	r3, [r3, #0]
    9618:	0018      	movs	r0, r3
    961a:	4b34      	ldr	r3, [pc, #208]	; (96ec <nm_drv_init+0x194>)
    961c:	4798      	blx	r3
    961e:	0003      	movs	r3, r0
    9620:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
    9622:	230f      	movs	r3, #15
    9624:	18fb      	adds	r3, r7, r3
    9626:	781b      	ldrb	r3, [r3, #0]
    9628:	b25b      	sxtb	r3, r3
    962a:	2b00      	cmp	r3, #0
    962c:	d139      	bne.n	96a2 <nm_drv_init+0x14a>
		goto ERR2;
	}
		
	ret = wait_for_firmware_start(u8Mode);
    962e:	230f      	movs	r3, #15
    9630:	18fc      	adds	r4, r7, r3
    9632:	230e      	movs	r3, #14
    9634:	18fb      	adds	r3, r7, r3
    9636:	781b      	ldrb	r3, [r3, #0]
    9638:	0018      	movs	r0, r3
    963a:	4b2d      	ldr	r3, [pc, #180]	; (96f0 <nm_drv_init+0x198>)
    963c:	4798      	blx	r3
    963e:	0003      	movs	r3, r0
    9640:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
    9642:	230f      	movs	r3, #15
    9644:	18fb      	adds	r3, r7, r3
    9646:	781b      	ldrb	r3, [r3, #0]
    9648:	b25b      	sxtb	r3, r3
    964a:	2b00      	cmp	r3, #0
    964c:	d12b      	bne.n	96a6 <nm_drv_init+0x14e>
		goto ERR2;
	}
	
	if((M2M_WIFI_MODE_ATE_HIGH == u8Mode)||(M2M_WIFI_MODE_ATE_LOW == u8Mode)) {
    964e:	230e      	movs	r3, #14
    9650:	18fb      	adds	r3, r7, r3
    9652:	781b      	ldrb	r3, [r3, #0]
    9654:	2b02      	cmp	r3, #2
    9656:	d029      	beq.n	96ac <nm_drv_init+0x154>
    9658:	230e      	movs	r3, #14
    965a:	18fb      	adds	r3, r7, r3
    965c:	781b      	ldrb	r3, [r3, #0]
    965e:	2b03      	cmp	r3, #3
    9660:	d024      	beq.n	96ac <nm_drv_init+0x154>
		goto ERR1;
	} else {
		/*continue running*/
	}
	
	ret = enable_interrupts();
    9662:	230f      	movs	r3, #15
    9664:	18fc      	adds	r4, r7, r3
    9666:	4b23      	ldr	r3, [pc, #140]	; (96f4 <nm_drv_init+0x19c>)
    9668:	4798      	blx	r3
    966a:	0003      	movs	r3, r0
    966c:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
    966e:	230f      	movs	r3, #15
    9670:	18fb      	adds	r3, r7, r3
    9672:	781b      	ldrb	r3, [r3, #0]
    9674:	b25b      	sxtb	r3, r3
    9676:	2b00      	cmp	r3, #0
    9678:	d00e      	beq.n	9698 <nm_drv_init+0x140>
		M2M_ERR("failed to enable interrupts..\n");
    967a:	23af      	movs	r3, #175	; 0xaf
    967c:	005a      	lsls	r2, r3, #1
    967e:	4910      	ldr	r1, [pc, #64]	; (96c0 <nm_drv_init+0x168>)
    9680:	4b10      	ldr	r3, [pc, #64]	; (96c4 <nm_drv_init+0x16c>)
    9682:	0018      	movs	r0, r3
    9684:	4b10      	ldr	r3, [pc, #64]	; (96c8 <nm_drv_init+0x170>)
    9686:	4798      	blx	r3
    9688:	4b1b      	ldr	r3, [pc, #108]	; (96f8 <nm_drv_init+0x1a0>)
    968a:	0018      	movs	r0, r3
    968c:	4b10      	ldr	r3, [pc, #64]	; (96d0 <nm_drv_init+0x178>)
    968e:	4798      	blx	r3
    9690:	200d      	movs	r0, #13
    9692:	4b10      	ldr	r3, [pc, #64]	; (96d4 <nm_drv_init+0x17c>)
    9694:	4798      	blx	r3
		goto ERR2;
    9696:	e007      	b.n	96a8 <nm_drv_init+0x150>
	}
	return ret;
    9698:	230f      	movs	r3, #15
    969a:	18fb      	adds	r3, r7, r3
    969c:	781b      	ldrb	r3, [r3, #0]
    969e:	b25b      	sxtb	r3, r3
    96a0:	e008      	b.n	96b4 <nm_drv_init+0x15c>
		goto ERR2;
    96a2:	46c0      	nop			; (mov r8, r8)
    96a4:	e000      	b.n	96a8 <nm_drv_init+0x150>
		goto ERR2;
    96a6:	46c0      	nop			; (mov r8, r8)
ERR2:
	nm_bus_iface_deinit();
    96a8:	4b14      	ldr	r3, [pc, #80]	; (96fc <nm_drv_init+0x1a4>)
    96aa:	4798      	blx	r3
ERR1:
	return ret;
    96ac:	230f      	movs	r3, #15
    96ae:	18fb      	adds	r3, r7, r3
    96b0:	781b      	ldrb	r3, [r3, #0]
    96b2:	b25b      	sxtb	r3, r3
}
    96b4:	0018      	movs	r0, r3
    96b6:	46bd      	mov	sp, r7
    96b8:	b005      	add	sp, #20
    96ba:	bd90      	pop	{r4, r7, pc}
    96bc:	000090b9 	.word	0x000090b9
    96c0:	00020204 	.word	0x00020204
    96c4:	00020138 	.word	0x00020138
    96c8:	0001c2d5 	.word	0x0001c2d5
    96cc:	0002014c 	.word	0x0002014c
    96d0:	0001c3f1 	.word	0x0001c3f1
    96d4:	0001c309 	.word	0x0001c309
    96d8:	00008975 	.word	0x00008975
    96dc:	001503a0 	.word	0x001503a0
    96e0:	00020168 	.word	0x00020168
    96e4:	00020174 	.word	0x00020174
    96e8:	0000aa41 	.word	0x0000aa41
    96ec:	00008cc9 	.word	0x00008cc9
    96f0:	00008e61 	.word	0x00008e61
    96f4:	000088c1 	.word	0x000088c1
    96f8:	00020184 	.word	0x00020184
    96fc:	000090ed 	.word	0x000090ed

00009700 <nm_drv_deinit>:
*	@author	M. Abdelmawla
*	@date	17 July 2012
*	@version	1.0
*/
sint8 nm_drv_deinit(void * arg)
{
    9700:	b590      	push	{r4, r7, lr}
    9702:	b085      	sub	sp, #20
    9704:	af00      	add	r7, sp, #0
    9706:	6078      	str	r0, [r7, #4]
	sint8 ret;

	ret = chip_deinit();
    9708:	230f      	movs	r3, #15
    970a:	18fc      	adds	r4, r7, r3
    970c:	4b2d      	ldr	r3, [pc, #180]	; (97c4 <nm_drv_deinit+0xc4>)
    970e:	4798      	blx	r3
    9710:	0003      	movs	r3, r0
    9712:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
    9714:	230f      	movs	r3, #15
    9716:	18fb      	adds	r3, r7, r3
    9718:	781b      	ldrb	r3, [r3, #0]
    971a:	b25b      	sxtb	r3, r3
    971c:	2b00      	cmp	r3, #0
    971e:	d00f      	beq.n	9740 <nm_drv_deinit+0x40>
		M2M_ERR("[nmi stop]: chip_deinit fail\n");
    9720:	2376      	movs	r3, #118	; 0x76
    9722:	33ff      	adds	r3, #255	; 0xff
    9724:	001a      	movs	r2, r3
    9726:	4928      	ldr	r1, [pc, #160]	; (97c8 <nm_drv_deinit+0xc8>)
    9728:	4b28      	ldr	r3, [pc, #160]	; (97cc <nm_drv_deinit+0xcc>)
    972a:	0018      	movs	r0, r3
    972c:	4b28      	ldr	r3, [pc, #160]	; (97d0 <nm_drv_deinit+0xd0>)
    972e:	4798      	blx	r3
    9730:	4b28      	ldr	r3, [pc, #160]	; (97d4 <nm_drv_deinit+0xd4>)
    9732:	0018      	movs	r0, r3
    9734:	4b28      	ldr	r3, [pc, #160]	; (97d8 <nm_drv_deinit+0xd8>)
    9736:	4798      	blx	r3
    9738:	200d      	movs	r0, #13
    973a:	4b28      	ldr	r3, [pc, #160]	; (97dc <nm_drv_deinit+0xdc>)
    973c:	4798      	blx	r3
		goto ERR1;
    973e:	e038      	b.n	97b2 <nm_drv_deinit+0xb2>
	}
	
	/* Disable SPI flash to save power when the chip is off */
	ret = spi_flash_enable(0);
    9740:	230f      	movs	r3, #15
    9742:	18fc      	adds	r4, r7, r3
    9744:	2000      	movs	r0, #0
    9746:	4b26      	ldr	r3, [pc, #152]	; (97e0 <nm_drv_deinit+0xe0>)
    9748:	4798      	blx	r3
    974a:	0003      	movs	r3, r0
    974c:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
    974e:	230f      	movs	r3, #15
    9750:	18fb      	adds	r3, r7, r3
    9752:	781b      	ldrb	r3, [r3, #0]
    9754:	b25b      	sxtb	r3, r3
    9756:	2b00      	cmp	r3, #0
    9758:	d00e      	beq.n	9778 <nm_drv_deinit+0x78>
		M2M_ERR("[nmi stop]: SPI flash disable fail\n");
    975a:	23be      	movs	r3, #190	; 0xbe
    975c:	005a      	lsls	r2, r3, #1
    975e:	491a      	ldr	r1, [pc, #104]	; (97c8 <nm_drv_deinit+0xc8>)
    9760:	4b1a      	ldr	r3, [pc, #104]	; (97cc <nm_drv_deinit+0xcc>)
    9762:	0018      	movs	r0, r3
    9764:	4b1a      	ldr	r3, [pc, #104]	; (97d0 <nm_drv_deinit+0xd0>)
    9766:	4798      	blx	r3
    9768:	4b1e      	ldr	r3, [pc, #120]	; (97e4 <nm_drv_deinit+0xe4>)
    976a:	0018      	movs	r0, r3
    976c:	4b1a      	ldr	r3, [pc, #104]	; (97d8 <nm_drv_deinit+0xd8>)
    976e:	4798      	blx	r3
    9770:	200d      	movs	r0, #13
    9772:	4b1a      	ldr	r3, [pc, #104]	; (97dc <nm_drv_deinit+0xdc>)
    9774:	4798      	blx	r3
		goto ERR1;
    9776:	e01c      	b.n	97b2 <nm_drv_deinit+0xb2>
	}

	ret = nm_bus_iface_deinit();
    9778:	230f      	movs	r3, #15
    977a:	18fc      	adds	r4, r7, r3
    977c:	4b1a      	ldr	r3, [pc, #104]	; (97e8 <nm_drv_deinit+0xe8>)
    977e:	4798      	blx	r3
    9780:	0003      	movs	r3, r0
    9782:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
    9784:	230f      	movs	r3, #15
    9786:	18fb      	adds	r3, r7, r3
    9788:	781b      	ldrb	r3, [r3, #0]
    978a:	b25b      	sxtb	r3, r3
    978c:	2b00      	cmp	r3, #0
    978e:	d00e      	beq.n	97ae <nm_drv_deinit+0xae>
		M2M_ERR("[nmi stop]: fail init bus\n");
    9790:	23c1      	movs	r3, #193	; 0xc1
    9792:	005a      	lsls	r2, r3, #1
    9794:	490c      	ldr	r1, [pc, #48]	; (97c8 <nm_drv_deinit+0xc8>)
    9796:	4b0d      	ldr	r3, [pc, #52]	; (97cc <nm_drv_deinit+0xcc>)
    9798:	0018      	movs	r0, r3
    979a:	4b0d      	ldr	r3, [pc, #52]	; (97d0 <nm_drv_deinit+0xd0>)
    979c:	4798      	blx	r3
    979e:	4b13      	ldr	r3, [pc, #76]	; (97ec <nm_drv_deinit+0xec>)
    97a0:	0018      	movs	r0, r3
    97a2:	4b0d      	ldr	r3, [pc, #52]	; (97d8 <nm_drv_deinit+0xd8>)
    97a4:	4798      	blx	r3
    97a6:	200d      	movs	r0, #13
    97a8:	4b0c      	ldr	r3, [pc, #48]	; (97dc <nm_drv_deinit+0xdc>)
    97aa:	4798      	blx	r3
		goto ERR1;
    97ac:	e001      	b.n	97b2 <nm_drv_deinit+0xb2>
	}
#ifdef CONF_WINC_USE_SPI
	/* Must do this after global reset to set SPI data packet size. */
	nm_spi_deinit();
    97ae:	4b10      	ldr	r3, [pc, #64]	; (97f0 <nm_drv_deinit+0xf0>)
    97b0:	4798      	blx	r3
#endif

ERR1:
	return ret;
    97b2:	230f      	movs	r3, #15
    97b4:	18fb      	adds	r3, r7, r3
    97b6:	781b      	ldrb	r3, [r3, #0]
    97b8:	b25b      	sxtb	r3, r3
}
    97ba:	0018      	movs	r0, r3
    97bc:	46bd      	mov	sp, r7
    97be:	b005      	add	sp, #20
    97c0:	bd90      	pop	{r4, r7, pc}
    97c2:	46c0      	nop			; (mov r8, r8)
    97c4:	00008f15 	.word	0x00008f15
    97c8:	00020210 	.word	0x00020210
    97cc:	00020138 	.word	0x00020138
    97d0:	0001c2d5 	.word	0x0001c2d5
    97d4:	000201a4 	.word	0x000201a4
    97d8:	0001c3f1 	.word	0x0001c3f1
    97dc:	0001c309 	.word	0x0001c309
    97e0:	0000c191 	.word	0x0000c191
    97e4:	000201c4 	.word	0x000201c4
    97e8:	000090ed 	.word	0x000090ed
    97ec:	000201e8 	.word	0x000201e8
    97f0:	0000ab8d 	.word	0x0000ab8d

000097f4 <nmi_spi_read>:
#define DATA_PKT_SZ				DATA_PKT_SZ_8K

static uint8 	gu8Crc_off	=   0;

static sint8 nmi_spi_read(uint8* b, uint16 sz)
{
    97f4:	b580      	push	{r7, lr}
    97f6:	b086      	sub	sp, #24
    97f8:	af00      	add	r7, sp, #0
    97fa:	6078      	str	r0, [r7, #4]
    97fc:	000a      	movs	r2, r1
    97fe:	1cbb      	adds	r3, r7, #2
    9800:	801a      	strh	r2, [r3, #0]
	tstrNmSpiRw spi;
	spi.pu8InBuf = NULL;
    9802:	230c      	movs	r3, #12
    9804:	18fb      	adds	r3, r7, r3
    9806:	2200      	movs	r2, #0
    9808:	601a      	str	r2, [r3, #0]
	spi.pu8OutBuf = b;
    980a:	230c      	movs	r3, #12
    980c:	18fb      	adds	r3, r7, r3
    980e:	687a      	ldr	r2, [r7, #4]
    9810:	605a      	str	r2, [r3, #4]
	spi.u16Sz = sz;
    9812:	230c      	movs	r3, #12
    9814:	18fb      	adds	r3, r7, r3
    9816:	1cba      	adds	r2, r7, #2
    9818:	8812      	ldrh	r2, [r2, #0]
    981a:	811a      	strh	r2, [r3, #8]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
    981c:	230c      	movs	r3, #12
    981e:	18fb      	adds	r3, r7, r3
    9820:	0019      	movs	r1, r3
    9822:	2003      	movs	r0, #3
    9824:	4b03      	ldr	r3, [pc, #12]	; (9834 <nmi_spi_read+0x40>)
    9826:	4798      	blx	r3
    9828:	0003      	movs	r3, r0
}
    982a:	0018      	movs	r0, r3
    982c:	46bd      	mov	sp, r7
    982e:	b006      	add	sp, #24
    9830:	bd80      	pop	{r7, pc}
    9832:	46c0      	nop			; (mov r8, r8)
    9834:	00006c21 	.word	0x00006c21

00009838 <nmi_spi_write>:

static sint8 nmi_spi_write(uint8* b, uint16 sz)
{
    9838:	b580      	push	{r7, lr}
    983a:	b086      	sub	sp, #24
    983c:	af00      	add	r7, sp, #0
    983e:	6078      	str	r0, [r7, #4]
    9840:	000a      	movs	r2, r1
    9842:	1cbb      	adds	r3, r7, #2
    9844:	801a      	strh	r2, [r3, #0]
	tstrNmSpiRw spi;
	spi.pu8InBuf = b;
    9846:	230c      	movs	r3, #12
    9848:	18fb      	adds	r3, r7, r3
    984a:	687a      	ldr	r2, [r7, #4]
    984c:	601a      	str	r2, [r3, #0]
	spi.pu8OutBuf = NULL;
    984e:	230c      	movs	r3, #12
    9850:	18fb      	adds	r3, r7, r3
    9852:	2200      	movs	r2, #0
    9854:	605a      	str	r2, [r3, #4]
	spi.u16Sz = sz;
    9856:	230c      	movs	r3, #12
    9858:	18fb      	adds	r3, r7, r3
    985a:	1cba      	adds	r2, r7, #2
    985c:	8812      	ldrh	r2, [r2, #0]
    985e:	811a      	strh	r2, [r3, #8]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
    9860:	230c      	movs	r3, #12
    9862:	18fb      	adds	r3, r7, r3
    9864:	0019      	movs	r1, r3
    9866:	2003      	movs	r0, #3
    9868:	4b03      	ldr	r3, [pc, #12]	; (9878 <nmi_spi_write+0x40>)
    986a:	4798      	blx	r3
    986c:	0003      	movs	r3, r0
}
    986e:	0018      	movs	r0, r3
    9870:	46bd      	mov	sp, r7
    9872:	b006      	add	sp, #24
    9874:	bd80      	pop	{r7, pc}
    9876:	46c0      	nop			; (mov r8, r8)
    9878:	00006c21 	.word	0x00006c21

0000987c <crc7_byte>:
	0x46, 0x4f, 0x54, 0x5d, 0x62, 0x6b, 0x70, 0x79
};


static uint8 crc7_byte(uint8 crc, uint8 data)
{
    987c:	b580      	push	{r7, lr}
    987e:	b082      	sub	sp, #8
    9880:	af00      	add	r7, sp, #0
    9882:	0002      	movs	r2, r0
    9884:	1dfb      	adds	r3, r7, #7
    9886:	701a      	strb	r2, [r3, #0]
    9888:	1dbb      	adds	r3, r7, #6
    988a:	1c0a      	adds	r2, r1, #0
    988c:	701a      	strb	r2, [r3, #0]
	return crc7_syndrome_table[(crc << 1) ^ data];
    988e:	1dfb      	adds	r3, r7, #7
    9890:	781b      	ldrb	r3, [r3, #0]
    9892:	005a      	lsls	r2, r3, #1
    9894:	1dbb      	adds	r3, r7, #6
    9896:	781b      	ldrb	r3, [r3, #0]
    9898:	4053      	eors	r3, r2
    989a:	4a03      	ldr	r2, [pc, #12]	; (98a8 <crc7_byte+0x2c>)
    989c:	5cd3      	ldrb	r3, [r2, r3]
}
    989e:	0018      	movs	r0, r3
    98a0:	46bd      	mov	sp, r7
    98a2:	b002      	add	sp, #8
    98a4:	bd80      	pop	{r7, pc}
    98a6:	46c0      	nop			; (mov r8, r8)
    98a8:	00020220 	.word	0x00020220

000098ac <crc7>:

static uint8 crc7(uint8 crc, const uint8 *buffer, uint32 len)
{
    98ac:	b590      	push	{r4, r7, lr}
    98ae:	b085      	sub	sp, #20
    98b0:	af00      	add	r7, sp, #0
    98b2:	60b9      	str	r1, [r7, #8]
    98b4:	607a      	str	r2, [r7, #4]
    98b6:	230f      	movs	r3, #15
    98b8:	18fb      	adds	r3, r7, r3
    98ba:	1c02      	adds	r2, r0, #0
    98bc:	701a      	strb	r2, [r3, #0]
	while (len--)
    98be:	e00e      	b.n	98de <crc7+0x32>
		crc = crc7_byte(crc, *buffer++);
    98c0:	68bb      	ldr	r3, [r7, #8]
    98c2:	1c5a      	adds	r2, r3, #1
    98c4:	60ba      	str	r2, [r7, #8]
    98c6:	781a      	ldrb	r2, [r3, #0]
    98c8:	230f      	movs	r3, #15
    98ca:	18fc      	adds	r4, r7, r3
    98cc:	230f      	movs	r3, #15
    98ce:	18fb      	adds	r3, r7, r3
    98d0:	781b      	ldrb	r3, [r3, #0]
    98d2:	0011      	movs	r1, r2
    98d4:	0018      	movs	r0, r3
    98d6:	4b08      	ldr	r3, [pc, #32]	; (98f8 <crc7+0x4c>)
    98d8:	4798      	blx	r3
    98da:	0003      	movs	r3, r0
    98dc:	7023      	strb	r3, [r4, #0]
	while (len--)
    98de:	687b      	ldr	r3, [r7, #4]
    98e0:	1e5a      	subs	r2, r3, #1
    98e2:	607a      	str	r2, [r7, #4]
    98e4:	2b00      	cmp	r3, #0
    98e6:	d1eb      	bne.n	98c0 <crc7+0x14>
	return crc;
    98e8:	230f      	movs	r3, #15
    98ea:	18fb      	adds	r3, r7, r3
    98ec:	781b      	ldrb	r3, [r3, #0]
}
    98ee:	0018      	movs	r0, r3
    98f0:	46bd      	mov	sp, r7
    98f2:	b005      	add	sp, #20
    98f4:	bd90      	pop	{r4, r7, pc}
    98f6:	46c0      	nop			; (mov r8, r8)
    98f8:	0000987d 	.word	0x0000987d

000098fc <spi_cmd>:
#define DATA_PKT_SZ_4K			(4 * 1024)
#define DATA_PKT_SZ_8K			(8 * 1024)
#define DATA_PKT_SZ				DATA_PKT_SZ_8K

static sint8 spi_cmd(uint8 cmd, uint32 adr, uint32 u32data, uint32 sz,uint8 clockless)
{
    98fc:	b590      	push	{r4, r7, lr}
    98fe:	b089      	sub	sp, #36	; 0x24
    9900:	af00      	add	r7, sp, #0
    9902:	60b9      	str	r1, [r7, #8]
    9904:	607a      	str	r2, [r7, #4]
    9906:	603b      	str	r3, [r7, #0]
    9908:	230f      	movs	r3, #15
    990a:	18fb      	adds	r3, r7, r3
    990c:	1c02      	adds	r2, r0, #0
    990e:	701a      	strb	r2, [r3, #0]
	uint8 bc[9];
	uint8 len = 5;
    9910:	231f      	movs	r3, #31
    9912:	18fb      	adds	r3, r7, r3
    9914:	2205      	movs	r2, #5
    9916:	701a      	strb	r2, [r3, #0]
	sint8 result = N_OK;
    9918:	231e      	movs	r3, #30
    991a:	18fb      	adds	r3, r7, r3
    991c:	2201      	movs	r2, #1
    991e:	701a      	strb	r2, [r3, #0]

	bc[0] = cmd;
    9920:	2314      	movs	r3, #20
    9922:	18fb      	adds	r3, r7, r3
    9924:	220f      	movs	r2, #15
    9926:	18ba      	adds	r2, r7, r2
    9928:	7812      	ldrb	r2, [r2, #0]
    992a:	701a      	strb	r2, [r3, #0]
	switch (cmd) {
    992c:	230f      	movs	r3, #15
    992e:	18fb      	adds	r3, r7, r3
    9930:	781b      	ldrb	r3, [r3, #0]
    9932:	3bc1      	subs	r3, #193	; 0xc1
    9934:	2b0e      	cmp	r3, #14
    9936:	d900      	bls.n	993a <spi_cmd+0x3e>
    9938:	e11b      	b.n	9b72 <spi_cmd+0x276>
    993a:	009a      	lsls	r2, r3, #2
    993c:	4bb6      	ldr	r3, [pc, #728]	; (9c18 <spi_cmd+0x31c>)
    993e:	18d3      	adds	r3, r2, r3
    9940:	681b      	ldr	r3, [r3, #0]
    9942:	469f      	mov	pc, r3
	case CMD_SINGLE_READ:				/* single word (4 bytes) read */
		bc[1] = (uint8)(adr >> 16);
    9944:	68bb      	ldr	r3, [r7, #8]
    9946:	0c1b      	lsrs	r3, r3, #16
    9948:	b2da      	uxtb	r2, r3
    994a:	2314      	movs	r3, #20
    994c:	18fb      	adds	r3, r7, r3
    994e:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)(adr >> 8);
    9950:	68bb      	ldr	r3, [r7, #8]
    9952:	0a1b      	lsrs	r3, r3, #8
    9954:	b2da      	uxtb	r2, r3
    9956:	2314      	movs	r3, #20
    9958:	18fb      	adds	r3, r7, r3
    995a:	709a      	strb	r2, [r3, #2]
		bc[3] = (uint8)adr;
    995c:	68bb      	ldr	r3, [r7, #8]
    995e:	b2da      	uxtb	r2, r3
    9960:	2314      	movs	r3, #20
    9962:	18fb      	adds	r3, r7, r3
    9964:	70da      	strb	r2, [r3, #3]
		len = 5;
    9966:	231f      	movs	r3, #31
    9968:	18fb      	adds	r3, r7, r3
    996a:	2205      	movs	r2, #5
    996c:	701a      	strb	r2, [r3, #0]
		break;
    996e:	e105      	b.n	9b7c <spi_cmd+0x280>
	case CMD_INTERNAL_READ:			/* internal register read */
		bc[1] = (uint8)(adr >> 8);
    9970:	68bb      	ldr	r3, [r7, #8]
    9972:	0a1b      	lsrs	r3, r3, #8
    9974:	b2da      	uxtb	r2, r3
    9976:	2314      	movs	r3, #20
    9978:	18fb      	adds	r3, r7, r3
    997a:	705a      	strb	r2, [r3, #1]
		if(clockless)  bc[1] |= (1 << 7);
    997c:	2330      	movs	r3, #48	; 0x30
    997e:	18fb      	adds	r3, r7, r3
    9980:	781b      	ldrb	r3, [r3, #0]
    9982:	2b00      	cmp	r3, #0
    9984:	d009      	beq.n	999a <spi_cmd+0x9e>
    9986:	2314      	movs	r3, #20
    9988:	18fb      	adds	r3, r7, r3
    998a:	785b      	ldrb	r3, [r3, #1]
    998c:	2280      	movs	r2, #128	; 0x80
    998e:	4252      	negs	r2, r2
    9990:	4313      	orrs	r3, r2
    9992:	b2da      	uxtb	r2, r3
    9994:	2314      	movs	r3, #20
    9996:	18fb      	adds	r3, r7, r3
    9998:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)adr;
    999a:	68bb      	ldr	r3, [r7, #8]
    999c:	b2da      	uxtb	r2, r3
    999e:	2314      	movs	r3, #20
    99a0:	18fb      	adds	r3, r7, r3
    99a2:	709a      	strb	r2, [r3, #2]
		bc[3] = 0x00;
    99a4:	2314      	movs	r3, #20
    99a6:	18fb      	adds	r3, r7, r3
    99a8:	2200      	movs	r2, #0
    99aa:	70da      	strb	r2, [r3, #3]
		len = 5;
    99ac:	231f      	movs	r3, #31
    99ae:	18fb      	adds	r3, r7, r3
    99b0:	2205      	movs	r2, #5
    99b2:	701a      	strb	r2, [r3, #0]
		break;
    99b4:	e0e2      	b.n	9b7c <spi_cmd+0x280>
	case CMD_TERMINATE:					/* termination */
		bc[1] = 0x00;
    99b6:	2314      	movs	r3, #20
    99b8:	18fb      	adds	r3, r7, r3
    99ba:	2200      	movs	r2, #0
    99bc:	705a      	strb	r2, [r3, #1]
		bc[2] = 0x00;
    99be:	2314      	movs	r3, #20
    99c0:	18fb      	adds	r3, r7, r3
    99c2:	2200      	movs	r2, #0
    99c4:	709a      	strb	r2, [r3, #2]
		bc[3] = 0x00;
    99c6:	2314      	movs	r3, #20
    99c8:	18fb      	adds	r3, r7, r3
    99ca:	2200      	movs	r2, #0
    99cc:	70da      	strb	r2, [r3, #3]
		len = 5;
    99ce:	231f      	movs	r3, #31
    99d0:	18fb      	adds	r3, r7, r3
    99d2:	2205      	movs	r2, #5
    99d4:	701a      	strb	r2, [r3, #0]
		break;
    99d6:	e0d1      	b.n	9b7c <spi_cmd+0x280>
	case CMD_REPEAT:						/* repeat */
		bc[1] = 0x00;
    99d8:	2314      	movs	r3, #20
    99da:	18fb      	adds	r3, r7, r3
    99dc:	2200      	movs	r2, #0
    99de:	705a      	strb	r2, [r3, #1]
		bc[2] = 0x00;
    99e0:	2314      	movs	r3, #20
    99e2:	18fb      	adds	r3, r7, r3
    99e4:	2200      	movs	r2, #0
    99e6:	709a      	strb	r2, [r3, #2]
		bc[3] = 0x00;
    99e8:	2314      	movs	r3, #20
    99ea:	18fb      	adds	r3, r7, r3
    99ec:	2200      	movs	r2, #0
    99ee:	70da      	strb	r2, [r3, #3]
		len = 5;
    99f0:	231f      	movs	r3, #31
    99f2:	18fb      	adds	r3, r7, r3
    99f4:	2205      	movs	r2, #5
    99f6:	701a      	strb	r2, [r3, #0]
		break;
    99f8:	e0c0      	b.n	9b7c <spi_cmd+0x280>
	case CMD_RESET:							/* reset */
		bc[1] = 0xff;
    99fa:	2314      	movs	r3, #20
    99fc:	18fb      	adds	r3, r7, r3
    99fe:	22ff      	movs	r2, #255	; 0xff
    9a00:	705a      	strb	r2, [r3, #1]
		bc[2] = 0xff;
    9a02:	2314      	movs	r3, #20
    9a04:	18fb      	adds	r3, r7, r3
    9a06:	22ff      	movs	r2, #255	; 0xff
    9a08:	709a      	strb	r2, [r3, #2]
		bc[3] = 0xff;
    9a0a:	2314      	movs	r3, #20
    9a0c:	18fb      	adds	r3, r7, r3
    9a0e:	22ff      	movs	r2, #255	; 0xff
    9a10:	70da      	strb	r2, [r3, #3]
		len = 5;
    9a12:	231f      	movs	r3, #31
    9a14:	18fb      	adds	r3, r7, r3
    9a16:	2205      	movs	r2, #5
    9a18:	701a      	strb	r2, [r3, #0]
		break;
    9a1a:	e0af      	b.n	9b7c <spi_cmd+0x280>
	case CMD_DMA_WRITE:					/* dma write */
	case CMD_DMA_READ:					/* dma read */
		bc[1] = (uint8)(adr >> 16);
    9a1c:	68bb      	ldr	r3, [r7, #8]
    9a1e:	0c1b      	lsrs	r3, r3, #16
    9a20:	b2da      	uxtb	r2, r3
    9a22:	2314      	movs	r3, #20
    9a24:	18fb      	adds	r3, r7, r3
    9a26:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)(adr >> 8);
    9a28:	68bb      	ldr	r3, [r7, #8]
    9a2a:	0a1b      	lsrs	r3, r3, #8
    9a2c:	b2da      	uxtb	r2, r3
    9a2e:	2314      	movs	r3, #20
    9a30:	18fb      	adds	r3, r7, r3
    9a32:	709a      	strb	r2, [r3, #2]
		bc[3] = (uint8)adr;
    9a34:	68bb      	ldr	r3, [r7, #8]
    9a36:	b2da      	uxtb	r2, r3
    9a38:	2314      	movs	r3, #20
    9a3a:	18fb      	adds	r3, r7, r3
    9a3c:	70da      	strb	r2, [r3, #3]
		bc[4] = (uint8)(sz >> 8);
    9a3e:	683b      	ldr	r3, [r7, #0]
    9a40:	0a1b      	lsrs	r3, r3, #8
    9a42:	b2da      	uxtb	r2, r3
    9a44:	2314      	movs	r3, #20
    9a46:	18fb      	adds	r3, r7, r3
    9a48:	711a      	strb	r2, [r3, #4]
		bc[5] = (uint8)(sz);
    9a4a:	683b      	ldr	r3, [r7, #0]
    9a4c:	b2da      	uxtb	r2, r3
    9a4e:	2314      	movs	r3, #20
    9a50:	18fb      	adds	r3, r7, r3
    9a52:	715a      	strb	r2, [r3, #5]
		len = 7;
    9a54:	231f      	movs	r3, #31
    9a56:	18fb      	adds	r3, r7, r3
    9a58:	2207      	movs	r2, #7
    9a5a:	701a      	strb	r2, [r3, #0]
		break;
    9a5c:	e08e      	b.n	9b7c <spi_cmd+0x280>
	case CMD_DMA_EXT_WRITE:		/* dma extended write */
	case CMD_DMA_EXT_READ:			/* dma extended read */
		bc[1] = (uint8)(adr >> 16);
    9a5e:	68bb      	ldr	r3, [r7, #8]
    9a60:	0c1b      	lsrs	r3, r3, #16
    9a62:	b2da      	uxtb	r2, r3
    9a64:	2314      	movs	r3, #20
    9a66:	18fb      	adds	r3, r7, r3
    9a68:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)(adr >> 8);
    9a6a:	68bb      	ldr	r3, [r7, #8]
    9a6c:	0a1b      	lsrs	r3, r3, #8
    9a6e:	b2da      	uxtb	r2, r3
    9a70:	2314      	movs	r3, #20
    9a72:	18fb      	adds	r3, r7, r3
    9a74:	709a      	strb	r2, [r3, #2]
		bc[3] = (uint8)adr;
    9a76:	68bb      	ldr	r3, [r7, #8]
    9a78:	b2da      	uxtb	r2, r3
    9a7a:	2314      	movs	r3, #20
    9a7c:	18fb      	adds	r3, r7, r3
    9a7e:	70da      	strb	r2, [r3, #3]
		bc[4] = (uint8)(sz >> 16);
    9a80:	683b      	ldr	r3, [r7, #0]
    9a82:	0c1b      	lsrs	r3, r3, #16
    9a84:	b2da      	uxtb	r2, r3
    9a86:	2314      	movs	r3, #20
    9a88:	18fb      	adds	r3, r7, r3
    9a8a:	711a      	strb	r2, [r3, #4]
		bc[5] = (uint8)(sz >> 8);
    9a8c:	683b      	ldr	r3, [r7, #0]
    9a8e:	0a1b      	lsrs	r3, r3, #8
    9a90:	b2da      	uxtb	r2, r3
    9a92:	2314      	movs	r3, #20
    9a94:	18fb      	adds	r3, r7, r3
    9a96:	715a      	strb	r2, [r3, #5]
		bc[6] = (uint8)(sz);
    9a98:	683b      	ldr	r3, [r7, #0]
    9a9a:	b2da      	uxtb	r2, r3
    9a9c:	2314      	movs	r3, #20
    9a9e:	18fb      	adds	r3, r7, r3
    9aa0:	719a      	strb	r2, [r3, #6]
		len = 8;
    9aa2:	231f      	movs	r3, #31
    9aa4:	18fb      	adds	r3, r7, r3
    9aa6:	2208      	movs	r2, #8
    9aa8:	701a      	strb	r2, [r3, #0]
		break;
    9aaa:	e067      	b.n	9b7c <spi_cmd+0x280>
	case CMD_INTERNAL_WRITE:		/* internal register write */
		bc[1] = (uint8)(adr >> 8);
    9aac:	68bb      	ldr	r3, [r7, #8]
    9aae:	0a1b      	lsrs	r3, r3, #8
    9ab0:	b2da      	uxtb	r2, r3
    9ab2:	2314      	movs	r3, #20
    9ab4:	18fb      	adds	r3, r7, r3
    9ab6:	705a      	strb	r2, [r3, #1]
		if(clockless)  bc[1] |= (1 << 7);
    9ab8:	2330      	movs	r3, #48	; 0x30
    9aba:	18fb      	adds	r3, r7, r3
    9abc:	781b      	ldrb	r3, [r3, #0]
    9abe:	2b00      	cmp	r3, #0
    9ac0:	d009      	beq.n	9ad6 <spi_cmd+0x1da>
    9ac2:	2314      	movs	r3, #20
    9ac4:	18fb      	adds	r3, r7, r3
    9ac6:	785b      	ldrb	r3, [r3, #1]
    9ac8:	2280      	movs	r2, #128	; 0x80
    9aca:	4252      	negs	r2, r2
    9acc:	4313      	orrs	r3, r2
    9ace:	b2da      	uxtb	r2, r3
    9ad0:	2314      	movs	r3, #20
    9ad2:	18fb      	adds	r3, r7, r3
    9ad4:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)(adr);
    9ad6:	68bb      	ldr	r3, [r7, #8]
    9ad8:	b2da      	uxtb	r2, r3
    9ada:	2314      	movs	r3, #20
    9adc:	18fb      	adds	r3, r7, r3
    9ade:	709a      	strb	r2, [r3, #2]
		bc[3] = (uint8)(u32data >> 24);
    9ae0:	687b      	ldr	r3, [r7, #4]
    9ae2:	0e1b      	lsrs	r3, r3, #24
    9ae4:	b2da      	uxtb	r2, r3
    9ae6:	2314      	movs	r3, #20
    9ae8:	18fb      	adds	r3, r7, r3
    9aea:	70da      	strb	r2, [r3, #3]
		bc[4] = (uint8)(u32data >> 16);
    9aec:	687b      	ldr	r3, [r7, #4]
    9aee:	0c1b      	lsrs	r3, r3, #16
    9af0:	b2da      	uxtb	r2, r3
    9af2:	2314      	movs	r3, #20
    9af4:	18fb      	adds	r3, r7, r3
    9af6:	711a      	strb	r2, [r3, #4]
		bc[5] = (uint8)(u32data >> 8);
    9af8:	687b      	ldr	r3, [r7, #4]
    9afa:	0a1b      	lsrs	r3, r3, #8
    9afc:	b2da      	uxtb	r2, r3
    9afe:	2314      	movs	r3, #20
    9b00:	18fb      	adds	r3, r7, r3
    9b02:	715a      	strb	r2, [r3, #5]
		bc[6] = (uint8)(u32data);
    9b04:	687b      	ldr	r3, [r7, #4]
    9b06:	b2da      	uxtb	r2, r3
    9b08:	2314      	movs	r3, #20
    9b0a:	18fb      	adds	r3, r7, r3
    9b0c:	719a      	strb	r2, [r3, #6]
		len = 8;
    9b0e:	231f      	movs	r3, #31
    9b10:	18fb      	adds	r3, r7, r3
    9b12:	2208      	movs	r2, #8
    9b14:	701a      	strb	r2, [r3, #0]
		break;
    9b16:	e031      	b.n	9b7c <spi_cmd+0x280>
	case CMD_SINGLE_WRITE:			/* single word write */
		bc[1] = (uint8)(adr >> 16);
    9b18:	68bb      	ldr	r3, [r7, #8]
    9b1a:	0c1b      	lsrs	r3, r3, #16
    9b1c:	b2da      	uxtb	r2, r3
    9b1e:	2314      	movs	r3, #20
    9b20:	18fb      	adds	r3, r7, r3
    9b22:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)(adr >> 8);
    9b24:	68bb      	ldr	r3, [r7, #8]
    9b26:	0a1b      	lsrs	r3, r3, #8
    9b28:	b2da      	uxtb	r2, r3
    9b2a:	2314      	movs	r3, #20
    9b2c:	18fb      	adds	r3, r7, r3
    9b2e:	709a      	strb	r2, [r3, #2]
		bc[3] = (uint8)(adr);
    9b30:	68bb      	ldr	r3, [r7, #8]
    9b32:	b2da      	uxtb	r2, r3
    9b34:	2314      	movs	r3, #20
    9b36:	18fb      	adds	r3, r7, r3
    9b38:	70da      	strb	r2, [r3, #3]
		bc[4] = (uint8)(u32data >> 24);
    9b3a:	687b      	ldr	r3, [r7, #4]
    9b3c:	0e1b      	lsrs	r3, r3, #24
    9b3e:	b2da      	uxtb	r2, r3
    9b40:	2314      	movs	r3, #20
    9b42:	18fb      	adds	r3, r7, r3
    9b44:	711a      	strb	r2, [r3, #4]
		bc[5] = (uint8)(u32data >> 16);
    9b46:	687b      	ldr	r3, [r7, #4]
    9b48:	0c1b      	lsrs	r3, r3, #16
    9b4a:	b2da      	uxtb	r2, r3
    9b4c:	2314      	movs	r3, #20
    9b4e:	18fb      	adds	r3, r7, r3
    9b50:	715a      	strb	r2, [r3, #5]
		bc[6] = (uint8)(u32data >> 8);
    9b52:	687b      	ldr	r3, [r7, #4]
    9b54:	0a1b      	lsrs	r3, r3, #8
    9b56:	b2da      	uxtb	r2, r3
    9b58:	2314      	movs	r3, #20
    9b5a:	18fb      	adds	r3, r7, r3
    9b5c:	719a      	strb	r2, [r3, #6]
		bc[7] = (uint8)(u32data);
    9b5e:	687b      	ldr	r3, [r7, #4]
    9b60:	b2da      	uxtb	r2, r3
    9b62:	2314      	movs	r3, #20
    9b64:	18fb      	adds	r3, r7, r3
    9b66:	71da      	strb	r2, [r3, #7]
		len = 9;
    9b68:	231f      	movs	r3, #31
    9b6a:	18fb      	adds	r3, r7, r3
    9b6c:	2209      	movs	r2, #9
    9b6e:	701a      	strb	r2, [r3, #0]
		break;
    9b70:	e004      	b.n	9b7c <spi_cmd+0x280>
	default:
		result = N_FAIL;
    9b72:	231e      	movs	r3, #30
    9b74:	18fb      	adds	r3, r7, r3
    9b76:	2200      	movs	r2, #0
    9b78:	701a      	strb	r2, [r3, #0]
		break;
    9b7a:	46c0      	nop			; (mov r8, r8)
	}

	if (result) {
    9b7c:	231e      	movs	r3, #30
    9b7e:	18fb      	adds	r3, r7, r3
    9b80:	781b      	ldrb	r3, [r3, #0]
    9b82:	b25b      	sxtb	r3, r3
    9b84:	2b00      	cmp	r3, #0
    9b86:	d03f      	beq.n	9c08 <spi_cmd+0x30c>
		if (!gu8Crc_off)
    9b88:	4b24      	ldr	r3, [pc, #144]	; (9c1c <spi_cmd+0x320>)
    9b8a:	781b      	ldrb	r3, [r3, #0]
    9b8c:	2b00      	cmp	r3, #0
    9b8e:	d115      	bne.n	9bbc <spi_cmd+0x2c0>
			bc[len-1] = (crc7(0x7f, (const uint8 *)&bc[0], len-1)) << 1;
    9b90:	231f      	movs	r3, #31
    9b92:	18fb      	adds	r3, r7, r3
    9b94:	781b      	ldrb	r3, [r3, #0]
    9b96:	1e5c      	subs	r4, r3, #1
    9b98:	231f      	movs	r3, #31
    9b9a:	18fb      	adds	r3, r7, r3
    9b9c:	781b      	ldrb	r3, [r3, #0]
    9b9e:	3b01      	subs	r3, #1
    9ba0:	001a      	movs	r2, r3
    9ba2:	2314      	movs	r3, #20
    9ba4:	18fb      	adds	r3, r7, r3
    9ba6:	0019      	movs	r1, r3
    9ba8:	207f      	movs	r0, #127	; 0x7f
    9baa:	4b1d      	ldr	r3, [pc, #116]	; (9c20 <spi_cmd+0x324>)
    9bac:	4798      	blx	r3
    9bae:	0003      	movs	r3, r0
    9bb0:	18db      	adds	r3, r3, r3
    9bb2:	b2da      	uxtb	r2, r3
    9bb4:	2314      	movs	r3, #20
    9bb6:	18fb      	adds	r3, r7, r3
    9bb8:	551a      	strb	r2, [r3, r4]
    9bba:	e006      	b.n	9bca <spi_cmd+0x2ce>
		else
			len-=1;
    9bbc:	231f      	movs	r3, #31
    9bbe:	18fb      	adds	r3, r7, r3
    9bc0:	221f      	movs	r2, #31
    9bc2:	18ba      	adds	r2, r7, r2
    9bc4:	7812      	ldrb	r2, [r2, #0]
    9bc6:	3a01      	subs	r2, #1
    9bc8:	701a      	strb	r2, [r3, #0]

		if (M2M_SUCCESS != nmi_spi_write(bc, len)) {
    9bca:	231f      	movs	r3, #31
    9bcc:	18fb      	adds	r3, r7, r3
    9bce:	781b      	ldrb	r3, [r3, #0]
    9bd0:	b29a      	uxth	r2, r3
    9bd2:	2314      	movs	r3, #20
    9bd4:	18fb      	adds	r3, r7, r3
    9bd6:	0011      	movs	r1, r2
    9bd8:	0018      	movs	r0, r3
    9bda:	4b12      	ldr	r3, [pc, #72]	; (9c24 <spi_cmd+0x328>)
    9bdc:	4798      	blx	r3
    9bde:	1e03      	subs	r3, r0, #0
    9be0:	d012      	beq.n	9c08 <spi_cmd+0x30c>
			M2M_ERR("[nmi spi]: Failed cmd write, bus error...\n");
    9be2:	2328      	movs	r3, #40	; 0x28
    9be4:	33ff      	adds	r3, #255	; 0xff
    9be6:	001a      	movs	r2, r3
    9be8:	490f      	ldr	r1, [pc, #60]	; (9c28 <spi_cmd+0x32c>)
    9bea:	4b10      	ldr	r3, [pc, #64]	; (9c2c <spi_cmd+0x330>)
    9bec:	0018      	movs	r0, r3
    9bee:	4b10      	ldr	r3, [pc, #64]	; (9c30 <spi_cmd+0x334>)
    9bf0:	4798      	blx	r3
    9bf2:	4b10      	ldr	r3, [pc, #64]	; (9c34 <spi_cmd+0x338>)
    9bf4:	0018      	movs	r0, r3
    9bf6:	4b10      	ldr	r3, [pc, #64]	; (9c38 <spi_cmd+0x33c>)
    9bf8:	4798      	blx	r3
    9bfa:	200d      	movs	r0, #13
    9bfc:	4b0f      	ldr	r3, [pc, #60]	; (9c3c <spi_cmd+0x340>)
    9bfe:	4798      	blx	r3
			result = N_FAIL;
    9c00:	231e      	movs	r3, #30
    9c02:	18fb      	adds	r3, r7, r3
    9c04:	2200      	movs	r2, #0
    9c06:	701a      	strb	r2, [r3, #0]
		}
	}

	return result;
    9c08:	231e      	movs	r3, #30
    9c0a:	18fb      	adds	r3, r7, r3
    9c0c:	781b      	ldrb	r3, [r3, #0]
    9c0e:	b25b      	sxtb	r3, r3
}
    9c10:	0018      	movs	r0, r3
    9c12:	46bd      	mov	sp, r7
    9c14:	b009      	add	sp, #36	; 0x24
    9c16:	bd90      	pop	{r4, r7, pc}
    9c18:	00020878 	.word	0x00020878
    9c1c:	20000554 	.word	0x20000554
    9c20:	000098ad 	.word	0x000098ad
    9c24:	00009839 	.word	0x00009839
    9c28:	000208b4 	.word	0x000208b4
    9c2c:	00020320 	.word	0x00020320
    9c30:	0001c2d5 	.word	0x0001c2d5
    9c34:	00020334 	.word	0x00020334
    9c38:	0001c3f1 	.word	0x0001c3f1
    9c3c:	0001c309 	.word	0x0001c309

00009c40 <spi_data_rsp>:

static sint8 spi_data_rsp(uint8 cmd)
{
    9c40:	b590      	push	{r4, r7, lr}
    9c42:	b085      	sub	sp, #20
    9c44:	af00      	add	r7, sp, #0
    9c46:	0002      	movs	r2, r0
    9c48:	1dfb      	adds	r3, r7, #7
    9c4a:	701a      	strb	r2, [r3, #0]
	uint8 len;
	uint8 rsp[3];
	sint8 result = N_OK;
    9c4c:	230e      	movs	r3, #14
    9c4e:	18fb      	adds	r3, r7, r3
    9c50:	2201      	movs	r2, #1
    9c52:	701a      	strb	r2, [r3, #0]

    if (!gu8Crc_off)
    9c54:	4b31      	ldr	r3, [pc, #196]	; (9d1c <spi_data_rsp+0xdc>)
    9c56:	781b      	ldrb	r3, [r3, #0]
    9c58:	2b00      	cmp	r3, #0
    9c5a:	d104      	bne.n	9c66 <spi_data_rsp+0x26>
		len = 2;
    9c5c:	230f      	movs	r3, #15
    9c5e:	18fb      	adds	r3, r7, r3
    9c60:	2202      	movs	r2, #2
    9c62:	701a      	strb	r2, [r3, #0]
    9c64:	e003      	b.n	9c6e <spi_data_rsp+0x2e>
	else
		len = 3;
    9c66:	230f      	movs	r3, #15
    9c68:	18fb      	adds	r3, r7, r3
    9c6a:	2203      	movs	r2, #3
    9c6c:	701a      	strb	r2, [r3, #0]

	if (M2M_SUCCESS != nmi_spi_read(&rsp[0], len)) {
    9c6e:	230f      	movs	r3, #15
    9c70:	18fb      	adds	r3, r7, r3
    9c72:	781b      	ldrb	r3, [r3, #0]
    9c74:	b29a      	uxth	r2, r3
    9c76:	2308      	movs	r3, #8
    9c78:	18fb      	adds	r3, r7, r3
    9c7a:	0011      	movs	r1, r2
    9c7c:	0018      	movs	r0, r3
    9c7e:	4b28      	ldr	r3, [pc, #160]	; (9d20 <spi_data_rsp+0xe0>)
    9c80:	4798      	blx	r3
    9c82:	1e03      	subs	r3, r0, #0
    9c84:	d013      	beq.n	9cae <spi_data_rsp+0x6e>
		M2M_ERR("[nmi spi]: Failed bus error...\n");
    9c86:	233c      	movs	r3, #60	; 0x3c
    9c88:	33ff      	adds	r3, #255	; 0xff
    9c8a:	001a      	movs	r2, r3
    9c8c:	4925      	ldr	r1, [pc, #148]	; (9d24 <spi_data_rsp+0xe4>)
    9c8e:	4b26      	ldr	r3, [pc, #152]	; (9d28 <spi_data_rsp+0xe8>)
    9c90:	0018      	movs	r0, r3
    9c92:	4b26      	ldr	r3, [pc, #152]	; (9d2c <spi_data_rsp+0xec>)
    9c94:	4798      	blx	r3
    9c96:	4b26      	ldr	r3, [pc, #152]	; (9d30 <spi_data_rsp+0xf0>)
    9c98:	0018      	movs	r0, r3
    9c9a:	4b26      	ldr	r3, [pc, #152]	; (9d34 <spi_data_rsp+0xf4>)
    9c9c:	4798      	blx	r3
    9c9e:	200d      	movs	r0, #13
    9ca0:	4b25      	ldr	r3, [pc, #148]	; (9d38 <spi_data_rsp+0xf8>)
    9ca2:	4798      	blx	r3
		result = N_FAIL;
    9ca4:	230e      	movs	r3, #14
    9ca6:	18fb      	adds	r3, r7, r3
    9ca8:	2200      	movs	r2, #0
    9caa:	701a      	strb	r2, [r3, #0]
		goto _fail_;
    9cac:	e02e      	b.n	9d0c <spi_data_rsp+0xcc>
	}
		
	if((rsp[len-1] != 0)||(rsp[len-2] != 0xC3))
    9cae:	230f      	movs	r3, #15
    9cb0:	18fb      	adds	r3, r7, r3
    9cb2:	781b      	ldrb	r3, [r3, #0]
    9cb4:	3b01      	subs	r3, #1
    9cb6:	2208      	movs	r2, #8
    9cb8:	18ba      	adds	r2, r7, r2
    9cba:	5cd3      	ldrb	r3, [r2, r3]
    9cbc:	2b00      	cmp	r3, #0
    9cbe:	d108      	bne.n	9cd2 <spi_data_rsp+0x92>
    9cc0:	230f      	movs	r3, #15
    9cc2:	18fb      	adds	r3, r7, r3
    9cc4:	781b      	ldrb	r3, [r3, #0]
    9cc6:	3b02      	subs	r3, #2
    9cc8:	2208      	movs	r2, #8
    9cca:	18ba      	adds	r2, r7, r2
    9ccc:	5cd3      	ldrb	r3, [r2, r3]
    9cce:	2bc3      	cmp	r3, #195	; 0xc3
    9cd0:	d01c      	beq.n	9d0c <spi_data_rsp+0xcc>
	{
		M2M_ERR("[nmi spi]: Failed data response read, %x %x %x\n",rsp[0],rsp[1],rsp[2]);
    9cd2:	23a1      	movs	r3, #161	; 0xa1
    9cd4:	005a      	lsls	r2, r3, #1
    9cd6:	4913      	ldr	r1, [pc, #76]	; (9d24 <spi_data_rsp+0xe4>)
    9cd8:	4b13      	ldr	r3, [pc, #76]	; (9d28 <spi_data_rsp+0xe8>)
    9cda:	0018      	movs	r0, r3
    9cdc:	4b13      	ldr	r3, [pc, #76]	; (9d2c <spi_data_rsp+0xec>)
    9cde:	4798      	blx	r3
    9ce0:	2308      	movs	r3, #8
    9ce2:	18fb      	adds	r3, r7, r3
    9ce4:	781b      	ldrb	r3, [r3, #0]
    9ce6:	0019      	movs	r1, r3
    9ce8:	2308      	movs	r3, #8
    9cea:	18fb      	adds	r3, r7, r3
    9cec:	785b      	ldrb	r3, [r3, #1]
    9cee:	001a      	movs	r2, r3
    9cf0:	2308      	movs	r3, #8
    9cf2:	18fb      	adds	r3, r7, r3
    9cf4:	789b      	ldrb	r3, [r3, #2]
    9cf6:	4811      	ldr	r0, [pc, #68]	; (9d3c <spi_data_rsp+0xfc>)
    9cf8:	4c0c      	ldr	r4, [pc, #48]	; (9d2c <spi_data_rsp+0xec>)
    9cfa:	47a0      	blx	r4
    9cfc:	200d      	movs	r0, #13
    9cfe:	4b0e      	ldr	r3, [pc, #56]	; (9d38 <spi_data_rsp+0xf8>)
    9d00:	4798      	blx	r3
		result = N_FAIL;
    9d02:	230e      	movs	r3, #14
    9d04:	18fb      	adds	r3, r7, r3
    9d06:	2200      	movs	r2, #0
    9d08:	701a      	strb	r2, [r3, #0]
		goto _fail_;
    9d0a:	46c0      	nop			; (mov r8, r8)
	}
_fail_:

	return result;
    9d0c:	230e      	movs	r3, #14
    9d0e:	18fb      	adds	r3, r7, r3
    9d10:	781b      	ldrb	r3, [r3, #0]
    9d12:	b25b      	sxtb	r3, r3
}
    9d14:	0018      	movs	r0, r3
    9d16:	46bd      	mov	sp, r7
    9d18:	b005      	add	sp, #20
    9d1a:	bd90      	pop	{r4, r7, pc}
    9d1c:	20000554 	.word	0x20000554
    9d20:	000097f5 	.word	0x000097f5
    9d24:	000208bc 	.word	0x000208bc
    9d28:	00020320 	.word	0x00020320
    9d2c:	0001c2d5 	.word	0x0001c2d5
    9d30:	00020360 	.word	0x00020360
    9d34:	0001c3f1 	.word	0x0001c3f1
    9d38:	0001c309 	.word	0x0001c309
    9d3c:	00020380 	.word	0x00020380

00009d40 <spi_cmd_rsp>:

static sint8 spi_cmd_rsp(uint8 cmd)
{
    9d40:	b580      	push	{r7, lr}
    9d42:	b084      	sub	sp, #16
    9d44:	af00      	add	r7, sp, #0
    9d46:	0002      	movs	r2, r0
    9d48:	1dfb      	adds	r3, r7, #7
    9d4a:	701a      	strb	r2, [r3, #0]
	uint8 rsp;
	sint8 result = N_OK;
    9d4c:	230f      	movs	r3, #15
    9d4e:	18fb      	adds	r3, r7, r3
    9d50:	2201      	movs	r2, #1
    9d52:	701a      	strb	r2, [r3, #0]
	sint8 s8RetryCnt;

	/**
		Command/Control response
	**/
	if ((cmd == CMD_RESET) ||
    9d54:	1dfb      	adds	r3, r7, #7
    9d56:	781b      	ldrb	r3, [r3, #0]
    9d58:	2bcf      	cmp	r3, #207	; 0xcf
    9d5a:	d007      	beq.n	9d6c <spi_cmd_rsp+0x2c>
    9d5c:	1dfb      	adds	r3, r7, #7
    9d5e:	781b      	ldrb	r3, [r3, #0]
    9d60:	2bc5      	cmp	r3, #197	; 0xc5
    9d62:	d003      	beq.n	9d6c <spi_cmd_rsp+0x2c>
		 (cmd == CMD_TERMINATE) ||
    9d64:	1dfb      	adds	r3, r7, #7
    9d66:	781b      	ldrb	r3, [r3, #0]
    9d68:	2bc6      	cmp	r3, #198	; 0xc6
    9d6a:	d10c      	bne.n	9d86 <spi_cmd_rsp+0x46>
		 (cmd == CMD_REPEAT)) {
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    9d6c:	230d      	movs	r3, #13
    9d6e:	18fb      	adds	r3, r7, r3
    9d70:	2101      	movs	r1, #1
    9d72:	0018      	movs	r0, r3
    9d74:	4b39      	ldr	r3, [pc, #228]	; (9e5c <spi_cmd_rsp+0x11c>)
    9d76:	4798      	blx	r3
    9d78:	1e03      	subs	r3, r0, #0
    9d7a:	d004      	beq.n	9d86 <spi_cmd_rsp+0x46>
			result = N_FAIL;
    9d7c:	230f      	movs	r3, #15
    9d7e:	18fb      	adds	r3, r7, r3
    9d80:	2200      	movs	r2, #0
    9d82:	701a      	strb	r2, [r3, #0]
			goto _fail_;
    9d84:	e061      	b.n	9e4a <spi_cmd_rsp+0x10a>
		}
	}

	/* wait for response */
	s8RetryCnt = SPI_RESP_RETRY_COUNT;
    9d86:	230e      	movs	r3, #14
    9d88:	18fb      	adds	r3, r7, r3
    9d8a:	220a      	movs	r2, #10
    9d8c:	701a      	strb	r2, [r3, #0]
	do
	{
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    9d8e:	230d      	movs	r3, #13
    9d90:	18fb      	adds	r3, r7, r3
    9d92:	2101      	movs	r1, #1
    9d94:	0018      	movs	r0, r3
    9d96:	4b31      	ldr	r3, [pc, #196]	; (9e5c <spi_cmd_rsp+0x11c>)
    9d98:	4798      	blx	r3
    9d9a:	1e03      	subs	r3, r0, #0
    9d9c:	d012      	beq.n	9dc4 <spi_cmd_rsp+0x84>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
    9d9e:	23b1      	movs	r3, #177	; 0xb1
    9da0:	005a      	lsls	r2, r3, #1
    9da2:	492f      	ldr	r1, [pc, #188]	; (9e60 <spi_cmd_rsp+0x120>)
    9da4:	4b2f      	ldr	r3, [pc, #188]	; (9e64 <spi_cmd_rsp+0x124>)
    9da6:	0018      	movs	r0, r3
    9da8:	4b2f      	ldr	r3, [pc, #188]	; (9e68 <spi_cmd_rsp+0x128>)
    9daa:	4798      	blx	r3
    9dac:	4b2f      	ldr	r3, [pc, #188]	; (9e6c <spi_cmd_rsp+0x12c>)
    9dae:	0018      	movs	r0, r3
    9db0:	4b2f      	ldr	r3, [pc, #188]	; (9e70 <spi_cmd_rsp+0x130>)
    9db2:	4798      	blx	r3
    9db4:	200d      	movs	r0, #13
    9db6:	4b2f      	ldr	r3, [pc, #188]	; (9e74 <spi_cmd_rsp+0x134>)
    9db8:	4798      	blx	r3
			result = N_FAIL;
    9dba:	230f      	movs	r3, #15
    9dbc:	18fb      	adds	r3, r7, r3
    9dbe:	2200      	movs	r2, #0
    9dc0:	701a      	strb	r2, [r3, #0]
			goto _fail_;
    9dc2:	e042      	b.n	9e4a <spi_cmd_rsp+0x10a>
		}
	} while((rsp != cmd) && (s8RetryCnt-- >0));
    9dc4:	230d      	movs	r3, #13
    9dc6:	18fb      	adds	r3, r7, r3
    9dc8:	781b      	ldrb	r3, [r3, #0]
    9dca:	1dfa      	adds	r2, r7, #7
    9dcc:	7812      	ldrb	r2, [r2, #0]
    9dce:	429a      	cmp	r2, r3
    9dd0:	d00b      	beq.n	9dea <spi_cmd_rsp+0xaa>
    9dd2:	230e      	movs	r3, #14
    9dd4:	18fb      	adds	r3, r7, r3
    9dd6:	781b      	ldrb	r3, [r3, #0]
    9dd8:	b25b      	sxtb	r3, r3
    9dda:	b2da      	uxtb	r2, r3
    9ddc:	3a01      	subs	r2, #1
    9dde:	b2d1      	uxtb	r1, r2
    9de0:	220e      	movs	r2, #14
    9de2:	18ba      	adds	r2, r7, r2
    9de4:	7011      	strb	r1, [r2, #0]
    9de6:	2b00      	cmp	r3, #0
    9de8:	dcd1      	bgt.n	9d8e <spi_cmd_rsp+0x4e>

	/**
		State response
	**/
	/* wait for response */
	s8RetryCnt = SPI_RESP_RETRY_COUNT;
    9dea:	230e      	movs	r3, #14
    9dec:	18fb      	adds	r3, r7, r3
    9dee:	220a      	movs	r2, #10
    9df0:	701a      	strb	r2, [r3, #0]
	do
	{
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    9df2:	230d      	movs	r3, #13
    9df4:	18fb      	adds	r3, r7, r3
    9df6:	2101      	movs	r1, #1
    9df8:	0018      	movs	r0, r3
    9dfa:	4b18      	ldr	r3, [pc, #96]	; (9e5c <spi_cmd_rsp+0x11c>)
    9dfc:	4798      	blx	r3
    9dfe:	1e03      	subs	r3, r0, #0
    9e00:	d012      	beq.n	9e28 <spi_cmd_rsp+0xe8>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
    9e02:	23b8      	movs	r3, #184	; 0xb8
    9e04:	005a      	lsls	r2, r3, #1
    9e06:	4916      	ldr	r1, [pc, #88]	; (9e60 <spi_cmd_rsp+0x120>)
    9e08:	4b16      	ldr	r3, [pc, #88]	; (9e64 <spi_cmd_rsp+0x124>)
    9e0a:	0018      	movs	r0, r3
    9e0c:	4b16      	ldr	r3, [pc, #88]	; (9e68 <spi_cmd_rsp+0x128>)
    9e0e:	4798      	blx	r3
    9e10:	4b16      	ldr	r3, [pc, #88]	; (9e6c <spi_cmd_rsp+0x12c>)
    9e12:	0018      	movs	r0, r3
    9e14:	4b16      	ldr	r3, [pc, #88]	; (9e70 <spi_cmd_rsp+0x130>)
    9e16:	4798      	blx	r3
    9e18:	200d      	movs	r0, #13
    9e1a:	4b16      	ldr	r3, [pc, #88]	; (9e74 <spi_cmd_rsp+0x134>)
    9e1c:	4798      	blx	r3
			result = N_FAIL;
    9e1e:	230f      	movs	r3, #15
    9e20:	18fb      	adds	r3, r7, r3
    9e22:	2200      	movs	r2, #0
    9e24:	701a      	strb	r2, [r3, #0]
			goto _fail_;
    9e26:	e010      	b.n	9e4a <spi_cmd_rsp+0x10a>
		}
	} while((rsp != 0x00) && (s8RetryCnt-- >0));
    9e28:	230d      	movs	r3, #13
    9e2a:	18fb      	adds	r3, r7, r3
    9e2c:	781b      	ldrb	r3, [r3, #0]
    9e2e:	2b00      	cmp	r3, #0
    9e30:	d00b      	beq.n	9e4a <spi_cmd_rsp+0x10a>
    9e32:	230e      	movs	r3, #14
    9e34:	18fb      	adds	r3, r7, r3
    9e36:	781b      	ldrb	r3, [r3, #0]
    9e38:	b25b      	sxtb	r3, r3
    9e3a:	b2da      	uxtb	r2, r3
    9e3c:	3a01      	subs	r2, #1
    9e3e:	b2d1      	uxtb	r1, r2
    9e40:	220e      	movs	r2, #14
    9e42:	18ba      	adds	r2, r7, r2
    9e44:	7011      	strb	r1, [r2, #0]
    9e46:	2b00      	cmp	r3, #0
    9e48:	dcd3      	bgt.n	9df2 <spi_cmd_rsp+0xb2>

_fail_:

	return result;
    9e4a:	230f      	movs	r3, #15
    9e4c:	18fb      	adds	r3, r7, r3
    9e4e:	781b      	ldrb	r3, [r3, #0]
    9e50:	b25b      	sxtb	r3, r3
}
    9e52:	0018      	movs	r0, r3
    9e54:	46bd      	mov	sp, r7
    9e56:	b004      	add	sp, #16
    9e58:	bd80      	pop	{r7, pc}
    9e5a:	46c0      	nop			; (mov r8, r8)
    9e5c:	000097f5 	.word	0x000097f5
    9e60:	000208cc 	.word	0x000208cc
    9e64:	00020320 	.word	0x00020320
    9e68:	0001c2d5 	.word	0x0001c2d5
    9e6c:	000203b0 	.word	0x000203b0
    9e70:	0001c3f1 	.word	0x0001c3f1
    9e74:	0001c309 	.word	0x0001c309

00009e78 <spi_data_read>:
_error_:
	return result;
}
#endif
static sint8 spi_data_read(uint8 *b, uint16 sz,uint8 clockless)
{
    9e78:	b580      	push	{r7, lr}
    9e7a:	b086      	sub	sp, #24
    9e7c:	af00      	add	r7, sp, #0
    9e7e:	6078      	str	r0, [r7, #4]
    9e80:	0008      	movs	r0, r1
    9e82:	0011      	movs	r1, r2
    9e84:	1cbb      	adds	r3, r7, #2
    9e86:	1c02      	adds	r2, r0, #0
    9e88:	801a      	strh	r2, [r3, #0]
    9e8a:	1c7b      	adds	r3, r7, #1
    9e8c:	1c0a      	adds	r2, r1, #0
    9e8e:	701a      	strb	r2, [r3, #0]
	sint16 retry, ix, nbytes;
	sint8 result = N_OK;
    9e90:	2311      	movs	r3, #17
    9e92:	18fb      	adds	r3, r7, r3
    9e94:	2201      	movs	r2, #1
    9e96:	701a      	strb	r2, [r3, #0]
	uint8 rsp;

	/**
		Data
	**/
	ix = 0;
    9e98:	2314      	movs	r3, #20
    9e9a:	18fb      	adds	r3, r7, r3
    9e9c:	2200      	movs	r2, #0
    9e9e:	801a      	strh	r2, [r3, #0]
	do {
		if (sz <= DATA_PKT_SZ)
    9ea0:	1cbb      	adds	r3, r7, #2
    9ea2:	881a      	ldrh	r2, [r3, #0]
    9ea4:	2380      	movs	r3, #128	; 0x80
    9ea6:	019b      	lsls	r3, r3, #6
    9ea8:	429a      	cmp	r2, r3
    9eaa:	d805      	bhi.n	9eb8 <spi_data_read+0x40>
			nbytes = sz;
    9eac:	2312      	movs	r3, #18
    9eae:	18fb      	adds	r3, r7, r3
    9eb0:	1cba      	adds	r2, r7, #2
    9eb2:	8812      	ldrh	r2, [r2, #0]
    9eb4:	801a      	strh	r2, [r3, #0]
    9eb6:	e004      	b.n	9ec2 <spi_data_read+0x4a>
		else
			nbytes = DATA_PKT_SZ;
    9eb8:	2312      	movs	r3, #18
    9eba:	18fb      	adds	r3, r7, r3
    9ebc:	2280      	movs	r2, #128	; 0x80
    9ebe:	0192      	lsls	r2, r2, #6
    9ec0:	801a      	strh	r2, [r3, #0]

		/**
			Data Respnose header
		**/
		retry = SPI_RESP_RETRY_COUNT;
    9ec2:	2316      	movs	r3, #22
    9ec4:	18fb      	adds	r3, r7, r3
    9ec6:	220a      	movs	r2, #10
    9ec8:	801a      	strh	r2, [r3, #0]
		do {
			if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    9eca:	230b      	movs	r3, #11
    9ecc:	18fb      	adds	r3, r7, r3
    9ece:	2101      	movs	r1, #1
    9ed0:	0018      	movs	r0, r3
    9ed2:	4b5c      	ldr	r3, [pc, #368]	; (a044 <spi_data_read+0x1cc>)
    9ed4:	4798      	blx	r3
    9ed6:	1e03      	subs	r3, r0, #0
    9ed8:	d011      	beq.n	9efe <spi_data_read+0x86>
				M2M_ERR("[nmi spi]: Failed data response read, bus error...\n");
    9eda:	4a5b      	ldr	r2, [pc, #364]	; (a048 <spi_data_read+0x1d0>)
    9edc:	495b      	ldr	r1, [pc, #364]	; (a04c <spi_data_read+0x1d4>)
    9ede:	4b5c      	ldr	r3, [pc, #368]	; (a050 <spi_data_read+0x1d8>)
    9ee0:	0018      	movs	r0, r3
    9ee2:	4b5c      	ldr	r3, [pc, #368]	; (a054 <spi_data_read+0x1dc>)
    9ee4:	4798      	blx	r3
    9ee6:	4b5c      	ldr	r3, [pc, #368]	; (a058 <spi_data_read+0x1e0>)
    9ee8:	0018      	movs	r0, r3
    9eea:	4b5c      	ldr	r3, [pc, #368]	; (a05c <spi_data_read+0x1e4>)
    9eec:	4798      	blx	r3
    9eee:	200d      	movs	r0, #13
    9ef0:	4b5b      	ldr	r3, [pc, #364]	; (a060 <spi_data_read+0x1e8>)
    9ef2:	4798      	blx	r3
				result = N_FAIL;
    9ef4:	2311      	movs	r3, #17
    9ef6:	18fb      	adds	r3, r7, r3
    9ef8:	2200      	movs	r2, #0
    9efa:	701a      	strb	r2, [r3, #0]
				break;
    9efc:	e017      	b.n	9f2e <spi_data_read+0xb6>
			}
			if (((rsp >> 4) & 0xf) == 0xf)
    9efe:	230b      	movs	r3, #11
    9f00:	18fb      	adds	r3, r7, r3
    9f02:	781b      	ldrb	r3, [r3, #0]
    9f04:	091b      	lsrs	r3, r3, #4
    9f06:	b2db      	uxtb	r3, r3
    9f08:	001a      	movs	r2, r3
    9f0a:	230f      	movs	r3, #15
    9f0c:	4013      	ands	r3, r2
    9f0e:	2b0f      	cmp	r3, #15
    9f10:	d00c      	beq.n	9f2c <spi_data_read+0xb4>
				break;
		} while (retry--);
    9f12:	2316      	movs	r3, #22
    9f14:	18fb      	adds	r3, r7, r3
    9f16:	2200      	movs	r2, #0
    9f18:	5e9b      	ldrsh	r3, [r3, r2]
    9f1a:	b29a      	uxth	r2, r3
    9f1c:	3a01      	subs	r2, #1
    9f1e:	b291      	uxth	r1, r2
    9f20:	2216      	movs	r2, #22
    9f22:	18ba      	adds	r2, r7, r2
    9f24:	8011      	strh	r1, [r2, #0]
    9f26:	2b00      	cmp	r3, #0
    9f28:	d1cf      	bne.n	9eca <spi_data_read+0x52>
    9f2a:	e000      	b.n	9f2e <spi_data_read+0xb6>
				break;
    9f2c:	46c0      	nop			; (mov r8, r8)

		if (result == N_FAIL)
    9f2e:	2311      	movs	r3, #17
    9f30:	18fb      	adds	r3, r7, r3
    9f32:	781b      	ldrb	r3, [r3, #0]
    9f34:	b25b      	sxtb	r3, r3
    9f36:	2b00      	cmp	r3, #0
    9f38:	d100      	bne.n	9f3c <spi_data_read+0xc4>
    9f3a:	e079      	b.n	a030 <spi_data_read+0x1b8>
			break;

		if (retry <= 0) {
    9f3c:	2316      	movs	r3, #22
    9f3e:	18fb      	adds	r3, r7, r3
    9f40:	2200      	movs	r2, #0
    9f42:	5e9b      	ldrsh	r3, [r3, r2]
    9f44:	2b00      	cmp	r3, #0
    9f46:	dc16      	bgt.n	9f76 <spi_data_read+0xfe>
			M2M_ERR("[nmi spi]: Failed data response read...(%02x)\n", rsp);
    9f48:	4a46      	ldr	r2, [pc, #280]	; (a064 <spi_data_read+0x1ec>)
    9f4a:	4940      	ldr	r1, [pc, #256]	; (a04c <spi_data_read+0x1d4>)
    9f4c:	4b40      	ldr	r3, [pc, #256]	; (a050 <spi_data_read+0x1d8>)
    9f4e:	0018      	movs	r0, r3
    9f50:	4b40      	ldr	r3, [pc, #256]	; (a054 <spi_data_read+0x1dc>)
    9f52:	4798      	blx	r3
    9f54:	230b      	movs	r3, #11
    9f56:	18fb      	adds	r3, r7, r3
    9f58:	781b      	ldrb	r3, [r3, #0]
    9f5a:	001a      	movs	r2, r3
    9f5c:	4b42      	ldr	r3, [pc, #264]	; (a068 <spi_data_read+0x1f0>)
    9f5e:	0011      	movs	r1, r2
    9f60:	0018      	movs	r0, r3
    9f62:	4b3c      	ldr	r3, [pc, #240]	; (a054 <spi_data_read+0x1dc>)
    9f64:	4798      	blx	r3
    9f66:	200d      	movs	r0, #13
    9f68:	4b3d      	ldr	r3, [pc, #244]	; (a060 <spi_data_read+0x1e8>)
    9f6a:	4798      	blx	r3
			result = N_FAIL;
    9f6c:	2311      	movs	r3, #17
    9f6e:	18fb      	adds	r3, r7, r3
    9f70:	2200      	movs	r2, #0
    9f72:	701a      	strb	r2, [r3, #0]
			break;
    9f74:	e05d      	b.n	a032 <spi_data_read+0x1ba>
		}

		/**
			Read bytes
		**/
		if (M2M_SUCCESS != nmi_spi_read(&b[ix], nbytes)) {
    9f76:	2314      	movs	r3, #20
    9f78:	18fb      	adds	r3, r7, r3
    9f7a:	2200      	movs	r2, #0
    9f7c:	5e9b      	ldrsh	r3, [r3, r2]
    9f7e:	687a      	ldr	r2, [r7, #4]
    9f80:	18d2      	adds	r2, r2, r3
    9f82:	2312      	movs	r3, #18
    9f84:	18fb      	adds	r3, r7, r3
    9f86:	881b      	ldrh	r3, [r3, #0]
    9f88:	0019      	movs	r1, r3
    9f8a:	0010      	movs	r0, r2
    9f8c:	4b2d      	ldr	r3, [pc, #180]	; (a044 <spi_data_read+0x1cc>)
    9f8e:	4798      	blx	r3
    9f90:	1e03      	subs	r3, r0, #0
    9f92:	d012      	beq.n	9fba <spi_data_read+0x142>
			M2M_ERR("[nmi spi]: Failed data block read, bus error...\n");
    9f94:	23c5      	movs	r3, #197	; 0xc5
    9f96:	009a      	lsls	r2, r3, #2
    9f98:	492c      	ldr	r1, [pc, #176]	; (a04c <spi_data_read+0x1d4>)
    9f9a:	4b2d      	ldr	r3, [pc, #180]	; (a050 <spi_data_read+0x1d8>)
    9f9c:	0018      	movs	r0, r3
    9f9e:	4b2d      	ldr	r3, [pc, #180]	; (a054 <spi_data_read+0x1dc>)
    9fa0:	4798      	blx	r3
    9fa2:	4b32      	ldr	r3, [pc, #200]	; (a06c <spi_data_read+0x1f4>)
    9fa4:	0018      	movs	r0, r3
    9fa6:	4b2d      	ldr	r3, [pc, #180]	; (a05c <spi_data_read+0x1e4>)
    9fa8:	4798      	blx	r3
    9faa:	200d      	movs	r0, #13
    9fac:	4b2c      	ldr	r3, [pc, #176]	; (a060 <spi_data_read+0x1e8>)
    9fae:	4798      	blx	r3
			result = N_FAIL;
    9fb0:	2311      	movs	r3, #17
    9fb2:	18fb      	adds	r3, r7, r3
    9fb4:	2200      	movs	r2, #0
    9fb6:	701a      	strb	r2, [r3, #0]
			break;
    9fb8:	e03b      	b.n	a032 <spi_data_read+0x1ba>
		}
		if(!clockless)
    9fba:	1c7b      	adds	r3, r7, #1
    9fbc:	781b      	ldrb	r3, [r3, #0]
    9fbe:	2b00      	cmp	r3, #0
    9fc0:	d11d      	bne.n	9ffe <spi_data_read+0x186>
		{
			/**
			Read Crc
			**/
			if (!gu8Crc_off) {
    9fc2:	4b2b      	ldr	r3, [pc, #172]	; (a070 <spi_data_read+0x1f8>)
    9fc4:	781b      	ldrb	r3, [r3, #0]
    9fc6:	2b00      	cmp	r3, #0
    9fc8:	d119      	bne.n	9ffe <spi_data_read+0x186>
				if (M2M_SUCCESS != nmi_spi_read(crc, 2)) {
    9fca:	230c      	movs	r3, #12
    9fcc:	18fb      	adds	r3, r7, r3
    9fce:	2102      	movs	r1, #2
    9fd0:	0018      	movs	r0, r3
    9fd2:	4b1c      	ldr	r3, [pc, #112]	; (a044 <spi_data_read+0x1cc>)
    9fd4:	4798      	blx	r3
    9fd6:	1e03      	subs	r3, r0, #0
    9fd8:	d011      	beq.n	9ffe <spi_data_read+0x186>
					M2M_ERR("[nmi spi]: Failed data block crc read, bus error...\n");
    9fda:	4a26      	ldr	r2, [pc, #152]	; (a074 <spi_data_read+0x1fc>)
    9fdc:	491b      	ldr	r1, [pc, #108]	; (a04c <spi_data_read+0x1d4>)
    9fde:	4b1c      	ldr	r3, [pc, #112]	; (a050 <spi_data_read+0x1d8>)
    9fe0:	0018      	movs	r0, r3
    9fe2:	4b1c      	ldr	r3, [pc, #112]	; (a054 <spi_data_read+0x1dc>)
    9fe4:	4798      	blx	r3
    9fe6:	4b24      	ldr	r3, [pc, #144]	; (a078 <spi_data_read+0x200>)
    9fe8:	0018      	movs	r0, r3
    9fea:	4b1c      	ldr	r3, [pc, #112]	; (a05c <spi_data_read+0x1e4>)
    9fec:	4798      	blx	r3
    9fee:	200d      	movs	r0, #13
    9ff0:	4b1b      	ldr	r3, [pc, #108]	; (a060 <spi_data_read+0x1e8>)
    9ff2:	4798      	blx	r3
					result = N_FAIL;
    9ff4:	2311      	movs	r3, #17
    9ff6:	18fb      	adds	r3, r7, r3
    9ff8:	2200      	movs	r2, #0
    9ffa:	701a      	strb	r2, [r3, #0]
					break;
    9ffc:	e019      	b.n	a032 <spi_data_read+0x1ba>
				}
			}
		}
		ix += nbytes;
    9ffe:	2314      	movs	r3, #20
    a000:	18fb      	adds	r3, r7, r3
    a002:	881a      	ldrh	r2, [r3, #0]
    a004:	2312      	movs	r3, #18
    a006:	18fb      	adds	r3, r7, r3
    a008:	881b      	ldrh	r3, [r3, #0]
    a00a:	18d3      	adds	r3, r2, r3
    a00c:	b29a      	uxth	r2, r3
    a00e:	2314      	movs	r3, #20
    a010:	18fb      	adds	r3, r7, r3
    a012:	801a      	strh	r2, [r3, #0]
		sz -= nbytes;
    a014:	2312      	movs	r3, #18
    a016:	18fb      	adds	r3, r7, r3
    a018:	881a      	ldrh	r2, [r3, #0]
    a01a:	1cbb      	adds	r3, r7, #2
    a01c:	1cb9      	adds	r1, r7, #2
    a01e:	8809      	ldrh	r1, [r1, #0]
    a020:	1a8a      	subs	r2, r1, r2
    a022:	801a      	strh	r2, [r3, #0]

	} while (sz);
    a024:	1cbb      	adds	r3, r7, #2
    a026:	881b      	ldrh	r3, [r3, #0]
    a028:	2b00      	cmp	r3, #0
    a02a:	d000      	beq.n	a02e <spi_data_read+0x1b6>
    a02c:	e738      	b.n	9ea0 <spi_data_read+0x28>
    a02e:	e000      	b.n	a032 <spi_data_read+0x1ba>
			break;
    a030:	46c0      	nop			; (mov r8, r8)

	return result;
    a032:	2311      	movs	r3, #17
    a034:	18fb      	adds	r3, r7, r3
    a036:	781b      	ldrb	r3, [r3, #0]
    a038:	b25b      	sxtb	r3, r3
}
    a03a:	0018      	movs	r0, r3
    a03c:	46bd      	mov	sp, r7
    a03e:	b006      	add	sp, #24
    a040:	bd80      	pop	{r7, pc}
    a042:	46c0      	nop			; (mov r8, r8)
    a044:	000097f5 	.word	0x000097f5
    a048:	000002ff 	.word	0x000002ff
    a04c:	000208d8 	.word	0x000208d8
    a050:	00020320 	.word	0x00020320
    a054:	0001c2d5 	.word	0x0001c2d5
    a058:	000203e4 	.word	0x000203e4
    a05c:	0001c3f1 	.word	0x0001c3f1
    a060:	0001c309 	.word	0x0001c309
    a064:	0000030b 	.word	0x0000030b
    a068:	00020418 	.word	0x00020418
    a06c:	00020448 	.word	0x00020448
    a070:	20000554 	.word	0x20000554
    a074:	0000031f 	.word	0x0000031f
    a078:	00020478 	.word	0x00020478

0000a07c <spi_data_write>:

static sint8 spi_data_write(uint8 *b, uint16 sz)
{
    a07c:	b580      	push	{r7, lr}
    a07e:	b086      	sub	sp, #24
    a080:	af00      	add	r7, sp, #0
    a082:	6078      	str	r0, [r7, #4]
    a084:	000a      	movs	r2, r1
    a086:	1cbb      	adds	r3, r7, #2
    a088:	801a      	strh	r2, [r3, #0]
	sint16 ix;
	uint16 nbytes;
	sint8 result = 1;
    a08a:	2313      	movs	r3, #19
    a08c:	18fb      	adds	r3, r7, r3
    a08e:	2201      	movs	r2, #1
    a090:	701a      	strb	r2, [r3, #0]
	uint8 cmd, order, crc[2] = {0};
    a092:	230c      	movs	r3, #12
    a094:	18fb      	adds	r3, r7, r3
    a096:	2200      	movs	r2, #0
    a098:	801a      	strh	r2, [r3, #0]
	//uint8 rsp;

	/**
		Data
	**/
	ix = 0;
    a09a:	2316      	movs	r3, #22
    a09c:	18fb      	adds	r3, r7, r3
    a09e:	2200      	movs	r2, #0
    a0a0:	801a      	strh	r2, [r3, #0]
	do {
		if (sz <= DATA_PKT_SZ)
    a0a2:	1cbb      	adds	r3, r7, #2
    a0a4:	881a      	ldrh	r2, [r3, #0]
    a0a6:	2380      	movs	r3, #128	; 0x80
    a0a8:	019b      	lsls	r3, r3, #6
    a0aa:	429a      	cmp	r2, r3
    a0ac:	d805      	bhi.n	a0ba <spi_data_write+0x3e>
			nbytes = sz;
    a0ae:	2314      	movs	r3, #20
    a0b0:	18fb      	adds	r3, r7, r3
    a0b2:	1cba      	adds	r2, r7, #2
    a0b4:	8812      	ldrh	r2, [r2, #0]
    a0b6:	801a      	strh	r2, [r3, #0]
    a0b8:	e004      	b.n	a0c4 <spi_data_write+0x48>
		else
			nbytes = DATA_PKT_SZ;
    a0ba:	2314      	movs	r3, #20
    a0bc:	18fb      	adds	r3, r7, r3
    a0be:	2280      	movs	r2, #128	; 0x80
    a0c0:	0192      	lsls	r2, r2, #6
    a0c2:	801a      	strh	r2, [r3, #0]

		/**
			Write command
		**/
		cmd = 0xf0;
    a0c4:	2311      	movs	r3, #17
    a0c6:	18fb      	adds	r3, r7, r3
    a0c8:	22f0      	movs	r2, #240	; 0xf0
    a0ca:	701a      	strb	r2, [r3, #0]
		if (ix == 0)  {
    a0cc:	2316      	movs	r3, #22
    a0ce:	18fb      	adds	r3, r7, r3
    a0d0:	2200      	movs	r2, #0
    a0d2:	5e9b      	ldrsh	r3, [r3, r2]
    a0d4:	2b00      	cmp	r3, #0
    a0d6:	d10f      	bne.n	a0f8 <spi_data_write+0x7c>
			if (sz <= DATA_PKT_SZ)
    a0d8:	1cbb      	adds	r3, r7, #2
    a0da:	881a      	ldrh	r2, [r3, #0]
    a0dc:	2380      	movs	r3, #128	; 0x80
    a0de:	019b      	lsls	r3, r3, #6
    a0e0:	429a      	cmp	r2, r3
    a0e2:	d804      	bhi.n	a0ee <spi_data_write+0x72>
				order = 0x3;
    a0e4:	2312      	movs	r3, #18
    a0e6:	18fb      	adds	r3, r7, r3
    a0e8:	2203      	movs	r2, #3
    a0ea:	701a      	strb	r2, [r3, #0]
    a0ec:	e013      	b.n	a116 <spi_data_write+0x9a>
			else
				order = 0x1;
    a0ee:	2312      	movs	r3, #18
    a0f0:	18fb      	adds	r3, r7, r3
    a0f2:	2201      	movs	r2, #1
    a0f4:	701a      	strb	r2, [r3, #0]
    a0f6:	e00e      	b.n	a116 <spi_data_write+0x9a>
		} else {
			if (sz <= DATA_PKT_SZ)
    a0f8:	1cbb      	adds	r3, r7, #2
    a0fa:	881a      	ldrh	r2, [r3, #0]
    a0fc:	2380      	movs	r3, #128	; 0x80
    a0fe:	019b      	lsls	r3, r3, #6
    a100:	429a      	cmp	r2, r3
    a102:	d804      	bhi.n	a10e <spi_data_write+0x92>
				order = 0x3;
    a104:	2312      	movs	r3, #18
    a106:	18fb      	adds	r3, r7, r3
    a108:	2203      	movs	r2, #3
    a10a:	701a      	strb	r2, [r3, #0]
    a10c:	e003      	b.n	a116 <spi_data_write+0x9a>
			else
				order = 0x2;
    a10e:	2312      	movs	r3, #18
    a110:	18fb      	adds	r3, r7, r3
    a112:	2202      	movs	r2, #2
    a114:	701a      	strb	r2, [r3, #0]
		}
		cmd |= order;
    a116:	2311      	movs	r3, #17
    a118:	18fb      	adds	r3, r7, r3
    a11a:	781a      	ldrb	r2, [r3, #0]
    a11c:	2312      	movs	r3, #18
    a11e:	18fb      	adds	r3, r7, r3
    a120:	781b      	ldrb	r3, [r3, #0]
    a122:	4313      	orrs	r3, r2
    a124:	b2da      	uxtb	r2, r3
    a126:	2311      	movs	r3, #17
    a128:	18fb      	adds	r3, r7, r3
    a12a:	701a      	strb	r2, [r3, #0]
		if (M2M_SUCCESS != nmi_spi_write(&cmd, 1)) {
    a12c:	2311      	movs	r3, #17
    a12e:	18fb      	adds	r3, r7, r3
    a130:	2101      	movs	r1, #1
    a132:	0018      	movs	r0, r3
    a134:	4b3a      	ldr	r3, [pc, #232]	; (a220 <spi_data_write+0x1a4>)
    a136:	4798      	blx	r3
    a138:	1e03      	subs	r3, r0, #0
    a13a:	d012      	beq.n	a162 <spi_data_write+0xe6>
			M2M_ERR("[nmi spi]: Failed data block cmd write, bus error...\n");
    a13c:	23d4      	movs	r3, #212	; 0xd4
    a13e:	009a      	lsls	r2, r3, #2
    a140:	4938      	ldr	r1, [pc, #224]	; (a224 <spi_data_write+0x1a8>)
    a142:	4b39      	ldr	r3, [pc, #228]	; (a228 <spi_data_write+0x1ac>)
    a144:	0018      	movs	r0, r3
    a146:	4b39      	ldr	r3, [pc, #228]	; (a22c <spi_data_write+0x1b0>)
    a148:	4798      	blx	r3
    a14a:	4b39      	ldr	r3, [pc, #228]	; (a230 <spi_data_write+0x1b4>)
    a14c:	0018      	movs	r0, r3
    a14e:	4b39      	ldr	r3, [pc, #228]	; (a234 <spi_data_write+0x1b8>)
    a150:	4798      	blx	r3
    a152:	200d      	movs	r0, #13
    a154:	4b38      	ldr	r3, [pc, #224]	; (a238 <spi_data_write+0x1bc>)
    a156:	4798      	blx	r3
			result = N_FAIL;
    a158:	2313      	movs	r3, #19
    a15a:	18fb      	adds	r3, r7, r3
    a15c:	2200      	movs	r2, #0
    a15e:	701a      	strb	r2, [r3, #0]
			break;
    a160:	e056      	b.n	a210 <spi_data_write+0x194>
		}

		/**
			Write data
		**/
		if (M2M_SUCCESS != nmi_spi_write(&b[ix], nbytes)) {
    a162:	2316      	movs	r3, #22
    a164:	18fb      	adds	r3, r7, r3
    a166:	2200      	movs	r2, #0
    a168:	5e9b      	ldrsh	r3, [r3, r2]
    a16a:	687a      	ldr	r2, [r7, #4]
    a16c:	18d2      	adds	r2, r2, r3
    a16e:	2314      	movs	r3, #20
    a170:	18fb      	adds	r3, r7, r3
    a172:	881b      	ldrh	r3, [r3, #0]
    a174:	0019      	movs	r1, r3
    a176:	0010      	movs	r0, r2
    a178:	4b29      	ldr	r3, [pc, #164]	; (a220 <spi_data_write+0x1a4>)
    a17a:	4798      	blx	r3
    a17c:	1e03      	subs	r3, r0, #0
    a17e:	d011      	beq.n	a1a4 <spi_data_write+0x128>
			M2M_ERR("[nmi spi]: Failed data block write, bus error...\n");
    a180:	4a2e      	ldr	r2, [pc, #184]	; (a23c <spi_data_write+0x1c0>)
    a182:	4928      	ldr	r1, [pc, #160]	; (a224 <spi_data_write+0x1a8>)
    a184:	4b28      	ldr	r3, [pc, #160]	; (a228 <spi_data_write+0x1ac>)
    a186:	0018      	movs	r0, r3
    a188:	4b28      	ldr	r3, [pc, #160]	; (a22c <spi_data_write+0x1b0>)
    a18a:	4798      	blx	r3
    a18c:	4b2c      	ldr	r3, [pc, #176]	; (a240 <spi_data_write+0x1c4>)
    a18e:	0018      	movs	r0, r3
    a190:	4b28      	ldr	r3, [pc, #160]	; (a234 <spi_data_write+0x1b8>)
    a192:	4798      	blx	r3
    a194:	200d      	movs	r0, #13
    a196:	4b28      	ldr	r3, [pc, #160]	; (a238 <spi_data_write+0x1bc>)
    a198:	4798      	blx	r3
			result = N_FAIL;
    a19a:	2313      	movs	r3, #19
    a19c:	18fb      	adds	r3, r7, r3
    a19e:	2200      	movs	r2, #0
    a1a0:	701a      	strb	r2, [r3, #0]
			break;
    a1a2:	e035      	b.n	a210 <spi_data_write+0x194>
		}

		/**
			Write Crc
		**/
		if (!gu8Crc_off) {
    a1a4:	4b27      	ldr	r3, [pc, #156]	; (a244 <spi_data_write+0x1c8>)
    a1a6:	781b      	ldrb	r3, [r3, #0]
    a1a8:	2b00      	cmp	r3, #0
    a1aa:	d119      	bne.n	a1e0 <spi_data_write+0x164>
			if (M2M_SUCCESS != nmi_spi_write(crc, 2)) {
    a1ac:	230c      	movs	r3, #12
    a1ae:	18fb      	adds	r3, r7, r3
    a1b0:	2102      	movs	r1, #2
    a1b2:	0018      	movs	r0, r3
    a1b4:	4b1a      	ldr	r3, [pc, #104]	; (a220 <spi_data_write+0x1a4>)
    a1b6:	4798      	blx	r3
    a1b8:	1e03      	subs	r3, r0, #0
    a1ba:	d011      	beq.n	a1e0 <spi_data_write+0x164>
				M2M_ERR("[nmi spi]: Failed data block crc write, bus error...\n");
    a1bc:	4a22      	ldr	r2, [pc, #136]	; (a248 <spi_data_write+0x1cc>)
    a1be:	4919      	ldr	r1, [pc, #100]	; (a224 <spi_data_write+0x1a8>)
    a1c0:	4b19      	ldr	r3, [pc, #100]	; (a228 <spi_data_write+0x1ac>)
    a1c2:	0018      	movs	r0, r3
    a1c4:	4b19      	ldr	r3, [pc, #100]	; (a22c <spi_data_write+0x1b0>)
    a1c6:	4798      	blx	r3
    a1c8:	4b20      	ldr	r3, [pc, #128]	; (a24c <spi_data_write+0x1d0>)
    a1ca:	0018      	movs	r0, r3
    a1cc:	4b19      	ldr	r3, [pc, #100]	; (a234 <spi_data_write+0x1b8>)
    a1ce:	4798      	blx	r3
    a1d0:	200d      	movs	r0, #13
    a1d2:	4b19      	ldr	r3, [pc, #100]	; (a238 <spi_data_write+0x1bc>)
    a1d4:	4798      	blx	r3
				result = N_FAIL;
    a1d6:	2313      	movs	r3, #19
    a1d8:	18fb      	adds	r3, r7, r3
    a1da:	2200      	movs	r2, #0
    a1dc:	701a      	strb	r2, [r3, #0]
				break;
    a1de:	e017      	b.n	a210 <spi_data_write+0x194>
			}
		}

		ix += nbytes;
    a1e0:	2316      	movs	r3, #22
    a1e2:	18fb      	adds	r3, r7, r3
    a1e4:	881a      	ldrh	r2, [r3, #0]
    a1e6:	2314      	movs	r3, #20
    a1e8:	18fb      	adds	r3, r7, r3
    a1ea:	881b      	ldrh	r3, [r3, #0]
    a1ec:	18d3      	adds	r3, r2, r3
    a1ee:	b29a      	uxth	r2, r3
    a1f0:	2316      	movs	r3, #22
    a1f2:	18fb      	adds	r3, r7, r3
    a1f4:	801a      	strh	r2, [r3, #0]
		sz -= nbytes;
    a1f6:	1cbb      	adds	r3, r7, #2
    a1f8:	1cb9      	adds	r1, r7, #2
    a1fa:	2214      	movs	r2, #20
    a1fc:	18ba      	adds	r2, r7, r2
    a1fe:	8809      	ldrh	r1, [r1, #0]
    a200:	8812      	ldrh	r2, [r2, #0]
    a202:	1a8a      	subs	r2, r1, r2
    a204:	801a      	strh	r2, [r3, #0]
	} while (sz);
    a206:	1cbb      	adds	r3, r7, #2
    a208:	881b      	ldrh	r3, [r3, #0]
    a20a:	2b00      	cmp	r3, #0
    a20c:	d000      	beq.n	a210 <spi_data_write+0x194>
    a20e:	e748      	b.n	a0a2 <spi_data_write+0x26>


	return result;
    a210:	2313      	movs	r3, #19
    a212:	18fb      	adds	r3, r7, r3
    a214:	781b      	ldrb	r3, [r3, #0]
    a216:	b25b      	sxtb	r3, r3
}
    a218:	0018      	movs	r0, r3
    a21a:	46bd      	mov	sp, r7
    a21c:	b006      	add	sp, #24
    a21e:	bd80      	pop	{r7, pc}
    a220:	00009839 	.word	0x00009839
    a224:	000208e8 	.word	0x000208e8
    a228:	00020320 	.word	0x00020320
    a22c:	0001c2d5 	.word	0x0001c2d5
    a230:	000204ac 	.word	0x000204ac
    a234:	0001c3f1 	.word	0x0001c3f1
    a238:	0001c309 	.word	0x0001c309
    a23c:	00000359 	.word	0x00000359
    a240:	000204e4 	.word	0x000204e4
    a244:	20000554 	.word	0x20000554
    a248:	00000363 	.word	0x00000363
    a24c:	00020518 	.word	0x00020518

0000a250 <spi_write_reg>:
	Spi interfaces

********************************************/

static sint8 spi_write_reg(uint32 addr, uint32 u32data)
{
    a250:	b5b0      	push	{r4, r5, r7, lr}
    a252:	b086      	sub	sp, #24
    a254:	af02      	add	r7, sp, #8
    a256:	6078      	str	r0, [r7, #4]
    a258:	6039      	str	r1, [r7, #0]
	uint8 retry = SPI_RETRY_COUNT;
    a25a:	230f      	movs	r3, #15
    a25c:	18fb      	adds	r3, r7, r3
    a25e:	220a      	movs	r2, #10
    a260:	701a      	strb	r2, [r3, #0]
	sint8 result = N_OK;
    a262:	230e      	movs	r3, #14
    a264:	18fb      	adds	r3, r7, r3
    a266:	2201      	movs	r2, #1
    a268:	701a      	strb	r2, [r3, #0]
	uint8 cmd = CMD_SINGLE_WRITE;
    a26a:	230d      	movs	r3, #13
    a26c:	18fb      	adds	r3, r7, r3
    a26e:	22c9      	movs	r2, #201	; 0xc9
    a270:	701a      	strb	r2, [r3, #0]
	uint8 clockless = 0;
    a272:	230c      	movs	r3, #12
    a274:	18fb      	adds	r3, r7, r3
    a276:	2200      	movs	r2, #0
    a278:	701a      	strb	r2, [r3, #0]
	
_RETRY_:	
	if (addr <= 0x30)
    a27a:	687b      	ldr	r3, [r7, #4]
    a27c:	2b30      	cmp	r3, #48	; 0x30
    a27e:	d808      	bhi.n	a292 <spi_write_reg+0x42>
	{
		/**
		NMC1000 clockless registers.
		**/
		cmd = CMD_INTERNAL_WRITE;
    a280:	230d      	movs	r3, #13
    a282:	18fb      	adds	r3, r7, r3
    a284:	22c3      	movs	r2, #195	; 0xc3
    a286:	701a      	strb	r2, [r3, #0]
		clockless = 1;
    a288:	230c      	movs	r3, #12
    a28a:	18fb      	adds	r3, r7, r3
    a28c:	2201      	movs	r2, #1
    a28e:	701a      	strb	r2, [r3, #0]
    a290:	e007      	b.n	a2a2 <spi_write_reg+0x52>
	}
	else
	{
		cmd = CMD_SINGLE_WRITE;
    a292:	230d      	movs	r3, #13
    a294:	18fb      	adds	r3, r7, r3
    a296:	22c9      	movs	r2, #201	; 0xc9
    a298:	701a      	strb	r2, [r3, #0]
		clockless = 0;
    a29a:	230c      	movs	r3, #12
    a29c:	18fb      	adds	r3, r7, r3
    a29e:	2200      	movs	r2, #0
    a2a0:	701a      	strb	r2, [r3, #0]
	}

#if defined USE_OLD_SPI_SW
	result = spi_cmd(cmd, addr, u32data, 4, clockless);
    a2a2:	230e      	movs	r3, #14
    a2a4:	18fc      	adds	r4, r7, r3
    a2a6:	683a      	ldr	r2, [r7, #0]
    a2a8:	6879      	ldr	r1, [r7, #4]
    a2aa:	230d      	movs	r3, #13
    a2ac:	18fb      	adds	r3, r7, r3
    a2ae:	7818      	ldrb	r0, [r3, #0]
    a2b0:	230c      	movs	r3, #12
    a2b2:	18fb      	adds	r3, r7, r3
    a2b4:	781b      	ldrb	r3, [r3, #0]
    a2b6:	9300      	str	r3, [sp, #0]
    a2b8:	2304      	movs	r3, #4
    a2ba:	4d3c      	ldr	r5, [pc, #240]	; (a3ac <spi_write_reg+0x15c>)
    a2bc:	47a8      	blx	r5
    a2be:	0003      	movs	r3, r0
    a2c0:	7023      	strb	r3, [r4, #0]
	if (result != N_OK) {
    a2c2:	230e      	movs	r3, #14
    a2c4:	18fb      	adds	r3, r7, r3
    a2c6:	781b      	ldrb	r3, [r3, #0]
    a2c8:	b25b      	sxtb	r3, r3
    a2ca:	2b01      	cmp	r3, #1
    a2cc:	d00f      	beq.n	a2ee <spi_write_reg+0x9e>
		M2M_ERR("[nmi spi]: Failed cmd, write reg (%08x)...\n", (unsigned int)addr);
    a2ce:	4a38      	ldr	r2, [pc, #224]	; (a3b0 <spi_write_reg+0x160>)
    a2d0:	4938      	ldr	r1, [pc, #224]	; (a3b4 <spi_write_reg+0x164>)
    a2d2:	4b39      	ldr	r3, [pc, #228]	; (a3b8 <spi_write_reg+0x168>)
    a2d4:	0018      	movs	r0, r3
    a2d6:	4b39      	ldr	r3, [pc, #228]	; (a3bc <spi_write_reg+0x16c>)
    a2d8:	4798      	blx	r3
    a2da:	687a      	ldr	r2, [r7, #4]
    a2dc:	4b38      	ldr	r3, [pc, #224]	; (a3c0 <spi_write_reg+0x170>)
    a2de:	0011      	movs	r1, r2
    a2e0:	0018      	movs	r0, r3
    a2e2:	4b36      	ldr	r3, [pc, #216]	; (a3bc <spi_write_reg+0x16c>)
    a2e4:	4798      	blx	r3
    a2e6:	200d      	movs	r0, #13
    a2e8:	4b36      	ldr	r3, [pc, #216]	; (a3c4 <spi_write_reg+0x174>)
    a2ea:	4798      	blx	r3
		goto _FAIL_;
    a2ec:	e020      	b.n	a330 <spi_write_reg+0xe0>
	}

	result = spi_cmd_rsp(cmd);
    a2ee:	230e      	movs	r3, #14
    a2f0:	18fc      	adds	r4, r7, r3
    a2f2:	230d      	movs	r3, #13
    a2f4:	18fb      	adds	r3, r7, r3
    a2f6:	781b      	ldrb	r3, [r3, #0]
    a2f8:	0018      	movs	r0, r3
    a2fa:	4b33      	ldr	r3, [pc, #204]	; (a3c8 <spi_write_reg+0x178>)
    a2fc:	4798      	blx	r3
    a2fe:	0003      	movs	r3, r0
    a300:	7023      	strb	r3, [r4, #0]
	if (result != N_OK) {
    a302:	230e      	movs	r3, #14
    a304:	18fb      	adds	r3, r7, r3
    a306:	781b      	ldrb	r3, [r3, #0]
    a308:	b25b      	sxtb	r3, r3
    a30a:	2b01      	cmp	r3, #1
    a30c:	d010      	beq.n	a330 <spi_write_reg+0xe0>
		M2M_ERR("[nmi spi]: Failed cmd response, write reg (%08x)...\n", (unsigned int)addr);
    a30e:	23e7      	movs	r3, #231	; 0xe7
    a310:	009a      	lsls	r2, r3, #2
    a312:	4928      	ldr	r1, [pc, #160]	; (a3b4 <spi_write_reg+0x164>)
    a314:	4b28      	ldr	r3, [pc, #160]	; (a3b8 <spi_write_reg+0x168>)
    a316:	0018      	movs	r0, r3
    a318:	4b28      	ldr	r3, [pc, #160]	; (a3bc <spi_write_reg+0x16c>)
    a31a:	4798      	blx	r3
    a31c:	687a      	ldr	r2, [r7, #4]
    a31e:	4b2b      	ldr	r3, [pc, #172]	; (a3cc <spi_write_reg+0x17c>)
    a320:	0011      	movs	r1, r2
    a322:	0018      	movs	r0, r3
    a324:	4b25      	ldr	r3, [pc, #148]	; (a3bc <spi_write_reg+0x16c>)
    a326:	4798      	blx	r3
    a328:	200d      	movs	r0, #13
    a32a:	4b26      	ldr	r3, [pc, #152]	; (a3c4 <spi_write_reg+0x174>)
    a32c:	4798      	blx	r3
		goto _FAIL_;
    a32e:	46c0      	nop			; (mov r8, r8)
		goto _FAIL_;
	}

#endif
_FAIL_:
	if(result != N_OK)
    a330:	230e      	movs	r3, #14
    a332:	18fb      	adds	r3, r7, r3
    a334:	781b      	ldrb	r3, [r3, #0]
    a336:	b25b      	sxtb	r3, r3
    a338:	2b01      	cmp	r3, #1
    a33a:	d02e      	beq.n	a39a <spi_write_reg+0x14a>
	{
		nm_bsp_sleep(1);
    a33c:	2001      	movs	r0, #1
    a33e:	4b24      	ldr	r3, [pc, #144]	; (a3d0 <spi_write_reg+0x180>)
    a340:	4798      	blx	r3
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
    a342:	2300      	movs	r3, #0
    a344:	9300      	str	r3, [sp, #0]
    a346:	2300      	movs	r3, #0
    a348:	2200      	movs	r2, #0
    a34a:	2100      	movs	r1, #0
    a34c:	20cf      	movs	r0, #207	; 0xcf
    a34e:	4c17      	ldr	r4, [pc, #92]	; (a3ac <spi_write_reg+0x15c>)
    a350:	47a0      	blx	r4
		spi_cmd_rsp(CMD_RESET);
    a352:	20cf      	movs	r0, #207	; 0xcf
    a354:	4b1c      	ldr	r3, [pc, #112]	; (a3c8 <spi_write_reg+0x178>)
    a356:	4798      	blx	r3
		M2M_ERR("Reset and retry %d %lx %lx\n",retry,addr,u32data);
    a358:	4a1e      	ldr	r2, [pc, #120]	; (a3d4 <spi_write_reg+0x184>)
    a35a:	4916      	ldr	r1, [pc, #88]	; (a3b4 <spi_write_reg+0x164>)
    a35c:	4b16      	ldr	r3, [pc, #88]	; (a3b8 <spi_write_reg+0x168>)
    a35e:	0018      	movs	r0, r3
    a360:	4b16      	ldr	r3, [pc, #88]	; (a3bc <spi_write_reg+0x16c>)
    a362:	4798      	blx	r3
    a364:	230f      	movs	r3, #15
    a366:	18fb      	adds	r3, r7, r3
    a368:	7819      	ldrb	r1, [r3, #0]
    a36a:	683b      	ldr	r3, [r7, #0]
    a36c:	687a      	ldr	r2, [r7, #4]
    a36e:	481a      	ldr	r0, [pc, #104]	; (a3d8 <spi_write_reg+0x188>)
    a370:	4c12      	ldr	r4, [pc, #72]	; (a3bc <spi_write_reg+0x16c>)
    a372:	47a0      	blx	r4
    a374:	200d      	movs	r0, #13
    a376:	4b13      	ldr	r3, [pc, #76]	; (a3c4 <spi_write_reg+0x174>)
    a378:	4798      	blx	r3
		nm_bsp_sleep(1);
    a37a:	2001      	movs	r0, #1
    a37c:	4b14      	ldr	r3, [pc, #80]	; (a3d0 <spi_write_reg+0x180>)
    a37e:	4798      	blx	r3
		retry--;
    a380:	230f      	movs	r3, #15
    a382:	18fb      	adds	r3, r7, r3
    a384:	781a      	ldrb	r2, [r3, #0]
    a386:	230f      	movs	r3, #15
    a388:	18fb      	adds	r3, r7, r3
    a38a:	3a01      	subs	r2, #1
    a38c:	701a      	strb	r2, [r3, #0]
		if(retry) goto _RETRY_;
    a38e:	230f      	movs	r3, #15
    a390:	18fb      	adds	r3, r7, r3
    a392:	781b      	ldrb	r3, [r3, #0]
    a394:	2b00      	cmp	r3, #0
    a396:	d000      	beq.n	a39a <spi_write_reg+0x14a>
    a398:	e76f      	b.n	a27a <spi_write_reg+0x2a>
	}

	return result;
    a39a:	230e      	movs	r3, #14
    a39c:	18fb      	adds	r3, r7, r3
    a39e:	781b      	ldrb	r3, [r3, #0]
    a3a0:	b25b      	sxtb	r3, r3
}
    a3a2:	0018      	movs	r0, r3
    a3a4:	46bd      	mov	sp, r7
    a3a6:	b004      	add	sp, #16
    a3a8:	bdb0      	pop	{r4, r5, r7, pc}
    a3aa:	46c0      	nop			; (mov r8, r8)
    a3ac:	000098fd 	.word	0x000098fd
    a3b0:	00000396 	.word	0x00000396
    a3b4:	000208f8 	.word	0x000208f8
    a3b8:	00020320 	.word	0x00020320
    a3bc:	0001c2d5 	.word	0x0001c2d5
    a3c0:	00020550 	.word	0x00020550
    a3c4:	0001c309 	.word	0x0001c309
    a3c8:	00009d41 	.word	0x00009d41
    a3cc:	0002057c 	.word	0x0002057c
    a3d0:	00006471 	.word	0x00006471
    a3d4:	000003af 	.word	0x000003af
    a3d8:	000205b4 	.word	0x000205b4

0000a3dc <nm_spi_write>:

static sint8 nm_spi_write(uint32 addr, uint8 *buf, uint16 size)
{
    a3dc:	b5b0      	push	{r4, r5, r7, lr}
    a3de:	b088      	sub	sp, #32
    a3e0:	af02      	add	r7, sp, #8
    a3e2:	60f8      	str	r0, [r7, #12]
    a3e4:	60b9      	str	r1, [r7, #8]
    a3e6:	1dbb      	adds	r3, r7, #6
    a3e8:	801a      	strh	r2, [r3, #0]
	sint8 result;
	uint8 retry = SPI_RETRY_COUNT;
    a3ea:	2316      	movs	r3, #22
    a3ec:	18fb      	adds	r3, r7, r3
    a3ee:	220a      	movs	r2, #10
    a3f0:	701a      	strb	r2, [r3, #0]
	uint8 cmd = CMD_DMA_EXT_WRITE;
    a3f2:	2315      	movs	r3, #21
    a3f4:	18fb      	adds	r3, r7, r3
    a3f6:	22c7      	movs	r2, #199	; 0xc7
    a3f8:	701a      	strb	r2, [r3, #0]
	/**
		Command
	**/
#if defined USE_OLD_SPI_SW
	//Workaround hardware problem with single byte transfers over SPI bus
	if (size == 1)
    a3fa:	1dbb      	adds	r3, r7, #6
    a3fc:	881b      	ldrh	r3, [r3, #0]
    a3fe:	2b01      	cmp	r3, #1
    a400:	d102      	bne.n	a408 <nm_spi_write+0x2c>
		size = 2;
    a402:	1dbb      	adds	r3, r7, #6
    a404:	2202      	movs	r2, #2
    a406:	801a      	strh	r2, [r3, #0]

	result = spi_cmd(cmd, addr, 0, size,0);
    a408:	1dbb      	adds	r3, r7, #6
    a40a:	881a      	ldrh	r2, [r3, #0]
    a40c:	2317      	movs	r3, #23
    a40e:	18fc      	adds	r4, r7, r3
    a410:	68f9      	ldr	r1, [r7, #12]
    a412:	2315      	movs	r3, #21
    a414:	18fb      	adds	r3, r7, r3
    a416:	7818      	ldrb	r0, [r3, #0]
    a418:	2300      	movs	r3, #0
    a41a:	9300      	str	r3, [sp, #0]
    a41c:	0013      	movs	r3, r2
    a41e:	2200      	movs	r2, #0
    a420:	4d5b      	ldr	r5, [pc, #364]	; (a590 <nm_spi_write+0x1b4>)
    a422:	47a8      	blx	r5
    a424:	0003      	movs	r3, r0
    a426:	7023      	strb	r3, [r4, #0]
	if (result != N_OK) {
    a428:	2317      	movs	r3, #23
    a42a:	18fb      	adds	r3, r7, r3
    a42c:	781b      	ldrb	r3, [r3, #0]
    a42e:	b25b      	sxtb	r3, r3
    a430:	2b01      	cmp	r3, #1
    a432:	d00f      	beq.n	a454 <nm_spi_write+0x78>
		M2M_ERR("[nmi spi]: Failed cmd, write block (%08x)...\n", (unsigned int)addr);
    a434:	4a57      	ldr	r2, [pc, #348]	; (a594 <nm_spi_write+0x1b8>)
    a436:	4958      	ldr	r1, [pc, #352]	; (a598 <nm_spi_write+0x1bc>)
    a438:	4b58      	ldr	r3, [pc, #352]	; (a59c <nm_spi_write+0x1c0>)
    a43a:	0018      	movs	r0, r3
    a43c:	4b58      	ldr	r3, [pc, #352]	; (a5a0 <nm_spi_write+0x1c4>)
    a43e:	4798      	blx	r3
    a440:	68fa      	ldr	r2, [r7, #12]
    a442:	4b58      	ldr	r3, [pc, #352]	; (a5a4 <nm_spi_write+0x1c8>)
    a444:	0011      	movs	r1, r2
    a446:	0018      	movs	r0, r3
    a448:	4b55      	ldr	r3, [pc, #340]	; (a5a0 <nm_spi_write+0x1c4>)
    a44a:	4798      	blx	r3
    a44c:	200d      	movs	r0, #13
    a44e:	4b56      	ldr	r3, [pc, #344]	; (a5a8 <nm_spi_write+0x1cc>)
    a450:	4798      	blx	r3
		goto _FAIL_;
    a452:	e05f      	b.n	a514 <nm_spi_write+0x138>
	}

	result = spi_cmd_rsp(cmd);
    a454:	2317      	movs	r3, #23
    a456:	18fc      	adds	r4, r7, r3
    a458:	2315      	movs	r3, #21
    a45a:	18fb      	adds	r3, r7, r3
    a45c:	781b      	ldrb	r3, [r3, #0]
    a45e:	0018      	movs	r0, r3
    a460:	4b52      	ldr	r3, [pc, #328]	; (a5ac <nm_spi_write+0x1d0>)
    a462:	4798      	blx	r3
    a464:	0003      	movs	r3, r0
    a466:	7023      	strb	r3, [r4, #0]
	if (result != N_OK) {
    a468:	2317      	movs	r3, #23
    a46a:	18fb      	adds	r3, r7, r3
    a46c:	781b      	ldrb	r3, [r3, #0]
    a46e:	b25b      	sxtb	r3, r3
    a470:	2b01      	cmp	r3, #1
    a472:	d010      	beq.n	a496 <nm_spi_write+0xba>
		M2M_ERR("[nmi spi ]: Failed cmd response, write block (%08x)...\n", (unsigned int)addr);
    a474:	23f4      	movs	r3, #244	; 0xf4
    a476:	009a      	lsls	r2, r3, #2
    a478:	4947      	ldr	r1, [pc, #284]	; (a598 <nm_spi_write+0x1bc>)
    a47a:	4b48      	ldr	r3, [pc, #288]	; (a59c <nm_spi_write+0x1c0>)
    a47c:	0018      	movs	r0, r3
    a47e:	4b48      	ldr	r3, [pc, #288]	; (a5a0 <nm_spi_write+0x1c4>)
    a480:	4798      	blx	r3
    a482:	68fa      	ldr	r2, [r7, #12]
    a484:	4b4a      	ldr	r3, [pc, #296]	; (a5b0 <nm_spi_write+0x1d4>)
    a486:	0011      	movs	r1, r2
    a488:	0018      	movs	r0, r3
    a48a:	4b45      	ldr	r3, [pc, #276]	; (a5a0 <nm_spi_write+0x1c4>)
    a48c:	4798      	blx	r3
    a48e:	200d      	movs	r0, #13
    a490:	4b45      	ldr	r3, [pc, #276]	; (a5a8 <nm_spi_write+0x1cc>)
    a492:	4798      	blx	r3
		goto _FAIL_;
    a494:	e03e      	b.n	a514 <nm_spi_write+0x138>
#endif

	/**
		Data
	**/
	result = spi_data_write(buf, size);
    a496:	2317      	movs	r3, #23
    a498:	18fc      	adds	r4, r7, r3
    a49a:	1dbb      	adds	r3, r7, #6
    a49c:	881a      	ldrh	r2, [r3, #0]
    a49e:	68bb      	ldr	r3, [r7, #8]
    a4a0:	0011      	movs	r1, r2
    a4a2:	0018      	movs	r0, r3
    a4a4:	4b43      	ldr	r3, [pc, #268]	; (a5b4 <nm_spi_write+0x1d8>)
    a4a6:	4798      	blx	r3
    a4a8:	0003      	movs	r3, r0
    a4aa:	7023      	strb	r3, [r4, #0]
	if (result != N_OK) {
    a4ac:	2317      	movs	r3, #23
    a4ae:	18fb      	adds	r3, r7, r3
    a4b0:	781b      	ldrb	r3, [r3, #0]
    a4b2:	b25b      	sxtb	r3, r3
    a4b4:	2b01      	cmp	r3, #1
    a4b6:	d00e      	beq.n	a4d6 <nm_spi_write+0xfa>
		M2M_ERR("[nmi spi]: Failed block data write...\n");
    a4b8:	23f8      	movs	r3, #248	; 0xf8
    a4ba:	009a      	lsls	r2, r3, #2
    a4bc:	4936      	ldr	r1, [pc, #216]	; (a598 <nm_spi_write+0x1bc>)
    a4be:	4b37      	ldr	r3, [pc, #220]	; (a59c <nm_spi_write+0x1c0>)
    a4c0:	0018      	movs	r0, r3
    a4c2:	4b37      	ldr	r3, [pc, #220]	; (a5a0 <nm_spi_write+0x1c4>)
    a4c4:	4798      	blx	r3
    a4c6:	4b3c      	ldr	r3, [pc, #240]	; (a5b8 <nm_spi_write+0x1dc>)
    a4c8:	0018      	movs	r0, r3
    a4ca:	4b3c      	ldr	r3, [pc, #240]	; (a5bc <nm_spi_write+0x1e0>)
    a4cc:	4798      	blx	r3
    a4ce:	200d      	movs	r0, #13
    a4d0:	4b35      	ldr	r3, [pc, #212]	; (a5a8 <nm_spi_write+0x1cc>)
    a4d2:	4798      	blx	r3
		goto _FAIL_;
    a4d4:	e01e      	b.n	a514 <nm_spi_write+0x138>
	}
	/**
		Data RESP
	**/
	result = spi_data_rsp(cmd);
    a4d6:	2317      	movs	r3, #23
    a4d8:	18fc      	adds	r4, r7, r3
    a4da:	2315      	movs	r3, #21
    a4dc:	18fb      	adds	r3, r7, r3
    a4de:	781b      	ldrb	r3, [r3, #0]
    a4e0:	0018      	movs	r0, r3
    a4e2:	4b37      	ldr	r3, [pc, #220]	; (a5c0 <nm_spi_write+0x1e4>)
    a4e4:	4798      	blx	r3
    a4e6:	0003      	movs	r3, r0
    a4e8:	7023      	strb	r3, [r4, #0]
	if (result != N_OK) {
    a4ea:	2317      	movs	r3, #23
    a4ec:	18fb      	adds	r3, r7, r3
    a4ee:	781b      	ldrb	r3, [r3, #0]
    a4f0:	b25b      	sxtb	r3, r3
    a4f2:	2b01      	cmp	r3, #1
    a4f4:	d00e      	beq.n	a514 <nm_spi_write+0x138>
		M2M_ERR("[nmi spi]: Failed block data write...\n");
    a4f6:	23fa      	movs	r3, #250	; 0xfa
    a4f8:	009a      	lsls	r2, r3, #2
    a4fa:	4927      	ldr	r1, [pc, #156]	; (a598 <nm_spi_write+0x1bc>)
    a4fc:	4b27      	ldr	r3, [pc, #156]	; (a59c <nm_spi_write+0x1c0>)
    a4fe:	0018      	movs	r0, r3
    a500:	4b27      	ldr	r3, [pc, #156]	; (a5a0 <nm_spi_write+0x1c4>)
    a502:	4798      	blx	r3
    a504:	4b2c      	ldr	r3, [pc, #176]	; (a5b8 <nm_spi_write+0x1dc>)
    a506:	0018      	movs	r0, r3
    a508:	4b2c      	ldr	r3, [pc, #176]	; (a5bc <nm_spi_write+0x1e0>)
    a50a:	4798      	blx	r3
    a50c:	200d      	movs	r0, #13
    a50e:	4b26      	ldr	r3, [pc, #152]	; (a5a8 <nm_spi_write+0x1cc>)
    a510:	4798      	blx	r3
		goto _FAIL_;
    a512:	46c0      	nop			; (mov r8, r8)
	}
	
_FAIL_:
	if(result != N_OK)
    a514:	2317      	movs	r3, #23
    a516:	18fb      	adds	r3, r7, r3
    a518:	781b      	ldrb	r3, [r3, #0]
    a51a:	b25b      	sxtb	r3, r3
    a51c:	2b01      	cmp	r3, #1
    a51e:	d02f      	beq.n	a580 <nm_spi_write+0x1a4>
	{
		nm_bsp_sleep(1);
    a520:	2001      	movs	r0, #1
    a522:	4b28      	ldr	r3, [pc, #160]	; (a5c4 <nm_spi_write+0x1e8>)
    a524:	4798      	blx	r3
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
    a526:	2300      	movs	r3, #0
    a528:	9300      	str	r3, [sp, #0]
    a52a:	2300      	movs	r3, #0
    a52c:	2200      	movs	r2, #0
    a52e:	2100      	movs	r1, #0
    a530:	20cf      	movs	r0, #207	; 0xcf
    a532:	4c17      	ldr	r4, [pc, #92]	; (a590 <nm_spi_write+0x1b4>)
    a534:	47a0      	blx	r4
		spi_cmd_rsp(CMD_RESET);
    a536:	20cf      	movs	r0, #207	; 0xcf
    a538:	4b1c      	ldr	r3, [pc, #112]	; (a5ac <nm_spi_write+0x1d0>)
    a53a:	4798      	blx	r3
		M2M_ERR("Reset and retry %d %lx %d\n",retry,addr,size);
    a53c:	4a22      	ldr	r2, [pc, #136]	; (a5c8 <nm_spi_write+0x1ec>)
    a53e:	4916      	ldr	r1, [pc, #88]	; (a598 <nm_spi_write+0x1bc>)
    a540:	4b16      	ldr	r3, [pc, #88]	; (a59c <nm_spi_write+0x1c0>)
    a542:	0018      	movs	r0, r3
    a544:	4b16      	ldr	r3, [pc, #88]	; (a5a0 <nm_spi_write+0x1c4>)
    a546:	4798      	blx	r3
    a548:	2316      	movs	r3, #22
    a54a:	18fb      	adds	r3, r7, r3
    a54c:	7819      	ldrb	r1, [r3, #0]
    a54e:	1dbb      	adds	r3, r7, #6
    a550:	881b      	ldrh	r3, [r3, #0]
    a552:	68fa      	ldr	r2, [r7, #12]
    a554:	481d      	ldr	r0, [pc, #116]	; (a5cc <nm_spi_write+0x1f0>)
    a556:	4c12      	ldr	r4, [pc, #72]	; (a5a0 <nm_spi_write+0x1c4>)
    a558:	47a0      	blx	r4
    a55a:	200d      	movs	r0, #13
    a55c:	4b12      	ldr	r3, [pc, #72]	; (a5a8 <nm_spi_write+0x1cc>)
    a55e:	4798      	blx	r3
		nm_bsp_sleep(1);
    a560:	2001      	movs	r0, #1
    a562:	4b18      	ldr	r3, [pc, #96]	; (a5c4 <nm_spi_write+0x1e8>)
    a564:	4798      	blx	r3
		retry--;
    a566:	2316      	movs	r3, #22
    a568:	18fb      	adds	r3, r7, r3
    a56a:	781a      	ldrb	r2, [r3, #0]
    a56c:	2316      	movs	r3, #22
    a56e:	18fb      	adds	r3, r7, r3
    a570:	3a01      	subs	r2, #1
    a572:	701a      	strb	r2, [r3, #0]
		if(retry) goto _RETRY_;
    a574:	2316      	movs	r3, #22
    a576:	18fb      	adds	r3, r7, r3
    a578:	781b      	ldrb	r3, [r3, #0]
    a57a:	2b00      	cmp	r3, #0
    a57c:	d000      	beq.n	a580 <nm_spi_write+0x1a4>
    a57e:	e73c      	b.n	a3fa <nm_spi_write+0x1e>
	}


	return result;
    a580:	2317      	movs	r3, #23
    a582:	18fb      	adds	r3, r7, r3
    a584:	781b      	ldrb	r3, [r3, #0]
    a586:	b25b      	sxtb	r3, r3
}
    a588:	0018      	movs	r0, r3
    a58a:	46bd      	mov	sp, r7
    a58c:	b006      	add	sp, #24
    a58e:	bdb0      	pop	{r4, r5, r7, pc}
    a590:	000098fd 	.word	0x000098fd
    a594:	000003ca 	.word	0x000003ca
    a598:	00020908 	.word	0x00020908
    a59c:	00020320 	.word	0x00020320
    a5a0:	0001c2d5 	.word	0x0001c2d5
    a5a4:	000205d0 	.word	0x000205d0
    a5a8:	0001c309 	.word	0x0001c309
    a5ac:	00009d41 	.word	0x00009d41
    a5b0:	00020600 	.word	0x00020600
    a5b4:	0000a07d 	.word	0x0000a07d
    a5b8:	00020638 	.word	0x00020638
    a5bc:	0001c3f1 	.word	0x0001c3f1
    a5c0:	00009c41 	.word	0x00009c41
    a5c4:	00006471 	.word	0x00006471
    a5c8:	000003f2 	.word	0x000003f2
    a5cc:	00020660 	.word	0x00020660

0000a5d0 <spi_read_reg>:

static sint8 spi_read_reg(uint32 addr, uint32 *u32data)
{
    a5d0:	b5b0      	push	{r4, r5, r7, lr}
    a5d2:	b086      	sub	sp, #24
    a5d4:	af02      	add	r7, sp, #8
    a5d6:	6078      	str	r0, [r7, #4]
    a5d8:	6039      	str	r1, [r7, #0]
	uint8 retry = SPI_RETRY_COUNT;
    a5da:	230f      	movs	r3, #15
    a5dc:	18fb      	adds	r3, r7, r3
    a5de:	220a      	movs	r2, #10
    a5e0:	701a      	strb	r2, [r3, #0]
	sint8 result = N_OK;
    a5e2:	230e      	movs	r3, #14
    a5e4:	18fb      	adds	r3, r7, r3
    a5e6:	2201      	movs	r2, #1
    a5e8:	701a      	strb	r2, [r3, #0]
	uint8 cmd = CMD_SINGLE_READ;
    a5ea:	230d      	movs	r3, #13
    a5ec:	18fb      	adds	r3, r7, r3
    a5ee:	22ca      	movs	r2, #202	; 0xca
    a5f0:	701a      	strb	r2, [r3, #0]
	uint8 tmp[4];
	uint8 clockless = 0;
    a5f2:	230c      	movs	r3, #12
    a5f4:	18fb      	adds	r3, r7, r3
    a5f6:	2200      	movs	r2, #0
    a5f8:	701a      	strb	r2, [r3, #0]

_RETRY_:

	if (addr <= 0xff)
    a5fa:	687b      	ldr	r3, [r7, #4]
    a5fc:	2bff      	cmp	r3, #255	; 0xff
    a5fe:	d808      	bhi.n	a612 <spi_read_reg+0x42>
	{
		/**
		NMC1000 clockless registers.
		**/
		cmd = CMD_INTERNAL_READ;
    a600:	230d      	movs	r3, #13
    a602:	18fb      	adds	r3, r7, r3
    a604:	22c4      	movs	r2, #196	; 0xc4
    a606:	701a      	strb	r2, [r3, #0]
		clockless = 1;
    a608:	230c      	movs	r3, #12
    a60a:	18fb      	adds	r3, r7, r3
    a60c:	2201      	movs	r2, #1
    a60e:	701a      	strb	r2, [r3, #0]
    a610:	e007      	b.n	a622 <spi_read_reg+0x52>
	}
	else
	{
		cmd = CMD_SINGLE_READ;
    a612:	230d      	movs	r3, #13
    a614:	18fb      	adds	r3, r7, r3
    a616:	22ca      	movs	r2, #202	; 0xca
    a618:	701a      	strb	r2, [r3, #0]
		clockless = 0;
    a61a:	230c      	movs	r3, #12
    a61c:	18fb      	adds	r3, r7, r3
    a61e:	2200      	movs	r2, #0
    a620:	701a      	strb	r2, [r3, #0]
	}

#if defined USE_OLD_SPI_SW
	result = spi_cmd(cmd, addr, 0, 4, clockless);
    a622:	230e      	movs	r3, #14
    a624:	18fc      	adds	r4, r7, r3
    a626:	6879      	ldr	r1, [r7, #4]
    a628:	230d      	movs	r3, #13
    a62a:	18fb      	adds	r3, r7, r3
    a62c:	7818      	ldrb	r0, [r3, #0]
    a62e:	230c      	movs	r3, #12
    a630:	18fb      	adds	r3, r7, r3
    a632:	781b      	ldrb	r3, [r3, #0]
    a634:	9300      	str	r3, [sp, #0]
    a636:	2304      	movs	r3, #4
    a638:	2200      	movs	r2, #0
    a63a:	4d56      	ldr	r5, [pc, #344]	; (a794 <spi_read_reg+0x1c4>)
    a63c:	47a8      	blx	r5
    a63e:	0003      	movs	r3, r0
    a640:	7023      	strb	r3, [r4, #0]
	if (result != N_OK) {
    a642:	230e      	movs	r3, #14
    a644:	18fb      	adds	r3, r7, r3
    a646:	781b      	ldrb	r3, [r3, #0]
    a648:	b25b      	sxtb	r3, r3
    a64a:	2b01      	cmp	r3, #1
    a64c:	d00f      	beq.n	a66e <spi_read_reg+0x9e>
		M2M_ERR("[nmi spi]: Failed cmd, read reg (%08x)...\n", (unsigned int)addr);
    a64e:	4a52      	ldr	r2, [pc, #328]	; (a798 <spi_read_reg+0x1c8>)
    a650:	4952      	ldr	r1, [pc, #328]	; (a79c <spi_read_reg+0x1cc>)
    a652:	4b53      	ldr	r3, [pc, #332]	; (a7a0 <spi_read_reg+0x1d0>)
    a654:	0018      	movs	r0, r3
    a656:	4b53      	ldr	r3, [pc, #332]	; (a7a4 <spi_read_reg+0x1d4>)
    a658:	4798      	blx	r3
    a65a:	687a      	ldr	r2, [r7, #4]
    a65c:	4b52      	ldr	r3, [pc, #328]	; (a7a8 <spi_read_reg+0x1d8>)
    a65e:	0011      	movs	r1, r2
    a660:	0018      	movs	r0, r3
    a662:	4b50      	ldr	r3, [pc, #320]	; (a7a4 <spi_read_reg+0x1d4>)
    a664:	4798      	blx	r3
    a666:	200d      	movs	r0, #13
    a668:	4b50      	ldr	r3, [pc, #320]	; (a7ac <spi_read_reg+0x1dc>)
    a66a:	4798      	blx	r3
		goto _FAIL_;
    a66c:	e055      	b.n	a71a <spi_read_reg+0x14a>
	}

	result = spi_cmd_rsp(cmd);
    a66e:	230e      	movs	r3, #14
    a670:	18fc      	adds	r4, r7, r3
    a672:	230d      	movs	r3, #13
    a674:	18fb      	adds	r3, r7, r3
    a676:	781b      	ldrb	r3, [r3, #0]
    a678:	0018      	movs	r0, r3
    a67a:	4b4d      	ldr	r3, [pc, #308]	; (a7b0 <spi_read_reg+0x1e0>)
    a67c:	4798      	blx	r3
    a67e:	0003      	movs	r3, r0
    a680:	7023      	strb	r3, [r4, #0]
	if (result != N_OK) {
    a682:	230e      	movs	r3, #14
    a684:	18fb      	adds	r3, r7, r3
    a686:	781b      	ldrb	r3, [r3, #0]
    a688:	b25b      	sxtb	r3, r3
    a68a:	2b01      	cmp	r3, #1
    a68c:	d00f      	beq.n	a6ae <spi_read_reg+0xde>
		M2M_ERR("[nmi spi]: Failed cmd response, read reg (%08x)...\n", (unsigned int)addr);
    a68e:	4a49      	ldr	r2, [pc, #292]	; (a7b4 <spi_read_reg+0x1e4>)
    a690:	4942      	ldr	r1, [pc, #264]	; (a79c <spi_read_reg+0x1cc>)
    a692:	4b43      	ldr	r3, [pc, #268]	; (a7a0 <spi_read_reg+0x1d0>)
    a694:	0018      	movs	r0, r3
    a696:	4b43      	ldr	r3, [pc, #268]	; (a7a4 <spi_read_reg+0x1d4>)
    a698:	4798      	blx	r3
    a69a:	687a      	ldr	r2, [r7, #4]
    a69c:	4b46      	ldr	r3, [pc, #280]	; (a7b8 <spi_read_reg+0x1e8>)
    a69e:	0011      	movs	r1, r2
    a6a0:	0018      	movs	r0, r3
    a6a2:	4b40      	ldr	r3, [pc, #256]	; (a7a4 <spi_read_reg+0x1d4>)
    a6a4:	4798      	blx	r3
    a6a6:	200d      	movs	r0, #13
    a6a8:	4b40      	ldr	r3, [pc, #256]	; (a7ac <spi_read_reg+0x1dc>)
    a6aa:	4798      	blx	r3
		goto _FAIL_;
    a6ac:	e035      	b.n	a71a <spi_read_reg+0x14a>
	}

	/* to avoid endianess issues */
	result = spi_data_read(&tmp[0], 4, clockless);
    a6ae:	230e      	movs	r3, #14
    a6b0:	18fc      	adds	r4, r7, r3
    a6b2:	230c      	movs	r3, #12
    a6b4:	18fb      	adds	r3, r7, r3
    a6b6:	781a      	ldrb	r2, [r3, #0]
    a6b8:	2308      	movs	r3, #8
    a6ba:	18fb      	adds	r3, r7, r3
    a6bc:	2104      	movs	r1, #4
    a6be:	0018      	movs	r0, r3
    a6c0:	4b3e      	ldr	r3, [pc, #248]	; (a7bc <spi_read_reg+0x1ec>)
    a6c2:	4798      	blx	r3
    a6c4:	0003      	movs	r3, r0
    a6c6:	7023      	strb	r3, [r4, #0]
	if (result != N_OK) {
    a6c8:	230e      	movs	r3, #14
    a6ca:	18fb      	adds	r3, r7, r3
    a6cc:	781b      	ldrb	r3, [r3, #0]
    a6ce:	b25b      	sxtb	r3, r3
    a6d0:	2b01      	cmp	r3, #1
    a6d2:	d00d      	beq.n	a6f0 <spi_read_reg+0x120>
		M2M_ERR("[nmi spi]: Failed data read...\n");
    a6d4:	4a3a      	ldr	r2, [pc, #232]	; (a7c0 <spi_read_reg+0x1f0>)
    a6d6:	4931      	ldr	r1, [pc, #196]	; (a79c <spi_read_reg+0x1cc>)
    a6d8:	4b31      	ldr	r3, [pc, #196]	; (a7a0 <spi_read_reg+0x1d0>)
    a6da:	0018      	movs	r0, r3
    a6dc:	4b31      	ldr	r3, [pc, #196]	; (a7a4 <spi_read_reg+0x1d4>)
    a6de:	4798      	blx	r3
    a6e0:	4b38      	ldr	r3, [pc, #224]	; (a7c4 <spi_read_reg+0x1f4>)
    a6e2:	0018      	movs	r0, r3
    a6e4:	4b38      	ldr	r3, [pc, #224]	; (a7c8 <spi_read_reg+0x1f8>)
    a6e6:	4798      	blx	r3
    a6e8:	200d      	movs	r0, #13
    a6ea:	4b30      	ldr	r3, [pc, #192]	; (a7ac <spi_read_reg+0x1dc>)
    a6ec:	4798      	blx	r3
		goto _FAIL_;
    a6ee:	e014      	b.n	a71a <spi_read_reg+0x14a>
		goto _FAIL_;
	}

#endif

	*u32data = tmp[0] |
    a6f0:	2308      	movs	r3, #8
    a6f2:	18fb      	adds	r3, r7, r3
    a6f4:	781b      	ldrb	r3, [r3, #0]
    a6f6:	001a      	movs	r2, r3
		((uint32)tmp[1] << 8) |
    a6f8:	2308      	movs	r3, #8
    a6fa:	18fb      	adds	r3, r7, r3
    a6fc:	785b      	ldrb	r3, [r3, #1]
    a6fe:	021b      	lsls	r3, r3, #8
	*u32data = tmp[0] |
    a700:	431a      	orrs	r2, r3
		((uint32)tmp[2] << 16) |
    a702:	2308      	movs	r3, #8
    a704:	18fb      	adds	r3, r7, r3
    a706:	789b      	ldrb	r3, [r3, #2]
    a708:	041b      	lsls	r3, r3, #16
		((uint32)tmp[1] << 8) |
    a70a:	431a      	orrs	r2, r3
		((uint32)tmp[3] << 24);
    a70c:	2308      	movs	r3, #8
    a70e:	18fb      	adds	r3, r7, r3
    a710:	78db      	ldrb	r3, [r3, #3]
    a712:	061b      	lsls	r3, r3, #24
		((uint32)tmp[2] << 16) |
    a714:	431a      	orrs	r2, r3
	*u32data = tmp[0] |
    a716:	683b      	ldr	r3, [r7, #0]
    a718:	601a      	str	r2, [r3, #0]
		
_FAIL_:
	if(result != N_OK)
    a71a:	230e      	movs	r3, #14
    a71c:	18fb      	adds	r3, r7, r3
    a71e:	781b      	ldrb	r3, [r3, #0]
    a720:	b25b      	sxtb	r3, r3
    a722:	2b01      	cmp	r3, #1
    a724:	d02e      	beq.n	a784 <spi_read_reg+0x1b4>
	{
		
		nm_bsp_sleep(1);
    a726:	2001      	movs	r0, #1
    a728:	4b28      	ldr	r3, [pc, #160]	; (a7cc <spi_read_reg+0x1fc>)
    a72a:	4798      	blx	r3
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
    a72c:	2300      	movs	r3, #0
    a72e:	9300      	str	r3, [sp, #0]
    a730:	2300      	movs	r3, #0
    a732:	2200      	movs	r2, #0
    a734:	2100      	movs	r1, #0
    a736:	20cf      	movs	r0, #207	; 0xcf
    a738:	4c16      	ldr	r4, [pc, #88]	; (a794 <spi_read_reg+0x1c4>)
    a73a:	47a0      	blx	r4
		spi_cmd_rsp(CMD_RESET);
    a73c:	20cf      	movs	r0, #207	; 0xcf
    a73e:	4b1c      	ldr	r3, [pc, #112]	; (a7b0 <spi_read_reg+0x1e0>)
    a740:	4798      	blx	r3
		M2M_ERR("Reset and retry %d %lx\n",retry,addr);
    a742:	4a23      	ldr	r2, [pc, #140]	; (a7d0 <spi_read_reg+0x200>)
    a744:	4915      	ldr	r1, [pc, #84]	; (a79c <spi_read_reg+0x1cc>)
    a746:	4b16      	ldr	r3, [pc, #88]	; (a7a0 <spi_read_reg+0x1d0>)
    a748:	0018      	movs	r0, r3
    a74a:	4b16      	ldr	r3, [pc, #88]	; (a7a4 <spi_read_reg+0x1d4>)
    a74c:	4798      	blx	r3
    a74e:	230f      	movs	r3, #15
    a750:	18fb      	adds	r3, r7, r3
    a752:	7819      	ldrb	r1, [r3, #0]
    a754:	687a      	ldr	r2, [r7, #4]
    a756:	4b1f      	ldr	r3, [pc, #124]	; (a7d4 <spi_read_reg+0x204>)
    a758:	0018      	movs	r0, r3
    a75a:	4b12      	ldr	r3, [pc, #72]	; (a7a4 <spi_read_reg+0x1d4>)
    a75c:	4798      	blx	r3
    a75e:	200d      	movs	r0, #13
    a760:	4b12      	ldr	r3, [pc, #72]	; (a7ac <spi_read_reg+0x1dc>)
    a762:	4798      	blx	r3
		nm_bsp_sleep(1);
    a764:	2001      	movs	r0, #1
    a766:	4b19      	ldr	r3, [pc, #100]	; (a7cc <spi_read_reg+0x1fc>)
    a768:	4798      	blx	r3
		retry--;
    a76a:	230f      	movs	r3, #15
    a76c:	18fb      	adds	r3, r7, r3
    a76e:	781a      	ldrb	r2, [r3, #0]
    a770:	230f      	movs	r3, #15
    a772:	18fb      	adds	r3, r7, r3
    a774:	3a01      	subs	r2, #1
    a776:	701a      	strb	r2, [r3, #0]
		if(retry) goto _RETRY_;
    a778:	230f      	movs	r3, #15
    a77a:	18fb      	adds	r3, r7, r3
    a77c:	781b      	ldrb	r3, [r3, #0]
    a77e:	2b00      	cmp	r3, #0
    a780:	d000      	beq.n	a784 <spi_read_reg+0x1b4>
    a782:	e73a      	b.n	a5fa <spi_read_reg+0x2a>
	}
		
	return result;
    a784:	230e      	movs	r3, #14
    a786:	18fb      	adds	r3, r7, r3
    a788:	781b      	ldrb	r3, [r3, #0]
    a78a:	b25b      	sxtb	r3, r3
}
    a78c:	0018      	movs	r0, r3
    a78e:	46bd      	mov	sp, r7
    a790:	b004      	add	sp, #16
    a792:	bdb0      	pop	{r4, r5, r7, pc}
    a794:	000098fd 	.word	0x000098fd
    a798:	00000417 	.word	0x00000417
    a79c:	00020918 	.word	0x00020918
    a7a0:	00020320 	.word	0x00020320
    a7a4:	0001c2d5 	.word	0x0001c2d5
    a7a8:	0002067c 	.word	0x0002067c
    a7ac:	0001c309 	.word	0x0001c309
    a7b0:	00009d41 	.word	0x00009d41
    a7b4:	0000041d 	.word	0x0000041d
    a7b8:	000206a8 	.word	0x000206a8
    a7bc:	00009e79 	.word	0x00009e79
    a7c0:	00000424 	.word	0x00000424
    a7c4:	000206dc 	.word	0x000206dc
    a7c8:	0001c3f1 	.word	0x0001c3f1
    a7cc:	00006471 	.word	0x00006471
    a7d0:	0000043c 	.word	0x0000043c
    a7d4:	000206fc 	.word	0x000206fc

0000a7d8 <nm_spi_read>:

static sint8 nm_spi_read(uint32 addr, uint8 *buf, uint16 size)
{
    a7d8:	b5b0      	push	{r4, r5, r7, lr}
    a7da:	b088      	sub	sp, #32
    a7dc:	af02      	add	r7, sp, #8
    a7de:	60f8      	str	r0, [r7, #12]
    a7e0:	60b9      	str	r1, [r7, #8]
    a7e2:	1dbb      	adds	r3, r7, #6
    a7e4:	801a      	strh	r2, [r3, #0]
	uint8 cmd = CMD_DMA_EXT_READ;
    a7e6:	2314      	movs	r3, #20
    a7e8:	18fb      	adds	r3, r7, r3
    a7ea:	22c8      	movs	r2, #200	; 0xc8
    a7ec:	701a      	strb	r2, [r3, #0]
	sint8 result;
	uint8 retry = SPI_RETRY_COUNT;
    a7ee:	2316      	movs	r3, #22
    a7f0:	18fb      	adds	r3, r7, r3
    a7f2:	220a      	movs	r2, #10
    a7f4:	701a      	strb	r2, [r3, #0]
#if defined USE_OLD_SPI_SW
	uint8 tmp[2];
	uint8 single_byte_workaround = 0;
    a7f6:	2315      	movs	r3, #21
    a7f8:	18fb      	adds	r3, r7, r3
    a7fa:	2200      	movs	r2, #0
    a7fc:	701a      	strb	r2, [r3, #0]

	/**
		Command
	**/
#if defined USE_OLD_SPI_SW
	if (size == 1)
    a7fe:	1dbb      	adds	r3, r7, #6
    a800:	881b      	ldrh	r3, [r3, #0]
    a802:	2b01      	cmp	r3, #1
    a804:	d106      	bne.n	a814 <nm_spi_read+0x3c>
	{
		//Workaround hardware problem with single byte transfers over SPI bus
		size = 2;
    a806:	1dbb      	adds	r3, r7, #6
    a808:	2202      	movs	r2, #2
    a80a:	801a      	strh	r2, [r3, #0]
		single_byte_workaround = 1;
    a80c:	2315      	movs	r3, #21
    a80e:	18fb      	adds	r3, r7, r3
    a810:	2201      	movs	r2, #1
    a812:	701a      	strb	r2, [r3, #0]
	}
	result = spi_cmd(cmd, addr, 0, size,0);
    a814:	1dbb      	adds	r3, r7, #6
    a816:	881a      	ldrh	r2, [r3, #0]
    a818:	2317      	movs	r3, #23
    a81a:	18fc      	adds	r4, r7, r3
    a81c:	68f9      	ldr	r1, [r7, #12]
    a81e:	2314      	movs	r3, #20
    a820:	18fb      	adds	r3, r7, r3
    a822:	7818      	ldrb	r0, [r3, #0]
    a824:	2300      	movs	r3, #0
    a826:	9300      	str	r3, [sp, #0]
    a828:	0013      	movs	r3, r2
    a82a:	2200      	movs	r2, #0
    a82c:	4d56      	ldr	r5, [pc, #344]	; (a988 <nm_spi_read+0x1b0>)
    a82e:	47a8      	blx	r5
    a830:	0003      	movs	r3, r0
    a832:	7023      	strb	r3, [r4, #0]
	if (result != N_OK) {
    a834:	2317      	movs	r3, #23
    a836:	18fb      	adds	r3, r7, r3
    a838:	781b      	ldrb	r3, [r3, #0]
    a83a:	b25b      	sxtb	r3, r3
    a83c:	2b01      	cmp	r3, #1
    a83e:	d00f      	beq.n	a860 <nm_spi_read+0x88>
		M2M_ERR("[nmi spi]: Failed cmd, read block (%08x)...\n", (unsigned int)addr);
    a840:	4a52      	ldr	r2, [pc, #328]	; (a98c <nm_spi_read+0x1b4>)
    a842:	4953      	ldr	r1, [pc, #332]	; (a990 <nm_spi_read+0x1b8>)
    a844:	4b53      	ldr	r3, [pc, #332]	; (a994 <nm_spi_read+0x1bc>)
    a846:	0018      	movs	r0, r3
    a848:	4b53      	ldr	r3, [pc, #332]	; (a998 <nm_spi_read+0x1c0>)
    a84a:	4798      	blx	r3
    a84c:	68fa      	ldr	r2, [r7, #12]
    a84e:	4b53      	ldr	r3, [pc, #332]	; (a99c <nm_spi_read+0x1c4>)
    a850:	0011      	movs	r1, r2
    a852:	0018      	movs	r0, r3
    a854:	4b50      	ldr	r3, [pc, #320]	; (a998 <nm_spi_read+0x1c0>)
    a856:	4798      	blx	r3
    a858:	200d      	movs	r0, #13
    a85a:	4b51      	ldr	r3, [pc, #324]	; (a9a0 <nm_spi_read+0x1c8>)
    a85c:	4798      	blx	r3
		goto _FAIL_;
    a85e:	e055      	b.n	a90c <nm_spi_read+0x134>
	}

	result = spi_cmd_rsp(cmd);
    a860:	2317      	movs	r3, #23
    a862:	18fc      	adds	r4, r7, r3
    a864:	2314      	movs	r3, #20
    a866:	18fb      	adds	r3, r7, r3
    a868:	781b      	ldrb	r3, [r3, #0]
    a86a:	0018      	movs	r0, r3
    a86c:	4b4d      	ldr	r3, [pc, #308]	; (a9a4 <nm_spi_read+0x1cc>)
    a86e:	4798      	blx	r3
    a870:	0003      	movs	r3, r0
    a872:	7023      	strb	r3, [r4, #0]
	if (result != N_OK) {
    a874:	2317      	movs	r3, #23
    a876:	18fb      	adds	r3, r7, r3
    a878:	781b      	ldrb	r3, [r3, #0]
    a87a:	b25b      	sxtb	r3, r3
    a87c:	2b01      	cmp	r3, #1
    a87e:	d00f      	beq.n	a8a0 <nm_spi_read+0xc8>
		M2M_ERR("[nmi spi]: Failed cmd response, read block (%08x)...\n", (unsigned int)addr);
    a880:	4a49      	ldr	r2, [pc, #292]	; (a9a8 <nm_spi_read+0x1d0>)
    a882:	4943      	ldr	r1, [pc, #268]	; (a990 <nm_spi_read+0x1b8>)
    a884:	4b43      	ldr	r3, [pc, #268]	; (a994 <nm_spi_read+0x1bc>)
    a886:	0018      	movs	r0, r3
    a888:	4b43      	ldr	r3, [pc, #268]	; (a998 <nm_spi_read+0x1c0>)
    a88a:	4798      	blx	r3
    a88c:	68fa      	ldr	r2, [r7, #12]
    a88e:	4b47      	ldr	r3, [pc, #284]	; (a9ac <nm_spi_read+0x1d4>)
    a890:	0011      	movs	r1, r2
    a892:	0018      	movs	r0, r3
    a894:	4b40      	ldr	r3, [pc, #256]	; (a998 <nm_spi_read+0x1c0>)
    a896:	4798      	blx	r3
    a898:	200d      	movs	r0, #13
    a89a:	4b41      	ldr	r3, [pc, #260]	; (a9a0 <nm_spi_read+0x1c8>)
    a89c:	4798      	blx	r3
		goto _FAIL_;
    a89e:	e035      	b.n	a90c <nm_spi_read+0x134>
	}

	/**
		Data
	**/
	if (single_byte_workaround)
    a8a0:	2315      	movs	r3, #21
    a8a2:	18fb      	adds	r3, r7, r3
    a8a4:	781b      	ldrb	r3, [r3, #0]
    a8a6:	2b00      	cmp	r3, #0
    a8a8:	d011      	beq.n	a8ce <nm_spi_read+0xf6>
	{
		result = spi_data_read(tmp, size,0);
    a8aa:	2317      	movs	r3, #23
    a8ac:	18fc      	adds	r4, r7, r3
    a8ae:	1dbb      	adds	r3, r7, #6
    a8b0:	8819      	ldrh	r1, [r3, #0]
    a8b2:	2310      	movs	r3, #16
    a8b4:	18fb      	adds	r3, r7, r3
    a8b6:	2200      	movs	r2, #0
    a8b8:	0018      	movs	r0, r3
    a8ba:	4b3d      	ldr	r3, [pc, #244]	; (a9b0 <nm_spi_read+0x1d8>)
    a8bc:	4798      	blx	r3
    a8be:	0003      	movs	r3, r0
    a8c0:	7023      	strb	r3, [r4, #0]
		buf[0] = tmp[0];
    a8c2:	2310      	movs	r3, #16
    a8c4:	18fb      	adds	r3, r7, r3
    a8c6:	781a      	ldrb	r2, [r3, #0]
    a8c8:	68bb      	ldr	r3, [r7, #8]
    a8ca:	701a      	strb	r2, [r3, #0]
    a8cc:	e00a      	b.n	a8e4 <nm_spi_read+0x10c>
	}
	else
		result = spi_data_read(buf, size,0);
    a8ce:	2317      	movs	r3, #23
    a8d0:	18fc      	adds	r4, r7, r3
    a8d2:	1dbb      	adds	r3, r7, #6
    a8d4:	8819      	ldrh	r1, [r3, #0]
    a8d6:	68bb      	ldr	r3, [r7, #8]
    a8d8:	2200      	movs	r2, #0
    a8da:	0018      	movs	r0, r3
    a8dc:	4b34      	ldr	r3, [pc, #208]	; (a9b0 <nm_spi_read+0x1d8>)
    a8de:	4798      	blx	r3
    a8e0:	0003      	movs	r3, r0
    a8e2:	7023      	strb	r3, [r4, #0]

	if (result != N_OK) {
    a8e4:	2317      	movs	r3, #23
    a8e6:	18fb      	adds	r3, r7, r3
    a8e8:	781b      	ldrb	r3, [r3, #0]
    a8ea:	b25b      	sxtb	r3, r3
    a8ec:	2b01      	cmp	r3, #1
    a8ee:	d00d      	beq.n	a90c <nm_spi_read+0x134>
		M2M_ERR("[nmi spi]: Failed block data read...\n");
    a8f0:	4a30      	ldr	r2, [pc, #192]	; (a9b4 <nm_spi_read+0x1dc>)
    a8f2:	4927      	ldr	r1, [pc, #156]	; (a990 <nm_spi_read+0x1b8>)
    a8f4:	4b27      	ldr	r3, [pc, #156]	; (a994 <nm_spi_read+0x1bc>)
    a8f6:	0018      	movs	r0, r3
    a8f8:	4b27      	ldr	r3, [pc, #156]	; (a998 <nm_spi_read+0x1c0>)
    a8fa:	4798      	blx	r3
    a8fc:	4b2e      	ldr	r3, [pc, #184]	; (a9b8 <nm_spi_read+0x1e0>)
    a8fe:	0018      	movs	r0, r3
    a900:	4b2e      	ldr	r3, [pc, #184]	; (a9bc <nm_spi_read+0x1e4>)
    a902:	4798      	blx	r3
    a904:	200d      	movs	r0, #13
    a906:	4b26      	ldr	r3, [pc, #152]	; (a9a0 <nm_spi_read+0x1c8>)
    a908:	4798      	blx	r3
		goto _FAIL_;
    a90a:	46c0      	nop			; (mov r8, r8)
		goto _FAIL_;
	}
#endif

_FAIL_:
	if(result != N_OK)
    a90c:	2317      	movs	r3, #23
    a90e:	18fb      	adds	r3, r7, r3
    a910:	781b      	ldrb	r3, [r3, #0]
    a912:	b25b      	sxtb	r3, r3
    a914:	2b01      	cmp	r3, #1
    a916:	d02f      	beq.n	a978 <nm_spi_read+0x1a0>
	{
		nm_bsp_sleep(1);
    a918:	2001      	movs	r0, #1
    a91a:	4b29      	ldr	r3, [pc, #164]	; (a9c0 <nm_spi_read+0x1e8>)
    a91c:	4798      	blx	r3
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
    a91e:	2300      	movs	r3, #0
    a920:	9300      	str	r3, [sp, #0]
    a922:	2300      	movs	r3, #0
    a924:	2200      	movs	r2, #0
    a926:	2100      	movs	r1, #0
    a928:	20cf      	movs	r0, #207	; 0xcf
    a92a:	4c17      	ldr	r4, [pc, #92]	; (a988 <nm_spi_read+0x1b0>)
    a92c:	47a0      	blx	r4
		spi_cmd_rsp(CMD_RESET);
    a92e:	20cf      	movs	r0, #207	; 0xcf
    a930:	4b1c      	ldr	r3, [pc, #112]	; (a9a4 <nm_spi_read+0x1cc>)
    a932:	4798      	blx	r3
		M2M_ERR("Reset and retry %d %lx %d\n",retry,addr,size);
    a934:	4a23      	ldr	r2, [pc, #140]	; (a9c4 <nm_spi_read+0x1ec>)
    a936:	4916      	ldr	r1, [pc, #88]	; (a990 <nm_spi_read+0x1b8>)
    a938:	4b16      	ldr	r3, [pc, #88]	; (a994 <nm_spi_read+0x1bc>)
    a93a:	0018      	movs	r0, r3
    a93c:	4b16      	ldr	r3, [pc, #88]	; (a998 <nm_spi_read+0x1c0>)
    a93e:	4798      	blx	r3
    a940:	2316      	movs	r3, #22
    a942:	18fb      	adds	r3, r7, r3
    a944:	7819      	ldrb	r1, [r3, #0]
    a946:	1dbb      	adds	r3, r7, #6
    a948:	881b      	ldrh	r3, [r3, #0]
    a94a:	68fa      	ldr	r2, [r7, #12]
    a94c:	481e      	ldr	r0, [pc, #120]	; (a9c8 <nm_spi_read+0x1f0>)
    a94e:	4c12      	ldr	r4, [pc, #72]	; (a998 <nm_spi_read+0x1c0>)
    a950:	47a0      	blx	r4
    a952:	200d      	movs	r0, #13
    a954:	4b12      	ldr	r3, [pc, #72]	; (a9a0 <nm_spi_read+0x1c8>)
    a956:	4798      	blx	r3
		nm_bsp_sleep(1);
    a958:	2001      	movs	r0, #1
    a95a:	4b19      	ldr	r3, [pc, #100]	; (a9c0 <nm_spi_read+0x1e8>)
    a95c:	4798      	blx	r3
		retry--;
    a95e:	2316      	movs	r3, #22
    a960:	18fb      	adds	r3, r7, r3
    a962:	781a      	ldrb	r2, [r3, #0]
    a964:	2316      	movs	r3, #22
    a966:	18fb      	adds	r3, r7, r3
    a968:	3a01      	subs	r2, #1
    a96a:	701a      	strb	r2, [r3, #0]
		if(retry) goto _RETRY_;
    a96c:	2316      	movs	r3, #22
    a96e:	18fb      	adds	r3, r7, r3
    a970:	781b      	ldrb	r3, [r3, #0]
    a972:	2b00      	cmp	r3, #0
    a974:	d000      	beq.n	a978 <nm_spi_read+0x1a0>
    a976:	e742      	b.n	a7fe <nm_spi_read+0x26>
	}

	return result;
    a978:	2317      	movs	r3, #23
    a97a:	18fb      	adds	r3, r7, r3
    a97c:	781b      	ldrb	r3, [r3, #0]
    a97e:	b25b      	sxtb	r3, r3
}
    a980:	0018      	movs	r0, r3
    a982:	46bd      	mov	sp, r7
    a984:	b006      	add	sp, #24
    a986:	bdb0      	pop	{r4, r5, r7, pc}
    a988:	000098fd 	.word	0x000098fd
    a98c:	0000045d 	.word	0x0000045d
    a990:	00020928 	.word	0x00020928
    a994:	00020320 	.word	0x00020320
    a998:	0001c2d5 	.word	0x0001c2d5
    a99c:	00020714 	.word	0x00020714
    a9a0:	0001c309 	.word	0x0001c309
    a9a4:	00009d41 	.word	0x00009d41
    a9a8:	00000463 	.word	0x00000463
    a9ac:	00020744 	.word	0x00020744
    a9b0:	00009e79 	.word	0x00009e79
    a9b4:	00000473 	.word	0x00000473
    a9b8:	0002077c 	.word	0x0002077c
    a9bc:	0001c3f1 	.word	0x0001c3f1
    a9c0:	00006471 	.word	0x00006471
    a9c4:	00000484 	.word	0x00000484
    a9c8:	00020660 	.word	0x00020660

0000a9cc <spi_init_pkt_sz>:
	Bus interfaces

********************************************/

static void spi_init_pkt_sz(void)
{
    a9cc:	b580      	push	{r7, lr}
    a9ce:	b082      	sub	sp, #8
    a9d0:	af00      	add	r7, sp, #0
	uint32 val32;

	/* Make sure SPI max. packet size fits the defined DATA_PKT_SZ.  */
	val32 = nm_spi_read_reg(SPI_BASE+0x24);
    a9d2:	4b0c      	ldr	r3, [pc, #48]	; (aa04 <spi_init_pkt_sz+0x38>)
    a9d4:	0018      	movs	r0, r3
    a9d6:	4b0c      	ldr	r3, [pc, #48]	; (aa08 <spi_init_pkt_sz+0x3c>)
    a9d8:	4798      	blx	r3
    a9da:	0003      	movs	r3, r0
    a9dc:	607b      	str	r3, [r7, #4]
	val32 &= ~(0x7 << 4);
    a9de:	687b      	ldr	r3, [r7, #4]
    a9e0:	2270      	movs	r2, #112	; 0x70
    a9e2:	4393      	bics	r3, r2
    a9e4:	607b      	str	r3, [r7, #4]
	case 256:  val32 |= (0 << 4); break;
	case 512:  val32 |= (1 << 4); break;
	case 1024: val32 |= (2 << 4); break;
	case 2048: val32 |= (3 << 4); break;
	case 4096: val32 |= (4 << 4); break;
	case 8192: val32 |= (5 << 4); break;
    a9e6:	687b      	ldr	r3, [r7, #4]
    a9e8:	2250      	movs	r2, #80	; 0x50
    a9ea:	4313      	orrs	r3, r2
    a9ec:	607b      	str	r3, [r7, #4]
    a9ee:	46c0      	nop			; (mov r8, r8)

	}
	nm_spi_write_reg(SPI_BASE+0x24, val32);
    a9f0:	687b      	ldr	r3, [r7, #4]
    a9f2:	4a04      	ldr	r2, [pc, #16]	; (aa04 <spi_init_pkt_sz+0x38>)
    a9f4:	0019      	movs	r1, r3
    a9f6:	0010      	movs	r0, r2
    a9f8:	4b04      	ldr	r3, [pc, #16]	; (aa0c <spi_init_pkt_sz+0x40>)
    a9fa:	4798      	blx	r3
}
    a9fc:	46c0      	nop			; (mov r8, r8)
    a9fe:	46bd      	mov	sp, r7
    aa00:	b002      	add	sp, #8
    aa02:	bd80      	pop	{r7, pc}
    aa04:	0000e824 	.word	0x0000e824
    aa08:	0000aba5 	.word	0x0000aba5
    aa0c:	0000ac19 	.word	0x0000ac19

0000aa10 <nm_spi_reset>:

sint8 nm_spi_reset(void)
{
    aa10:	b590      	push	{r4, r7, lr}
    aa12:	b083      	sub	sp, #12
    aa14:	af02      	add	r7, sp, #8
	spi_cmd(CMD_RESET, 0, 0, 0, 0);
    aa16:	2300      	movs	r3, #0
    aa18:	9300      	str	r3, [sp, #0]
    aa1a:	2300      	movs	r3, #0
    aa1c:	2200      	movs	r2, #0
    aa1e:	2100      	movs	r1, #0
    aa20:	20cf      	movs	r0, #207	; 0xcf
    aa22:	4c05      	ldr	r4, [pc, #20]	; (aa38 <nm_spi_reset+0x28>)
    aa24:	47a0      	blx	r4
	spi_cmd_rsp(CMD_RESET);
    aa26:	20cf      	movs	r0, #207	; 0xcf
    aa28:	4b04      	ldr	r3, [pc, #16]	; (aa3c <nm_spi_reset+0x2c>)
    aa2a:	4798      	blx	r3
	return M2M_SUCCESS;
    aa2c:	2300      	movs	r3, #0
}
    aa2e:	0018      	movs	r0, r3
    aa30:	46bd      	mov	sp, r7
    aa32:	b001      	add	sp, #4
    aa34:	bd90      	pop	{r4, r7, pc}
    aa36:	46c0      	nop			; (mov r8, r8)
    aa38:	000098fd 	.word	0x000098fd
    aa3c:	00009d41 	.word	0x00009d41

0000aa40 <nm_spi_init>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_init(void)
{
    aa40:	b580      	push	{r7, lr}
    aa42:	b082      	sub	sp, #8
    aa44:	af00      	add	r7, sp, #0
	uint32 chipid;
	uint32 reg = 0;
    aa46:	2300      	movs	r3, #0
    aa48:	603b      	str	r3, [r7, #0]
	

	/**
		configure protocol
	**/
	gu8Crc_off = 0;
    aa4a:	4b3e      	ldr	r3, [pc, #248]	; (ab44 <nm_spi_init+0x104>)
    aa4c:	2200      	movs	r2, #0
    aa4e:	701a      	strb	r2, [r3, #0]

	// TODO: We can remove the CRC trials if there is a definite way to reset
	// the SPI to it's initial value.
	if (!spi_read_reg(NMI_SPI_PROTOCOL_CONFIG, &reg)) {
    aa50:	003b      	movs	r3, r7
    aa52:	4a3d      	ldr	r2, [pc, #244]	; (ab48 <nm_spi_init+0x108>)
    aa54:	0019      	movs	r1, r3
    aa56:	0010      	movs	r0, r2
    aa58:	4b3c      	ldr	r3, [pc, #240]	; (ab4c <nm_spi_init+0x10c>)
    aa5a:	4798      	blx	r3
    aa5c:	1e03      	subs	r3, r0, #0
    aa5e:	d126      	bne.n	aaae <nm_spi_init+0x6e>
		/* Read failed. Try with CRC off. This might happen when module
		is removed but chip isn't reset*/
		gu8Crc_off = 1;
    aa60:	4b38      	ldr	r3, [pc, #224]	; (ab44 <nm_spi_init+0x104>)
    aa62:	2201      	movs	r2, #1
    aa64:	701a      	strb	r2, [r3, #0]
		M2M_ERR("[nmi spi]: Failed internal read protocol with CRC on, retyring with CRC off...\n");
    aa66:	4a3a      	ldr	r2, [pc, #232]	; (ab50 <nm_spi_init+0x110>)
    aa68:	493a      	ldr	r1, [pc, #232]	; (ab54 <nm_spi_init+0x114>)
    aa6a:	4b3b      	ldr	r3, [pc, #236]	; (ab58 <nm_spi_init+0x118>)
    aa6c:	0018      	movs	r0, r3
    aa6e:	4b3b      	ldr	r3, [pc, #236]	; (ab5c <nm_spi_init+0x11c>)
    aa70:	4798      	blx	r3
    aa72:	4b3b      	ldr	r3, [pc, #236]	; (ab60 <nm_spi_init+0x120>)
    aa74:	0018      	movs	r0, r3
    aa76:	4b3b      	ldr	r3, [pc, #236]	; (ab64 <nm_spi_init+0x124>)
    aa78:	4798      	blx	r3
    aa7a:	200d      	movs	r0, #13
    aa7c:	4b3a      	ldr	r3, [pc, #232]	; (ab68 <nm_spi_init+0x128>)
    aa7e:	4798      	blx	r3
		if (!spi_read_reg(NMI_SPI_PROTOCOL_CONFIG, &reg)){
    aa80:	003b      	movs	r3, r7
    aa82:	4a31      	ldr	r2, [pc, #196]	; (ab48 <nm_spi_init+0x108>)
    aa84:	0019      	movs	r1, r3
    aa86:	0010      	movs	r0, r2
    aa88:	4b30      	ldr	r3, [pc, #192]	; (ab4c <nm_spi_init+0x10c>)
    aa8a:	4798      	blx	r3
    aa8c:	1e03      	subs	r3, r0, #0
    aa8e:	d10e      	bne.n	aaae <nm_spi_init+0x6e>
			// Reaad failed with both CRC on and off, something went bad
			M2M_ERR( "[nmi spi]: Failed internal read protocol...\n");
    aa90:	4a36      	ldr	r2, [pc, #216]	; (ab6c <nm_spi_init+0x12c>)
    aa92:	4930      	ldr	r1, [pc, #192]	; (ab54 <nm_spi_init+0x114>)
    aa94:	4b30      	ldr	r3, [pc, #192]	; (ab58 <nm_spi_init+0x118>)
    aa96:	0018      	movs	r0, r3
    aa98:	4b30      	ldr	r3, [pc, #192]	; (ab5c <nm_spi_init+0x11c>)
    aa9a:	4798      	blx	r3
    aa9c:	4b34      	ldr	r3, [pc, #208]	; (ab70 <nm_spi_init+0x130>)
    aa9e:	0018      	movs	r0, r3
    aaa0:	4b30      	ldr	r3, [pc, #192]	; (ab64 <nm_spi_init+0x124>)
    aaa2:	4798      	blx	r3
    aaa4:	200d      	movs	r0, #13
    aaa6:	4b30      	ldr	r3, [pc, #192]	; (ab68 <nm_spi_init+0x128>)
    aaa8:	4798      	blx	r3
			return 0;
    aaaa:	2300      	movs	r3, #0
    aaac:	e045      	b.n	ab3a <nm_spi_init+0xfa>
		}
	}
	if(gu8Crc_off == 0)
    aaae:	4b25      	ldr	r3, [pc, #148]	; (ab44 <nm_spi_init+0x104>)
    aab0:	781b      	ldrb	r3, [r3, #0]
    aab2:	2b00      	cmp	r3, #0
    aab4:	d125      	bne.n	ab02 <nm_spi_init+0xc2>
	{
		reg &= ~0xc;	/* disable crc checking */
    aab6:	683b      	ldr	r3, [r7, #0]
    aab8:	220c      	movs	r2, #12
    aaba:	4393      	bics	r3, r2
    aabc:	603b      	str	r3, [r7, #0]
		reg &= ~0x70;
    aabe:	683b      	ldr	r3, [r7, #0]
    aac0:	2270      	movs	r2, #112	; 0x70
    aac2:	4393      	bics	r3, r2
    aac4:	603b      	str	r3, [r7, #0]
		reg |= (0x5 << 4);
    aac6:	683b      	ldr	r3, [r7, #0]
    aac8:	2250      	movs	r2, #80	; 0x50
    aaca:	4313      	orrs	r3, r2
    aacc:	603b      	str	r3, [r7, #0]
		if (!spi_write_reg(NMI_SPI_PROTOCOL_CONFIG, reg)) {
    aace:	683b      	ldr	r3, [r7, #0]
    aad0:	4a1d      	ldr	r2, [pc, #116]	; (ab48 <nm_spi_init+0x108>)
    aad2:	0019      	movs	r1, r3
    aad4:	0010      	movs	r0, r2
    aad6:	4b27      	ldr	r3, [pc, #156]	; (ab74 <nm_spi_init+0x134>)
    aad8:	4798      	blx	r3
    aada:	1e03      	subs	r3, r0, #0
    aadc:	d10e      	bne.n	aafc <nm_spi_init+0xbc>
			M2M_ERR( "[nmi spi]: Failed internal write protocol reg...\n");
    aade:	4a26      	ldr	r2, [pc, #152]	; (ab78 <nm_spi_init+0x138>)
    aae0:	491c      	ldr	r1, [pc, #112]	; (ab54 <nm_spi_init+0x114>)
    aae2:	4b1d      	ldr	r3, [pc, #116]	; (ab58 <nm_spi_init+0x118>)
    aae4:	0018      	movs	r0, r3
    aae6:	4b1d      	ldr	r3, [pc, #116]	; (ab5c <nm_spi_init+0x11c>)
    aae8:	4798      	blx	r3
    aaea:	4b24      	ldr	r3, [pc, #144]	; (ab7c <nm_spi_init+0x13c>)
    aaec:	0018      	movs	r0, r3
    aaee:	4b1d      	ldr	r3, [pc, #116]	; (ab64 <nm_spi_init+0x124>)
    aaf0:	4798      	blx	r3
    aaf2:	200d      	movs	r0, #13
    aaf4:	4b1c      	ldr	r3, [pc, #112]	; (ab68 <nm_spi_init+0x128>)
    aaf6:	4798      	blx	r3
			return 0;
    aaf8:	2300      	movs	r3, #0
    aafa:	e01e      	b.n	ab3a <nm_spi_init+0xfa>
		}
		gu8Crc_off = 1;
    aafc:	4b11      	ldr	r3, [pc, #68]	; (ab44 <nm_spi_init+0x104>)
    aafe:	2201      	movs	r2, #1
    ab00:	701a      	strb	r2, [r3, #0]
	}

	/**
		make sure can read back chip id correctly
	**/
	if (!spi_read_reg(0x1000, &chipid)) {
    ab02:	1d3a      	adds	r2, r7, #4
    ab04:	2380      	movs	r3, #128	; 0x80
    ab06:	015b      	lsls	r3, r3, #5
    ab08:	0011      	movs	r1, r2
    ab0a:	0018      	movs	r0, r3
    ab0c:	4b0f      	ldr	r3, [pc, #60]	; (ab4c <nm_spi_init+0x10c>)
    ab0e:	4798      	blx	r3
    ab10:	1e03      	subs	r3, r0, #0
    ab12:	d10f      	bne.n	ab34 <nm_spi_init+0xf4>
		M2M_ERR("[nmi spi]: Fail cmd read chip id...\n");
    ab14:	4a1a      	ldr	r2, [pc, #104]	; (ab80 <nm_spi_init+0x140>)
    ab16:	490f      	ldr	r1, [pc, #60]	; (ab54 <nm_spi_init+0x114>)
    ab18:	4b0f      	ldr	r3, [pc, #60]	; (ab58 <nm_spi_init+0x118>)
    ab1a:	0018      	movs	r0, r3
    ab1c:	4b0f      	ldr	r3, [pc, #60]	; (ab5c <nm_spi_init+0x11c>)
    ab1e:	4798      	blx	r3
    ab20:	4b18      	ldr	r3, [pc, #96]	; (ab84 <nm_spi_init+0x144>)
    ab22:	0018      	movs	r0, r3
    ab24:	4b0f      	ldr	r3, [pc, #60]	; (ab64 <nm_spi_init+0x124>)
    ab26:	4798      	blx	r3
    ab28:	200d      	movs	r0, #13
    ab2a:	4b0f      	ldr	r3, [pc, #60]	; (ab68 <nm_spi_init+0x128>)
    ab2c:	4798      	blx	r3
		return M2M_ERR_BUS_FAIL;
    ab2e:	2306      	movs	r3, #6
    ab30:	425b      	negs	r3, r3
    ab32:	e002      	b.n	ab3a <nm_spi_init+0xfa>
	}

	M2M_DBG("[nmi spi]: chipid (%08x)\n", (unsigned int)chipid);
	spi_init_pkt_sz();
    ab34:	4b14      	ldr	r3, [pc, #80]	; (ab88 <nm_spi_init+0x148>)
    ab36:	4798      	blx	r3


	return M2M_SUCCESS;
    ab38:	2300      	movs	r3, #0
}
    ab3a:	0018      	movs	r0, r3
    ab3c:	46bd      	mov	sp, r7
    ab3e:	b002      	add	sp, #8
    ab40:	bd80      	pop	{r7, pc}
    ab42:	46c0      	nop			; (mov r8, r8)
    ab44:	20000554 	.word	0x20000554
    ab48:	0000e824 	.word	0x0000e824
    ab4c:	0000a5d1 	.word	0x0000a5d1
    ab50:	000004c7 	.word	0x000004c7
    ab54:	00020934 	.word	0x00020934
    ab58:	00020320 	.word	0x00020320
    ab5c:	0001c2d5 	.word	0x0001c2d5
    ab60:	000207a4 	.word	0x000207a4
    ab64:	0001c3f1 	.word	0x0001c3f1
    ab68:	0001c309 	.word	0x0001c309
    ab6c:	000004ca 	.word	0x000004ca
    ab70:	000207f4 	.word	0x000207f4
    ab74:	0000a251 	.word	0x0000a251
    ab78:	000004d4 	.word	0x000004d4
    ab7c:	00020820 	.word	0x00020820
    ab80:	000004de 	.word	0x000004de
    ab84:	00020854 	.word	0x00020854
    ab88:	0000a9cd 	.word	0x0000a9cd

0000ab8c <nm_spi_deinit>:
*	@author	Samer Sarhan
*	@date	27 Feb 2015
*	@version	1.0
*/ 
sint8 nm_spi_deinit(void)
{
    ab8c:	b580      	push	{r7, lr}
    ab8e:	af00      	add	r7, sp, #0
	gu8Crc_off = 0;
    ab90:	4b03      	ldr	r3, [pc, #12]	; (aba0 <nm_spi_deinit+0x14>)
    ab92:	2200      	movs	r2, #0
    ab94:	701a      	strb	r2, [r3, #0]
	return M2M_SUCCESS;
    ab96:	2300      	movs	r3, #0
}
    ab98:	0018      	movs	r0, r3
    ab9a:	46bd      	mov	sp, r7
    ab9c:	bd80      	pop	{r7, pc}
    ab9e:	46c0      	nop			; (mov r8, r8)
    aba0:	20000554 	.word	0x20000554

0000aba4 <nm_spi_read_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
uint32 nm_spi_read_reg(uint32 u32Addr)
{
    aba4:	b580      	push	{r7, lr}
    aba6:	b084      	sub	sp, #16
    aba8:	af00      	add	r7, sp, #0
    abaa:	6078      	str	r0, [r7, #4]
	uint32 u32Val;

	spi_read_reg(u32Addr, &u32Val);
    abac:	230c      	movs	r3, #12
    abae:	18fa      	adds	r2, r7, r3
    abb0:	687b      	ldr	r3, [r7, #4]
    abb2:	0011      	movs	r1, r2
    abb4:	0018      	movs	r0, r3
    abb6:	4b03      	ldr	r3, [pc, #12]	; (abc4 <nm_spi_read_reg+0x20>)
    abb8:	4798      	blx	r3

	return u32Val;
    abba:	68fb      	ldr	r3, [r7, #12]
}
    abbc:	0018      	movs	r0, r3
    abbe:	46bd      	mov	sp, r7
    abc0:	b004      	add	sp, #16
    abc2:	bd80      	pop	{r7, pc}
    abc4:	0000a5d1 	.word	0x0000a5d1

0000abc8 <nm_spi_read_reg_with_ret>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_read_reg_with_ret(uint32 u32Addr, uint32* pu32RetVal)
{
    abc8:	b590      	push	{r4, r7, lr}
    abca:	b085      	sub	sp, #20
    abcc:	af00      	add	r7, sp, #0
    abce:	6078      	str	r0, [r7, #4]
    abd0:	6039      	str	r1, [r7, #0]
	sint8 s8Ret;

	s8Ret = spi_read_reg(u32Addr,pu32RetVal);
    abd2:	230f      	movs	r3, #15
    abd4:	18fc      	adds	r4, r7, r3
    abd6:	683a      	ldr	r2, [r7, #0]
    abd8:	687b      	ldr	r3, [r7, #4]
    abda:	0011      	movs	r1, r2
    abdc:	0018      	movs	r0, r3
    abde:	4b0d      	ldr	r3, [pc, #52]	; (ac14 <nm_spi_read_reg_with_ret+0x4c>)
    abe0:	4798      	blx	r3
    abe2:	0003      	movs	r3, r0
    abe4:	7023      	strb	r3, [r4, #0]

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
    abe6:	230f      	movs	r3, #15
    abe8:	18fb      	adds	r3, r7, r3
    abea:	781b      	ldrb	r3, [r3, #0]
    abec:	b25b      	sxtb	r3, r3
    abee:	2b01      	cmp	r3, #1
    abf0:	d104      	bne.n	abfc <nm_spi_read_reg_with_ret+0x34>
    abf2:	230f      	movs	r3, #15
    abf4:	18fb      	adds	r3, r7, r3
    abf6:	2200      	movs	r2, #0
    abf8:	701a      	strb	r2, [r3, #0]
    abfa:	e003      	b.n	ac04 <nm_spi_read_reg_with_ret+0x3c>
	else s8Ret = M2M_ERR_BUS_FAIL;
    abfc:	230f      	movs	r3, #15
    abfe:	18fb      	adds	r3, r7, r3
    ac00:	22fa      	movs	r2, #250	; 0xfa
    ac02:	701a      	strb	r2, [r3, #0]

	return s8Ret;
    ac04:	230f      	movs	r3, #15
    ac06:	18fb      	adds	r3, r7, r3
    ac08:	781b      	ldrb	r3, [r3, #0]
    ac0a:	b25b      	sxtb	r3, r3
}
    ac0c:	0018      	movs	r0, r3
    ac0e:	46bd      	mov	sp, r7
    ac10:	b005      	add	sp, #20
    ac12:	bd90      	pop	{r4, r7, pc}
    ac14:	0000a5d1 	.word	0x0000a5d1

0000ac18 <nm_spi_write_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_write_reg(uint32 u32Addr, uint32 u32Val)
{
    ac18:	b590      	push	{r4, r7, lr}
    ac1a:	b085      	sub	sp, #20
    ac1c:	af00      	add	r7, sp, #0
    ac1e:	6078      	str	r0, [r7, #4]
    ac20:	6039      	str	r1, [r7, #0]
	sint8 s8Ret;

	s8Ret = spi_write_reg(u32Addr, u32Val);
    ac22:	230f      	movs	r3, #15
    ac24:	18fc      	adds	r4, r7, r3
    ac26:	683a      	ldr	r2, [r7, #0]
    ac28:	687b      	ldr	r3, [r7, #4]
    ac2a:	0011      	movs	r1, r2
    ac2c:	0018      	movs	r0, r3
    ac2e:	4b0d      	ldr	r3, [pc, #52]	; (ac64 <nm_spi_write_reg+0x4c>)
    ac30:	4798      	blx	r3
    ac32:	0003      	movs	r3, r0
    ac34:	7023      	strb	r3, [r4, #0]

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
    ac36:	230f      	movs	r3, #15
    ac38:	18fb      	adds	r3, r7, r3
    ac3a:	781b      	ldrb	r3, [r3, #0]
    ac3c:	b25b      	sxtb	r3, r3
    ac3e:	2b01      	cmp	r3, #1
    ac40:	d104      	bne.n	ac4c <nm_spi_write_reg+0x34>
    ac42:	230f      	movs	r3, #15
    ac44:	18fb      	adds	r3, r7, r3
    ac46:	2200      	movs	r2, #0
    ac48:	701a      	strb	r2, [r3, #0]
    ac4a:	e003      	b.n	ac54 <nm_spi_write_reg+0x3c>
	else s8Ret = M2M_ERR_BUS_FAIL;
    ac4c:	230f      	movs	r3, #15
    ac4e:	18fb      	adds	r3, r7, r3
    ac50:	22fa      	movs	r2, #250	; 0xfa
    ac52:	701a      	strb	r2, [r3, #0]

	return s8Ret;
    ac54:	230f      	movs	r3, #15
    ac56:	18fb      	adds	r3, r7, r3
    ac58:	781b      	ldrb	r3, [r3, #0]
    ac5a:	b25b      	sxtb	r3, r3
}
    ac5c:	0018      	movs	r0, r3
    ac5e:	46bd      	mov	sp, r7
    ac60:	b005      	add	sp, #20
    ac62:	bd90      	pop	{r4, r7, pc}
    ac64:	0000a251 	.word	0x0000a251

0000ac68 <nm_spi_read_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_read_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
    ac68:	b590      	push	{r4, r7, lr}
    ac6a:	b087      	sub	sp, #28
    ac6c:	af00      	add	r7, sp, #0
    ac6e:	60f8      	str	r0, [r7, #12]
    ac70:	60b9      	str	r1, [r7, #8]
    ac72:	1dbb      	adds	r3, r7, #6
    ac74:	801a      	strh	r2, [r3, #0]
	sint8 s8Ret;

	s8Ret = nm_spi_read(u32Addr, puBuf, u16Sz);
    ac76:	2317      	movs	r3, #23
    ac78:	18fc      	adds	r4, r7, r3
    ac7a:	1dbb      	adds	r3, r7, #6
    ac7c:	881a      	ldrh	r2, [r3, #0]
    ac7e:	68b9      	ldr	r1, [r7, #8]
    ac80:	68fb      	ldr	r3, [r7, #12]
    ac82:	0018      	movs	r0, r3
    ac84:	4b0d      	ldr	r3, [pc, #52]	; (acbc <nm_spi_read_block+0x54>)
    ac86:	4798      	blx	r3
    ac88:	0003      	movs	r3, r0
    ac8a:	7023      	strb	r3, [r4, #0]

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
    ac8c:	2317      	movs	r3, #23
    ac8e:	18fb      	adds	r3, r7, r3
    ac90:	781b      	ldrb	r3, [r3, #0]
    ac92:	b25b      	sxtb	r3, r3
    ac94:	2b01      	cmp	r3, #1
    ac96:	d104      	bne.n	aca2 <nm_spi_read_block+0x3a>
    ac98:	2317      	movs	r3, #23
    ac9a:	18fb      	adds	r3, r7, r3
    ac9c:	2200      	movs	r2, #0
    ac9e:	701a      	strb	r2, [r3, #0]
    aca0:	e003      	b.n	acaa <nm_spi_read_block+0x42>
	else s8Ret = M2M_ERR_BUS_FAIL;
    aca2:	2317      	movs	r3, #23
    aca4:	18fb      	adds	r3, r7, r3
    aca6:	22fa      	movs	r2, #250	; 0xfa
    aca8:	701a      	strb	r2, [r3, #0]

	return s8Ret;
    acaa:	2317      	movs	r3, #23
    acac:	18fb      	adds	r3, r7, r3
    acae:	781b      	ldrb	r3, [r3, #0]
    acb0:	b25b      	sxtb	r3, r3
}
    acb2:	0018      	movs	r0, r3
    acb4:	46bd      	mov	sp, r7
    acb6:	b007      	add	sp, #28
    acb8:	bd90      	pop	{r4, r7, pc}
    acba:	46c0      	nop			; (mov r8, r8)
    acbc:	0000a7d9 	.word	0x0000a7d9

0000acc0 <nm_spi_write_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_write_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
    acc0:	b590      	push	{r4, r7, lr}
    acc2:	b087      	sub	sp, #28
    acc4:	af00      	add	r7, sp, #0
    acc6:	60f8      	str	r0, [r7, #12]
    acc8:	60b9      	str	r1, [r7, #8]
    acca:	1dbb      	adds	r3, r7, #6
    accc:	801a      	strh	r2, [r3, #0]
	sint8 s8Ret;

	s8Ret = nm_spi_write(u32Addr, puBuf, u16Sz);
    acce:	2317      	movs	r3, #23
    acd0:	18fc      	adds	r4, r7, r3
    acd2:	1dbb      	adds	r3, r7, #6
    acd4:	881a      	ldrh	r2, [r3, #0]
    acd6:	68b9      	ldr	r1, [r7, #8]
    acd8:	68fb      	ldr	r3, [r7, #12]
    acda:	0018      	movs	r0, r3
    acdc:	4b0d      	ldr	r3, [pc, #52]	; (ad14 <nm_spi_write_block+0x54>)
    acde:	4798      	blx	r3
    ace0:	0003      	movs	r3, r0
    ace2:	7023      	strb	r3, [r4, #0]

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
    ace4:	2317      	movs	r3, #23
    ace6:	18fb      	adds	r3, r7, r3
    ace8:	781b      	ldrb	r3, [r3, #0]
    acea:	b25b      	sxtb	r3, r3
    acec:	2b01      	cmp	r3, #1
    acee:	d104      	bne.n	acfa <nm_spi_write_block+0x3a>
    acf0:	2317      	movs	r3, #23
    acf2:	18fb      	adds	r3, r7, r3
    acf4:	2200      	movs	r2, #0
    acf6:	701a      	strb	r2, [r3, #0]
    acf8:	e003      	b.n	ad02 <nm_spi_write_block+0x42>
	else s8Ret = M2M_ERR_BUS_FAIL;
    acfa:	2317      	movs	r3, #23
    acfc:	18fb      	adds	r3, r7, r3
    acfe:	22fa      	movs	r2, #250	; 0xfa
    ad00:	701a      	strb	r2, [r3, #0]

	return s8Ret;
    ad02:	2317      	movs	r3, #23
    ad04:	18fb      	adds	r3, r7, r3
    ad06:	781b      	ldrb	r3, [r3, #0]
    ad08:	b25b      	sxtb	r3, r3
}
    ad0a:	0018      	movs	r0, r3
    ad0c:	46bd      	mov	sp, r7
    ad0e:	b007      	add	sp, #28
    ad10:	bd90      	pop	{r4, r7, pc}
    ad12:	46c0      	nop			; (mov r8, r8)
    ad14:	0000a3dd 	.word	0x0000a3dd

0000ad18 <Socket_ReadSocketData>:
Date
		17 July 2012
*********************************************************************/
NMI_API void Socket_ReadSocketData(SOCKET sock, tstrSocketRecvMsg *pstrRecv,uint8 u8SocketMsg,
								  uint32 u32StartAddress,uint16 u16ReadCount)
{
    ad18:	b590      	push	{r4, r7, lr}
    ad1a:	b089      	sub	sp, #36	; 0x24
    ad1c:	af00      	add	r7, sp, #0
    ad1e:	60b9      	str	r1, [r7, #8]
    ad20:	0011      	movs	r1, r2
    ad22:	607b      	str	r3, [r7, #4]
    ad24:	230f      	movs	r3, #15
    ad26:	18fb      	adds	r3, r7, r3
    ad28:	1c02      	adds	r2, r0, #0
    ad2a:	701a      	strb	r2, [r3, #0]
    ad2c:	230e      	movs	r3, #14
    ad2e:	18fb      	adds	r3, r7, r3
    ad30:	1c0a      	adds	r2, r1, #0
    ad32:	701a      	strb	r2, [r3, #0]
	if((u16ReadCount > 0) && (gastrSockets[sock].pu8UserBuffer != NULL) && (gastrSockets[sock].u16UserBufferSize > 0) && (gastrSockets[sock].bIsUsed == 1))
    ad34:	2330      	movs	r3, #48	; 0x30
    ad36:	18fb      	adds	r3, r7, r3
    ad38:	881b      	ldrh	r3, [r3, #0]
    ad3a:	2b00      	cmp	r3, #0
    ad3c:	d100      	bne.n	ad40 <Socket_ReadSocketData+0x28>
    ad3e:	e0d6      	b.n	aeee <Socket_ReadSocketData+0x1d6>
    ad40:	230f      	movs	r3, #15
    ad42:	18fb      	adds	r3, r7, r3
    ad44:	2200      	movs	r2, #0
    ad46:	569a      	ldrsb	r2, [r3, r2]
    ad48:	4b6b      	ldr	r3, [pc, #428]	; (aef8 <Socket_ReadSocketData+0x1e0>)
    ad4a:	0112      	lsls	r2, r2, #4
    ad4c:	58d3      	ldr	r3, [r2, r3]
    ad4e:	2b00      	cmp	r3, #0
    ad50:	d100      	bne.n	ad54 <Socket_ReadSocketData+0x3c>
    ad52:	e0cc      	b.n	aeee <Socket_ReadSocketData+0x1d6>
    ad54:	230f      	movs	r3, #15
    ad56:	18fb      	adds	r3, r7, r3
    ad58:	781b      	ldrb	r3, [r3, #0]
    ad5a:	b25b      	sxtb	r3, r3
    ad5c:	4a66      	ldr	r2, [pc, #408]	; (aef8 <Socket_ReadSocketData+0x1e0>)
    ad5e:	011b      	lsls	r3, r3, #4
    ad60:	18d3      	adds	r3, r2, r3
    ad62:	3304      	adds	r3, #4
    ad64:	881b      	ldrh	r3, [r3, #0]
    ad66:	b29b      	uxth	r3, r3
    ad68:	2b00      	cmp	r3, #0
    ad6a:	d100      	bne.n	ad6e <Socket_ReadSocketData+0x56>
    ad6c:	e0bf      	b.n	aeee <Socket_ReadSocketData+0x1d6>
    ad6e:	230f      	movs	r3, #15
    ad70:	18fb      	adds	r3, r7, r3
    ad72:	781b      	ldrb	r3, [r3, #0]
    ad74:	b25b      	sxtb	r3, r3
    ad76:	4a60      	ldr	r2, [pc, #384]	; (aef8 <Socket_ReadSocketData+0x1e0>)
    ad78:	011b      	lsls	r3, r3, #4
    ad7a:	18d3      	adds	r3, r2, r3
    ad7c:	330a      	adds	r3, #10
    ad7e:	781b      	ldrb	r3, [r3, #0]
    ad80:	b2db      	uxtb	r3, r3
    ad82:	2b01      	cmp	r3, #1
    ad84:	d000      	beq.n	ad88 <Socket_ReadSocketData+0x70>
    ad86:	e0b2      	b.n	aeee <Socket_ReadSocketData+0x1d6>
	{
		uint32	u32Address = u32StartAddress;
    ad88:	687b      	ldr	r3, [r7, #4]
    ad8a:	61fb      	str	r3, [r7, #28]
		uint16	u16Read;
		sint16	s16Diff;
		uint8	u8SetRxDone;

		pstrRecv->u16RemainingSize = u16ReadCount;
    ad8c:	68bb      	ldr	r3, [r7, #8]
    ad8e:	2230      	movs	r2, #48	; 0x30
    ad90:	18ba      	adds	r2, r7, r2
    ad92:	8812      	ldrh	r2, [r2, #0]
    ad94:	80da      	strh	r2, [r3, #6]
		do
		{
			u8SetRxDone = 1;
    ad96:	2319      	movs	r3, #25
    ad98:	18fb      	adds	r3, r7, r3
    ad9a:	2201      	movs	r2, #1
    ad9c:	701a      	strb	r2, [r3, #0]
			u16Read = u16ReadCount;
    ad9e:	231a      	movs	r3, #26
    ada0:	18fb      	adds	r3, r7, r3
    ada2:	2230      	movs	r2, #48	; 0x30
    ada4:	18ba      	adds	r2, r7, r2
    ada6:	8812      	ldrh	r2, [r2, #0]
    ada8:	801a      	strh	r2, [r3, #0]
			s16Diff	= u16Read - gastrSockets[sock].u16UserBufferSize;
    adaa:	230f      	movs	r3, #15
    adac:	18fb      	adds	r3, r7, r3
    adae:	781b      	ldrb	r3, [r3, #0]
    adb0:	b25b      	sxtb	r3, r3
    adb2:	4a51      	ldr	r2, [pc, #324]	; (aef8 <Socket_ReadSocketData+0x1e0>)
    adb4:	011b      	lsls	r3, r3, #4
    adb6:	18d3      	adds	r3, r2, r3
    adb8:	3304      	adds	r3, #4
    adba:	881b      	ldrh	r3, [r3, #0]
    adbc:	b29b      	uxth	r3, r3
    adbe:	221a      	movs	r2, #26
    adc0:	18ba      	adds	r2, r7, r2
    adc2:	8812      	ldrh	r2, [r2, #0]
    adc4:	1ad3      	subs	r3, r2, r3
    adc6:	b29a      	uxth	r2, r3
    adc8:	2316      	movs	r3, #22
    adca:	18fb      	adds	r3, r7, r3
    adcc:	801a      	strh	r2, [r3, #0]
			if(s16Diff > 0)
    adce:	2316      	movs	r3, #22
    add0:	18fb      	adds	r3, r7, r3
    add2:	2200      	movs	r2, #0
    add4:	5e9b      	ldrsh	r3, [r3, r2]
    add6:	2b00      	cmp	r3, #0
    add8:	dd0f      	ble.n	adfa <Socket_ReadSocketData+0xe2>
			{
				u8SetRxDone = 0;
    adda:	2319      	movs	r3, #25
    addc:	18fb      	adds	r3, r7, r3
    adde:	2200      	movs	r2, #0
    ade0:	701a      	strb	r2, [r3, #0]
				u16Read		= gastrSockets[sock].u16UserBufferSize;
    ade2:	230f      	movs	r3, #15
    ade4:	18fb      	adds	r3, r7, r3
    ade6:	2200      	movs	r2, #0
    ade8:	569a      	ldrsb	r2, [r3, r2]
    adea:	231a      	movs	r3, #26
    adec:	18fb      	adds	r3, r7, r3
    adee:	4942      	ldr	r1, [pc, #264]	; (aef8 <Socket_ReadSocketData+0x1e0>)
    adf0:	0112      	lsls	r2, r2, #4
    adf2:	188a      	adds	r2, r1, r2
    adf4:	3204      	adds	r2, #4
    adf6:	8812      	ldrh	r2, [r2, #0]
    adf8:	801a      	strh	r2, [r3, #0]
			}
			
			if(hif_receive(u32Address, gastrSockets[sock].pu8UserBuffer, u16Read, u8SetRxDone) == M2M_SUCCESS)
    adfa:	230f      	movs	r3, #15
    adfc:	18fb      	adds	r3, r7, r3
    adfe:	2200      	movs	r2, #0
    ae00:	569a      	ldrsb	r2, [r3, r2]
    ae02:	4b3d      	ldr	r3, [pc, #244]	; (aef8 <Socket_ReadSocketData+0x1e0>)
    ae04:	0112      	lsls	r2, r2, #4
    ae06:	58d1      	ldr	r1, [r2, r3]
    ae08:	2319      	movs	r3, #25
    ae0a:	18fb      	adds	r3, r7, r3
    ae0c:	781c      	ldrb	r4, [r3, #0]
    ae0e:	231a      	movs	r3, #26
    ae10:	18fb      	adds	r3, r7, r3
    ae12:	881a      	ldrh	r2, [r3, #0]
    ae14:	69f8      	ldr	r0, [r7, #28]
    ae16:	0023      	movs	r3, r4
    ae18:	4c38      	ldr	r4, [pc, #224]	; (aefc <Socket_ReadSocketData+0x1e4>)
    ae1a:	47a0      	blx	r4
    ae1c:	1e03      	subs	r3, r0, #0
    ae1e:	d14f      	bne.n	aec0 <Socket_ReadSocketData+0x1a8>
			{
				pstrRecv->pu8Buffer			= gastrSockets[sock].pu8UserBuffer;
    ae20:	230f      	movs	r3, #15
    ae22:	18fb      	adds	r3, r7, r3
    ae24:	2200      	movs	r2, #0
    ae26:	569a      	ldrsb	r2, [r3, r2]
    ae28:	4b33      	ldr	r3, [pc, #204]	; (aef8 <Socket_ReadSocketData+0x1e0>)
    ae2a:	0112      	lsls	r2, r2, #4
    ae2c:	58d2      	ldr	r2, [r2, r3]
    ae2e:	68bb      	ldr	r3, [r7, #8]
    ae30:	601a      	str	r2, [r3, #0]
				pstrRecv->s16BufferSize		= u16Read;
    ae32:	231a      	movs	r3, #26
    ae34:	18fb      	adds	r3, r7, r3
    ae36:	2200      	movs	r2, #0
    ae38:	5e9a      	ldrsh	r2, [r3, r2]
    ae3a:	68bb      	ldr	r3, [r7, #8]
    ae3c:	809a      	strh	r2, [r3, #4]
				pstrRecv->u16RemainingSize	-= u16Read;
    ae3e:	68bb      	ldr	r3, [r7, #8]
    ae40:	88da      	ldrh	r2, [r3, #6]
    ae42:	231a      	movs	r3, #26
    ae44:	18fb      	adds	r3, r7, r3
    ae46:	881b      	ldrh	r3, [r3, #0]
    ae48:	1ad3      	subs	r3, r2, r3
    ae4a:	b29a      	uxth	r2, r3
    ae4c:	68bb      	ldr	r3, [r7, #8]
    ae4e:	80da      	strh	r2, [r3, #6]

				if (gpfAppSocketCb)
    ae50:	4b2b      	ldr	r3, [pc, #172]	; (af00 <Socket_ReadSocketData+0x1e8>)
    ae52:	681b      	ldr	r3, [r3, #0]
    ae54:	2b00      	cmp	r3, #0
    ae56:	d00b      	beq.n	ae70 <Socket_ReadSocketData+0x158>
					gpfAppSocketCb(sock,u8SocketMsg, pstrRecv);
    ae58:	4b29      	ldr	r3, [pc, #164]	; (af00 <Socket_ReadSocketData+0x1e8>)
    ae5a:	681b      	ldr	r3, [r3, #0]
    ae5c:	68bc      	ldr	r4, [r7, #8]
    ae5e:	220e      	movs	r2, #14
    ae60:	18ba      	adds	r2, r7, r2
    ae62:	7811      	ldrb	r1, [r2, #0]
    ae64:	220f      	movs	r2, #15
    ae66:	18ba      	adds	r2, r7, r2
    ae68:	2000      	movs	r0, #0
    ae6a:	5610      	ldrsb	r0, [r2, r0]
    ae6c:	0022      	movs	r2, r4
    ae6e:	4798      	blx	r3

				u16ReadCount -= u16Read;
    ae70:	2330      	movs	r3, #48	; 0x30
    ae72:	18f9      	adds	r1, r7, r3
    ae74:	2330      	movs	r3, #48	; 0x30
    ae76:	18fa      	adds	r2, r7, r3
    ae78:	231a      	movs	r3, #26
    ae7a:	18fb      	adds	r3, r7, r3
    ae7c:	8812      	ldrh	r2, [r2, #0]
    ae7e:	881b      	ldrh	r3, [r3, #0]
    ae80:	1ad3      	subs	r3, r2, r3
    ae82:	800b      	strh	r3, [r1, #0]
				u32Address += u16Read;
    ae84:	231a      	movs	r3, #26
    ae86:	18fb      	adds	r3, r7, r3
    ae88:	881b      	ldrh	r3, [r3, #0]
    ae8a:	69fa      	ldr	r2, [r7, #28]
    ae8c:	18d3      	adds	r3, r2, r3
    ae8e:	61fb      	str	r3, [r7, #28]

				if((!gastrSockets[sock].bIsUsed) && (u16ReadCount))
    ae90:	230f      	movs	r3, #15
    ae92:	18fb      	adds	r3, r7, r3
    ae94:	781b      	ldrb	r3, [r3, #0]
    ae96:	b25b      	sxtb	r3, r3
    ae98:	4a17      	ldr	r2, [pc, #92]	; (aef8 <Socket_ReadSocketData+0x1e0>)
    ae9a:	011b      	lsls	r3, r3, #4
    ae9c:	18d3      	adds	r3, r2, r3
    ae9e:	330a      	adds	r3, #10
    aea0:	781b      	ldrb	r3, [r3, #0]
    aea2:	b2db      	uxtb	r3, r3
    aea4:	2b00      	cmp	r3, #0
    aea6:	d11b      	bne.n	aee0 <Socket_ReadSocketData+0x1c8>
    aea8:	2330      	movs	r3, #48	; 0x30
    aeaa:	18fb      	adds	r3, r7, r3
    aeac:	881b      	ldrh	r3, [r3, #0]
    aeae:	2b00      	cmp	r3, #0
    aeb0:	d016      	beq.n	aee0 <Socket_ReadSocketData+0x1c8>
				{
					M2M_DBG("Application Closed Socket While Rx Is not Complete\n");
					if(hif_receive(0, NULL, 0, 1) == M2M_SUCCESS)
    aeb2:	2301      	movs	r3, #1
    aeb4:	2200      	movs	r2, #0
    aeb6:	2100      	movs	r1, #0
    aeb8:	2000      	movs	r0, #0
    aeba:	4c10      	ldr	r4, [pc, #64]	; (aefc <Socket_ReadSocketData+0x1e4>)
    aebc:	47a0      	blx	r4
						M2M_DBG("hif_receive Success\n");
					else
						M2M_DBG("hif_receive Fail\n");
					break;
    aebe:	e016      	b.n	aeee <Socket_ReadSocketData+0x1d6>
				}
			}
			else
			{
				M2M_INFO("(ERRR)Current <%d>\n", u16ReadCount);
    aec0:	4b10      	ldr	r3, [pc, #64]	; (af04 <Socket_ReadSocketData+0x1ec>)
    aec2:	0018      	movs	r0, r3
    aec4:	4b10      	ldr	r3, [pc, #64]	; (af08 <Socket_ReadSocketData+0x1f0>)
    aec6:	4798      	blx	r3
    aec8:	2330      	movs	r3, #48	; 0x30
    aeca:	18fb      	adds	r3, r7, r3
    aecc:	881a      	ldrh	r2, [r3, #0]
    aece:	4b0f      	ldr	r3, [pc, #60]	; (af0c <Socket_ReadSocketData+0x1f4>)
    aed0:	0011      	movs	r1, r2
    aed2:	0018      	movs	r0, r3
    aed4:	4b0c      	ldr	r3, [pc, #48]	; (af08 <Socket_ReadSocketData+0x1f0>)
    aed6:	4798      	blx	r3
    aed8:	200d      	movs	r0, #13
    aeda:	4b0d      	ldr	r3, [pc, #52]	; (af10 <Socket_ReadSocketData+0x1f8>)
    aedc:	4798      	blx	r3
				break;
    aede:	e006      	b.n	aeee <Socket_ReadSocketData+0x1d6>
			}
		}while(u16ReadCount != 0);
    aee0:	2330      	movs	r3, #48	; 0x30
    aee2:	18fb      	adds	r3, r7, r3
    aee4:	881b      	ldrh	r3, [r3, #0]
    aee6:	2b00      	cmp	r3, #0
    aee8:	d000      	beq.n	aeec <Socket_ReadSocketData+0x1d4>
    aeea:	e754      	b.n	ad96 <Socket_ReadSocketData+0x7e>
	}
}
    aeec:	e7ff      	b.n	aeee <Socket_ReadSocketData+0x1d6>
    aeee:	46c0      	nop			; (mov r8, r8)
    aef0:	46bd      	mov	sp, r7
    aef2:	b009      	add	sp, #36	; 0x24
    aef4:	bd90      	pop	{r4, r7, pc}
    aef6:	46c0      	nop			; (mov r8, r8)
    aef8:	20002a5c 	.word	0x20002a5c
    aefc:	000078b5 	.word	0x000078b5
    af00:	20002b0c 	.word	0x20002b0c
    af04:	00020940 	.word	0x00020940
    af08:	0001c2d5 	.word	0x0001c2d5
    af0c:	0002094c 	.word	0x0002094c
    af10:	0001c309 	.word	0x0001c309

0000af14 <m2m_ip_cb>:

Date
		17 July 2012
*********************************************************************/
static void m2m_ip_cb(uint8 u8OpCode, uint16 u16BufferSize,uint32 u32Address)
{	
    af14:	b590      	push	{r4, r7, lr}
    af16:	b0bb      	sub	sp, #236	; 0xec
    af18:	af02      	add	r7, sp, #8
    af1a:	603a      	str	r2, [r7, #0]
    af1c:	1dfb      	adds	r3, r7, #7
    af1e:	1c02      	adds	r2, r0, #0
    af20:	701a      	strb	r2, [r3, #0]
    af22:	1d3b      	adds	r3, r7, #4
    af24:	1c0a      	adds	r2, r1, #0
    af26:	801a      	strh	r2, [r3, #0]
	if((u8OpCode == SOCKET_CMD_BIND) || (u8OpCode == SOCKET_CMD_SSL_BIND))
    af28:	1dfb      	adds	r3, r7, #7
    af2a:	781b      	ldrb	r3, [r3, #0]
    af2c:	2b41      	cmp	r3, #65	; 0x41
    af2e:	d003      	beq.n	af38 <m2m_ip_cb+0x24>
    af30:	1dfb      	adds	r3, r7, #7
    af32:	781b      	ldrb	r3, [r3, #0]
    af34:	2b54      	cmp	r3, #84	; 0x54
    af36:	d120      	bne.n	af7a <m2m_ip_cb+0x66>
	{
		tstrBindReply		strBindReply;
		tstrSocketBindMsg	strBind;

		if(hif_receive(u32Address, (uint8*)&strBindReply, sizeof(tstrBindReply), 0) == M2M_SUCCESS)
    af38:	23cc      	movs	r3, #204	; 0xcc
    af3a:	18f9      	adds	r1, r7, r3
    af3c:	6838      	ldr	r0, [r7, #0]
    af3e:	2300      	movs	r3, #0
    af40:	2204      	movs	r2, #4
    af42:	4c98      	ldr	r4, [pc, #608]	; (b1a4 <m2m_ip_cb+0x290>)
    af44:	47a0      	blx	r4
    af46:	1e03      	subs	r3, r0, #0
    af48:	d000      	beq.n	af4c <m2m_ip_cb+0x38>
    af4a:	e275      	b.n	b438 <m2m_ip_cb+0x524>
		{
			strBind.status = strBindReply.s8Status;
    af4c:	23cc      	movs	r3, #204	; 0xcc
    af4e:	18fb      	adds	r3, r7, r3
    af50:	2201      	movs	r2, #1
    af52:	569a      	ldrsb	r2, [r3, r2]
    af54:	23c8      	movs	r3, #200	; 0xc8
    af56:	18fb      	adds	r3, r7, r3
    af58:	701a      	strb	r2, [r3, #0]
			if(gpfAppSocketCb)
    af5a:	4b93      	ldr	r3, [pc, #588]	; (b1a8 <m2m_ip_cb+0x294>)
    af5c:	681b      	ldr	r3, [r3, #0]
    af5e:	2b00      	cmp	r3, #0
    af60:	d100      	bne.n	af64 <m2m_ip_cb+0x50>
    af62:	e269      	b.n	b438 <m2m_ip_cb+0x524>
				gpfAppSocketCb(strBindReply.sock,SOCKET_MSG_BIND,&strBind);
    af64:	4b90      	ldr	r3, [pc, #576]	; (b1a8 <m2m_ip_cb+0x294>)
    af66:	681b      	ldr	r3, [r3, #0]
    af68:	22cc      	movs	r2, #204	; 0xcc
    af6a:	18ba      	adds	r2, r7, r2
    af6c:	2000      	movs	r0, #0
    af6e:	5610      	ldrsb	r0, [r2, r0]
    af70:	22c8      	movs	r2, #200	; 0xc8
    af72:	18ba      	adds	r2, r7, r2
    af74:	2101      	movs	r1, #1
    af76:	4798      	blx	r3
	{
    af78:	e25e      	b.n	b438 <m2m_ip_cb+0x524>
		}
	}
	else if(u8OpCode == SOCKET_CMD_LISTEN)
    af7a:	1dfb      	adds	r3, r7, #7
    af7c:	781b      	ldrb	r3, [r3, #0]
    af7e:	2b42      	cmp	r3, #66	; 0x42
    af80:	d120      	bne.n	afc4 <m2m_ip_cb+0xb0>
	{
		tstrListenReply			strListenReply;
		tstrSocketListenMsg		strListen;
		if(hif_receive(u32Address, (uint8*)&strListenReply, sizeof(tstrListenReply), 0) == M2M_SUCCESS)
    af82:	23c4      	movs	r3, #196	; 0xc4
    af84:	18f9      	adds	r1, r7, r3
    af86:	6838      	ldr	r0, [r7, #0]
    af88:	2300      	movs	r3, #0
    af8a:	2204      	movs	r2, #4
    af8c:	4c85      	ldr	r4, [pc, #532]	; (b1a4 <m2m_ip_cb+0x290>)
    af8e:	47a0      	blx	r4
    af90:	1e03      	subs	r3, r0, #0
    af92:	d000      	beq.n	af96 <m2m_ip_cb+0x82>
    af94:	e257      	b.n	b446 <m2m_ip_cb+0x532>
		{
			strListen.status = strListenReply.s8Status;
    af96:	23c4      	movs	r3, #196	; 0xc4
    af98:	18fb      	adds	r3, r7, r3
    af9a:	2201      	movs	r2, #1
    af9c:	569a      	ldrsb	r2, [r3, r2]
    af9e:	23c0      	movs	r3, #192	; 0xc0
    afa0:	18fb      	adds	r3, r7, r3
    afa2:	701a      	strb	r2, [r3, #0]
			if(gpfAppSocketCb)
    afa4:	4b80      	ldr	r3, [pc, #512]	; (b1a8 <m2m_ip_cb+0x294>)
    afa6:	681b      	ldr	r3, [r3, #0]
    afa8:	2b00      	cmp	r3, #0
    afaa:	d100      	bne.n	afae <m2m_ip_cb+0x9a>
    afac:	e24b      	b.n	b446 <m2m_ip_cb+0x532>
				gpfAppSocketCb(strListenReply.sock,SOCKET_MSG_LISTEN, &strListen);
    afae:	4b7e      	ldr	r3, [pc, #504]	; (b1a8 <m2m_ip_cb+0x294>)
    afb0:	681b      	ldr	r3, [r3, #0]
    afb2:	22c4      	movs	r2, #196	; 0xc4
    afb4:	18ba      	adds	r2, r7, r2
    afb6:	2000      	movs	r0, #0
    afb8:	5610      	ldrsb	r0, [r2, r0]
    afba:	22c0      	movs	r2, #192	; 0xc0
    afbc:	18ba      	adds	r2, r7, r2
    afbe:	2102      	movs	r1, #2
    afc0:	4798      	blx	r3
			{
				gfpPingCb(strPingReply.u32IPAddr, strPingReply.u32RTT, strPingReply.u8ErrorCode);
			}
		}
	}
}
    afc2:	e240      	b.n	b446 <m2m_ip_cb+0x532>
	else if(u8OpCode == SOCKET_CMD_ACCEPT)
    afc4:	1dfb      	adds	r3, r7, #7
    afc6:	781b      	ldrb	r3, [r3, #0]
    afc8:	2b43      	cmp	r3, #67	; 0x43
    afca:	d000      	beq.n	afce <m2m_ip_cb+0xba>
    afcc:	e086      	b.n	b0dc <m2m_ip_cb+0x1c8>
		if(hif_receive(u32Address, (uint8*)&strAcceptReply, sizeof(tstrAcceptReply), 0) == M2M_SUCCESS)
    afce:	23b4      	movs	r3, #180	; 0xb4
    afd0:	18f9      	adds	r1, r7, r3
    afd2:	6838      	ldr	r0, [r7, #0]
    afd4:	2300      	movs	r3, #0
    afd6:	220c      	movs	r2, #12
    afd8:	4c72      	ldr	r4, [pc, #456]	; (b1a4 <m2m_ip_cb+0x290>)
    afda:	47a0      	blx	r4
    afdc:	1e03      	subs	r3, r0, #0
    afde:	d000      	beq.n	afe2 <m2m_ip_cb+0xce>
    afe0:	e231      	b.n	b446 <m2m_ip_cb+0x532>
			if(strAcceptReply.sConnectedSock >= 0)
    afe2:	23b4      	movs	r3, #180	; 0xb4
    afe4:	18fb      	adds	r3, r7, r3
    afe6:	7a5b      	ldrb	r3, [r3, #9]
    afe8:	b25b      	sxtb	r3, r3
    afea:	2b00      	cmp	r3, #0
    afec:	db4f      	blt.n	b08e <m2m_ip_cb+0x17a>
				gastrSockets[strAcceptReply.sConnectedSock].u8SSLFlags 		= gastrSockets[strAcceptReply.sListenSock].u8SSLFlags;
    afee:	23b4      	movs	r3, #180	; 0xb4
    aff0:	18fb      	adds	r3, r7, r3
    aff2:	7a5b      	ldrb	r3, [r3, #9]
    aff4:	b25b      	sxtb	r3, r3
    aff6:	0018      	movs	r0, r3
    aff8:	23b4      	movs	r3, #180	; 0xb4
    affa:	18fb      	adds	r3, r7, r3
    affc:	7a1b      	ldrb	r3, [r3, #8]
    affe:	b25b      	sxtb	r3, r3
    b000:	4a6a      	ldr	r2, [pc, #424]	; (b1ac <m2m_ip_cb+0x298>)
    b002:	011b      	lsls	r3, r3, #4
    b004:	18d3      	adds	r3, r2, r3
    b006:	330b      	adds	r3, #11
    b008:	781b      	ldrb	r3, [r3, #0]
    b00a:	b2d9      	uxtb	r1, r3
    b00c:	4a67      	ldr	r2, [pc, #412]	; (b1ac <m2m_ip_cb+0x298>)
    b00e:	0103      	lsls	r3, r0, #4
    b010:	18d3      	adds	r3, r2, r3
    b012:	330b      	adds	r3, #11
    b014:	1c0a      	adds	r2, r1, #0
    b016:	701a      	strb	r2, [r3, #0]
				gastrSockets[strAcceptReply.sConnectedSock].bIsUsed 		= 1;
    b018:	23b4      	movs	r3, #180	; 0xb4
    b01a:	18fb      	adds	r3, r7, r3
    b01c:	7a5b      	ldrb	r3, [r3, #9]
    b01e:	b25b      	sxtb	r3, r3
    b020:	4a62      	ldr	r2, [pc, #392]	; (b1ac <m2m_ip_cb+0x298>)
    b022:	011b      	lsls	r3, r3, #4
    b024:	18d3      	adds	r3, r2, r3
    b026:	330a      	adds	r3, #10
    b028:	2201      	movs	r2, #1
    b02a:	701a      	strb	r2, [r3, #0]
				gastrSockets[strAcceptReply.sConnectedSock].u16DataOffset 	= strAcceptReply.u16AppDataOffset - M2M_HIF_HDR_OFFSET;
    b02c:	23b4      	movs	r3, #180	; 0xb4
    b02e:	18fb      	adds	r3, r7, r3
    b030:	7a5b      	ldrb	r3, [r3, #9]
    b032:	b25b      	sxtb	r3, r3
    b034:	0018      	movs	r0, r3
    b036:	23b4      	movs	r3, #180	; 0xb4
    b038:	18fb      	adds	r3, r7, r3
    b03a:	895b      	ldrh	r3, [r3, #10]
    b03c:	3b08      	subs	r3, #8
    b03e:	b299      	uxth	r1, r3
    b040:	4a5a      	ldr	r2, [pc, #360]	; (b1ac <m2m_ip_cb+0x298>)
    b042:	0103      	lsls	r3, r0, #4
    b044:	18d3      	adds	r3, r2, r3
    b046:	3308      	adds	r3, #8
    b048:	1c0a      	adds	r2, r1, #0
    b04a:	801a      	strh	r2, [r3, #0]
				++gu16SessionID;
    b04c:	4b58      	ldr	r3, [pc, #352]	; (b1b0 <m2m_ip_cb+0x29c>)
    b04e:	881b      	ldrh	r3, [r3, #0]
    b050:	b29b      	uxth	r3, r3
    b052:	3301      	adds	r3, #1
    b054:	b29a      	uxth	r2, r3
    b056:	4b56      	ldr	r3, [pc, #344]	; (b1b0 <m2m_ip_cb+0x29c>)
    b058:	801a      	strh	r2, [r3, #0]
				if(gu16SessionID == 0)
    b05a:	4b55      	ldr	r3, [pc, #340]	; (b1b0 <m2m_ip_cb+0x29c>)
    b05c:	881b      	ldrh	r3, [r3, #0]
    b05e:	b29b      	uxth	r3, r3
    b060:	2b00      	cmp	r3, #0
    b062:	d106      	bne.n	b072 <m2m_ip_cb+0x15e>
					++gu16SessionID;
    b064:	4b52      	ldr	r3, [pc, #328]	; (b1b0 <m2m_ip_cb+0x29c>)
    b066:	881b      	ldrh	r3, [r3, #0]
    b068:	b29b      	uxth	r3, r3
    b06a:	3301      	adds	r3, #1
    b06c:	b29a      	uxth	r2, r3
    b06e:	4b50      	ldr	r3, [pc, #320]	; (b1b0 <m2m_ip_cb+0x29c>)
    b070:	801a      	strh	r2, [r3, #0]
				gastrSockets[strAcceptReply.sConnectedSock].u16SessionID = gu16SessionID;
    b072:	23b4      	movs	r3, #180	; 0xb4
    b074:	18fb      	adds	r3, r7, r3
    b076:	7a5b      	ldrb	r3, [r3, #9]
    b078:	b25b      	sxtb	r3, r3
    b07a:	0018      	movs	r0, r3
    b07c:	4b4c      	ldr	r3, [pc, #304]	; (b1b0 <m2m_ip_cb+0x29c>)
    b07e:	881b      	ldrh	r3, [r3, #0]
    b080:	b299      	uxth	r1, r3
    b082:	4a4a      	ldr	r2, [pc, #296]	; (b1ac <m2m_ip_cb+0x298>)
    b084:	0103      	lsls	r3, r0, #4
    b086:	18d3      	adds	r3, r2, r3
    b088:	3306      	adds	r3, #6
    b08a:	1c0a      	adds	r2, r1, #0
    b08c:	801a      	strh	r2, [r3, #0]
			strAccept.sock = strAcceptReply.sConnectedSock;
    b08e:	23b4      	movs	r3, #180	; 0xb4
    b090:	18fb      	adds	r3, r7, r3
    b092:	2209      	movs	r2, #9
    b094:	569a      	ldrsb	r2, [r3, r2]
    b096:	23a0      	movs	r3, #160	; 0xa0
    b098:	18fb      	adds	r3, r7, r3
    b09a:	701a      	strb	r2, [r3, #0]
			strAccept.strAddr.sin_family		= AF_INET;
    b09c:	23a0      	movs	r3, #160	; 0xa0
    b09e:	18fb      	adds	r3, r7, r3
    b0a0:	2202      	movs	r2, #2
    b0a2:	809a      	strh	r2, [r3, #4]
			strAccept.strAddr.sin_port = strAcceptReply.strAddr.u16Port;
    b0a4:	23b4      	movs	r3, #180	; 0xb4
    b0a6:	18fb      	adds	r3, r7, r3
    b0a8:	885a      	ldrh	r2, [r3, #2]
    b0aa:	23a0      	movs	r3, #160	; 0xa0
    b0ac:	18fb      	adds	r3, r7, r3
    b0ae:	80da      	strh	r2, [r3, #6]
			strAccept.strAddr.sin_addr.s_addr = strAcceptReply.strAddr.u32IPAddr;
    b0b0:	23b4      	movs	r3, #180	; 0xb4
    b0b2:	18fb      	adds	r3, r7, r3
    b0b4:	685a      	ldr	r2, [r3, #4]
    b0b6:	23a0      	movs	r3, #160	; 0xa0
    b0b8:	18fb      	adds	r3, r7, r3
    b0ba:	609a      	str	r2, [r3, #8]
			if(gpfAppSocketCb)
    b0bc:	4b3a      	ldr	r3, [pc, #232]	; (b1a8 <m2m_ip_cb+0x294>)
    b0be:	681b      	ldr	r3, [r3, #0]
    b0c0:	2b00      	cmp	r3, #0
    b0c2:	d100      	bne.n	b0c6 <m2m_ip_cb+0x1b2>
    b0c4:	e1bf      	b.n	b446 <m2m_ip_cb+0x532>
				gpfAppSocketCb(strAcceptReply.sListenSock, SOCKET_MSG_ACCEPT, &strAccept);
    b0c6:	4b38      	ldr	r3, [pc, #224]	; (b1a8 <m2m_ip_cb+0x294>)
    b0c8:	681b      	ldr	r3, [r3, #0]
    b0ca:	22b4      	movs	r2, #180	; 0xb4
    b0cc:	18ba      	adds	r2, r7, r2
    b0ce:	2008      	movs	r0, #8
    b0d0:	5610      	ldrsb	r0, [r2, r0]
    b0d2:	22a0      	movs	r2, #160	; 0xa0
    b0d4:	18ba      	adds	r2, r7, r2
    b0d6:	2104      	movs	r1, #4
    b0d8:	4798      	blx	r3
}
    b0da:	e1b4      	b.n	b446 <m2m_ip_cb+0x532>
	else if((u8OpCode == SOCKET_CMD_CONNECT) || (u8OpCode == SOCKET_CMD_SSL_CONNECT))
    b0dc:	1dfb      	adds	r3, r7, #7
    b0de:	781b      	ldrb	r3, [r3, #0]
    b0e0:	2b44      	cmp	r3, #68	; 0x44
    b0e2:	d003      	beq.n	b0ec <m2m_ip_cb+0x1d8>
    b0e4:	1dfb      	adds	r3, r7, #7
    b0e6:	781b      	ldrb	r3, [r3, #0]
    b0e8:	2b4b      	cmp	r3, #75	; 0x4b
    b0ea:	d13d      	bne.n	b168 <m2m_ip_cb+0x254>
		if(hif_receive(u32Address, (uint8*)&strConnectReply, sizeof(tstrConnectReply), 0) == M2M_SUCCESS)
    b0ec:	239c      	movs	r3, #156	; 0x9c
    b0ee:	18f9      	adds	r1, r7, r3
    b0f0:	6838      	ldr	r0, [r7, #0]
    b0f2:	2300      	movs	r3, #0
    b0f4:	2204      	movs	r2, #4
    b0f6:	4c2b      	ldr	r4, [pc, #172]	; (b1a4 <m2m_ip_cb+0x290>)
    b0f8:	47a0      	blx	r4
    b0fa:	1e03      	subs	r3, r0, #0
    b0fc:	d000      	beq.n	b100 <m2m_ip_cb+0x1ec>
    b0fe:	e19d      	b.n	b43c <m2m_ip_cb+0x528>
			strConnMsg.sock		= strConnectReply.sock;
    b100:	239c      	movs	r3, #156	; 0x9c
    b102:	18fb      	adds	r3, r7, r3
    b104:	2200      	movs	r2, #0
    b106:	569a      	ldrsb	r2, [r3, r2]
    b108:	2398      	movs	r3, #152	; 0x98
    b10a:	18fb      	adds	r3, r7, r3
    b10c:	701a      	strb	r2, [r3, #0]
			strConnMsg.s8Error	= strConnectReply.s8Error;
    b10e:	239c      	movs	r3, #156	; 0x9c
    b110:	18fb      	adds	r3, r7, r3
    b112:	2201      	movs	r2, #1
    b114:	569a      	ldrsb	r2, [r3, r2]
    b116:	2398      	movs	r3, #152	; 0x98
    b118:	18fb      	adds	r3, r7, r3
    b11a:	705a      	strb	r2, [r3, #1]
			if(strConnectReply.s8Error == SOCK_ERR_NO_ERROR)
    b11c:	239c      	movs	r3, #156	; 0x9c
    b11e:	18fb      	adds	r3, r7, r3
    b120:	785b      	ldrb	r3, [r3, #1]
    b122:	b25b      	sxtb	r3, r3
    b124:	2b00      	cmp	r3, #0
    b126:	d10f      	bne.n	b148 <m2m_ip_cb+0x234>
				gastrSockets[strConnectReply.sock].u16DataOffset = strConnectReply.u16AppDataOffset - M2M_HIF_HDR_OFFSET;
    b128:	239c      	movs	r3, #156	; 0x9c
    b12a:	18fb      	adds	r3, r7, r3
    b12c:	781b      	ldrb	r3, [r3, #0]
    b12e:	b25b      	sxtb	r3, r3
    b130:	0018      	movs	r0, r3
    b132:	239c      	movs	r3, #156	; 0x9c
    b134:	18fb      	adds	r3, r7, r3
    b136:	885b      	ldrh	r3, [r3, #2]
    b138:	3b08      	subs	r3, #8
    b13a:	b299      	uxth	r1, r3
    b13c:	4a1b      	ldr	r2, [pc, #108]	; (b1ac <m2m_ip_cb+0x298>)
    b13e:	0103      	lsls	r3, r0, #4
    b140:	18d3      	adds	r3, r2, r3
    b142:	3308      	adds	r3, #8
    b144:	1c0a      	adds	r2, r1, #0
    b146:	801a      	strh	r2, [r3, #0]
			if(gpfAppSocketCb)
    b148:	4b17      	ldr	r3, [pc, #92]	; (b1a8 <m2m_ip_cb+0x294>)
    b14a:	681b      	ldr	r3, [r3, #0]
    b14c:	2b00      	cmp	r3, #0
    b14e:	d100      	bne.n	b152 <m2m_ip_cb+0x23e>
    b150:	e174      	b.n	b43c <m2m_ip_cb+0x528>
				gpfAppSocketCb(strConnectReply.sock,SOCKET_MSG_CONNECT, &strConnMsg);
    b152:	4b15      	ldr	r3, [pc, #84]	; (b1a8 <m2m_ip_cb+0x294>)
    b154:	681b      	ldr	r3, [r3, #0]
    b156:	229c      	movs	r2, #156	; 0x9c
    b158:	18ba      	adds	r2, r7, r2
    b15a:	2000      	movs	r0, #0
    b15c:	5610      	ldrsb	r0, [r2, r0]
    b15e:	2298      	movs	r2, #152	; 0x98
    b160:	18ba      	adds	r2, r7, r2
    b162:	2105      	movs	r1, #5
    b164:	4798      	blx	r3
	{
    b166:	e169      	b.n	b43c <m2m_ip_cb+0x528>
	else if(u8OpCode == SOCKET_CMD_DNS_RESOLVE)
    b168:	1dfb      	adds	r3, r7, #7
    b16a:	781b      	ldrb	r3, [r3, #0]
    b16c:	2b4a      	cmp	r3, #74	; 0x4a
    b16e:	d123      	bne.n	b1b8 <m2m_ip_cb+0x2a4>
		if(hif_receive(u32Address, (uint8*)&strDnsReply, sizeof(tstrDnsReply), 0) == M2M_SUCCESS)
    b170:	230c      	movs	r3, #12
    b172:	18f9      	adds	r1, r7, r3
    b174:	6838      	ldr	r0, [r7, #0]
    b176:	2300      	movs	r3, #0
    b178:	2244      	movs	r2, #68	; 0x44
    b17a:	4c0a      	ldr	r4, [pc, #40]	; (b1a4 <m2m_ip_cb+0x290>)
    b17c:	47a0      	blx	r4
    b17e:	1e03      	subs	r3, r0, #0
    b180:	d000      	beq.n	b184 <m2m_ip_cb+0x270>
    b182:	e160      	b.n	b446 <m2m_ip_cb+0x532>
			if(gpfAppResolveCb)
    b184:	4b0b      	ldr	r3, [pc, #44]	; (b1b4 <m2m_ip_cb+0x2a0>)
    b186:	681b      	ldr	r3, [r3, #0]
    b188:	2b00      	cmp	r3, #0
    b18a:	d100      	bne.n	b18e <m2m_ip_cb+0x27a>
    b18c:	e15b      	b.n	b446 <m2m_ip_cb+0x532>
				gpfAppResolveCb((uint8*)strDnsReply.acHostName, strDnsReply.u32HostIP);
    b18e:	4b09      	ldr	r3, [pc, #36]	; (b1b4 <m2m_ip_cb+0x2a0>)
    b190:	681a      	ldr	r2, [r3, #0]
    b192:	230c      	movs	r3, #12
    b194:	18fb      	adds	r3, r7, r3
    b196:	6c19      	ldr	r1, [r3, #64]	; 0x40
    b198:	230c      	movs	r3, #12
    b19a:	18fb      	adds	r3, r7, r3
    b19c:	0018      	movs	r0, r3
    b19e:	4790      	blx	r2
}
    b1a0:	e151      	b.n	b446 <m2m_ip_cb+0x532>
    b1a2:	46c0      	nop			; (mov r8, r8)
    b1a4:	000078b5 	.word	0x000078b5
    b1a8:	20002b0c 	.word	0x20002b0c
    b1ac:	20002a5c 	.word	0x20002a5c
    b1b0:	20000556 	.word	0x20000556
    b1b4:	20002b14 	.word	0x20002b14
	else if((u8OpCode == SOCKET_CMD_RECV) || (u8OpCode == SOCKET_CMD_RECVFROM) || (u8OpCode == SOCKET_CMD_SSL_RECV))
    b1b8:	1dfb      	adds	r3, r7, #7
    b1ba:	781b      	ldrb	r3, [r3, #0]
    b1bc:	2b46      	cmp	r3, #70	; 0x46
    b1be:	d008      	beq.n	b1d2 <m2m_ip_cb+0x2be>
    b1c0:	1dfb      	adds	r3, r7, #7
    b1c2:	781b      	ldrb	r3, [r3, #0]
    b1c4:	2b48      	cmp	r3, #72	; 0x48
    b1c6:	d004      	beq.n	b1d2 <m2m_ip_cb+0x2be>
    b1c8:	1dfb      	adds	r3, r7, #7
    b1ca:	781b      	ldrb	r3, [r3, #0]
    b1cc:	2b4d      	cmp	r3, #77	; 0x4d
    b1ce:	d000      	beq.n	b1d2 <m2m_ip_cb+0x2be>
    b1d0:	e0b4      	b.n	b33c <m2m_ip_cb+0x428>
		uint8				u8CallbackMsgID = SOCKET_MSG_RECV;
    b1d2:	23df      	movs	r3, #223	; 0xdf
    b1d4:	18fb      	adds	r3, r7, r3
    b1d6:	2206      	movs	r2, #6
    b1d8:	701a      	strb	r2, [r3, #0]
		if(u8OpCode == SOCKET_CMD_RECVFROM)
    b1da:	1dfb      	adds	r3, r7, #7
    b1dc:	781b      	ldrb	r3, [r3, #0]
    b1de:	2b48      	cmp	r3, #72	; 0x48
    b1e0:	d103      	bne.n	b1ea <m2m_ip_cb+0x2d6>
			u8CallbackMsgID = SOCKET_MSG_RECVFROM;
    b1e2:	23df      	movs	r3, #223	; 0xdf
    b1e4:	18fb      	adds	r3, r7, r3
    b1e6:	2209      	movs	r2, #9
    b1e8:	701a      	strb	r2, [r3, #0]
		u16ReadSize = sizeof(tstrRecvReply);
    b1ea:	23d8      	movs	r3, #216	; 0xd8
    b1ec:	18fb      	adds	r3, r7, r3
    b1ee:	2210      	movs	r2, #16
    b1f0:	801a      	strh	r2, [r3, #0]
		if(hif_receive(u32Address, (uint8*)&strRecvReply, u16ReadSize, 0) == M2M_SUCCESS)
    b1f2:	23d8      	movs	r3, #216	; 0xd8
    b1f4:	18fb      	adds	r3, r7, r3
    b1f6:	881a      	ldrh	r2, [r3, #0]
    b1f8:	2388      	movs	r3, #136	; 0x88
    b1fa:	18f9      	adds	r1, r7, r3
    b1fc:	6838      	ldr	r0, [r7, #0]
    b1fe:	2300      	movs	r3, #0
    b200:	4c93      	ldr	r4, [pc, #588]	; (b450 <m2m_ip_cb+0x53c>)
    b202:	47a0      	blx	r4
    b204:	1e03      	subs	r3, r0, #0
    b206:	d000      	beq.n	b20a <m2m_ip_cb+0x2f6>
    b208:	e11a      	b.n	b440 <m2m_ip_cb+0x52c>
			uint16 u16SessionID = 0;
    b20a:	23d6      	movs	r3, #214	; 0xd6
    b20c:	18fb      	adds	r3, r7, r3
    b20e:	2200      	movs	r2, #0
    b210:	801a      	strh	r2, [r3, #0]
			sock			= strRecvReply.sock;
    b212:	23d5      	movs	r3, #213	; 0xd5
    b214:	18fb      	adds	r3, r7, r3
    b216:	2288      	movs	r2, #136	; 0x88
    b218:	18ba      	adds	r2, r7, r2
    b21a:	7b12      	ldrb	r2, [r2, #12]
    b21c:	701a      	strb	r2, [r3, #0]
			u16SessionID = strRecvReply.u16SessionID;
    b21e:	23d6      	movs	r3, #214	; 0xd6
    b220:	18fb      	adds	r3, r7, r3
    b222:	2288      	movs	r2, #136	; 0x88
    b224:	18ba      	adds	r2, r7, r2
    b226:	89d2      	ldrh	r2, [r2, #14]
    b228:	801a      	strh	r2, [r3, #0]
			gastrSockets[sock].bIsRecvPending = 0;
    b22a:	23d5      	movs	r3, #213	; 0xd5
    b22c:	18fb      	adds	r3, r7, r3
    b22e:	781b      	ldrb	r3, [r3, #0]
    b230:	b25b      	sxtb	r3, r3
    b232:	4a88      	ldr	r2, [pc, #544]	; (b454 <m2m_ip_cb+0x540>)
    b234:	011b      	lsls	r3, r3, #4
    b236:	18d3      	adds	r3, r2, r3
    b238:	330c      	adds	r3, #12
    b23a:	2200      	movs	r2, #0
    b23c:	701a      	strb	r2, [r3, #0]
			s16RecvStatus	= NM_BSP_B_L_16(strRecvReply.s16RecvStatus);
    b23e:	23d2      	movs	r3, #210	; 0xd2
    b240:	18fb      	adds	r3, r7, r3
    b242:	2288      	movs	r2, #136	; 0x88
    b244:	18ba      	adds	r2, r7, r2
    b246:	8912      	ldrh	r2, [r2, #8]
    b248:	801a      	strh	r2, [r3, #0]
			u16DataOffset	= NM_BSP_B_L_16(strRecvReply.u16DataOffset);
    b24a:	23d0      	movs	r3, #208	; 0xd0
    b24c:	18fb      	adds	r3, r7, r3
    b24e:	2288      	movs	r2, #136	; 0x88
    b250:	18ba      	adds	r2, r7, r2
    b252:	8952      	ldrh	r2, [r2, #10]
    b254:	801a      	strh	r2, [r3, #0]
			strRecvMsg.strRemoteAddr.sin_port 			= strRecvReply.strRemoteAddr.u16Port;
    b256:	2388      	movs	r3, #136	; 0x88
    b258:	18fb      	adds	r3, r7, r3
    b25a:	885a      	ldrh	r2, [r3, #2]
    b25c:	2370      	movs	r3, #112	; 0x70
    b25e:	18fb      	adds	r3, r7, r3
    b260:	815a      	strh	r2, [r3, #10]
			strRecvMsg.strRemoteAddr.sin_addr.s_addr 	= strRecvReply.strRemoteAddr.u32IPAddr;
    b262:	2388      	movs	r3, #136	; 0x88
    b264:	18fb      	adds	r3, r7, r3
    b266:	685a      	ldr	r2, [r3, #4]
    b268:	2370      	movs	r3, #112	; 0x70
    b26a:	18fb      	adds	r3, r7, r3
    b26c:	60da      	str	r2, [r3, #12]
			if(u16SessionID == gastrSockets[sock].u16SessionID)
    b26e:	23d5      	movs	r3, #213	; 0xd5
    b270:	18fb      	adds	r3, r7, r3
    b272:	781b      	ldrb	r3, [r3, #0]
    b274:	b25b      	sxtb	r3, r3
    b276:	4a77      	ldr	r2, [pc, #476]	; (b454 <m2m_ip_cb+0x540>)
    b278:	011b      	lsls	r3, r3, #4
    b27a:	18d3      	adds	r3, r2, r3
    b27c:	3306      	adds	r3, #6
    b27e:	881b      	ldrh	r3, [r3, #0]
    b280:	b29b      	uxth	r3, r3
    b282:	22d6      	movs	r2, #214	; 0xd6
    b284:	18ba      	adds	r2, r7, r2
    b286:	8812      	ldrh	r2, [r2, #0]
    b288:	429a      	cmp	r2, r3
    b28a:	d148      	bne.n	b31e <m2m_ip_cb+0x40a>
				if((s16RecvStatus > 0) && (s16RecvStatus < u16BufferSize))
    b28c:	23d2      	movs	r3, #210	; 0xd2
    b28e:	18fb      	adds	r3, r7, r3
    b290:	2200      	movs	r2, #0
    b292:	5e9b      	ldrsh	r3, [r3, r2]
    b294:	2b00      	cmp	r3, #0
    b296:	dd25      	ble.n	b2e4 <m2m_ip_cb+0x3d0>
    b298:	23d2      	movs	r3, #210	; 0xd2
    b29a:	18fb      	adds	r3, r7, r3
    b29c:	2200      	movs	r2, #0
    b29e:	5e9a      	ldrsh	r2, [r3, r2]
    b2a0:	1d3b      	adds	r3, r7, #4
    b2a2:	881b      	ldrh	r3, [r3, #0]
    b2a4:	429a      	cmp	r2, r3
    b2a6:	da1d      	bge.n	b2e4 <m2m_ip_cb+0x3d0>
					u32Address += u16DataOffset;
    b2a8:	23d0      	movs	r3, #208	; 0xd0
    b2aa:	18fb      	adds	r3, r7, r3
    b2ac:	881b      	ldrh	r3, [r3, #0]
    b2ae:	683a      	ldr	r2, [r7, #0]
    b2b0:	18d3      	adds	r3, r2, r3
    b2b2:	603b      	str	r3, [r7, #0]
					u16ReadSize = (uint16)s16RecvStatus;
    b2b4:	23d8      	movs	r3, #216	; 0xd8
    b2b6:	18fb      	adds	r3, r7, r3
    b2b8:	22d2      	movs	r2, #210	; 0xd2
    b2ba:	18ba      	adds	r2, r7, r2
    b2bc:	8812      	ldrh	r2, [r2, #0]
    b2be:	801a      	strh	r2, [r3, #0]
					Socket_ReadSocketData(sock, &strRecvMsg, u8CallbackMsgID, u32Address, u16ReadSize);
    b2c0:	683c      	ldr	r4, [r7, #0]
    b2c2:	23df      	movs	r3, #223	; 0xdf
    b2c4:	18fb      	adds	r3, r7, r3
    b2c6:	781a      	ldrb	r2, [r3, #0]
    b2c8:	2370      	movs	r3, #112	; 0x70
    b2ca:	18f9      	adds	r1, r7, r3
    b2cc:	23d5      	movs	r3, #213	; 0xd5
    b2ce:	18fb      	adds	r3, r7, r3
    b2d0:	2000      	movs	r0, #0
    b2d2:	5618      	ldrsb	r0, [r3, r0]
    b2d4:	23d8      	movs	r3, #216	; 0xd8
    b2d6:	18fb      	adds	r3, r7, r3
    b2d8:	881b      	ldrh	r3, [r3, #0]
    b2da:	9300      	str	r3, [sp, #0]
    b2dc:	0023      	movs	r3, r4
    b2de:	4c5e      	ldr	r4, [pc, #376]	; (b458 <m2m_ip_cb+0x544>)
    b2e0:	47a0      	blx	r4
	{
    b2e2:	e0ad      	b.n	b440 <m2m_ip_cb+0x52c>
					strRecvMsg.s16BufferSize	= s16RecvStatus;
    b2e4:	2370      	movs	r3, #112	; 0x70
    b2e6:	18fb      	adds	r3, r7, r3
    b2e8:	22d2      	movs	r2, #210	; 0xd2
    b2ea:	18ba      	adds	r2, r7, r2
    b2ec:	8812      	ldrh	r2, [r2, #0]
    b2ee:	809a      	strh	r2, [r3, #4]
					strRecvMsg.pu8Buffer		= NULL;
    b2f0:	2370      	movs	r3, #112	; 0x70
    b2f2:	18fb      	adds	r3, r7, r3
    b2f4:	2200      	movs	r2, #0
    b2f6:	601a      	str	r2, [r3, #0]
					if(gpfAppSocketCb)
    b2f8:	4b58      	ldr	r3, [pc, #352]	; (b45c <m2m_ip_cb+0x548>)
    b2fa:	681b      	ldr	r3, [r3, #0]
    b2fc:	2b00      	cmp	r3, #0
    b2fe:	d100      	bne.n	b302 <m2m_ip_cb+0x3ee>
    b300:	e09e      	b.n	b440 <m2m_ip_cb+0x52c>
						gpfAppSocketCb(sock,u8CallbackMsgID, &strRecvMsg);
    b302:	4b56      	ldr	r3, [pc, #344]	; (b45c <m2m_ip_cb+0x548>)
    b304:	681b      	ldr	r3, [r3, #0]
    b306:	2270      	movs	r2, #112	; 0x70
    b308:	18bc      	adds	r4, r7, r2
    b30a:	22df      	movs	r2, #223	; 0xdf
    b30c:	18ba      	adds	r2, r7, r2
    b30e:	7811      	ldrb	r1, [r2, #0]
    b310:	22d5      	movs	r2, #213	; 0xd5
    b312:	18ba      	adds	r2, r7, r2
    b314:	2000      	movs	r0, #0
    b316:	5610      	ldrsb	r0, [r2, r0]
    b318:	0022      	movs	r2, r4
    b31a:	4798      	blx	r3
	{
    b31c:	e090      	b.n	b440 <m2m_ip_cb+0x52c>
				if(u16ReadSize < u16BufferSize)
    b31e:	23d8      	movs	r3, #216	; 0xd8
    b320:	18fa      	adds	r2, r7, r3
    b322:	1d3b      	adds	r3, r7, #4
    b324:	8812      	ldrh	r2, [r2, #0]
    b326:	881b      	ldrh	r3, [r3, #0]
    b328:	429a      	cmp	r2, r3
    b32a:	d300      	bcc.n	b32e <m2m_ip_cb+0x41a>
    b32c:	e088      	b.n	b440 <m2m_ip_cb+0x52c>
					if(hif_receive(0, NULL, 0, 1) == M2M_SUCCESS)
    b32e:	2301      	movs	r3, #1
    b330:	2200      	movs	r2, #0
    b332:	2100      	movs	r1, #0
    b334:	2000      	movs	r0, #0
    b336:	4c46      	ldr	r4, [pc, #280]	; (b450 <m2m_ip_cb+0x53c>)
    b338:	47a0      	blx	r4
	{
    b33a:	e081      	b.n	b440 <m2m_ip_cb+0x52c>
	else if((u8OpCode == SOCKET_CMD_SEND) || (u8OpCode == SOCKET_CMD_SENDTO) || (u8OpCode == SOCKET_CMD_SSL_SEND))
    b33c:	1dfb      	adds	r3, r7, #7
    b33e:	781b      	ldrb	r3, [r3, #0]
    b340:	2b45      	cmp	r3, #69	; 0x45
    b342:	d007      	beq.n	b354 <m2m_ip_cb+0x440>
    b344:	1dfb      	adds	r3, r7, #7
    b346:	781b      	ldrb	r3, [r3, #0]
    b348:	2b47      	cmp	r3, #71	; 0x47
    b34a:	d003      	beq.n	b354 <m2m_ip_cb+0x440>
    b34c:	1dfb      	adds	r3, r7, #7
    b34e:	781b      	ldrb	r3, [r3, #0]
    b350:	2b4c      	cmp	r3, #76	; 0x4c
    b352:	d14c      	bne.n	b3ee <m2m_ip_cb+0x4da>
		uint8			u8CallbackMsgID = SOCKET_MSG_SEND;
    b354:	23de      	movs	r3, #222	; 0xde
    b356:	18fb      	adds	r3, r7, r3
    b358:	2207      	movs	r2, #7
    b35a:	701a      	strb	r2, [r3, #0]
		if(u8OpCode == SOCKET_CMD_SENDTO)
    b35c:	1dfb      	adds	r3, r7, #7
    b35e:	781b      	ldrb	r3, [r3, #0]
    b360:	2b47      	cmp	r3, #71	; 0x47
    b362:	d103      	bne.n	b36c <m2m_ip_cb+0x458>
			u8CallbackMsgID = SOCKET_MSG_SENDTO;
    b364:	23de      	movs	r3, #222	; 0xde
    b366:	18fb      	adds	r3, r7, r3
    b368:	2208      	movs	r2, #8
    b36a:	701a      	strb	r2, [r3, #0]
		if(hif_receive(u32Address, (uint8*)&strReply, sizeof(tstrSendReply), 0) == M2M_SUCCESS)
    b36c:	2364      	movs	r3, #100	; 0x64
    b36e:	18f9      	adds	r1, r7, r3
    b370:	6838      	ldr	r0, [r7, #0]
    b372:	2300      	movs	r3, #0
    b374:	2208      	movs	r2, #8
    b376:	4c36      	ldr	r4, [pc, #216]	; (b450 <m2m_ip_cb+0x53c>)
    b378:	47a0      	blx	r4
    b37a:	1e03      	subs	r3, r0, #0
    b37c:	d162      	bne.n	b444 <m2m_ip_cb+0x530>
			uint16 u16SessionID = 0;
    b37e:	23dc      	movs	r3, #220	; 0xdc
    b380:	18fb      	adds	r3, r7, r3
    b382:	2200      	movs	r2, #0
    b384:	801a      	strh	r2, [r3, #0]
			sock = strReply.sock;
    b386:	23db      	movs	r3, #219	; 0xdb
    b388:	18fb      	adds	r3, r7, r3
    b38a:	2264      	movs	r2, #100	; 0x64
    b38c:	18ba      	adds	r2, r7, r2
    b38e:	7812      	ldrb	r2, [r2, #0]
    b390:	701a      	strb	r2, [r3, #0]
			u16SessionID = strReply.u16SessionID;
    b392:	23dc      	movs	r3, #220	; 0xdc
    b394:	18fb      	adds	r3, r7, r3
    b396:	2264      	movs	r2, #100	; 0x64
    b398:	18ba      	adds	r2, r7, r2
    b39a:	8892      	ldrh	r2, [r2, #4]
    b39c:	801a      	strh	r2, [r3, #0]
			s16Rcvd = NM_BSP_B_L_16(strReply.s16SentBytes);
    b39e:	2364      	movs	r3, #100	; 0x64
    b3a0:	18fb      	adds	r3, r7, r3
    b3a2:	2202      	movs	r2, #2
    b3a4:	5e9a      	ldrsh	r2, [r3, r2]
    b3a6:	236e      	movs	r3, #110	; 0x6e
    b3a8:	18fb      	adds	r3, r7, r3
    b3aa:	801a      	strh	r2, [r3, #0]
			if(u16SessionID == gastrSockets[sock].u16SessionID)
    b3ac:	23db      	movs	r3, #219	; 0xdb
    b3ae:	18fb      	adds	r3, r7, r3
    b3b0:	781b      	ldrb	r3, [r3, #0]
    b3b2:	b25b      	sxtb	r3, r3
    b3b4:	4a27      	ldr	r2, [pc, #156]	; (b454 <m2m_ip_cb+0x540>)
    b3b6:	011b      	lsls	r3, r3, #4
    b3b8:	18d3      	adds	r3, r2, r3
    b3ba:	3306      	adds	r3, #6
    b3bc:	881b      	ldrh	r3, [r3, #0]
    b3be:	b29b      	uxth	r3, r3
    b3c0:	22dc      	movs	r2, #220	; 0xdc
    b3c2:	18ba      	adds	r2, r7, r2
    b3c4:	8812      	ldrh	r2, [r2, #0]
    b3c6:	429a      	cmp	r2, r3
    b3c8:	d13c      	bne.n	b444 <m2m_ip_cb+0x530>
				if(gpfAppSocketCb)
    b3ca:	4b24      	ldr	r3, [pc, #144]	; (b45c <m2m_ip_cb+0x548>)
    b3cc:	681b      	ldr	r3, [r3, #0]
    b3ce:	2b00      	cmp	r3, #0
    b3d0:	d038      	beq.n	b444 <m2m_ip_cb+0x530>
					gpfAppSocketCb(sock,u8CallbackMsgID, &s16Rcvd);
    b3d2:	4b22      	ldr	r3, [pc, #136]	; (b45c <m2m_ip_cb+0x548>)
    b3d4:	681b      	ldr	r3, [r3, #0]
    b3d6:	226e      	movs	r2, #110	; 0x6e
    b3d8:	18bc      	adds	r4, r7, r2
    b3da:	22de      	movs	r2, #222	; 0xde
    b3dc:	18ba      	adds	r2, r7, r2
    b3de:	7811      	ldrb	r1, [r2, #0]
    b3e0:	22db      	movs	r2, #219	; 0xdb
    b3e2:	18ba      	adds	r2, r7, r2
    b3e4:	2000      	movs	r0, #0
    b3e6:	5610      	ldrsb	r0, [r2, r0]
    b3e8:	0022      	movs	r2, r4
    b3ea:	4798      	blx	r3
	{
    b3ec:	e02a      	b.n	b444 <m2m_ip_cb+0x530>
	else if(u8OpCode == SOCKET_CMD_PING)
    b3ee:	1dfb      	adds	r3, r7, #7
    b3f0:	781b      	ldrb	r3, [r3, #0]
    b3f2:	2b52      	cmp	r3, #82	; 0x52
    b3f4:	d127      	bne.n	b446 <m2m_ip_cb+0x532>
		if(hif_receive(u32Address, (uint8*)&strPingReply, sizeof(tstrPingReply), 1) == M2M_SUCCESS)
    b3f6:	2350      	movs	r3, #80	; 0x50
    b3f8:	18f9      	adds	r1, r7, r3
    b3fa:	6838      	ldr	r0, [r7, #0]
    b3fc:	2301      	movs	r3, #1
    b3fe:	2214      	movs	r2, #20
    b400:	4c13      	ldr	r4, [pc, #76]	; (b450 <m2m_ip_cb+0x53c>)
    b402:	47a0      	blx	r4
    b404:	1e03      	subs	r3, r0, #0
    b406:	d11e      	bne.n	b446 <m2m_ip_cb+0x532>
			gfpPingCb = (void (*)(uint32 , uint32 , uint8))strPingReply.u32CmdPrivate;
    b408:	2350      	movs	r3, #80	; 0x50
    b40a:	18fb      	adds	r3, r7, r3
    b40c:	685b      	ldr	r3, [r3, #4]
    b40e:	001a      	movs	r2, r3
    b410:	4b13      	ldr	r3, [pc, #76]	; (b460 <m2m_ip_cb+0x54c>)
    b412:	601a      	str	r2, [r3, #0]
			if(gfpPingCb != NULL)
    b414:	4b12      	ldr	r3, [pc, #72]	; (b460 <m2m_ip_cb+0x54c>)
    b416:	681b      	ldr	r3, [r3, #0]
    b418:	2b00      	cmp	r3, #0
    b41a:	d014      	beq.n	b446 <m2m_ip_cb+0x532>
				gfpPingCb(strPingReply.u32IPAddr, strPingReply.u32RTT, strPingReply.u8ErrorCode);
    b41c:	4b10      	ldr	r3, [pc, #64]	; (b460 <m2m_ip_cb+0x54c>)
    b41e:	681c      	ldr	r4, [r3, #0]
    b420:	2350      	movs	r3, #80	; 0x50
    b422:	18fb      	adds	r3, r7, r3
    b424:	6818      	ldr	r0, [r3, #0]
    b426:	2350      	movs	r3, #80	; 0x50
    b428:	18fb      	adds	r3, r7, r3
    b42a:	6899      	ldr	r1, [r3, #8]
    b42c:	2350      	movs	r3, #80	; 0x50
    b42e:	18fb      	adds	r3, r7, r3
    b430:	7c1b      	ldrb	r3, [r3, #16]
    b432:	001a      	movs	r2, r3
    b434:	47a0      	blx	r4
}
    b436:	e006      	b.n	b446 <m2m_ip_cb+0x532>
	{
    b438:	46c0      	nop			; (mov r8, r8)
    b43a:	e004      	b.n	b446 <m2m_ip_cb+0x532>
	{
    b43c:	46c0      	nop			; (mov r8, r8)
    b43e:	e002      	b.n	b446 <m2m_ip_cb+0x532>
	{
    b440:	46c0      	nop			; (mov r8, r8)
    b442:	e000      	b.n	b446 <m2m_ip_cb+0x532>
	{
    b444:	46c0      	nop			; (mov r8, r8)
}
    b446:	46c0      	nop			; (mov r8, r8)
    b448:	46bd      	mov	sp, r7
    b44a:	b039      	add	sp, #228	; 0xe4
    b44c:	bd90      	pop	{r4, r7, pc}
    b44e:	46c0      	nop			; (mov r8, r8)
    b450:	000078b5 	.word	0x000078b5
    b454:	20002a5c 	.word	0x20002a5c
    b458:	0000ad19 	.word	0x0000ad19
    b45c:	20002b0c 	.word	0x20002b0c
    b460:	20002b10 	.word	0x20002b10

0000b464 <socketInit>:

Date
		4 June 2012
*********************************************************************/
void socketInit(void)
{
    b464:	b580      	push	{r7, lr}
    b466:	af00      	add	r7, sp, #0
	if(gbSocketInit == 0)
    b468:	4b0c      	ldr	r3, [pc, #48]	; (b49c <socketInit+0x38>)
    b46a:	781b      	ldrb	r3, [r3, #0]
    b46c:	b2db      	uxtb	r3, r3
    b46e:	2b00      	cmp	r3, #0
    b470:	d110      	bne.n	b494 <socketInit+0x30>
	{
		m2m_memset((uint8*)gastrSockets, 0, MAX_SOCKET * sizeof(tstrSocket));
    b472:	4b0b      	ldr	r3, [pc, #44]	; (b4a0 <socketInit+0x3c>)
    b474:	22b0      	movs	r2, #176	; 0xb0
    b476:	2100      	movs	r1, #0
    b478:	0018      	movs	r0, r3
    b47a:	4b0a      	ldr	r3, [pc, #40]	; (b4a4 <socketInit+0x40>)
    b47c:	4798      	blx	r3
		hif_register_cb(M2M_REQ_GROUP_IP,m2m_ip_cb);
    b47e:	4b0a      	ldr	r3, [pc, #40]	; (b4a8 <socketInit+0x44>)
    b480:	0019      	movs	r1, r3
    b482:	2002      	movs	r0, #2
    b484:	4b09      	ldr	r3, [pc, #36]	; (b4ac <socketInit+0x48>)
    b486:	4798      	blx	r3
		gbSocketInit	= 1;
    b488:	4b04      	ldr	r3, [pc, #16]	; (b49c <socketInit+0x38>)
    b48a:	2201      	movs	r2, #1
    b48c:	701a      	strb	r2, [r3, #0]
		gu16SessionID	= 0;
    b48e:	4b08      	ldr	r3, [pc, #32]	; (b4b0 <socketInit+0x4c>)
    b490:	2200      	movs	r2, #0
    b492:	801a      	strh	r2, [r3, #0]
	}
}
    b494:	46c0      	nop			; (mov r8, r8)
    b496:	46bd      	mov	sp, r7
    b498:	bd80      	pop	{r7, pc}
    b49a:	46c0      	nop			; (mov r8, r8)
    b49c:	20000558 	.word	0x20000558
    b4a0:	20002a5c 	.word	0x20002a5c
    b4a4:	00006d61 	.word	0x00006d61
    b4a8:	0000af15 	.word	0x0000af15
    b4ac:	00007a35 	.word	0x00007a35
    b4b0:	20000556 	.word	0x20000556

0000b4b4 <registerSocketCallback>:

Date
		4 June 2012
*********************************************************************/
void registerSocketCallback(tpfAppSocketCb pfAppSocketCb, tpfAppResolveCb pfAppResolveCb)
{
    b4b4:	b580      	push	{r7, lr}
    b4b6:	b082      	sub	sp, #8
    b4b8:	af00      	add	r7, sp, #0
    b4ba:	6078      	str	r0, [r7, #4]
    b4bc:	6039      	str	r1, [r7, #0]
	gpfAppSocketCb = pfAppSocketCb;
    b4be:	4b05      	ldr	r3, [pc, #20]	; (b4d4 <registerSocketCallback+0x20>)
    b4c0:	687a      	ldr	r2, [r7, #4]
    b4c2:	601a      	str	r2, [r3, #0]
	gpfAppResolveCb = pfAppResolveCb;
    b4c4:	4b04      	ldr	r3, [pc, #16]	; (b4d8 <registerSocketCallback+0x24>)
    b4c6:	683a      	ldr	r2, [r7, #0]
    b4c8:	601a      	str	r2, [r3, #0]
}
    b4ca:	46c0      	nop			; (mov r8, r8)
    b4cc:	46bd      	mov	sp, r7
    b4ce:	b002      	add	sp, #8
    b4d0:	bd80      	pop	{r7, pc}
    b4d2:	46c0      	nop			; (mov r8, r8)
    b4d4:	20002b0c 	.word	0x20002b0c
    b4d8:	20002b14 	.word	0x20002b14

0000b4dc <socket>:

Date
		4 June 2012
*********************************************************************/
SOCKET socket(uint16 u16Domain, uint8 u8Type, uint8 u8Flags)
{
    b4dc:	b590      	push	{r4, r7, lr}
    b4de:	b08d      	sub	sp, #52	; 0x34
    b4e0:	af04      	add	r7, sp, #16
    b4e2:	0004      	movs	r4, r0
    b4e4:	0008      	movs	r0, r1
    b4e6:	0011      	movs	r1, r2
    b4e8:	1dbb      	adds	r3, r7, #6
    b4ea:	1c22      	adds	r2, r4, #0
    b4ec:	801a      	strh	r2, [r3, #0]
    b4ee:	1d7b      	adds	r3, r7, #5
    b4f0:	1c02      	adds	r2, r0, #0
    b4f2:	701a      	strb	r2, [r3, #0]
    b4f4:	1d3b      	adds	r3, r7, #4
    b4f6:	1c0a      	adds	r2, r1, #0
    b4f8:	701a      	strb	r2, [r3, #0]
	SOCKET					sock = -1;
    b4fa:	231f      	movs	r3, #31
    b4fc:	18fb      	adds	r3, r7, r3
    b4fe:	22ff      	movs	r2, #255	; 0xff
    b500:	701a      	strb	r2, [r3, #0]
	volatile tstrSocket		*pstrSock;
	static volatile uint8	u8NextTcpSock	= 0;
	static volatile uint8	u8NextUdpSock	= 0;

	/* The only supported family is the AF_INET for UDP and TCP transport layer protocols. */
	if(u16Domain == AF_INET)
    b502:	1dbb      	adds	r3, r7, #6
    b504:	881b      	ldrh	r3, [r3, #0]
    b506:	2b02      	cmp	r3, #2
    b508:	d000      	beq.n	b50c <socket+0x30>
    b50a:	e0cd      	b.n	b6a8 <socket+0x1cc>
	{
		if(u8Type == SOCK_STREAM)
    b50c:	1d7b      	adds	r3, r7, #5
    b50e:	781b      	ldrb	r3, [r3, #0]
    b510:	2b01      	cmp	r3, #1
    b512:	d135      	bne.n	b580 <socket+0xa4>
		{
			for(u8Count = 0; u8Count < TCP_SOCK_MAX; u8Count ++)
    b514:	231e      	movs	r3, #30
    b516:	18fb      	adds	r3, r7, r3
    b518:	2200      	movs	r2, #0
    b51a:	701a      	strb	r2, [r3, #0]
    b51c:	e02a      	b.n	b574 <socket+0x98>
			{
				u8SockID	= u8NextTcpSock;
    b51e:	2317      	movs	r3, #23
    b520:	18fb      	adds	r3, r7, r3
    b522:	4a65      	ldr	r2, [pc, #404]	; (b6b8 <socket+0x1dc>)
    b524:	7812      	ldrb	r2, [r2, #0]
    b526:	701a      	strb	r2, [r3, #0]
				pstrSock	= &gastrSockets[u8NextTcpSock];
    b528:	4b63      	ldr	r3, [pc, #396]	; (b6b8 <socket+0x1dc>)
    b52a:	781b      	ldrb	r3, [r3, #0]
    b52c:	b2db      	uxtb	r3, r3
    b52e:	011a      	lsls	r2, r3, #4
    b530:	4b62      	ldr	r3, [pc, #392]	; (b6bc <socket+0x1e0>)
    b532:	18d3      	adds	r3, r2, r3
    b534:	61bb      	str	r3, [r7, #24]
				u8NextTcpSock = (u8NextTcpSock + 1) % TCP_SOCK_MAX;
    b536:	4b60      	ldr	r3, [pc, #384]	; (b6b8 <socket+0x1dc>)
    b538:	781b      	ldrb	r3, [r3, #0]
    b53a:	b2db      	uxtb	r3, r3
    b53c:	1c5a      	adds	r2, r3, #1
    b53e:	4b60      	ldr	r3, [pc, #384]	; (b6c0 <socket+0x1e4>)
    b540:	2107      	movs	r1, #7
    b542:	0010      	movs	r0, r2
    b544:	4798      	blx	r3
    b546:	000b      	movs	r3, r1
    b548:	b2da      	uxtb	r2, r3
    b54a:	4b5b      	ldr	r3, [pc, #364]	; (b6b8 <socket+0x1dc>)
    b54c:	701a      	strb	r2, [r3, #0]
				if(!pstrSock->bIsUsed)
    b54e:	69bb      	ldr	r3, [r7, #24]
    b550:	7a9b      	ldrb	r3, [r3, #10]
    b552:	b2db      	uxtb	r3, r3
    b554:	2b00      	cmp	r3, #0
    b556:	d106      	bne.n	b566 <socket+0x8a>
				{
					sock = (SOCKET)u8SockID;
    b558:	231f      	movs	r3, #31
    b55a:	18fb      	adds	r3, r7, r3
    b55c:	2217      	movs	r2, #23
    b55e:	18ba      	adds	r2, r7, r2
    b560:	7812      	ldrb	r2, [r2, #0]
    b562:	701a      	strb	r2, [r3, #0]
					break;
    b564:	e04c      	b.n	b600 <socket+0x124>
			for(u8Count = 0; u8Count < TCP_SOCK_MAX; u8Count ++)
    b566:	231e      	movs	r3, #30
    b568:	18fb      	adds	r3, r7, r3
    b56a:	781a      	ldrb	r2, [r3, #0]
    b56c:	231e      	movs	r3, #30
    b56e:	18fb      	adds	r3, r7, r3
    b570:	3201      	adds	r2, #1
    b572:	701a      	strb	r2, [r3, #0]
    b574:	231e      	movs	r3, #30
    b576:	18fb      	adds	r3, r7, r3
    b578:	781b      	ldrb	r3, [r3, #0]
    b57a:	2b06      	cmp	r3, #6
    b57c:	d9cf      	bls.n	b51e <socket+0x42>
    b57e:	e03f      	b.n	b600 <socket+0x124>
				}
			}
		}
		else if(u8Type == SOCK_DGRAM)
    b580:	1d7b      	adds	r3, r7, #5
    b582:	781b      	ldrb	r3, [r3, #0]
    b584:	2b02      	cmp	r3, #2
    b586:	d13b      	bne.n	b600 <socket+0x124>
		{
			volatile tstrSocket	*pastrUDPSockets = &gastrSockets[TCP_SOCK_MAX];
    b588:	4b4e      	ldr	r3, [pc, #312]	; (b6c4 <socket+0x1e8>)
    b58a:	613b      	str	r3, [r7, #16]
			for(u8Count = 0; u8Count < UDP_SOCK_MAX; u8Count ++)
    b58c:	231e      	movs	r3, #30
    b58e:	18fb      	adds	r3, r7, r3
    b590:	2200      	movs	r2, #0
    b592:	701a      	strb	r2, [r3, #0]
    b594:	e02f      	b.n	b5f6 <socket+0x11a>
			{
				u8SockID		= u8NextUdpSock;
    b596:	2317      	movs	r3, #23
    b598:	18fb      	adds	r3, r7, r3
    b59a:	4a4b      	ldr	r2, [pc, #300]	; (b6c8 <socket+0x1ec>)
    b59c:	7812      	ldrb	r2, [r2, #0]
    b59e:	701a      	strb	r2, [r3, #0]
				pstrSock		= &pastrUDPSockets[u8NextUdpSock];
    b5a0:	4b49      	ldr	r3, [pc, #292]	; (b6c8 <socket+0x1ec>)
    b5a2:	781b      	ldrb	r3, [r3, #0]
    b5a4:	b2db      	uxtb	r3, r3
    b5a6:	011b      	lsls	r3, r3, #4
    b5a8:	693a      	ldr	r2, [r7, #16]
    b5aa:	18d3      	adds	r3, r2, r3
    b5ac:	61bb      	str	r3, [r7, #24]
				u8NextUdpSock	= (u8NextUdpSock + 1) % UDP_SOCK_MAX;
    b5ae:	4b46      	ldr	r3, [pc, #280]	; (b6c8 <socket+0x1ec>)
    b5b0:	781b      	ldrb	r3, [r3, #0]
    b5b2:	b2db      	uxtb	r3, r3
    b5b4:	3301      	adds	r3, #1
    b5b6:	4a45      	ldr	r2, [pc, #276]	; (b6cc <socket+0x1f0>)
    b5b8:	4013      	ands	r3, r2
    b5ba:	d504      	bpl.n	b5c6 <socket+0xea>
    b5bc:	3b01      	subs	r3, #1
    b5be:	2204      	movs	r2, #4
    b5c0:	4252      	negs	r2, r2
    b5c2:	4313      	orrs	r3, r2
    b5c4:	3301      	adds	r3, #1
    b5c6:	b2da      	uxtb	r2, r3
    b5c8:	4b3f      	ldr	r3, [pc, #252]	; (b6c8 <socket+0x1ec>)
    b5ca:	701a      	strb	r2, [r3, #0]
				if(!pstrSock->bIsUsed)
    b5cc:	69bb      	ldr	r3, [r7, #24]
    b5ce:	7a9b      	ldrb	r3, [r3, #10]
    b5d0:	b2db      	uxtb	r3, r3
    b5d2:	2b00      	cmp	r3, #0
    b5d4:	d108      	bne.n	b5e8 <socket+0x10c>
				{
					sock = (SOCKET)(u8SockID + TCP_SOCK_MAX);
    b5d6:	2317      	movs	r3, #23
    b5d8:	18fb      	adds	r3, r7, r3
    b5da:	781b      	ldrb	r3, [r3, #0]
    b5dc:	3307      	adds	r3, #7
    b5de:	b2da      	uxtb	r2, r3
    b5e0:	231f      	movs	r3, #31
    b5e2:	18fb      	adds	r3, r7, r3
    b5e4:	701a      	strb	r2, [r3, #0]
					break;
    b5e6:	e00b      	b.n	b600 <socket+0x124>
			for(u8Count = 0; u8Count < UDP_SOCK_MAX; u8Count ++)
    b5e8:	231e      	movs	r3, #30
    b5ea:	18fb      	adds	r3, r7, r3
    b5ec:	781a      	ldrb	r2, [r3, #0]
    b5ee:	231e      	movs	r3, #30
    b5f0:	18fb      	adds	r3, r7, r3
    b5f2:	3201      	adds	r2, #1
    b5f4:	701a      	strb	r2, [r3, #0]
    b5f6:	231e      	movs	r3, #30
    b5f8:	18fb      	adds	r3, r7, r3
    b5fa:	781b      	ldrb	r3, [r3, #0]
    b5fc:	2b03      	cmp	r3, #3
    b5fe:	d9ca      	bls.n	b596 <socket+0xba>
				}
			}
		}

		if(sock >= 0)
    b600:	231f      	movs	r3, #31
    b602:	18fb      	adds	r3, r7, r3
    b604:	781b      	ldrb	r3, [r3, #0]
    b606:	2b7f      	cmp	r3, #127	; 0x7f
    b608:	d84e      	bhi.n	b6a8 <socket+0x1cc>
		{
			m2m_memset((uint8*)pstrSock, 0, sizeof(tstrSocket));
    b60a:	69bb      	ldr	r3, [r7, #24]
    b60c:	2210      	movs	r2, #16
    b60e:	2100      	movs	r1, #0
    b610:	0018      	movs	r0, r3
    b612:	4b2f      	ldr	r3, [pc, #188]	; (b6d0 <socket+0x1f4>)
    b614:	4798      	blx	r3
			pstrSock->bIsUsed = 1;
    b616:	69bb      	ldr	r3, [r7, #24]
    b618:	2201      	movs	r2, #1
    b61a:	729a      	strb	r2, [r3, #10]

			/* The session ID is used to distinguish different socket connections
				by comparing the assigned session ID to the one reported by the firmware*/
			++gu16SessionID;
    b61c:	4b2d      	ldr	r3, [pc, #180]	; (b6d4 <socket+0x1f8>)
    b61e:	881b      	ldrh	r3, [r3, #0]
    b620:	b29b      	uxth	r3, r3
    b622:	3301      	adds	r3, #1
    b624:	b29a      	uxth	r2, r3
    b626:	4b2b      	ldr	r3, [pc, #172]	; (b6d4 <socket+0x1f8>)
    b628:	801a      	strh	r2, [r3, #0]
			if(gu16SessionID == 0)
    b62a:	4b2a      	ldr	r3, [pc, #168]	; (b6d4 <socket+0x1f8>)
    b62c:	881b      	ldrh	r3, [r3, #0]
    b62e:	b29b      	uxth	r3, r3
    b630:	2b00      	cmp	r3, #0
    b632:	d106      	bne.n	b642 <socket+0x166>
				++gu16SessionID;
    b634:	4b27      	ldr	r3, [pc, #156]	; (b6d4 <socket+0x1f8>)
    b636:	881b      	ldrh	r3, [r3, #0]
    b638:	b29b      	uxth	r3, r3
    b63a:	3301      	adds	r3, #1
    b63c:	b29a      	uxth	r2, r3
    b63e:	4b25      	ldr	r3, [pc, #148]	; (b6d4 <socket+0x1f8>)
    b640:	801a      	strh	r2, [r3, #0]
				
			pstrSock->u16SessionID = gu16SessionID;
    b642:	4b24      	ldr	r3, [pc, #144]	; (b6d4 <socket+0x1f8>)
    b644:	881b      	ldrh	r3, [r3, #0]
    b646:	b29a      	uxth	r2, r3
    b648:	69bb      	ldr	r3, [r7, #24]
    b64a:	80da      	strh	r2, [r3, #6]
            M2M_INFO("Socket %d session ID = %d\r\n",sock, gu16SessionID );
    b64c:	4b22      	ldr	r3, [pc, #136]	; (b6d8 <socket+0x1fc>)
    b64e:	0018      	movs	r0, r3
    b650:	4b22      	ldr	r3, [pc, #136]	; (b6dc <socket+0x200>)
    b652:	4798      	blx	r3
    b654:	231f      	movs	r3, #31
    b656:	18fb      	adds	r3, r7, r3
    b658:	2100      	movs	r1, #0
    b65a:	5659      	ldrsb	r1, [r3, r1]
    b65c:	4b1d      	ldr	r3, [pc, #116]	; (b6d4 <socket+0x1f8>)
    b65e:	881b      	ldrh	r3, [r3, #0]
    b660:	b29b      	uxth	r3, r3
    b662:	001a      	movs	r2, r3
    b664:	4b1e      	ldr	r3, [pc, #120]	; (b6e0 <socket+0x204>)
    b666:	0018      	movs	r0, r3
    b668:	4b1c      	ldr	r3, [pc, #112]	; (b6dc <socket+0x200>)
    b66a:	4798      	blx	r3
    b66c:	200d      	movs	r0, #13
    b66e:	4b1d      	ldr	r3, [pc, #116]	; (b6e4 <socket+0x208>)
    b670:	4798      	blx	r3

			if(u8Flags & SOCKET_FLAGS_SSL)
    b672:	1d3b      	adds	r3, r7, #4
    b674:	781b      	ldrb	r3, [r3, #0]
    b676:	2201      	movs	r2, #1
    b678:	4013      	ands	r3, r2
    b67a:	d015      	beq.n	b6a8 <socket+0x1cc>
			{
				tstrSSLSocketCreateCmd	strSSLCreate;
				strSSLCreate.sslSock = sock;
    b67c:	230c      	movs	r3, #12
    b67e:	18fb      	adds	r3, r7, r3
    b680:	221f      	movs	r2, #31
    b682:	18ba      	adds	r2, r7, r2
    b684:	7812      	ldrb	r2, [r2, #0]
    b686:	701a      	strb	r2, [r3, #0]
				pstrSock->u8SSLFlags = SSL_FLAGS_ACTIVE | SSL_FLAGS_NO_TX_COPY;
    b688:	69bb      	ldr	r3, [r7, #24]
    b68a:	2221      	movs	r2, #33	; 0x21
    b68c:	72da      	strb	r2, [r3, #11]
				SOCKET_REQUEST(SOCKET_CMD_SSL_CREATE, (uint8*)&strSSLCreate, sizeof(tstrSSLSocketCreateCmd), 0, 0, 0);
    b68e:	230c      	movs	r3, #12
    b690:	18fa      	adds	r2, r7, r3
    b692:	2300      	movs	r3, #0
    b694:	9302      	str	r3, [sp, #8]
    b696:	2300      	movs	r3, #0
    b698:	9301      	str	r3, [sp, #4]
    b69a:	2300      	movs	r3, #0
    b69c:	9300      	str	r3, [sp, #0]
    b69e:	2304      	movs	r3, #4
    b6a0:	2150      	movs	r1, #80	; 0x50
    b6a2:	2002      	movs	r0, #2
    b6a4:	4c10      	ldr	r4, [pc, #64]	; (b6e8 <socket+0x20c>)
    b6a6:	47a0      	blx	r4
			}
		}
	}
	return sock;
    b6a8:	231f      	movs	r3, #31
    b6aa:	18fb      	adds	r3, r7, r3
    b6ac:	781b      	ldrb	r3, [r3, #0]
    b6ae:	b25b      	sxtb	r3, r3
}
    b6b0:	0018      	movs	r0, r3
    b6b2:	46bd      	mov	sp, r7
    b6b4:	b009      	add	sp, #36	; 0x24
    b6b6:	bd90      	pop	{r4, r7, pc}
    b6b8:	20000559 	.word	0x20000559
    b6bc:	20002a5c 	.word	0x20002a5c
    b6c0:	00019fb9 	.word	0x00019fb9
    b6c4:	20002acc 	.word	0x20002acc
    b6c8:	2000055a 	.word	0x2000055a
    b6cc:	80000003 	.word	0x80000003
    b6d0:	00006d61 	.word	0x00006d61
    b6d4:	20000556 	.word	0x20000556
    b6d8:	00020940 	.word	0x00020940
    b6dc:	0001c2d5 	.word	0x0001c2d5
    b6e0:	00020960 	.word	0x00020960
    b6e4:	0001c309 	.word	0x0001c309
    b6e8:	00006fc1 	.word	0x00006fc1

0000b6ec <connect>:

Date
		5 June 2012
*********************************************************************/
sint8 connect(SOCKET sock, struct sockaddr *pstrAddr, uint8 u8AddrLen)
{
    b6ec:	b5b0      	push	{r4, r5, r7, lr}
    b6ee:	b08a      	sub	sp, #40	; 0x28
    b6f0:	af04      	add	r7, sp, #16
    b6f2:	6039      	str	r1, [r7, #0]
    b6f4:	0011      	movs	r1, r2
    b6f6:	1dfb      	adds	r3, r7, #7
    b6f8:	1c02      	adds	r2, r0, #0
    b6fa:	701a      	strb	r2, [r3, #0]
    b6fc:	1dbb      	adds	r3, r7, #6
    b6fe:	1c0a      	adds	r2, r1, #0
    b700:	701a      	strb	r2, [r3, #0]
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
    b702:	2317      	movs	r3, #23
    b704:	18fb      	adds	r3, r7, r3
    b706:	22fa      	movs	r2, #250	; 0xfa
    b708:	701a      	strb	r2, [r3, #0]
	if((sock >= 0) && (pstrAddr != NULL) && (gastrSockets[sock].bIsUsed == 1) && (u8AddrLen != 0))
    b70a:	1dfb      	adds	r3, r7, #7
    b70c:	781b      	ldrb	r3, [r3, #0]
    b70e:	2b7f      	cmp	r3, #127	; 0x7f
    b710:	d867      	bhi.n	b7e2 <connect+0xf6>
    b712:	683b      	ldr	r3, [r7, #0]
    b714:	2b00      	cmp	r3, #0
    b716:	d064      	beq.n	b7e2 <connect+0xf6>
    b718:	1dfb      	adds	r3, r7, #7
    b71a:	781b      	ldrb	r3, [r3, #0]
    b71c:	b25b      	sxtb	r3, r3
    b71e:	4a35      	ldr	r2, [pc, #212]	; (b7f4 <connect+0x108>)
    b720:	011b      	lsls	r3, r3, #4
    b722:	18d3      	adds	r3, r2, r3
    b724:	330a      	adds	r3, #10
    b726:	781b      	ldrb	r3, [r3, #0]
    b728:	b2db      	uxtb	r3, r3
    b72a:	2b01      	cmp	r3, #1
    b72c:	d159      	bne.n	b7e2 <connect+0xf6>
    b72e:	1dbb      	adds	r3, r7, #6
    b730:	781b      	ldrb	r3, [r3, #0]
    b732:	2b00      	cmp	r3, #0
    b734:	d055      	beq.n	b7e2 <connect+0xf6>
	{
		tstrConnectCmd	strConnect;
		uint8			u8Cmd = SOCKET_CMD_CONNECT;
    b736:	2316      	movs	r3, #22
    b738:	18fb      	adds	r3, r7, r3
    b73a:	2244      	movs	r2, #68	; 0x44
    b73c:	701a      	strb	r2, [r3, #0]
		if((gastrSockets[sock].u8SSLFlags) & SSL_FLAGS_ACTIVE)
    b73e:	1dfb      	adds	r3, r7, #7
    b740:	781b      	ldrb	r3, [r3, #0]
    b742:	b25b      	sxtb	r3, r3
    b744:	4a2b      	ldr	r2, [pc, #172]	; (b7f4 <connect+0x108>)
    b746:	011b      	lsls	r3, r3, #4
    b748:	18d3      	adds	r3, r2, r3
    b74a:	330b      	adds	r3, #11
    b74c:	781b      	ldrb	r3, [r3, #0]
    b74e:	b2db      	uxtb	r3, r3
    b750:	001a      	movs	r2, r3
    b752:	2301      	movs	r3, #1
    b754:	4013      	ands	r3, r2
    b756:	d00f      	beq.n	b778 <connect+0x8c>
		{
			u8Cmd = SOCKET_CMD_SSL_CONNECT;
    b758:	2316      	movs	r3, #22
    b75a:	18fb      	adds	r3, r7, r3
    b75c:	224b      	movs	r2, #75	; 0x4b
    b75e:	701a      	strb	r2, [r3, #0]
			strConnect.u8SslFlags = gastrSockets[sock].u8SSLFlags;
    b760:	1dfb      	adds	r3, r7, #7
    b762:	781b      	ldrb	r3, [r3, #0]
    b764:	b25b      	sxtb	r3, r3
    b766:	4a23      	ldr	r2, [pc, #140]	; (b7f4 <connect+0x108>)
    b768:	011b      	lsls	r3, r3, #4
    b76a:	18d3      	adds	r3, r2, r3
    b76c:	330b      	adds	r3, #11
    b76e:	781b      	ldrb	r3, [r3, #0]
    b770:	b2da      	uxtb	r2, r3
    b772:	2308      	movs	r3, #8
    b774:	18fb      	adds	r3, r7, r3
    b776:	725a      	strb	r2, [r3, #9]
		}
		strConnect.sock = sock;
    b778:	2308      	movs	r3, #8
    b77a:	18fb      	adds	r3, r7, r3
    b77c:	1dfa      	adds	r2, r7, #7
    b77e:	7812      	ldrb	r2, [r2, #0]
    b780:	721a      	strb	r2, [r3, #8]
		m2m_memcpy((uint8 *)&strConnect.strAddr, (uint8 *)pstrAddr, sizeof(tstrSockAddr));
    b782:	6839      	ldr	r1, [r7, #0]
    b784:	2308      	movs	r3, #8
    b786:	18fb      	adds	r3, r7, r3
    b788:	2208      	movs	r2, #8
    b78a:	0018      	movs	r0, r3
    b78c:	4b1a      	ldr	r3, [pc, #104]	; (b7f8 <connect+0x10c>)
    b78e:	4798      	blx	r3

		strConnect.u16SessionID		= gastrSockets[sock].u16SessionID;
    b790:	1dfb      	adds	r3, r7, #7
    b792:	781b      	ldrb	r3, [r3, #0]
    b794:	b25b      	sxtb	r3, r3
    b796:	4a17      	ldr	r2, [pc, #92]	; (b7f4 <connect+0x108>)
    b798:	011b      	lsls	r3, r3, #4
    b79a:	18d3      	adds	r3, r2, r3
    b79c:	3306      	adds	r3, #6
    b79e:	881b      	ldrh	r3, [r3, #0]
    b7a0:	b29a      	uxth	r2, r3
    b7a2:	2308      	movs	r3, #8
    b7a4:	18fb      	adds	r3, r7, r3
    b7a6:	815a      	strh	r2, [r3, #10]
		s8Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strConnect,sizeof(tstrConnectCmd), NULL, 0, 0);
    b7a8:	2317      	movs	r3, #23
    b7aa:	18fc      	adds	r4, r7, r3
    b7ac:	2308      	movs	r3, #8
    b7ae:	18fa      	adds	r2, r7, r3
    b7b0:	2316      	movs	r3, #22
    b7b2:	18fb      	adds	r3, r7, r3
    b7b4:	7819      	ldrb	r1, [r3, #0]
    b7b6:	2300      	movs	r3, #0
    b7b8:	9302      	str	r3, [sp, #8]
    b7ba:	2300      	movs	r3, #0
    b7bc:	9301      	str	r3, [sp, #4]
    b7be:	2300      	movs	r3, #0
    b7c0:	9300      	str	r3, [sp, #0]
    b7c2:	230c      	movs	r3, #12
    b7c4:	2002      	movs	r0, #2
    b7c6:	4d0d      	ldr	r5, [pc, #52]	; (b7fc <connect+0x110>)
    b7c8:	47a8      	blx	r5
    b7ca:	0003      	movs	r3, r0
    b7cc:	7023      	strb	r3, [r4, #0]
		if(s8Ret != SOCK_ERR_NO_ERROR)
    b7ce:	2317      	movs	r3, #23
    b7d0:	18fb      	adds	r3, r7, r3
    b7d2:	781b      	ldrb	r3, [r3, #0]
    b7d4:	b25b      	sxtb	r3, r3
    b7d6:	2b00      	cmp	r3, #0
    b7d8:	d003      	beq.n	b7e2 <connect+0xf6>
		{
			s8Ret = SOCK_ERR_INVALID;
    b7da:	2317      	movs	r3, #23
    b7dc:	18fb      	adds	r3, r7, r3
    b7de:	22f7      	movs	r2, #247	; 0xf7
    b7e0:	701a      	strb	r2, [r3, #0]
		}
	}
	return s8Ret;
    b7e2:	2317      	movs	r3, #23
    b7e4:	18fb      	adds	r3, r7, r3
    b7e6:	781b      	ldrb	r3, [r3, #0]
    b7e8:	b25b      	sxtb	r3, r3
}
    b7ea:	0018      	movs	r0, r3
    b7ec:	46bd      	mov	sp, r7
    b7ee:	b006      	add	sp, #24
    b7f0:	bdb0      	pop	{r4, r5, r7, pc}
    b7f2:	46c0      	nop			; (mov r8, r8)
    b7f4:	20002a5c 	.word	0x20002a5c
    b7f8:	00006d25 	.word	0x00006d25
    b7fc:	00006fc1 	.word	0x00006fc1

0000b800 <send>:

Date
		5 June 2012
*********************************************************************/
sint16 send(SOCKET sock, void *pvSendBuffer, uint16 u16SendLength, uint16 flags)
{
    b800:	b590      	push	{r4, r7, lr}
    b802:	b08f      	sub	sp, #60	; 0x3c
    b804:	af04      	add	r7, sp, #16
    b806:	0004      	movs	r4, r0
    b808:	60b9      	str	r1, [r7, #8]
    b80a:	0010      	movs	r0, r2
    b80c:	0019      	movs	r1, r3
    b80e:	230f      	movs	r3, #15
    b810:	18fb      	adds	r3, r7, r3
    b812:	1c22      	adds	r2, r4, #0
    b814:	701a      	strb	r2, [r3, #0]
    b816:	230c      	movs	r3, #12
    b818:	18fb      	adds	r3, r7, r3
    b81a:	1c02      	adds	r2, r0, #0
    b81c:	801a      	strh	r2, [r3, #0]
    b81e:	1dbb      	adds	r3, r7, #6
    b820:	1c0a      	adds	r2, r1, #0
    b822:	801a      	strh	r2, [r3, #0]
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
    b824:	2326      	movs	r3, #38	; 0x26
    b826:	18fb      	adds	r3, r7, r3
    b828:	2206      	movs	r2, #6
    b82a:	4252      	negs	r2, r2
    b82c:	801a      	strh	r2, [r3, #0]
	
	if((sock >= 0) && (pvSendBuffer != NULL) && (u16SendLength <= SOCKET_BUFFER_MAX_LENGTH) && (gastrSockets[sock].bIsUsed == 1))
    b82e:	230f      	movs	r3, #15
    b830:	18fb      	adds	r3, r7, r3
    b832:	781b      	ldrb	r3, [r3, #0]
    b834:	2b7f      	cmp	r3, #127	; 0x7f
    b836:	d900      	bls.n	b83a <send+0x3a>
    b838:	e087      	b.n	b94a <send+0x14a>
    b83a:	68bb      	ldr	r3, [r7, #8]
    b83c:	2b00      	cmp	r3, #0
    b83e:	d100      	bne.n	b842 <send+0x42>
    b840:	e083      	b.n	b94a <send+0x14a>
    b842:	230c      	movs	r3, #12
    b844:	18fb      	adds	r3, r7, r3
    b846:	881a      	ldrh	r2, [r3, #0]
    b848:	23af      	movs	r3, #175	; 0xaf
    b84a:	00db      	lsls	r3, r3, #3
    b84c:	429a      	cmp	r2, r3
    b84e:	d900      	bls.n	b852 <send+0x52>
    b850:	e07b      	b.n	b94a <send+0x14a>
    b852:	230f      	movs	r3, #15
    b854:	18fb      	adds	r3, r7, r3
    b856:	781b      	ldrb	r3, [r3, #0]
    b858:	b25b      	sxtb	r3, r3
    b85a:	4a40      	ldr	r2, [pc, #256]	; (b95c <send+0x15c>)
    b85c:	011b      	lsls	r3, r3, #4
    b85e:	18d3      	adds	r3, r2, r3
    b860:	330a      	adds	r3, #10
    b862:	781b      	ldrb	r3, [r3, #0]
    b864:	b2db      	uxtb	r3, r3
    b866:	2b01      	cmp	r3, #1
    b868:	d16f      	bne.n	b94a <send+0x14a>
	{
		uint16			u16DataOffset;
		tstrSendCmd		strSend;
		uint8			u8Cmd;

		u8Cmd			= SOCKET_CMD_SEND;
    b86a:	2323      	movs	r3, #35	; 0x23
    b86c:	18fb      	adds	r3, r7, r3
    b86e:	2245      	movs	r2, #69	; 0x45
    b870:	701a      	strb	r2, [r3, #0]
		u16DataOffset	= TCP_TX_PACKET_OFFSET;
    b872:	2324      	movs	r3, #36	; 0x24
    b874:	18fb      	adds	r3, r7, r3
    b876:	2250      	movs	r2, #80	; 0x50
    b878:	801a      	strh	r2, [r3, #0]

		strSend.sock			= sock;
    b87a:	2310      	movs	r3, #16
    b87c:	18fb      	adds	r3, r7, r3
    b87e:	220f      	movs	r2, #15
    b880:	18ba      	adds	r2, r7, r2
    b882:	7812      	ldrb	r2, [r2, #0]
    b884:	701a      	strb	r2, [r3, #0]
		strSend.u16DataSize		= NM_BSP_B_L_16(u16SendLength);
    b886:	2310      	movs	r3, #16
    b888:	18fb      	adds	r3, r7, r3
    b88a:	220c      	movs	r2, #12
    b88c:	18ba      	adds	r2, r7, r2
    b88e:	8812      	ldrh	r2, [r2, #0]
    b890:	805a      	strh	r2, [r3, #2]
		strSend.u16SessionID	= gastrSockets[sock].u16SessionID;
    b892:	230f      	movs	r3, #15
    b894:	18fb      	adds	r3, r7, r3
    b896:	781b      	ldrb	r3, [r3, #0]
    b898:	b25b      	sxtb	r3, r3
    b89a:	4a30      	ldr	r2, [pc, #192]	; (b95c <send+0x15c>)
    b89c:	011b      	lsls	r3, r3, #4
    b89e:	18d3      	adds	r3, r2, r3
    b8a0:	3306      	adds	r3, #6
    b8a2:	881b      	ldrh	r3, [r3, #0]
    b8a4:	b29a      	uxth	r2, r3
    b8a6:	2310      	movs	r3, #16
    b8a8:	18fb      	adds	r3, r7, r3
    b8aa:	819a      	strh	r2, [r3, #12]

		if(sock >= TCP_SOCK_MAX)
    b8ac:	230f      	movs	r3, #15
    b8ae:	18fb      	adds	r3, r7, r3
    b8b0:	781b      	ldrb	r3, [r3, #0]
    b8b2:	b25b      	sxtb	r3, r3
    b8b4:	2b06      	cmp	r3, #6
    b8b6:	dd03      	ble.n	b8c0 <send+0xc0>
		{
			u16DataOffset = UDP_TX_PACKET_OFFSET;
    b8b8:	2324      	movs	r3, #36	; 0x24
    b8ba:	18fb      	adds	r3, r7, r3
    b8bc:	2244      	movs	r2, #68	; 0x44
    b8be:	801a      	strh	r2, [r3, #0]
		}
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
    b8c0:	230f      	movs	r3, #15
    b8c2:	18fb      	adds	r3, r7, r3
    b8c4:	781b      	ldrb	r3, [r3, #0]
    b8c6:	b25b      	sxtb	r3, r3
    b8c8:	4a24      	ldr	r2, [pc, #144]	; (b95c <send+0x15c>)
    b8ca:	011b      	lsls	r3, r3, #4
    b8cc:	18d3      	adds	r3, r2, r3
    b8ce:	330b      	adds	r3, #11
    b8d0:	781b      	ldrb	r3, [r3, #0]
    b8d2:	b2db      	uxtb	r3, r3
    b8d4:	001a      	movs	r2, r3
    b8d6:	2301      	movs	r3, #1
    b8d8:	4013      	ands	r3, r2
    b8da:	d00f      	beq.n	b8fc <send+0xfc>
		{
			u8Cmd			= SOCKET_CMD_SSL_SEND;
    b8dc:	2323      	movs	r3, #35	; 0x23
    b8de:	18fb      	adds	r3, r7, r3
    b8e0:	224c      	movs	r2, #76	; 0x4c
    b8e2:	701a      	strb	r2, [r3, #0]
			u16DataOffset	= gastrSockets[sock].u16DataOffset;
    b8e4:	230f      	movs	r3, #15
    b8e6:	18fb      	adds	r3, r7, r3
    b8e8:	2200      	movs	r2, #0
    b8ea:	569a      	ldrsb	r2, [r3, r2]
    b8ec:	2324      	movs	r3, #36	; 0x24
    b8ee:	18fb      	adds	r3, r7, r3
    b8f0:	491a      	ldr	r1, [pc, #104]	; (b95c <send+0x15c>)
    b8f2:	0112      	lsls	r2, r2, #4
    b8f4:	188a      	adds	r2, r1, r2
    b8f6:	3208      	adds	r2, #8
    b8f8:	8812      	ldrh	r2, [r2, #0]
    b8fa:	801a      	strh	r2, [r3, #0]
		}

		s16Ret =  SOCKET_REQUEST(u8Cmd|M2M_REQ_DATA_PKT, (uint8*)&strSend, sizeof(tstrSendCmd), pvSendBuffer, u16SendLength, u16DataOffset);
    b8fc:	2323      	movs	r3, #35	; 0x23
    b8fe:	18fb      	adds	r3, r7, r3
    b900:	781b      	ldrb	r3, [r3, #0]
    b902:	2280      	movs	r2, #128	; 0x80
    b904:	4252      	negs	r2, r2
    b906:	4313      	orrs	r3, r2
    b908:	b2d9      	uxtb	r1, r3
    b90a:	2310      	movs	r3, #16
    b90c:	18fa      	adds	r2, r7, r3
    b90e:	2324      	movs	r3, #36	; 0x24
    b910:	18fb      	adds	r3, r7, r3
    b912:	881b      	ldrh	r3, [r3, #0]
    b914:	9302      	str	r3, [sp, #8]
    b916:	230c      	movs	r3, #12
    b918:	18fb      	adds	r3, r7, r3
    b91a:	881b      	ldrh	r3, [r3, #0]
    b91c:	9301      	str	r3, [sp, #4]
    b91e:	68bb      	ldr	r3, [r7, #8]
    b920:	9300      	str	r3, [sp, #0]
    b922:	2310      	movs	r3, #16
    b924:	2002      	movs	r0, #2
    b926:	4c0e      	ldr	r4, [pc, #56]	; (b960 <send+0x160>)
    b928:	47a0      	blx	r4
    b92a:	0003      	movs	r3, r0
    b92c:	001a      	movs	r2, r3
    b92e:	2326      	movs	r3, #38	; 0x26
    b930:	18fb      	adds	r3, r7, r3
    b932:	801a      	strh	r2, [r3, #0]
		if(s16Ret != SOCK_ERR_NO_ERROR)
    b934:	2326      	movs	r3, #38	; 0x26
    b936:	18fb      	adds	r3, r7, r3
    b938:	2200      	movs	r2, #0
    b93a:	5e9b      	ldrsh	r3, [r3, r2]
    b93c:	2b00      	cmp	r3, #0
    b93e:	d004      	beq.n	b94a <send+0x14a>
		{
			s16Ret = SOCK_ERR_BUFFER_FULL;
    b940:	2326      	movs	r3, #38	; 0x26
    b942:	18fb      	adds	r3, r7, r3
    b944:	220e      	movs	r2, #14
    b946:	4252      	negs	r2, r2
    b948:	801a      	strh	r2, [r3, #0]
		}
	}
	return s16Ret;
    b94a:	2326      	movs	r3, #38	; 0x26
    b94c:	18fb      	adds	r3, r7, r3
    b94e:	2200      	movs	r2, #0
    b950:	5e9b      	ldrsh	r3, [r3, r2]
}
    b952:	0018      	movs	r0, r3
    b954:	46bd      	mov	sp, r7
    b956:	b00b      	add	sp, #44	; 0x2c
    b958:	bd90      	pop	{r4, r7, pc}
    b95a:	46c0      	nop			; (mov r8, r8)
    b95c:	20002a5c 	.word	0x20002a5c
    b960:	00006fc1 	.word	0x00006fc1

0000b964 <recv>:

Date
		5 June 2012
*********************************************************************/
sint16 recv(SOCKET sock, void *pvRecvBuf, uint16 u16BufLen, uint32 u32Timeoutmsec)
{
    b964:	b590      	push	{r4, r7, lr}
    b966:	b08d      	sub	sp, #52	; 0x34
    b968:	af04      	add	r7, sp, #16
    b96a:	60b9      	str	r1, [r7, #8]
    b96c:	0011      	movs	r1, r2
    b96e:	607b      	str	r3, [r7, #4]
    b970:	230f      	movs	r3, #15
    b972:	18fb      	adds	r3, r7, r3
    b974:	1c02      	adds	r2, r0, #0
    b976:	701a      	strb	r2, [r3, #0]
    b978:	230c      	movs	r3, #12
    b97a:	18fb      	adds	r3, r7, r3
    b97c:	1c0a      	adds	r2, r1, #0
    b97e:	801a      	strh	r2, [r3, #0]
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
    b980:	231e      	movs	r3, #30
    b982:	18fb      	adds	r3, r7, r3
    b984:	2206      	movs	r2, #6
    b986:	4252      	negs	r2, r2
    b988:	801a      	strh	r2, [r3, #0]
	
	if((sock >= 0) && (pvRecvBuf != NULL) && (u16BufLen != 0) && (gastrSockets[sock].bIsUsed == 1))
    b98a:	230f      	movs	r3, #15
    b98c:	18fb      	adds	r3, r7, r3
    b98e:	781b      	ldrb	r3, [r3, #0]
    b990:	2b7f      	cmp	r3, #127	; 0x7f
    b992:	d900      	bls.n	b996 <recv+0x32>
    b994:	e099      	b.n	baca <recv+0x166>
    b996:	68bb      	ldr	r3, [r7, #8]
    b998:	2b00      	cmp	r3, #0
    b99a:	d100      	bne.n	b99e <recv+0x3a>
    b99c:	e095      	b.n	baca <recv+0x166>
    b99e:	230c      	movs	r3, #12
    b9a0:	18fb      	adds	r3, r7, r3
    b9a2:	881b      	ldrh	r3, [r3, #0]
    b9a4:	2b00      	cmp	r3, #0
    b9a6:	d100      	bne.n	b9aa <recv+0x46>
    b9a8:	e08f      	b.n	baca <recv+0x166>
    b9aa:	230f      	movs	r3, #15
    b9ac:	18fb      	adds	r3, r7, r3
    b9ae:	781b      	ldrb	r3, [r3, #0]
    b9b0:	b25b      	sxtb	r3, r3
    b9b2:	4a4a      	ldr	r2, [pc, #296]	; (badc <recv+0x178>)
    b9b4:	011b      	lsls	r3, r3, #4
    b9b6:	18d3      	adds	r3, r2, r3
    b9b8:	330a      	adds	r3, #10
    b9ba:	781b      	ldrb	r3, [r3, #0]
    b9bc:	b2db      	uxtb	r3, r3
    b9be:	2b01      	cmp	r3, #1
    b9c0:	d000      	beq.n	b9c4 <recv+0x60>
    b9c2:	e082      	b.n	baca <recv+0x166>
	{
		s16Ret = SOCK_ERR_NO_ERROR;
    b9c4:	231e      	movs	r3, #30
    b9c6:	18fb      	adds	r3, r7, r3
    b9c8:	2200      	movs	r2, #0
    b9ca:	801a      	strh	r2, [r3, #0]
		gastrSockets[sock].pu8UserBuffer 		= (uint8*)pvRecvBuf;
    b9cc:	230f      	movs	r3, #15
    b9ce:	18fb      	adds	r3, r7, r3
    b9d0:	2200      	movs	r2, #0
    b9d2:	569a      	ldrsb	r2, [r3, r2]
    b9d4:	4b41      	ldr	r3, [pc, #260]	; (badc <recv+0x178>)
    b9d6:	0112      	lsls	r2, r2, #4
    b9d8:	68b9      	ldr	r1, [r7, #8]
    b9da:	50d1      	str	r1, [r2, r3]
		gastrSockets[sock].u16UserBufferSize 	= u16BufLen;
    b9dc:	230f      	movs	r3, #15
    b9de:	18fb      	adds	r3, r7, r3
    b9e0:	781b      	ldrb	r3, [r3, #0]
    b9e2:	b25b      	sxtb	r3, r3
    b9e4:	4a3d      	ldr	r2, [pc, #244]	; (badc <recv+0x178>)
    b9e6:	011b      	lsls	r3, r3, #4
    b9e8:	18d3      	adds	r3, r2, r3
    b9ea:	3304      	adds	r3, #4
    b9ec:	220c      	movs	r2, #12
    b9ee:	18ba      	adds	r2, r7, r2
    b9f0:	8812      	ldrh	r2, [r2, #0]
    b9f2:	801a      	strh	r2, [r3, #0]

		if(!gastrSockets[sock].bIsRecvPending)
    b9f4:	230f      	movs	r3, #15
    b9f6:	18fb      	adds	r3, r7, r3
    b9f8:	781b      	ldrb	r3, [r3, #0]
    b9fa:	b25b      	sxtb	r3, r3
    b9fc:	4a37      	ldr	r2, [pc, #220]	; (badc <recv+0x178>)
    b9fe:	011b      	lsls	r3, r3, #4
    ba00:	18d3      	adds	r3, r2, r3
    ba02:	330c      	adds	r3, #12
    ba04:	781b      	ldrb	r3, [r3, #0]
    ba06:	b2db      	uxtb	r3, r3
    ba08:	2b00      	cmp	r3, #0
    ba0a:	d15e      	bne.n	baca <recv+0x166>
		{
			tstrRecvCmd	strRecv;
			uint8		u8Cmd = SOCKET_CMD_RECV;
    ba0c:	231d      	movs	r3, #29
    ba0e:	18fb      	adds	r3, r7, r3
    ba10:	2246      	movs	r2, #70	; 0x46
    ba12:	701a      	strb	r2, [r3, #0]

			gastrSockets[sock].bIsRecvPending = 1;
    ba14:	230f      	movs	r3, #15
    ba16:	18fb      	adds	r3, r7, r3
    ba18:	781b      	ldrb	r3, [r3, #0]
    ba1a:	b25b      	sxtb	r3, r3
    ba1c:	4a2f      	ldr	r2, [pc, #188]	; (badc <recv+0x178>)
    ba1e:	011b      	lsls	r3, r3, #4
    ba20:	18d3      	adds	r3, r2, r3
    ba22:	330c      	adds	r3, #12
    ba24:	2201      	movs	r2, #1
    ba26:	701a      	strb	r2, [r3, #0]
			if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
    ba28:	230f      	movs	r3, #15
    ba2a:	18fb      	adds	r3, r7, r3
    ba2c:	781b      	ldrb	r3, [r3, #0]
    ba2e:	b25b      	sxtb	r3, r3
    ba30:	4a2a      	ldr	r2, [pc, #168]	; (badc <recv+0x178>)
    ba32:	011b      	lsls	r3, r3, #4
    ba34:	18d3      	adds	r3, r2, r3
    ba36:	330b      	adds	r3, #11
    ba38:	781b      	ldrb	r3, [r3, #0]
    ba3a:	b2db      	uxtb	r3, r3
    ba3c:	001a      	movs	r2, r3
    ba3e:	2301      	movs	r3, #1
    ba40:	4013      	ands	r3, r2
    ba42:	d003      	beq.n	ba4c <recv+0xe8>
			{
				u8Cmd = SOCKET_CMD_SSL_RECV;
    ba44:	231d      	movs	r3, #29
    ba46:	18fb      	adds	r3, r7, r3
    ba48:	224d      	movs	r2, #77	; 0x4d
    ba4a:	701a      	strb	r2, [r3, #0]
			}

			/* Check the timeout value. */
			if(u32Timeoutmsec == 0)
    ba4c:	687b      	ldr	r3, [r7, #4]
    ba4e:	2b00      	cmp	r3, #0
    ba50:	d105      	bne.n	ba5e <recv+0xfa>
				strRecv.u32Timeoutmsec = 0xFFFFFFFF;
    ba52:	2314      	movs	r3, #20
    ba54:	18fb      	adds	r3, r7, r3
    ba56:	2201      	movs	r2, #1
    ba58:	4252      	negs	r2, r2
    ba5a:	601a      	str	r2, [r3, #0]
    ba5c:	e003      	b.n	ba66 <recv+0x102>
			else
				strRecv.u32Timeoutmsec = NM_BSP_B_L_32(u32Timeoutmsec);
    ba5e:	2314      	movs	r3, #20
    ba60:	18fb      	adds	r3, r7, r3
    ba62:	687a      	ldr	r2, [r7, #4]
    ba64:	601a      	str	r2, [r3, #0]
			strRecv.sock = sock;
    ba66:	2314      	movs	r3, #20
    ba68:	18fb      	adds	r3, r7, r3
    ba6a:	220f      	movs	r2, #15
    ba6c:	18ba      	adds	r2, r7, r2
    ba6e:	7812      	ldrb	r2, [r2, #0]
    ba70:	711a      	strb	r2, [r3, #4]
			strRecv.u16SessionID		= gastrSockets[sock].u16SessionID;
    ba72:	230f      	movs	r3, #15
    ba74:	18fb      	adds	r3, r7, r3
    ba76:	781b      	ldrb	r3, [r3, #0]
    ba78:	b25b      	sxtb	r3, r3
    ba7a:	4a18      	ldr	r2, [pc, #96]	; (badc <recv+0x178>)
    ba7c:	011b      	lsls	r3, r3, #4
    ba7e:	18d3      	adds	r3, r2, r3
    ba80:	3306      	adds	r3, #6
    ba82:	881b      	ldrh	r3, [r3, #0]
    ba84:	b29a      	uxth	r2, r3
    ba86:	2314      	movs	r3, #20
    ba88:	18fb      	adds	r3, r7, r3
    ba8a:	80da      	strh	r2, [r3, #6]
		
			s16Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strRecv, sizeof(tstrRecvCmd), NULL , 0, 0);
    ba8c:	2314      	movs	r3, #20
    ba8e:	18fa      	adds	r2, r7, r3
    ba90:	231d      	movs	r3, #29
    ba92:	18fb      	adds	r3, r7, r3
    ba94:	7819      	ldrb	r1, [r3, #0]
    ba96:	2300      	movs	r3, #0
    ba98:	9302      	str	r3, [sp, #8]
    ba9a:	2300      	movs	r3, #0
    ba9c:	9301      	str	r3, [sp, #4]
    ba9e:	2300      	movs	r3, #0
    baa0:	9300      	str	r3, [sp, #0]
    baa2:	2308      	movs	r3, #8
    baa4:	2002      	movs	r0, #2
    baa6:	4c0e      	ldr	r4, [pc, #56]	; (bae0 <recv+0x17c>)
    baa8:	47a0      	blx	r4
    baaa:	0003      	movs	r3, r0
    baac:	001a      	movs	r2, r3
    baae:	231e      	movs	r3, #30
    bab0:	18fb      	adds	r3, r7, r3
    bab2:	801a      	strh	r2, [r3, #0]
			if(s16Ret != SOCK_ERR_NO_ERROR)
    bab4:	231e      	movs	r3, #30
    bab6:	18fb      	adds	r3, r7, r3
    bab8:	2200      	movs	r2, #0
    baba:	5e9b      	ldrsh	r3, [r3, r2]
    babc:	2b00      	cmp	r3, #0
    babe:	d004      	beq.n	baca <recv+0x166>
			{
				s16Ret = SOCK_ERR_BUFFER_FULL;
    bac0:	231e      	movs	r3, #30
    bac2:	18fb      	adds	r3, r7, r3
    bac4:	220e      	movs	r2, #14
    bac6:	4252      	negs	r2, r2
    bac8:	801a      	strh	r2, [r3, #0]
			}
		}
	}
	return s16Ret;
    baca:	231e      	movs	r3, #30
    bacc:	18fb      	adds	r3, r7, r3
    bace:	2200      	movs	r2, #0
    bad0:	5e9b      	ldrsh	r3, [r3, r2]
}
    bad2:	0018      	movs	r0, r3
    bad4:	46bd      	mov	sp, r7
    bad6:	b009      	add	sp, #36	; 0x24
    bad8:	bd90      	pop	{r4, r7, pc}
    bada:	46c0      	nop			; (mov r8, r8)
    badc:	20002a5c 	.word	0x20002a5c
    bae0:	00006fc1 	.word	0x00006fc1

0000bae4 <close>:

Date
		4 June 2012
*********************************************************************/
sint8 close(SOCKET sock)
{
    bae4:	b5b0      	push	{r4, r5, r7, lr}
    bae6:	b088      	sub	sp, #32
    bae8:	af04      	add	r7, sp, #16
    baea:	0002      	movs	r2, r0
    baec:	1dfb      	adds	r3, r7, #7
    baee:	701a      	strb	r2, [r3, #0]
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
    baf0:	230f      	movs	r3, #15
    baf2:	18fb      	adds	r3, r7, r3
    baf4:	22fa      	movs	r2, #250	; 0xfa
    baf6:	701a      	strb	r2, [r3, #0]
    M2M_INFO("Sock to delete <%d>\n", sock);
    baf8:	4b42      	ldr	r3, [pc, #264]	; (bc04 <close+0x120>)
    bafa:	0018      	movs	r0, r3
    bafc:	4b42      	ldr	r3, [pc, #264]	; (bc08 <close+0x124>)
    bafe:	4798      	blx	r3
    bb00:	1dfb      	adds	r3, r7, #7
    bb02:	2200      	movs	r2, #0
    bb04:	569a      	ldrsb	r2, [r3, r2]
    bb06:	4b41      	ldr	r3, [pc, #260]	; (bc0c <close+0x128>)
    bb08:	0011      	movs	r1, r2
    bb0a:	0018      	movs	r0, r3
    bb0c:	4b3e      	ldr	r3, [pc, #248]	; (bc08 <close+0x124>)
    bb0e:	4798      	blx	r3
    bb10:	200d      	movs	r0, #13
    bb12:	4b3f      	ldr	r3, [pc, #252]	; (bc10 <close+0x12c>)
    bb14:	4798      	blx	r3
	if(sock >= 0 && (gastrSockets[sock].bIsUsed == 1))
    bb16:	1dfb      	adds	r3, r7, #7
    bb18:	781b      	ldrb	r3, [r3, #0]
    bb1a:	2b7f      	cmp	r3, #127	; 0x7f
    bb1c:	d86a      	bhi.n	bbf4 <close+0x110>
    bb1e:	1dfb      	adds	r3, r7, #7
    bb20:	781b      	ldrb	r3, [r3, #0]
    bb22:	b25b      	sxtb	r3, r3
    bb24:	4a3b      	ldr	r2, [pc, #236]	; (bc14 <close+0x130>)
    bb26:	011b      	lsls	r3, r3, #4
    bb28:	18d3      	adds	r3, r2, r3
    bb2a:	330a      	adds	r3, #10
    bb2c:	781b      	ldrb	r3, [r3, #0]
    bb2e:	b2db      	uxtb	r3, r3
    bb30:	2b01      	cmp	r3, #1
    bb32:	d15f      	bne.n	bbf4 <close+0x110>
	{
		uint8	u8Cmd = SOCKET_CMD_CLOSE;
    bb34:	230e      	movs	r3, #14
    bb36:	18fb      	adds	r3, r7, r3
    bb38:	2249      	movs	r2, #73	; 0x49
    bb3a:	701a      	strb	r2, [r3, #0]
		tstrCloseCmd strclose;
		strclose.sock = sock; 
    bb3c:	2308      	movs	r3, #8
    bb3e:	18fb      	adds	r3, r7, r3
    bb40:	1dfa      	adds	r2, r7, #7
    bb42:	7812      	ldrb	r2, [r2, #0]
    bb44:	701a      	strb	r2, [r3, #0]
		strclose.u16SessionID		= gastrSockets[sock].u16SessionID;
    bb46:	1dfb      	adds	r3, r7, #7
    bb48:	781b      	ldrb	r3, [r3, #0]
    bb4a:	b25b      	sxtb	r3, r3
    bb4c:	4a31      	ldr	r2, [pc, #196]	; (bc14 <close+0x130>)
    bb4e:	011b      	lsls	r3, r3, #4
    bb50:	18d3      	adds	r3, r2, r3
    bb52:	3306      	adds	r3, #6
    bb54:	881b      	ldrh	r3, [r3, #0]
    bb56:	b29a      	uxth	r2, r3
    bb58:	2308      	movs	r3, #8
    bb5a:	18fb      	adds	r3, r7, r3
    bb5c:	805a      	strh	r2, [r3, #2]
		
		gastrSockets[sock].bIsUsed = 0;
    bb5e:	1dfb      	adds	r3, r7, #7
    bb60:	781b      	ldrb	r3, [r3, #0]
    bb62:	b25b      	sxtb	r3, r3
    bb64:	4a2b      	ldr	r2, [pc, #172]	; (bc14 <close+0x130>)
    bb66:	011b      	lsls	r3, r3, #4
    bb68:	18d3      	adds	r3, r2, r3
    bb6a:	330a      	adds	r3, #10
    bb6c:	2200      	movs	r2, #0
    bb6e:	701a      	strb	r2, [r3, #0]
		gastrSockets[sock].u16SessionID =0;
    bb70:	1dfb      	adds	r3, r7, #7
    bb72:	781b      	ldrb	r3, [r3, #0]
    bb74:	b25b      	sxtb	r3, r3
    bb76:	4a27      	ldr	r2, [pc, #156]	; (bc14 <close+0x130>)
    bb78:	011b      	lsls	r3, r3, #4
    bb7a:	18d3      	adds	r3, r2, r3
    bb7c:	3306      	adds	r3, #6
    bb7e:	2200      	movs	r2, #0
    bb80:	801a      	strh	r2, [r3, #0]
		
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
    bb82:	1dfb      	adds	r3, r7, #7
    bb84:	781b      	ldrb	r3, [r3, #0]
    bb86:	b25b      	sxtb	r3, r3
    bb88:	4a22      	ldr	r2, [pc, #136]	; (bc14 <close+0x130>)
    bb8a:	011b      	lsls	r3, r3, #4
    bb8c:	18d3      	adds	r3, r2, r3
    bb8e:	330b      	adds	r3, #11
    bb90:	781b      	ldrb	r3, [r3, #0]
    bb92:	b2db      	uxtb	r3, r3
    bb94:	001a      	movs	r2, r3
    bb96:	2301      	movs	r3, #1
    bb98:	4013      	ands	r3, r2
    bb9a:	d003      	beq.n	bba4 <close+0xc0>
		{
			u8Cmd = SOCKET_CMD_SSL_CLOSE;
    bb9c:	230e      	movs	r3, #14
    bb9e:	18fb      	adds	r3, r7, r3
    bba0:	224e      	movs	r2, #78	; 0x4e
    bba2:	701a      	strb	r2, [r3, #0]
		}
		s8Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strclose, sizeof(tstrCloseCmd), NULL,0, 0);
    bba4:	230f      	movs	r3, #15
    bba6:	18fc      	adds	r4, r7, r3
    bba8:	2308      	movs	r3, #8
    bbaa:	18fa      	adds	r2, r7, r3
    bbac:	230e      	movs	r3, #14
    bbae:	18fb      	adds	r3, r7, r3
    bbb0:	7819      	ldrb	r1, [r3, #0]
    bbb2:	2300      	movs	r3, #0
    bbb4:	9302      	str	r3, [sp, #8]
    bbb6:	2300      	movs	r3, #0
    bbb8:	9301      	str	r3, [sp, #4]
    bbba:	2300      	movs	r3, #0
    bbbc:	9300      	str	r3, [sp, #0]
    bbbe:	2304      	movs	r3, #4
    bbc0:	2002      	movs	r0, #2
    bbc2:	4d15      	ldr	r5, [pc, #84]	; (bc18 <close+0x134>)
    bbc4:	47a8      	blx	r5
    bbc6:	0003      	movs	r3, r0
    bbc8:	7023      	strb	r3, [r4, #0]
		if(s8Ret != SOCK_ERR_NO_ERROR)
    bbca:	230f      	movs	r3, #15
    bbcc:	18fb      	adds	r3, r7, r3
    bbce:	781b      	ldrb	r3, [r3, #0]
    bbd0:	b25b      	sxtb	r3, r3
    bbd2:	2b00      	cmp	r3, #0
    bbd4:	d003      	beq.n	bbde <close+0xfa>
		{
			s8Ret = SOCK_ERR_INVALID;
    bbd6:	230f      	movs	r3, #15
    bbd8:	18fb      	adds	r3, r7, r3
    bbda:	22f7      	movs	r2, #247	; 0xf7
    bbdc:	701a      	strb	r2, [r3, #0]
		}
		m2m_memset((uint8*)&gastrSockets[sock], 0, sizeof(tstrSocket));
    bbde:	1dfb      	adds	r3, r7, #7
    bbe0:	781b      	ldrb	r3, [r3, #0]
    bbe2:	b25b      	sxtb	r3, r3
    bbe4:	011a      	lsls	r2, r3, #4
    bbe6:	4b0b      	ldr	r3, [pc, #44]	; (bc14 <close+0x130>)
    bbe8:	18d3      	adds	r3, r2, r3
    bbea:	2210      	movs	r2, #16
    bbec:	2100      	movs	r1, #0
    bbee:	0018      	movs	r0, r3
    bbf0:	4b0a      	ldr	r3, [pc, #40]	; (bc1c <close+0x138>)
    bbf2:	4798      	blx	r3
	}
	return s8Ret;
    bbf4:	230f      	movs	r3, #15
    bbf6:	18fb      	adds	r3, r7, r3
    bbf8:	781b      	ldrb	r3, [r3, #0]
    bbfa:	b25b      	sxtb	r3, r3
}
    bbfc:	0018      	movs	r0, r3
    bbfe:	46bd      	mov	sp, r7
    bc00:	b004      	add	sp, #16
    bc02:	bdb0      	pop	{r4, r5, r7, pc}
    bc04:	00020940 	.word	0x00020940
    bc08:	0001c2d5 	.word	0x0001c2d5
    bc0c:	0002097c 	.word	0x0002097c
    bc10:	0001c309 	.word	0x0001c309
    bc14:	20002a5c 	.word	0x20002a5c
    bc18:	00006fc1 	.word	0x00006fc1
    bc1c:	00006d61 	.word	0x00006d61

0000bc20 <gethostbyname>:

Date
		4 June 2012
*********************************************************************/
sint8 gethostbyname(uint8 * pcHostName)
{
    bc20:	b5b0      	push	{r4, r5, r7, lr}
    bc22:	b088      	sub	sp, #32
    bc24:	af04      	add	r7, sp, #16
    bc26:	6078      	str	r0, [r7, #4]
	sint8	s8Err = SOCK_ERR_INVALID_ARG;
    bc28:	230f      	movs	r3, #15
    bc2a:	18fb      	adds	r3, r7, r3
    bc2c:	22fa      	movs	r2, #250	; 0xfa
    bc2e:	701a      	strb	r2, [r3, #0]
	uint8	u8HostNameSize = (uint8)m2m_strlen(pcHostName);
    bc30:	687b      	ldr	r3, [r7, #4]
    bc32:	0018      	movs	r0, r3
    bc34:	4b14      	ldr	r3, [pc, #80]	; (bc88 <gethostbyname+0x68>)
    bc36:	4798      	blx	r3
    bc38:	0003      	movs	r3, r0
    bc3a:	001a      	movs	r2, r3
    bc3c:	230e      	movs	r3, #14
    bc3e:	18fb      	adds	r3, r7, r3
    bc40:	701a      	strb	r2, [r3, #0]
	if(u8HostNameSize <= HOSTNAME_MAX_SIZE)
    bc42:	230e      	movs	r3, #14
    bc44:	18fb      	adds	r3, r7, r3
    bc46:	781b      	ldrb	r3, [r3, #0]
    bc48:	2b40      	cmp	r3, #64	; 0x40
    bc4a:	d815      	bhi.n	bc78 <gethostbyname+0x58>
	{
		s8Err = SOCKET_REQUEST(SOCKET_CMD_DNS_RESOLVE, (uint8*)pcHostName, u8HostNameSize + 1, NULL,0, 0);
    bc4c:	230e      	movs	r3, #14
    bc4e:	18fb      	adds	r3, r7, r3
    bc50:	781b      	ldrb	r3, [r3, #0]
    bc52:	b29b      	uxth	r3, r3
    bc54:	3301      	adds	r3, #1
    bc56:	b299      	uxth	r1, r3
    bc58:	230f      	movs	r3, #15
    bc5a:	18fc      	adds	r4, r7, r3
    bc5c:	687a      	ldr	r2, [r7, #4]
    bc5e:	2300      	movs	r3, #0
    bc60:	9302      	str	r3, [sp, #8]
    bc62:	2300      	movs	r3, #0
    bc64:	9301      	str	r3, [sp, #4]
    bc66:	2300      	movs	r3, #0
    bc68:	9300      	str	r3, [sp, #0]
    bc6a:	000b      	movs	r3, r1
    bc6c:	214a      	movs	r1, #74	; 0x4a
    bc6e:	2002      	movs	r0, #2
    bc70:	4d06      	ldr	r5, [pc, #24]	; (bc8c <gethostbyname+0x6c>)
    bc72:	47a8      	blx	r5
    bc74:	0003      	movs	r3, r0
    bc76:	7023      	strb	r3, [r4, #0]
	}
	return s8Err;
    bc78:	230f      	movs	r3, #15
    bc7a:	18fb      	adds	r3, r7, r3
    bc7c:	781b      	ldrb	r3, [r3, #0]
    bc7e:	b25b      	sxtb	r3, r3
}
    bc80:	0018      	movs	r0, r3
    bc82:	46bd      	mov	sp, r7
    bc84:	b004      	add	sp, #16
    bc86:	bdb0      	pop	{r4, r5, r7, pc}
    bc88:	00006d9f 	.word	0x00006d9f
    bc8c:	00006fc1 	.word	0x00006fc1

0000bc90 <sslSetSockOpt>:

Date
		9 September 2014
*********************************************************************/
static sint8 sslSetSockOpt(SOCKET sock, uint8  u8Opt, const void *pvOptVal, uint16 u16OptLen)
{
    bc90:	b5b0      	push	{r4, r5, r7, lr}
    bc92:	b09e      	sub	sp, #120	; 0x78
    bc94:	af04      	add	r7, sp, #16
    bc96:	0004      	movs	r4, r0
    bc98:	0008      	movs	r0, r1
    bc9a:	603a      	str	r2, [r7, #0]
    bc9c:	0019      	movs	r1, r3
    bc9e:	1dfb      	adds	r3, r7, #7
    bca0:	1c22      	adds	r2, r4, #0
    bca2:	701a      	strb	r2, [r3, #0]
    bca4:	1dbb      	adds	r3, r7, #6
    bca6:	1c02      	adds	r2, r0, #0
    bca8:	701a      	strb	r2, [r3, #0]
    bcaa:	1d3b      	adds	r3, r7, #4
    bcac:	1c0a      	adds	r2, r1, #0
    bcae:	801a      	strh	r2, [r3, #0]
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
    bcb0:	2367      	movs	r3, #103	; 0x67
    bcb2:	18fb      	adds	r3, r7, r3
    bcb4:	22fa      	movs	r2, #250	; 0xfa
    bcb6:	701a      	strb	r2, [r3, #0]
	if(sock < TCP_SOCK_MAX)
    bcb8:	1dfb      	adds	r3, r7, #7
    bcba:	781b      	ldrb	r3, [r3, #0]
    bcbc:	b25b      	sxtb	r3, r3
    bcbe:	2b06      	cmp	r3, #6
    bcc0:	dd00      	ble.n	bcc4 <sslSetSockOpt+0x34>
    bcc2:	e13a      	b.n	bf3a <sslSetSockOpt+0x2aa>
	{
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
    bcc4:	1dfb      	adds	r3, r7, #7
    bcc6:	781b      	ldrb	r3, [r3, #0]
    bcc8:	b25b      	sxtb	r3, r3
    bcca:	4aa0      	ldr	r2, [pc, #640]	; (bf4c <sslSetSockOpt+0x2bc>)
    bccc:	011b      	lsls	r3, r3, #4
    bcce:	18d3      	adds	r3, r2, r3
    bcd0:	330b      	adds	r3, #11
    bcd2:	781b      	ldrb	r3, [r3, #0]
    bcd4:	b2db      	uxtb	r3, r3
    bcd6:	001a      	movs	r2, r3
    bcd8:	2301      	movs	r3, #1
    bcda:	4013      	ands	r3, r2
    bcdc:	d100      	bne.n	bce0 <sslSetSockOpt+0x50>
    bcde:	e11f      	b.n	bf20 <sslSetSockOpt+0x290>
		{
			if(u8Opt == SO_SSL_BYPASS_X509_VERIF)
    bce0:	1dbb      	adds	r3, r7, #6
    bce2:	781b      	ldrb	r3, [r3, #0]
    bce4:	2b01      	cmp	r3, #1
    bce6:	d135      	bne.n	bd54 <sslSetSockOpt+0xc4>
			{
				int	optVal = *((int*)pvOptVal);
    bce8:	683b      	ldr	r3, [r7, #0]
    bcea:	681b      	ldr	r3, [r3, #0]
    bcec:	663b      	str	r3, [r7, #96]	; 0x60
				if(optVal)
    bcee:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    bcf0:	2b00      	cmp	r3, #0
    bcf2:	d015      	beq.n	bd20 <sslSetSockOpt+0x90>
				{
					gastrSockets[sock].u8SSLFlags |= SSL_FLAGS_BYPASS_X509;
    bcf4:	1dfb      	adds	r3, r7, #7
    bcf6:	781b      	ldrb	r3, [r3, #0]
    bcf8:	b25b      	sxtb	r3, r3
    bcfa:	1dfa      	adds	r2, r7, #7
    bcfc:	7812      	ldrb	r2, [r2, #0]
    bcfe:	b252      	sxtb	r2, r2
    bd00:	4992      	ldr	r1, [pc, #584]	; (bf4c <sslSetSockOpt+0x2bc>)
    bd02:	0112      	lsls	r2, r2, #4
    bd04:	188a      	adds	r2, r1, r2
    bd06:	320b      	adds	r2, #11
    bd08:	7812      	ldrb	r2, [r2, #0]
    bd0a:	b2d2      	uxtb	r2, r2
    bd0c:	2102      	movs	r1, #2
    bd0e:	430a      	orrs	r2, r1
    bd10:	b2d1      	uxtb	r1, r2
    bd12:	4a8e      	ldr	r2, [pc, #568]	; (bf4c <sslSetSockOpt+0x2bc>)
    bd14:	011b      	lsls	r3, r3, #4
    bd16:	18d3      	adds	r3, r2, r3
    bd18:	330b      	adds	r3, #11
    bd1a:	1c0a      	adds	r2, r1, #0
    bd1c:	701a      	strb	r2, [r3, #0]
    bd1e:	e014      	b.n	bd4a <sslSetSockOpt+0xba>
				}
				else
				{
					gastrSockets[sock].u8SSLFlags &= ~SSL_FLAGS_BYPASS_X509;
    bd20:	1dfb      	adds	r3, r7, #7
    bd22:	781b      	ldrb	r3, [r3, #0]
    bd24:	b25b      	sxtb	r3, r3
    bd26:	1dfa      	adds	r2, r7, #7
    bd28:	7812      	ldrb	r2, [r2, #0]
    bd2a:	b252      	sxtb	r2, r2
    bd2c:	4987      	ldr	r1, [pc, #540]	; (bf4c <sslSetSockOpt+0x2bc>)
    bd2e:	0112      	lsls	r2, r2, #4
    bd30:	188a      	adds	r2, r1, r2
    bd32:	320b      	adds	r2, #11
    bd34:	7812      	ldrb	r2, [r2, #0]
    bd36:	b2d2      	uxtb	r2, r2
    bd38:	2102      	movs	r1, #2
    bd3a:	438a      	bics	r2, r1
    bd3c:	b2d1      	uxtb	r1, r2
    bd3e:	4a83      	ldr	r2, [pc, #524]	; (bf4c <sslSetSockOpt+0x2bc>)
    bd40:	011b      	lsls	r3, r3, #4
    bd42:	18d3      	adds	r3, r2, r3
    bd44:	330b      	adds	r3, #11
    bd46:	1c0a      	adds	r2, r1, #0
    bd48:	701a      	strb	r2, [r3, #0]
				}
				s8Ret = SOCK_ERR_NO_ERROR;
    bd4a:	2367      	movs	r3, #103	; 0x67
    bd4c:	18fb      	adds	r3, r7, r3
    bd4e:	2200      	movs	r2, #0
    bd50:	701a      	strb	r2, [r3, #0]
    bd52:	e0f2      	b.n	bf3a <sslSetSockOpt+0x2aa>
			}
			else if(u8Opt == SO_SSL_ENABLE_SESSION_CACHING)
    bd54:	1dbb      	adds	r3, r7, #6
    bd56:	781b      	ldrb	r3, [r3, #0]
    bd58:	2b03      	cmp	r3, #3
    bd5a:	d135      	bne.n	bdc8 <sslSetSockOpt+0x138>
			{
				int	optVal = *((int*)pvOptVal);
    bd5c:	683b      	ldr	r3, [r7, #0]
    bd5e:	681b      	ldr	r3, [r3, #0]
    bd60:	65fb      	str	r3, [r7, #92]	; 0x5c
				if(optVal)
    bd62:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    bd64:	2b00      	cmp	r3, #0
    bd66:	d015      	beq.n	bd94 <sslSetSockOpt+0x104>
				{
					gastrSockets[sock].u8SSLFlags |= SSL_FLAGS_CACHE_SESSION;
    bd68:	1dfb      	adds	r3, r7, #7
    bd6a:	781b      	ldrb	r3, [r3, #0]
    bd6c:	b25b      	sxtb	r3, r3
    bd6e:	1dfa      	adds	r2, r7, #7
    bd70:	7812      	ldrb	r2, [r2, #0]
    bd72:	b252      	sxtb	r2, r2
    bd74:	4975      	ldr	r1, [pc, #468]	; (bf4c <sslSetSockOpt+0x2bc>)
    bd76:	0112      	lsls	r2, r2, #4
    bd78:	188a      	adds	r2, r1, r2
    bd7a:	320b      	adds	r2, #11
    bd7c:	7812      	ldrb	r2, [r2, #0]
    bd7e:	b2d2      	uxtb	r2, r2
    bd80:	2110      	movs	r1, #16
    bd82:	430a      	orrs	r2, r1
    bd84:	b2d1      	uxtb	r1, r2
    bd86:	4a71      	ldr	r2, [pc, #452]	; (bf4c <sslSetSockOpt+0x2bc>)
    bd88:	011b      	lsls	r3, r3, #4
    bd8a:	18d3      	adds	r3, r2, r3
    bd8c:	330b      	adds	r3, #11
    bd8e:	1c0a      	adds	r2, r1, #0
    bd90:	701a      	strb	r2, [r3, #0]
    bd92:	e014      	b.n	bdbe <sslSetSockOpt+0x12e>
				}
				else
				{
					gastrSockets[sock].u8SSLFlags &= ~SSL_FLAGS_CACHE_SESSION;
    bd94:	1dfb      	adds	r3, r7, #7
    bd96:	781b      	ldrb	r3, [r3, #0]
    bd98:	b25b      	sxtb	r3, r3
    bd9a:	1dfa      	adds	r2, r7, #7
    bd9c:	7812      	ldrb	r2, [r2, #0]
    bd9e:	b252      	sxtb	r2, r2
    bda0:	496a      	ldr	r1, [pc, #424]	; (bf4c <sslSetSockOpt+0x2bc>)
    bda2:	0112      	lsls	r2, r2, #4
    bda4:	188a      	adds	r2, r1, r2
    bda6:	320b      	adds	r2, #11
    bda8:	7812      	ldrb	r2, [r2, #0]
    bdaa:	b2d2      	uxtb	r2, r2
    bdac:	2110      	movs	r1, #16
    bdae:	438a      	bics	r2, r1
    bdb0:	b2d1      	uxtb	r1, r2
    bdb2:	4a66      	ldr	r2, [pc, #408]	; (bf4c <sslSetSockOpt+0x2bc>)
    bdb4:	011b      	lsls	r3, r3, #4
    bdb6:	18d3      	adds	r3, r2, r3
    bdb8:	330b      	adds	r3, #11
    bdba:	1c0a      	adds	r2, r1, #0
    bdbc:	701a      	strb	r2, [r3, #0]
				}
				s8Ret = SOCK_ERR_NO_ERROR;
    bdbe:	2367      	movs	r3, #103	; 0x67
    bdc0:	18fb      	adds	r3, r7, r3
    bdc2:	2200      	movs	r2, #0
    bdc4:	701a      	strb	r2, [r3, #0]
    bdc6:	e0b8      	b.n	bf3a <sslSetSockOpt+0x2aa>
			}
			else if(u8Opt == SO_SSL_ENABLE_SNI_VALIDATION)
    bdc8:	1dbb      	adds	r3, r7, #6
    bdca:	781b      	ldrb	r3, [r3, #0]
    bdcc:	2b04      	cmp	r3, #4
    bdce:	d135      	bne.n	be3c <sslSetSockOpt+0x1ac>
			{
				int	optVal = *((int*)pvOptVal);
    bdd0:	683b      	ldr	r3, [r7, #0]
    bdd2:	681b      	ldr	r3, [r3, #0]
    bdd4:	65bb      	str	r3, [r7, #88]	; 0x58
				if(optVal)
    bdd6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    bdd8:	2b00      	cmp	r3, #0
    bdda:	d015      	beq.n	be08 <sslSetSockOpt+0x178>
				{
					gastrSockets[sock].u8SSLFlags |= SSL_FLAGS_CHECK_SNI;
    bddc:	1dfb      	adds	r3, r7, #7
    bdde:	781b      	ldrb	r3, [r3, #0]
    bde0:	b25b      	sxtb	r3, r3
    bde2:	1dfa      	adds	r2, r7, #7
    bde4:	7812      	ldrb	r2, [r2, #0]
    bde6:	b252      	sxtb	r2, r2
    bde8:	4958      	ldr	r1, [pc, #352]	; (bf4c <sslSetSockOpt+0x2bc>)
    bdea:	0112      	lsls	r2, r2, #4
    bdec:	188a      	adds	r2, r1, r2
    bdee:	320b      	adds	r2, #11
    bdf0:	7812      	ldrb	r2, [r2, #0]
    bdf2:	b2d2      	uxtb	r2, r2
    bdf4:	2140      	movs	r1, #64	; 0x40
    bdf6:	430a      	orrs	r2, r1
    bdf8:	b2d1      	uxtb	r1, r2
    bdfa:	4a54      	ldr	r2, [pc, #336]	; (bf4c <sslSetSockOpt+0x2bc>)
    bdfc:	011b      	lsls	r3, r3, #4
    bdfe:	18d3      	adds	r3, r2, r3
    be00:	330b      	adds	r3, #11
    be02:	1c0a      	adds	r2, r1, #0
    be04:	701a      	strb	r2, [r3, #0]
    be06:	e014      	b.n	be32 <sslSetSockOpt+0x1a2>
				}
				else
				{
					gastrSockets[sock].u8SSLFlags &= ~SSL_FLAGS_CHECK_SNI;
    be08:	1dfb      	adds	r3, r7, #7
    be0a:	781b      	ldrb	r3, [r3, #0]
    be0c:	b25b      	sxtb	r3, r3
    be0e:	1dfa      	adds	r2, r7, #7
    be10:	7812      	ldrb	r2, [r2, #0]
    be12:	b252      	sxtb	r2, r2
    be14:	494d      	ldr	r1, [pc, #308]	; (bf4c <sslSetSockOpt+0x2bc>)
    be16:	0112      	lsls	r2, r2, #4
    be18:	188a      	adds	r2, r1, r2
    be1a:	320b      	adds	r2, #11
    be1c:	7812      	ldrb	r2, [r2, #0]
    be1e:	b2d2      	uxtb	r2, r2
    be20:	2140      	movs	r1, #64	; 0x40
    be22:	438a      	bics	r2, r1
    be24:	b2d1      	uxtb	r1, r2
    be26:	4a49      	ldr	r2, [pc, #292]	; (bf4c <sslSetSockOpt+0x2bc>)
    be28:	011b      	lsls	r3, r3, #4
    be2a:	18d3      	adds	r3, r2, r3
    be2c:	330b      	adds	r3, #11
    be2e:	1c0a      	adds	r2, r1, #0
    be30:	701a      	strb	r2, [r3, #0]
				}
				s8Ret = SOCK_ERR_NO_ERROR;
    be32:	2367      	movs	r3, #103	; 0x67
    be34:	18fb      	adds	r3, r7, r3
    be36:	2200      	movs	r2, #0
    be38:	701a      	strb	r2, [r3, #0]
    be3a:	e07e      	b.n	bf3a <sslSetSockOpt+0x2aa>
			}
			else if(u8Opt == SO_SSL_SNI)
    be3c:	1dbb      	adds	r3, r7, #6
    be3e:	781b      	ldrb	r3, [r3, #0]
    be40:	2b02      	cmp	r3, #2
    be42:	d15c      	bne.n	befe <sslSetSockOpt+0x26e>
			{
				if(u16OptLen < HOSTNAME_MAX_SIZE)
    be44:	1d3b      	adds	r3, r7, #4
    be46:	881b      	ldrh	r3, [r3, #0]
    be48:	2b3f      	cmp	r3, #63	; 0x3f
    be4a:	d84a      	bhi.n	bee2 <sslSetSockOpt+0x252>
				{
					uint8					*pu8SNI = (uint8*)pvOptVal;
    be4c:	683b      	ldr	r3, [r7, #0]
    be4e:	657b      	str	r3, [r7, #84]	; 0x54
					tstrSSLSetSockOptCmd	strCmd;

					strCmd.sock			= sock;
    be50:	230c      	movs	r3, #12
    be52:	18fb      	adds	r3, r7, r3
    be54:	1dfa      	adds	r2, r7, #7
    be56:	7812      	ldrb	r2, [r2, #0]
    be58:	701a      	strb	r2, [r3, #0]
					strCmd.u16SessionID	= gastrSockets[sock].u16SessionID;
    be5a:	1dfb      	adds	r3, r7, #7
    be5c:	781b      	ldrb	r3, [r3, #0]
    be5e:	b25b      	sxtb	r3, r3
    be60:	4a3a      	ldr	r2, [pc, #232]	; (bf4c <sslSetSockOpt+0x2bc>)
    be62:	011b      	lsls	r3, r3, #4
    be64:	18d3      	adds	r3, r2, r3
    be66:	3306      	adds	r3, #6
    be68:	881b      	ldrh	r3, [r3, #0]
    be6a:	b29a      	uxth	r2, r3
    be6c:	230c      	movs	r3, #12
    be6e:	18fb      	adds	r3, r7, r3
    be70:	805a      	strh	r2, [r3, #2]
					strCmd.u8Option		= u8Opt;
    be72:	230c      	movs	r3, #12
    be74:	18fb      	adds	r3, r7, r3
    be76:	1dba      	adds	r2, r7, #6
    be78:	7812      	ldrb	r2, [r2, #0]
    be7a:	705a      	strb	r2, [r3, #1]
					strCmd.u32OptLen	= u16OptLen;
    be7c:	1d3b      	adds	r3, r7, #4
    be7e:	881a      	ldrh	r2, [r3, #0]
    be80:	230c      	movs	r3, #12
    be82:	18fb      	adds	r3, r7, r3
    be84:	605a      	str	r2, [r3, #4]
					m2m_memcpy(strCmd.au8OptVal, pu8SNI, HOSTNAME_MAX_SIZE);
    be86:	6d79      	ldr	r1, [r7, #84]	; 0x54
    be88:	230c      	movs	r3, #12
    be8a:	18fb      	adds	r3, r7, r3
    be8c:	3308      	adds	r3, #8
    be8e:	2240      	movs	r2, #64	; 0x40
    be90:	0018      	movs	r0, r3
    be92:	4b2f      	ldr	r3, [pc, #188]	; (bf50 <sslSetSockOpt+0x2c0>)
    be94:	4798      	blx	r3
					
					if(SOCKET_REQUEST(SOCKET_CMD_SSL_SET_SOCK_OPT, (uint8*)&strCmd, sizeof(tstrSSLSetSockOptCmd),
    be96:	230c      	movs	r3, #12
    be98:	18fa      	adds	r2, r7, r3
    be9a:	2300      	movs	r3, #0
    be9c:	9302      	str	r3, [sp, #8]
    be9e:	2300      	movs	r3, #0
    bea0:	9301      	str	r3, [sp, #4]
    bea2:	2300      	movs	r3, #0
    bea4:	9300      	str	r3, [sp, #0]
    bea6:	2348      	movs	r3, #72	; 0x48
    bea8:	2151      	movs	r1, #81	; 0x51
    beaa:	2002      	movs	r0, #2
    beac:	4c29      	ldr	r4, [pc, #164]	; (bf54 <sslSetSockOpt+0x2c4>)
    beae:	47a0      	blx	r4
    beb0:	0003      	movs	r3, r0
    beb2:	3303      	adds	r3, #3
    beb4:	d110      	bne.n	bed8 <sslSetSockOpt+0x248>
						0, 0, 0) == M2M_ERR_MEM_ALLOC)
					{
						s8Ret = SOCKET_REQUEST(SOCKET_CMD_SSL_SET_SOCK_OPT | M2M_REQ_DATA_PKT, 
    beb6:	2367      	movs	r3, #103	; 0x67
    beb8:	18fc      	adds	r4, r7, r3
    beba:	230c      	movs	r3, #12
    bebc:	18fa      	adds	r2, r7, r3
    bebe:	2300      	movs	r3, #0
    bec0:	9302      	str	r3, [sp, #8]
    bec2:	2300      	movs	r3, #0
    bec4:	9301      	str	r3, [sp, #4]
    bec6:	2300      	movs	r3, #0
    bec8:	9300      	str	r3, [sp, #0]
    beca:	2348      	movs	r3, #72	; 0x48
    becc:	21d1      	movs	r1, #209	; 0xd1
    bece:	2002      	movs	r0, #2
    bed0:	4d20      	ldr	r5, [pc, #128]	; (bf54 <sslSetSockOpt+0x2c4>)
    bed2:	47a8      	blx	r5
    bed4:	0003      	movs	r3, r0
    bed6:	7023      	strb	r3, [r4, #0]
							(uint8*)&strCmd, sizeof(tstrSSLSetSockOptCmd), 0, 0, 0);
					}
					s8Ret = SOCK_ERR_NO_ERROR;
    bed8:	2367      	movs	r3, #103	; 0x67
    beda:	18fb      	adds	r3, r7, r3
    bedc:	2200      	movs	r2, #0
    bede:	701a      	strb	r2, [r3, #0]
    bee0:	e02b      	b.n	bf3a <sslSetSockOpt+0x2aa>
				}
				else
				{
					M2M_ERR("SNI Exceeds Max Length\n");
    bee2:	4a1d      	ldr	r2, [pc, #116]	; (bf58 <sslSetSockOpt+0x2c8>)
    bee4:	491d      	ldr	r1, [pc, #116]	; (bf5c <sslSetSockOpt+0x2cc>)
    bee6:	4b1e      	ldr	r3, [pc, #120]	; (bf60 <sslSetSockOpt+0x2d0>)
    bee8:	0018      	movs	r0, r3
    beea:	4b1e      	ldr	r3, [pc, #120]	; (bf64 <sslSetSockOpt+0x2d4>)
    beec:	4798      	blx	r3
    beee:	4b1e      	ldr	r3, [pc, #120]	; (bf68 <sslSetSockOpt+0x2d8>)
    bef0:	0018      	movs	r0, r3
    bef2:	4b1e      	ldr	r3, [pc, #120]	; (bf6c <sslSetSockOpt+0x2dc>)
    bef4:	4798      	blx	r3
    bef6:	200d      	movs	r0, #13
    bef8:	4b1d      	ldr	r3, [pc, #116]	; (bf70 <sslSetSockOpt+0x2e0>)
    befa:	4798      	blx	r3
    befc:	e01d      	b.n	bf3a <sslSetSockOpt+0x2aa>
				}
			}
			else
			{
				M2M_ERR("Unknown SSL Socket Option %d\n",u8Opt);
    befe:	4a1d      	ldr	r2, [pc, #116]	; (bf74 <sslSetSockOpt+0x2e4>)
    bf00:	4916      	ldr	r1, [pc, #88]	; (bf5c <sslSetSockOpt+0x2cc>)
    bf02:	4b17      	ldr	r3, [pc, #92]	; (bf60 <sslSetSockOpt+0x2d0>)
    bf04:	0018      	movs	r0, r3
    bf06:	4b17      	ldr	r3, [pc, #92]	; (bf64 <sslSetSockOpt+0x2d4>)
    bf08:	4798      	blx	r3
    bf0a:	1dbb      	adds	r3, r7, #6
    bf0c:	781a      	ldrb	r2, [r3, #0]
    bf0e:	4b1a      	ldr	r3, [pc, #104]	; (bf78 <sslSetSockOpt+0x2e8>)
    bf10:	0011      	movs	r1, r2
    bf12:	0018      	movs	r0, r3
    bf14:	4b13      	ldr	r3, [pc, #76]	; (bf64 <sslSetSockOpt+0x2d4>)
    bf16:	4798      	blx	r3
    bf18:	200d      	movs	r0, #13
    bf1a:	4b15      	ldr	r3, [pc, #84]	; (bf70 <sslSetSockOpt+0x2e0>)
    bf1c:	4798      	blx	r3
    bf1e:	e00c      	b.n	bf3a <sslSetSockOpt+0x2aa>
			}
		}
		else
		{
			M2M_ERR("Not SSL Socket\n");
    bf20:	4a16      	ldr	r2, [pc, #88]	; (bf7c <sslSetSockOpt+0x2ec>)
    bf22:	490e      	ldr	r1, [pc, #56]	; (bf5c <sslSetSockOpt+0x2cc>)
    bf24:	4b0e      	ldr	r3, [pc, #56]	; (bf60 <sslSetSockOpt+0x2d0>)
    bf26:	0018      	movs	r0, r3
    bf28:	4b0e      	ldr	r3, [pc, #56]	; (bf64 <sslSetSockOpt+0x2d4>)
    bf2a:	4798      	blx	r3
    bf2c:	4b14      	ldr	r3, [pc, #80]	; (bf80 <sslSetSockOpt+0x2f0>)
    bf2e:	0018      	movs	r0, r3
    bf30:	4b0e      	ldr	r3, [pc, #56]	; (bf6c <sslSetSockOpt+0x2dc>)
    bf32:	4798      	blx	r3
    bf34:	200d      	movs	r0, #13
    bf36:	4b0e      	ldr	r3, [pc, #56]	; (bf70 <sslSetSockOpt+0x2e0>)
    bf38:	4798      	blx	r3
		}
	}
	return s8Ret;
    bf3a:	2367      	movs	r3, #103	; 0x67
    bf3c:	18fb      	adds	r3, r7, r3
    bf3e:	781b      	ldrb	r3, [r3, #0]
    bf40:	b25b      	sxtb	r3, r3
}
    bf42:	0018      	movs	r0, r3
    bf44:	46bd      	mov	sp, r7
    bf46:	b01a      	add	sp, #104	; 0x68
    bf48:	bdb0      	pop	{r4, r5, r7, pc}
    bf4a:	46c0      	nop			; (mov r8, r8)
    bf4c:	20002a5c 	.word	0x20002a5c
    bf50:	00006d25 	.word	0x00006d25
    bf54:	00006fc1 	.word	0x00006fc1
    bf58:	0000048f 	.word	0x0000048f
    bf5c:	000209f0 	.word	0x000209f0
    bf60:	00020994 	.word	0x00020994
    bf64:	0001c2d5 	.word	0x0001c2d5
    bf68:	000209a8 	.word	0x000209a8
    bf6c:	0001c3f1 	.word	0x0001c3f1
    bf70:	0001c309 	.word	0x0001c309
    bf74:	00000494 	.word	0x00000494
    bf78:	000209c0 	.word	0x000209c0
    bf7c:	00000499 	.word	0x00000499
    bf80:	000209e0 	.word	0x000209e0

0000bf84 <setsockopt>:
Date
		9 September 2014
*********************************************************************/
sint8 setsockopt(SOCKET sock, uint8  u8Level, uint8  option_name,
       const void *option_value, uint16 u16OptionLen)
{
    bf84:	b5b0      	push	{r4, r5, r7, lr}
    bf86:	b08a      	sub	sp, #40	; 0x28
    bf88:	af04      	add	r7, sp, #16
    bf8a:	0004      	movs	r4, r0
    bf8c:	0008      	movs	r0, r1
    bf8e:	0011      	movs	r1, r2
    bf90:	603b      	str	r3, [r7, #0]
    bf92:	1dfb      	adds	r3, r7, #7
    bf94:	1c22      	adds	r2, r4, #0
    bf96:	701a      	strb	r2, [r3, #0]
    bf98:	1dbb      	adds	r3, r7, #6
    bf9a:	1c02      	adds	r2, r0, #0
    bf9c:	701a      	strb	r2, [r3, #0]
    bf9e:	1d7b      	adds	r3, r7, #5
    bfa0:	1c0a      	adds	r2, r1, #0
    bfa2:	701a      	strb	r2, [r3, #0]
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
    bfa4:	2317      	movs	r3, #23
    bfa6:	18fb      	adds	r3, r7, r3
    bfa8:	22fa      	movs	r2, #250	; 0xfa
    bfaa:	701a      	strb	r2, [r3, #0]
	if((sock >= 0)  && (option_value != NULL)  && (gastrSockets[sock].bIsUsed == 1))
    bfac:	1dfb      	adds	r3, r7, #7
    bfae:	781b      	ldrb	r3, [r3, #0]
    bfb0:	2b7f      	cmp	r3, #127	; 0x7f
    bfb2:	d85e      	bhi.n	c072 <setsockopt+0xee>
    bfb4:	683b      	ldr	r3, [r7, #0]
    bfb6:	2b00      	cmp	r3, #0
    bfb8:	d05b      	beq.n	c072 <setsockopt+0xee>
    bfba:	1dfb      	adds	r3, r7, #7
    bfbc:	781b      	ldrb	r3, [r3, #0]
    bfbe:	b25b      	sxtb	r3, r3
    bfc0:	4a30      	ldr	r2, [pc, #192]	; (c084 <setsockopt+0x100>)
    bfc2:	011b      	lsls	r3, r3, #4
    bfc4:	18d3      	adds	r3, r2, r3
    bfc6:	330a      	adds	r3, #10
    bfc8:	781b      	ldrb	r3, [r3, #0]
    bfca:	b2db      	uxtb	r3, r3
    bfcc:	2b01      	cmp	r3, #1
    bfce:	d150      	bne.n	c072 <setsockopt+0xee>
	{
		if(u8Level == SOL_SSL_SOCKET)
    bfd0:	1dbb      	adds	r3, r7, #6
    bfd2:	781b      	ldrb	r3, [r3, #0]
    bfd4:	2b02      	cmp	r3, #2
    bfd6:	d110      	bne.n	bffa <setsockopt+0x76>
		{
			s8Ret = sslSetSockOpt(sock, option_name, option_value, u16OptionLen);
    bfd8:	2317      	movs	r3, #23
    bfda:	18fc      	adds	r4, r7, r3
    bfdc:	2328      	movs	r3, #40	; 0x28
    bfde:	18fb      	adds	r3, r7, r3
    bfe0:	881d      	ldrh	r5, [r3, #0]
    bfe2:	683a      	ldr	r2, [r7, #0]
    bfe4:	1d7b      	adds	r3, r7, #5
    bfe6:	7819      	ldrb	r1, [r3, #0]
    bfe8:	1dfb      	adds	r3, r7, #7
    bfea:	2000      	movs	r0, #0
    bfec:	5618      	ldrsb	r0, [r3, r0]
    bfee:	002b      	movs	r3, r5
    bff0:	4d25      	ldr	r5, [pc, #148]	; (c088 <setsockopt+0x104>)
    bff2:	47a8      	blx	r5
    bff4:	0003      	movs	r3, r0
    bff6:	7023      	strb	r3, [r4, #0]
    bff8:	e03b      	b.n	c072 <setsockopt+0xee>
		}
		else
		{
			uint8	u8Cmd = SOCKET_CMD_SET_SOCKET_OPTION;
    bffa:	2316      	movs	r3, #22
    bffc:	18fb      	adds	r3, r7, r3
    bffe:	224f      	movs	r2, #79	; 0x4f
    c000:	701a      	strb	r2, [r3, #0]
			tstrSetSocketOptCmd strSetSockOpt;
			strSetSockOpt.u8Option=option_name;
    c002:	230c      	movs	r3, #12
    c004:	18fb      	adds	r3, r7, r3
    c006:	1d7a      	adds	r2, r7, #5
    c008:	7812      	ldrb	r2, [r2, #0]
    c00a:	715a      	strb	r2, [r3, #5]
			strSetSockOpt.sock = sock; 
    c00c:	230c      	movs	r3, #12
    c00e:	18fb      	adds	r3, r7, r3
    c010:	1dfa      	adds	r2, r7, #7
    c012:	7812      	ldrb	r2, [r2, #0]
    c014:	711a      	strb	r2, [r3, #4]
			strSetSockOpt.u32OptionValue = *(uint32*)option_value;
    c016:	683b      	ldr	r3, [r7, #0]
    c018:	681a      	ldr	r2, [r3, #0]
    c01a:	230c      	movs	r3, #12
    c01c:	18fb      	adds	r3, r7, r3
    c01e:	601a      	str	r2, [r3, #0]
			strSetSockOpt.u16SessionID		= gastrSockets[sock].u16SessionID;
    c020:	1dfb      	adds	r3, r7, #7
    c022:	781b      	ldrb	r3, [r3, #0]
    c024:	b25b      	sxtb	r3, r3
    c026:	4a17      	ldr	r2, [pc, #92]	; (c084 <setsockopt+0x100>)
    c028:	011b      	lsls	r3, r3, #4
    c02a:	18d3      	adds	r3, r2, r3
    c02c:	3306      	adds	r3, #6
    c02e:	881b      	ldrh	r3, [r3, #0]
    c030:	b29a      	uxth	r2, r3
    c032:	230c      	movs	r3, #12
    c034:	18fb      	adds	r3, r7, r3
    c036:	80da      	strh	r2, [r3, #6]

			s8Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strSetSockOpt, sizeof(tstrSetSocketOptCmd), NULL,0, 0);
    c038:	2317      	movs	r3, #23
    c03a:	18fc      	adds	r4, r7, r3
    c03c:	230c      	movs	r3, #12
    c03e:	18fa      	adds	r2, r7, r3
    c040:	2316      	movs	r3, #22
    c042:	18fb      	adds	r3, r7, r3
    c044:	7819      	ldrb	r1, [r3, #0]
    c046:	2300      	movs	r3, #0
    c048:	9302      	str	r3, [sp, #8]
    c04a:	2300      	movs	r3, #0
    c04c:	9301      	str	r3, [sp, #4]
    c04e:	2300      	movs	r3, #0
    c050:	9300      	str	r3, [sp, #0]
    c052:	2308      	movs	r3, #8
    c054:	2002      	movs	r0, #2
    c056:	4d0d      	ldr	r5, [pc, #52]	; (c08c <setsockopt+0x108>)
    c058:	47a8      	blx	r5
    c05a:	0003      	movs	r3, r0
    c05c:	7023      	strb	r3, [r4, #0]
			if(s8Ret != SOCK_ERR_NO_ERROR)
    c05e:	2317      	movs	r3, #23
    c060:	18fb      	adds	r3, r7, r3
    c062:	781b      	ldrb	r3, [r3, #0]
    c064:	b25b      	sxtb	r3, r3
    c066:	2b00      	cmp	r3, #0
    c068:	d003      	beq.n	c072 <setsockopt+0xee>
			{
				s8Ret = SOCK_ERR_INVALID;
    c06a:	2317      	movs	r3, #23
    c06c:	18fb      	adds	r3, r7, r3
    c06e:	22f7      	movs	r2, #247	; 0xf7
    c070:	701a      	strb	r2, [r3, #0]
			}
		}
	}
	return s8Ret;	
    c072:	2317      	movs	r3, #23
    c074:	18fb      	adds	r3, r7, r3
    c076:	781b      	ldrb	r3, [r3, #0]
    c078:	b25b      	sxtb	r3, r3
}
    c07a:	0018      	movs	r0, r3
    c07c:	46bd      	mov	sp, r7
    c07e:	b006      	add	sp, #24
    c080:	bdb0      	pop	{r4, r5, r7, pc}
    c082:	46c0      	nop			; (mov r8, r8)
    c084:	20002a5c 	.word	0x20002a5c
    c088:	0000bc91 	.word	0x0000bc91
    c08c:	00006fc1 	.word	0x00006fc1

0000c090 <spi_flash_enter_low_power_mode>:
		spi_flash_write_enable();
		spi_flash_gang_unblock();
	}
}
#endif
static void spi_flash_enter_low_power_mode(void) {
    c090:	b580      	push	{r7, lr}
    c092:	b082      	sub	sp, #8
    c094:	af00      	add	r7, sp, #0
	volatile unsigned long tmp;
	unsigned char* cmd = (unsigned char*) &tmp;
    c096:	003b      	movs	r3, r7
    c098:	607b      	str	r3, [r7, #4]

	cmd[0] = 0xb9;
    c09a:	687b      	ldr	r3, [r7, #4]
    c09c:	22b9      	movs	r2, #185	; 0xb9
    c09e:	701a      	strb	r2, [r3, #0]

	nm_write_reg(SPI_FLASH_DATA_CNT, 0);
    c0a0:	4b13      	ldr	r3, [pc, #76]	; (c0f0 <spi_flash_enter_low_power_mode+0x60>)
    c0a2:	2100      	movs	r1, #0
    c0a4:	0018      	movs	r0, r3
    c0a6:	4b13      	ldr	r3, [pc, #76]	; (c0f4 <spi_flash_enter_low_power_mode+0x64>)
    c0a8:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_BUF1, cmd[0]);
    c0aa:	687b      	ldr	r3, [r7, #4]
    c0ac:	781b      	ldrb	r3, [r3, #0]
    c0ae:	001a      	movs	r2, r3
    c0b0:	4b11      	ldr	r3, [pc, #68]	; (c0f8 <spi_flash_enter_low_power_mode+0x68>)
    c0b2:	0011      	movs	r1, r2
    c0b4:	0018      	movs	r0, r3
    c0b6:	4b0f      	ldr	r3, [pc, #60]	; (c0f4 <spi_flash_enter_low_power_mode+0x64>)
    c0b8:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_BUF_DIR, 0x1);
    c0ba:	4b10      	ldr	r3, [pc, #64]	; (c0fc <spi_flash_enter_low_power_mode+0x6c>)
    c0bc:	2101      	movs	r1, #1
    c0be:	0018      	movs	r0, r3
    c0c0:	4b0c      	ldr	r3, [pc, #48]	; (c0f4 <spi_flash_enter_low_power_mode+0x64>)
    c0c2:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_DMA_ADDR, 0);
    c0c4:	4b0e      	ldr	r3, [pc, #56]	; (c100 <spi_flash_enter_low_power_mode+0x70>)
    c0c6:	2100      	movs	r1, #0
    c0c8:	0018      	movs	r0, r3
    c0ca:	4b0a      	ldr	r3, [pc, #40]	; (c0f4 <spi_flash_enter_low_power_mode+0x64>)
    c0cc:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_CMD_CNT, 1 | (1 << 7));
    c0ce:	4b0d      	ldr	r3, [pc, #52]	; (c104 <spi_flash_enter_low_power_mode+0x74>)
    c0d0:	2181      	movs	r1, #129	; 0x81
    c0d2:	0018      	movs	r0, r3
    c0d4:	4b07      	ldr	r3, [pc, #28]	; (c0f4 <spi_flash_enter_low_power_mode+0x64>)
    c0d6:	4798      	blx	r3
	while(nm_read_reg(SPI_FLASH_TR_DONE) != 1);
    c0d8:	46c0      	nop			; (mov r8, r8)
    c0da:	4b0b      	ldr	r3, [pc, #44]	; (c108 <spi_flash_enter_low_power_mode+0x78>)
    c0dc:	0018      	movs	r0, r3
    c0de:	4b0b      	ldr	r3, [pc, #44]	; (c10c <spi_flash_enter_low_power_mode+0x7c>)
    c0e0:	4798      	blx	r3
    c0e2:	0003      	movs	r3, r0
    c0e4:	2b01      	cmp	r3, #1
    c0e6:	d1f8      	bne.n	c0da <spi_flash_enter_low_power_mode+0x4a>
}
    c0e8:	46c0      	nop			; (mov r8, r8)
    c0ea:	46bd      	mov	sp, r7
    c0ec:	b002      	add	sp, #8
    c0ee:	bd80      	pop	{r7, pc}
    c0f0:	00010208 	.word	0x00010208
    c0f4:	00009179 	.word	0x00009179
    c0f8:	0001020c 	.word	0x0001020c
    c0fc:	00010214 	.word	0x00010214
    c100:	0001021c 	.word	0x0001021c
    c104:	00010204 	.word	0x00010204
    c108:	00010218 	.word	0x00010218
    c10c:	00009135 	.word	0x00009135

0000c110 <spi_flash_leave_low_power_mode>:


static void spi_flash_leave_low_power_mode(void) {
    c110:	b580      	push	{r7, lr}
    c112:	b082      	sub	sp, #8
    c114:	af00      	add	r7, sp, #0
	volatile unsigned long tmp;
	unsigned char* cmd = (unsigned char*) &tmp;
    c116:	003b      	movs	r3, r7
    c118:	607b      	str	r3, [r7, #4]

	cmd[0] = 0xab;
    c11a:	687b      	ldr	r3, [r7, #4]
    c11c:	22ab      	movs	r2, #171	; 0xab
    c11e:	701a      	strb	r2, [r3, #0]

	nm_write_reg(SPI_FLASH_DATA_CNT, 0);
    c120:	4b13      	ldr	r3, [pc, #76]	; (c170 <spi_flash_leave_low_power_mode+0x60>)
    c122:	2100      	movs	r1, #0
    c124:	0018      	movs	r0, r3
    c126:	4b13      	ldr	r3, [pc, #76]	; (c174 <spi_flash_leave_low_power_mode+0x64>)
    c128:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_BUF1, cmd[0]);
    c12a:	687b      	ldr	r3, [r7, #4]
    c12c:	781b      	ldrb	r3, [r3, #0]
    c12e:	001a      	movs	r2, r3
    c130:	4b11      	ldr	r3, [pc, #68]	; (c178 <spi_flash_leave_low_power_mode+0x68>)
    c132:	0011      	movs	r1, r2
    c134:	0018      	movs	r0, r3
    c136:	4b0f      	ldr	r3, [pc, #60]	; (c174 <spi_flash_leave_low_power_mode+0x64>)
    c138:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_BUF_DIR, 0x1);
    c13a:	4b10      	ldr	r3, [pc, #64]	; (c17c <spi_flash_leave_low_power_mode+0x6c>)
    c13c:	2101      	movs	r1, #1
    c13e:	0018      	movs	r0, r3
    c140:	4b0c      	ldr	r3, [pc, #48]	; (c174 <spi_flash_leave_low_power_mode+0x64>)
    c142:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_DMA_ADDR, 0);
    c144:	4b0e      	ldr	r3, [pc, #56]	; (c180 <spi_flash_leave_low_power_mode+0x70>)
    c146:	2100      	movs	r1, #0
    c148:	0018      	movs	r0, r3
    c14a:	4b0a      	ldr	r3, [pc, #40]	; (c174 <spi_flash_leave_low_power_mode+0x64>)
    c14c:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_CMD_CNT,  1 | (1 << 7));
    c14e:	4b0d      	ldr	r3, [pc, #52]	; (c184 <spi_flash_leave_low_power_mode+0x74>)
    c150:	2181      	movs	r1, #129	; 0x81
    c152:	0018      	movs	r0, r3
    c154:	4b07      	ldr	r3, [pc, #28]	; (c174 <spi_flash_leave_low_power_mode+0x64>)
    c156:	4798      	blx	r3
	while(nm_read_reg(SPI_FLASH_TR_DONE) != 1);
    c158:	46c0      	nop			; (mov r8, r8)
    c15a:	4b0b      	ldr	r3, [pc, #44]	; (c188 <spi_flash_leave_low_power_mode+0x78>)
    c15c:	0018      	movs	r0, r3
    c15e:	4b0b      	ldr	r3, [pc, #44]	; (c18c <spi_flash_leave_low_power_mode+0x7c>)
    c160:	4798      	blx	r3
    c162:	0003      	movs	r3, r0
    c164:	2b01      	cmp	r3, #1
    c166:	d1f8      	bne.n	c15a <spi_flash_leave_low_power_mode+0x4a>
}
    c168:	46c0      	nop			; (mov r8, r8)
    c16a:	46bd      	mov	sp, r7
    c16c:	b002      	add	sp, #8
    c16e:	bd80      	pop	{r7, pc}
    c170:	00010208 	.word	0x00010208
    c174:	00009179 	.word	0x00009179
    c178:	0001020c 	.word	0x0001020c
    c17c:	00010214 	.word	0x00010214
    c180:	0001021c 	.word	0x0001021c
    c184:	00010204 	.word	0x00010204
    c188:	00010218 	.word	0x00010218
    c18c:	00009135 	.word	0x00009135

0000c190 <spi_flash_enable>:
 *	@brief	Enable spi flash operations
 *	@author	M. Abdelmawla
 *	@version	1.0
 */
sint8 spi_flash_enable(uint8 enable)
{
    c190:	b590      	push	{r4, r7, lr}
    c192:	b085      	sub	sp, #20
    c194:	af00      	add	r7, sp, #0
    c196:	0002      	movs	r2, r0
    c198:	1dfb      	adds	r3, r7, #7
    c19a:	701a      	strb	r2, [r3, #0]
	sint8 s8Ret = M2M_SUCCESS;
    c19c:	230f      	movs	r3, #15
    c19e:	18fb      	adds	r3, r7, r3
    c1a0:	2200      	movs	r2, #0
    c1a2:	701a      	strb	r2, [r3, #0]
	if(REV(nmi_get_chipid()) >= REV_3A0) {		
    c1a4:	4b24      	ldr	r3, [pc, #144]	; (c238 <spi_flash_enable+0xa8>)
    c1a6:	4798      	blx	r3
    c1a8:	0003      	movs	r3, r0
    c1aa:	051b      	lsls	r3, r3, #20
    c1ac:	0d1b      	lsrs	r3, r3, #20
    c1ae:	4a23      	ldr	r2, [pc, #140]	; (c23c <spi_flash_enable+0xac>)
    c1b0:	4293      	cmp	r3, r2
    c1b2:	d938      	bls.n	c226 <spi_flash_enable+0x96>
		uint32 u32Val;
		
		/* Enable pinmux to SPI flash. */
		s8Ret = nm_read_reg_with_ret(0x1410, &u32Val);
    c1b4:	230f      	movs	r3, #15
    c1b6:	18fc      	adds	r4, r7, r3
    c1b8:	2308      	movs	r3, #8
    c1ba:	18fb      	adds	r3, r7, r3
    c1bc:	4a20      	ldr	r2, [pc, #128]	; (c240 <spi_flash_enable+0xb0>)
    c1be:	0019      	movs	r1, r3
    c1c0:	0010      	movs	r0, r2
    c1c2:	4b20      	ldr	r3, [pc, #128]	; (c244 <spi_flash_enable+0xb4>)
    c1c4:	4798      	blx	r3
    c1c6:	0003      	movs	r3, r0
    c1c8:	7023      	strb	r3, [r4, #0]
		if(s8Ret != M2M_SUCCESS) {
    c1ca:	230f      	movs	r3, #15
    c1cc:	18fb      	adds	r3, r7, r3
    c1ce:	781b      	ldrb	r3, [r3, #0]
    c1d0:	b25b      	sxtb	r3, r3
    c1d2:	2b00      	cmp	r3, #0
    c1d4:	d126      	bne.n	c224 <spi_flash_enable+0x94>
			goto ERR1;
		}
		/* GPIO15/16/17/18 */
		u32Val &= ~((0x7777ul) << 12);
    c1d6:	68bb      	ldr	r3, [r7, #8]
    c1d8:	4a1b      	ldr	r2, [pc, #108]	; (c248 <spi_flash_enable+0xb8>)
    c1da:	4013      	ands	r3, r2
    c1dc:	60bb      	str	r3, [r7, #8]
		u32Val |= ((0x1111ul) << 12);
    c1de:	68bb      	ldr	r3, [r7, #8]
    c1e0:	4a1a      	ldr	r2, [pc, #104]	; (c24c <spi_flash_enable+0xbc>)
    c1e2:	4313      	orrs	r3, r2
    c1e4:	60bb      	str	r3, [r7, #8]
		nm_write_reg(0x1410, u32Val);
    c1e6:	68bb      	ldr	r3, [r7, #8]
    c1e8:	4a15      	ldr	r2, [pc, #84]	; (c240 <spi_flash_enable+0xb0>)
    c1ea:	0019      	movs	r1, r3
    c1ec:	0010      	movs	r0, r2
    c1ee:	4b18      	ldr	r3, [pc, #96]	; (c250 <spi_flash_enable+0xc0>)
    c1f0:	4798      	blx	r3
		if(enable) {
    c1f2:	1dfb      	adds	r3, r7, #7
    c1f4:	781b      	ldrb	r3, [r3, #0]
    c1f6:	2b00      	cmp	r3, #0
    c1f8:	d002      	beq.n	c200 <spi_flash_enable+0x70>
			spi_flash_leave_low_power_mode();
    c1fa:	4b16      	ldr	r3, [pc, #88]	; (c254 <spi_flash_enable+0xc4>)
    c1fc:	4798      	blx	r3
    c1fe:	e001      	b.n	c204 <spi_flash_enable+0x74>
		} else {
			spi_flash_enter_low_power_mode();
    c200:	4b15      	ldr	r3, [pc, #84]	; (c258 <spi_flash_enable+0xc8>)
    c202:	4798      	blx	r3
		}
		/* Disable pinmux to SPI flash to minimize leakage. */
		u32Val &= ~((0x7777ul) << 12);
    c204:	68bb      	ldr	r3, [r7, #8]
    c206:	4a10      	ldr	r2, [pc, #64]	; (c248 <spi_flash_enable+0xb8>)
    c208:	4013      	ands	r3, r2
    c20a:	60bb      	str	r3, [r7, #8]
		u32Val |= ((0x0010ul) << 12);
    c20c:	68bb      	ldr	r3, [r7, #8]
    c20e:	2280      	movs	r2, #128	; 0x80
    c210:	0252      	lsls	r2, r2, #9
    c212:	4313      	orrs	r3, r2
    c214:	60bb      	str	r3, [r7, #8]
		nm_write_reg(0x1410, u32Val);
    c216:	68bb      	ldr	r3, [r7, #8]
    c218:	4a09      	ldr	r2, [pc, #36]	; (c240 <spi_flash_enable+0xb0>)
    c21a:	0019      	movs	r1, r3
    c21c:	0010      	movs	r0, r2
    c21e:	4b0c      	ldr	r3, [pc, #48]	; (c250 <spi_flash_enable+0xc0>)
    c220:	4798      	blx	r3
    c222:	e000      	b.n	c226 <spi_flash_enable+0x96>
			goto ERR1;
    c224:	46c0      	nop			; (mov r8, r8)
	}
ERR1:
	return s8Ret;
    c226:	230f      	movs	r3, #15
    c228:	18fb      	adds	r3, r7, r3
    c22a:	781b      	ldrb	r3, [r3, #0]
    c22c:	b25b      	sxtb	r3, r3
}
    c22e:	0018      	movs	r0, r3
    c230:	46bd      	mov	sp, r7
    c232:	b005      	add	sp, #20
    c234:	bd90      	pop	{r4, r7, pc}
    c236:	46c0      	nop			; (mov r8, r8)
    c238:	00008975 	.word	0x00008975
    c23c:	0000039f 	.word	0x0000039f
    c240:	00001410 	.word	0x00001410
    c244:	00009155 	.word	0x00009155
    c248:	f8888fff 	.word	0xf8888fff
    c24c:	01111000 	.word	0x01111000
    c250:	00009179 	.word	0x00009179
    c254:	0000c111 	.word	0x0000c111
    c258:	0000c091 	.word	0x0000c091

0000c25c <_extint_get_eic_from_channel>:
 *
 * \return Base address of the associated EIC module.
 */
static inline Eic * _extint_get_eic_from_channel(
		const uint8_t channel)
{
    c25c:	b580      	push	{r7, lr}
    c25e:	b084      	sub	sp, #16
    c260:	af00      	add	r7, sp, #0
    c262:	0002      	movs	r2, r0
    c264:	1dfb      	adds	r3, r7, #7
    c266:	701a      	strb	r2, [r3, #0]
	uint8_t eic_index = (channel / 32);
    c268:	230f      	movs	r3, #15
    c26a:	18fb      	adds	r3, r7, r3
    c26c:	1dfa      	adds	r2, r7, #7
    c26e:	7812      	ldrb	r2, [r2, #0]
    c270:	0952      	lsrs	r2, r2, #5
    c272:	701a      	strb	r2, [r3, #0]

	if (eic_index < EIC_INST_NUM) {
    c274:	230f      	movs	r3, #15
    c276:	18fb      	adds	r3, r7, r3
    c278:	781b      	ldrb	r3, [r3, #0]
    c27a:	2b00      	cmp	r3, #0
    c27c:	d10c      	bne.n	c298 <_extint_get_eic_from_channel+0x3c>
		/* Array of available EICs */
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
    c27e:	4b09      	ldr	r3, [pc, #36]	; (c2a4 <_extint_get_eic_from_channel+0x48>)
    c280:	60bb      	str	r3, [r7, #8]

		return eics[eic_index];
    c282:	230f      	movs	r3, #15
    c284:	18fb      	adds	r3, r7, r3
    c286:	781b      	ldrb	r3, [r3, #0]
    c288:	009b      	lsls	r3, r3, #2
    c28a:	2210      	movs	r2, #16
    c28c:	4694      	mov	ip, r2
    c28e:	44bc      	add	ip, r7
    c290:	4463      	add	r3, ip
    c292:	3b08      	subs	r3, #8
    c294:	681b      	ldr	r3, [r3, #0]
    c296:	e000      	b.n	c29a <_extint_get_eic_from_channel+0x3e>
	} else {
		Assert(false);
		return NULL;
    c298:	2300      	movs	r3, #0
	}
}
    c29a:	0018      	movs	r0, r3
    c29c:	46bd      	mov	sp, r7
    c29e:	b004      	add	sp, #16
    c2a0:	bd80      	pop	{r7, pc}
    c2a2:	46c0      	nop			; (mov r8, r8)
    c2a4:	40001800 	.word	0x40001800

0000c2a8 <extint_chan_is_detected>:
 *  \retval true   If the channel's edge/level detection criteria was met
 *  \retval false  If the channel has not detected its configured criteria
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
    c2a8:	b580      	push	{r7, lr}
    c2aa:	b084      	sub	sp, #16
    c2ac:	af00      	add	r7, sp, #0
    c2ae:	0002      	movs	r2, r0
    c2b0:	1dfb      	adds	r3, r7, #7
    c2b2:	701a      	strb	r2, [r3, #0]
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
    c2b4:	1dfb      	adds	r3, r7, #7
    c2b6:	781b      	ldrb	r3, [r3, #0]
    c2b8:	0018      	movs	r0, r3
    c2ba:	4b0b      	ldr	r3, [pc, #44]	; (c2e8 <extint_chan_is_detected+0x40>)
    c2bc:	4798      	blx	r3
    c2be:	0003      	movs	r3, r0
    c2c0:	60fb      	str	r3, [r7, #12]
	uint32_t eic_mask   = (1UL << (channel % 32));
    c2c2:	1dfb      	adds	r3, r7, #7
    c2c4:	781b      	ldrb	r3, [r3, #0]
    c2c6:	221f      	movs	r2, #31
    c2c8:	4013      	ands	r3, r2
    c2ca:	2201      	movs	r2, #1
    c2cc:	409a      	lsls	r2, r3
    c2ce:	0013      	movs	r3, r2
    c2d0:	60bb      	str	r3, [r7, #8]

	return (eic_module->INTFLAG.reg & eic_mask);
    c2d2:	68fb      	ldr	r3, [r7, #12]
    c2d4:	691b      	ldr	r3, [r3, #16]
    c2d6:	68ba      	ldr	r2, [r7, #8]
    c2d8:	4013      	ands	r3, r2
    c2da:	1e5a      	subs	r2, r3, #1
    c2dc:	4193      	sbcs	r3, r2
    c2de:	b2db      	uxtb	r3, r3
}
    c2e0:	0018      	movs	r0, r3
    c2e2:	46bd      	mov	sp, r7
    c2e4:	b004      	add	sp, #16
    c2e6:	bd80      	pop	{r7, pc}
    c2e8:	0000c25d 	.word	0x0000c25d

0000c2ec <extint_chan_clear_detected>:
 *
 *  \param[in] channel  External Interrupt channel index to check
 */
static inline void extint_chan_clear_detected(
		const uint8_t channel)
{
    c2ec:	b580      	push	{r7, lr}
    c2ee:	b084      	sub	sp, #16
    c2f0:	af00      	add	r7, sp, #0
    c2f2:	0002      	movs	r2, r0
    c2f4:	1dfb      	adds	r3, r7, #7
    c2f6:	701a      	strb	r2, [r3, #0]
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
    c2f8:	1dfb      	adds	r3, r7, #7
    c2fa:	781b      	ldrb	r3, [r3, #0]
    c2fc:	0018      	movs	r0, r3
    c2fe:	4b09      	ldr	r3, [pc, #36]	; (c324 <extint_chan_clear_detected+0x38>)
    c300:	4798      	blx	r3
    c302:	0003      	movs	r3, r0
    c304:	60fb      	str	r3, [r7, #12]
	uint32_t eic_mask   = (1UL << (channel % 32));
    c306:	1dfb      	adds	r3, r7, #7
    c308:	781b      	ldrb	r3, [r3, #0]
    c30a:	221f      	movs	r2, #31
    c30c:	4013      	ands	r3, r2
    c30e:	2201      	movs	r2, #1
    c310:	409a      	lsls	r2, r3
    c312:	0013      	movs	r3, r2
    c314:	60bb      	str	r3, [r7, #8]

	eic_module->INTFLAG.reg = eic_mask;
    c316:	68fb      	ldr	r3, [r7, #12]
    c318:	68ba      	ldr	r2, [r7, #8]
    c31a:	611a      	str	r2, [r3, #16]
}
    c31c:	46c0      	nop			; (mov r8, r8)
    c31e:	46bd      	mov	sp, r7
    c320:	b004      	add	sp, #16
    c322:	bd80      	pop	{r7, pc}
    c324:	0000c25d 	.word	0x0000c25d

0000c328 <extint_register_callback>:
 */
enum status_code extint_register_callback(
	const extint_callback_t callback,
	const uint8_t channel,
	const enum extint_callback_type type)
{
    c328:	b580      	push	{r7, lr}
    c32a:	b082      	sub	sp, #8
    c32c:	af00      	add	r7, sp, #0
    c32e:	6078      	str	r0, [r7, #4]
    c330:	0008      	movs	r0, r1
    c332:	0011      	movs	r1, r2
    c334:	1cfb      	adds	r3, r7, #3
    c336:	1c02      	adds	r2, r0, #0
    c338:	701a      	strb	r2, [r3, #0]
    c33a:	1cbb      	adds	r3, r7, #2
    c33c:	1c0a      	adds	r2, r1, #0
    c33e:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(callback);

	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
    c340:	1cbb      	adds	r3, r7, #2
    c342:	781b      	ldrb	r3, [r3, #0]
    c344:	2b00      	cmp	r3, #0
    c346:	d001      	beq.n	c34c <extint_register_callback+0x24>
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    c348:	2317      	movs	r3, #23
    c34a:	e019      	b.n	c380 <extint_register_callback+0x58>
	}

	if (_extint_dev.callbacks[channel] == NULL) {
    c34c:	1cfb      	adds	r3, r7, #3
    c34e:	781a      	ldrb	r2, [r3, #0]
    c350:	4b0d      	ldr	r3, [pc, #52]	; (c388 <extint_register_callback+0x60>)
    c352:	0092      	lsls	r2, r2, #2
    c354:	58d3      	ldr	r3, [r2, r3]
    c356:	2b00      	cmp	r3, #0
    c358:	d107      	bne.n	c36a <extint_register_callback+0x42>
		_extint_dev.callbacks[channel] = callback;
    c35a:	1cfb      	adds	r3, r7, #3
    c35c:	781a      	ldrb	r2, [r3, #0]
    c35e:	4b0a      	ldr	r3, [pc, #40]	; (c388 <extint_register_callback+0x60>)
    c360:	0092      	lsls	r2, r2, #2
    c362:	6879      	ldr	r1, [r7, #4]
    c364:	50d1      	str	r1, [r2, r3]
		return STATUS_OK;
    c366:	2300      	movs	r3, #0
    c368:	e00a      	b.n	c380 <extint_register_callback+0x58>
	} else if (_extint_dev.callbacks[channel] == callback) {
    c36a:	1cfb      	adds	r3, r7, #3
    c36c:	781a      	ldrb	r2, [r3, #0]
    c36e:	4b06      	ldr	r3, [pc, #24]	; (c388 <extint_register_callback+0x60>)
    c370:	0092      	lsls	r2, r2, #2
    c372:	58d2      	ldr	r2, [r2, r3]
    c374:	687b      	ldr	r3, [r7, #4]
    c376:	429a      	cmp	r2, r3
    c378:	d101      	bne.n	c37e <extint_register_callback+0x56>
		return STATUS_OK;
    c37a:	2300      	movs	r3, #0
    c37c:	e000      	b.n	c380 <extint_register_callback+0x58>
	}

	return STATUS_ERR_ALREADY_INITIALIZED;
    c37e:	231d      	movs	r3, #29
}
    c380:	0018      	movs	r0, r3
    c382:	46bd      	mov	sp, r7
    c384:	b002      	add	sp, #8
    c386:	bd80      	pop	{r7, pc}
    c388:	20002b1c 	.word	0x20002b1c

0000c38c <extint_chan_enable_callback>:
 * \retval STATUS_ERR_INVALID_ARG  If an invalid callback type was supplied
 */
enum status_code extint_chan_enable_callback(
	const uint8_t channel,
	const enum extint_callback_type type)
{
    c38c:	b580      	push	{r7, lr}
    c38e:	b084      	sub	sp, #16
    c390:	af00      	add	r7, sp, #0
    c392:	0002      	movs	r2, r0
    c394:	1dfb      	adds	r3, r7, #7
    c396:	701a      	strb	r2, [r3, #0]
    c398:	1dbb      	adds	r3, r7, #6
    c39a:	1c0a      	adds	r2, r1, #0
    c39c:	701a      	strb	r2, [r3, #0]
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
    c39e:	1dbb      	adds	r3, r7, #6
    c3a0:	781b      	ldrb	r3, [r3, #0]
    c3a2:	2b00      	cmp	r3, #0
    c3a4:	d10e      	bne.n	c3c4 <extint_chan_enable_callback+0x38>
		Eic *const eic = _extint_get_eic_from_channel(channel);
    c3a6:	1dfb      	adds	r3, r7, #7
    c3a8:	781b      	ldrb	r3, [r3, #0]
    c3aa:	0018      	movs	r0, r3
    c3ac:	4b08      	ldr	r3, [pc, #32]	; (c3d0 <extint_chan_enable_callback+0x44>)
    c3ae:	4798      	blx	r3
    c3b0:	0003      	movs	r3, r0
    c3b2:	60fb      	str	r3, [r7, #12]

		eic->INTENSET.reg = (1UL << channel);
    c3b4:	1dfb      	adds	r3, r7, #7
    c3b6:	781b      	ldrb	r3, [r3, #0]
    c3b8:	2201      	movs	r2, #1
    c3ba:	409a      	lsls	r2, r3
    c3bc:	68fb      	ldr	r3, [r7, #12]
    c3be:	60da      	str	r2, [r3, #12]
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    c3c0:	2300      	movs	r3, #0
    c3c2:	e000      	b.n	c3c6 <extint_chan_enable_callback+0x3a>
		return STATUS_ERR_INVALID_ARG;
    c3c4:	2317      	movs	r3, #23
}
    c3c6:	0018      	movs	r0, r3
    c3c8:	46bd      	mov	sp, r7
    c3ca:	b004      	add	sp, #16
    c3cc:	bd80      	pop	{r7, pc}
    c3ce:	46c0      	nop			; (mov r8, r8)
    c3d0:	0000c25d 	.word	0x0000c25d

0000c3d4 <extint_chan_disable_callback>:
 * \retval STATUS_ERR_INVALID_ARG  If an invalid callback type was supplied
 */
enum status_code extint_chan_disable_callback(
	const uint8_t channel,
	const enum extint_callback_type type)
{
    c3d4:	b580      	push	{r7, lr}
    c3d6:	b084      	sub	sp, #16
    c3d8:	af00      	add	r7, sp, #0
    c3da:	0002      	movs	r2, r0
    c3dc:	1dfb      	adds	r3, r7, #7
    c3de:	701a      	strb	r2, [r3, #0]
    c3e0:	1dbb      	adds	r3, r7, #6
    c3e2:	1c0a      	adds	r2, r1, #0
    c3e4:	701a      	strb	r2, [r3, #0]
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
    c3e6:	1dbb      	adds	r3, r7, #6
    c3e8:	781b      	ldrb	r3, [r3, #0]
    c3ea:	2b00      	cmp	r3, #0
    c3ec:	d10e      	bne.n	c40c <extint_chan_disable_callback+0x38>
		Eic *const eic = _extint_get_eic_from_channel(channel);
    c3ee:	1dfb      	adds	r3, r7, #7
    c3f0:	781b      	ldrb	r3, [r3, #0]
    c3f2:	0018      	movs	r0, r3
    c3f4:	4b08      	ldr	r3, [pc, #32]	; (c418 <extint_chan_disable_callback+0x44>)
    c3f6:	4798      	blx	r3
    c3f8:	0003      	movs	r3, r0
    c3fa:	60fb      	str	r3, [r7, #12]

		eic->INTENCLR.reg = (1UL << channel);
    c3fc:	1dfb      	adds	r3, r7, #7
    c3fe:	781b      	ldrb	r3, [r3, #0]
    c400:	2201      	movs	r2, #1
    c402:	409a      	lsls	r2, r3
    c404:	68fb      	ldr	r3, [r7, #12]
    c406:	609a      	str	r2, [r3, #8]
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    c408:	2300      	movs	r3, #0
    c40a:	e000      	b.n	c40e <extint_chan_disable_callback+0x3a>
		return STATUS_ERR_INVALID_ARG;
    c40c:	2317      	movs	r3, #23
}
    c40e:	0018      	movs	r0, r3
    c410:	46bd      	mov	sp, r7
    c412:	b004      	add	sp, #16
    c414:	bd80      	pop	{r7, pc}
    c416:	46c0      	nop			; (mov r8, r8)
    c418:	0000c25d 	.word	0x0000c25d

0000c41c <EIC_Handler>:
	return _current_channel;
}

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
    c41c:	b580      	push	{r7, lr}
    c41e:	af00      	add	r7, sp, #0
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    c420:	4b15      	ldr	r3, [pc, #84]	; (c478 <EIC_Handler+0x5c>)
    c422:	2200      	movs	r2, #0
    c424:	701a      	strb	r2, [r3, #0]
    c426:	e020      	b.n	c46a <EIC_Handler+0x4e>
		if (extint_chan_is_detected(_current_channel)) {
    c428:	4b13      	ldr	r3, [pc, #76]	; (c478 <EIC_Handler+0x5c>)
    c42a:	781b      	ldrb	r3, [r3, #0]
    c42c:	0018      	movs	r0, r3
    c42e:	4b13      	ldr	r3, [pc, #76]	; (c47c <EIC_Handler+0x60>)
    c430:	4798      	blx	r3
    c432:	1e03      	subs	r3, r0, #0
    c434:	d013      	beq.n	c45e <EIC_Handler+0x42>
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
    c436:	4b10      	ldr	r3, [pc, #64]	; (c478 <EIC_Handler+0x5c>)
    c438:	781b      	ldrb	r3, [r3, #0]
    c43a:	0018      	movs	r0, r3
    c43c:	4b10      	ldr	r3, [pc, #64]	; (c480 <EIC_Handler+0x64>)
    c43e:	4798      	blx	r3
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
    c440:	4b0d      	ldr	r3, [pc, #52]	; (c478 <EIC_Handler+0x5c>)
    c442:	781b      	ldrb	r3, [r3, #0]
    c444:	001a      	movs	r2, r3
    c446:	4b0f      	ldr	r3, [pc, #60]	; (c484 <EIC_Handler+0x68>)
    c448:	0092      	lsls	r2, r2, #2
    c44a:	58d3      	ldr	r3, [r2, r3]
    c44c:	2b00      	cmp	r3, #0
    c44e:	d006      	beq.n	c45e <EIC_Handler+0x42>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
    c450:	4b09      	ldr	r3, [pc, #36]	; (c478 <EIC_Handler+0x5c>)
    c452:	781b      	ldrb	r3, [r3, #0]
    c454:	001a      	movs	r2, r3
    c456:	4b0b      	ldr	r3, [pc, #44]	; (c484 <EIC_Handler+0x68>)
    c458:	0092      	lsls	r2, r2, #2
    c45a:	58d3      	ldr	r3, [r2, r3]
    c45c:	4798      	blx	r3
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    c45e:	4b06      	ldr	r3, [pc, #24]	; (c478 <EIC_Handler+0x5c>)
    c460:	781b      	ldrb	r3, [r3, #0]
    c462:	3301      	adds	r3, #1
    c464:	b2da      	uxtb	r2, r3
    c466:	4b04      	ldr	r3, [pc, #16]	; (c478 <EIC_Handler+0x5c>)
    c468:	701a      	strb	r2, [r3, #0]
    c46a:	4b03      	ldr	r3, [pc, #12]	; (c478 <EIC_Handler+0x5c>)
    c46c:	781b      	ldrb	r3, [r3, #0]
    c46e:	2b0f      	cmp	r3, #15
    c470:	d9da      	bls.n	c428 <EIC_Handler+0xc>
			}
		}
	}
}
    c472:	46c0      	nop			; (mov r8, r8)
    c474:	46bd      	mov	sp, r7
    c476:	bd80      	pop	{r7, pc}
    c478:	20002b18 	.word	0x20002b18
    c47c:	0000c2a9 	.word	0x0000c2a9
    c480:	0000c2ed 	.word	0x0000c2ed
    c484:	20002b1c 	.word	0x20002b1c

0000c488 <system_gclk_chan_get_config_defaults>:
{
    c488:	b580      	push	{r7, lr}
    c48a:	b082      	sub	sp, #8
    c48c:	af00      	add	r7, sp, #0
    c48e:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
    c490:	687b      	ldr	r3, [r7, #4]
    c492:	2200      	movs	r2, #0
    c494:	701a      	strb	r2, [r3, #0]
}
    c496:	46c0      	nop			; (mov r8, r8)
    c498:	46bd      	mov	sp, r7
    c49a:	b002      	add	sp, #8
    c49c:	bd80      	pop	{r7, pc}
	...

0000c4a0 <system_apb_clock_set_mask>:
{
    c4a0:	b580      	push	{r7, lr}
    c4a2:	b082      	sub	sp, #8
    c4a4:	af00      	add	r7, sp, #0
    c4a6:	0002      	movs	r2, r0
    c4a8:	6039      	str	r1, [r7, #0]
    c4aa:	1dfb      	adds	r3, r7, #7
    c4ac:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    c4ae:	1dfb      	adds	r3, r7, #7
    c4b0:	781b      	ldrb	r3, [r3, #0]
    c4b2:	2b01      	cmp	r3, #1
    c4b4:	d00a      	beq.n	c4cc <system_apb_clock_set_mask+0x2c>
    c4b6:	2b02      	cmp	r3, #2
    c4b8:	d00f      	beq.n	c4da <system_apb_clock_set_mask+0x3a>
    c4ba:	2b00      	cmp	r3, #0
    c4bc:	d114      	bne.n	c4e8 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
    c4be:	4b0e      	ldr	r3, [pc, #56]	; (c4f8 <system_apb_clock_set_mask+0x58>)
    c4c0:	4a0d      	ldr	r2, [pc, #52]	; (c4f8 <system_apb_clock_set_mask+0x58>)
    c4c2:	6991      	ldr	r1, [r2, #24]
    c4c4:	683a      	ldr	r2, [r7, #0]
    c4c6:	430a      	orrs	r2, r1
    c4c8:	619a      	str	r2, [r3, #24]
			break;
    c4ca:	e00f      	b.n	c4ec <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
    c4cc:	4b0a      	ldr	r3, [pc, #40]	; (c4f8 <system_apb_clock_set_mask+0x58>)
    c4ce:	4a0a      	ldr	r2, [pc, #40]	; (c4f8 <system_apb_clock_set_mask+0x58>)
    c4d0:	69d1      	ldr	r1, [r2, #28]
    c4d2:	683a      	ldr	r2, [r7, #0]
    c4d4:	430a      	orrs	r2, r1
    c4d6:	61da      	str	r2, [r3, #28]
			break;
    c4d8:	e008      	b.n	c4ec <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
    c4da:	4b07      	ldr	r3, [pc, #28]	; (c4f8 <system_apb_clock_set_mask+0x58>)
    c4dc:	4a06      	ldr	r2, [pc, #24]	; (c4f8 <system_apb_clock_set_mask+0x58>)
    c4de:	6a11      	ldr	r1, [r2, #32]
    c4e0:	683a      	ldr	r2, [r7, #0]
    c4e2:	430a      	orrs	r2, r1
    c4e4:	621a      	str	r2, [r3, #32]
			break;
    c4e6:	e001      	b.n	c4ec <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
    c4e8:	2317      	movs	r3, #23
    c4ea:	e000      	b.n	c4ee <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
    c4ec:	2300      	movs	r3, #0
}
    c4ee:	0018      	movs	r0, r3
    c4f0:	46bd      	mov	sp, r7
    c4f2:	b002      	add	sp, #8
    c4f4:	bd80      	pop	{r7, pc}
    c4f6:	46c0      	nop			; (mov r8, r8)
    c4f8:	40000400 	.word	0x40000400

0000c4fc <system_pinmux_get_config_defaults>:
{
    c4fc:	b580      	push	{r7, lr}
    c4fe:	b082      	sub	sp, #8
    c500:	af00      	add	r7, sp, #0
    c502:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    c504:	687b      	ldr	r3, [r7, #4]
    c506:	2280      	movs	r2, #128	; 0x80
    c508:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    c50a:	687b      	ldr	r3, [r7, #4]
    c50c:	2200      	movs	r2, #0
    c50e:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    c510:	687b      	ldr	r3, [r7, #4]
    c512:	2201      	movs	r2, #1
    c514:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    c516:	687b      	ldr	r3, [r7, #4]
    c518:	2200      	movs	r2, #0
    c51a:	70da      	strb	r2, [r3, #3]
}
    c51c:	46c0      	nop			; (mov r8, r8)
    c51e:	46bd      	mov	sp, r7
    c520:	b002      	add	sp, #8
    c522:	bd80      	pop	{r7, pc}

0000c524 <system_interrupt_enable>:
{
    c524:	b580      	push	{r7, lr}
    c526:	b082      	sub	sp, #8
    c528:	af00      	add	r7, sp, #0
    c52a:	0002      	movs	r2, r0
    c52c:	1dfb      	adds	r3, r7, #7
    c52e:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    c530:	4b06      	ldr	r3, [pc, #24]	; (c54c <system_interrupt_enable+0x28>)
    c532:	1dfa      	adds	r2, r7, #7
    c534:	7812      	ldrb	r2, [r2, #0]
    c536:	0011      	movs	r1, r2
    c538:	221f      	movs	r2, #31
    c53a:	400a      	ands	r2, r1
    c53c:	2101      	movs	r1, #1
    c53e:	4091      	lsls	r1, r2
    c540:	000a      	movs	r2, r1
    c542:	601a      	str	r2, [r3, #0]
}
    c544:	46c0      	nop			; (mov r8, r8)
    c546:	46bd      	mov	sp, r7
    c548:	b002      	add	sp, #8
    c54a:	bd80      	pop	{r7, pc}
    c54c:	e000e100 	.word	0xe000e100

0000c550 <_extint_get_eic_from_channel>:
{
    c550:	b580      	push	{r7, lr}
    c552:	b084      	sub	sp, #16
    c554:	af00      	add	r7, sp, #0
    c556:	0002      	movs	r2, r0
    c558:	1dfb      	adds	r3, r7, #7
    c55a:	701a      	strb	r2, [r3, #0]
	uint8_t eic_index = (channel / 32);
    c55c:	230f      	movs	r3, #15
    c55e:	18fb      	adds	r3, r7, r3
    c560:	1dfa      	adds	r2, r7, #7
    c562:	7812      	ldrb	r2, [r2, #0]
    c564:	0952      	lsrs	r2, r2, #5
    c566:	701a      	strb	r2, [r3, #0]
	if (eic_index < EIC_INST_NUM) {
    c568:	230f      	movs	r3, #15
    c56a:	18fb      	adds	r3, r7, r3
    c56c:	781b      	ldrb	r3, [r3, #0]
    c56e:	2b00      	cmp	r3, #0
    c570:	d10c      	bne.n	c58c <_extint_get_eic_from_channel+0x3c>
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
    c572:	4b09      	ldr	r3, [pc, #36]	; (c598 <_extint_get_eic_from_channel+0x48>)
    c574:	60bb      	str	r3, [r7, #8]
		return eics[eic_index];
    c576:	230f      	movs	r3, #15
    c578:	18fb      	adds	r3, r7, r3
    c57a:	781b      	ldrb	r3, [r3, #0]
    c57c:	009b      	lsls	r3, r3, #2
    c57e:	2210      	movs	r2, #16
    c580:	4694      	mov	ip, r2
    c582:	44bc      	add	ip, r7
    c584:	4463      	add	r3, ip
    c586:	3b08      	subs	r3, #8
    c588:	681b      	ldr	r3, [r3, #0]
    c58a:	e000      	b.n	c58e <_extint_get_eic_from_channel+0x3e>
		return NULL;
    c58c:	2300      	movs	r3, #0
}
    c58e:	0018      	movs	r0, r3
    c590:	46bd      	mov	sp, r7
    c592:	b004      	add	sp, #16
    c594:	bd80      	pop	{r7, pc}
    c596:	46c0      	nop			; (mov r8, r8)
    c598:	40001800 	.word	0x40001800

0000c59c <extint_is_syncing>:
 *
 * \retval true  If the module synchronization is ongoing
 * \retval false If the module has completed synchronization
 */
static inline bool extint_is_syncing(void)
{
    c59c:	b580      	push	{r7, lr}
    c59e:	b082      	sub	sp, #8
    c5a0:	af00      	add	r7, sp, #0
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
    c5a2:	4b0f      	ldr	r3, [pc, #60]	; (c5e0 <extint_is_syncing+0x44>)
    c5a4:	603b      	str	r3, [r7, #0]

	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
    c5a6:	2300      	movs	r3, #0
    c5a8:	607b      	str	r3, [r7, #4]
    c5aa:	e011      	b.n	c5d0 <extint_is_syncing+0x34>
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
    c5ac:	687b      	ldr	r3, [r7, #4]
    c5ae:	009b      	lsls	r3, r3, #2
    c5b0:	2208      	movs	r2, #8
    c5b2:	4694      	mov	ip, r2
    c5b4:	44bc      	add	ip, r7
    c5b6:	4463      	add	r3, ip
    c5b8:	3b08      	subs	r3, #8
    c5ba:	681b      	ldr	r3, [r3, #0]
    c5bc:	785b      	ldrb	r3, [r3, #1]
    c5be:	b2db      	uxtb	r3, r3
    c5c0:	b25b      	sxtb	r3, r3
    c5c2:	2b00      	cmp	r3, #0
    c5c4:	da01      	bge.n	c5ca <extint_is_syncing+0x2e>
			return true;
    c5c6:	2301      	movs	r3, #1
    c5c8:	e006      	b.n	c5d8 <extint_is_syncing+0x3c>
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
    c5ca:	687b      	ldr	r3, [r7, #4]
    c5cc:	3301      	adds	r3, #1
    c5ce:	607b      	str	r3, [r7, #4]
    c5d0:	687b      	ldr	r3, [r7, #4]
    c5d2:	2b00      	cmp	r3, #0
    c5d4:	d0ea      	beq.n	c5ac <extint_is_syncing+0x10>
		}
	}
	return false;
    c5d6:	2300      	movs	r3, #0
}
    c5d8:	0018      	movs	r0, r3
    c5da:	46bd      	mov	sp, r7
    c5dc:	b002      	add	sp, #8
    c5de:	bd80      	pop	{r7, pc}
    c5e0:	40001800 	.word	0x40001800

0000c5e4 <_system_extint_init>:
 * \note When SYSTEM module is used, this function will be invoked by
 * \ref system_init() automatically if the module is included.
 */
void _system_extint_init(void);
void _system_extint_init(void)
{
    c5e4:	b580      	push	{r7, lr}
    c5e6:	b084      	sub	sp, #16
    c5e8:	af00      	add	r7, sp, #0
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
    c5ea:	4b2d      	ldr	r3, [pc, #180]	; (c6a0 <_system_extint_init+0xbc>)
    c5ec:	607b      	str	r3, [r7, #4]

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_EIC);
    c5ee:	2140      	movs	r1, #64	; 0x40
    c5f0:	2000      	movs	r0, #0
    c5f2:	4b2c      	ldr	r3, [pc, #176]	; (c6a4 <_system_extint_init+0xc0>)
    c5f4:	4798      	blx	r3

	/* Configure the generic clock for the module and enable it */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
    c5f6:	003b      	movs	r3, r7
    c5f8:	0018      	movs	r0, r3
    c5fa:	4b2b      	ldr	r3, [pc, #172]	; (c6a8 <_system_extint_init+0xc4>)
    c5fc:	4798      	blx	r3
	gclk_chan_conf.source_generator = EXTINT_CLOCK_SOURCE;
    c5fe:	003b      	movs	r3, r7
    c600:	2200      	movs	r2, #0
    c602:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(EIC_GCLK_ID, &gclk_chan_conf);
    c604:	003b      	movs	r3, r7
    c606:	0019      	movs	r1, r3
    c608:	2005      	movs	r0, #5
    c60a:	4b28      	ldr	r3, [pc, #160]	; (c6ac <_system_extint_init+0xc8>)
    c60c:	4798      	blx	r3

	/* Enable the clock anyway, since when needed it will be requested
	 * by External Interrupt driver */
	system_gclk_chan_enable(EIC_GCLK_ID);
    c60e:	2005      	movs	r0, #5
    c610:	4b27      	ldr	r3, [pc, #156]	; (c6b0 <_system_extint_init+0xcc>)
    c612:	4798      	blx	r3

	/* Reset all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
    c614:	2300      	movs	r3, #0
    c616:	60fb      	str	r3, [r7, #12]
    c618:	e018      	b.n	c64c <_system_extint_init+0x68>
		eics[i]->CTRL.reg |= EIC_CTRL_SWRST;
    c61a:	68fb      	ldr	r3, [r7, #12]
    c61c:	009b      	lsls	r3, r3, #2
    c61e:	2210      	movs	r2, #16
    c620:	4694      	mov	ip, r2
    c622:	44bc      	add	ip, r7
    c624:	4463      	add	r3, ip
    c626:	3b0c      	subs	r3, #12
    c628:	681a      	ldr	r2, [r3, #0]
    c62a:	68fb      	ldr	r3, [r7, #12]
    c62c:	009b      	lsls	r3, r3, #2
    c62e:	2110      	movs	r1, #16
    c630:	468c      	mov	ip, r1
    c632:	44bc      	add	ip, r7
    c634:	4463      	add	r3, ip
    c636:	3b0c      	subs	r3, #12
    c638:	681b      	ldr	r3, [r3, #0]
    c63a:	781b      	ldrb	r3, [r3, #0]
    c63c:	b2db      	uxtb	r3, r3
    c63e:	2101      	movs	r1, #1
    c640:	430b      	orrs	r3, r1
    c642:	b2db      	uxtb	r3, r3
    c644:	7013      	strb	r3, [r2, #0]
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
    c646:	68fb      	ldr	r3, [r7, #12]
    c648:	3301      	adds	r3, #1
    c64a:	60fb      	str	r3, [r7, #12]
    c64c:	68fb      	ldr	r3, [r7, #12]
    c64e:	2b00      	cmp	r3, #0
    c650:	d0e3      	beq.n	c61a <_system_extint_init+0x36>
	}

	while (extint_is_syncing()) {
    c652:	46c0      	nop			; (mov r8, r8)
    c654:	4b17      	ldr	r3, [pc, #92]	; (c6b4 <_system_extint_init+0xd0>)
    c656:	4798      	blx	r3
    c658:	1e03      	subs	r3, r0, #0
    c65a:	d1fb      	bne.n	c654 <_system_extint_init+0x70>
	}

	/* Reset the software module */
#if EXTINT_CALLBACK_MODE == true
	/* Clear callback registration table */
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
    c65c:	230b      	movs	r3, #11
    c65e:	18fb      	adds	r3, r7, r3
    c660:	2200      	movs	r2, #0
    c662:	701a      	strb	r2, [r3, #0]
    c664:	e00d      	b.n	c682 <_system_extint_init+0x9e>
		_extint_dev.callbacks[j] = NULL;
    c666:	230b      	movs	r3, #11
    c668:	18fb      	adds	r3, r7, r3
    c66a:	781a      	ldrb	r2, [r3, #0]
    c66c:	4b12      	ldr	r3, [pc, #72]	; (c6b8 <_system_extint_init+0xd4>)
    c66e:	0092      	lsls	r2, r2, #2
    c670:	2100      	movs	r1, #0
    c672:	50d1      	str	r1, [r2, r3]
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
    c674:	230b      	movs	r3, #11
    c676:	18fb      	adds	r3, r7, r3
    c678:	781a      	ldrb	r2, [r3, #0]
    c67a:	230b      	movs	r3, #11
    c67c:	18fb      	adds	r3, r7, r3
    c67e:	3201      	adds	r2, #1
    c680:	701a      	strb	r2, [r3, #0]
    c682:	230b      	movs	r3, #11
    c684:	18fb      	adds	r3, r7, r3
    c686:	781b      	ldrb	r3, [r3, #0]
    c688:	2b0f      	cmp	r3, #15
    c68a:	d9ec      	bls.n	c666 <_system_extint_init+0x82>
	}
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_EIC);
    c68c:	2004      	movs	r0, #4
    c68e:	4b0b      	ldr	r3, [pc, #44]	; (c6bc <_system_extint_init+0xd8>)
    c690:	4798      	blx	r3
#endif

	/* Enables the driver for further use */
	_extint_enable();
    c692:	4b0b      	ldr	r3, [pc, #44]	; (c6c0 <_system_extint_init+0xdc>)
    c694:	4798      	blx	r3
}
    c696:	46c0      	nop			; (mov r8, r8)
    c698:	46bd      	mov	sp, r7
    c69a:	b004      	add	sp, #16
    c69c:	bd80      	pop	{r7, pc}
    c69e:	46c0      	nop			; (mov r8, r8)
    c6a0:	40001800 	.word	0x40001800
    c6a4:	0000c4a1 	.word	0x0000c4a1
    c6a8:	0000c489 	.word	0x0000c489
    c6ac:	0000f23d 	.word	0x0000f23d
    c6b0:	0000f281 	.word	0x0000f281
    c6b4:	0000c59d 	.word	0x0000c59d
    c6b8:	20002b1c 	.word	0x20002b1c
    c6bc:	0000c525 	.word	0x0000c525
    c6c0:	0000c6c5 	.word	0x0000c6c5

0000c6c4 <_extint_enable>:
 *
 * Enables EIC modules.
 * Registered callback list will not be affected if callback mode is used.
 */
void _extint_enable(void)
{
    c6c4:	b580      	push	{r7, lr}
    c6c6:	b082      	sub	sp, #8
    c6c8:	af00      	add	r7, sp, #0
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
    c6ca:	4b15      	ldr	r3, [pc, #84]	; (c720 <_extint_enable+0x5c>)
    c6cc:	603b      	str	r3, [r7, #0]

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
    c6ce:	2300      	movs	r3, #0
    c6d0:	607b      	str	r3, [r7, #4]
    c6d2:	e018      	b.n	c706 <_extint_enable+0x42>
		eics[i]->CTRL.reg |= EIC_CTRL_ENABLE;
    c6d4:	687b      	ldr	r3, [r7, #4]
    c6d6:	009b      	lsls	r3, r3, #2
    c6d8:	2208      	movs	r2, #8
    c6da:	4694      	mov	ip, r2
    c6dc:	44bc      	add	ip, r7
    c6de:	4463      	add	r3, ip
    c6e0:	3b08      	subs	r3, #8
    c6e2:	681a      	ldr	r2, [r3, #0]
    c6e4:	687b      	ldr	r3, [r7, #4]
    c6e6:	009b      	lsls	r3, r3, #2
    c6e8:	2108      	movs	r1, #8
    c6ea:	468c      	mov	ip, r1
    c6ec:	44bc      	add	ip, r7
    c6ee:	4463      	add	r3, ip
    c6f0:	3b08      	subs	r3, #8
    c6f2:	681b      	ldr	r3, [r3, #0]
    c6f4:	781b      	ldrb	r3, [r3, #0]
    c6f6:	b2db      	uxtb	r3, r3
    c6f8:	2102      	movs	r1, #2
    c6fa:	430b      	orrs	r3, r1
    c6fc:	b2db      	uxtb	r3, r3
    c6fe:	7013      	strb	r3, [r2, #0]
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
    c700:	687b      	ldr	r3, [r7, #4]
    c702:	3301      	adds	r3, #1
    c704:	607b      	str	r3, [r7, #4]
    c706:	687b      	ldr	r3, [r7, #4]
    c708:	2b00      	cmp	r3, #0
    c70a:	d0e3      	beq.n	c6d4 <_extint_enable+0x10>
	}

	while (extint_is_syncing()) {
    c70c:	46c0      	nop			; (mov r8, r8)
    c70e:	4b05      	ldr	r3, [pc, #20]	; (c724 <_extint_enable+0x60>)
    c710:	4798      	blx	r3
    c712:	1e03      	subs	r3, r0, #0
    c714:	d1fb      	bne.n	c70e <_extint_enable+0x4a>
		/* Wait for all hardware modules to complete synchronization */
	}
}
    c716:	46c0      	nop			; (mov r8, r8)
    c718:	46bd      	mov	sp, r7
    c71a:	b002      	add	sp, #8
    c71c:	bd80      	pop	{r7, pc}
    c71e:	46c0      	nop			; (mov r8, r8)
    c720:	40001800 	.word	0x40001800
    c724:	0000c59d 	.word	0x0000c59d

0000c728 <extint_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
void extint_chan_get_config_defaults(
		struct extint_chan_conf *const config)
{
    c728:	b580      	push	{r7, lr}
    c72a:	b082      	sub	sp, #8
    c72c:	af00      	add	r7, sp, #0
    c72e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->gpio_pin            = 0;
    c730:	687b      	ldr	r3, [r7, #4]
    c732:	2200      	movs	r2, #0
    c734:	601a      	str	r2, [r3, #0]
	config->gpio_pin_mux        = 0;
    c736:	687b      	ldr	r3, [r7, #4]
    c738:	2200      	movs	r2, #0
    c73a:	605a      	str	r2, [r3, #4]
	config->gpio_pin_pull       = EXTINT_PULL_UP;
    c73c:	687b      	ldr	r3, [r7, #4]
    c73e:	2201      	movs	r2, #1
    c740:	721a      	strb	r2, [r3, #8]
	config->wake_if_sleeping    = true;
    c742:	687b      	ldr	r3, [r7, #4]
    c744:	2201      	movs	r2, #1
    c746:	725a      	strb	r2, [r3, #9]
	config->filter_input_signal = false;
    c748:	687b      	ldr	r3, [r7, #4]
    c74a:	2200      	movs	r2, #0
    c74c:	729a      	strb	r2, [r3, #10]
	config->detection_criteria  = EXTINT_DETECT_FALLING;
    c74e:	687b      	ldr	r3, [r7, #4]
    c750:	2202      	movs	r2, #2
    c752:	72da      	strb	r2, [r3, #11]
}
    c754:	46c0      	nop			; (mov r8, r8)
    c756:	46bd      	mov	sp, r7
    c758:	b002      	add	sp, #8
    c75a:	bd80      	pop	{r7, pc}

0000c75c <extint_chan_set_config>:

 */
void extint_chan_set_config(
		const uint8_t channel,
		const struct extint_chan_conf *const config)
{
    c75c:	b580      	push	{r7, lr}
    c75e:	b086      	sub	sp, #24
    c760:	af00      	add	r7, sp, #0
    c762:	0002      	movs	r2, r0
    c764:	6039      	str	r1, [r7, #0]
    c766:	1dfb      	adds	r3, r7, #7
    c768:	701a      	strb	r2, [r3, #0]
	Assert(!(!system_gclk_gen_is_enabled(EXTINT_CLOCK_SOURCE) &&
		_extint_is_gclk_required(config->filter_input_signal,
			config->detection_criteria)));

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);
    c76a:	2308      	movs	r3, #8
    c76c:	18fb      	adds	r3, r7, r3
    c76e:	0018      	movs	r0, r3
    c770:	4b36      	ldr	r3, [pc, #216]	; (c84c <extint_chan_set_config+0xf0>)
    c772:	4798      	blx	r3

	pinmux_config.mux_position = config->gpio_pin_mux;
    c774:	683b      	ldr	r3, [r7, #0]
    c776:	685b      	ldr	r3, [r3, #4]
    c778:	b2da      	uxtb	r2, r3
    c77a:	2308      	movs	r3, #8
    c77c:	18fb      	adds	r3, r7, r3
    c77e:	701a      	strb	r2, [r3, #0]
	pinmux_config.direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    c780:	2308      	movs	r3, #8
    c782:	18fb      	adds	r3, r7, r3
    c784:	2200      	movs	r2, #0
    c786:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->gpio_pin_pull;
    c788:	683b      	ldr	r3, [r7, #0]
    c78a:	7a1a      	ldrb	r2, [r3, #8]
    c78c:	2308      	movs	r3, #8
    c78e:	18fb      	adds	r3, r7, r3
    c790:	709a      	strb	r2, [r3, #2]
	system_pinmux_pin_set_config(config->gpio_pin, &pinmux_config);
    c792:	683b      	ldr	r3, [r7, #0]
    c794:	681b      	ldr	r3, [r3, #0]
    c796:	b2db      	uxtb	r3, r3
    c798:	2208      	movs	r2, #8
    c79a:	18ba      	adds	r2, r7, r2
    c79c:	0011      	movs	r1, r2
    c79e:	0018      	movs	r0, r3
    c7a0:	4b2b      	ldr	r3, [pc, #172]	; (c850 <extint_chan_set_config+0xf4>)
    c7a2:	4798      	blx	r3

	/* Get a pointer to the module hardware instance */
	Eic *const EIC_module = _extint_get_eic_from_channel(channel);
    c7a4:	1dfb      	adds	r3, r7, #7
    c7a6:	781b      	ldrb	r3, [r3, #0]
    c7a8:	0018      	movs	r0, r3
    c7aa:	4b2a      	ldr	r3, [pc, #168]	; (c854 <extint_chan_set_config+0xf8>)
    c7ac:	4798      	blx	r3
    c7ae:	0003      	movs	r3, r0
    c7b0:	613b      	str	r3, [r7, #16]

	uint32_t config_pos = (4 * (channel % 8));
    c7b2:	1dfb      	adds	r3, r7, #7
    c7b4:	781b      	ldrb	r3, [r3, #0]
    c7b6:	2207      	movs	r2, #7
    c7b8:	4013      	ands	r3, r2
    c7ba:	009b      	lsls	r3, r3, #2
    c7bc:	60fb      	str	r3, [r7, #12]
	uint32_t new_config;

	/* Determine the channel's new edge detection configuration */
	new_config = (config->detection_criteria << EIC_CONFIG_SENSE0_Pos);
    c7be:	683b      	ldr	r3, [r7, #0]
    c7c0:	7adb      	ldrb	r3, [r3, #11]
    c7c2:	617b      	str	r3, [r7, #20]

	/* Enable the hardware signal filter if requested in the config */
	if (config->filter_input_signal) {
    c7c4:	683b      	ldr	r3, [r7, #0]
    c7c6:	7a9b      	ldrb	r3, [r3, #10]
    c7c8:	2b00      	cmp	r3, #0
    c7ca:	d003      	beq.n	c7d4 <extint_chan_set_config+0x78>
		new_config |= EIC_CONFIG_FILTEN0;
    c7cc:	697b      	ldr	r3, [r7, #20]
    c7ce:	2208      	movs	r2, #8
    c7d0:	4313      	orrs	r3, r2
    c7d2:	617b      	str	r3, [r7, #20]
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
    c7d4:	1dfb      	adds	r3, r7, #7
    c7d6:	781b      	ldrb	r3, [r3, #0]
    c7d8:	08db      	lsrs	r3, r3, #3
    c7da:	b2db      	uxtb	r3, r3
    c7dc:	0018      	movs	r0, r3
		= (EIC_module->CONFIG[channel / 8].reg &
    c7de:	1dfb      	adds	r3, r7, #7
    c7e0:	781b      	ldrb	r3, [r3, #0]
    c7e2:	08db      	lsrs	r3, r3, #3
    c7e4:	b2db      	uxtb	r3, r3
    c7e6:	001a      	movs	r2, r3
    c7e8:	693b      	ldr	r3, [r7, #16]
    c7ea:	3206      	adds	r2, #6
    c7ec:	0092      	lsls	r2, r2, #2
    c7ee:	58d3      	ldr	r3, [r2, r3]
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
    c7f0:	210f      	movs	r1, #15
    c7f2:	68fa      	ldr	r2, [r7, #12]
    c7f4:	4091      	lsls	r1, r2
    c7f6:	000a      	movs	r2, r1
    c7f8:	43d2      	mvns	r2, r2
		= (EIC_module->CONFIG[channel / 8].reg &
    c7fa:	401a      	ands	r2, r3
			(new_config << config_pos);
    c7fc:	6979      	ldr	r1, [r7, #20]
    c7fe:	68fb      	ldr	r3, [r7, #12]
    c800:	4099      	lsls	r1, r3
    c802:	000b      	movs	r3, r1
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
    c804:	431a      	orrs	r2, r3
    c806:	0011      	movs	r1, r2
		= (EIC_module->CONFIG[channel / 8].reg &
    c808:	693b      	ldr	r3, [r7, #16]
    c80a:	1d82      	adds	r2, r0, #6
    c80c:	0092      	lsls	r2, r2, #2
    c80e:	50d1      	str	r1, [r2, r3]

	/* Set the channel's new wake up mode setting */
	if (config->wake_if_sleeping) {
    c810:	683b      	ldr	r3, [r7, #0]
    c812:	7a5b      	ldrb	r3, [r3, #9]
    c814:	2b00      	cmp	r3, #0
    c816:	d00a      	beq.n	c82e <extint_chan_set_config+0xd2>
		EIC_module->WAKEUP.reg |=  (1UL << channel);
    c818:	693b      	ldr	r3, [r7, #16]
    c81a:	695a      	ldr	r2, [r3, #20]
    c81c:	1dfb      	adds	r3, r7, #7
    c81e:	781b      	ldrb	r3, [r3, #0]
    c820:	2101      	movs	r1, #1
    c822:	4099      	lsls	r1, r3
    c824:	000b      	movs	r3, r1
    c826:	431a      	orrs	r2, r3
    c828:	693b      	ldr	r3, [r7, #16]
    c82a:	615a      	str	r2, [r3, #20]
	} else {
		EIC_module->WAKEUP.reg &= ~(1UL << channel);
	}
}
    c82c:	e00a      	b.n	c844 <extint_chan_set_config+0xe8>
		EIC_module->WAKEUP.reg &= ~(1UL << channel);
    c82e:	693b      	ldr	r3, [r7, #16]
    c830:	695b      	ldr	r3, [r3, #20]
    c832:	1dfa      	adds	r2, r7, #7
    c834:	7812      	ldrb	r2, [r2, #0]
    c836:	2101      	movs	r1, #1
    c838:	4091      	lsls	r1, r2
    c83a:	000a      	movs	r2, r1
    c83c:	43d2      	mvns	r2, r2
    c83e:	401a      	ands	r2, r3
    c840:	693b      	ldr	r3, [r7, #16]
    c842:	615a      	str	r2, [r3, #20]
}
    c844:	46c0      	nop			; (mov r8, r8)
    c846:	46bd      	mov	sp, r7
    c848:	b006      	add	sp, #24
    c84a:	bd80      	pop	{r7, pc}
    c84c:	0000c4fd 	.word	0x0000c4fd
    c850:	000003a1 	.word	0x000003a1
    c854:	0000c551 	.word	0x0000c551

0000c858 <system_gclk_chan_get_config_defaults>:
{
    c858:	b580      	push	{r7, lr}
    c85a:	b082      	sub	sp, #8
    c85c:	af00      	add	r7, sp, #0
    c85e:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
    c860:	687b      	ldr	r3, [r7, #4]
    c862:	2200      	movs	r2, #0
    c864:	701a      	strb	r2, [r3, #0]
}
    c866:	46c0      	nop			; (mov r8, r8)
    c868:	46bd      	mov	sp, r7
    c86a:	b002      	add	sp, #8
    c86c:	bd80      	pop	{r7, pc}

0000c86e <long_division>:
/**
 * \internal Calculate 64 bit division, ref can be found in
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
    c86e:	b5f0      	push	{r4, r5, r6, r7, lr}
    c870:	b08d      	sub	sp, #52	; 0x34
    c872:	af00      	add	r7, sp, #0
    c874:	60b8      	str	r0, [r7, #8]
    c876:	60f9      	str	r1, [r7, #12]
    c878:	603a      	str	r2, [r7, #0]
    c87a:	607b      	str	r3, [r7, #4]
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
    c87c:	2300      	movs	r3, #0
    c87e:	2400      	movs	r4, #0
    c880:	623b      	str	r3, [r7, #32]
    c882:	627c      	str	r4, [r7, #36]	; 0x24
    c884:	2300      	movs	r3, #0
    c886:	2400      	movs	r4, #0
    c888:	61bb      	str	r3, [r7, #24]
    c88a:	61fc      	str	r4, [r7, #28]
	for (i = 63; i >= 0; i--) {
    c88c:	233f      	movs	r3, #63	; 0x3f
    c88e:	62fb      	str	r3, [r7, #44]	; 0x2c
    c890:	e053      	b.n	c93a <long_division+0xcc>
		bit_shift = (uint64_t)1 << i;
    c892:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    c894:	3b20      	subs	r3, #32
    c896:	2b00      	cmp	r3, #0
    c898:	db04      	blt.n	c8a4 <long_division+0x36>
    c89a:	2201      	movs	r2, #1
    c89c:	409a      	lsls	r2, r3
    c89e:	0013      	movs	r3, r2
    c8a0:	617b      	str	r3, [r7, #20]
    c8a2:	e00b      	b.n	c8bc <long_division+0x4e>
    c8a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    c8a6:	2220      	movs	r2, #32
    c8a8:	1ad3      	subs	r3, r2, r3
    c8aa:	2201      	movs	r2, #1
    c8ac:	40da      	lsrs	r2, r3
    c8ae:	0013      	movs	r3, r2
    c8b0:	2100      	movs	r1, #0
    c8b2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    c8b4:	4091      	lsls	r1, r2
    c8b6:	000a      	movs	r2, r1
    c8b8:	4313      	orrs	r3, r2
    c8ba:	617b      	str	r3, [r7, #20]
    c8bc:	2201      	movs	r2, #1
    c8be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    c8c0:	409a      	lsls	r2, r3
    c8c2:	0013      	movs	r3, r2
    c8c4:	613b      	str	r3, [r7, #16]

		r = r << 1;
    c8c6:	69bb      	ldr	r3, [r7, #24]
    c8c8:	69fc      	ldr	r4, [r7, #28]
    c8ca:	18db      	adds	r3, r3, r3
    c8cc:	4164      	adcs	r4, r4
    c8ce:	61bb      	str	r3, [r7, #24]
    c8d0:	61fc      	str	r4, [r7, #28]

		if (n & bit_shift) {
    c8d2:	68bb      	ldr	r3, [r7, #8]
    c8d4:	693a      	ldr	r2, [r7, #16]
    c8d6:	401a      	ands	r2, r3
    c8d8:	0015      	movs	r5, r2
    c8da:	68fb      	ldr	r3, [r7, #12]
    c8dc:	697a      	ldr	r2, [r7, #20]
    c8de:	401a      	ands	r2, r3
    c8e0:	0016      	movs	r6, r2
    c8e2:	002b      	movs	r3, r5
    c8e4:	4333      	orrs	r3, r6
    c8e6:	d007      	beq.n	c8f8 <long_division+0x8a>
			r |= 0x01;
    c8e8:	69bb      	ldr	r3, [r7, #24]
    c8ea:	2201      	movs	r2, #1
    c8ec:	4313      	orrs	r3, r2
    c8ee:	61bb      	str	r3, [r7, #24]
    c8f0:	69fb      	ldr	r3, [r7, #28]
    c8f2:	2200      	movs	r2, #0
    c8f4:	4313      	orrs	r3, r2
    c8f6:	61fb      	str	r3, [r7, #28]
		}

		if (r >= d) {
    c8f8:	687a      	ldr	r2, [r7, #4]
    c8fa:	69fb      	ldr	r3, [r7, #28]
    c8fc:	429a      	cmp	r2, r3
    c8fe:	d819      	bhi.n	c934 <long_division+0xc6>
    c900:	687a      	ldr	r2, [r7, #4]
    c902:	69fb      	ldr	r3, [r7, #28]
    c904:	429a      	cmp	r2, r3
    c906:	d103      	bne.n	c910 <long_division+0xa2>
    c908:	683a      	ldr	r2, [r7, #0]
    c90a:	69bb      	ldr	r3, [r7, #24]
    c90c:	429a      	cmp	r2, r3
    c90e:	d811      	bhi.n	c934 <long_division+0xc6>
			r = r - d;
    c910:	69b9      	ldr	r1, [r7, #24]
    c912:	69fa      	ldr	r2, [r7, #28]
    c914:	683b      	ldr	r3, [r7, #0]
    c916:	687c      	ldr	r4, [r7, #4]
    c918:	1ac9      	subs	r1, r1, r3
    c91a:	41a2      	sbcs	r2, r4
    c91c:	000b      	movs	r3, r1
    c91e:	0014      	movs	r4, r2
    c920:	61bb      	str	r3, [r7, #24]
    c922:	61fc      	str	r4, [r7, #28]
			q |= bit_shift;
    c924:	6a3a      	ldr	r2, [r7, #32]
    c926:	693b      	ldr	r3, [r7, #16]
    c928:	4313      	orrs	r3, r2
    c92a:	623b      	str	r3, [r7, #32]
    c92c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    c92e:	697b      	ldr	r3, [r7, #20]
    c930:	4313      	orrs	r3, r2
    c932:	627b      	str	r3, [r7, #36]	; 0x24
	for (i = 63; i >= 0; i--) {
    c934:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    c936:	3b01      	subs	r3, #1
    c938:	62fb      	str	r3, [r7, #44]	; 0x2c
    c93a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    c93c:	2b00      	cmp	r3, #0
    c93e:	daa8      	bge.n	c892 <long_division+0x24>
		}
	}

	return q;
    c940:	6a3b      	ldr	r3, [r7, #32]
    c942:	6a7c      	ldr	r4, [r7, #36]	; 0x24
}
    c944:	0018      	movs	r0, r3
    c946:	0021      	movs	r1, r4
    c948:	46bd      	mov	sp, r7
    c94a:	b00d      	add	sp, #52	; 0x34
    c94c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000c94e <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
    c94e:	b580      	push	{r7, lr}
    c950:	b086      	sub	sp, #24
    c952:	af00      	add	r7, sp, #0
    c954:	60f8      	str	r0, [r7, #12]
    c956:	60b9      	str	r1, [r7, #8]
    c958:	607a      	str	r2, [r7, #4]
	/* Baud value variable */
	uint16_t baud_calculated = 0;
    c95a:	2316      	movs	r3, #22
    c95c:	18fb      	adds	r3, r7, r3
    c95e:	2200      	movs	r2, #0
    c960:	801a      	strh	r2, [r3, #0]
	uint32_t clock_value = external_clock;
    c962:	68bb      	ldr	r3, [r7, #8]
    c964:	613b      	str	r3, [r7, #16]


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
    c966:	68bb      	ldr	r3, [r7, #8]
    c968:	085a      	lsrs	r2, r3, #1
    c96a:	68fb      	ldr	r3, [r7, #12]
    c96c:	429a      	cmp	r2, r3
    c96e:	d201      	bcs.n	c974 <_sercom_get_sync_baud_val+0x26>
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    c970:	2340      	movs	r3, #64	; 0x40
    c972:	e026      	b.n	c9c2 <_sercom_get_sync_baud_val+0x74>
	}

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
    c974:	68bb      	ldr	r3, [r7, #8]
    c976:	085b      	lsrs	r3, r3, #1
    c978:	613b      	str	r3, [r7, #16]
	while (clock_value >= baudrate) {
    c97a:	e00a      	b.n	c992 <_sercom_get_sync_baud_val+0x44>
		clock_value = clock_value - baudrate;
    c97c:	693a      	ldr	r2, [r7, #16]
    c97e:	68fb      	ldr	r3, [r7, #12]
    c980:	1ad3      	subs	r3, r2, r3
    c982:	613b      	str	r3, [r7, #16]
		baud_calculated++;
    c984:	2316      	movs	r3, #22
    c986:	18fb      	adds	r3, r7, r3
    c988:	881a      	ldrh	r2, [r3, #0]
    c98a:	2316      	movs	r3, #22
    c98c:	18fb      	adds	r3, r7, r3
    c98e:	3201      	adds	r2, #1
    c990:	801a      	strh	r2, [r3, #0]
	while (clock_value >= baudrate) {
    c992:	693a      	ldr	r2, [r7, #16]
    c994:	68fb      	ldr	r3, [r7, #12]
    c996:	429a      	cmp	r2, r3
    c998:	d2f0      	bcs.n	c97c <_sercom_get_sync_baud_val+0x2e>
	}
	baud_calculated = baud_calculated - 1;
    c99a:	2316      	movs	r3, #22
    c99c:	18fb      	adds	r3, r7, r3
    c99e:	2216      	movs	r2, #22
    c9a0:	18ba      	adds	r2, r7, r2
    c9a2:	8812      	ldrh	r2, [r2, #0]
    c9a4:	3a01      	subs	r2, #1
    c9a6:	801a      	strh	r2, [r3, #0]

	/* Check if BAUD value is more than 255, which is maximum
	 * for synchronous mode */
	if (baud_calculated > 0xFF) {
    c9a8:	2316      	movs	r3, #22
    c9aa:	18fb      	adds	r3, r7, r3
    c9ac:	881b      	ldrh	r3, [r3, #0]
    c9ae:	2bff      	cmp	r3, #255	; 0xff
    c9b0:	d901      	bls.n	c9b6 <_sercom_get_sync_baud_val+0x68>
		/* Return with an error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    c9b2:	2340      	movs	r3, #64	; 0x40
    c9b4:	e005      	b.n	c9c2 <_sercom_get_sync_baud_val+0x74>
	} else {
		*baudvalue = baud_calculated;
    c9b6:	687b      	ldr	r3, [r7, #4]
    c9b8:	2216      	movs	r2, #22
    c9ba:	18ba      	adds	r2, r7, r2
    c9bc:	8812      	ldrh	r2, [r2, #0]
    c9be:	801a      	strh	r2, [r3, #0]
		return STATUS_OK;
    c9c0:	2300      	movs	r3, #0
	}
}
    c9c2:	0018      	movs	r0, r3
    c9c4:	46bd      	mov	sp, r7
    c9c6:	b006      	add	sp, #24
    c9c8:	bd80      	pop	{r7, pc}
	...

0000c9cc <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
    c9cc:	b5f0      	push	{r4, r5, r6, r7, lr}
    c9ce:	b0a1      	sub	sp, #132	; 0x84
    c9d0:	af00      	add	r7, sp, #0
    c9d2:	64f8      	str	r0, [r7, #76]	; 0x4c
    c9d4:	64b9      	str	r1, [r7, #72]	; 0x48
    c9d6:	647a      	str	r2, [r7, #68]	; 0x44
    c9d8:	2243      	movs	r2, #67	; 0x43
    c9da:	18ba      	adds	r2, r7, r2
    c9dc:	7013      	strb	r3, [r2, #0]
	/* Temporary variables  */
	uint64_t ratio = 0;
    c9de:	2300      	movs	r3, #0
    c9e0:	2400      	movs	r4, #0
    c9e2:	673b      	str	r3, [r7, #112]	; 0x70
    c9e4:	677c      	str	r4, [r7, #116]	; 0x74
	uint64_t scale = 0;
    c9e6:	2300      	movs	r3, #0
    c9e8:	2400      	movs	r4, #0
    c9ea:	66bb      	str	r3, [r7, #104]	; 0x68
    c9ec:	66fc      	str	r4, [r7, #108]	; 0x6c
	uint64_t baud_calculated = 0;
    c9ee:	2300      	movs	r3, #0
    c9f0:	2400      	movs	r4, #0
    c9f2:	67bb      	str	r3, [r7, #120]	; 0x78
    c9f4:	67fc      	str	r4, [r7, #124]	; 0x7c
	uint8_t baud_fp;
	uint32_t baud_int = 0;
    c9f6:	2300      	movs	r3, #0
    c9f8:	667b      	str	r3, [r7, #100]	; 0x64
	uint64_t temp1;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
    c9fa:	2358      	movs	r3, #88	; 0x58
    c9fc:	2240      	movs	r2, #64	; 0x40
    c9fe:	4694      	mov	ip, r2
    ca00:	44bc      	add	ip, r7
    ca02:	4463      	add	r3, ip
    ca04:	781a      	ldrb	r2, [r3, #0]
    ca06:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    ca08:	435a      	muls	r2, r3
    ca0a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    ca0c:	429a      	cmp	r2, r3
    ca0e:	d901      	bls.n	ca14 <_sercom_get_async_baud_val+0x48>
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    ca10:	2340      	movs	r3, #64	; 0x40
    ca12:	e0b3      	b.n	cb7c <_sercom_get_async_baud_val+0x1b0>
	}

	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
    ca14:	2343      	movs	r3, #67	; 0x43
    ca16:	18fb      	adds	r3, r7, r3
    ca18:	781b      	ldrb	r3, [r3, #0]
    ca1a:	2b00      	cmp	r3, #0
    ca1c:	d13d      	bne.n	ca9a <_sercom_get_async_baud_val+0xce>
		/* Calculate the BAUD value */
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
    ca1e:	2358      	movs	r3, #88	; 0x58
    ca20:	2240      	movs	r2, #64	; 0x40
    ca22:	4694      	mov	ip, r2
    ca24:	44bc      	add	ip, r7
    ca26:	4463      	add	r3, ip
    ca28:	781b      	ldrb	r3, [r3, #0]
    ca2a:	b2db      	uxtb	r3, r3
    ca2c:	613b      	str	r3, [r7, #16]
    ca2e:	2300      	movs	r3, #0
    ca30:	617b      	str	r3, [r7, #20]
    ca32:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    ca34:	60bb      	str	r3, [r7, #8]
    ca36:	2300      	movs	r3, #0
    ca38:	60fb      	str	r3, [r7, #12]
    ca3a:	4c52      	ldr	r4, [pc, #328]	; (cb84 <_sercom_get_async_baud_val+0x1b8>)
    ca3c:	68ba      	ldr	r2, [r7, #8]
    ca3e:	68fb      	ldr	r3, [r7, #12]
    ca40:	6938      	ldr	r0, [r7, #16]
    ca42:	6979      	ldr	r1, [r7, #20]
    ca44:	47a0      	blx	r4
    ca46:	0003      	movs	r3, r0
    ca48:	000c      	movs	r4, r1
    ca4a:	001b      	movs	r3, r3
    ca4c:	65fb      	str	r3, [r7, #92]	; 0x5c
    ca4e:	2300      	movs	r3, #0
    ca50:	65bb      	str	r3, [r7, #88]	; 0x58
		ratio = long_division(temp1, peripheral_clock);
    ca52:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    ca54:	603b      	str	r3, [r7, #0]
    ca56:	2300      	movs	r3, #0
    ca58:	607b      	str	r3, [r7, #4]
    ca5a:	6db8      	ldr	r0, [r7, #88]	; 0x58
    ca5c:	6df9      	ldr	r1, [r7, #92]	; 0x5c
    ca5e:	683a      	ldr	r2, [r7, #0]
    ca60:	687b      	ldr	r3, [r7, #4]
    ca62:	4c49      	ldr	r4, [pc, #292]	; (cb88 <_sercom_get_async_baud_val+0x1bc>)
    ca64:	47a0      	blx	r4
    ca66:	0003      	movs	r3, r0
    ca68:	000c      	movs	r4, r1
    ca6a:	673b      	str	r3, [r7, #112]	; 0x70
    ca6c:	677c      	str	r4, [r7, #116]	; 0x74
		scale = ((uint64_t)1 << SHIFT) - ratio;
    ca6e:	2100      	movs	r1, #0
    ca70:	2201      	movs	r2, #1
    ca72:	6f3b      	ldr	r3, [r7, #112]	; 0x70
    ca74:	6f7c      	ldr	r4, [r7, #116]	; 0x74
    ca76:	1ac9      	subs	r1, r1, r3
    ca78:	41a2      	sbcs	r2, r4
    ca7a:	000b      	movs	r3, r1
    ca7c:	0014      	movs	r4, r2
    ca7e:	66bb      	str	r3, [r7, #104]	; 0x68
    ca80:	66fc      	str	r4, [r7, #108]	; 0x6c
		baud_calculated = (65536 * scale) >> SHIFT;
    ca82:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    ca84:	0c1b      	lsrs	r3, r3, #16
    ca86:	6efa      	ldr	r2, [r7, #108]	; 0x6c
    ca88:	0416      	lsls	r6, r2, #16
    ca8a:	431e      	orrs	r6, r3
    ca8c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    ca8e:	041d      	lsls	r5, r3, #16
    ca90:	0033      	movs	r3, r6
    ca92:	67bb      	str	r3, [r7, #120]	; 0x78
    ca94:	2300      	movs	r3, #0
    ca96:	67fb      	str	r3, [r7, #124]	; 0x7c
    ca98:	e06a      	b.n	cb70 <_sercom_get_async_baud_val+0x1a4>
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
    ca9a:	2343      	movs	r3, #67	; 0x43
    ca9c:	18fb      	adds	r3, r7, r3
    ca9e:	781b      	ldrb	r3, [r3, #0]
    caa0:	2b01      	cmp	r3, #1
    caa2:	d165      	bne.n	cb70 <_sercom_get_async_baud_val+0x1a4>
		temp1 = ((uint64_t)baudrate * sample_num);
    caa4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    caa6:	633b      	str	r3, [r7, #48]	; 0x30
    caa8:	2300      	movs	r3, #0
    caaa:	637b      	str	r3, [r7, #52]	; 0x34
    caac:	2358      	movs	r3, #88	; 0x58
    caae:	2240      	movs	r2, #64	; 0x40
    cab0:	4694      	mov	ip, r2
    cab2:	44bc      	add	ip, r7
    cab4:	4463      	add	r3, ip
    cab6:	781b      	ldrb	r3, [r3, #0]
    cab8:	b2db      	uxtb	r3, r3
    caba:	62bb      	str	r3, [r7, #40]	; 0x28
    cabc:	2300      	movs	r3, #0
    cabe:	62fb      	str	r3, [r7, #44]	; 0x2c
    cac0:	4c30      	ldr	r4, [pc, #192]	; (cb84 <_sercom_get_async_baud_val+0x1b8>)
    cac2:	6aba      	ldr	r2, [r7, #40]	; 0x28
    cac4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    cac6:	6b38      	ldr	r0, [r7, #48]	; 0x30
    cac8:	6b79      	ldr	r1, [r7, #52]	; 0x34
    caca:	47a0      	blx	r4
    cacc:	0003      	movs	r3, r0
    cace:	000c      	movs	r4, r1
    cad0:	65bb      	str	r3, [r7, #88]	; 0x58
    cad2:	65fc      	str	r4, [r7, #92]	; 0x5c
		baud_int = long_division( peripheral_clock, temp1);
    cad4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    cad6:	623b      	str	r3, [r7, #32]
    cad8:	2300      	movs	r3, #0
    cada:	627b      	str	r3, [r7, #36]	; 0x24
    cadc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    cade:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
    cae0:	001a      	movs	r2, r3
    cae2:	0023      	movs	r3, r4
    cae4:	6a38      	ldr	r0, [r7, #32]
    cae6:	6a79      	ldr	r1, [r7, #36]	; 0x24
    cae8:	4c27      	ldr	r4, [pc, #156]	; (cb88 <_sercom_get_async_baud_val+0x1bc>)
    caea:	47a0      	blx	r4
    caec:	0003      	movs	r3, r0
    caee:	000c      	movs	r4, r1
    caf0:	667b      	str	r3, [r7, #100]	; 0x64
		if(baud_int > BAUD_INT_MAX) {
    caf2:	6e7a      	ldr	r2, [r7, #100]	; 0x64
    caf4:	2380      	movs	r3, #128	; 0x80
    caf6:	019b      	lsls	r3, r3, #6
    caf8:	429a      	cmp	r2, r3
    cafa:	d901      	bls.n	cb00 <_sercom_get_async_baud_val+0x134>
				return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    cafc:	2340      	movs	r3, #64	; 0x40
    cafe:	e03d      	b.n	cb7c <_sercom_get_async_baud_val+0x1b0>
		}
		temp1 = long_division( 8 * (uint64_t)peripheral_clock, temp1);
    cb00:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    cb02:	61bb      	str	r3, [r7, #24]
    cb04:	2300      	movs	r3, #0
    cb06:	61fb      	str	r3, [r7, #28]
    cb08:	69b9      	ldr	r1, [r7, #24]
    cb0a:	69fa      	ldr	r2, [r7, #28]
    cb0c:	000b      	movs	r3, r1
    cb0e:	0f5b      	lsrs	r3, r3, #29
    cb10:	0010      	movs	r0, r2
    cb12:	00c0      	lsls	r0, r0, #3
    cb14:	63f8      	str	r0, [r7, #60]	; 0x3c
    cb16:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
    cb18:	4318      	orrs	r0, r3
    cb1a:	63f8      	str	r0, [r7, #60]	; 0x3c
    cb1c:	000b      	movs	r3, r1
    cb1e:	00db      	lsls	r3, r3, #3
    cb20:	63bb      	str	r3, [r7, #56]	; 0x38
    cb22:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    cb24:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
    cb26:	001a      	movs	r2, r3
    cb28:	0023      	movs	r3, r4
    cb2a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
    cb2c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
    cb2e:	4c16      	ldr	r4, [pc, #88]	; (cb88 <_sercom_get_async_baud_val+0x1bc>)
    cb30:	47a0      	blx	r4
    cb32:	0003      	movs	r3, r0
    cb34:	000c      	movs	r4, r1
    cb36:	65bb      	str	r3, [r7, #88]	; 0x58
    cb38:	65fc      	str	r4, [r7, #92]	; 0x5c
		baud_fp = temp1 - 8 * baud_int;
    cb3a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    cb3c:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
    cb3e:	b2d9      	uxtb	r1, r3
    cb40:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    cb42:	b2db      	uxtb	r3, r3
    cb44:	00db      	lsls	r3, r3, #3
    cb46:	b2da      	uxtb	r2, r3
    cb48:	2317      	movs	r3, #23
    cb4a:	2040      	movs	r0, #64	; 0x40
    cb4c:	4684      	mov	ip, r0
    cb4e:	44bc      	add	ip, r7
    cb50:	4463      	add	r3, ip
    cb52:	1a8a      	subs	r2, r1, r2
    cb54:	701a      	strb	r2, [r3, #0]
		baud_calculated = baud_int | (baud_fp << 13);
    cb56:	2317      	movs	r3, #23
    cb58:	2240      	movs	r2, #64	; 0x40
    cb5a:	4694      	mov	ip, r2
    cb5c:	44bc      	add	ip, r7
    cb5e:	4463      	add	r3, ip
    cb60:	781b      	ldrb	r3, [r3, #0]
    cb62:	035b      	lsls	r3, r3, #13
    cb64:	001a      	movs	r2, r3
    cb66:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    cb68:	4313      	orrs	r3, r2
    cb6a:	67bb      	str	r3, [r7, #120]	; 0x78
    cb6c:	2300      	movs	r3, #0
    cb6e:	67fb      	str	r3, [r7, #124]	; 0x7c
	}

	*baudval = baud_calculated;
    cb70:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    cb72:	6ffc      	ldr	r4, [r7, #124]	; 0x7c
    cb74:	b29a      	uxth	r2, r3
    cb76:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    cb78:	801a      	strh	r2, [r3, #0]
	return STATUS_OK;
    cb7a:	2300      	movs	r3, #0
}
    cb7c:	0018      	movs	r0, r3
    cb7e:	46bd      	mov	sp, r7
    cb80:	b021      	add	sp, #132	; 0x84
    cb82:	bdf0      	pop	{r4, r5, r6, r7, pc}
    cb84:	0001a0bd 	.word	0x0001a0bd
    cb88:	0000c86f 	.word	0x0000c86f

0000cb8c <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
    cb8c:	b580      	push	{r7, lr}
    cb8e:	b084      	sub	sp, #16
    cb90:	af00      	add	r7, sp, #0
    cb92:	0002      	movs	r2, r0
    cb94:	1dfb      	adds	r3, r7, #7
    cb96:	701a      	strb	r2, [r3, #0]
    cb98:	1dbb      	adds	r3, r7, #6
    cb9a:	1c0a      	adds	r2, r1, #0
    cb9c:	701a      	strb	r2, [r3, #0]
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
    cb9e:	4b1a      	ldr	r3, [pc, #104]	; (cc08 <sercom_set_gclk_generator+0x7c>)
    cba0:	781b      	ldrb	r3, [r3, #0]
    cba2:	2201      	movs	r2, #1
    cba4:	4053      	eors	r3, r2
    cba6:	b2db      	uxtb	r3, r3
    cba8:	2b00      	cmp	r3, #0
    cbaa:	d103      	bne.n	cbb4 <sercom_set_gclk_generator+0x28>
    cbac:	1dbb      	adds	r3, r7, #6
    cbae:	781b      	ldrb	r3, [r3, #0]
    cbb0:	2b00      	cmp	r3, #0
    cbb2:	d01b      	beq.n	cbec <sercom_set_gclk_generator+0x60>
		/* Create and fill a GCLK configuration structure for the new config */
		struct system_gclk_chan_config gclk_chan_conf;
		system_gclk_chan_get_config_defaults(&gclk_chan_conf);
    cbb4:	230c      	movs	r3, #12
    cbb6:	18fb      	adds	r3, r7, r3
    cbb8:	0018      	movs	r0, r3
    cbba:	4b14      	ldr	r3, [pc, #80]	; (cc0c <sercom_set_gclk_generator+0x80>)
    cbbc:	4798      	blx	r3
		gclk_chan_conf.source_generator = generator_source;
    cbbe:	230c      	movs	r3, #12
    cbc0:	18fb      	adds	r3, r7, r3
    cbc2:	1dfa      	adds	r2, r7, #7
    cbc4:	7812      	ldrb	r2, [r2, #0]
    cbc6:	701a      	strb	r2, [r3, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
    cbc8:	230c      	movs	r3, #12
    cbca:	18fb      	adds	r3, r7, r3
    cbcc:	0019      	movs	r1, r3
    cbce:	2013      	movs	r0, #19
    cbd0:	4b0f      	ldr	r3, [pc, #60]	; (cc10 <sercom_set_gclk_generator+0x84>)
    cbd2:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
    cbd4:	2013      	movs	r0, #19
    cbd6:	4b0f      	ldr	r3, [pc, #60]	; (cc14 <sercom_set_gclk_generator+0x88>)
    cbd8:	4798      	blx	r3

		/* Save config */
		_sercom_config.generator_source = generator_source;
    cbda:	4b0b      	ldr	r3, [pc, #44]	; (cc08 <sercom_set_gclk_generator+0x7c>)
    cbdc:	1dfa      	adds	r2, r7, #7
    cbde:	7812      	ldrb	r2, [r2, #0]
    cbe0:	705a      	strb	r2, [r3, #1]
		_sercom_config.generator_is_set = true;
    cbe2:	4b09      	ldr	r3, [pc, #36]	; (cc08 <sercom_set_gclk_generator+0x7c>)
    cbe4:	2201      	movs	r2, #1
    cbe6:	701a      	strb	r2, [r3, #0]

		return STATUS_OK;
    cbe8:	2300      	movs	r3, #0
    cbea:	e008      	b.n	cbfe <sercom_set_gclk_generator+0x72>
	} else if (generator_source == _sercom_config.generator_source) {
    cbec:	4b06      	ldr	r3, [pc, #24]	; (cc08 <sercom_set_gclk_generator+0x7c>)
    cbee:	785b      	ldrb	r3, [r3, #1]
    cbf0:	1dfa      	adds	r2, r7, #7
    cbf2:	7812      	ldrb	r2, [r2, #0]
    cbf4:	429a      	cmp	r2, r3
    cbf6:	d101      	bne.n	cbfc <sercom_set_gclk_generator+0x70>
		/* Return status OK if same config */
		return STATUS_OK;
    cbf8:	2300      	movs	r3, #0
    cbfa:	e000      	b.n	cbfe <sercom_set_gclk_generator+0x72>
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
    cbfc:	231d      	movs	r3, #29
}
    cbfe:	0018      	movs	r0, r3
    cc00:	46bd      	mov	sp, r7
    cc02:	b004      	add	sp, #16
    cc04:	bd80      	pop	{r7, pc}
    cc06:	46c0      	nop			; (mov r8, r8)
    cc08:	2000055c 	.word	0x2000055c
    cc0c:	0000c859 	.word	0x0000c859
    cc10:	0000f23d 	.word	0x0000f23d
    cc14:	0000f281 	.word	0x0000f281

0000cc18 <_sercom_get_default_pad>:
 *
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
    cc18:	b580      	push	{r7, lr}
    cc1a:	b082      	sub	sp, #8
    cc1c:	af00      	add	r7, sp, #0
    cc1e:	6078      	str	r0, [r7, #4]
    cc20:	000a      	movs	r2, r1
    cc22:	1cfb      	adds	r3, r7, #3
    cc24:	701a      	strb	r2, [r3, #0]
	switch ((uintptr_t)sercom_module) {
    cc26:	687b      	ldr	r3, [r7, #4]
    cc28:	4a4d      	ldr	r2, [pc, #308]	; (cd60 <_sercom_get_default_pad+0x148>)
    cc2a:	4293      	cmp	r3, r2
    cc2c:	d03f      	beq.n	ccae <_sercom_get_default_pad+0x96>
    cc2e:	4a4c      	ldr	r2, [pc, #304]	; (cd60 <_sercom_get_default_pad+0x148>)
    cc30:	4293      	cmp	r3, r2
    cc32:	d806      	bhi.n	cc42 <_sercom_get_default_pad+0x2a>
    cc34:	4a4b      	ldr	r2, [pc, #300]	; (cd64 <_sercom_get_default_pad+0x14c>)
    cc36:	4293      	cmp	r3, r2
    cc38:	d00f      	beq.n	cc5a <_sercom_get_default_pad+0x42>
    cc3a:	4a4b      	ldr	r2, [pc, #300]	; (cd68 <_sercom_get_default_pad+0x150>)
    cc3c:	4293      	cmp	r3, r2
    cc3e:	d021      	beq.n	cc84 <_sercom_get_default_pad+0x6c>
    cc40:	e089      	b.n	cd56 <_sercom_get_default_pad+0x13e>
    cc42:	4a4a      	ldr	r2, [pc, #296]	; (cd6c <_sercom_get_default_pad+0x154>)
    cc44:	4293      	cmp	r3, r2
    cc46:	d100      	bne.n	cc4a <_sercom_get_default_pad+0x32>
    cc48:	e05b      	b.n	cd02 <_sercom_get_default_pad+0xea>
    cc4a:	4a49      	ldr	r2, [pc, #292]	; (cd70 <_sercom_get_default_pad+0x158>)
    cc4c:	4293      	cmp	r3, r2
    cc4e:	d100      	bne.n	cc52 <_sercom_get_default_pad+0x3a>
    cc50:	e06c      	b.n	cd2c <_sercom_get_default_pad+0x114>
    cc52:	4a48      	ldr	r2, [pc, #288]	; (cd74 <_sercom_get_default_pad+0x15c>)
    cc54:	4293      	cmp	r3, r2
    cc56:	d03f      	beq.n	ccd8 <_sercom_get_default_pad+0xc0>
    cc58:	e07d      	b.n	cd56 <_sercom_get_default_pad+0x13e>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    cc5a:	1cfb      	adds	r3, r7, #3
    cc5c:	781b      	ldrb	r3, [r3, #0]
    cc5e:	2b01      	cmp	r3, #1
    cc60:	d00a      	beq.n	cc78 <_sercom_get_default_pad+0x60>
    cc62:	dc02      	bgt.n	cc6a <_sercom_get_default_pad+0x52>
    cc64:	2b00      	cmp	r3, #0
    cc66:	d005      	beq.n	cc74 <_sercom_get_default_pad+0x5c>
    cc68:	e075      	b.n	cd56 <_sercom_get_default_pad+0x13e>
    cc6a:	2b02      	cmp	r3, #2
    cc6c:	d006      	beq.n	cc7c <_sercom_get_default_pad+0x64>
    cc6e:	2b03      	cmp	r3, #3
    cc70:	d006      	beq.n	cc80 <_sercom_get_default_pad+0x68>
    cc72:	e070      	b.n	cd56 <_sercom_get_default_pad+0x13e>
    cc74:	4b40      	ldr	r3, [pc, #256]	; (cd78 <_sercom_get_default_pad+0x160>)
    cc76:	e06f      	b.n	cd58 <_sercom_get_default_pad+0x140>
    cc78:	4b40      	ldr	r3, [pc, #256]	; (cd7c <_sercom_get_default_pad+0x164>)
    cc7a:	e06d      	b.n	cd58 <_sercom_get_default_pad+0x140>
    cc7c:	4b40      	ldr	r3, [pc, #256]	; (cd80 <_sercom_get_default_pad+0x168>)
    cc7e:	e06b      	b.n	cd58 <_sercom_get_default_pad+0x140>
    cc80:	4b40      	ldr	r3, [pc, #256]	; (cd84 <_sercom_get_default_pad+0x16c>)
    cc82:	e069      	b.n	cd58 <_sercom_get_default_pad+0x140>
    cc84:	1cfb      	adds	r3, r7, #3
    cc86:	781b      	ldrb	r3, [r3, #0]
    cc88:	2b01      	cmp	r3, #1
    cc8a:	d00a      	beq.n	cca2 <_sercom_get_default_pad+0x8a>
    cc8c:	dc02      	bgt.n	cc94 <_sercom_get_default_pad+0x7c>
    cc8e:	2b00      	cmp	r3, #0
    cc90:	d005      	beq.n	cc9e <_sercom_get_default_pad+0x86>
    cc92:	e060      	b.n	cd56 <_sercom_get_default_pad+0x13e>
    cc94:	2b02      	cmp	r3, #2
    cc96:	d006      	beq.n	cca6 <_sercom_get_default_pad+0x8e>
    cc98:	2b03      	cmp	r3, #3
    cc9a:	d006      	beq.n	ccaa <_sercom_get_default_pad+0x92>
    cc9c:	e05b      	b.n	cd56 <_sercom_get_default_pad+0x13e>
    cc9e:	2303      	movs	r3, #3
    cca0:	e05a      	b.n	cd58 <_sercom_get_default_pad+0x140>
    cca2:	4b39      	ldr	r3, [pc, #228]	; (cd88 <_sercom_get_default_pad+0x170>)
    cca4:	e058      	b.n	cd58 <_sercom_get_default_pad+0x140>
    cca6:	4b39      	ldr	r3, [pc, #228]	; (cd8c <_sercom_get_default_pad+0x174>)
    cca8:	e056      	b.n	cd58 <_sercom_get_default_pad+0x140>
    ccaa:	4b39      	ldr	r3, [pc, #228]	; (cd90 <_sercom_get_default_pad+0x178>)
    ccac:	e054      	b.n	cd58 <_sercom_get_default_pad+0x140>
    ccae:	1cfb      	adds	r3, r7, #3
    ccb0:	781b      	ldrb	r3, [r3, #0]
    ccb2:	2b01      	cmp	r3, #1
    ccb4:	d00a      	beq.n	cccc <_sercom_get_default_pad+0xb4>
    ccb6:	dc02      	bgt.n	ccbe <_sercom_get_default_pad+0xa6>
    ccb8:	2b00      	cmp	r3, #0
    ccba:	d005      	beq.n	ccc8 <_sercom_get_default_pad+0xb0>
    ccbc:	e04b      	b.n	cd56 <_sercom_get_default_pad+0x13e>
    ccbe:	2b02      	cmp	r3, #2
    ccc0:	d006      	beq.n	ccd0 <_sercom_get_default_pad+0xb8>
    ccc2:	2b03      	cmp	r3, #3
    ccc4:	d006      	beq.n	ccd4 <_sercom_get_default_pad+0xbc>
    ccc6:	e046      	b.n	cd56 <_sercom_get_default_pad+0x13e>
    ccc8:	4b32      	ldr	r3, [pc, #200]	; (cd94 <_sercom_get_default_pad+0x17c>)
    ccca:	e045      	b.n	cd58 <_sercom_get_default_pad+0x140>
    cccc:	4b32      	ldr	r3, [pc, #200]	; (cd98 <_sercom_get_default_pad+0x180>)
    ccce:	e043      	b.n	cd58 <_sercom_get_default_pad+0x140>
    ccd0:	4b32      	ldr	r3, [pc, #200]	; (cd9c <_sercom_get_default_pad+0x184>)
    ccd2:	e041      	b.n	cd58 <_sercom_get_default_pad+0x140>
    ccd4:	4b32      	ldr	r3, [pc, #200]	; (cda0 <_sercom_get_default_pad+0x188>)
    ccd6:	e03f      	b.n	cd58 <_sercom_get_default_pad+0x140>
    ccd8:	1cfb      	adds	r3, r7, #3
    ccda:	781b      	ldrb	r3, [r3, #0]
    ccdc:	2b01      	cmp	r3, #1
    ccde:	d00a      	beq.n	ccf6 <_sercom_get_default_pad+0xde>
    cce0:	dc02      	bgt.n	cce8 <_sercom_get_default_pad+0xd0>
    cce2:	2b00      	cmp	r3, #0
    cce4:	d005      	beq.n	ccf2 <_sercom_get_default_pad+0xda>
    cce6:	e036      	b.n	cd56 <_sercom_get_default_pad+0x13e>
    cce8:	2b02      	cmp	r3, #2
    ccea:	d006      	beq.n	ccfa <_sercom_get_default_pad+0xe2>
    ccec:	2b03      	cmp	r3, #3
    ccee:	d006      	beq.n	ccfe <_sercom_get_default_pad+0xe6>
    ccf0:	e031      	b.n	cd56 <_sercom_get_default_pad+0x13e>
    ccf2:	4b2c      	ldr	r3, [pc, #176]	; (cda4 <_sercom_get_default_pad+0x18c>)
    ccf4:	e030      	b.n	cd58 <_sercom_get_default_pad+0x140>
    ccf6:	4b2c      	ldr	r3, [pc, #176]	; (cda8 <_sercom_get_default_pad+0x190>)
    ccf8:	e02e      	b.n	cd58 <_sercom_get_default_pad+0x140>
    ccfa:	4b2c      	ldr	r3, [pc, #176]	; (cdac <_sercom_get_default_pad+0x194>)
    ccfc:	e02c      	b.n	cd58 <_sercom_get_default_pad+0x140>
    ccfe:	4b2c      	ldr	r3, [pc, #176]	; (cdb0 <_sercom_get_default_pad+0x198>)
    cd00:	e02a      	b.n	cd58 <_sercom_get_default_pad+0x140>
    cd02:	1cfb      	adds	r3, r7, #3
    cd04:	781b      	ldrb	r3, [r3, #0]
    cd06:	2b01      	cmp	r3, #1
    cd08:	d00a      	beq.n	cd20 <_sercom_get_default_pad+0x108>
    cd0a:	dc02      	bgt.n	cd12 <_sercom_get_default_pad+0xfa>
    cd0c:	2b00      	cmp	r3, #0
    cd0e:	d005      	beq.n	cd1c <_sercom_get_default_pad+0x104>
    cd10:	e021      	b.n	cd56 <_sercom_get_default_pad+0x13e>
    cd12:	2b02      	cmp	r3, #2
    cd14:	d006      	beq.n	cd24 <_sercom_get_default_pad+0x10c>
    cd16:	2b03      	cmp	r3, #3
    cd18:	d006      	beq.n	cd28 <_sercom_get_default_pad+0x110>
    cd1a:	e01c      	b.n	cd56 <_sercom_get_default_pad+0x13e>
    cd1c:	4b25      	ldr	r3, [pc, #148]	; (cdb4 <_sercom_get_default_pad+0x19c>)
    cd1e:	e01b      	b.n	cd58 <_sercom_get_default_pad+0x140>
    cd20:	4b25      	ldr	r3, [pc, #148]	; (cdb8 <_sercom_get_default_pad+0x1a0>)
    cd22:	e019      	b.n	cd58 <_sercom_get_default_pad+0x140>
    cd24:	4b25      	ldr	r3, [pc, #148]	; (cdbc <_sercom_get_default_pad+0x1a4>)
    cd26:	e017      	b.n	cd58 <_sercom_get_default_pad+0x140>
    cd28:	4b25      	ldr	r3, [pc, #148]	; (cdc0 <_sercom_get_default_pad+0x1a8>)
    cd2a:	e015      	b.n	cd58 <_sercom_get_default_pad+0x140>
    cd2c:	1cfb      	adds	r3, r7, #3
    cd2e:	781b      	ldrb	r3, [r3, #0]
    cd30:	2b01      	cmp	r3, #1
    cd32:	d00a      	beq.n	cd4a <_sercom_get_default_pad+0x132>
    cd34:	dc02      	bgt.n	cd3c <_sercom_get_default_pad+0x124>
    cd36:	2b00      	cmp	r3, #0
    cd38:	d005      	beq.n	cd46 <_sercom_get_default_pad+0x12e>
    cd3a:	e00c      	b.n	cd56 <_sercom_get_default_pad+0x13e>
    cd3c:	2b02      	cmp	r3, #2
    cd3e:	d006      	beq.n	cd4e <_sercom_get_default_pad+0x136>
    cd40:	2b03      	cmp	r3, #3
    cd42:	d006      	beq.n	cd52 <_sercom_get_default_pad+0x13a>
    cd44:	e007      	b.n	cd56 <_sercom_get_default_pad+0x13e>
    cd46:	4b1f      	ldr	r3, [pc, #124]	; (cdc4 <_sercom_get_default_pad+0x1ac>)
    cd48:	e006      	b.n	cd58 <_sercom_get_default_pad+0x140>
    cd4a:	4b1f      	ldr	r3, [pc, #124]	; (cdc8 <_sercom_get_default_pad+0x1b0>)
    cd4c:	e004      	b.n	cd58 <_sercom_get_default_pad+0x140>
    cd4e:	4b1f      	ldr	r3, [pc, #124]	; (cdcc <_sercom_get_default_pad+0x1b4>)
    cd50:	e002      	b.n	cd58 <_sercom_get_default_pad+0x140>
    cd52:	4b1f      	ldr	r3, [pc, #124]	; (cdd0 <_sercom_get_default_pad+0x1b8>)
    cd54:	e000      	b.n	cd58 <_sercom_get_default_pad+0x140>
	}

	Assert(false);
	return 0;
    cd56:	2300      	movs	r3, #0
}
    cd58:	0018      	movs	r0, r3
    cd5a:	46bd      	mov	sp, r7
    cd5c:	b002      	add	sp, #8
    cd5e:	bd80      	pop	{r7, pc}
    cd60:	42001000 	.word	0x42001000
    cd64:	42000800 	.word	0x42000800
    cd68:	42000c00 	.word	0x42000c00
    cd6c:	42001800 	.word	0x42001800
    cd70:	42001c00 	.word	0x42001c00
    cd74:	42001400 	.word	0x42001400
    cd78:	00040003 	.word	0x00040003
    cd7c:	00050003 	.word	0x00050003
    cd80:	00060003 	.word	0x00060003
    cd84:	00070003 	.word	0x00070003
    cd88:	00010003 	.word	0x00010003
    cd8c:	001e0003 	.word	0x001e0003
    cd90:	001f0003 	.word	0x001f0003
    cd94:	00080003 	.word	0x00080003
    cd98:	00090003 	.word	0x00090003
    cd9c:	000a0003 	.word	0x000a0003
    cda0:	000b0003 	.word	0x000b0003
    cda4:	00100003 	.word	0x00100003
    cda8:	00110003 	.word	0x00110003
    cdac:	00120003 	.word	0x00120003
    cdb0:	00130003 	.word	0x00130003
    cdb4:	000c0003 	.word	0x000c0003
    cdb8:	000d0003 	.word	0x000d0003
    cdbc:	000e0003 	.word	0x000e0003
    cdc0:	000f0003 	.word	0x000f0003
    cdc4:	00160003 	.word	0x00160003
    cdc8:	00170003 	.word	0x00170003
    cdcc:	00180003 	.word	0x00180003
    cdd0:	00190003 	.word	0x00190003

0000cdd4 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
    cdd4:	b590      	push	{r4, r7, lr}
    cdd6:	b08b      	sub	sp, #44	; 0x2c
    cdd8:	af00      	add	r7, sp, #0
    cdda:	6078      	str	r0, [r7, #4]
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
    cddc:	230c      	movs	r3, #12
    cdde:	18fb      	adds	r3, r7, r3
    cde0:	4a0f      	ldr	r2, [pc, #60]	; (ce20 <_sercom_get_sercom_inst_index+0x4c>)
    cde2:	ca13      	ldmia	r2!, {r0, r1, r4}
    cde4:	c313      	stmia	r3!, {r0, r1, r4}
    cde6:	ca13      	ldmia	r2!, {r0, r1, r4}
    cde8:	c313      	stmia	r3!, {r0, r1, r4}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    cdea:	2300      	movs	r3, #0
    cdec:	627b      	str	r3, [r7, #36]	; 0x24
    cdee:	e00e      	b.n	ce0e <_sercom_get_sercom_inst_index+0x3a>
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
    cdf0:	230c      	movs	r3, #12
    cdf2:	18fb      	adds	r3, r7, r3
    cdf4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    cdf6:	0092      	lsls	r2, r2, #2
    cdf8:	58d3      	ldr	r3, [r2, r3]
    cdfa:	001a      	movs	r2, r3
    cdfc:	687b      	ldr	r3, [r7, #4]
    cdfe:	429a      	cmp	r2, r3
    ce00:	d102      	bne.n	ce08 <_sercom_get_sercom_inst_index+0x34>
			return i;
    ce02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    ce04:	b2db      	uxtb	r3, r3
    ce06:	e006      	b.n	ce16 <_sercom_get_sercom_inst_index+0x42>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    ce08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    ce0a:	3301      	adds	r3, #1
    ce0c:	627b      	str	r3, [r7, #36]	; 0x24
    ce0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    ce10:	2b05      	cmp	r3, #5
    ce12:	d9ed      	bls.n	cdf0 <_sercom_get_sercom_inst_index+0x1c>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
    ce14:	2300      	movs	r3, #0
}
    ce16:	0018      	movs	r0, r3
    ce18:	46bd      	mov	sp, r7
    ce1a:	b00b      	add	sp, #44	; 0x2c
    ce1c:	bd90      	pop	{r4, r7, pc}
    ce1e:	46c0      	nop			; (mov r8, r8)
    ce20:	00020a00 	.word	0x00020a00

0000ce24 <_sercom_default_handler>:
 *
 * \param[in] instance SERCOM instance used.
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
    ce24:	b580      	push	{r7, lr}
    ce26:	b082      	sub	sp, #8
    ce28:	af00      	add	r7, sp, #0
    ce2a:	0002      	movs	r2, r0
    ce2c:	1dfb      	adds	r3, r7, #7
    ce2e:	701a      	strb	r2, [r3, #0]
	Assert(false);
}
    ce30:	46c0      	nop			; (mov r8, r8)
    ce32:	46bd      	mov	sp, r7
    ce34:	b002      	add	sp, #8
    ce36:	bd80      	pop	{r7, pc}

0000ce38 <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
    ce38:	b580      	push	{r7, lr}
    ce3a:	b084      	sub	sp, #16
    ce3c:	af00      	add	r7, sp, #0
    ce3e:	0002      	movs	r2, r0
    ce40:	6039      	str	r1, [r7, #0]
    ce42:	1dfb      	adds	r3, r7, #7
    ce44:	701a      	strb	r2, [r3, #0]
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
    ce46:	4b13      	ldr	r3, [pc, #76]	; (ce94 <_sercom_set_handler+0x5c>)
    ce48:	781b      	ldrb	r3, [r3, #0]
    ce4a:	2201      	movs	r2, #1
    ce4c:	4053      	eors	r3, r2
    ce4e:	b2db      	uxtb	r3, r3
    ce50:	2b00      	cmp	r3, #0
    ce52:	d015      	beq.n	ce80 <_sercom_set_handler+0x48>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    ce54:	2300      	movs	r3, #0
    ce56:	60fb      	str	r3, [r7, #12]
    ce58:	e00c      	b.n	ce74 <_sercom_set_handler+0x3c>
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    ce5a:	4b0f      	ldr	r3, [pc, #60]	; (ce98 <_sercom_set_handler+0x60>)
    ce5c:	68fa      	ldr	r2, [r7, #12]
    ce5e:	0092      	lsls	r2, r2, #2
    ce60:	490e      	ldr	r1, [pc, #56]	; (ce9c <_sercom_set_handler+0x64>)
    ce62:	50d1      	str	r1, [r2, r3]
			_sercom_instances[i] = NULL;
    ce64:	4b0e      	ldr	r3, [pc, #56]	; (cea0 <_sercom_set_handler+0x68>)
    ce66:	68fa      	ldr	r2, [r7, #12]
    ce68:	0092      	lsls	r2, r2, #2
    ce6a:	2100      	movs	r1, #0
    ce6c:	50d1      	str	r1, [r2, r3]
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    ce6e:	68fb      	ldr	r3, [r7, #12]
    ce70:	3301      	adds	r3, #1
    ce72:	60fb      	str	r3, [r7, #12]
    ce74:	68fb      	ldr	r3, [r7, #12]
    ce76:	2b05      	cmp	r3, #5
    ce78:	d9ef      	bls.n	ce5a <_sercom_set_handler+0x22>
		}

		_handler_table_initialized = true;
    ce7a:	4b06      	ldr	r3, [pc, #24]	; (ce94 <_sercom_set_handler+0x5c>)
    ce7c:	2201      	movs	r2, #1
    ce7e:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
    ce80:	1dfb      	adds	r3, r7, #7
    ce82:	781a      	ldrb	r2, [r3, #0]
    ce84:	4b04      	ldr	r3, [pc, #16]	; (ce98 <_sercom_set_handler+0x60>)
    ce86:	0092      	lsls	r2, r2, #2
    ce88:	6839      	ldr	r1, [r7, #0]
    ce8a:	50d1      	str	r1, [r2, r3]
}
    ce8c:	46c0      	nop			; (mov r8, r8)
    ce8e:	46bd      	mov	sp, r7
    ce90:	b004      	add	sp, #16
    ce92:	bd80      	pop	{r7, pc}
    ce94:	2000055e 	.word	0x2000055e
    ce98:	20000560 	.word	0x20000560
    ce9c:	0000ce25 	.word	0x0000ce25
    cea0:	20002b5c 	.word	0x20002b5c

0000cea4 <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
    cea4:	b590      	push	{r4, r7, lr}
    cea6:	b085      	sub	sp, #20
    cea8:	af00      	add	r7, sp, #0
    ceaa:	6078      	str	r0, [r7, #4]
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
    ceac:	2308      	movs	r3, #8
    ceae:	18fb      	adds	r3, r7, r3
    ceb0:	4a0b      	ldr	r2, [pc, #44]	; (cee0 <_sercom_get_interrupt_vector+0x3c>)
    ceb2:	6811      	ldr	r1, [r2, #0]
    ceb4:	6019      	str	r1, [r3, #0]
    ceb6:	8892      	ldrh	r2, [r2, #4]
    ceb8:	809a      	strh	r2, [r3, #4]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
    ceba:	230f      	movs	r3, #15
    cebc:	18fc      	adds	r4, r7, r3
    cebe:	687b      	ldr	r3, [r7, #4]
    cec0:	0018      	movs	r0, r3
    cec2:	4b08      	ldr	r3, [pc, #32]	; (cee4 <_sercom_get_interrupt_vector+0x40>)
    cec4:	4798      	blx	r3
    cec6:	0003      	movs	r3, r0
    cec8:	7023      	strb	r3, [r4, #0]

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
    ceca:	230f      	movs	r3, #15
    cecc:	18fb      	adds	r3, r7, r3
    cece:	781b      	ldrb	r3, [r3, #0]
    ced0:	2208      	movs	r2, #8
    ced2:	18ba      	adds	r2, r7, r2
    ced4:	5cd3      	ldrb	r3, [r2, r3]
    ced6:	b25b      	sxtb	r3, r3
}
    ced8:	0018      	movs	r0, r3
    ceda:	46bd      	mov	sp, r7
    cedc:	b005      	add	sp, #20
    cede:	bd90      	pop	{r4, r7, pc}
    cee0:	00020a18 	.word	0x00020a18
    cee4:	0000cdd5 	.word	0x0000cdd5

0000cee8 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
    cee8:	b580      	push	{r7, lr}
    ceea:	af00      	add	r7, sp, #0
    ceec:	4b03      	ldr	r3, [pc, #12]	; (cefc <SERCOM0_Handler+0x14>)
    ceee:	681b      	ldr	r3, [r3, #0]
    cef0:	2000      	movs	r0, #0
    cef2:	4798      	blx	r3
    cef4:	46c0      	nop			; (mov r8, r8)
    cef6:	46bd      	mov	sp, r7
    cef8:	bd80      	pop	{r7, pc}
    cefa:	46c0      	nop			; (mov r8, r8)
    cefc:	20000560 	.word	0x20000560

0000cf00 <SERCOM1_Handler>:
    cf00:	b580      	push	{r7, lr}
    cf02:	af00      	add	r7, sp, #0
    cf04:	4b03      	ldr	r3, [pc, #12]	; (cf14 <SERCOM1_Handler+0x14>)
    cf06:	685b      	ldr	r3, [r3, #4]
    cf08:	2001      	movs	r0, #1
    cf0a:	4798      	blx	r3
    cf0c:	46c0      	nop			; (mov r8, r8)
    cf0e:	46bd      	mov	sp, r7
    cf10:	bd80      	pop	{r7, pc}
    cf12:	46c0      	nop			; (mov r8, r8)
    cf14:	20000560 	.word	0x20000560

0000cf18 <SERCOM2_Handler>:
    cf18:	b580      	push	{r7, lr}
    cf1a:	af00      	add	r7, sp, #0
    cf1c:	4b03      	ldr	r3, [pc, #12]	; (cf2c <SERCOM2_Handler+0x14>)
    cf1e:	689b      	ldr	r3, [r3, #8]
    cf20:	2002      	movs	r0, #2
    cf22:	4798      	blx	r3
    cf24:	46c0      	nop			; (mov r8, r8)
    cf26:	46bd      	mov	sp, r7
    cf28:	bd80      	pop	{r7, pc}
    cf2a:	46c0      	nop			; (mov r8, r8)
    cf2c:	20000560 	.word	0x20000560

0000cf30 <SERCOM3_Handler>:
    cf30:	b580      	push	{r7, lr}
    cf32:	af00      	add	r7, sp, #0
    cf34:	4b03      	ldr	r3, [pc, #12]	; (cf44 <SERCOM3_Handler+0x14>)
    cf36:	68db      	ldr	r3, [r3, #12]
    cf38:	2003      	movs	r0, #3
    cf3a:	4798      	blx	r3
    cf3c:	46c0      	nop			; (mov r8, r8)
    cf3e:	46bd      	mov	sp, r7
    cf40:	bd80      	pop	{r7, pc}
    cf42:	46c0      	nop			; (mov r8, r8)
    cf44:	20000560 	.word	0x20000560

0000cf48 <SERCOM4_Handler>:
    cf48:	b580      	push	{r7, lr}
    cf4a:	af00      	add	r7, sp, #0
    cf4c:	4b03      	ldr	r3, [pc, #12]	; (cf5c <SERCOM4_Handler+0x14>)
    cf4e:	691b      	ldr	r3, [r3, #16]
    cf50:	2004      	movs	r0, #4
    cf52:	4798      	blx	r3
    cf54:	46c0      	nop			; (mov r8, r8)
    cf56:	46bd      	mov	sp, r7
    cf58:	bd80      	pop	{r7, pc}
    cf5a:	46c0      	nop			; (mov r8, r8)
    cf5c:	20000560 	.word	0x20000560

0000cf60 <SERCOM5_Handler>:
    cf60:	b580      	push	{r7, lr}
    cf62:	af00      	add	r7, sp, #0
    cf64:	4b03      	ldr	r3, [pc, #12]	; (cf74 <SERCOM5_Handler+0x14>)
    cf66:	695b      	ldr	r3, [r3, #20]
    cf68:	2005      	movs	r0, #5
    cf6a:	4798      	blx	r3
    cf6c:	46c0      	nop			; (mov r8, r8)
    cf6e:	46bd      	mov	sp, r7
    cf70:	bd80      	pop	{r7, pc}
    cf72:	46c0      	nop			; (mov r8, r8)
    cf74:	20000560 	.word	0x20000560

0000cf78 <system_pinmux_get_config_defaults>:
{
    cf78:	b580      	push	{r7, lr}
    cf7a:	b082      	sub	sp, #8
    cf7c:	af00      	add	r7, sp, #0
    cf7e:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    cf80:	687b      	ldr	r3, [r7, #4]
    cf82:	2280      	movs	r2, #128	; 0x80
    cf84:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    cf86:	687b      	ldr	r3, [r7, #4]
    cf88:	2200      	movs	r2, #0
    cf8a:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    cf8c:	687b      	ldr	r3, [r7, #4]
    cf8e:	2201      	movs	r2, #1
    cf90:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    cf92:	687b      	ldr	r3, [r7, #4]
    cf94:	2200      	movs	r2, #0
    cf96:	70da      	strb	r2, [r3, #3]
}
    cf98:	46c0      	nop			; (mov r8, r8)
    cf9a:	46bd      	mov	sp, r7
    cf9c:	b002      	add	sp, #8
    cf9e:	bd80      	pop	{r7, pc}

0000cfa0 <system_pinmux_get_group_from_gpio_pin>:
{
    cfa0:	b580      	push	{r7, lr}
    cfa2:	b084      	sub	sp, #16
    cfa4:	af00      	add	r7, sp, #0
    cfa6:	0002      	movs	r2, r0
    cfa8:	1dfb      	adds	r3, r7, #7
    cfaa:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    cfac:	230f      	movs	r3, #15
    cfae:	18fb      	adds	r3, r7, r3
    cfb0:	1dfa      	adds	r2, r7, #7
    cfb2:	7812      	ldrb	r2, [r2, #0]
    cfb4:	09d2      	lsrs	r2, r2, #7
    cfb6:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    cfb8:	230e      	movs	r3, #14
    cfba:	18fb      	adds	r3, r7, r3
    cfbc:	1dfa      	adds	r2, r7, #7
    cfbe:	7812      	ldrb	r2, [r2, #0]
    cfc0:	0952      	lsrs	r2, r2, #5
    cfc2:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    cfc4:	4b0d      	ldr	r3, [pc, #52]	; (cffc <system_pinmux_get_group_from_gpio_pin+0x5c>)
    cfc6:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
    cfc8:	230f      	movs	r3, #15
    cfca:	18fb      	adds	r3, r7, r3
    cfcc:	781b      	ldrb	r3, [r3, #0]
    cfce:	2b00      	cmp	r3, #0
    cfd0:	d10f      	bne.n	cff2 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    cfd2:	230f      	movs	r3, #15
    cfd4:	18fb      	adds	r3, r7, r3
    cfd6:	781b      	ldrb	r3, [r3, #0]
    cfd8:	009b      	lsls	r3, r3, #2
    cfda:	2210      	movs	r2, #16
    cfdc:	4694      	mov	ip, r2
    cfde:	44bc      	add	ip, r7
    cfe0:	4463      	add	r3, ip
    cfe2:	3b08      	subs	r3, #8
    cfe4:	681a      	ldr	r2, [r3, #0]
    cfe6:	230e      	movs	r3, #14
    cfe8:	18fb      	adds	r3, r7, r3
    cfea:	781b      	ldrb	r3, [r3, #0]
    cfec:	01db      	lsls	r3, r3, #7
    cfee:	18d3      	adds	r3, r2, r3
    cff0:	e000      	b.n	cff4 <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
    cff2:	2300      	movs	r3, #0
}
    cff4:	0018      	movs	r0, r3
    cff6:	46bd      	mov	sp, r7
    cff8:	b004      	add	sp, #16
    cffa:	bd80      	pop	{r7, pc}
    cffc:	41004400 	.word	0x41004400

0000d000 <port_get_group_from_gpio_pin>:
{
    d000:	b580      	push	{r7, lr}
    d002:	b082      	sub	sp, #8
    d004:	af00      	add	r7, sp, #0
    d006:	0002      	movs	r2, r0
    d008:	1dfb      	adds	r3, r7, #7
    d00a:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
    d00c:	1dfb      	adds	r3, r7, #7
    d00e:	781b      	ldrb	r3, [r3, #0]
    d010:	0018      	movs	r0, r3
    d012:	4b03      	ldr	r3, [pc, #12]	; (d020 <port_get_group_from_gpio_pin+0x20>)
    d014:	4798      	blx	r3
    d016:	0003      	movs	r3, r0
}
    d018:	0018      	movs	r0, r3
    d01a:	46bd      	mov	sp, r7
    d01c:	b002      	add	sp, #8
    d01e:	bd80      	pop	{r7, pc}
    d020:	0000cfa1 	.word	0x0000cfa1

0000d024 <port_pin_set_output_level>:
{
    d024:	b580      	push	{r7, lr}
    d026:	b084      	sub	sp, #16
    d028:	af00      	add	r7, sp, #0
    d02a:	0002      	movs	r2, r0
    d02c:	1dfb      	adds	r3, r7, #7
    d02e:	701a      	strb	r2, [r3, #0]
    d030:	1dbb      	adds	r3, r7, #6
    d032:	1c0a      	adds	r2, r1, #0
    d034:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    d036:	1dfb      	adds	r3, r7, #7
    d038:	781b      	ldrb	r3, [r3, #0]
    d03a:	0018      	movs	r0, r3
    d03c:	4b0d      	ldr	r3, [pc, #52]	; (d074 <port_pin_set_output_level+0x50>)
    d03e:	4798      	blx	r3
    d040:	0003      	movs	r3, r0
    d042:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    d044:	1dfb      	adds	r3, r7, #7
    d046:	781b      	ldrb	r3, [r3, #0]
    d048:	221f      	movs	r2, #31
    d04a:	4013      	ands	r3, r2
    d04c:	2201      	movs	r2, #1
    d04e:	409a      	lsls	r2, r3
    d050:	0013      	movs	r3, r2
    d052:	60bb      	str	r3, [r7, #8]
	if (level) {
    d054:	1dbb      	adds	r3, r7, #6
    d056:	781b      	ldrb	r3, [r3, #0]
    d058:	2b00      	cmp	r3, #0
    d05a:	d003      	beq.n	d064 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
    d05c:	68fb      	ldr	r3, [r7, #12]
    d05e:	68ba      	ldr	r2, [r7, #8]
    d060:	619a      	str	r2, [r3, #24]
}
    d062:	e002      	b.n	d06a <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
    d064:	68fb      	ldr	r3, [r7, #12]
    d066:	68ba      	ldr	r2, [r7, #8]
    d068:	615a      	str	r2, [r3, #20]
}
    d06a:	46c0      	nop			; (mov r8, r8)
    d06c:	46bd      	mov	sp, r7
    d06e:	b004      	add	sp, #16
    d070:	bd80      	pop	{r7, pc}
    d072:	46c0      	nop			; (mov r8, r8)
    d074:	0000d001 	.word	0x0000d001

0000d078 <system_gclk_chan_get_config_defaults>:
{
    d078:	b580      	push	{r7, lr}
    d07a:	b082      	sub	sp, #8
    d07c:	af00      	add	r7, sp, #0
    d07e:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
    d080:	687b      	ldr	r3, [r7, #4]
    d082:	2200      	movs	r2, #0
    d084:	701a      	strb	r2, [r3, #0]
}
    d086:	46c0      	nop			; (mov r8, r8)
    d088:	46bd      	mov	sp, r7
    d08a:	b002      	add	sp, #8
    d08c:	bd80      	pop	{r7, pc}
	...

0000d090 <system_apb_clock_set_mask>:
{
    d090:	b580      	push	{r7, lr}
    d092:	b082      	sub	sp, #8
    d094:	af00      	add	r7, sp, #0
    d096:	0002      	movs	r2, r0
    d098:	6039      	str	r1, [r7, #0]
    d09a:	1dfb      	adds	r3, r7, #7
    d09c:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    d09e:	1dfb      	adds	r3, r7, #7
    d0a0:	781b      	ldrb	r3, [r3, #0]
    d0a2:	2b01      	cmp	r3, #1
    d0a4:	d00a      	beq.n	d0bc <system_apb_clock_set_mask+0x2c>
    d0a6:	2b02      	cmp	r3, #2
    d0a8:	d00f      	beq.n	d0ca <system_apb_clock_set_mask+0x3a>
    d0aa:	2b00      	cmp	r3, #0
    d0ac:	d114      	bne.n	d0d8 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
    d0ae:	4b0e      	ldr	r3, [pc, #56]	; (d0e8 <system_apb_clock_set_mask+0x58>)
    d0b0:	4a0d      	ldr	r2, [pc, #52]	; (d0e8 <system_apb_clock_set_mask+0x58>)
    d0b2:	6991      	ldr	r1, [r2, #24]
    d0b4:	683a      	ldr	r2, [r7, #0]
    d0b6:	430a      	orrs	r2, r1
    d0b8:	619a      	str	r2, [r3, #24]
			break;
    d0ba:	e00f      	b.n	d0dc <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
    d0bc:	4b0a      	ldr	r3, [pc, #40]	; (d0e8 <system_apb_clock_set_mask+0x58>)
    d0be:	4a0a      	ldr	r2, [pc, #40]	; (d0e8 <system_apb_clock_set_mask+0x58>)
    d0c0:	69d1      	ldr	r1, [r2, #28]
    d0c2:	683a      	ldr	r2, [r7, #0]
    d0c4:	430a      	orrs	r2, r1
    d0c6:	61da      	str	r2, [r3, #28]
			break;
    d0c8:	e008      	b.n	d0dc <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
    d0ca:	4b07      	ldr	r3, [pc, #28]	; (d0e8 <system_apb_clock_set_mask+0x58>)
    d0cc:	4a06      	ldr	r2, [pc, #24]	; (d0e8 <system_apb_clock_set_mask+0x58>)
    d0ce:	6a11      	ldr	r1, [r2, #32]
    d0d0:	683a      	ldr	r2, [r7, #0]
    d0d2:	430a      	orrs	r2, r1
    d0d4:	621a      	str	r2, [r3, #32]
			break;
    d0d6:	e001      	b.n	d0dc <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
    d0d8:	2317      	movs	r3, #23
    d0da:	e000      	b.n	d0de <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
    d0dc:	2300      	movs	r3, #0
}
    d0de:	0018      	movs	r0, r3
    d0e0:	46bd      	mov	sp, r7
    d0e2:	b002      	add	sp, #8
    d0e4:	bd80      	pop	{r7, pc}
    d0e6:	46c0      	nop			; (mov r8, r8)
    d0e8:	40000400 	.word	0x40000400

0000d0ec <system_is_debugger_present>:
{
    d0ec:	b580      	push	{r7, lr}
    d0ee:	af00      	add	r7, sp, #0
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
    d0f0:	4b05      	ldr	r3, [pc, #20]	; (d108 <system_is_debugger_present+0x1c>)
    d0f2:	789b      	ldrb	r3, [r3, #2]
    d0f4:	b2db      	uxtb	r3, r3
    d0f6:	001a      	movs	r2, r3
    d0f8:	2302      	movs	r3, #2
    d0fa:	4013      	ands	r3, r2
    d0fc:	1e5a      	subs	r2, r3, #1
    d0fe:	4193      	sbcs	r3, r2
    d100:	b2db      	uxtb	r3, r3
}
    d102:	0018      	movs	r0, r3
    d104:	46bd      	mov	sp, r7
    d106:	bd80      	pop	{r7, pc}
    d108:	41002000 	.word	0x41002000

0000d10c <spi_is_ready_to_write>:
{
    d10c:	b580      	push	{r7, lr}
    d10e:	b084      	sub	sp, #16
    d110:	af00      	add	r7, sp, #0
    d112:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
    d114:	687b      	ldr	r3, [r7, #4]
    d116:	681b      	ldr	r3, [r3, #0]
    d118:	60fb      	str	r3, [r7, #12]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    d11a:	68fb      	ldr	r3, [r7, #12]
    d11c:	7e1b      	ldrb	r3, [r3, #24]
    d11e:	b2db      	uxtb	r3, r3
    d120:	001a      	movs	r2, r3
    d122:	2301      	movs	r3, #1
    d124:	4013      	ands	r3, r2
    d126:	1e5a      	subs	r2, r3, #1
    d128:	4193      	sbcs	r3, r2
    d12a:	b2db      	uxtb	r3, r3
}
    d12c:	0018      	movs	r0, r3
    d12e:	46bd      	mov	sp, r7
    d130:	b004      	add	sp, #16
    d132:	bd80      	pop	{r7, pc}

0000d134 <spi_is_ready_to_read>:
{
    d134:	b580      	push	{r7, lr}
    d136:	b084      	sub	sp, #16
    d138:	af00      	add	r7, sp, #0
    d13a:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
    d13c:	687b      	ldr	r3, [r7, #4]
    d13e:	681b      	ldr	r3, [r3, #0]
    d140:	60fb      	str	r3, [r7, #12]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    d142:	68fb      	ldr	r3, [r7, #12]
    d144:	7e1b      	ldrb	r3, [r3, #24]
    d146:	b2db      	uxtb	r3, r3
    d148:	001a      	movs	r2, r3
    d14a:	2304      	movs	r3, #4
    d14c:	4013      	ands	r3, r2
    d14e:	1e5a      	subs	r2, r3, #1
    d150:	4193      	sbcs	r3, r2
    d152:	b2db      	uxtb	r3, r3
}
    d154:	0018      	movs	r0, r3
    d156:	46bd      	mov	sp, r7
    d158:	b004      	add	sp, #16
    d15a:	bd80      	pop	{r7, pc}

0000d15c <spi_write>:
{
    d15c:	b580      	push	{r7, lr}
    d15e:	b084      	sub	sp, #16
    d160:	af00      	add	r7, sp, #0
    d162:	6078      	str	r0, [r7, #4]
    d164:	000a      	movs	r2, r1
    d166:	1cbb      	adds	r3, r7, #2
    d168:	801a      	strh	r2, [r3, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
    d16a:	687b      	ldr	r3, [r7, #4]
    d16c:	681b      	ldr	r3, [r3, #0]
    d16e:	60fb      	str	r3, [r7, #12]
	if (!spi_is_ready_to_write(module)) {
    d170:	687b      	ldr	r3, [r7, #4]
    d172:	0018      	movs	r0, r3
    d174:	4b0a      	ldr	r3, [pc, #40]	; (d1a0 <spi_write+0x44>)
    d176:	4798      	blx	r3
    d178:	0003      	movs	r3, r0
    d17a:	001a      	movs	r2, r3
    d17c:	2301      	movs	r3, #1
    d17e:	4053      	eors	r3, r2
    d180:	b2db      	uxtb	r3, r3
    d182:	2b00      	cmp	r3, #0
    d184:	d001      	beq.n	d18a <spi_write+0x2e>
		return STATUS_BUSY;
    d186:	2305      	movs	r3, #5
    d188:	e006      	b.n	d198 <spi_write+0x3c>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    d18a:	1cbb      	adds	r3, r7, #2
    d18c:	881b      	ldrh	r3, [r3, #0]
    d18e:	05db      	lsls	r3, r3, #23
    d190:	0dda      	lsrs	r2, r3, #23
    d192:	68fb      	ldr	r3, [r7, #12]
    d194:	629a      	str	r2, [r3, #40]	; 0x28
	return STATUS_OK;
    d196:	2300      	movs	r3, #0
}
    d198:	0018      	movs	r0, r3
    d19a:	46bd      	mov	sp, r7
    d19c:	b004      	add	sp, #16
    d19e:	bd80      	pop	{r7, pc}
    d1a0:	0000d10d 	.word	0x0000d10d

0000d1a4 <spi_read>:
{
    d1a4:	b580      	push	{r7, lr}
    d1a6:	b084      	sub	sp, #16
    d1a8:	af00      	add	r7, sp, #0
    d1aa:	6078      	str	r0, [r7, #4]
    d1ac:	6039      	str	r1, [r7, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
    d1ae:	687b      	ldr	r3, [r7, #4]
    d1b0:	681b      	ldr	r3, [r3, #0]
    d1b2:	60bb      	str	r3, [r7, #8]
	if (!spi_is_ready_to_read(module)) {
    d1b4:	687b      	ldr	r3, [r7, #4]
    d1b6:	0018      	movs	r0, r3
    d1b8:	4b1b      	ldr	r3, [pc, #108]	; (d228 <spi_read+0x84>)
    d1ba:	4798      	blx	r3
    d1bc:	0003      	movs	r3, r0
    d1be:	001a      	movs	r2, r3
    d1c0:	2301      	movs	r3, #1
    d1c2:	4053      	eors	r3, r2
    d1c4:	b2db      	uxtb	r3, r3
    d1c6:	2b00      	cmp	r3, #0
    d1c8:	d001      	beq.n	d1ce <spi_read+0x2a>
		return STATUS_ERR_IO;
    d1ca:	2310      	movs	r3, #16
    d1cc:	e027      	b.n	d21e <spi_read+0x7a>
	enum status_code retval = STATUS_OK;
    d1ce:	230f      	movs	r3, #15
    d1d0:	18fb      	adds	r3, r7, r3
    d1d2:	2200      	movs	r2, #0
    d1d4:	701a      	strb	r2, [r3, #0]
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    d1d6:	68bb      	ldr	r3, [r7, #8]
    d1d8:	8b5b      	ldrh	r3, [r3, #26]
    d1da:	b29b      	uxth	r3, r3
    d1dc:	001a      	movs	r2, r3
    d1de:	2304      	movs	r3, #4
    d1e0:	4013      	ands	r3, r2
    d1e2:	d006      	beq.n	d1f2 <spi_read+0x4e>
		retval = STATUS_ERR_OVERFLOW;
    d1e4:	230f      	movs	r3, #15
    d1e6:	18fb      	adds	r3, r7, r3
    d1e8:	221e      	movs	r2, #30
    d1ea:	701a      	strb	r2, [r3, #0]
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    d1ec:	68bb      	ldr	r3, [r7, #8]
    d1ee:	2204      	movs	r2, #4
    d1f0:	835a      	strh	r2, [r3, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    d1f2:	687b      	ldr	r3, [r7, #4]
    d1f4:	799b      	ldrb	r3, [r3, #6]
    d1f6:	2b01      	cmp	r3, #1
    d1f8:	d108      	bne.n	d20c <spi_read+0x68>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    d1fa:	68bb      	ldr	r3, [r7, #8]
    d1fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    d1fe:	b29b      	uxth	r3, r3
    d200:	05db      	lsls	r3, r3, #23
    d202:	0ddb      	lsrs	r3, r3, #23
    d204:	b29a      	uxth	r2, r3
    d206:	683b      	ldr	r3, [r7, #0]
    d208:	801a      	strh	r2, [r3, #0]
    d20a:	e005      	b.n	d218 <spi_read+0x74>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    d20c:	68bb      	ldr	r3, [r7, #8]
    d20e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    d210:	b2db      	uxtb	r3, r3
    d212:	b29a      	uxth	r2, r3
    d214:	683b      	ldr	r3, [r7, #0]
    d216:	801a      	strh	r2, [r3, #0]
	return retval;
    d218:	230f      	movs	r3, #15
    d21a:	18fb      	adds	r3, r7, r3
    d21c:	781b      	ldrb	r3, [r3, #0]
}
    d21e:	0018      	movs	r0, r3
    d220:	46bd      	mov	sp, r7
    d222:	b004      	add	sp, #16
    d224:	bd80      	pop	{r7, pc}
    d226:	46c0      	nop			; (mov r8, r8)
    d228:	0000d135 	.word	0x0000d135

0000d22c <_spi_set_config>:
 * \retval STATUS_OK               If the configuration was written
 */
static enum status_code _spi_set_config(
		struct spi_module *const module,
		const struct spi_config *const config)
{
    d22c:	b590      	push	{r4, r7, lr}
    d22e:	b093      	sub	sp, #76	; 0x4c
    d230:	af00      	add	r7, sp, #0
    d232:	6078      	str	r0, [r7, #4]
    d234:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(config);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    d236:	687b      	ldr	r3, [r7, #4]
    d238:	681b      	ldr	r3, [r3, #0]
    d23a:	637b      	str	r3, [r7, #52]	; 0x34
	Sercom *const hw = module->hw;
    d23c:	687b      	ldr	r3, [r7, #4]
    d23e:	681b      	ldr	r3, [r3, #0]
    d240:	633b      	str	r3, [r7, #48]	; 0x30

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
    d242:	231c      	movs	r3, #28
    d244:	18fb      	adds	r3, r7, r3
    d246:	0018      	movs	r0, r3
    d248:	4b75      	ldr	r3, [pc, #468]	; (d420 <_spi_set_config+0x1f4>)
    d24a:	4798      	blx	r3
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
    d24c:	231c      	movs	r3, #28
    d24e:	18fb      	adds	r3, r7, r3
    d250:	2200      	movs	r2, #0
    d252:	705a      	strb	r2, [r3, #1]
	if(config->mode == SPI_MODE_SLAVE) {
    d254:	683b      	ldr	r3, [r7, #0]
    d256:	781b      	ldrb	r3, [r3, #0]
    d258:	2b00      	cmp	r3, #0
    d25a:	d103      	bne.n	d264 <_spi_set_config+0x38>
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    d25c:	231c      	movs	r3, #28
    d25e:	18fb      	adds	r3, r7, r3
    d260:	2200      	movs	r2, #0
    d262:	709a      	strb	r2, [r3, #2]
	}

	uint32_t pad_pinmuxes[] = {
			config->pinmux_pad0, config->pinmux_pad1,
    d264:	683b      	ldr	r3, [r7, #0]
    d266:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	uint32_t pad_pinmuxes[] = {
    d268:	230c      	movs	r3, #12
    d26a:	18fb      	adds	r3, r7, r3
    d26c:	601a      	str	r2, [r3, #0]
			config->pinmux_pad0, config->pinmux_pad1,
    d26e:	683b      	ldr	r3, [r7, #0]
    d270:	6ada      	ldr	r2, [r3, #44]	; 0x2c
	uint32_t pad_pinmuxes[] = {
    d272:	230c      	movs	r3, #12
    d274:	18fb      	adds	r3, r7, r3
    d276:	605a      	str	r2, [r3, #4]
			config->pinmux_pad2, config->pinmux_pad3
    d278:	683b      	ldr	r3, [r7, #0]
    d27a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
	uint32_t pad_pinmuxes[] = {
    d27c:	230c      	movs	r3, #12
    d27e:	18fb      	adds	r3, r7, r3
    d280:	609a      	str	r2, [r3, #8]
			config->pinmux_pad2, config->pinmux_pad3
    d282:	683b      	ldr	r3, [r7, #0]
    d284:	6b5a      	ldr	r2, [r3, #52]	; 0x34
	uint32_t pad_pinmuxes[] = {
    d286:	230c      	movs	r3, #12
    d288:	18fb      	adds	r3, r7, r3
    d28a:	60da      	str	r2, [r3, #12]
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
    d28c:	2347      	movs	r3, #71	; 0x47
    d28e:	18fb      	adds	r3, r7, r3
    d290:	2200      	movs	r2, #0
    d292:	701a      	strb	r2, [r3, #0]
    d294:	e02c      	b.n	d2f0 <_spi_set_config+0xc4>
		uint32_t current_pinmux = pad_pinmuxes[pad];
    d296:	2347      	movs	r3, #71	; 0x47
    d298:	18fb      	adds	r3, r7, r3
    d29a:	781a      	ldrb	r2, [r3, #0]
    d29c:	230c      	movs	r3, #12
    d29e:	18fb      	adds	r3, r7, r3
    d2a0:	0092      	lsls	r2, r2, #2
    d2a2:	58d3      	ldr	r3, [r2, r3]
    d2a4:	643b      	str	r3, [r7, #64]	; 0x40

		if (current_pinmux == PINMUX_DEFAULT) {
    d2a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    d2a8:	2b00      	cmp	r3, #0
    d2aa:	d109      	bne.n	d2c0 <_spi_set_config+0x94>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    d2ac:	2347      	movs	r3, #71	; 0x47
    d2ae:	18fb      	adds	r3, r7, r3
    d2b0:	781a      	ldrb	r2, [r3, #0]
    d2b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    d2b4:	0011      	movs	r1, r2
    d2b6:	0018      	movs	r0, r3
    d2b8:	4b5a      	ldr	r3, [pc, #360]	; (d424 <_spi_set_config+0x1f8>)
    d2ba:	4798      	blx	r3
    d2bc:	0003      	movs	r3, r0
    d2be:	643b      	str	r3, [r7, #64]	; 0x40
		}

		if (current_pinmux != PINMUX_UNUSED) {
    d2c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    d2c2:	3301      	adds	r3, #1
    d2c4:	d00d      	beq.n	d2e2 <_spi_set_config+0xb6>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    d2c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    d2c8:	b2da      	uxtb	r2, r3
    d2ca:	231c      	movs	r3, #28
    d2cc:	18fb      	adds	r3, r7, r3
    d2ce:	701a      	strb	r2, [r3, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    d2d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    d2d2:	0c1b      	lsrs	r3, r3, #16
    d2d4:	b2db      	uxtb	r3, r3
    d2d6:	221c      	movs	r2, #28
    d2d8:	18ba      	adds	r2, r7, r2
    d2da:	0011      	movs	r1, r2
    d2dc:	0018      	movs	r0, r3
    d2de:	4b52      	ldr	r3, [pc, #328]	; (d428 <_spi_set_config+0x1fc>)
    d2e0:	4798      	blx	r3
	for (uint8_t pad = 0; pad < 4; pad++) {
    d2e2:	2347      	movs	r3, #71	; 0x47
    d2e4:	18fb      	adds	r3, r7, r3
    d2e6:	781a      	ldrb	r2, [r3, #0]
    d2e8:	2347      	movs	r3, #71	; 0x47
    d2ea:	18fb      	adds	r3, r7, r3
    d2ec:	3201      	adds	r2, #1
    d2ee:	701a      	strb	r2, [r3, #0]
    d2f0:	2347      	movs	r3, #71	; 0x47
    d2f2:	18fb      	adds	r3, r7, r3
    d2f4:	781b      	ldrb	r3, [r3, #0]
    d2f6:	2b03      	cmp	r3, #3
    d2f8:	d9cd      	bls.n	d296 <_spi_set_config+0x6a>
		}
	}

	module->mode             = config->mode;
    d2fa:	683b      	ldr	r3, [r7, #0]
    d2fc:	781a      	ldrb	r2, [r3, #0]
    d2fe:	687b      	ldr	r3, [r7, #4]
    d300:	715a      	strb	r2, [r3, #5]
	module->character_size   = config->character_size;
    d302:	683b      	ldr	r3, [r7, #0]
    d304:	7c1a      	ldrb	r2, [r3, #16]
    d306:	687b      	ldr	r3, [r7, #4]
    d308:	719a      	strb	r2, [r3, #6]
	module->receiver_enabled = config->receiver_enable;
    d30a:	683b      	ldr	r3, [r7, #0]
    d30c:	7c9a      	ldrb	r2, [r3, #18]
    d30e:	687b      	ldr	r3, [r7, #4]
    d310:	71da      	strb	r2, [r3, #7]
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	module->master_slave_select_enable = config->master_slave_select_enable;
    d312:	683b      	ldr	r3, [r7, #0]
    d314:	7d1a      	ldrb	r2, [r3, #20]
    d316:	687b      	ldr	r3, [r7, #4]
    d318:	721a      	strb	r2, [r3, #8]
#  endif

#  if CONF_SPI_MASTER_ENABLE == true
	/* Value to write to BAUD register */
	uint16_t baud = 0;
    d31a:	230a      	movs	r3, #10
    d31c:	18fb      	adds	r3, r7, r3
    d31e:	2200      	movs	r2, #0
    d320:	801a      	strh	r2, [r3, #0]
#  endif
	/* Value to write to CTRLA register */
	uint32_t ctrla = 0;
    d322:	2300      	movs	r3, #0
    d324:	63fb      	str	r3, [r7, #60]	; 0x3c
	/* Value to write to CTRLB register */
	uint32_t ctrlb = 0;
    d326:	2300      	movs	r3, #0
    d328:	63bb      	str	r3, [r7, #56]	; 0x38

# if CONF_SPI_MASTER_ENABLE == true
	/* Find baud value and write it */
	if (config->mode == SPI_MODE_MASTER) {
    d32a:	683b      	ldr	r3, [r7, #0]
    d32c:	781b      	ldrb	r3, [r3, #0]
    d32e:	2b01      	cmp	r3, #1
    d330:	d129      	bne.n	d386 <_spi_set_config+0x15a>
		/* Find frequency of the internal SERCOMi_GCLK_ID_CORE */
		uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    d332:	687b      	ldr	r3, [r7, #4]
    d334:	681b      	ldr	r3, [r3, #0]
    d336:	0018      	movs	r0, r3
    d338:	4b3c      	ldr	r3, [pc, #240]	; (d42c <_spi_set_config+0x200>)
    d33a:	4798      	blx	r3
    d33c:	0003      	movs	r3, r0
    d33e:	62fb      	str	r3, [r7, #44]	; 0x2c
		uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    d340:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    d342:	3314      	adds	r3, #20
    d344:	62bb      	str	r3, [r7, #40]	; 0x28
		uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
    d346:	6abb      	ldr	r3, [r7, #40]	; 0x28
    d348:	b2db      	uxtb	r3, r3
    d34a:	0018      	movs	r0, r3
    d34c:	4b38      	ldr	r3, [pc, #224]	; (d430 <_spi_set_config+0x204>)
    d34e:	4798      	blx	r3
    d350:	0003      	movs	r3, r0
    d352:	627b      	str	r3, [r7, #36]	; 0x24

		/* Get baud value, based on baudrate and the internal clock frequency */
		enum status_code error_code = _sercom_get_sync_baud_val(
    d354:	683b      	ldr	r3, [r7, #0]
    d356:	699b      	ldr	r3, [r3, #24]
    d358:	2223      	movs	r2, #35	; 0x23
    d35a:	18bc      	adds	r4, r7, r2
    d35c:	220a      	movs	r2, #10
    d35e:	18ba      	adds	r2, r7, r2
    d360:	6a79      	ldr	r1, [r7, #36]	; 0x24
    d362:	0018      	movs	r0, r3
    d364:	4b33      	ldr	r3, [pc, #204]	; (d434 <_spi_set_config+0x208>)
    d366:	4798      	blx	r3
    d368:	0003      	movs	r3, r0
    d36a:	7023      	strb	r3, [r4, #0]
				config->mode_specific.master.baudrate,
				internal_clock, &baud);

		if (error_code != STATUS_OK) {
    d36c:	2323      	movs	r3, #35	; 0x23
    d36e:	18fb      	adds	r3, r7, r3
    d370:	781b      	ldrb	r3, [r3, #0]
    d372:	2b00      	cmp	r3, #0
    d374:	d001      	beq.n	d37a <_spi_set_config+0x14e>
			/* Baud rate calculation error, return status code */
			return STATUS_ERR_INVALID_ARG;
    d376:	2317      	movs	r3, #23
    d378:	e04e      	b.n	d418 <_spi_set_config+0x1ec>
		}

		spi_module->BAUD.reg = (uint8_t)baud;
    d37a:	230a      	movs	r3, #10
    d37c:	18fb      	adds	r3, r7, r3
    d37e:	881b      	ldrh	r3, [r3, #0]
    d380:	b2da      	uxtb	r2, r3
    d382:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    d384:	731a      	strb	r2, [r3, #12]
			ctrlb |= SERCOM_SPI_CTRLB_PLOADEN;
		}
	}
# endif
	/* Set data order */
	ctrla |= config->data_order;
    d386:	683b      	ldr	r3, [r7, #0]
    d388:	685b      	ldr	r3, [r3, #4]
    d38a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    d38c:	4313      	orrs	r3, r2
    d38e:	63fb      	str	r3, [r7, #60]	; 0x3c

	/* Set clock polarity and clock phase */
	ctrla |= config->transfer_mode;
    d390:	683b      	ldr	r3, [r7, #0]
    d392:	689b      	ldr	r3, [r3, #8]
    d394:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    d396:	4313      	orrs	r3, r2
    d398:	63fb      	str	r3, [r7, #60]	; 0x3c

	/* Set MUX setting */
	ctrla |= config->mux_setting;
    d39a:	683b      	ldr	r3, [r7, #0]
    d39c:	68db      	ldr	r3, [r3, #12]
    d39e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    d3a0:	4313      	orrs	r3, r2
    d3a2:	63fb      	str	r3, [r7, #60]	; 0x3c

	/* Set SPI character size */
	ctrlb |= config->character_size;
    d3a4:	683b      	ldr	r3, [r7, #0]
    d3a6:	7c1b      	ldrb	r3, [r3, #16]
    d3a8:	001a      	movs	r2, r3
    d3aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    d3ac:	4313      	orrs	r3, r2
    d3ae:	63bb      	str	r3, [r7, #56]	; 0x38

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
    d3b0:	683b      	ldr	r3, [r7, #0]
    d3b2:	7c5b      	ldrb	r3, [r3, #17]
    d3b4:	2b00      	cmp	r3, #0
    d3b6:	d103      	bne.n	d3c0 <_spi_set_config+0x194>
    d3b8:	4b1f      	ldr	r3, [pc, #124]	; (d438 <_spi_set_config+0x20c>)
    d3ba:	4798      	blx	r3
    d3bc:	1e03      	subs	r3, r0, #0
    d3be:	d003      	beq.n	d3c8 <_spi_set_config+0x19c>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
    d3c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    d3c2:	2280      	movs	r2, #128	; 0x80
    d3c4:	4313      	orrs	r3, r2
    d3c6:	63fb      	str	r3, [r7, #60]	; 0x3c
	}

	if (config->receiver_enable) {
    d3c8:	683b      	ldr	r3, [r7, #0]
    d3ca:	7c9b      	ldrb	r3, [r3, #18]
    d3cc:	2b00      	cmp	r3, #0
    d3ce:	d004      	beq.n	d3da <_spi_set_config+0x1ae>
		/* Enable receiver */
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
    d3d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    d3d2:	2280      	movs	r2, #128	; 0x80
    d3d4:	0292      	lsls	r2, r2, #10
    d3d6:	4313      	orrs	r3, r2
    d3d8:	63bb      	str	r3, [r7, #56]	; 0x38
	}
#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	if (config->select_slave_low_detect_enable) {
    d3da:	683b      	ldr	r3, [r7, #0]
    d3dc:	7cdb      	ldrb	r3, [r3, #19]
    d3de:	2b00      	cmp	r3, #0
    d3e0:	d004      	beq.n	d3ec <_spi_set_config+0x1c0>
		/* Enable Slave Select Low Detect */
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
    d3e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    d3e4:	2280      	movs	r2, #128	; 0x80
    d3e6:	0092      	lsls	r2, r2, #2
    d3e8:	4313      	orrs	r3, r2
    d3ea:	63bb      	str	r3, [r7, #56]	; 0x38
	}
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	if (config->master_slave_select_enable) {
    d3ec:	683b      	ldr	r3, [r7, #0]
    d3ee:	7d1b      	ldrb	r3, [r3, #20]
    d3f0:	2b00      	cmp	r3, #0
    d3f2:	d004      	beq.n	d3fe <_spi_set_config+0x1d2>
		/* Enable Master Slave Select */
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
    d3f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    d3f6:	2280      	movs	r2, #128	; 0x80
    d3f8:	0192      	lsls	r2, r2, #6
    d3fa:	4313      	orrs	r3, r2
    d3fc:	63bb      	str	r3, [r7, #56]	; 0x38
	}
#  endif
	/* Write CTRLA register */
	spi_module->CTRLA.reg |= ctrla;
    d3fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    d400:	681a      	ldr	r2, [r3, #0]
    d402:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    d404:	431a      	orrs	r2, r3
    d406:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    d408:	601a      	str	r2, [r3, #0]

	/* Write CTRLB register */
	spi_module->CTRLB.reg |= ctrlb;
    d40a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    d40c:	685a      	ldr	r2, [r3, #4]
    d40e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    d410:	431a      	orrs	r2, r3
    d412:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    d414:	605a      	str	r2, [r3, #4]

	return STATUS_OK;
    d416:	2300      	movs	r3, #0
}
    d418:	0018      	movs	r0, r3
    d41a:	46bd      	mov	sp, r7
    d41c:	b013      	add	sp, #76	; 0x4c
    d41e:	bd90      	pop	{r4, r7, pc}
    d420:	0000cf79 	.word	0x0000cf79
    d424:	0000cc19 	.word	0x0000cc19
    d428:	000003a1 	.word	0x000003a1
    d42c:	0000cdd5 	.word	0x0000cdd5
    d430:	0000f361 	.word	0x0000f361
    d434:	0000c94f 	.word	0x0000c94f
    d438:	0000d0ed 	.word	0x0000d0ed

0000d43c <spi_init>:
 */
enum status_code spi_init(
		struct spi_module *const module,
		Sercom *const hw,
		const struct spi_config *const config)
{
    d43c:	b590      	push	{r4, r7, lr}
    d43e:	b08b      	sub	sp, #44	; 0x2c
    d440:	af00      	add	r7, sp, #0
    d442:	60f8      	str	r0, [r7, #12]
    d444:	60b9      	str	r1, [r7, #8]
    d446:	607a      	str	r2, [r7, #4]
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
    d448:	68fb      	ldr	r3, [r7, #12]
    d44a:	68ba      	ldr	r2, [r7, #8]
    d44c:	601a      	str	r2, [r3, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);
    d44e:	68fb      	ldr	r3, [r7, #12]
    d450:	681b      	ldr	r3, [r3, #0]
    d452:	623b      	str	r3, [r7, #32]

	/* Check if module is enabled. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
    d454:	6a3b      	ldr	r3, [r7, #32]
    d456:	681b      	ldr	r3, [r3, #0]
    d458:	2202      	movs	r2, #2
    d45a:	4013      	ands	r3, r2
    d45c:	d001      	beq.n	d462 <spi_init+0x26>
#  if SPI_CALLBACK_MODE == false
		/* Check if config is valid */
		return _spi_check_config(module, config);
#  else
		return STATUS_ERR_DENIED;
    d45e:	231c      	movs	r3, #28
    d460:	e09c      	b.n	d59c <spi_init+0x160>
#  endif
	}

	/* Check if reset is in progress. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
    d462:	6a3b      	ldr	r3, [r7, #32]
    d464:	681b      	ldr	r3, [r3, #0]
    d466:	2201      	movs	r2, #1
    d468:	4013      	ands	r3, r2
    d46a:	d001      	beq.n	d470 <spi_init+0x34>
		return STATUS_BUSY;
    d46c:	2305      	movs	r3, #5
    d46e:	e095      	b.n	d59c <spi_init+0x160>
	}

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    d470:	68fb      	ldr	r3, [r7, #12]
    d472:	681b      	ldr	r3, [r3, #0]
    d474:	0018      	movs	r0, r3
    d476:	4b4b      	ldr	r3, [pc, #300]	; (d5a4 <spi_init+0x168>)
    d478:	4798      	blx	r3
    d47a:	0003      	movs	r3, r0
    d47c:	61fb      	str	r3, [r7, #28]
	}
#elif (SAMC20) || (SAML22)
	pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    d47e:	69fb      	ldr	r3, [r7, #28]
    d480:	3302      	adds	r3, #2
    d482:	61bb      	str	r3, [r7, #24]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    d484:	69fb      	ldr	r3, [r7, #28]
    d486:	3314      	adds	r3, #20
    d488:	617b      	str	r3, [r7, #20]
#  endif
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    d48a:	2201      	movs	r2, #1
    d48c:	69bb      	ldr	r3, [r7, #24]
    d48e:	409a      	lsls	r2, r3
    d490:	0013      	movs	r3, r2
    d492:	0019      	movs	r1, r3
    d494:	2002      	movs	r0, #2
    d496:	4b44      	ldr	r3, [pc, #272]	; (d5a8 <spi_init+0x16c>)
    d498:	4798      	blx	r3
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
    d49a:	2310      	movs	r3, #16
    d49c:	18fb      	adds	r3, r7, r3
    d49e:	0018      	movs	r0, r3
    d4a0:	4b42      	ldr	r3, [pc, #264]	; (d5ac <spi_init+0x170>)
    d4a2:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->generator_source;
    d4a4:	687b      	ldr	r3, [r7, #4]
    d4a6:	2224      	movs	r2, #36	; 0x24
    d4a8:	5c9a      	ldrb	r2, [r3, r2]
    d4aa:	2310      	movs	r3, #16
    d4ac:	18fb      	adds	r3, r7, r3
    d4ae:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    d4b0:	697b      	ldr	r3, [r7, #20]
    d4b2:	b2db      	uxtb	r3, r3
    d4b4:	2210      	movs	r2, #16
    d4b6:	18ba      	adds	r2, r7, r2
    d4b8:	0011      	movs	r1, r2
    d4ba:	0018      	movs	r0, r3
    d4bc:	4b3c      	ldr	r3, [pc, #240]	; (d5b0 <spi_init+0x174>)
    d4be:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    d4c0:	697b      	ldr	r3, [r7, #20]
    d4c2:	b2db      	uxtb	r3, r3
    d4c4:	0018      	movs	r0, r3
    d4c6:	4b3b      	ldr	r3, [pc, #236]	; (d5b4 <spi_init+0x178>)
    d4c8:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    d4ca:	687b      	ldr	r3, [r7, #4]
    d4cc:	2224      	movs	r2, #36	; 0x24
    d4ce:	5c9b      	ldrb	r3, [r3, r2]
    d4d0:	2100      	movs	r1, #0
    d4d2:	0018      	movs	r0, r3
    d4d4:	4b38      	ldr	r3, [pc, #224]	; (d5b8 <spi_init+0x17c>)
    d4d6:	4798      	blx	r3

#  if CONF_SPI_MASTER_ENABLE == true
	if (config->mode == SPI_MODE_MASTER) {
    d4d8:	687b      	ldr	r3, [r7, #4]
    d4da:	781b      	ldrb	r3, [r3, #0]
    d4dc:	2b01      	cmp	r3, #1
    d4de:	d105      	bne.n	d4ec <spi_init+0xb0>
		/* Set the SERCOM in SPI master mode */
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x3);
    d4e0:	6a3b      	ldr	r3, [r7, #32]
    d4e2:	681b      	ldr	r3, [r3, #0]
    d4e4:	220c      	movs	r2, #12
    d4e6:	431a      	orrs	r2, r3
    d4e8:	6a3b      	ldr	r3, [r7, #32]
    d4ea:	601a      	str	r2, [r3, #0]
	/* Temporary variables */
	uint8_t i;
	uint8_t instance_index;

	/* Initialize parameters */
	for (i = 0; i < SPI_CALLBACK_N; i++) {
    d4ec:	2327      	movs	r3, #39	; 0x27
    d4ee:	18fb      	adds	r3, r7, r3
    d4f0:	2200      	movs	r2, #0
    d4f2:	701a      	strb	r2, [r3, #0]
    d4f4:	e010      	b.n	d518 <spi_init+0xdc>
		module->callback[i]        = NULL;
    d4f6:	2327      	movs	r3, #39	; 0x27
    d4f8:	18fb      	adds	r3, r7, r3
    d4fa:	781b      	ldrb	r3, [r3, #0]
    d4fc:	68fa      	ldr	r2, [r7, #12]
    d4fe:	3302      	adds	r3, #2
    d500:	009b      	lsls	r3, r3, #2
    d502:	18d3      	adds	r3, r2, r3
    d504:	3304      	adds	r3, #4
    d506:	2200      	movs	r2, #0
    d508:	601a      	str	r2, [r3, #0]
	for (i = 0; i < SPI_CALLBACK_N; i++) {
    d50a:	2327      	movs	r3, #39	; 0x27
    d50c:	18fb      	adds	r3, r7, r3
    d50e:	781a      	ldrb	r2, [r3, #0]
    d510:	2327      	movs	r3, #39	; 0x27
    d512:	18fb      	adds	r3, r7, r3
    d514:	3201      	adds	r2, #1
    d516:	701a      	strb	r2, [r3, #0]
    d518:	2327      	movs	r3, #39	; 0x27
    d51a:	18fb      	adds	r3, r7, r3
    d51c:	781b      	ldrb	r3, [r3, #0]
    d51e:	2b06      	cmp	r3, #6
    d520:	d9e9      	bls.n	d4f6 <spi_init+0xba>
	}
	module->tx_buffer_ptr              = NULL;
    d522:	68fb      	ldr	r3, [r7, #12]
    d524:	2200      	movs	r2, #0
    d526:	62da      	str	r2, [r3, #44]	; 0x2c
	module->rx_buffer_ptr              = NULL;
    d528:	68fb      	ldr	r3, [r7, #12]
    d52a:	2200      	movs	r2, #0
    d52c:	629a      	str	r2, [r3, #40]	; 0x28
	module->remaining_tx_buffer_length = 0x0000;
    d52e:	68fb      	ldr	r3, [r7, #12]
    d530:	2200      	movs	r2, #0
    d532:	869a      	strh	r2, [r3, #52]	; 0x34
	module->remaining_rx_buffer_length = 0x0000;
    d534:	68fb      	ldr	r3, [r7, #12]
    d536:	2200      	movs	r2, #0
    d538:	861a      	strh	r2, [r3, #48]	; 0x30
	module->registered_callback        = 0x00;
    d53a:	68fb      	ldr	r3, [r7, #12]
    d53c:	2236      	movs	r2, #54	; 0x36
    d53e:	2100      	movs	r1, #0
    d540:	5499      	strb	r1, [r3, r2]
	module->enabled_callback           = 0x00;
    d542:	68fb      	ldr	r3, [r7, #12]
    d544:	2237      	movs	r2, #55	; 0x37
    d546:	2100      	movs	r1, #0
    d548:	5499      	strb	r1, [r3, r2]
	module->status                     = STATUS_OK;
    d54a:	68fb      	ldr	r3, [r7, #12]
    d54c:	2238      	movs	r2, #56	; 0x38
    d54e:	2100      	movs	r1, #0
    d550:	5499      	strb	r1, [r3, r2]
	module->dir                        = SPI_DIRECTION_IDLE;
    d552:	68fb      	ldr	r3, [r7, #12]
    d554:	2203      	movs	r2, #3
    d556:	725a      	strb	r2, [r3, #9]
	module->locked                     = false;
    d558:	68fb      	ldr	r3, [r7, #12]
    d55a:	2200      	movs	r2, #0
    d55c:	711a      	strb	r2, [r3, #4]
	/*
	 * Set interrupt handler and register SPI software module struct in
	 * look-up table
	 */
	instance_index = _sercom_get_sercom_inst_index(module->hw);
    d55e:	68fb      	ldr	r3, [r7, #12]
    d560:	681b      	ldr	r3, [r3, #0]
    d562:	2213      	movs	r2, #19
    d564:	18bc      	adds	r4, r7, r2
    d566:	0018      	movs	r0, r3
    d568:	4b0e      	ldr	r3, [pc, #56]	; (d5a4 <spi_init+0x168>)
    d56a:	4798      	blx	r3
    d56c:	0003      	movs	r3, r0
    d56e:	7023      	strb	r3, [r4, #0]
	_sercom_set_handler(instance_index, _spi_interrupt_handler);
    d570:	4a12      	ldr	r2, [pc, #72]	; (d5bc <spi_init+0x180>)
    d572:	2313      	movs	r3, #19
    d574:	18fb      	adds	r3, r7, r3
    d576:	781b      	ldrb	r3, [r3, #0]
    d578:	0011      	movs	r1, r2
    d57a:	0018      	movs	r0, r3
    d57c:	4b10      	ldr	r3, [pc, #64]	; (d5c0 <spi_init+0x184>)
    d57e:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    d580:	2313      	movs	r3, #19
    d582:	18fb      	adds	r3, r7, r3
    d584:	781a      	ldrb	r2, [r3, #0]
    d586:	4b0f      	ldr	r3, [pc, #60]	; (d5c4 <spi_init+0x188>)
    d588:	0092      	lsls	r2, r2, #2
    d58a:	68f9      	ldr	r1, [r7, #12]
    d58c:	50d1      	str	r1, [r2, r3]
#endif

	/* Write configuration to module and return status code */
	return _spi_set_config(module, config);
    d58e:	687a      	ldr	r2, [r7, #4]
    d590:	68fb      	ldr	r3, [r7, #12]
    d592:	0011      	movs	r1, r2
    d594:	0018      	movs	r0, r3
    d596:	4b0c      	ldr	r3, [pc, #48]	; (d5c8 <spi_init+0x18c>)
    d598:	4798      	blx	r3
    d59a:	0003      	movs	r3, r0
}
    d59c:	0018      	movs	r0, r3
    d59e:	46bd      	mov	sp, r7
    d5a0:	b00b      	add	sp, #44	; 0x2c
    d5a2:	bd90      	pop	{r4, r7, pc}
    d5a4:	0000cdd5 	.word	0x0000cdd5
    d5a8:	0000d091 	.word	0x0000d091
    d5ac:	0000d079 	.word	0x0000d079
    d5b0:	0000f23d 	.word	0x0000f23d
    d5b4:	0000f281 	.word	0x0000f281
    d5b8:	0000cb8d 	.word	0x0000cb8d
    d5bc:	0000d815 	.word	0x0000d815
    d5c0:	0000ce39 	.word	0x0000ce39
    d5c4:	20002b5c 	.word	0x20002b5c
    d5c8:	0000d22d 	.word	0x0000d22d

0000d5cc <spi_select_slave>:
 */
enum status_code spi_select_slave(
		struct spi_module *const module,
		struct spi_slave_inst *const slave,
		const bool select)
{
    d5cc:	b580      	push	{r7, lr}
    d5ce:	b086      	sub	sp, #24
    d5d0:	af00      	add	r7, sp, #0
    d5d2:	60f8      	str	r0, [r7, #12]
    d5d4:	60b9      	str	r1, [r7, #8]
    d5d6:	1dfb      	adds	r3, r7, #7
    d5d8:	701a      	strb	r2, [r3, #0]
	Assert(module);
	Assert(module->hw);
	Assert(slave);

	/* Check that the SPI module is operating in master mode */
	if (module->mode != SPI_MODE_MASTER) {
    d5da:	68fb      	ldr	r3, [r7, #12]
    d5dc:	795b      	ldrb	r3, [r3, #5]
    d5de:	2b01      	cmp	r3, #1
    d5e0:	d001      	beq.n	d5e6 <spi_select_slave+0x1a>
		return STATUS_ERR_UNSUPPORTED_DEV;
    d5e2:	2315      	movs	r3, #21
    d5e4:	e05c      	b.n	d6a0 <spi_select_slave+0xd4>
	}
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	if(!(module->master_slave_select_enable))
    d5e6:	68fb      	ldr	r3, [r7, #12]
    d5e8:	7a1b      	ldrb	r3, [r3, #8]
    d5ea:	2201      	movs	r2, #1
    d5ec:	4053      	eors	r3, r2
    d5ee:	b2db      	uxtb	r3, r3
    d5f0:	2b00      	cmp	r3, #0
    d5f2:	d054      	beq.n	d69e <spi_select_slave+0xd2>
#  endif
	{
		if (select) {
    d5f4:	1dfb      	adds	r3, r7, #7
    d5f6:	781b      	ldrb	r3, [r3, #0]
    d5f8:	2b00      	cmp	r3, #0
    d5fa:	d04a      	beq.n	d692 <spi_select_slave+0xc6>
			/* Check if address recognition is enabled */
			if (slave->address_enabled) {
    d5fc:	68bb      	ldr	r3, [r7, #8]
    d5fe:	785b      	ldrb	r3, [r3, #1]
    d600:	2b00      	cmp	r3, #0
    d602:	d03f      	beq.n	d684 <spi_select_slave+0xb8>
				/* Check if the module is ready to write the address */
				if (!spi_is_ready_to_write(module)) {
    d604:	68fb      	ldr	r3, [r7, #12]
    d606:	0018      	movs	r0, r3
    d608:	4b27      	ldr	r3, [pc, #156]	; (d6a8 <spi_select_slave+0xdc>)
    d60a:	4798      	blx	r3
    d60c:	0003      	movs	r3, r0
    d60e:	001a      	movs	r2, r3
    d610:	2301      	movs	r3, #1
    d612:	4053      	eors	r3, r2
    d614:	b2db      	uxtb	r3, r3
    d616:	2b00      	cmp	r3, #0
    d618:	d007      	beq.n	d62a <spi_select_slave+0x5e>
					/* Not ready, do not select slave and return */
					port_pin_set_output_level(slave->ss_pin, true);
    d61a:	68bb      	ldr	r3, [r7, #8]
    d61c:	781b      	ldrb	r3, [r3, #0]
    d61e:	2101      	movs	r1, #1
    d620:	0018      	movs	r0, r3
    d622:	4b22      	ldr	r3, [pc, #136]	; (d6ac <spi_select_slave+0xe0>)
    d624:	4798      	blx	r3
					return STATUS_BUSY;
    d626:	2305      	movs	r3, #5
    d628:	e03a      	b.n	d6a0 <spi_select_slave+0xd4>
				}

				/* Drive Slave Select low */
				port_pin_set_output_level(slave->ss_pin, false);
    d62a:	68bb      	ldr	r3, [r7, #8]
    d62c:	781b      	ldrb	r3, [r3, #0]
    d62e:	2100      	movs	r1, #0
    d630:	0018      	movs	r0, r3
    d632:	4b1e      	ldr	r3, [pc, #120]	; (d6ac <spi_select_slave+0xe0>)
    d634:	4798      	blx	r3

				/* Write address to slave */
				spi_write(module, slave->address);
    d636:	68bb      	ldr	r3, [r7, #8]
    d638:	789b      	ldrb	r3, [r3, #2]
    d63a:	b29a      	uxth	r2, r3
    d63c:	68fb      	ldr	r3, [r7, #12]
    d63e:	0011      	movs	r1, r2
    d640:	0018      	movs	r0, r3
    d642:	4b1b      	ldr	r3, [pc, #108]	; (d6b0 <spi_select_slave+0xe4>)
    d644:	4798      	blx	r3

				if (!(module->receiver_enabled)) {
    d646:	68fb      	ldr	r3, [r7, #12]
    d648:	79db      	ldrb	r3, [r3, #7]
    d64a:	2201      	movs	r2, #1
    d64c:	4053      	eors	r3, r2
    d64e:	b2db      	uxtb	r3, r3
    d650:	2b00      	cmp	r3, #0
    d652:	d024      	beq.n	d69e <spi_select_slave+0xd2>
					/* Flush contents of shift register shifted back from slave */
					while (!spi_is_ready_to_read(module)) {
    d654:	46c0      	nop			; (mov r8, r8)
    d656:	68fb      	ldr	r3, [r7, #12]
    d658:	0018      	movs	r0, r3
    d65a:	4b16      	ldr	r3, [pc, #88]	; (d6b4 <spi_select_slave+0xe8>)
    d65c:	4798      	blx	r3
    d65e:	0003      	movs	r3, r0
    d660:	001a      	movs	r2, r3
    d662:	2301      	movs	r3, #1
    d664:	4053      	eors	r3, r2
    d666:	b2db      	uxtb	r3, r3
    d668:	2b00      	cmp	r3, #0
    d66a:	d1f4      	bne.n	d656 <spi_select_slave+0x8a>
					}
					uint16_t flush = 0;
    d66c:	2316      	movs	r3, #22
    d66e:	18fb      	adds	r3, r7, r3
    d670:	2200      	movs	r2, #0
    d672:	801a      	strh	r2, [r3, #0]
					spi_read(module, &flush);
    d674:	2316      	movs	r3, #22
    d676:	18fa      	adds	r2, r7, r3
    d678:	68fb      	ldr	r3, [r7, #12]
    d67a:	0011      	movs	r1, r2
    d67c:	0018      	movs	r0, r3
    d67e:	4b0e      	ldr	r3, [pc, #56]	; (d6b8 <spi_select_slave+0xec>)
    d680:	4798      	blx	r3
    d682:	e00c      	b.n	d69e <spi_select_slave+0xd2>
				}
			} else {
				/* Drive Slave Select low */
				port_pin_set_output_level(slave->ss_pin, false);
    d684:	68bb      	ldr	r3, [r7, #8]
    d686:	781b      	ldrb	r3, [r3, #0]
    d688:	2100      	movs	r1, #0
    d68a:	0018      	movs	r0, r3
    d68c:	4b07      	ldr	r3, [pc, #28]	; (d6ac <spi_select_slave+0xe0>)
    d68e:	4798      	blx	r3
    d690:	e005      	b.n	d69e <spi_select_slave+0xd2>
			}
		} else {
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
    d692:	68bb      	ldr	r3, [r7, #8]
    d694:	781b      	ldrb	r3, [r3, #0]
    d696:	2101      	movs	r1, #1
    d698:	0018      	movs	r0, r3
    d69a:	4b04      	ldr	r3, [pc, #16]	; (d6ac <spi_select_slave+0xe0>)
    d69c:	4798      	blx	r3
		}
	}
	return STATUS_OK;
    d69e:	2300      	movs	r3, #0
}
    d6a0:	0018      	movs	r0, r3
    d6a2:	46bd      	mov	sp, r7
    d6a4:	b006      	add	sp, #24
    d6a6:	bd80      	pop	{r7, pc}
    d6a8:	0000d10d 	.word	0x0000d10d
    d6ac:	0000d025 	.word	0x0000d025
    d6b0:	0000d15d 	.word	0x0000d15d
    d6b4:	0000d135 	.word	0x0000d135
    d6b8:	0000d1a5 	.word	0x0000d1a5

0000d6bc <_spi_write>:
 *
 * \param[in,out]  module  Pointer to SPI software instance struct
 */
static void _spi_write(
		struct spi_module *const module)
{
    d6bc:	b580      	push	{r7, lr}
    d6be:	b084      	sub	sp, #16
    d6c0:	af00      	add	r7, sp, #0
    d6c2:	6078      	str	r0, [r7, #4]
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    d6c4:	687b      	ldr	r3, [r7, #4]
    d6c6:	681b      	ldr	r3, [r3, #0]
    d6c8:	60bb      	str	r3, [r7, #8]

	/* Write value will be at least 8-bits long */
	uint16_t data_to_send = *(module->tx_buffer_ptr);
    d6ca:	687b      	ldr	r3, [r7, #4]
    d6cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    d6ce:	781b      	ldrb	r3, [r3, #0]
    d6d0:	b2da      	uxtb	r2, r3
    d6d2:	230e      	movs	r3, #14
    d6d4:	18fb      	adds	r3, r7, r3
    d6d6:	801a      	strh	r2, [r3, #0]
	/* Increment 8-bit pointer */
	(module->tx_buffer_ptr)++;
    d6d8:	687b      	ldr	r3, [r7, #4]
    d6da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    d6dc:	1c5a      	adds	r2, r3, #1
    d6de:	687b      	ldr	r3, [r7, #4]
    d6e0:	62da      	str	r2, [r3, #44]	; 0x2c

	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    d6e2:	687b      	ldr	r3, [r7, #4]
    d6e4:	799b      	ldrb	r3, [r3, #6]
    d6e6:	2b01      	cmp	r3, #1
    d6e8:	d113      	bne.n	d712 <_spi_write+0x56>
		data_to_send |= ((*(module->tx_buffer_ptr)) << 8);
    d6ea:	687b      	ldr	r3, [r7, #4]
    d6ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    d6ee:	781b      	ldrb	r3, [r3, #0]
    d6f0:	b2db      	uxtb	r3, r3
    d6f2:	021b      	lsls	r3, r3, #8
    d6f4:	b21a      	sxth	r2, r3
    d6f6:	230e      	movs	r3, #14
    d6f8:	18fb      	adds	r3, r7, r3
    d6fa:	2100      	movs	r1, #0
    d6fc:	5e5b      	ldrsh	r3, [r3, r1]
    d6fe:	4313      	orrs	r3, r2
    d700:	b21a      	sxth	r2, r3
    d702:	230e      	movs	r3, #14
    d704:	18fb      	adds	r3, r7, r3
    d706:	801a      	strh	r2, [r3, #0]
		/* Increment 8-bit pointer */
		(module->tx_buffer_ptr)++;
    d708:	687b      	ldr	r3, [r7, #4]
    d70a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    d70c:	1c5a      	adds	r2, r3, #1
    d70e:	687b      	ldr	r3, [r7, #4]
    d710:	62da      	str	r2, [r3, #44]	; 0x2c
	}

	/* Write the data to send*/
	spi_hw->DATA.reg = data_to_send & SERCOM_SPI_DATA_MASK;
    d712:	230e      	movs	r3, #14
    d714:	18fb      	adds	r3, r7, r3
    d716:	881b      	ldrh	r3, [r3, #0]
    d718:	05db      	lsls	r3, r3, #23
    d71a:	0dda      	lsrs	r2, r3, #23
    d71c:	68bb      	ldr	r3, [r7, #8]
    d71e:	629a      	str	r2, [r3, #40]	; 0x28

	/* Decrement remaining buffer length */
	(module->remaining_tx_buffer_length)--;
    d720:	687b      	ldr	r3, [r7, #4]
    d722:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
    d724:	b29b      	uxth	r3, r3
    d726:	3b01      	subs	r3, #1
    d728:	b29a      	uxth	r2, r3
    d72a:	687b      	ldr	r3, [r7, #4]
    d72c:	869a      	strh	r2, [r3, #52]	; 0x34
}
    d72e:	46c0      	nop			; (mov r8, r8)
    d730:	46bd      	mov	sp, r7
    d732:	b004      	add	sp, #16
    d734:	bd80      	pop	{r7, pc}
	...

0000d738 <_spi_write_dummy>:
 *
 * \param[in,out]  module  Pointer to SPI software instance struct
 */
static void _spi_write_dummy(
		struct spi_module *const module)
{
    d738:	b580      	push	{r7, lr}
    d73a:	b084      	sub	sp, #16
    d73c:	af00      	add	r7, sp, #0
    d73e:	6078      	str	r0, [r7, #4]
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    d740:	687b      	ldr	r3, [r7, #4]
    d742:	681b      	ldr	r3, [r3, #0]
    d744:	60fb      	str	r3, [r7, #12]

	/* Write dummy byte */
	spi_hw->DATA.reg = dummy_write;
    d746:	4b08      	ldr	r3, [pc, #32]	; (d768 <_spi_write_dummy+0x30>)
    d748:	881b      	ldrh	r3, [r3, #0]
    d74a:	001a      	movs	r2, r3
    d74c:	68fb      	ldr	r3, [r7, #12]
    d74e:	629a      	str	r2, [r3, #40]	; 0x28

	/* Decrement remaining dummy buffer length */
	module->remaining_dummy_buffer_length--;
    d750:	687b      	ldr	r3, [r7, #4]
    d752:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
    d754:	b29b      	uxth	r3, r3
    d756:	3b01      	subs	r3, #1
    d758:	b29a      	uxth	r2, r3
    d75a:	687b      	ldr	r3, [r7, #4]
    d75c:	865a      	strh	r2, [r3, #50]	; 0x32
}
    d75e:	46c0      	nop			; (mov r8, r8)
    d760:	46bd      	mov	sp, r7
    d762:	b004      	add	sp, #16
    d764:	bd80      	pop	{r7, pc}
    d766:	46c0      	nop			; (mov r8, r8)
    d768:	20002b74 	.word	0x20002b74

0000d76c <_spi_read_dummy>:
 *
 * \param[in,out]  module  Pointer to SPI software instance struct
 */
static void _spi_read_dummy(
		struct spi_module *const module)
{
    d76c:	b580      	push	{r7, lr}
    d76e:	b084      	sub	sp, #16
    d770:	af00      	add	r7, sp, #0
    d772:	6078      	str	r0, [r7, #4]
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    d774:	687b      	ldr	r3, [r7, #4]
    d776:	681b      	ldr	r3, [r3, #0]
    d778:	60fb      	str	r3, [r7, #12]
	uint16_t flush = 0;
    d77a:	230a      	movs	r3, #10
    d77c:	18fb      	adds	r3, r7, r3
    d77e:	2200      	movs	r2, #0
    d780:	801a      	strh	r2, [r3, #0]

	/* Read dummy byte */
	flush = spi_hw->DATA.reg;
    d782:	68fb      	ldr	r3, [r7, #12]
    d784:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    d786:	230a      	movs	r3, #10
    d788:	18fb      	adds	r3, r7, r3
    d78a:	801a      	strh	r2, [r3, #0]
	UNUSED(flush);

	/* Decrement remaining dummy buffer length */
	module->remaining_dummy_buffer_length--;
    d78c:	687b      	ldr	r3, [r7, #4]
    d78e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
    d790:	b29b      	uxth	r3, r3
    d792:	3b01      	subs	r3, #1
    d794:	b29a      	uxth	r2, r3
    d796:	687b      	ldr	r3, [r7, #4]
    d798:	865a      	strh	r2, [r3, #50]	; 0x32
}
    d79a:	46c0      	nop			; (mov r8, r8)
    d79c:	46bd      	mov	sp, r7
    d79e:	b004      	add	sp, #16
    d7a0:	bd80      	pop	{r7, pc}

0000d7a2 <_spi_read>:
 *
 * \param[in,out]  module  Pointer to SPI software instance struct
 */
static void _spi_read(
		struct spi_module *const module)
{
    d7a2:	b580      	push	{r7, lr}
    d7a4:	b084      	sub	sp, #16
    d7a6:	af00      	add	r7, sp, #0
    d7a8:	6078      	str	r0, [r7, #4]
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    d7aa:	687b      	ldr	r3, [r7, #4]
    d7ac:	681b      	ldr	r3, [r3, #0]
    d7ae:	60fb      	str	r3, [r7, #12]

	uint16_t received_data = (spi_hw->DATA.reg & SERCOM_SPI_DATA_MASK);
    d7b0:	68fb      	ldr	r3, [r7, #12]
    d7b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    d7b4:	b29a      	uxth	r2, r3
    d7b6:	230a      	movs	r3, #10
    d7b8:	18fb      	adds	r3, r7, r3
    d7ba:	05d2      	lsls	r2, r2, #23
    d7bc:	0dd2      	lsrs	r2, r2, #23
    d7be:	801a      	strh	r2, [r3, #0]

	/* Read value will be at least 8-bits long */
	*(module->rx_buffer_ptr) = received_data;
    d7c0:	687b      	ldr	r3, [r7, #4]
    d7c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    d7c4:	220a      	movs	r2, #10
    d7c6:	18ba      	adds	r2, r7, r2
    d7c8:	8812      	ldrh	r2, [r2, #0]
    d7ca:	b2d2      	uxtb	r2, r2
    d7cc:	701a      	strb	r2, [r3, #0]
	/* Increment 8-bit pointer */
	module->rx_buffer_ptr += 1;
    d7ce:	687b      	ldr	r3, [r7, #4]
    d7d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    d7d2:	1c5a      	adds	r2, r3, #1
    d7d4:	687b      	ldr	r3, [r7, #4]
    d7d6:	629a      	str	r2, [r3, #40]	; 0x28

	if(module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    d7d8:	687b      	ldr	r3, [r7, #4]
    d7da:	799b      	ldrb	r3, [r3, #6]
    d7dc:	2b01      	cmp	r3, #1
    d7de:	d10d      	bne.n	d7fc <_spi_read+0x5a>
		/* 9-bit data, write next received byte to the buffer */
		*(module->rx_buffer_ptr) = (received_data >> 8);
    d7e0:	687b      	ldr	r3, [r7, #4]
    d7e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    d7e4:	220a      	movs	r2, #10
    d7e6:	18ba      	adds	r2, r7, r2
    d7e8:	8812      	ldrh	r2, [r2, #0]
    d7ea:	0a12      	lsrs	r2, r2, #8
    d7ec:	b292      	uxth	r2, r2
    d7ee:	b2d2      	uxtb	r2, r2
    d7f0:	701a      	strb	r2, [r3, #0]
		/* Increment 8-bit pointer */
		module->rx_buffer_ptr += 1;
    d7f2:	687b      	ldr	r3, [r7, #4]
    d7f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    d7f6:	1c5a      	adds	r2, r3, #1
    d7f8:	687b      	ldr	r3, [r7, #4]
    d7fa:	629a      	str	r2, [r3, #40]	; 0x28
	}

	/* Decrement length of the remaining buffer */
	module->remaining_rx_buffer_length--;
    d7fc:	687b      	ldr	r3, [r7, #4]
    d7fe:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
    d800:	b29b      	uxth	r3, r3
    d802:	3b01      	subs	r3, #1
    d804:	b29a      	uxth	r2, r3
    d806:	687b      	ldr	r3, [r7, #4]
    d808:	861a      	strh	r2, [r3, #48]	; 0x30
}
    d80a:	46c0      	nop			; (mov r8, r8)
    d80c:	46bd      	mov	sp, r7
    d80e:	b004      	add	sp, #16
    d810:	bd80      	pop	{r7, pc}
	...

0000d814 <_spi_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _spi_interrupt_handler(
		uint8_t instance)
{
    d814:	b580      	push	{r7, lr}
    d816:	b086      	sub	sp, #24
    d818:	af00      	add	r7, sp, #0
    d81a:	0002      	movs	r2, r0
    d81c:	1dfb      	adds	r3, r7, #7
    d81e:	701a      	strb	r2, [r3, #0]
	/* Get device instance from the look-up table */
	struct spi_module *module
		= (struct spi_module *)_sercom_instances[instance];
    d820:	1dfb      	adds	r3, r7, #7
    d822:	781a      	ldrb	r2, [r3, #0]
	struct spi_module *module
    d824:	4b96      	ldr	r3, [pc, #600]	; (da80 <_spi_interrupt_handler+0x26c>)
    d826:	0092      	lsls	r2, r2, #2
    d828:	58d3      	ldr	r3, [r2, r3]
    d82a:	617b      	str	r3, [r7, #20]

	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    d82c:	697b      	ldr	r3, [r7, #20]
    d82e:	681b      	ldr	r3, [r3, #0]
    d830:	613b      	str	r3, [r7, #16]

	/* Combine callback registered and enabled masks. */
	uint8_t callback_mask =
			module->enabled_callback & module->registered_callback;
    d832:	697b      	ldr	r3, [r7, #20]
    d834:	2237      	movs	r2, #55	; 0x37
    d836:	5c9a      	ldrb	r2, [r3, r2]
    d838:	697b      	ldr	r3, [r7, #20]
    d83a:	2136      	movs	r1, #54	; 0x36
    d83c:	5c59      	ldrb	r1, [r3, r1]
	uint8_t callback_mask =
    d83e:	230f      	movs	r3, #15
    d840:	18fb      	adds	r3, r7, r3
    d842:	400a      	ands	r2, r1
    d844:	701a      	strb	r2, [r3, #0]

	/* Read and mask interrupt flag register */
	uint16_t interrupt_status = spi_hw->INTFLAG.reg;
    d846:	693b      	ldr	r3, [r7, #16]
    d848:	7e1b      	ldrb	r3, [r3, #24]
    d84a:	b2da      	uxtb	r2, r3
    d84c:	230c      	movs	r3, #12
    d84e:	18fb      	adds	r3, r7, r3
    d850:	801a      	strh	r2, [r3, #0]
	interrupt_status &= spi_hw->INTENSET.reg;
    d852:	693b      	ldr	r3, [r7, #16]
    d854:	7d9b      	ldrb	r3, [r3, #22]
    d856:	b2db      	uxtb	r3, r3
    d858:	b29a      	uxth	r2, r3
    d85a:	230c      	movs	r3, #12
    d85c:	18fb      	adds	r3, r7, r3
    d85e:	210c      	movs	r1, #12
    d860:	1879      	adds	r1, r7, r1
    d862:	8809      	ldrh	r1, [r1, #0]
    d864:	400a      	ands	r2, r1
    d866:	801a      	strh	r2, [r3, #0]

	/* Data register empty interrupt */
	if (interrupt_status & SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY) {
    d868:	230c      	movs	r3, #12
    d86a:	18fb      	adds	r3, r7, r3
    d86c:	881b      	ldrh	r3, [r3, #0]
    d86e:	2201      	movs	r2, #1
    d870:	4013      	ands	r3, r2
    d872:	d038      	beq.n	d8e6 <_spi_interrupt_handler+0xd2>
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
    d874:	697b      	ldr	r3, [r7, #20]
    d876:	795b      	ldrb	r3, [r3, #5]
    d878:	2b01      	cmp	r3, #1
    d87a:	d110      	bne.n	d89e <_spi_interrupt_handler+0x8a>
			(module->dir == SPI_DIRECTION_READ)) {
    d87c:	697b      	ldr	r3, [r7, #20]
    d87e:	7a5b      	ldrb	r3, [r3, #9]
    d880:	b2db      	uxtb	r3, r3
		if ((module->mode == SPI_MODE_MASTER) &&
    d882:	2b00      	cmp	r3, #0
    d884:	d10b      	bne.n	d89e <_spi_interrupt_handler+0x8a>
			/* Send dummy byte when reading in master mode */
			_spi_write_dummy(module);
    d886:	697b      	ldr	r3, [r7, #20]
    d888:	0018      	movs	r0, r3
    d88a:	4b7e      	ldr	r3, [pc, #504]	; (da84 <_spi_interrupt_handler+0x270>)
    d88c:	4798      	blx	r3
			if (module->remaining_dummy_buffer_length == 0) {
    d88e:	697b      	ldr	r3, [r7, #20]
    d890:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
    d892:	b29b      	uxth	r3, r3
    d894:	2b00      	cmp	r3, #0
    d896:	d102      	bne.n	d89e <_spi_interrupt_handler+0x8a>
				/* Disable the Data Register Empty Interrupt */
				spi_hw->INTENCLR.reg
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
    d898:	693b      	ldr	r3, [r7, #16]
    d89a:	2201      	movs	r2, #1
    d89c:	751a      	strb	r2, [r3, #20]
		}
#  endif

		if (0
#  if CONF_SPI_MASTER_ENABLE == true
		|| ((module->mode == SPI_MODE_MASTER) &&
    d89e:	697b      	ldr	r3, [r7, #20]
    d8a0:	795b      	ldrb	r3, [r3, #5]
		if (0
    d8a2:	2b01      	cmp	r3, #1
    d8a4:	d11f      	bne.n	d8e6 <_spi_interrupt_handler+0xd2>
			(module->dir != SPI_DIRECTION_READ))
    d8a6:	697b      	ldr	r3, [r7, #20]
    d8a8:	7a5b      	ldrb	r3, [r3, #9]
    d8aa:	b2db      	uxtb	r3, r3
		|| ((module->mode == SPI_MODE_MASTER) &&
    d8ac:	2b00      	cmp	r3, #0
    d8ae:	d01a      	beq.n	d8e6 <_spi_interrupt_handler+0xd2>
		|| ((module->mode == SPI_MODE_SLAVE) &&
			(module->dir != SPI_DIRECTION_READ))
#  endif
		) {
			/* Write next byte from buffer */
			_spi_write(module);
    d8b0:	697b      	ldr	r3, [r7, #20]
    d8b2:	0018      	movs	r0, r3
    d8b4:	4b74      	ldr	r3, [pc, #464]	; (da88 <_spi_interrupt_handler+0x274>)
    d8b6:	4798      	blx	r3
			if (module->remaining_tx_buffer_length == 0) {
    d8b8:	697b      	ldr	r3, [r7, #20]
    d8ba:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
    d8bc:	b29b      	uxth	r3, r3
    d8be:	2b00      	cmp	r3, #0
    d8c0:	d111      	bne.n	d8e6 <_spi_interrupt_handler+0xd2>
				/* Disable the Data Register Empty Interrupt */
				spi_hw->INTENCLR.reg
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
    d8c2:	693b      	ldr	r3, [r7, #16]
    d8c4:	2201      	movs	r2, #1
    d8c6:	751a      	strb	r2, [r3, #20]

				if (module->dir == SPI_DIRECTION_WRITE &&
    d8c8:	697b      	ldr	r3, [r7, #20]
    d8ca:	7a5b      	ldrb	r3, [r3, #9]
    d8cc:	b2db      	uxtb	r3, r3
    d8ce:	2b01      	cmp	r3, #1
    d8d0:	d109      	bne.n	d8e6 <_spi_interrupt_handler+0xd2>
						!(module->receiver_enabled)) {
    d8d2:	697b      	ldr	r3, [r7, #20]
    d8d4:	79db      	ldrb	r3, [r3, #7]
    d8d6:	2201      	movs	r2, #1
    d8d8:	4053      	eors	r3, r2
    d8da:	b2db      	uxtb	r3, r3
				if (module->dir == SPI_DIRECTION_WRITE &&
    d8dc:	2b00      	cmp	r3, #0
    d8de:	d002      	beq.n	d8e6 <_spi_interrupt_handler+0xd2>
					/* Enable the Data Register transmit complete Interrupt */
					spi_hw->INTENSET.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    d8e0:	693b      	ldr	r3, [r7, #16]
    d8e2:	2202      	movs	r2, #2
    d8e4:	759a      	strb	r2, [r3, #22]
			}
		}
	}

	/* Receive complete interrupt*/
	if (interrupt_status & SPI_INTERRUPT_FLAG_RX_COMPLETE) {
    d8e6:	230c      	movs	r3, #12
    d8e8:	18fb      	adds	r3, r7, r3
    d8ea:	881b      	ldrh	r3, [r3, #0]
    d8ec:	2204      	movs	r2, #4
    d8ee:	4013      	ands	r3, r2
    d8f0:	d100      	bne.n	d8f4 <_spi_interrupt_handler+0xe0>
    d8f2:	e07e      	b.n	d9f2 <_spi_interrupt_handler+0x1de>
		/* Check for overflow */
		if (spi_hw->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    d8f4:	693b      	ldr	r3, [r7, #16]
    d8f6:	8b5b      	ldrh	r3, [r3, #26]
    d8f8:	b29b      	uxth	r3, r3
    d8fa:	001a      	movs	r2, r3
    d8fc:	2304      	movs	r3, #4
    d8fe:	4013      	ands	r3, r2
    d900:	d022      	beq.n	d948 <_spi_interrupt_handler+0x134>
			if (module->dir != SPI_DIRECTION_WRITE) {
    d902:	697b      	ldr	r3, [r7, #20]
    d904:	7a5b      	ldrb	r3, [r3, #9]
    d906:	b2db      	uxtb	r3, r3
    d908:	2b01      	cmp	r3, #1
    d90a:	d014      	beq.n	d936 <_spi_interrupt_handler+0x122>
				/* Store the error code */
				module->status = STATUS_ERR_OVERFLOW;
    d90c:	697b      	ldr	r3, [r7, #20]
    d90e:	2238      	movs	r2, #56	; 0x38
    d910:	211e      	movs	r1, #30
    d912:	5499      	strb	r1, [r3, r2]

				/* End transaction */
				module->dir = SPI_DIRECTION_IDLE;
    d914:	697b      	ldr	r3, [r7, #20]
    d916:	2203      	movs	r2, #3
    d918:	725a      	strb	r2, [r3, #9]

				spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE |
    d91a:	693b      	ldr	r3, [r7, #16]
    d91c:	2205      	movs	r2, #5
    d91e:	751a      	strb	r2, [r3, #20]
						SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
				/* Run callback if registered and enabled */
				if (callback_mask & (1 << SPI_CALLBACK_ERROR)) {
    d920:	230f      	movs	r3, #15
    d922:	18fb      	adds	r3, r7, r3
    d924:	781b      	ldrb	r3, [r3, #0]
    d926:	2208      	movs	r2, #8
    d928:	4013      	ands	r3, r2
    d92a:	d004      	beq.n	d936 <_spi_interrupt_handler+0x122>
					(module->callback[SPI_CALLBACK_ERROR])(module);
    d92c:	697b      	ldr	r3, [r7, #20]
    d92e:	699b      	ldr	r3, [r3, #24]
    d930:	697a      	ldr	r2, [r7, #20]
    d932:	0010      	movs	r0, r2
    d934:	4798      	blx	r3
				}
			}
			/* Flush */
			uint16_t flush = spi_hw->DATA.reg;
    d936:	693b      	ldr	r3, [r7, #16]
    d938:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    d93a:	230a      	movs	r3, #10
    d93c:	18fb      	adds	r3, r7, r3
    d93e:	801a      	strh	r2, [r3, #0]
			UNUSED(flush);
			/* Clear overflow flag */
			spi_hw->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    d940:	693b      	ldr	r3, [r7, #16]
    d942:	2204      	movs	r2, #4
    d944:	835a      	strh	r2, [r3, #26]
    d946:	e054      	b.n	d9f2 <_spi_interrupt_handler+0x1de>
		} else {
			if (module->dir == SPI_DIRECTION_WRITE) {
    d948:	697b      	ldr	r3, [r7, #20]
    d94a:	7a5b      	ldrb	r3, [r3, #9]
    d94c:	b2db      	uxtb	r3, r3
    d94e:	2b01      	cmp	r3, #1
    d950:	d11e      	bne.n	d990 <_spi_interrupt_handler+0x17c>
				/* Flush receive buffer when writing */
				_spi_read_dummy(module);
    d952:	697b      	ldr	r3, [r7, #20]
    d954:	0018      	movs	r0, r3
    d956:	4b4d      	ldr	r3, [pc, #308]	; (da8c <_spi_interrupt_handler+0x278>)
    d958:	4798      	blx	r3
				if (module->remaining_dummy_buffer_length == 0) {
    d95a:	697b      	ldr	r3, [r7, #20]
    d95c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
    d95e:	b29b      	uxth	r3, r3
    d960:	2b00      	cmp	r3, #0
    d962:	d146      	bne.n	d9f2 <_spi_interrupt_handler+0x1de>
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
    d964:	693b      	ldr	r3, [r7, #16]
    d966:	2204      	movs	r2, #4
    d968:	751a      	strb	r2, [r3, #20]
					module->status = STATUS_OK;
    d96a:	697b      	ldr	r3, [r7, #20]
    d96c:	2238      	movs	r2, #56	; 0x38
    d96e:	2100      	movs	r1, #0
    d970:	5499      	strb	r1, [r3, r2]
					module->dir = SPI_DIRECTION_IDLE;
    d972:	697b      	ldr	r3, [r7, #20]
    d974:	2203      	movs	r2, #3
    d976:	725a      	strb	r2, [r3, #9]
					/* Run callback if registered and enabled */
					if (callback_mask &
    d978:	230f      	movs	r3, #15
    d97a:	18fb      	adds	r3, r7, r3
    d97c:	781b      	ldrb	r3, [r3, #0]
    d97e:	2201      	movs	r2, #1
    d980:	4013      	ands	r3, r2
    d982:	d036      	beq.n	d9f2 <_spi_interrupt_handler+0x1de>
							(1 << SPI_CALLBACK_BUFFER_TRANSMITTED)){
						(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])(module);
    d984:	697b      	ldr	r3, [r7, #20]
    d986:	68db      	ldr	r3, [r3, #12]
    d988:	697a      	ldr	r2, [r7, #20]
    d98a:	0010      	movs	r0, r2
    d98c:	4798      	blx	r3
    d98e:	e030      	b.n	d9f2 <_spi_interrupt_handler+0x1de>
					}
				}
			} else {
				/* Read data register */
				_spi_read(module);
    d990:	697b      	ldr	r3, [r7, #20]
    d992:	0018      	movs	r0, r3
    d994:	4b3e      	ldr	r3, [pc, #248]	; (da90 <_spi_interrupt_handler+0x27c>)
    d996:	4798      	blx	r3

				/* Check if the last character have been received */
				if (module->remaining_rx_buffer_length == 0) {
    d998:	697b      	ldr	r3, [r7, #20]
    d99a:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
    d99c:	b29b      	uxth	r3, r3
    d99e:	2b00      	cmp	r3, #0
    d9a0:	d127      	bne.n	d9f2 <_spi_interrupt_handler+0x1de>
					module->status = STATUS_OK;
    d9a2:	697b      	ldr	r3, [r7, #20]
    d9a4:	2238      	movs	r2, #56	; 0x38
    d9a6:	2100      	movs	r1, #0
    d9a8:	5499      	strb	r1, [r3, r2]
					/* Disable RX Complete Interrupt and set status */
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
    d9aa:	693b      	ldr	r3, [r7, #16]
    d9ac:	2204      	movs	r2, #4
    d9ae:	751a      	strb	r2, [r3, #20]
					if(module->dir == SPI_DIRECTION_BOTH) {
    d9b0:	697b      	ldr	r3, [r7, #20]
    d9b2:	7a5b      	ldrb	r3, [r3, #9]
    d9b4:	b2db      	uxtb	r3, r3
    d9b6:	2b02      	cmp	r3, #2
    d9b8:	d10b      	bne.n	d9d2 <_spi_interrupt_handler+0x1be>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSCEIVED)) {
    d9ba:	230f      	movs	r3, #15
    d9bc:	18fb      	adds	r3, r7, r3
    d9be:	781b      	ldrb	r3, [r3, #0]
    d9c0:	2204      	movs	r2, #4
    d9c2:	4013      	ands	r3, r2
    d9c4:	d015      	beq.n	d9f2 <_spi_interrupt_handler+0x1de>
							(module->callback[SPI_CALLBACK_BUFFER_TRANSCEIVED])(module);
    d9c6:	697b      	ldr	r3, [r7, #20]
    d9c8:	695b      	ldr	r3, [r3, #20]
    d9ca:	697a      	ldr	r2, [r7, #20]
    d9cc:	0010      	movs	r0, r2
    d9ce:	4798      	blx	r3
    d9d0:	e00f      	b.n	d9f2 <_spi_interrupt_handler+0x1de>
						}
					} else if (module->dir == SPI_DIRECTION_READ) {
    d9d2:	697b      	ldr	r3, [r7, #20]
    d9d4:	7a5b      	ldrb	r3, [r3, #9]
    d9d6:	b2db      	uxtb	r3, r3
    d9d8:	2b00      	cmp	r3, #0
    d9da:	d10a      	bne.n	d9f2 <_spi_interrupt_handler+0x1de>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_RECEIVED)) {
    d9dc:	230f      	movs	r3, #15
    d9de:	18fb      	adds	r3, r7, r3
    d9e0:	781b      	ldrb	r3, [r3, #0]
    d9e2:	2202      	movs	r2, #2
    d9e4:	4013      	ands	r3, r2
    d9e6:	d004      	beq.n	d9f2 <_spi_interrupt_handler+0x1de>
							(module->callback[SPI_CALLBACK_BUFFER_RECEIVED])(module);
    d9e8:	697b      	ldr	r3, [r7, #20]
    d9ea:	691b      	ldr	r3, [r3, #16]
    d9ec:	697a      	ldr	r2, [r7, #20]
    d9ee:	0010      	movs	r0, r2
    d9f0:	4798      	blx	r3
			}
		}
	}

	/* Transmit complete */
	if (interrupt_status & SPI_INTERRUPT_FLAG_TX_COMPLETE) {
    d9f2:	230c      	movs	r3, #12
    d9f4:	18fb      	adds	r3, r7, r3
    d9f6:	881b      	ldrh	r3, [r3, #0]
    d9f8:	2202      	movs	r2, #2
    d9fa:	4013      	ands	r3, r2
    d9fc:	d024      	beq.n	da48 <_spi_interrupt_handler+0x234>
			}

		}
#  endif
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
    d9fe:	697b      	ldr	r3, [r7, #20]
    da00:	795b      	ldrb	r3, [r3, #5]
    da02:	2b01      	cmp	r3, #1
    da04:	d120      	bne.n	da48 <_spi_interrupt_handler+0x234>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
    da06:	697b      	ldr	r3, [r7, #20]
    da08:	7a5b      	ldrb	r3, [r3, #9]
    da0a:	b2db      	uxtb	r3, r3
		if ((module->mode == SPI_MODE_MASTER) &&
    da0c:	2b01      	cmp	r3, #1
    da0e:	d11b      	bne.n	da48 <_spi_interrupt_handler+0x234>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
    da10:	697b      	ldr	r3, [r7, #20]
    da12:	79db      	ldrb	r3, [r3, #7]
    da14:	2201      	movs	r2, #1
    da16:	4053      	eors	r3, r2
    da18:	b2db      	uxtb	r3, r3
    da1a:	2b00      	cmp	r3, #0
    da1c:	d014      	beq.n	da48 <_spi_interrupt_handler+0x234>
		  	/* Clear interrupt flag */
		 	spi_hw->INTENCLR.reg
					= SPI_INTERRUPT_FLAG_TX_COMPLETE;
    da1e:	693b      	ldr	r3, [r7, #16]
    da20:	2202      	movs	r2, #2
    da22:	751a      	strb	r2, [r3, #20]
			/* Buffer sent with receiver disabled */
			module->dir = SPI_DIRECTION_IDLE;
    da24:	697b      	ldr	r3, [r7, #20]
    da26:	2203      	movs	r2, #3
    da28:	725a      	strb	r2, [r3, #9]
			module->status = STATUS_OK;
    da2a:	697b      	ldr	r3, [r7, #20]
    da2c:	2238      	movs	r2, #56	; 0x38
    da2e:	2100      	movs	r1, #0
    da30:	5499      	strb	r1, [r3, r2]
			/* Run callback if registered and enabled */
			if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSMITTED)){
    da32:	230f      	movs	r3, #15
    da34:	18fb      	adds	r3, r7, r3
    da36:	781b      	ldrb	r3, [r3, #0]
    da38:	2201      	movs	r2, #1
    da3a:	4013      	ands	r3, r2
    da3c:	d004      	beq.n	da48 <_spi_interrupt_handler+0x234>
				(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])
    da3e:	697b      	ldr	r3, [r7, #20]
    da40:	68db      	ldr	r3, [r3, #12]
    da42:	697a      	ldr	r2, [r7, #20]
    da44:	0010      	movs	r0, r2
    da46:	4798      	blx	r3
#  endif
#  endif

#  ifdef FEATURE_SPI_ERROR_INTERRUPT
	/* When combined error happen */
	if (interrupt_status & SPI_INTERRUPT_FLAG_COMBINED_ERROR) {
    da48:	230c      	movs	r3, #12
    da4a:	18fb      	adds	r3, r7, r3
    da4c:	881b      	ldrh	r3, [r3, #0]
    da4e:	2280      	movs	r2, #128	; 0x80
    da50:	4013      	ands	r3, r2
    da52:	d010      	beq.n	da76 <_spi_interrupt_handler+0x262>
		/* Disable interrupts */
		spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
    da54:	693b      	ldr	r3, [r7, #16]
    da56:	2280      	movs	r2, #128	; 0x80
    da58:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		spi_hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
    da5a:	693b      	ldr	r3, [r7, #16]
    da5c:	2280      	movs	r2, #128	; 0x80
    da5e:	761a      	strb	r2, [r3, #24]

		if (callback_mask & (1 << SPI_CALLBACK_COMBINED_ERROR)) {
    da60:	230f      	movs	r3, #15
    da62:	18fb      	adds	r3, r7, r3
    da64:	781b      	ldrb	r3, [r3, #0]
    da66:	2240      	movs	r2, #64	; 0x40
    da68:	4013      	ands	r3, r2
    da6a:	d004      	beq.n	da76 <_spi_interrupt_handler+0x262>
			(module->callback[SPI_CALLBACK_COMBINED_ERROR])(module);
    da6c:	697b      	ldr	r3, [r7, #20]
    da6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    da70:	697a      	ldr	r2, [r7, #20]
    da72:	0010      	movs	r0, r2
    da74:	4798      	blx	r3
		}
	}
#  endif
}
    da76:	46c0      	nop			; (mov r8, r8)
    da78:	46bd      	mov	sp, r7
    da7a:	b006      	add	sp, #24
    da7c:	bd80      	pop	{r7, pc}
    da7e:	46c0      	nop			; (mov r8, r8)
    da80:	20002b5c 	.word	0x20002b5c
    da84:	0000d739 	.word	0x0000d739
    da88:	0000d6bd 	.word	0x0000d6bd
    da8c:	0000d76d 	.word	0x0000d76d
    da90:	0000d7a3 	.word	0x0000d7a3

0000da94 <system_gclk_chan_get_config_defaults>:
{
    da94:	b580      	push	{r7, lr}
    da96:	b082      	sub	sp, #8
    da98:	af00      	add	r7, sp, #0
    da9a:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
    da9c:	687b      	ldr	r3, [r7, #4]
    da9e:	2200      	movs	r2, #0
    daa0:	701a      	strb	r2, [r3, #0]
}
    daa2:	46c0      	nop			; (mov r8, r8)
    daa4:	46bd      	mov	sp, r7
    daa6:	b002      	add	sp, #8
    daa8:	bd80      	pop	{r7, pc}
	...

0000daac <system_apb_clock_set_mask>:
{
    daac:	b580      	push	{r7, lr}
    daae:	b082      	sub	sp, #8
    dab0:	af00      	add	r7, sp, #0
    dab2:	0002      	movs	r2, r0
    dab4:	6039      	str	r1, [r7, #0]
    dab6:	1dfb      	adds	r3, r7, #7
    dab8:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    daba:	1dfb      	adds	r3, r7, #7
    dabc:	781b      	ldrb	r3, [r3, #0]
    dabe:	2b01      	cmp	r3, #1
    dac0:	d00a      	beq.n	dad8 <system_apb_clock_set_mask+0x2c>
    dac2:	2b02      	cmp	r3, #2
    dac4:	d00f      	beq.n	dae6 <system_apb_clock_set_mask+0x3a>
    dac6:	2b00      	cmp	r3, #0
    dac8:	d114      	bne.n	daf4 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
    daca:	4b0e      	ldr	r3, [pc, #56]	; (db04 <system_apb_clock_set_mask+0x58>)
    dacc:	4a0d      	ldr	r2, [pc, #52]	; (db04 <system_apb_clock_set_mask+0x58>)
    dace:	6991      	ldr	r1, [r2, #24]
    dad0:	683a      	ldr	r2, [r7, #0]
    dad2:	430a      	orrs	r2, r1
    dad4:	619a      	str	r2, [r3, #24]
			break;
    dad6:	e00f      	b.n	daf8 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
    dad8:	4b0a      	ldr	r3, [pc, #40]	; (db04 <system_apb_clock_set_mask+0x58>)
    dada:	4a0a      	ldr	r2, [pc, #40]	; (db04 <system_apb_clock_set_mask+0x58>)
    dadc:	69d1      	ldr	r1, [r2, #28]
    dade:	683a      	ldr	r2, [r7, #0]
    dae0:	430a      	orrs	r2, r1
    dae2:	61da      	str	r2, [r3, #28]
			break;
    dae4:	e008      	b.n	daf8 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
    dae6:	4b07      	ldr	r3, [pc, #28]	; (db04 <system_apb_clock_set_mask+0x58>)
    dae8:	4a06      	ldr	r2, [pc, #24]	; (db04 <system_apb_clock_set_mask+0x58>)
    daea:	6a11      	ldr	r1, [r2, #32]
    daec:	683a      	ldr	r2, [r7, #0]
    daee:	430a      	orrs	r2, r1
    daf0:	621a      	str	r2, [r3, #32]
			break;
    daf2:	e001      	b.n	daf8 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
    daf4:	2317      	movs	r3, #23
    daf6:	e000      	b.n	dafa <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
    daf8:	2300      	movs	r3, #0
}
    dafa:	0018      	movs	r0, r3
    dafc:	46bd      	mov	sp, r7
    dafe:	b002      	add	sp, #8
    db00:	bd80      	pop	{r7, pc}
    db02:	46c0      	nop			; (mov r8, r8)
    db04:	40000400 	.word	0x40000400

0000db08 <system_pinmux_get_config_defaults>:
{
    db08:	b580      	push	{r7, lr}
    db0a:	b082      	sub	sp, #8
    db0c:	af00      	add	r7, sp, #0
    db0e:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    db10:	687b      	ldr	r3, [r7, #4]
    db12:	2280      	movs	r2, #128	; 0x80
    db14:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    db16:	687b      	ldr	r3, [r7, #4]
    db18:	2200      	movs	r2, #0
    db1a:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    db1c:	687b      	ldr	r3, [r7, #4]
    db1e:	2201      	movs	r2, #1
    db20:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    db22:	687b      	ldr	r3, [r7, #4]
    db24:	2200      	movs	r2, #0
    db26:	70da      	strb	r2, [r3, #3]
}
    db28:	46c0      	nop			; (mov r8, r8)
    db2a:	46bd      	mov	sp, r7
    db2c:	b002      	add	sp, #8
    db2e:	bd80      	pop	{r7, pc}

0000db30 <system_is_debugger_present>:
{
    db30:	b580      	push	{r7, lr}
    db32:	af00      	add	r7, sp, #0
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
    db34:	4b05      	ldr	r3, [pc, #20]	; (db4c <system_is_debugger_present+0x1c>)
    db36:	789b      	ldrb	r3, [r3, #2]
    db38:	b2db      	uxtb	r3, r3
    db3a:	001a      	movs	r2, r3
    db3c:	2302      	movs	r3, #2
    db3e:	4013      	ands	r3, r2
    db40:	1e5a      	subs	r2, r3, #1
    db42:	4193      	sbcs	r3, r2
    db44:	b2db      	uxtb	r3, r3
}
    db46:	0018      	movs	r0, r3
    db48:	46bd      	mov	sp, r7
    db4a:	bd80      	pop	{r7, pc}
    db4c:	41002000 	.word	0x41002000

0000db50 <usart_is_syncing>:
 * \retval false  Peripheral is not busy syncing and can be read/written without
 *                stalling the bus
 */
static inline bool usart_is_syncing(
		const struct usart_module *const module)
{
    db50:	b580      	push	{r7, lr}
    db52:	b084      	sub	sp, #16
    db54:	af00      	add	r7, sp, #0
    db56:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    db58:	687b      	ldr	r3, [r7, #4]
    db5a:	681b      	ldr	r3, [r3, #0]
    db5c:	60fb      	str	r3, [r7, #12]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    db5e:	68fb      	ldr	r3, [r7, #12]
    db60:	69db      	ldr	r3, [r3, #28]
    db62:	1e5a      	subs	r2, r3, #1
    db64:	4193      	sbcs	r3, r2
    db66:	b2db      	uxtb	r3, r3
#else
	return (usart_hw->STATUS.reg & SERCOM_USART_STATUS_SYNCBUSY);
#endif
}
    db68:	0018      	movs	r0, r3
    db6a:	46bd      	mov	sp, r7
    db6c:	b004      	add	sp, #16
    db6e:	bd80      	pop	{r7, pc}

0000db70 <_usart_wait_for_sync>:
 * \internal
 * Waits until synchronization is complete
 */
static inline void _usart_wait_for_sync(
		const struct usart_module *const module)
{
    db70:	b580      	push	{r7, lr}
    db72:	b082      	sub	sp, #8
    db74:	af00      	add	r7, sp, #0
    db76:	6078      	str	r0, [r7, #4]
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    db78:	46c0      	nop			; (mov r8, r8)
    db7a:	687b      	ldr	r3, [r7, #4]
    db7c:	0018      	movs	r0, r3
    db7e:	4b04      	ldr	r3, [pc, #16]	; (db90 <_usart_wait_for_sync+0x20>)
    db80:	4798      	blx	r3
    db82:	1e03      	subs	r3, r0, #0
    db84:	d1f9      	bne.n	db7a <_usart_wait_for_sync+0xa>
		/* Wait until the synchronization is complete */
	}
}
    db86:	46c0      	nop			; (mov r8, r8)
    db88:	46bd      	mov	sp, r7
    db8a:	b002      	add	sp, #8
    db8c:	bd80      	pop	{r7, pc}
    db8e:	46c0      	nop			; (mov r8, r8)
    db90:	0000db51 	.word	0x0000db51

0000db94 <_usart_set_config>:
 * Set Configuration of the USART module
 */
static enum status_code _usart_set_config(
		struct usart_module *const module,
		const struct usart_config *const config)
{
    db94:	b5b0      	push	{r4, r5, r7, lr}
    db96:	b08c      	sub	sp, #48	; 0x30
    db98:	af02      	add	r7, sp, #8
    db9a:	6078      	str	r0, [r7, #4]
    db9c:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    db9e:	687b      	ldr	r3, [r7, #4]
    dba0:	681b      	ldr	r3, [r3, #0]
    dba2:	61bb      	str	r3, [r7, #24]

	/* Index for generic clock */
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    dba4:	687b      	ldr	r3, [r7, #4]
    dba6:	681b      	ldr	r3, [r3, #0]
    dba8:	0018      	movs	r0, r3
    dbaa:	4bab      	ldr	r3, [pc, #684]	; (de58 <_usart_set_config+0x2c4>)
    dbac:	4798      	blx	r3
    dbae:	0003      	movs	r3, r0
    dbb0:	617b      	str	r3, [r7, #20]
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    dbb2:	697b      	ldr	r3, [r7, #20]
    dbb4:	3314      	adds	r3, #20
    dbb6:	613b      	str	r3, [r7, #16]

	/* Cache new register values to minimize the number of register writes */
	uint32_t ctrla = 0;
    dbb8:	2300      	movs	r3, #0
    dbba:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t ctrlb = 0;
    dbbc:	2300      	movs	r3, #0
    dbbe:	623b      	str	r3, [r7, #32]
#ifdef FEATURE_USART_ISO7816
	uint32_t ctrlc = 0;
#endif
	uint16_t baud  = 0;
    dbc0:	230a      	movs	r3, #10
    dbc2:	18fb      	adds	r3, r7, r3
    dbc4:	2200      	movs	r2, #0
    dbc6:	801a      	strh	r2, [r3, #0]
	uint32_t transfer_mode;

	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    dbc8:	231f      	movs	r3, #31
    dbca:	18fb      	adds	r3, r7, r3
    dbcc:	2200      	movs	r2, #0
    dbce:	701a      	strb	r2, [r3, #0]
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    dbd0:	231e      	movs	r3, #30
    dbd2:	18fb      	adds	r3, r7, r3
    dbd4:	2210      	movs	r2, #16
    dbd6:	701a      	strb	r2, [r3, #0]

#ifdef FEATURE_USART_OVER_SAMPLE
	switch (config->sample_rate) {
    dbd8:	683b      	ldr	r3, [r7, #0]
    dbda:	8a1b      	ldrh	r3, [r3, #16]
    dbdc:	2280      	movs	r2, #128	; 0x80
    dbde:	01d2      	lsls	r2, r2, #7
    dbe0:	4293      	cmp	r3, r2
    dbe2:	d01c      	beq.n	dc1e <_usart_set_config+0x8a>
    dbe4:	2280      	movs	r2, #128	; 0x80
    dbe6:	01d2      	lsls	r2, r2, #7
    dbe8:	4293      	cmp	r3, r2
    dbea:	dc06      	bgt.n	dbfa <_usart_set_config+0x66>
    dbec:	2b00      	cmp	r3, #0
    dbee:	d00d      	beq.n	dc0c <_usart_set_config+0x78>
    dbf0:	2280      	movs	r2, #128	; 0x80
    dbf2:	0192      	lsls	r2, r2, #6
    dbf4:	4293      	cmp	r3, r2
    dbf6:	d024      	beq.n	dc42 <_usart_set_config+0xae>
    dbf8:	e035      	b.n	dc66 <_usart_set_config+0xd2>
    dbfa:	22c0      	movs	r2, #192	; 0xc0
    dbfc:	01d2      	lsls	r2, r2, #7
    dbfe:	4293      	cmp	r3, r2
    dc00:	d028      	beq.n	dc54 <_usart_set_config+0xc0>
    dc02:	2280      	movs	r2, #128	; 0x80
    dc04:	0212      	lsls	r2, r2, #8
    dc06:	4293      	cmp	r3, r2
    dc08:	d012      	beq.n	dc30 <_usart_set_config+0x9c>
    dc0a:	e02c      	b.n	dc66 <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_16X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    dc0c:	231f      	movs	r3, #31
    dc0e:	18fb      	adds	r3, r7, r3
    dc10:	2200      	movs	r2, #0
    dc12:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    dc14:	231e      	movs	r3, #30
    dc16:	18fb      	adds	r3, r7, r3
    dc18:	2210      	movs	r2, #16
    dc1a:	701a      	strb	r2, [r3, #0]
			break;
    dc1c:	e023      	b.n	dc66 <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_8X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    dc1e:	231f      	movs	r3, #31
    dc20:	18fb      	adds	r3, r7, r3
    dc22:	2200      	movs	r2, #0
    dc24:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    dc26:	231e      	movs	r3, #30
    dc28:	18fb      	adds	r3, r7, r3
    dc2a:	2208      	movs	r2, #8
    dc2c:	701a      	strb	r2, [r3, #0]
			break;
    dc2e:	e01a      	b.n	dc66 <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_3X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    dc30:	231f      	movs	r3, #31
    dc32:	18fb      	adds	r3, r7, r3
    dc34:	2200      	movs	r2, #0
    dc36:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
    dc38:	231e      	movs	r3, #30
    dc3a:	18fb      	adds	r3, r7, r3
    dc3c:	2203      	movs	r2, #3
    dc3e:	701a      	strb	r2, [r3, #0]
			break;
    dc40:	e011      	b.n	dc66 <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_16X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    dc42:	231f      	movs	r3, #31
    dc44:	18fb      	adds	r3, r7, r3
    dc46:	2201      	movs	r2, #1
    dc48:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    dc4a:	231e      	movs	r3, #30
    dc4c:	18fb      	adds	r3, r7, r3
    dc4e:	2210      	movs	r2, #16
    dc50:	701a      	strb	r2, [r3, #0]
			break;
    dc52:	e008      	b.n	dc66 <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_8X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    dc54:	231f      	movs	r3, #31
    dc56:	18fb      	adds	r3, r7, r3
    dc58:	2201      	movs	r2, #1
    dc5a:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    dc5c:	231e      	movs	r3, #30
    dc5e:	18fb      	adds	r3, r7, r3
    dc60:	2208      	movs	r2, #8
    dc62:	701a      	strb	r2, [r3, #0]
			break;
    dc64:	46c0      	nop			; (mov r8, r8)
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
    dc66:	683b      	ldr	r3, [r7, #0]
    dc68:	681a      	ldr	r2, [r3, #0]
		(uint32_t)config->mux_setting |
    dc6a:	683b      	ldr	r3, [r7, #0]
    dc6c:	68db      	ldr	r3, [r3, #12]
	ctrla = (uint32_t)config->data_order |
    dc6e:	431a      	orrs	r2, r3
	#ifdef FEATURE_USART_OVER_SAMPLE
		config->sample_adjustment |
    dc70:	683b      	ldr	r3, [r7, #0]
    dc72:	695b      	ldr	r3, [r3, #20]
		(uint32_t)config->mux_setting |
    dc74:	4313      	orrs	r3, r2
		config->sample_rate |
    dc76:	683a      	ldr	r2, [r7, #0]
    dc78:	8a12      	ldrh	r2, [r2, #16]
		config->sample_adjustment |
    dc7a:	4313      	orrs	r3, r2
	#endif
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    dc7c:	683a      	ldr	r2, [r7, #0]
    dc7e:	7e12      	ldrb	r2, [r2, #24]
    dc80:	0212      	lsls	r2, r2, #8
		config->sample_rate |
    dc82:	4313      	orrs	r3, r2
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    dc84:	683a      	ldr	r2, [r7, #0]
    dc86:	2126      	movs	r1, #38	; 0x26
    dc88:	5c52      	ldrb	r2, [r2, r1]
    dc8a:	0752      	lsls	r2, r2, #29
	ctrla = (uint32_t)config->data_order |
    dc8c:	4313      	orrs	r3, r2
    dc8e:	627b      	str	r3, [r7, #36]	; 0x24

	enum status_code status_code = STATUS_OK;
    dc90:	231d      	movs	r3, #29
    dc92:	18fb      	adds	r3, r7, r3
    dc94:	2200      	movs	r2, #0
    dc96:	701a      	strb	r2, [r3, #0]

	transfer_mode = (uint32_t)config->transfer_mode;
    dc98:	683b      	ldr	r3, [r7, #0]
    dc9a:	685b      	ldr	r3, [r3, #4]
    dc9c:	60fb      	str	r3, [r7, #12]
#ifdef FEATURE_USART_ISO7816
	if(config->iso7816_config.enabled) {
		baud = config->baudrate;
	} else {
#endif
	switch (transfer_mode)
    dc9e:	68fb      	ldr	r3, [r7, #12]
    dca0:	2b00      	cmp	r3, #0
    dca2:	d01e      	beq.n	dce2 <_usart_set_config+0x14e>
    dca4:	2280      	movs	r2, #128	; 0x80
    dca6:	0552      	lsls	r2, r2, #21
    dca8:	4293      	cmp	r3, r2
    dcaa:	d14f      	bne.n	dd4c <_usart_set_config+0x1b8>
	{
		case USART_TRANSFER_SYNCHRONOUSLY:
			if (!config->use_external_clock) {
    dcac:	683b      	ldr	r3, [r7, #0]
    dcae:	2227      	movs	r2, #39	; 0x27
    dcb0:	5c9b      	ldrb	r3, [r3, r2]
    dcb2:	2201      	movs	r2, #1
    dcb4:	4053      	eors	r3, r2
    dcb6:	b2db      	uxtb	r3, r3
    dcb8:	2b00      	cmp	r3, #0
    dcba:	d046      	beq.n	dd4a <_usart_set_config+0x1b6>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
    dcbc:	683b      	ldr	r3, [r7, #0]
    dcbe:	6a1d      	ldr	r5, [r3, #32]
    dcc0:	693b      	ldr	r3, [r7, #16]
    dcc2:	b2db      	uxtb	r3, r3
    dcc4:	0018      	movs	r0, r3
    dcc6:	4b65      	ldr	r3, [pc, #404]	; (de5c <_usart_set_config+0x2c8>)
    dcc8:	4798      	blx	r3
    dcca:	0001      	movs	r1, r0
    dccc:	231d      	movs	r3, #29
    dcce:	18fc      	adds	r4, r7, r3
    dcd0:	230a      	movs	r3, #10
    dcd2:	18fb      	adds	r3, r7, r3
    dcd4:	001a      	movs	r2, r3
    dcd6:	0028      	movs	r0, r5
    dcd8:	4b61      	ldr	r3, [pc, #388]	; (de60 <_usart_set_config+0x2cc>)
    dcda:	4798      	blx	r3
    dcdc:	0003      	movs	r3, r0
    dcde:	7023      	strb	r3, [r4, #0]
						system_gclk_chan_get_hz(gclk_index), &baud);
			}

			break;
    dce0:	e033      	b.n	dd4a <_usart_set_config+0x1b6>

		case USART_TRANSFER_ASYNCHRONOUSLY:
			if (config->use_external_clock) {
    dce2:	683b      	ldr	r3, [r7, #0]
    dce4:	2227      	movs	r2, #39	; 0x27
    dce6:	5c9b      	ldrb	r3, [r3, r2]
    dce8:	2b00      	cmp	r3, #0
    dcea:	d014      	beq.n	dd16 <_usart_set_config+0x182>
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
    dcec:	683b      	ldr	r3, [r7, #0]
    dcee:	6a18      	ldr	r0, [r3, #32]
    dcf0:	683b      	ldr	r3, [r7, #0]
    dcf2:	6a99      	ldr	r1, [r3, #40]	; 0x28
				status_code =
    dcf4:	231d      	movs	r3, #29
    dcf6:	18fc      	adds	r4, r7, r3
    dcf8:	231f      	movs	r3, #31
    dcfa:	18fb      	adds	r3, r7, r3
    dcfc:	781d      	ldrb	r5, [r3, #0]
    dcfe:	230a      	movs	r3, #10
    dd00:	18fa      	adds	r2, r7, r3
    dd02:	231e      	movs	r3, #30
    dd04:	18fb      	adds	r3, r7, r3
    dd06:	781b      	ldrb	r3, [r3, #0]
    dd08:	9300      	str	r3, [sp, #0]
    dd0a:	002b      	movs	r3, r5
    dd0c:	4d55      	ldr	r5, [pc, #340]	; (de64 <_usart_set_config+0x2d0>)
    dd0e:	47a8      	blx	r5
    dd10:	0003      	movs	r3, r0
    dd12:	7023      	strb	r3, [r4, #0]
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
							system_gclk_chan_get_hz(gclk_index), &baud, mode, sample_num);
			}

			break;
    dd14:	e01a      	b.n	dd4c <_usart_set_config+0x1b8>
						_sercom_get_async_baud_val(config->baudrate,
    dd16:	683b      	ldr	r3, [r7, #0]
    dd18:	6a1d      	ldr	r5, [r3, #32]
    dd1a:	693b      	ldr	r3, [r7, #16]
    dd1c:	b2db      	uxtb	r3, r3
    dd1e:	0018      	movs	r0, r3
    dd20:	4b4e      	ldr	r3, [pc, #312]	; (de5c <_usart_set_config+0x2c8>)
    dd22:	4798      	blx	r3
				status_code =
    dd24:	231d      	movs	r3, #29
    dd26:	18fc      	adds	r4, r7, r3
    dd28:	231f      	movs	r3, #31
    dd2a:	18fb      	adds	r3, r7, r3
    dd2c:	7819      	ldrb	r1, [r3, #0]
    dd2e:	230a      	movs	r3, #10
    dd30:	18fa      	adds	r2, r7, r3
    dd32:	231e      	movs	r3, #30
    dd34:	18fb      	adds	r3, r7, r3
    dd36:	781b      	ldrb	r3, [r3, #0]
    dd38:	9300      	str	r3, [sp, #0]
    dd3a:	000b      	movs	r3, r1
    dd3c:	0001      	movs	r1, r0
    dd3e:	0028      	movs	r0, r5
    dd40:	4d48      	ldr	r5, [pc, #288]	; (de64 <_usart_set_config+0x2d0>)
    dd42:	47a8      	blx	r5
    dd44:	0003      	movs	r3, r0
    dd46:	7023      	strb	r3, [r4, #0]
			break;
    dd48:	e000      	b.n	dd4c <_usart_set_config+0x1b8>
			break;
    dd4a:	46c0      	nop			; (mov r8, r8)
	}

	/* Check if calculating the baudrate failed */
	if (status_code != STATUS_OK) {
    dd4c:	231d      	movs	r3, #29
    dd4e:	18fb      	adds	r3, r7, r3
    dd50:	781b      	ldrb	r3, [r3, #0]
    dd52:	2b00      	cmp	r3, #0
    dd54:	d003      	beq.n	dd5e <_usart_set_config+0x1ca>
		/* Abort */
		return status_code;
    dd56:	231d      	movs	r3, #29
    dd58:	18fb      	adds	r3, r7, r3
    dd5a:	781b      	ldrb	r3, [r3, #0]
    dd5c:	e077      	b.n	de4e <_usart_set_config+0x2ba>
#ifdef FEATURE_USART_ISO7816
	}
#endif

#ifdef FEATURE_USART_IRDA
	if(config->encoding_format_enable) {
    dd5e:	683b      	ldr	r3, [r7, #0]
    dd60:	7e5b      	ldrb	r3, [r3, #25]
    dd62:	2b00      	cmp	r3, #0
    dd64:	d003      	beq.n	dd6e <_usart_set_config+0x1da>
		usart_hw->RXPL.reg = config->receive_pulse_length;
    dd66:	683b      	ldr	r3, [r7, #0]
    dd68:	7e9a      	ldrb	r2, [r3, #26]
    dd6a:	69bb      	ldr	r3, [r7, #24]
    dd6c:	739a      	strb	r2, [r3, #14]
	}
#endif

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    dd6e:	687b      	ldr	r3, [r7, #4]
    dd70:	0018      	movs	r0, r3
    dd72:	4b3d      	ldr	r3, [pc, #244]	; (de68 <_usart_set_config+0x2d4>)
    dd74:	4798      	blx	r3

	/*Set baud val */
	usart_hw->BAUD.reg = baud;
    dd76:	230a      	movs	r3, #10
    dd78:	18fb      	adds	r3, r7, r3
    dd7a:	881a      	ldrh	r2, [r3, #0]
    dd7c:	69bb      	ldr	r3, [r7, #24]
    dd7e:	819a      	strh	r2, [r3, #12]

	/* Set sample mode */
	ctrla |= transfer_mode;
    dd80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    dd82:	68fb      	ldr	r3, [r7, #12]
    dd84:	4313      	orrs	r3, r2
    dd86:	627b      	str	r3, [r7, #36]	; 0x24

	if (config->use_external_clock == false) {
    dd88:	683b      	ldr	r3, [r7, #0]
    dd8a:	2227      	movs	r2, #39	; 0x27
    dd8c:	5c9b      	ldrb	r3, [r3, r2]
    dd8e:	2201      	movs	r2, #1
    dd90:	4053      	eors	r3, r2
    dd92:	b2db      	uxtb	r3, r3
    dd94:	2b00      	cmp	r3, #0
    dd96:	d003      	beq.n	dda0 <_usart_set_config+0x20c>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
    dd98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    dd9a:	2204      	movs	r2, #4
    dd9c:	4313      	orrs	r3, r2
    dd9e:	627b      	str	r3, [r7, #36]	; 0x24
	}

	/* Set stopbits and enable transceivers */
	ctrlb =  
		#ifdef FEATURE_USART_IRDA
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    dda0:	683b      	ldr	r3, [r7, #0]
    dda2:	7e5b      	ldrb	r3, [r3, #25]
    dda4:	029a      	lsls	r2, r3, #10
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    dda6:	683b      	ldr	r3, [r7, #0]
    dda8:	7f1b      	ldrb	r3, [r3, #28]
    ddaa:	025b      	lsls	r3, r3, #9
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    ddac:	431a      	orrs	r2, r3
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    ddae:	683b      	ldr	r3, [r7, #0]
    ddb0:	7f5b      	ldrb	r3, [r3, #29]
    ddb2:	021b      	lsls	r3, r3, #8
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    ddb4:	431a      	orrs	r2, r3
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    ddb6:	683b      	ldr	r3, [r7, #0]
    ddb8:	2124      	movs	r1, #36	; 0x24
    ddba:	5c5b      	ldrb	r3, [r3, r1]
    ddbc:	045b      	lsls	r3, r3, #17
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    ddbe:	431a      	orrs	r2, r3
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
    ddc0:	683b      	ldr	r3, [r7, #0]
    ddc2:	2125      	movs	r1, #37	; 0x25
    ddc4:	5c5b      	ldrb	r3, [r3, r1]
    ddc6:	041b      	lsls	r3, r3, #16
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    ddc8:	4313      	orrs	r3, r2
	ctrlb =  
    ddca:	623b      	str	r3, [r7, #32]
				ctrlb |= USART_STOPBITS_1;
				break;		
		}
	} else {
#endif
	ctrlb |= (uint32_t)config->stopbits;
    ddcc:	683b      	ldr	r3, [r7, #0]
    ddce:	7a9b      	ldrb	r3, [r3, #10]
    ddd0:	001a      	movs	r2, r3
    ddd2:	6a3b      	ldr	r3, [r7, #32]
    ddd4:	4313      	orrs	r3, r2
    ddd6:	623b      	str	r3, [r7, #32]
	ctrlb |= (uint32_t)config->character_size;
    ddd8:	683b      	ldr	r3, [r7, #0]
    ddda:	7adb      	ldrb	r3, [r3, #11]
    dddc:	001a      	movs	r2, r3
    ddde:	6a3b      	ldr	r3, [r7, #32]
    dde0:	4313      	orrs	r3, r2
    dde2:	623b      	str	r3, [r7, #32]
	/* Check parity mode bits */
	if (config->parity != USART_PARITY_NONE) {
    dde4:	683b      	ldr	r3, [r7, #0]
    dde6:	891b      	ldrh	r3, [r3, #8]
    dde8:	2bff      	cmp	r3, #255	; 0xff
    ddea:	d00b      	beq.n	de04 <_usart_set_config+0x270>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
    ddec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    ddee:	2280      	movs	r2, #128	; 0x80
    ddf0:	0452      	lsls	r2, r2, #17
    ddf2:	4313      	orrs	r3, r2
    ddf4:	627b      	str	r3, [r7, #36]	; 0x24
		ctrlb |= config->parity;
    ddf6:	683b      	ldr	r3, [r7, #0]
    ddf8:	891b      	ldrh	r3, [r3, #8]
    ddfa:	001a      	movs	r2, r3
    ddfc:	6a3b      	ldr	r3, [r7, #32]
    ddfe:	4313      	orrs	r3, r2
    de00:	623b      	str	r3, [r7, #32]
    de02:	e008      	b.n	de16 <_usart_set_config+0x282>
	} else {
#ifdef FEATURE_USART_LIN_SLAVE
		if(config->lin_slave_enable) {
    de04:	683b      	ldr	r3, [r7, #0]
    de06:	7edb      	ldrb	r3, [r3, #27]
    de08:	2b00      	cmp	r3, #0
    de0a:	d004      	beq.n	de16 <_usart_set_config+0x282>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
    de0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    de0e:	2280      	movs	r2, #128	; 0x80
    de10:	04d2      	lsls	r2, r2, #19
    de12:	4313      	orrs	r3, r2
    de14:	627b      	str	r3, [r7, #36]	; 0x24
		ctrla |= config->lin_node;
	}
#endif

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
    de16:	683b      	ldr	r3, [r7, #0]
    de18:	222c      	movs	r2, #44	; 0x2c
    de1a:	5c9b      	ldrb	r3, [r3, r2]
    de1c:	2b00      	cmp	r3, #0
    de1e:	d103      	bne.n	de28 <_usart_set_config+0x294>
    de20:	4b12      	ldr	r3, [pc, #72]	; (de6c <_usart_set_config+0x2d8>)
    de22:	4798      	blx	r3
    de24:	1e03      	subs	r3, r0, #0
    de26:	d003      	beq.n	de30 <_usart_set_config+0x29c>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
    de28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    de2a:	2280      	movs	r2, #128	; 0x80
    de2c:	4313      	orrs	r3, r2
    de2e:	627b      	str	r3, [r7, #36]	; 0x24
	}

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    de30:	687b      	ldr	r3, [r7, #4]
    de32:	0018      	movs	r0, r3
    de34:	4b0c      	ldr	r3, [pc, #48]	; (de68 <_usart_set_config+0x2d4>)
    de36:	4798      	blx	r3

	/* Write configuration to CTRLB */
	usart_hw->CTRLB.reg = ctrlb;
    de38:	69bb      	ldr	r3, [r7, #24]
    de3a:	6a3a      	ldr	r2, [r7, #32]
    de3c:	605a      	str	r2, [r3, #4]

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    de3e:	687b      	ldr	r3, [r7, #4]
    de40:	0018      	movs	r0, r3
    de42:	4b09      	ldr	r3, [pc, #36]	; (de68 <_usart_set_config+0x2d4>)
    de44:	4798      	blx	r3

	/* Write configuration to CTRLA */
	usart_hw->CTRLA.reg = ctrla;
    de46:	69bb      	ldr	r3, [r7, #24]
    de48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    de4a:	601a      	str	r2, [r3, #0]
		_usart_wait_for_sync(module);
		usart_hw->CTRLC.reg = ctrlc;
	}
#endif

	return STATUS_OK;
    de4c:	2300      	movs	r3, #0
}
    de4e:	0018      	movs	r0, r3
    de50:	46bd      	mov	sp, r7
    de52:	b00a      	add	sp, #40	; 0x28
    de54:	bdb0      	pop	{r4, r5, r7, pc}
    de56:	46c0      	nop			; (mov r8, r8)
    de58:	0000cdd5 	.word	0x0000cdd5
    de5c:	0000f361 	.word	0x0000f361
    de60:	0000c94f 	.word	0x0000c94f
    de64:	0000c9cd 	.word	0x0000c9cd
    de68:	0000db71 	.word	0x0000db71
    de6c:	0000db31 	.word	0x0000db31

0000de70 <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
    de70:	b590      	push	{r4, r7, lr}
    de72:	b093      	sub	sp, #76	; 0x4c
    de74:	af00      	add	r7, sp, #0
    de76:	60f8      	str	r0, [r7, #12]
    de78:	60b9      	str	r1, [r7, #8]
    de7a:	607a      	str	r2, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(hw);
	Assert(config);

	enum status_code status_code = STATUS_OK;
    de7c:	233b      	movs	r3, #59	; 0x3b
    de7e:	18fb      	adds	r3, r7, r3
    de80:	2200      	movs	r2, #0
    de82:	701a      	strb	r2, [r3, #0]

	/* Assign module pointer to software instance struct */
	module->hw = hw;
    de84:	68fb      	ldr	r3, [r7, #12]
    de86:	68ba      	ldr	r2, [r7, #8]
    de88:	601a      	str	r2, [r3, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    de8a:	68fb      	ldr	r3, [r7, #12]
    de8c:	681b      	ldr	r3, [r3, #0]
    de8e:	637b      	str	r3, [r7, #52]	; 0x34

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    de90:	68fb      	ldr	r3, [r7, #12]
    de92:	681b      	ldr	r3, [r3, #0]
    de94:	0018      	movs	r0, r3
    de96:	4b86      	ldr	r3, [pc, #536]	; (e0b0 <usart_init+0x240>)
    de98:	4798      	blx	r3
    de9a:	0003      	movs	r3, r0
    de9c:	633b      	str	r3, [r7, #48]	; 0x30
		gclk_index	= SERCOM5_GCLK_ID_CORE;
    } else {
    	gclk_index	= sercom_index + SERCOM0_GCLK_ID_CORE;
    }
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    de9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    dea0:	3302      	adds	r3, #2
    dea2:	62fb      	str	r3, [r7, #44]	; 0x2c
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    dea4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    dea6:	3314      	adds	r3, #20
    dea8:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    deaa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    deac:	681b      	ldr	r3, [r3, #0]
    deae:	2201      	movs	r2, #1
    deb0:	4013      	ands	r3, r2
    deb2:	d001      	beq.n	deb8 <usart_init+0x48>
		/* The module is busy resetting itself */
		return STATUS_BUSY;
    deb4:	2305      	movs	r3, #5
    deb6:	e0f6      	b.n	e0a6 <usart_init+0x236>
	}

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    deb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    deba:	681b      	ldr	r3, [r3, #0]
    debc:	2202      	movs	r2, #2
    debe:	4013      	ands	r3, r2
    dec0:	d001      	beq.n	dec6 <usart_init+0x56>
		/* Check the module is enabled */
		return STATUS_ERR_DENIED;
    dec2:	231c      	movs	r3, #28
    dec4:	e0ef      	b.n	e0a6 <usart_init+0x236>
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);	
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    dec6:	2201      	movs	r2, #1
    dec8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    deca:	409a      	lsls	r2, r3
    decc:	0013      	movs	r3, r2
    dece:	0019      	movs	r1, r3
    ded0:	2002      	movs	r0, #2
    ded2:	4b78      	ldr	r3, [pc, #480]	; (e0b4 <usart_init+0x244>)
    ded4:	4798      	blx	r3
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
    ded6:	2324      	movs	r3, #36	; 0x24
    ded8:	18fb      	adds	r3, r7, r3
    deda:	0018      	movs	r0, r3
    dedc:	4b76      	ldr	r3, [pc, #472]	; (e0b8 <usart_init+0x248>)
    dede:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->generator_source;
    dee0:	687b      	ldr	r3, [r7, #4]
    dee2:	222d      	movs	r2, #45	; 0x2d
    dee4:	5c9a      	ldrb	r2, [r3, r2]
    dee6:	2324      	movs	r3, #36	; 0x24
    dee8:	18fb      	adds	r3, r7, r3
    deea:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    deec:	6abb      	ldr	r3, [r7, #40]	; 0x28
    deee:	b2db      	uxtb	r3, r3
    def0:	2224      	movs	r2, #36	; 0x24
    def2:	18ba      	adds	r2, r7, r2
    def4:	0011      	movs	r1, r2
    def6:	0018      	movs	r0, r3
    def8:	4b70      	ldr	r3, [pc, #448]	; (e0bc <usart_init+0x24c>)
    defa:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    defc:	6abb      	ldr	r3, [r7, #40]	; 0x28
    defe:	b2db      	uxtb	r3, r3
    df00:	0018      	movs	r0, r3
    df02:	4b6f      	ldr	r3, [pc, #444]	; (e0c0 <usart_init+0x250>)
    df04:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    df06:	687b      	ldr	r3, [r7, #4]
    df08:	222d      	movs	r2, #45	; 0x2d
    df0a:	5c9b      	ldrb	r3, [r3, r2]
    df0c:	2100      	movs	r1, #0
    df0e:	0018      	movs	r0, r3
    df10:	4b6c      	ldr	r3, [pc, #432]	; (e0c4 <usart_init+0x254>)
    df12:	4798      	blx	r3

	/* Set character size */
	module->character_size = config->character_size;
    df14:	687b      	ldr	r3, [r7, #4]
    df16:	7ada      	ldrb	r2, [r3, #11]
    df18:	68fb      	ldr	r3, [r7, #12]
    df1a:	715a      	strb	r2, [r3, #5]

	/* Set transmitter and receiver status */
	module->receiver_enabled = config->receiver_enable;
    df1c:	687b      	ldr	r3, [r7, #4]
    df1e:	2224      	movs	r2, #36	; 0x24
    df20:	5c9a      	ldrb	r2, [r3, r2]
    df22:	68fb      	ldr	r3, [r7, #12]
    df24:	719a      	strb	r2, [r3, #6]
	module->transmitter_enabled = config->transmitter_enable;
    df26:	687b      	ldr	r3, [r7, #4]
    df28:	2225      	movs	r2, #37	; 0x25
    df2a:	5c9a      	ldrb	r2, [r3, r2]
    df2c:	68fb      	ldr	r3, [r7, #12]
    df2e:	71da      	strb	r2, [r3, #7]

#ifdef FEATURE_USART_LIN_SLAVE
	module->lin_slave_enabled = config->lin_slave_enable;
    df30:	687b      	ldr	r3, [r7, #4]
    df32:	7eda      	ldrb	r2, [r3, #27]
    df34:	68fb      	ldr	r3, [r7, #12]
    df36:	721a      	strb	r2, [r3, #8]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
    df38:	687b      	ldr	r3, [r7, #4]
    df3a:	7f1a      	ldrb	r2, [r3, #28]
    df3c:	68fb      	ldr	r3, [r7, #12]
    df3e:	725a      	strb	r2, [r3, #9]
#endif
#ifdef FEATURE_USART_ISO7816
	module->iso7816_mode_enabled = config->iso7816_config.enabled;
#endif
	/* Set configuration according to the config struct */
	status_code = _usart_set_config(module, config);
    df40:	233b      	movs	r3, #59	; 0x3b
    df42:	18fc      	adds	r4, r7, r3
    df44:	687a      	ldr	r2, [r7, #4]
    df46:	68fb      	ldr	r3, [r7, #12]
    df48:	0011      	movs	r1, r2
    df4a:	0018      	movs	r0, r3
    df4c:	4b5e      	ldr	r3, [pc, #376]	; (e0c8 <usart_init+0x258>)
    df4e:	4798      	blx	r3
    df50:	0003      	movs	r3, r0
    df52:	7023      	strb	r3, [r4, #0]
	if(status_code != STATUS_OK) {
    df54:	233b      	movs	r3, #59	; 0x3b
    df56:	18fb      	adds	r3, r7, r3
    df58:	781b      	ldrb	r3, [r3, #0]
    df5a:	2b00      	cmp	r3, #0
    df5c:	d003      	beq.n	df66 <usart_init+0xf6>
		return status_code;
    df5e:	233b      	movs	r3, #59	; 0x3b
    df60:	18fb      	adds	r3, r7, r3
    df62:	781b      	ldrb	r3, [r3, #0]
    df64:	e09f      	b.n	e0a6 <usart_init+0x236>
	}

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
    df66:	2320      	movs	r3, #32
    df68:	18fb      	adds	r3, r7, r3
    df6a:	0018      	movs	r0, r3
    df6c:	4b57      	ldr	r3, [pc, #348]	; (e0cc <usart_init+0x25c>)
    df6e:	4798      	blx	r3
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
    df70:	2320      	movs	r3, #32
    df72:	18fb      	adds	r3, r7, r3
    df74:	2200      	movs	r2, #0
    df76:	705a      	strb	r2, [r3, #1]
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    df78:	2320      	movs	r3, #32
    df7a:	18fb      	adds	r3, r7, r3
    df7c:	2200      	movs	r2, #0
    df7e:	709a      	strb	r2, [r3, #2]

	uint32_t pad_pinmuxes[] = {
			config->pinmux_pad0, config->pinmux_pad1,
    df80:	687b      	ldr	r3, [r7, #4]
    df82:	6b1a      	ldr	r2, [r3, #48]	; 0x30
	uint32_t pad_pinmuxes[] = {
    df84:	2310      	movs	r3, #16
    df86:	18fb      	adds	r3, r7, r3
    df88:	601a      	str	r2, [r3, #0]
			config->pinmux_pad0, config->pinmux_pad1,
    df8a:	687b      	ldr	r3, [r7, #4]
    df8c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
	uint32_t pad_pinmuxes[] = {
    df8e:	2310      	movs	r3, #16
    df90:	18fb      	adds	r3, r7, r3
    df92:	605a      	str	r2, [r3, #4]
			config->pinmux_pad2, config->pinmux_pad3
    df94:	687b      	ldr	r3, [r7, #4]
    df96:	6b9a      	ldr	r2, [r3, #56]	; 0x38
	uint32_t pad_pinmuxes[] = {
    df98:	2310      	movs	r3, #16
    df9a:	18fb      	adds	r3, r7, r3
    df9c:	609a      	str	r2, [r3, #8]
			config->pinmux_pad2, config->pinmux_pad3
    df9e:	687b      	ldr	r3, [r7, #4]
    dfa0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
	uint32_t pad_pinmuxes[] = {
    dfa2:	2310      	movs	r3, #16
    dfa4:	18fb      	adds	r3, r7, r3
    dfa6:	60da      	str	r2, [r3, #12]
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
    dfa8:	2347      	movs	r3, #71	; 0x47
    dfaa:	18fb      	adds	r3, r7, r3
    dfac:	2200      	movs	r2, #0
    dfae:	701a      	strb	r2, [r3, #0]
    dfb0:	e02c      	b.n	e00c <usart_init+0x19c>
		uint32_t current_pinmux = pad_pinmuxes[pad];
    dfb2:	2347      	movs	r3, #71	; 0x47
    dfb4:	18fb      	adds	r3, r7, r3
    dfb6:	781a      	ldrb	r2, [r3, #0]
    dfb8:	2310      	movs	r3, #16
    dfba:	18fb      	adds	r3, r7, r3
    dfbc:	0092      	lsls	r2, r2, #2
    dfbe:	58d3      	ldr	r3, [r2, r3]
    dfc0:	643b      	str	r3, [r7, #64]	; 0x40

		if (current_pinmux == PINMUX_DEFAULT) {
    dfc2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    dfc4:	2b00      	cmp	r3, #0
    dfc6:	d109      	bne.n	dfdc <usart_init+0x16c>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    dfc8:	2347      	movs	r3, #71	; 0x47
    dfca:	18fb      	adds	r3, r7, r3
    dfcc:	781a      	ldrb	r2, [r3, #0]
    dfce:	68bb      	ldr	r3, [r7, #8]
    dfd0:	0011      	movs	r1, r2
    dfd2:	0018      	movs	r0, r3
    dfd4:	4b3e      	ldr	r3, [pc, #248]	; (e0d0 <usart_init+0x260>)
    dfd6:	4798      	blx	r3
    dfd8:	0003      	movs	r3, r0
    dfda:	643b      	str	r3, [r7, #64]	; 0x40
		}

		if (current_pinmux != PINMUX_UNUSED) {
    dfdc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    dfde:	3301      	adds	r3, #1
    dfe0:	d00d      	beq.n	dffe <usart_init+0x18e>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    dfe2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    dfe4:	b2da      	uxtb	r2, r3
    dfe6:	2320      	movs	r3, #32
    dfe8:	18fb      	adds	r3, r7, r3
    dfea:	701a      	strb	r2, [r3, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    dfec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    dfee:	0c1b      	lsrs	r3, r3, #16
    dff0:	b2db      	uxtb	r3, r3
    dff2:	2220      	movs	r2, #32
    dff4:	18ba      	adds	r2, r7, r2
    dff6:	0011      	movs	r1, r2
    dff8:	0018      	movs	r0, r3
    dffa:	4b36      	ldr	r3, [pc, #216]	; (e0d4 <usart_init+0x264>)
    dffc:	4798      	blx	r3
	for (uint8_t pad = 0; pad < 4; pad++) {
    dffe:	2347      	movs	r3, #71	; 0x47
    e000:	18fb      	adds	r3, r7, r3
    e002:	781a      	ldrb	r2, [r3, #0]
    e004:	2347      	movs	r3, #71	; 0x47
    e006:	18fb      	adds	r3, r7, r3
    e008:	3201      	adds	r2, #1
    e00a:	701a      	strb	r2, [r3, #0]
    e00c:	2347      	movs	r3, #71	; 0x47
    e00e:	18fb      	adds	r3, r7, r3
    e010:	781b      	ldrb	r3, [r3, #0]
    e012:	2b03      	cmp	r3, #3
    e014:	d9cd      	bls.n	dfb2 <usart_init+0x142>
		}
	}

#if USART_CALLBACK_MODE == true
	/* Initialize parameters */
	for (uint32_t i = 0; i < USART_CALLBACK_N; i++) {
    e016:	2300      	movs	r3, #0
    e018:	63fb      	str	r3, [r7, #60]	; 0x3c
    e01a:	e00a      	b.n	e032 <usart_init+0x1c2>
		module->callback[i]            = NULL;
    e01c:	68fa      	ldr	r2, [r7, #12]
    e01e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    e020:	3302      	adds	r3, #2
    e022:	009b      	lsls	r3, r3, #2
    e024:	18d3      	adds	r3, r2, r3
    e026:	3304      	adds	r3, #4
    e028:	2200      	movs	r2, #0
    e02a:	601a      	str	r2, [r3, #0]
	for (uint32_t i = 0; i < USART_CALLBACK_N; i++) {
    e02c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    e02e:	3301      	adds	r3, #1
    e030:	63fb      	str	r3, [r7, #60]	; 0x3c
    e032:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    e034:	2b05      	cmp	r3, #5
    e036:	d9f1      	bls.n	e01c <usart_init+0x1ac>
	}

	module->tx_buffer_ptr              = NULL;
    e038:	68fb      	ldr	r3, [r7, #12]
    e03a:	2200      	movs	r2, #0
    e03c:	629a      	str	r2, [r3, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
    e03e:	68fb      	ldr	r3, [r7, #12]
    e040:	2200      	movs	r2, #0
    e042:	625a      	str	r2, [r3, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
    e044:	68fb      	ldr	r3, [r7, #12]
    e046:	2200      	movs	r2, #0
    e048:	85da      	strh	r2, [r3, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
    e04a:	68fb      	ldr	r3, [r7, #12]
    e04c:	2200      	movs	r2, #0
    e04e:	859a      	strh	r2, [r3, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
    e050:	68fb      	ldr	r3, [r7, #12]
    e052:	2230      	movs	r2, #48	; 0x30
    e054:	2100      	movs	r1, #0
    e056:	5499      	strb	r1, [r3, r2]
	module->callback_enable_mask       = 0x00;
    e058:	68fb      	ldr	r3, [r7, #12]
    e05a:	2231      	movs	r2, #49	; 0x31
    e05c:	2100      	movs	r1, #0
    e05e:	5499      	strb	r1, [r3, r2]
	module->rx_status                  = STATUS_OK;
    e060:	68fb      	ldr	r3, [r7, #12]
    e062:	2232      	movs	r2, #50	; 0x32
    e064:	2100      	movs	r1, #0
    e066:	5499      	strb	r1, [r3, r2]
	module->tx_status                  = STATUS_OK;
    e068:	68fb      	ldr	r3, [r7, #12]
    e06a:	2233      	movs	r2, #51	; 0x33
    e06c:	2100      	movs	r1, #0
    e06e:	5499      	strb	r1, [r3, r2]

	/* Set interrupt handler and register USART software module struct in
	 * look-up table */
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
    e070:	68fb      	ldr	r3, [r7, #12]
    e072:	681b      	ldr	r3, [r3, #0]
    e074:	2227      	movs	r2, #39	; 0x27
    e076:	18bc      	adds	r4, r7, r2
    e078:	0018      	movs	r0, r3
    e07a:	4b0d      	ldr	r3, [pc, #52]	; (e0b0 <usart_init+0x240>)
    e07c:	4798      	blx	r3
    e07e:	0003      	movs	r3, r0
    e080:	7023      	strb	r3, [r4, #0]
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
    e082:	4a15      	ldr	r2, [pc, #84]	; (e0d8 <usart_init+0x268>)
    e084:	2327      	movs	r3, #39	; 0x27
    e086:	18fb      	adds	r3, r7, r3
    e088:	781b      	ldrb	r3, [r3, #0]
    e08a:	0011      	movs	r1, r2
    e08c:	0018      	movs	r0, r3
    e08e:	4b13      	ldr	r3, [pc, #76]	; (e0dc <usart_init+0x26c>)
    e090:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    e092:	2327      	movs	r3, #39	; 0x27
    e094:	18fb      	adds	r3, r7, r3
    e096:	781a      	ldrb	r2, [r3, #0]
    e098:	4b11      	ldr	r3, [pc, #68]	; (e0e0 <usart_init+0x270>)
    e09a:	0092      	lsls	r2, r2, #2
    e09c:	68f9      	ldr	r1, [r7, #12]
    e09e:	50d1      	str	r1, [r2, r3]
#endif

	return status_code;
    e0a0:	233b      	movs	r3, #59	; 0x3b
    e0a2:	18fb      	adds	r3, r7, r3
    e0a4:	781b      	ldrb	r3, [r3, #0]
}
    e0a6:	0018      	movs	r0, r3
    e0a8:	46bd      	mov	sp, r7
    e0aa:	b013      	add	sp, #76	; 0x4c
    e0ac:	bd90      	pop	{r4, r7, pc}
    e0ae:	46c0      	nop			; (mov r8, r8)
    e0b0:	0000cdd5 	.word	0x0000cdd5
    e0b4:	0000daad 	.word	0x0000daad
    e0b8:	0000da95 	.word	0x0000da95
    e0bc:	0000f23d 	.word	0x0000f23d
    e0c0:	0000f281 	.word	0x0000f281
    e0c4:	0000cb8d 	.word	0x0000cb8d
    e0c8:	0000db95 	.word	0x0000db95
    e0cc:	0000db09 	.word	0x0000db09
    e0d0:	0000cc19 	.word	0x0000cc19
    e0d4:	000003a1 	.word	0x000003a1
    e0d8:	0000e279 	.word	0x0000e279
    e0dc:	0000ce39 	.word	0x0000ce39
    e0e0:	20002b5c 	.word	0x20002b5c

0000e0e4 <usart_write_wait>:
 * \retval STATUS_ERR_DENIED If the transmitter is not enabled
 */
enum status_code usart_write_wait(
		struct usart_module *const module,
		const uint16_t tx_data)
{
    e0e4:	b580      	push	{r7, lr}
    e0e6:	b084      	sub	sp, #16
    e0e8:	af00      	add	r7, sp, #0
    e0ea:	6078      	str	r0, [r7, #4]
    e0ec:	000a      	movs	r2, r1
    e0ee:	1cbb      	adds	r3, r7, #2
    e0f0:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    e0f2:	687b      	ldr	r3, [r7, #4]
    e0f4:	681b      	ldr	r3, [r3, #0]
    e0f6:	60fb      	str	r3, [r7, #12]

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
    e0f8:	687b      	ldr	r3, [r7, #4]
    e0fa:	79db      	ldrb	r3, [r3, #7]
    e0fc:	2201      	movs	r2, #1
    e0fe:	4053      	eors	r3, r2
    e100:	b2db      	uxtb	r3, r3
    e102:	2b00      	cmp	r3, #0
    e104:	d001      	beq.n	e10a <usart_write_wait+0x26>
		return STATUS_ERR_DENIED;
    e106:	231c      	movs	r3, #28
    e108:	e017      	b.n	e13a <usart_write_wait+0x56>
	}

#if USART_CALLBACK_MODE == true
	/* Check if the USART is busy doing asynchronous operation. */
	if (module->remaining_tx_buffer_length > 0) {
    e10a:	687b      	ldr	r3, [r7, #4]
    e10c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
    e10e:	b29b      	uxth	r3, r3
    e110:	2b00      	cmp	r3, #0
    e112:	d001      	beq.n	e118 <usart_write_wait+0x34>
		return STATUS_BUSY;
    e114:	2305      	movs	r3, #5
    e116:	e010      	b.n	e13a <usart_write_wait+0x56>
		return STATUS_BUSY;
	}
#endif

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    e118:	687b      	ldr	r3, [r7, #4]
    e11a:	0018      	movs	r0, r3
    e11c:	4b09      	ldr	r3, [pc, #36]	; (e144 <usart_write_wait+0x60>)
    e11e:	4798      	blx	r3

	/* Write data to USART module */
	usart_hw->DATA.reg = tx_data;
    e120:	68fb      	ldr	r3, [r7, #12]
    e122:	1cba      	adds	r2, r7, #2
    e124:	8812      	ldrh	r2, [r2, #0]
    e126:	851a      	strh	r2, [r3, #40]	; 0x28

	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
    e128:	46c0      	nop			; (mov r8, r8)
    e12a:	68fb      	ldr	r3, [r7, #12]
    e12c:	7e1b      	ldrb	r3, [r3, #24]
    e12e:	b2db      	uxtb	r3, r3
    e130:	001a      	movs	r2, r3
    e132:	2302      	movs	r3, #2
    e134:	4013      	ands	r3, r2
    e136:	d0f8      	beq.n	e12a <usart_write_wait+0x46>
		/* Wait until data is sent */
	}

	return STATUS_OK;
    e138:	2300      	movs	r3, #0
}
    e13a:	0018      	movs	r0, r3
    e13c:	46bd      	mov	sp, r7
    e13e:	b004      	add	sp, #16
    e140:	bd80      	pop	{r7, pc}
    e142:	46c0      	nop			; (mov r8, r8)
    e144:	0000db71 	.word	0x0000db71

0000e148 <usart_read_wait>:
 * \retval STATUS_ERR_DENIED        If the receiver is not enabled
 */
enum status_code usart_read_wait(
		struct usart_module *const module,
		uint16_t *const rx_data)
{
    e148:	b580      	push	{r7, lr}
    e14a:	b084      	sub	sp, #16
    e14c:	af00      	add	r7, sp, #0
    e14e:	6078      	str	r0, [r7, #4]
    e150:	6039      	str	r1, [r7, #0]

	/* Error variable */
	uint8_t error_code;

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    e152:	687b      	ldr	r3, [r7, #4]
    e154:	681b      	ldr	r3, [r3, #0]
    e156:	60fb      	str	r3, [r7, #12]

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
    e158:	687b      	ldr	r3, [r7, #4]
    e15a:	799b      	ldrb	r3, [r3, #6]
    e15c:	2201      	movs	r2, #1
    e15e:	4053      	eors	r3, r2
    e160:	b2db      	uxtb	r3, r3
    e162:	2b00      	cmp	r3, #0
    e164:	d001      	beq.n	e16a <usart_read_wait+0x22>
		return STATUS_ERR_DENIED;
    e166:	231c      	movs	r3, #28
    e168:	e05e      	b.n	e228 <usart_read_wait+0xe0>
	}

#if USART_CALLBACK_MODE == true
	/* Check if the USART is busy doing asynchronous operation. */
	if (module->remaining_rx_buffer_length > 0) {
    e16a:	687b      	ldr	r3, [r7, #4]
    e16c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
    e16e:	b29b      	uxth	r3, r3
    e170:	2b00      	cmp	r3, #0
    e172:	d001      	beq.n	e178 <usart_read_wait+0x30>
		return STATUS_BUSY;
    e174:	2305      	movs	r3, #5
    e176:	e057      	b.n	e228 <usart_read_wait+0xe0>
	}
#endif

	/* Check if USART has new data */
	if (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC)) {
    e178:	68fb      	ldr	r3, [r7, #12]
    e17a:	7e1b      	ldrb	r3, [r3, #24]
    e17c:	b2db      	uxtb	r3, r3
    e17e:	001a      	movs	r2, r3
    e180:	2304      	movs	r3, #4
    e182:	4013      	ands	r3, r2
    e184:	d101      	bne.n	e18a <usart_read_wait+0x42>
		/* Return error code */
		return STATUS_BUSY;
    e186:	2305      	movs	r3, #5
    e188:	e04e      	b.n	e228 <usart_read_wait+0xe0>
	}

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    e18a:	687b      	ldr	r3, [r7, #4]
    e18c:	0018      	movs	r0, r3
    e18e:	4b28      	ldr	r3, [pc, #160]	; (e230 <usart_read_wait+0xe8>)
    e190:	4798      	blx	r3

	/* Read out the status code and mask away all but the 3 LSBs*/
	error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    e192:	68fb      	ldr	r3, [r7, #12]
    e194:	8b5b      	ldrh	r3, [r3, #26]
    e196:	b29b      	uxth	r3, r3
    e198:	b2da      	uxtb	r2, r3
    e19a:	230b      	movs	r3, #11
    e19c:	18fb      	adds	r3, r7, r3
    e19e:	213f      	movs	r1, #63	; 0x3f
    e1a0:	400a      	ands	r2, r1
    e1a2:	701a      	strb	r2, [r3, #0]

	/* Check if an error has occurred during the receiving */
	if (error_code) {
    e1a4:	230b      	movs	r3, #11
    e1a6:	18fb      	adds	r3, r7, r3
    e1a8:	781b      	ldrb	r3, [r3, #0]
    e1aa:	2b00      	cmp	r3, #0
    e1ac:	d036      	beq.n	e21c <usart_read_wait+0xd4>
		/* Check which error occurred */
		if (error_code & SERCOM_USART_STATUS_FERR) {
    e1ae:	230b      	movs	r3, #11
    e1b0:	18fb      	adds	r3, r7, r3
    e1b2:	781b      	ldrb	r3, [r3, #0]
    e1b4:	2202      	movs	r2, #2
    e1b6:	4013      	ands	r3, r2
    e1b8:	d004      	beq.n	e1c4 <usart_read_wait+0x7c>
			/* Clear flag by writing a 1 to it and
			 * return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    e1ba:	68fb      	ldr	r3, [r7, #12]
    e1bc:	2202      	movs	r2, #2
    e1be:	835a      	strh	r2, [r3, #26]

			return STATUS_ERR_BAD_FORMAT;
    e1c0:	231a      	movs	r3, #26
    e1c2:	e031      	b.n	e228 <usart_read_wait+0xe0>
		} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    e1c4:	230b      	movs	r3, #11
    e1c6:	18fb      	adds	r3, r7, r3
    e1c8:	781b      	ldrb	r3, [r3, #0]
    e1ca:	2204      	movs	r2, #4
    e1cc:	4013      	ands	r3, r2
    e1ce:	d004      	beq.n	e1da <usart_read_wait+0x92>
			/* Clear flag by writing a 1 to it and
			 * return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    e1d0:	68fb      	ldr	r3, [r7, #12]
    e1d2:	2204      	movs	r2, #4
    e1d4:	835a      	strh	r2, [r3, #26]

			return STATUS_ERR_OVERFLOW;
    e1d6:	231e      	movs	r3, #30
    e1d8:	e026      	b.n	e228 <usart_read_wait+0xe0>
		} else if (error_code & SERCOM_USART_STATUS_PERR) {
    e1da:	230b      	movs	r3, #11
    e1dc:	18fb      	adds	r3, r7, r3
    e1de:	781b      	ldrb	r3, [r3, #0]
    e1e0:	2201      	movs	r2, #1
    e1e2:	4013      	ands	r3, r2
    e1e4:	d004      	beq.n	e1f0 <usart_read_wait+0xa8>
			/* Clear flag by writing a 1 to it and
			 * return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    e1e6:	68fb      	ldr	r3, [r7, #12]
    e1e8:	2201      	movs	r2, #1
    e1ea:	835a      	strh	r2, [r3, #26]

			return STATUS_ERR_BAD_DATA;
    e1ec:	2313      	movs	r3, #19
    e1ee:	e01b      	b.n	e228 <usart_read_wait+0xe0>
		}
#ifdef FEATURE_USART_LIN_SLAVE
		else if (error_code & SERCOM_USART_STATUS_ISF) {
    e1f0:	230b      	movs	r3, #11
    e1f2:	18fb      	adds	r3, r7, r3
    e1f4:	781b      	ldrb	r3, [r3, #0]
    e1f6:	2210      	movs	r2, #16
    e1f8:	4013      	ands	r3, r2
    e1fa:	d004      	beq.n	e206 <usart_read_wait+0xbe>
			/* Clear flag by writing 1 to it  and
			 *  return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    e1fc:	68fb      	ldr	r3, [r7, #12]
    e1fe:	2210      	movs	r2, #16
    e200:	835a      	strh	r2, [r3, #26]

			return STATUS_ERR_PROTOCOL;
    e202:	2342      	movs	r3, #66	; 0x42
    e204:	e010      	b.n	e228 <usart_read_wait+0xe0>
		}
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
		else if (error_code & SERCOM_USART_STATUS_COLL) {
    e206:	230b      	movs	r3, #11
    e208:	18fb      	adds	r3, r7, r3
    e20a:	781b      	ldrb	r3, [r3, #0]
    e20c:	2220      	movs	r2, #32
    e20e:	4013      	ands	r3, r2
    e210:	d004      	beq.n	e21c <usart_read_wait+0xd4>
			/* Clear flag by writing 1 to it
			 *  return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    e212:	68fb      	ldr	r3, [r7, #12]
    e214:	2220      	movs	r2, #32
    e216:	835a      	strh	r2, [r3, #26]

			return STATUS_ERR_PACKET_COLLISION;
    e218:	2341      	movs	r3, #65	; 0x41
    e21a:	e005      	b.n	e228 <usart_read_wait+0xe0>
		}
#endif
	}

	/* Read data from USART module */
	*rx_data = usart_hw->DATA.reg;
    e21c:	68fb      	ldr	r3, [r7, #12]
    e21e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    e220:	b29a      	uxth	r2, r3
    e222:	683b      	ldr	r3, [r7, #0]
    e224:	801a      	strh	r2, [r3, #0]

	return STATUS_OK;
    e226:	2300      	movs	r3, #0
}
    e228:	0018      	movs	r0, r3
    e22a:	46bd      	mov	sp, r7
    e22c:	b004      	add	sp, #16
    e22e:	bd80      	pop	{r7, pc}
    e230:	0000db71 	.word	0x0000db71

0000e234 <usart_is_syncing>:
{
    e234:	b580      	push	{r7, lr}
    e236:	b084      	sub	sp, #16
    e238:	af00      	add	r7, sp, #0
    e23a:	6078      	str	r0, [r7, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
    e23c:	687b      	ldr	r3, [r7, #4]
    e23e:	681b      	ldr	r3, [r3, #0]
    e240:	60fb      	str	r3, [r7, #12]
	return (usart_hw->SYNCBUSY.reg);
    e242:	68fb      	ldr	r3, [r7, #12]
    e244:	69db      	ldr	r3, [r3, #28]
    e246:	1e5a      	subs	r2, r3, #1
    e248:	4193      	sbcs	r3, r2
    e24a:	b2db      	uxtb	r3, r3
}
    e24c:	0018      	movs	r0, r3
    e24e:	46bd      	mov	sp, r7
    e250:	b004      	add	sp, #16
    e252:	bd80      	pop	{r7, pc}

0000e254 <_usart_wait_for_sync>:
{
    e254:	b580      	push	{r7, lr}
    e256:	b082      	sub	sp, #8
    e258:	af00      	add	r7, sp, #0
    e25a:	6078      	str	r0, [r7, #4]
	while (usart_is_syncing(module)) {
    e25c:	46c0      	nop			; (mov r8, r8)
    e25e:	687b      	ldr	r3, [r7, #4]
    e260:	0018      	movs	r0, r3
    e262:	4b04      	ldr	r3, [pc, #16]	; (e274 <_usart_wait_for_sync+0x20>)
    e264:	4798      	blx	r3
    e266:	1e03      	subs	r3, r0, #0
    e268:	d1f9      	bne.n	e25e <_usart_wait_for_sync+0xa>
}
    e26a:	46c0      	nop			; (mov r8, r8)
    e26c:	46bd      	mov	sp, r7
    e26e:	b002      	add	sp, #8
    e270:	bd80      	pop	{r7, pc}
    e272:	46c0      	nop			; (mov r8, r8)
    e274:	0000e235 	.word	0x0000e235

0000e278 <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
    e278:	b580      	push	{r7, lr}
    e27a:	b088      	sub	sp, #32
    e27c:	af00      	add	r7, sp, #0
    e27e:	0002      	movs	r2, r0
    e280:	1dfb      	adds	r3, r7, #7
    e282:	701a      	strb	r2, [r3, #0]
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
		= (struct usart_module *)_sercom_instances[instance];
    e284:	1dfb      	adds	r3, r7, #7
    e286:	781a      	ldrb	r2, [r3, #0]
	struct usart_module *module
    e288:	4ba3      	ldr	r3, [pc, #652]	; (e518 <_usart_interrupt_handler+0x2a0>)
    e28a:	0092      	lsls	r2, r2, #2
    e28c:	58d3      	ldr	r3, [r2, r3]
    e28e:	61bb      	str	r3, [r7, #24]

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
    e290:	69bb      	ldr	r3, [r7, #24]
    e292:	681b      	ldr	r3, [r3, #0]
	SercomUsart *const usart_hw
    e294:	617b      	str	r3, [r7, #20]

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);
    e296:	69bb      	ldr	r3, [r7, #24]
    e298:	0018      	movs	r0, r3
    e29a:	4ba0      	ldr	r3, [pc, #640]	; (e51c <_usart_interrupt_handler+0x2a4>)
    e29c:	4798      	blx	r3

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
    e29e:	697b      	ldr	r3, [r7, #20]
    e2a0:	7e1b      	ldrb	r3, [r3, #24]
    e2a2:	b2da      	uxtb	r2, r3
    e2a4:	2312      	movs	r3, #18
    e2a6:	18fb      	adds	r3, r7, r3
    e2a8:	801a      	strh	r2, [r3, #0]
	interrupt_status &= usart_hw->INTENSET.reg;
    e2aa:	697b      	ldr	r3, [r7, #20]
    e2ac:	7d9b      	ldrb	r3, [r3, #22]
    e2ae:	b2db      	uxtb	r3, r3
    e2b0:	b29a      	uxth	r2, r3
    e2b2:	2312      	movs	r3, #18
    e2b4:	18fb      	adds	r3, r7, r3
    e2b6:	2112      	movs	r1, #18
    e2b8:	1879      	adds	r1, r7, r1
    e2ba:	8809      	ldrh	r1, [r1, #0]
    e2bc:	400a      	ands	r2, r1
    e2be:	801a      	strh	r2, [r3, #0]
	callback_status = module->callback_reg_mask &
    e2c0:	69bb      	ldr	r3, [r7, #24]
    e2c2:	2230      	movs	r2, #48	; 0x30
    e2c4:	5c9b      	ldrb	r3, [r3, r2]
			module->callback_enable_mask;
    e2c6:	69ba      	ldr	r2, [r7, #24]
    e2c8:	2131      	movs	r1, #49	; 0x31
    e2ca:	5c52      	ldrb	r2, [r2, r1]
	callback_status = module->callback_reg_mask &
    e2cc:	4013      	ands	r3, r2
    e2ce:	b2da      	uxtb	r2, r3
    e2d0:	2310      	movs	r3, #16
    e2d2:	18fb      	adds	r3, r7, r3
    e2d4:	801a      	strh	r2, [r3, #0]

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
    e2d6:	2312      	movs	r3, #18
    e2d8:	18fb      	adds	r3, r7, r3
    e2da:	881b      	ldrh	r3, [r3, #0]
    e2dc:	2201      	movs	r2, #1
    e2de:	4013      	ands	r3, r2
    e2e0:	d044      	beq.n	e36c <_usart_interrupt_handler+0xf4>
		if (module->remaining_tx_buffer_length) {
    e2e2:	69bb      	ldr	r3, [r7, #24]
    e2e4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
    e2e6:	b29b      	uxth	r3, r3
    e2e8:	2b00      	cmp	r3, #0
    e2ea:	d03c      	beq.n	e366 <_usart_interrupt_handler+0xee>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    e2ec:	69bb      	ldr	r3, [r7, #24]
    e2ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    e2f0:	781b      	ldrb	r3, [r3, #0]
    e2f2:	b2da      	uxtb	r2, r3
    e2f4:	231c      	movs	r3, #28
    e2f6:	18fb      	adds	r3, r7, r3
    e2f8:	801a      	strh	r2, [r3, #0]
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
    e2fa:	69bb      	ldr	r3, [r7, #24]
    e2fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    e2fe:	1c5a      	adds	r2, r3, #1
    e300:	69bb      	ldr	r3, [r7, #24]
    e302:	629a      	str	r2, [r3, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    e304:	69bb      	ldr	r3, [r7, #24]
    e306:	795b      	ldrb	r3, [r3, #5]
    e308:	2b01      	cmp	r3, #1
    e30a:	d113      	bne.n	e334 <_usart_interrupt_handler+0xbc>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
    e30c:	69bb      	ldr	r3, [r7, #24]
    e30e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    e310:	781b      	ldrb	r3, [r3, #0]
    e312:	b2db      	uxtb	r3, r3
    e314:	021b      	lsls	r3, r3, #8
    e316:	b21a      	sxth	r2, r3
    e318:	231c      	movs	r3, #28
    e31a:	18fb      	adds	r3, r7, r3
    e31c:	2100      	movs	r1, #0
    e31e:	5e5b      	ldrsh	r3, [r3, r1]
    e320:	4313      	orrs	r3, r2
    e322:	b21a      	sxth	r2, r3
    e324:	231c      	movs	r3, #28
    e326:	18fb      	adds	r3, r7, r3
    e328:	801a      	strh	r2, [r3, #0]
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
    e32a:	69bb      	ldr	r3, [r7, #24]
    e32c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    e32e:	1c5a      	adds	r2, r3, #1
    e330:	69bb      	ldr	r3, [r7, #24]
    e332:	629a      	str	r2, [r3, #40]	; 0x28
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
    e334:	231c      	movs	r3, #28
    e336:	18fb      	adds	r3, r7, r3
    e338:	881b      	ldrh	r3, [r3, #0]
    e33a:	05db      	lsls	r3, r3, #23
    e33c:	0ddb      	lsrs	r3, r3, #23
    e33e:	b29a      	uxth	r2, r3
    e340:	697b      	ldr	r3, [r7, #20]
    e342:	851a      	strh	r2, [r3, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
    e344:	69bb      	ldr	r3, [r7, #24]
    e346:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
    e348:	b29b      	uxth	r3, r3
    e34a:	3b01      	subs	r3, #1
    e34c:	b29b      	uxth	r3, r3
    e34e:	69ba      	ldr	r2, [r7, #24]
    e350:	1c19      	adds	r1, r3, #0
    e352:	85d1      	strh	r1, [r2, #46]	; 0x2e
    e354:	2b00      	cmp	r3, #0
    e356:	d109      	bne.n	e36c <_usart_interrupt_handler+0xf4>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    e358:	697b      	ldr	r3, [r7, #20]
    e35a:	2201      	movs	r2, #1
    e35c:	751a      	strb	r2, [r3, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
    e35e:	697b      	ldr	r3, [r7, #20]
    e360:	2202      	movs	r2, #2
    e362:	759a      	strb	r2, [r3, #22]
    e364:	e002      	b.n	e36c <_usart_interrupt_handler+0xf4>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    e366:	697b      	ldr	r3, [r7, #20]
    e368:	2201      	movs	r2, #1
    e36a:	751a      	strb	r2, [r3, #20]
		}
	}

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
    e36c:	2312      	movs	r3, #18
    e36e:	18fb      	adds	r3, r7, r3
    e370:	881b      	ldrh	r3, [r3, #0]
    e372:	2202      	movs	r2, #2
    e374:	4013      	ands	r3, r2
    e376:	d011      	beq.n	e39c <_usart_interrupt_handler+0x124>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
    e378:	697b      	ldr	r3, [r7, #20]
    e37a:	2202      	movs	r2, #2
    e37c:	751a      	strb	r2, [r3, #20]
		module->tx_status = STATUS_OK;
    e37e:	69bb      	ldr	r3, [r7, #24]
    e380:	2233      	movs	r2, #51	; 0x33
    e382:	2100      	movs	r1, #0
    e384:	5499      	strb	r1, [r3, r2]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
    e386:	2310      	movs	r3, #16
    e388:	18fb      	adds	r3, r7, r3
    e38a:	881b      	ldrh	r3, [r3, #0]
    e38c:	2201      	movs	r2, #1
    e38e:	4013      	ands	r3, r2
    e390:	d004      	beq.n	e39c <_usart_interrupt_handler+0x124>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
    e392:	69bb      	ldr	r3, [r7, #24]
    e394:	68db      	ldr	r3, [r3, #12]
    e396:	69ba      	ldr	r2, [r7, #24]
    e398:	0010      	movs	r0, r2
    e39a:	4798      	blx	r3
		}
	}

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
    e39c:	2312      	movs	r3, #18
    e39e:	18fb      	adds	r3, r7, r3
    e3a0:	881b      	ldrh	r3, [r3, #0]
    e3a2:	2204      	movs	r2, #4
    e3a4:	4013      	ands	r3, r2
    e3a6:	d100      	bne.n	e3aa <_usart_interrupt_handler+0x132>
    e3a8:	e0bd      	b.n	e526 <_usart_interrupt_handler+0x2ae>

		if (module->remaining_rx_buffer_length) {
    e3aa:	69bb      	ldr	r3, [r7, #24]
    e3ac:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
    e3ae:	b29b      	uxth	r3, r3
    e3b0:	2b00      	cmp	r3, #0
    e3b2:	d100      	bne.n	e3b6 <_usart_interrupt_handler+0x13e>
    e3b4:	e0b4      	b.n	e520 <_usart_interrupt_handler+0x2a8>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    e3b6:	697b      	ldr	r3, [r7, #20]
    e3b8:	8b5b      	ldrh	r3, [r3, #26]
    e3ba:	b29b      	uxth	r3, r3
    e3bc:	b2da      	uxtb	r2, r3
    e3be:	231f      	movs	r3, #31
    e3c0:	18fb      	adds	r3, r7, r3
    e3c2:	213f      	movs	r1, #63	; 0x3f
    e3c4:	400a      	ands	r2, r1
    e3c6:	701a      	strb	r2, [r3, #0]
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
    e3c8:	231f      	movs	r3, #31
    e3ca:	18fb      	adds	r3, r7, r3
    e3cc:	781b      	ldrb	r3, [r3, #0]
    e3ce:	2208      	movs	r2, #8
    e3d0:	4013      	ands	r3, r2
    e3d2:	d007      	beq.n	e3e4 <_usart_interrupt_handler+0x16c>
				error_code &= ~SERCOM_USART_STATUS_CTS;
    e3d4:	231f      	movs	r3, #31
    e3d6:	18fb      	adds	r3, r7, r3
    e3d8:	221f      	movs	r2, #31
    e3da:	18ba      	adds	r2, r7, r2
    e3dc:	7812      	ldrb	r2, [r2, #0]
    e3de:	2108      	movs	r1, #8
    e3e0:	438a      	bics	r2, r1
    e3e2:	701a      	strb	r2, [r3, #0]
			if(error_code & SERCOM_USART_STATUS_TXE) {
				error_code &= ~SERCOM_USART_STATUS_TXE;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
    e3e4:	231f      	movs	r3, #31
    e3e6:	18fb      	adds	r3, r7, r3
    e3e8:	781b      	ldrb	r3, [r3, #0]
    e3ea:	2b00      	cmp	r3, #0
    e3ec:	d050      	beq.n	e490 <_usart_interrupt_handler+0x218>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
    e3ee:	231f      	movs	r3, #31
    e3f0:	18fb      	adds	r3, r7, r3
    e3f2:	781b      	ldrb	r3, [r3, #0]
    e3f4:	2202      	movs	r2, #2
    e3f6:	4013      	ands	r3, r2
    e3f8:	d007      	beq.n	e40a <_usart_interrupt_handler+0x192>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
    e3fa:	69bb      	ldr	r3, [r7, #24]
    e3fc:	2232      	movs	r2, #50	; 0x32
    e3fe:	211a      	movs	r1, #26
    e400:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    e402:	697b      	ldr	r3, [r7, #20]
    e404:	2202      	movs	r2, #2
    e406:	835a      	strh	r2, [r3, #26]
    e408:	e036      	b.n	e478 <_usart_interrupt_handler+0x200>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    e40a:	231f      	movs	r3, #31
    e40c:	18fb      	adds	r3, r7, r3
    e40e:	781b      	ldrb	r3, [r3, #0]
    e410:	2204      	movs	r2, #4
    e412:	4013      	ands	r3, r2
    e414:	d007      	beq.n	e426 <_usart_interrupt_handler+0x1ae>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_OVERFLOW;
    e416:	69bb      	ldr	r3, [r7, #24]
    e418:	2232      	movs	r2, #50	; 0x32
    e41a:	211e      	movs	r1, #30
    e41c:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    e41e:	697b      	ldr	r3, [r7, #20]
    e420:	2204      	movs	r2, #4
    e422:	835a      	strh	r2, [r3, #26]
    e424:	e028      	b.n	e478 <_usart_interrupt_handler+0x200>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
    e426:	231f      	movs	r3, #31
    e428:	18fb      	adds	r3, r7, r3
    e42a:	781b      	ldrb	r3, [r3, #0]
    e42c:	2201      	movs	r2, #1
    e42e:	4013      	ands	r3, r2
    e430:	d007      	beq.n	e442 <_usart_interrupt_handler+0x1ca>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_DATA;
    e432:	69bb      	ldr	r3, [r7, #24]
    e434:	2232      	movs	r2, #50	; 0x32
    e436:	2113      	movs	r1, #19
    e438:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    e43a:	697b      	ldr	r3, [r7, #20]
    e43c:	2201      	movs	r2, #1
    e43e:	835a      	strh	r2, [r3, #26]
    e440:	e01a      	b.n	e478 <_usart_interrupt_handler+0x200>
				}
#ifdef FEATURE_USART_LIN_SLAVE
				else if (error_code & SERCOM_USART_STATUS_ISF) {
    e442:	231f      	movs	r3, #31
    e444:	18fb      	adds	r3, r7, r3
    e446:	781b      	ldrb	r3, [r3, #0]
    e448:	2210      	movs	r2, #16
    e44a:	4013      	ands	r3, r2
    e44c:	d007      	beq.n	e45e <_usart_interrupt_handler+0x1e6>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PROTOCOL;
    e44e:	69bb      	ldr	r3, [r7, #24]
    e450:	2232      	movs	r2, #50	; 0x32
    e452:	2142      	movs	r1, #66	; 0x42
    e454:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    e456:	697b      	ldr	r3, [r7, #20]
    e458:	2210      	movs	r2, #16
    e45a:	835a      	strh	r2, [r3, #26]
    e45c:	e00c      	b.n	e478 <_usart_interrupt_handler+0x200>
				}
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
				else if (error_code & SERCOM_USART_STATUS_COLL) {
    e45e:	231f      	movs	r3, #31
    e460:	18fb      	adds	r3, r7, r3
    e462:	781b      	ldrb	r3, [r3, #0]
    e464:	2220      	movs	r2, #32
    e466:	4013      	ands	r3, r2
    e468:	d006      	beq.n	e478 <_usart_interrupt_handler+0x200>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
    e46a:	69bb      	ldr	r3, [r7, #24]
    e46c:	2232      	movs	r2, #50	; 0x32
    e46e:	2141      	movs	r1, #65	; 0x41
    e470:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    e472:	697b      	ldr	r3, [r7, #20]
    e474:	2220      	movs	r2, #32
    e476:	835a      	strh	r2, [r3, #26]
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
						& (1 << USART_CALLBACK_ERROR)) {
    e478:	2310      	movs	r3, #16
    e47a:	18fb      	adds	r3, r7, r3
    e47c:	881b      	ldrh	r3, [r3, #0]
    e47e:	2204      	movs	r2, #4
    e480:	4013      	ands	r3, r2
				if (callback_status
    e482:	d050      	beq.n	e526 <_usart_interrupt_handler+0x2ae>
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
    e484:	69bb      	ldr	r3, [r7, #24]
    e486:	695b      	ldr	r3, [r3, #20]
    e488:	69ba      	ldr	r2, [r7, #24]
    e48a:	0010      	movs	r0, r2
    e48c:	4798      	blx	r3
    e48e:	e04a      	b.n	e526 <_usart_interrupt_handler+0x2ae>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
    e490:	697b      	ldr	r3, [r7, #20]
    e492:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    e494:	b29a      	uxth	r2, r3
    e496:	230e      	movs	r3, #14
    e498:	18fb      	adds	r3, r7, r3
    e49a:	05d2      	lsls	r2, r2, #23
    e49c:	0dd2      	lsrs	r2, r2, #23
    e49e:	801a      	strh	r2, [r3, #0]

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
    e4a0:	69bb      	ldr	r3, [r7, #24]
    e4a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    e4a4:	220e      	movs	r2, #14
    e4a6:	18ba      	adds	r2, r7, r2
    e4a8:	8812      	ldrh	r2, [r2, #0]
    e4aa:	b2d2      	uxtb	r2, r2
    e4ac:	701a      	strb	r2, [r3, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
    e4ae:	69bb      	ldr	r3, [r7, #24]
    e4b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    e4b2:	1c5a      	adds	r2, r3, #1
    e4b4:	69bb      	ldr	r3, [r7, #24]
    e4b6:	625a      	str	r2, [r3, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    e4b8:	69bb      	ldr	r3, [r7, #24]
    e4ba:	795b      	ldrb	r3, [r3, #5]
    e4bc:	2b01      	cmp	r3, #1
    e4be:	d10d      	bne.n	e4dc <_usart_interrupt_handler+0x264>
					/* 9-bit data, write next received byte to the buffer */
					*(module->rx_buffer_ptr) = (received_data >> 8);
    e4c0:	69bb      	ldr	r3, [r7, #24]
    e4c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    e4c4:	220e      	movs	r2, #14
    e4c6:	18ba      	adds	r2, r7, r2
    e4c8:	8812      	ldrh	r2, [r2, #0]
    e4ca:	0a12      	lsrs	r2, r2, #8
    e4cc:	b292      	uxth	r2, r2
    e4ce:	b2d2      	uxtb	r2, r2
    e4d0:	701a      	strb	r2, [r3, #0]
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
    e4d2:	69bb      	ldr	r3, [r7, #24]
    e4d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    e4d6:	1c5a      	adds	r2, r3, #1
    e4d8:	69bb      	ldr	r3, [r7, #24]
    e4da:	625a      	str	r2, [r3, #36]	; 0x24
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
    e4dc:	69bb      	ldr	r3, [r7, #24]
    e4de:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
    e4e0:	b29b      	uxth	r3, r3
    e4e2:	3b01      	subs	r3, #1
    e4e4:	b29b      	uxth	r3, r3
    e4e6:	69ba      	ldr	r2, [r7, #24]
    e4e8:	1c19      	adds	r1, r3, #0
    e4ea:	8591      	strh	r1, [r2, #44]	; 0x2c
    e4ec:	2b00      	cmp	r3, #0
    e4ee:	d11a      	bne.n	e526 <_usart_interrupt_handler+0x2ae>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    e4f0:	697b      	ldr	r3, [r7, #20]
    e4f2:	2204      	movs	r2, #4
    e4f4:	751a      	strb	r2, [r3, #20]
					module->rx_status = STATUS_OK;
    e4f6:	69bb      	ldr	r3, [r7, #24]
    e4f8:	2232      	movs	r2, #50	; 0x32
    e4fa:	2100      	movs	r1, #0
    e4fc:	5499      	strb	r1, [r3, r2]

					/* Run callback if registered and enabled */
					if (callback_status
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
    e4fe:	2310      	movs	r3, #16
    e500:	18fb      	adds	r3, r7, r3
    e502:	881b      	ldrh	r3, [r3, #0]
    e504:	2202      	movs	r2, #2
    e506:	4013      	ands	r3, r2
					if (callback_status
    e508:	d00d      	beq.n	e526 <_usart_interrupt_handler+0x2ae>
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
    e50a:	69bb      	ldr	r3, [r7, #24]
    e50c:	691b      	ldr	r3, [r3, #16]
    e50e:	69ba      	ldr	r2, [r7, #24]
    e510:	0010      	movs	r0, r2
    e512:	4798      	blx	r3
    e514:	e007      	b.n	e526 <_usart_interrupt_handler+0x2ae>
    e516:	46c0      	nop			; (mov r8, r8)
    e518:	20002b5c 	.word	0x20002b5c
    e51c:	0000e255 	.word	0x0000e255
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    e520:	697b      	ldr	r3, [r7, #20]
    e522:	2204      	movs	r2, #4
    e524:	751a      	strb	r2, [r3, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
    e526:	2312      	movs	r3, #18
    e528:	18fb      	adds	r3, r7, r3
    e52a:	881b      	ldrh	r3, [r3, #0]
    e52c:	2210      	movs	r2, #16
    e52e:	4013      	ands	r3, r2
    e530:	d010      	beq.n	e554 <_usart_interrupt_handler+0x2dc>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
    e532:	697b      	ldr	r3, [r7, #20]
    e534:	2210      	movs	r2, #16
    e536:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
    e538:	697b      	ldr	r3, [r7, #20]
    e53a:	2210      	movs	r2, #16
    e53c:	761a      	strb	r2, [r3, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
    e53e:	2310      	movs	r3, #16
    e540:	18fb      	adds	r3, r7, r3
    e542:	881b      	ldrh	r3, [r3, #0]
    e544:	2210      	movs	r2, #16
    e546:	4013      	ands	r3, r2
    e548:	d004      	beq.n	e554 <_usart_interrupt_handler+0x2dc>
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
    e54a:	69bb      	ldr	r3, [r7, #24]
    e54c:	69db      	ldr	r3, [r3, #28]
    e54e:	69ba      	ldr	r2, [r7, #24]
    e550:	0010      	movs	r0, r2
    e552:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
    e554:	2312      	movs	r3, #18
    e556:	18fb      	adds	r3, r7, r3
    e558:	881b      	ldrh	r3, [r3, #0]
    e55a:	2220      	movs	r2, #32
    e55c:	4013      	ands	r3, r2
    e55e:	d010      	beq.n	e582 <_usart_interrupt_handler+0x30a>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
    e560:	697b      	ldr	r3, [r7, #20]
    e562:	2220      	movs	r2, #32
    e564:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
    e566:	697b      	ldr	r3, [r7, #20]
    e568:	2220      	movs	r2, #32
    e56a:	761a      	strb	r2, [r3, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
    e56c:	2310      	movs	r3, #16
    e56e:	18fb      	adds	r3, r7, r3
    e570:	881b      	ldrh	r3, [r3, #0]
    e572:	2208      	movs	r2, #8
    e574:	4013      	ands	r3, r2
    e576:	d004      	beq.n	e582 <_usart_interrupt_handler+0x30a>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
    e578:	69bb      	ldr	r3, [r7, #24]
    e57a:	699b      	ldr	r3, [r3, #24]
    e57c:	69ba      	ldr	r2, [r7, #24]
    e57e:	0010      	movs	r0, r2
    e580:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
    e582:	2312      	movs	r3, #18
    e584:	18fb      	adds	r3, r7, r3
    e586:	881b      	ldrh	r3, [r3, #0]
    e588:	2208      	movs	r2, #8
    e58a:	4013      	ands	r3, r2
    e58c:	d010      	beq.n	e5b0 <_usart_interrupt_handler+0x338>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
    e58e:	697b      	ldr	r3, [r7, #20]
    e590:	2208      	movs	r2, #8
    e592:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
    e594:	697b      	ldr	r3, [r7, #20]
    e596:	2208      	movs	r2, #8
    e598:	761a      	strb	r2, [r3, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
    e59a:	2310      	movs	r3, #16
    e59c:	18fb      	adds	r3, r7, r3
    e59e:	881b      	ldrh	r3, [r3, #0]
    e5a0:	2220      	movs	r2, #32
    e5a2:	4013      	ands	r3, r2
    e5a4:	d004      	beq.n	e5b0 <_usart_interrupt_handler+0x338>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
    e5a6:	69bb      	ldr	r3, [r7, #24]
    e5a8:	6a1b      	ldr	r3, [r3, #32]
    e5aa:	69ba      	ldr	r2, [r7, #24]
    e5ac:	0010      	movs	r0, r2
    e5ae:	4798      	blx	r3
		}
	}
#endif
}
    e5b0:	46c0      	nop			; (mov r8, r8)
    e5b2:	46bd      	mov	sp, r7
    e5b4:	b008      	add	sp, #32
    e5b6:	bd80      	pop	{r7, pc}

0000e5b8 <system_gclk_gen_get_config_defaults>:
{
    e5b8:	b580      	push	{r7, lr}
    e5ba:	b082      	sub	sp, #8
    e5bc:	af00      	add	r7, sp, #0
    e5be:	6078      	str	r0, [r7, #4]
	config->division_factor    = 1;
    e5c0:	687b      	ldr	r3, [r7, #4]
    e5c2:	2201      	movs	r2, #1
    e5c4:	605a      	str	r2, [r3, #4]
	config->high_when_disabled = false;
    e5c6:	687b      	ldr	r3, [r7, #4]
    e5c8:	2200      	movs	r2, #0
    e5ca:	705a      	strb	r2, [r3, #1]
	config->source_clock       = GCLK_SOURCE_OSC8M;
    e5cc:	687b      	ldr	r3, [r7, #4]
    e5ce:	2206      	movs	r2, #6
    e5d0:	701a      	strb	r2, [r3, #0]
	config->run_in_standby     = false;
    e5d2:	687b      	ldr	r3, [r7, #4]
    e5d4:	2200      	movs	r2, #0
    e5d6:	721a      	strb	r2, [r3, #8]
	config->output_enable      = false;
    e5d8:	687b      	ldr	r3, [r7, #4]
    e5da:	2200      	movs	r2, #0
    e5dc:	725a      	strb	r2, [r3, #9]
}
    e5de:	46c0      	nop			; (mov r8, r8)
    e5e0:	46bd      	mov	sp, r7
    e5e2:	b002      	add	sp, #8
    e5e4:	bd80      	pop	{r7, pc}

0000e5e6 <system_gclk_chan_get_config_defaults>:
{
    e5e6:	b580      	push	{r7, lr}
    e5e8:	b082      	sub	sp, #8
    e5ea:	af00      	add	r7, sp, #0
    e5ec:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
    e5ee:	687b      	ldr	r3, [r7, #4]
    e5f0:	2200      	movs	r2, #0
    e5f2:	701a      	strb	r2, [r3, #0]
}
    e5f4:	46c0      	nop			; (mov r8, r8)
    e5f6:	46bd      	mov	sp, r7
    e5f8:	b002      	add	sp, #8
    e5fa:	bd80      	pop	{r7, pc}

0000e5fc <system_clock_source_xosc32k_get_config_defaults>:
{
    e5fc:	b580      	push	{r7, lr}
    e5fe:	b082      	sub	sp, #8
    e600:	af00      	add	r7, sp, #0
    e602:	6078      	str	r0, [r7, #4]
	config->external_clock      = SYSTEM_CLOCK_EXTERNAL_CRYSTAL;
    e604:	687b      	ldr	r3, [r7, #4]
    e606:	2200      	movs	r2, #0
    e608:	701a      	strb	r2, [r3, #0]
	config->startup_time        = SYSTEM_XOSC32K_STARTUP_16384;
    e60a:	687b      	ldr	r3, [r7, #4]
    e60c:	2204      	movs	r2, #4
    e60e:	705a      	strb	r2, [r3, #1]
	config->auto_gain_control   = false;
    e610:	687b      	ldr	r3, [r7, #4]
    e612:	2200      	movs	r2, #0
    e614:	709a      	strb	r2, [r3, #2]
	config->frequency           = 32768UL;
    e616:	687b      	ldr	r3, [r7, #4]
    e618:	2280      	movs	r2, #128	; 0x80
    e61a:	0212      	lsls	r2, r2, #8
    e61c:	609a      	str	r2, [r3, #8]
	config->enable_1khz_output  = false;
    e61e:	687b      	ldr	r3, [r7, #4]
    e620:	2200      	movs	r2, #0
    e622:	70da      	strb	r2, [r3, #3]
	config->enable_32khz_output = true;
    e624:	687b      	ldr	r3, [r7, #4]
    e626:	2201      	movs	r2, #1
    e628:	711a      	strb	r2, [r3, #4]
	config->run_in_standby      = false;
    e62a:	687b      	ldr	r3, [r7, #4]
    e62c:	2200      	movs	r2, #0
    e62e:	731a      	strb	r2, [r3, #12]
	config->on_demand           = true;
    e630:	687b      	ldr	r3, [r7, #4]
    e632:	2201      	movs	r2, #1
    e634:	735a      	strb	r2, [r3, #13]
	config->write_once          = false;
    e636:	687b      	ldr	r3, [r7, #4]
    e638:	2200      	movs	r2, #0
    e63a:	739a      	strb	r2, [r3, #14]
}
    e63c:	46c0      	nop			; (mov r8, r8)
    e63e:	46bd      	mov	sp, r7
    e640:	b002      	add	sp, #8
    e642:	bd80      	pop	{r7, pc}

0000e644 <system_clock_source_osc8m_get_config_defaults>:
{
    e644:	b580      	push	{r7, lr}
    e646:	b082      	sub	sp, #8
    e648:	af00      	add	r7, sp, #0
    e64a:	6078      	str	r0, [r7, #4]
	config->prescaler       = SYSTEM_OSC8M_DIV_8;
    e64c:	687b      	ldr	r3, [r7, #4]
    e64e:	2203      	movs	r2, #3
    e650:	701a      	strb	r2, [r3, #0]
	config->run_in_standby  = false;
    e652:	687b      	ldr	r3, [r7, #4]
    e654:	2200      	movs	r2, #0
    e656:	705a      	strb	r2, [r3, #1]
	config->on_demand       = true;
    e658:	687b      	ldr	r3, [r7, #4]
    e65a:	2201      	movs	r2, #1
    e65c:	709a      	strb	r2, [r3, #2]
}
    e65e:	46c0      	nop			; (mov r8, r8)
    e660:	46bd      	mov	sp, r7
    e662:	b002      	add	sp, #8
    e664:	bd80      	pop	{r7, pc}

0000e666 <system_clock_source_dfll_get_config_defaults>:
{
    e666:	b580      	push	{r7, lr}
    e668:	b082      	sub	sp, #8
    e66a:	af00      	add	r7, sp, #0
    e66c:	6078      	str	r0, [r7, #4]
	config->loop_mode       = SYSTEM_CLOCK_DFLL_LOOP_MODE_OPEN;
    e66e:	687b      	ldr	r3, [r7, #4]
    e670:	2200      	movs	r2, #0
    e672:	701a      	strb	r2, [r3, #0]
	config->quick_lock      = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
    e674:	687b      	ldr	r3, [r7, #4]
    e676:	2200      	movs	r2, #0
    e678:	805a      	strh	r2, [r3, #2]
	config->chill_cycle     = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_ENABLE;
    e67a:	687b      	ldr	r3, [r7, #4]
    e67c:	2200      	movs	r2, #0
    e67e:	809a      	strh	r2, [r3, #4]
	config->wakeup_lock     = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
    e680:	687b      	ldr	r3, [r7, #4]
    e682:	2200      	movs	r2, #0
    e684:	719a      	strb	r2, [r3, #6]
	config->stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
    e686:	687b      	ldr	r3, [r7, #4]
    e688:	2200      	movs	r2, #0
    e68a:	71da      	strb	r2, [r3, #7]
	config->on_demand       = true;
    e68c:	687b      	ldr	r3, [r7, #4]
    e68e:	2201      	movs	r2, #1
    e690:	705a      	strb	r2, [r3, #1]
	config->coarse_value    = 0x1f / 4; /* Midpoint */
    e692:	687b      	ldr	r3, [r7, #4]
    e694:	2207      	movs	r2, #7
    e696:	721a      	strb	r2, [r3, #8]
	config->fine_value      = 0xff / 4; /* Midpoint */
    e698:	687b      	ldr	r3, [r7, #4]
    e69a:	223f      	movs	r2, #63	; 0x3f
    e69c:	815a      	strh	r2, [r3, #10]
	config->coarse_max_step = 1;
    e69e:	687b      	ldr	r3, [r7, #4]
    e6a0:	2201      	movs	r2, #1
    e6a2:	731a      	strb	r2, [r3, #12]
	config->fine_max_step   = 1;
    e6a4:	687b      	ldr	r3, [r7, #4]
    e6a6:	2201      	movs	r2, #1
    e6a8:	81da      	strh	r2, [r3, #14]
	config->multiply_factor = 6; /* Multiply 8MHz by 6 to get 48MHz */
    e6aa:	687b      	ldr	r3, [r7, #4]
    e6ac:	2206      	movs	r2, #6
    e6ae:	821a      	strh	r2, [r3, #16]
}
    e6b0:	46c0      	nop			; (mov r8, r8)
    e6b2:	46bd      	mov	sp, r7
    e6b4:	b002      	add	sp, #8
    e6b6:	bd80      	pop	{r7, pc}

0000e6b8 <system_cpu_clock_set_divider>:
{
    e6b8:	b580      	push	{r7, lr}
    e6ba:	b082      	sub	sp, #8
    e6bc:	af00      	add	r7, sp, #0
    e6be:	0002      	movs	r2, r0
    e6c0:	1dfb      	adds	r3, r7, #7
    e6c2:	701a      	strb	r2, [r3, #0]
	PM->CPUSEL.reg = (uint32_t)divider;
    e6c4:	4a03      	ldr	r2, [pc, #12]	; (e6d4 <system_cpu_clock_set_divider+0x1c>)
    e6c6:	1dfb      	adds	r3, r7, #7
    e6c8:	781b      	ldrb	r3, [r3, #0]
    e6ca:	7213      	strb	r3, [r2, #8]
}
    e6cc:	46c0      	nop			; (mov r8, r8)
    e6ce:	46bd      	mov	sp, r7
    e6d0:	b002      	add	sp, #8
    e6d2:	bd80      	pop	{r7, pc}
    e6d4:	40000400 	.word	0x40000400

0000e6d8 <system_apb_clock_set_divider>:
{
    e6d8:	b580      	push	{r7, lr}
    e6da:	b082      	sub	sp, #8
    e6dc:	af00      	add	r7, sp, #0
    e6de:	0002      	movs	r2, r0
    e6e0:	1dfb      	adds	r3, r7, #7
    e6e2:	701a      	strb	r2, [r3, #0]
    e6e4:	1dbb      	adds	r3, r7, #6
    e6e6:	1c0a      	adds	r2, r1, #0
    e6e8:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    e6ea:	1dfb      	adds	r3, r7, #7
    e6ec:	781b      	ldrb	r3, [r3, #0]
    e6ee:	2b01      	cmp	r3, #1
    e6f0:	d008      	beq.n	e704 <system_apb_clock_set_divider+0x2c>
    e6f2:	2b02      	cmp	r3, #2
    e6f4:	d00b      	beq.n	e70e <system_apb_clock_set_divider+0x36>
    e6f6:	2b00      	cmp	r3, #0
    e6f8:	d10e      	bne.n	e718 <system_apb_clock_set_divider+0x40>
			PM->APBASEL.reg = (uint32_t)divider;
    e6fa:	4a0b      	ldr	r2, [pc, #44]	; (e728 <system_apb_clock_set_divider+0x50>)
    e6fc:	1dbb      	adds	r3, r7, #6
    e6fe:	781b      	ldrb	r3, [r3, #0]
    e700:	7253      	strb	r3, [r2, #9]
			break;
    e702:	e00b      	b.n	e71c <system_apb_clock_set_divider+0x44>
			PM->APBBSEL.reg = (uint32_t)divider;
    e704:	4a08      	ldr	r2, [pc, #32]	; (e728 <system_apb_clock_set_divider+0x50>)
    e706:	1dbb      	adds	r3, r7, #6
    e708:	781b      	ldrb	r3, [r3, #0]
    e70a:	7293      	strb	r3, [r2, #10]
			break;
    e70c:	e006      	b.n	e71c <system_apb_clock_set_divider+0x44>
			PM->APBCSEL.reg = (uint32_t)divider;
    e70e:	4a06      	ldr	r2, [pc, #24]	; (e728 <system_apb_clock_set_divider+0x50>)
    e710:	1dbb      	adds	r3, r7, #6
    e712:	781b      	ldrb	r3, [r3, #0]
    e714:	72d3      	strb	r3, [r2, #11]
			break;
    e716:	e001      	b.n	e71c <system_apb_clock_set_divider+0x44>
			return STATUS_ERR_INVALID_ARG;
    e718:	2317      	movs	r3, #23
    e71a:	e000      	b.n	e71e <system_apb_clock_set_divider+0x46>
	return STATUS_OK;
    e71c:	2300      	movs	r3, #0
}
    e71e:	0018      	movs	r0, r3
    e720:	46bd      	mov	sp, r7
    e722:	b002      	add	sp, #8
    e724:	bd80      	pop	{r7, pc}
    e726:	46c0      	nop			; (mov r8, r8)
    e728:	40000400 	.word	0x40000400

0000e72c <system_flash_set_waitstates>:
 * can be found in the electrical characteristics of the device.
 *
 * \param[in] wait_states Number of wait states to use for internal flash
 */
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
    e72c:	b580      	push	{r7, lr}
    e72e:	b082      	sub	sp, #8
    e730:	af00      	add	r7, sp, #0
    e732:	0002      	movs	r2, r0
    e734:	1dfb      	adds	r3, r7, #7
    e736:	701a      	strb	r2, [r3, #0]
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    e738:	4a08      	ldr	r2, [pc, #32]	; (e75c <system_flash_set_waitstates+0x30>)
    e73a:	1dfb      	adds	r3, r7, #7
    e73c:	781b      	ldrb	r3, [r3, #0]
    e73e:	210f      	movs	r1, #15
    e740:	400b      	ands	r3, r1
    e742:	b2d9      	uxtb	r1, r3
    e744:	6853      	ldr	r3, [r2, #4]
    e746:	200f      	movs	r0, #15
    e748:	4001      	ands	r1, r0
    e74a:	0049      	lsls	r1, r1, #1
    e74c:	201e      	movs	r0, #30
    e74e:	4383      	bics	r3, r0
    e750:	430b      	orrs	r3, r1
    e752:	6053      	str	r3, [r2, #4]
}
    e754:	46c0      	nop			; (mov r8, r8)
    e756:	46bd      	mov	sp, r7
    e758:	b002      	add	sp, #8
    e75a:	bd80      	pop	{r7, pc}
    e75c:	41004000 	.word	0x41004000

0000e760 <_system_dfll_wait_for_sync>:
/**
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
    e760:	b580      	push	{r7, lr}
    e762:	af00      	add	r7, sp, #0
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    e764:	46c0      	nop			; (mov r8, r8)
    e766:	4b04      	ldr	r3, [pc, #16]	; (e778 <_system_dfll_wait_for_sync+0x18>)
    e768:	68db      	ldr	r3, [r3, #12]
    e76a:	2210      	movs	r2, #16
    e76c:	4013      	ands	r3, r2
    e76e:	d0fa      	beq.n	e766 <_system_dfll_wait_for_sync+0x6>
		/* Wait for DFLL sync */
	}
}
    e770:	46c0      	nop			; (mov r8, r8)
    e772:	46bd      	mov	sp, r7
    e774:	bd80      	pop	{r7, pc}
    e776:	46c0      	nop			; (mov r8, r8)
    e778:	40000800 	.word	0x40000800

0000e77c <_system_clock_source_dfll_set_config_errata_9905>:
		/* Wait for OSC32K sync */
	}
}

static inline void _system_clock_source_dfll_set_config_errata_9905(void)
{
    e77c:	b580      	push	{r7, lr}
    e77e:	af00      	add	r7, sp, #0

	/* Disable ONDEMAND mode while writing configurations */
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
    e780:	4b0c      	ldr	r3, [pc, #48]	; (e7b4 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    e782:	2202      	movs	r2, #2
    e784:	849a      	strh	r2, [r3, #36]	; 0x24
	_system_dfll_wait_for_sync();
    e786:	4b0c      	ldr	r3, [pc, #48]	; (e7b8 <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
    e788:	4798      	blx	r3

	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    e78a:	4a0a      	ldr	r2, [pc, #40]	; (e7b4 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    e78c:	4b0b      	ldr	r3, [pc, #44]	; (e7bc <_system_clock_source_dfll_set_config_errata_9905+0x40>)
    e78e:	689b      	ldr	r3, [r3, #8]
    e790:	62d3      	str	r3, [r2, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    e792:	4a08      	ldr	r2, [pc, #32]	; (e7b4 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    e794:	4b09      	ldr	r3, [pc, #36]	; (e7bc <_system_clock_source_dfll_set_config_errata_9905+0x40>)
    e796:	685b      	ldr	r3, [r3, #4]
    e798:	6293      	str	r3, [r2, #40]	; 0x28

	/* Write full configuration to DFLL control register */
	SYSCTRL->DFLLCTRL.reg = 0;
    e79a:	4b06      	ldr	r3, [pc, #24]	; (e7b4 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    e79c:	2200      	movs	r2, #0
    e79e:	849a      	strh	r2, [r3, #36]	; 0x24
	_system_dfll_wait_for_sync();
    e7a0:	4b05      	ldr	r3, [pc, #20]	; (e7b8 <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
    e7a2:	4798      	blx	r3
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    e7a4:	4a03      	ldr	r2, [pc, #12]	; (e7b4 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    e7a6:	4b05      	ldr	r3, [pc, #20]	; (e7bc <_system_clock_source_dfll_set_config_errata_9905+0x40>)
    e7a8:	681b      	ldr	r3, [r3, #0]
    e7aa:	b29b      	uxth	r3, r3
    e7ac:	8493      	strh	r3, [r2, #36]	; 0x24
}
    e7ae:	46c0      	nop			; (mov r8, r8)
    e7b0:	46bd      	mov	sp, r7
    e7b2:	bd80      	pop	{r7, pc}
    e7b4:	40000800 	.word	0x40000800
    e7b8:	0000e761 	.word	0x0000e761
    e7bc:	20000578 	.word	0x20000578

0000e7c0 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    e7c0:	b580      	push	{r7, lr}
    e7c2:	b082      	sub	sp, #8
    e7c4:	af00      	add	r7, sp, #0
    e7c6:	0002      	movs	r2, r0
    e7c8:	1dfb      	adds	r3, r7, #7
    e7ca:	701a      	strb	r2, [r3, #0]
	switch (clock_source) {
    e7cc:	1dfb      	adds	r3, r7, #7
    e7ce:	781b      	ldrb	r3, [r3, #0]
    e7d0:	2b08      	cmp	r3, #8
    e7d2:	d840      	bhi.n	e856 <system_clock_source_get_hz+0x96>
    e7d4:	009a      	lsls	r2, r3, #2
    e7d6:	4b22      	ldr	r3, [pc, #136]	; (e860 <system_clock_source_get_hz+0xa0>)
    e7d8:	18d3      	adds	r3, r2, r3
    e7da:	681b      	ldr	r3, [r3, #0]
    e7dc:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_XOSC:
		return _system_clock_inst.xosc.frequency;
    e7de:	4b21      	ldr	r3, [pc, #132]	; (e864 <system_clock_source_get_hz+0xa4>)
    e7e0:	691b      	ldr	r3, [r3, #16]
    e7e2:	e039      	b.n	e858 <system_clock_source_get_hz+0x98>

	case SYSTEM_CLOCK_SOURCE_OSC8M:
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
    e7e4:	4b20      	ldr	r3, [pc, #128]	; (e868 <system_clock_source_get_hz+0xa8>)
    e7e6:	6a1b      	ldr	r3, [r3, #32]
    e7e8:	059b      	lsls	r3, r3, #22
    e7ea:	0f9b      	lsrs	r3, r3, #30
    e7ec:	b2db      	uxtb	r3, r3
    e7ee:	001a      	movs	r2, r3
    e7f0:	4b1e      	ldr	r3, [pc, #120]	; (e86c <system_clock_source_get_hz+0xac>)
    e7f2:	40d3      	lsrs	r3, r2
    e7f4:	e030      	b.n	e858 <system_clock_source_get_hz+0x98>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		return 32768UL;
    e7f6:	2380      	movs	r3, #128	; 0x80
    e7f8:	021b      	lsls	r3, r3, #8
    e7fa:	e02d      	b.n	e858 <system_clock_source_get_hz+0x98>

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		return 32768UL;
    e7fc:	2380      	movs	r3, #128	; 0x80
    e7fe:	021b      	lsls	r3, r3, #8
    e800:	e02a      	b.n	e858 <system_clock_source_get_hz+0x98>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		return _system_clock_inst.xosc32k.frequency;
    e802:	4b18      	ldr	r3, [pc, #96]	; (e864 <system_clock_source_get_hz+0xa4>)
    e804:	695b      	ldr	r3, [r3, #20]
    e806:	e027      	b.n	e858 <system_clock_source_get_hz+0x98>

	case SYSTEM_CLOCK_SOURCE_DFLL:

		/* Check if the DFLL has been configured */
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    e808:	4b16      	ldr	r3, [pc, #88]	; (e864 <system_clock_source_get_hz+0xa4>)
    e80a:	681b      	ldr	r3, [r3, #0]
    e80c:	2202      	movs	r2, #2
    e80e:	4013      	ands	r3, r2
    e810:	d101      	bne.n	e816 <system_clock_source_get_hz+0x56>
			return 0;
    e812:	2300      	movs	r3, #0
    e814:	e020      	b.n	e858 <system_clock_source_get_hz+0x98>

		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();
    e816:	4b16      	ldr	r3, [pc, #88]	; (e870 <system_clock_source_get_hz+0xb0>)
    e818:	4798      	blx	r3

		/* Check if operating in closed loop mode */
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
    e81a:	4b12      	ldr	r3, [pc, #72]	; (e864 <system_clock_source_get_hz+0xa4>)
    e81c:	681b      	ldr	r3, [r3, #0]
    e81e:	2204      	movs	r2, #4
    e820:	4013      	ands	r3, r2
    e822:	d009      	beq.n	e838 <system_clock_source_get_hz+0x78>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    e824:	2000      	movs	r0, #0
    e826:	4b13      	ldr	r3, [pc, #76]	; (e874 <system_clock_source_get_hz+0xb4>)
    e828:	4798      	blx	r3
    e82a:	0002      	movs	r2, r0
					(_system_clock_inst.dfll.mul & 0xffff);
    e82c:	4b0d      	ldr	r3, [pc, #52]	; (e864 <system_clock_source_get_hz+0xa4>)
    e82e:	689b      	ldr	r3, [r3, #8]
    e830:	041b      	lsls	r3, r3, #16
    e832:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    e834:	4353      	muls	r3, r2
    e836:	e00f      	b.n	e858 <system_clock_source_get_hz+0x98>
		}

		return 48000000UL;
    e838:	4b0f      	ldr	r3, [pc, #60]	; (e878 <system_clock_source_get_hz+0xb8>)
    e83a:	e00d      	b.n	e858 <system_clock_source_get_hz+0x98>

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    e83c:	4a0a      	ldr	r2, [pc, #40]	; (e868 <system_clock_source_get_hz+0xa8>)
    e83e:	2350      	movs	r3, #80	; 0x50
    e840:	5cd3      	ldrb	r3, [r2, r3]
    e842:	b2db      	uxtb	r3, r3
    e844:	001a      	movs	r2, r3
    e846:	2304      	movs	r3, #4
    e848:	4013      	ands	r3, r2
    e84a:	d101      	bne.n	e850 <system_clock_source_get_hz+0x90>
			return 0;
    e84c:	2300      	movs	r3, #0
    e84e:	e003      	b.n	e858 <system_clock_source_get_hz+0x98>
		}

		return _system_clock_inst.dpll.frequency;
    e850:	4b04      	ldr	r3, [pc, #16]	; (e864 <system_clock_source_get_hz+0xa4>)
    e852:	68db      	ldr	r3, [r3, #12]
    e854:	e000      	b.n	e858 <system_clock_source_get_hz+0x98>
#endif

	default:
		return 0;
    e856:	2300      	movs	r3, #0
	}
}
    e858:	0018      	movs	r0, r3
    e85a:	46bd      	mov	sp, r7
    e85c:	b002      	add	sp, #8
    e85e:	bd80      	pop	{r7, pc}
    e860:	00020a20 	.word	0x00020a20
    e864:	20000578 	.word	0x20000578
    e868:	40000800 	.word	0x40000800
    e86c:	007a1200 	.word	0x007a1200
    e870:	0000e761 	.word	0x0000e761
    e874:	0000f361 	.word	0x0000f361
    e878:	02dc6c00 	.word	0x02dc6c00

0000e87c <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
    e87c:	b580      	push	{r7, lr}
    e87e:	b084      	sub	sp, #16
    e880:	af00      	add	r7, sp, #0
    e882:	6078      	str	r0, [r7, #4]
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    e884:	4b1a      	ldr	r3, [pc, #104]	; (e8f0 <system_clock_source_osc8m_set_config+0x74>)
    e886:	6a1b      	ldr	r3, [r3, #32]
    e888:	60fb      	str	r3, [r7, #12]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
    e88a:	687b      	ldr	r3, [r7, #4]
    e88c:	781b      	ldrb	r3, [r3, #0]
    e88e:	1c1a      	adds	r2, r3, #0
    e890:	2303      	movs	r3, #3
    e892:	4013      	ands	r3, r2
    e894:	b2da      	uxtb	r2, r3
    e896:	230d      	movs	r3, #13
    e898:	18fb      	adds	r3, r7, r3
    e89a:	2103      	movs	r1, #3
    e89c:	400a      	ands	r2, r1
    e89e:	0010      	movs	r0, r2
    e8a0:	781a      	ldrb	r2, [r3, #0]
    e8a2:	2103      	movs	r1, #3
    e8a4:	438a      	bics	r2, r1
    e8a6:	1c11      	adds	r1, r2, #0
    e8a8:	1c02      	adds	r2, r0, #0
    e8aa:	430a      	orrs	r2, r1
    e8ac:	701a      	strb	r2, [r3, #0]
	temp.bit.ONDEMAND = config->on_demand;
    e8ae:	687b      	ldr	r3, [r7, #4]
    e8b0:	789a      	ldrb	r2, [r3, #2]
    e8b2:	230c      	movs	r3, #12
    e8b4:	18fb      	adds	r3, r7, r3
    e8b6:	01d0      	lsls	r0, r2, #7
    e8b8:	781a      	ldrb	r2, [r3, #0]
    e8ba:	217f      	movs	r1, #127	; 0x7f
    e8bc:	400a      	ands	r2, r1
    e8be:	1c11      	adds	r1, r2, #0
    e8c0:	1c02      	adds	r2, r0, #0
    e8c2:	430a      	orrs	r2, r1
    e8c4:	701a      	strb	r2, [r3, #0]
	temp.bit.RUNSTDBY = config->run_in_standby;
    e8c6:	687b      	ldr	r3, [r7, #4]
    e8c8:	785a      	ldrb	r2, [r3, #1]
    e8ca:	230c      	movs	r3, #12
    e8cc:	18fb      	adds	r3, r7, r3
    e8ce:	2101      	movs	r1, #1
    e8d0:	400a      	ands	r2, r1
    e8d2:	0190      	lsls	r0, r2, #6
    e8d4:	781a      	ldrb	r2, [r3, #0]
    e8d6:	2140      	movs	r1, #64	; 0x40
    e8d8:	438a      	bics	r2, r1
    e8da:	1c11      	adds	r1, r2, #0
    e8dc:	1c02      	adds	r2, r0, #0
    e8de:	430a      	orrs	r2, r1
    e8e0:	701a      	strb	r2, [r3, #0]

	SYSCTRL->OSC8M = temp;
    e8e2:	4b03      	ldr	r3, [pc, #12]	; (e8f0 <system_clock_source_osc8m_set_config+0x74>)
    e8e4:	68fa      	ldr	r2, [r7, #12]
    e8e6:	621a      	str	r2, [r3, #32]
}
    e8e8:	46c0      	nop			; (mov r8, r8)
    e8ea:	46bd      	mov	sp, r7
    e8ec:	b004      	add	sp, #16
    e8ee:	bd80      	pop	{r7, pc}
    e8f0:	40000800 	.word	0x40000800

0000e8f4 <system_clock_source_xosc32k_set_config>:
 *
 * \param[in] config  XOSC32K configuration structure containing the new config
 */
void system_clock_source_xosc32k_set_config(
		struct system_clock_source_xosc32k_config *const config)
{
    e8f4:	b580      	push	{r7, lr}
    e8f6:	b084      	sub	sp, #16
    e8f8:	af00      	add	r7, sp, #0
    e8fa:	6078      	str	r0, [r7, #4]
	SYSCTRL_XOSC32K_Type temp = SYSCTRL->XOSC32K;
    e8fc:	4a43      	ldr	r2, [pc, #268]	; (ea0c <system_clock_source_xosc32k_set_config+0x118>)
    e8fe:	230c      	movs	r3, #12
    e900:	18fb      	adds	r3, r7, r3
    e902:	8a92      	ldrh	r2, [r2, #20]
    e904:	801a      	strh	r2, [r3, #0]

	temp.bit.STARTUP = config->startup_time;
    e906:	687b      	ldr	r3, [r7, #4]
    e908:	785b      	ldrb	r3, [r3, #1]
    e90a:	1c1a      	adds	r2, r3, #0
    e90c:	2307      	movs	r3, #7
    e90e:	4013      	ands	r3, r2
    e910:	b2da      	uxtb	r2, r3
    e912:	230c      	movs	r3, #12
    e914:	18fb      	adds	r3, r7, r3
    e916:	2107      	movs	r1, #7
    e918:	400a      	ands	r2, r1
    e91a:	0010      	movs	r0, r2
    e91c:	785a      	ldrb	r2, [r3, #1]
    e91e:	2107      	movs	r1, #7
    e920:	438a      	bics	r2, r1
    e922:	1c11      	adds	r1, r2, #0
    e924:	1c02      	adds	r2, r0, #0
    e926:	430a      	orrs	r2, r1
    e928:	705a      	strb	r2, [r3, #1]

	if (config->external_clock == SYSTEM_CLOCK_EXTERNAL_CRYSTAL) {
    e92a:	687b      	ldr	r3, [r7, #4]
    e92c:	781b      	ldrb	r3, [r3, #0]
    e92e:	2b00      	cmp	r3, #0
    e930:	d106      	bne.n	e940 <system_clock_source_xosc32k_set_config+0x4c>
		temp.bit.XTALEN = 1;
    e932:	230c      	movs	r3, #12
    e934:	18fb      	adds	r3, r7, r3
    e936:	781a      	ldrb	r2, [r3, #0]
    e938:	2104      	movs	r1, #4
    e93a:	430a      	orrs	r2, r1
    e93c:	701a      	strb	r2, [r3, #0]
    e93e:	e005      	b.n	e94c <system_clock_source_xosc32k_set_config+0x58>
	} else {
		temp.bit.XTALEN = 0;
    e940:	230c      	movs	r3, #12
    e942:	18fb      	adds	r3, r7, r3
    e944:	781a      	ldrb	r2, [r3, #0]
    e946:	2104      	movs	r1, #4
    e948:	438a      	bics	r2, r1
    e94a:	701a      	strb	r2, [r3, #0]
	}

	temp.bit.AAMPEN = config->auto_gain_control;
    e94c:	687b      	ldr	r3, [r7, #4]
    e94e:	789a      	ldrb	r2, [r3, #2]
    e950:	230c      	movs	r3, #12
    e952:	18fb      	adds	r3, r7, r3
    e954:	2101      	movs	r1, #1
    e956:	400a      	ands	r2, r1
    e958:	0150      	lsls	r0, r2, #5
    e95a:	781a      	ldrb	r2, [r3, #0]
    e95c:	2120      	movs	r1, #32
    e95e:	438a      	bics	r2, r1
    e960:	1c11      	adds	r1, r2, #0
    e962:	1c02      	adds	r2, r0, #0
    e964:	430a      	orrs	r2, r1
    e966:	701a      	strb	r2, [r3, #0]
	temp.bit.EN1K = config->enable_1khz_output;
    e968:	687b      	ldr	r3, [r7, #4]
    e96a:	78da      	ldrb	r2, [r3, #3]
    e96c:	230c      	movs	r3, #12
    e96e:	18fb      	adds	r3, r7, r3
    e970:	2101      	movs	r1, #1
    e972:	400a      	ands	r2, r1
    e974:	0110      	lsls	r0, r2, #4
    e976:	781a      	ldrb	r2, [r3, #0]
    e978:	2110      	movs	r1, #16
    e97a:	438a      	bics	r2, r1
    e97c:	1c11      	adds	r1, r2, #0
    e97e:	1c02      	adds	r2, r0, #0
    e980:	430a      	orrs	r2, r1
    e982:	701a      	strb	r2, [r3, #0]
	temp.bit.EN32K = config->enable_32khz_output;
    e984:	687b      	ldr	r3, [r7, #4]
    e986:	791a      	ldrb	r2, [r3, #4]
    e988:	230c      	movs	r3, #12
    e98a:	18fb      	adds	r3, r7, r3
    e98c:	2101      	movs	r1, #1
    e98e:	400a      	ands	r2, r1
    e990:	00d0      	lsls	r0, r2, #3
    e992:	781a      	ldrb	r2, [r3, #0]
    e994:	2108      	movs	r1, #8
    e996:	438a      	bics	r2, r1
    e998:	1c11      	adds	r1, r2, #0
    e99a:	1c02      	adds	r2, r0, #0
    e99c:	430a      	orrs	r2, r1
    e99e:	701a      	strb	r2, [r3, #0]

	temp.bit.ONDEMAND = config->on_demand;
    e9a0:	687b      	ldr	r3, [r7, #4]
    e9a2:	7b5a      	ldrb	r2, [r3, #13]
    e9a4:	230c      	movs	r3, #12
    e9a6:	18fb      	adds	r3, r7, r3
    e9a8:	01d0      	lsls	r0, r2, #7
    e9aa:	781a      	ldrb	r2, [r3, #0]
    e9ac:	217f      	movs	r1, #127	; 0x7f
    e9ae:	400a      	ands	r2, r1
    e9b0:	1c11      	adds	r1, r2, #0
    e9b2:	1c02      	adds	r2, r0, #0
    e9b4:	430a      	orrs	r2, r1
    e9b6:	701a      	strb	r2, [r3, #0]
	temp.bit.RUNSTDBY = config->run_in_standby;
    e9b8:	687b      	ldr	r3, [r7, #4]
    e9ba:	7b1a      	ldrb	r2, [r3, #12]
    e9bc:	230c      	movs	r3, #12
    e9be:	18fb      	adds	r3, r7, r3
    e9c0:	2101      	movs	r1, #1
    e9c2:	400a      	ands	r2, r1
    e9c4:	0190      	lsls	r0, r2, #6
    e9c6:	781a      	ldrb	r2, [r3, #0]
    e9c8:	2140      	movs	r1, #64	; 0x40
    e9ca:	438a      	bics	r2, r1
    e9cc:	1c11      	adds	r1, r2, #0
    e9ce:	1c02      	adds	r2, r0, #0
    e9d0:	430a      	orrs	r2, r1
    e9d2:	701a      	strb	r2, [r3, #0]
	temp.bit.WRTLOCK  = config->write_once;
    e9d4:	687b      	ldr	r3, [r7, #4]
    e9d6:	7b9a      	ldrb	r2, [r3, #14]
    e9d8:	230c      	movs	r3, #12
    e9da:	18fb      	adds	r3, r7, r3
    e9dc:	2101      	movs	r1, #1
    e9de:	400a      	ands	r2, r1
    e9e0:	0110      	lsls	r0, r2, #4
    e9e2:	785a      	ldrb	r2, [r3, #1]
    e9e4:	2110      	movs	r1, #16
    e9e6:	438a      	bics	r2, r1
    e9e8:	1c11      	adds	r1, r2, #0
    e9ea:	1c02      	adds	r2, r0, #0
    e9ec:	430a      	orrs	r2, r1
    e9ee:	705a      	strb	r2, [r3, #1]

	/* Cache the new frequency in case the user needs to check the current
	 * operating frequency later */
	_system_clock_inst.xosc32k.frequency = config->frequency;
    e9f0:	687b      	ldr	r3, [r7, #4]
    e9f2:	689a      	ldr	r2, [r3, #8]
    e9f4:	4b06      	ldr	r3, [pc, #24]	; (ea10 <system_clock_source_xosc32k_set_config+0x11c>)
    e9f6:	615a      	str	r2, [r3, #20]

	SYSCTRL->XOSC32K = temp;
    e9f8:	4a04      	ldr	r2, [pc, #16]	; (ea0c <system_clock_source_xosc32k_set_config+0x118>)
    e9fa:	230c      	movs	r3, #12
    e9fc:	18fb      	adds	r3, r7, r3
    e9fe:	881b      	ldrh	r3, [r3, #0]
    ea00:	8293      	strh	r3, [r2, #20]
}
    ea02:	46c0      	nop			; (mov r8, r8)
    ea04:	46bd      	mov	sp, r7
    ea06:	b004      	add	sp, #16
    ea08:	bd80      	pop	{r7, pc}
    ea0a:	46c0      	nop			; (mov r8, r8)
    ea0c:	40000800 	.word	0x40000800
    ea10:	20000578 	.word	0x20000578

0000ea14 <system_clock_source_dfll_set_config>:
 *
 * \param[in] config  DFLL configuration structure containing the new config
 */
void system_clock_source_dfll_set_config(
		struct system_clock_source_dfll_config *const config)
{
    ea14:	b580      	push	{r7, lr}
    ea16:	b082      	sub	sp, #8
    ea18:	af00      	add	r7, sp, #0
    ea1a:	6078      	str	r0, [r7, #4]
	_system_clock_inst.dfll.val =
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    ea1c:	687b      	ldr	r3, [r7, #4]
    ea1e:	7a1b      	ldrb	r3, [r3, #8]
    ea20:	029b      	lsls	r3, r3, #10
    ea22:	041b      	lsls	r3, r3, #16
    ea24:	0c1a      	lsrs	r2, r3, #16
			SYSCTRL_DFLLVAL_FINE(config->fine_value);
    ea26:	687b      	ldr	r3, [r7, #4]
    ea28:	895b      	ldrh	r3, [r3, #10]
    ea2a:	059b      	lsls	r3, r3, #22
    ea2c:	0d9b      	lsrs	r3, r3, #22
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    ea2e:	431a      	orrs	r2, r3
	_system_clock_inst.dfll.val =
    ea30:	4b2a      	ldr	r3, [pc, #168]	; (eadc <system_clock_source_dfll_set_config+0xc8>)
    ea32:	605a      	str	r2, [r3, #4]

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
    ea34:	687b      	ldr	r3, [r7, #4]
    ea36:	799a      	ldrb	r2, [r3, #6]
			(uint32_t)config->stable_tracking |
    ea38:	687b      	ldr	r3, [r7, #4]
    ea3a:	79db      	ldrb	r3, [r3, #7]
			(uint32_t)config->wakeup_lock     |
    ea3c:	4313      	orrs	r3, r2
    ea3e:	b2db      	uxtb	r3, r3
    ea40:	001a      	movs	r2, r3
			(uint32_t)config->quick_lock      |
    ea42:	687b      	ldr	r3, [r7, #4]
    ea44:	885b      	ldrh	r3, [r3, #2]
			(uint32_t)config->stable_tracking |
    ea46:	4313      	orrs	r3, r2
			(uint32_t)config->chill_cycle     |
    ea48:	687a      	ldr	r2, [r7, #4]
    ea4a:	8892      	ldrh	r2, [r2, #4]
			(uint32_t)config->quick_lock      |
    ea4c:	431a      	orrs	r2, r3
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);
    ea4e:	687b      	ldr	r3, [r7, #4]
    ea50:	785b      	ldrb	r3, [r3, #1]
    ea52:	01db      	lsls	r3, r3, #7
			(uint32_t)config->chill_cycle     |
    ea54:	431a      	orrs	r2, r3
	_system_clock_inst.dfll.control =
    ea56:	4b21      	ldr	r3, [pc, #132]	; (eadc <system_clock_source_dfll_set_config+0xc8>)
    ea58:	601a      	str	r2, [r3, #0]

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
    ea5a:	687b      	ldr	r3, [r7, #4]
    ea5c:	781b      	ldrb	r3, [r3, #0]
    ea5e:	2b04      	cmp	r3, #4
    ea60:	d116      	bne.n	ea90 <system_clock_source_dfll_set_config+0x7c>

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    ea62:	687b      	ldr	r3, [r7, #4]
    ea64:	7b1b      	ldrb	r3, [r3, #12]
    ea66:	069b      	lsls	r3, r3, #26
    ea68:	001a      	movs	r2, r3
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    ea6a:	687b      	ldr	r3, [r7, #4]
    ea6c:	89db      	ldrh	r3, [r3, #14]
    ea6e:	041b      	lsls	r3, r3, #16
    ea70:	0019      	movs	r1, r3
    ea72:	4b1b      	ldr	r3, [pc, #108]	; (eae0 <system_clock_source_dfll_set_config+0xcc>)
    ea74:	400b      	ands	r3, r1
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    ea76:	4313      	orrs	r3, r2
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    ea78:	687a      	ldr	r2, [r7, #4]
    ea7a:	8a12      	ldrh	r2, [r2, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    ea7c:	431a      	orrs	r2, r3
		_system_clock_inst.dfll.mul =
    ea7e:	4b17      	ldr	r3, [pc, #92]	; (eadc <system_clock_source_dfll_set_config+0xc8>)
    ea80:	609a      	str	r2, [r3, #8]

		/* Enable the closed loop mode */
		_system_clock_inst.dfll.control |= config->loop_mode;
    ea82:	4b16      	ldr	r3, [pc, #88]	; (eadc <system_clock_source_dfll_set_config+0xc8>)
    ea84:	681b      	ldr	r3, [r3, #0]
    ea86:	687a      	ldr	r2, [r7, #4]
    ea88:	7812      	ldrb	r2, [r2, #0]
    ea8a:	431a      	orrs	r2, r3
    ea8c:	4b13      	ldr	r3, [pc, #76]	; (eadc <system_clock_source_dfll_set_config+0xc8>)
    ea8e:	601a      	str	r2, [r3, #0]
	}
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {
    ea90:	687b      	ldr	r3, [r7, #4]
    ea92:	781b      	ldrb	r3, [r3, #0]
    ea94:	2b20      	cmp	r3, #32
    ea96:	d11c      	bne.n	ead2 <system_clock_source_dfll_set_config+0xbe>

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    ea98:	687b      	ldr	r3, [r7, #4]
    ea9a:	7b1b      	ldrb	r3, [r3, #12]
    ea9c:	069b      	lsls	r3, r3, #26
    ea9e:	001a      	movs	r2, r3
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    eaa0:	687b      	ldr	r3, [r7, #4]
    eaa2:	89db      	ldrh	r3, [r3, #14]
    eaa4:	041b      	lsls	r3, r3, #16
    eaa6:	0019      	movs	r1, r3
    eaa8:	4b0d      	ldr	r3, [pc, #52]	; (eae0 <system_clock_source_dfll_set_config+0xcc>)
    eaaa:	400b      	ands	r3, r1
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    eaac:	4313      	orrs	r3, r2
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    eaae:	687a      	ldr	r2, [r7, #4]
    eab0:	8a12      	ldrh	r2, [r2, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    eab2:	431a      	orrs	r2, r3
		_system_clock_inst.dfll.mul =
    eab4:	4b09      	ldr	r3, [pc, #36]	; (eadc <system_clock_source_dfll_set_config+0xc8>)
    eab6:	609a      	str	r2, [r3, #8]

		/* Enable the USB recovery mode */
		_system_clock_inst.dfll.control |= config->loop_mode |
    eab8:	4b08      	ldr	r3, [pc, #32]	; (eadc <system_clock_source_dfll_set_config+0xc8>)
    eaba:	681b      	ldr	r3, [r3, #0]
    eabc:	687a      	ldr	r2, [r7, #4]
    eabe:	7812      	ldrb	r2, [r2, #0]
    eac0:	2104      	movs	r1, #4
    eac2:	430a      	orrs	r2, r1
    eac4:	b2d2      	uxtb	r2, r2
    eac6:	4313      	orrs	r3, r2
    eac8:	2280      	movs	r2, #128	; 0x80
    eaca:	00d2      	lsls	r2, r2, #3
    eacc:	431a      	orrs	r2, r3
    eace:	4b03      	ldr	r3, [pc, #12]	; (eadc <system_clock_source_dfll_set_config+0xc8>)
    ead0:	601a      	str	r2, [r3, #0]
				SYSCTRL_DFLLCTRL_MODE | SYSCTRL_DFLLCTRL_BPLCKC;
	}
}
    ead2:	46c0      	nop			; (mov r8, r8)
    ead4:	46bd      	mov	sp, r7
    ead6:	b002      	add	sp, #8
    ead8:	bd80      	pop	{r7, pc}
    eada:	46c0      	nop			; (mov r8, r8)
    eadc:	20000578 	.word	0x20000578
    eae0:	03ff0000 	.word	0x03ff0000

0000eae4 <system_clock_source_enable>:
 * \retval STATUS_ERR_INVALID_ARG  The clock source is not available on this
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
    eae4:	b580      	push	{r7, lr}
    eae6:	b082      	sub	sp, #8
    eae8:	af00      	add	r7, sp, #0
    eaea:	0002      	movs	r2, r0
    eaec:	1dfb      	adds	r3, r7, #7
    eaee:	701a      	strb	r2, [r3, #0]
	switch (clock_source) {
    eaf0:	1dfb      	adds	r3, r7, #7
    eaf2:	781b      	ldrb	r3, [r3, #0]
    eaf4:	2b08      	cmp	r3, #8
    eaf6:	d83b      	bhi.n	eb70 <system_clock_source_enable+0x8c>
    eaf8:	009a      	lsls	r2, r3, #2
    eafa:	4b21      	ldr	r3, [pc, #132]	; (eb80 <system_clock_source_enable+0x9c>)
    eafc:	18d3      	adds	r3, r2, r3
    eafe:	681b      	ldr	r3, [r3, #0]
    eb00:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_OSC8M:
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    eb02:	4b20      	ldr	r3, [pc, #128]	; (eb84 <system_clock_source_enable+0xa0>)
    eb04:	4a1f      	ldr	r2, [pc, #124]	; (eb84 <system_clock_source_enable+0xa0>)
    eb06:	6a12      	ldr	r2, [r2, #32]
    eb08:	2102      	movs	r1, #2
    eb0a:	430a      	orrs	r2, r1
    eb0c:	621a      	str	r2, [r3, #32]
		return STATUS_OK;
    eb0e:	2300      	movs	r3, #0
    eb10:	e031      	b.n	eb76 <system_clock_source_enable+0x92>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    eb12:	4b1c      	ldr	r3, [pc, #112]	; (eb84 <system_clock_source_enable+0xa0>)
    eb14:	4a1b      	ldr	r2, [pc, #108]	; (eb84 <system_clock_source_enable+0xa0>)
    eb16:	6992      	ldr	r2, [r2, #24]
    eb18:	2102      	movs	r1, #2
    eb1a:	430a      	orrs	r2, r1
    eb1c:	619a      	str	r2, [r3, #24]
		break;
    eb1e:	e029      	b.n	eb74 <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    eb20:	4a18      	ldr	r2, [pc, #96]	; (eb84 <system_clock_source_enable+0xa0>)
    eb22:	4b18      	ldr	r3, [pc, #96]	; (eb84 <system_clock_source_enable+0xa0>)
    eb24:	8a1b      	ldrh	r3, [r3, #16]
    eb26:	b29b      	uxth	r3, r3
    eb28:	2102      	movs	r1, #2
    eb2a:	430b      	orrs	r3, r1
    eb2c:	b29b      	uxth	r3, r3
    eb2e:	8213      	strh	r3, [r2, #16]
		break;
    eb30:	e020      	b.n	eb74 <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    eb32:	4a14      	ldr	r2, [pc, #80]	; (eb84 <system_clock_source_enable+0xa0>)
    eb34:	4b13      	ldr	r3, [pc, #76]	; (eb84 <system_clock_source_enable+0xa0>)
    eb36:	8a9b      	ldrh	r3, [r3, #20]
    eb38:	b29b      	uxth	r3, r3
    eb3a:	2102      	movs	r1, #2
    eb3c:	430b      	orrs	r3, r1
    eb3e:	b29b      	uxth	r3, r3
    eb40:	8293      	strh	r3, [r2, #20]
		break;
    eb42:	e017      	b.n	eb74 <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_DFLL:
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    eb44:	4b10      	ldr	r3, [pc, #64]	; (eb88 <system_clock_source_enable+0xa4>)
    eb46:	681b      	ldr	r3, [r3, #0]
    eb48:	2202      	movs	r2, #2
    eb4a:	431a      	orrs	r2, r3
    eb4c:	4b0e      	ldr	r3, [pc, #56]	; (eb88 <system_clock_source_enable+0xa4>)
    eb4e:	601a      	str	r2, [r3, #0]
		_system_clock_source_dfll_set_config_errata_9905();
    eb50:	4b0e      	ldr	r3, [pc, #56]	; (eb8c <system_clock_source_enable+0xa8>)
    eb52:	4798      	blx	r3
		break;
    eb54:	e00e      	b.n	eb74 <system_clock_source_enable+0x90>

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
    eb56:	4a0b      	ldr	r2, [pc, #44]	; (eb84 <system_clock_source_enable+0xa0>)
    eb58:	490a      	ldr	r1, [pc, #40]	; (eb84 <system_clock_source_enable+0xa0>)
    eb5a:	2344      	movs	r3, #68	; 0x44
    eb5c:	5ccb      	ldrb	r3, [r1, r3]
    eb5e:	b2db      	uxtb	r3, r3
    eb60:	2102      	movs	r1, #2
    eb62:	430b      	orrs	r3, r1
    eb64:	b2d9      	uxtb	r1, r3
    eb66:	2344      	movs	r3, #68	; 0x44
    eb68:	54d1      	strb	r1, [r2, r3]
		break;
    eb6a:	e003      	b.n	eb74 <system_clock_source_enable+0x90>
#endif

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Always enabled */
		return STATUS_OK;
    eb6c:	2300      	movs	r3, #0
    eb6e:	e002      	b.n	eb76 <system_clock_source_enable+0x92>

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    eb70:	2317      	movs	r3, #23
    eb72:	e000      	b.n	eb76 <system_clock_source_enable+0x92>
	}

	return STATUS_OK;
    eb74:	2300      	movs	r3, #0
}
    eb76:	0018      	movs	r0, r3
    eb78:	46bd      	mov	sp, r7
    eb7a:	b002      	add	sp, #8
    eb7c:	bd80      	pop	{r7, pc}
    eb7e:	46c0      	nop			; (mov r8, r8)
    eb80:	00020a44 	.word	0x00020a44
    eb84:	40000800 	.word	0x40000800
    eb88:	20000578 	.word	0x20000578
    eb8c:	0000e77d 	.word	0x0000e77d

0000eb90 <system_clock_source_is_ready>:
 * \retval true   Clock source is enabled and ready
 * \retval false  Clock source is disabled or not yet ready
 */
bool system_clock_source_is_ready(
		const enum system_clock_source clock_source)
{
    eb90:	b580      	push	{r7, lr}
    eb92:	b084      	sub	sp, #16
    eb94:	af00      	add	r7, sp, #0
    eb96:	0002      	movs	r2, r0
    eb98:	1dfb      	adds	r3, r7, #7
    eb9a:	701a      	strb	r2, [r3, #0]
	uint32_t mask = 0;
    eb9c:	2300      	movs	r3, #0
    eb9e:	60fb      	str	r3, [r7, #12]

	switch (clock_source) {
    eba0:	1dfb      	adds	r3, r7, #7
    eba2:	781b      	ldrb	r3, [r3, #0]
    eba4:	2b08      	cmp	r3, #8
    eba6:	d821      	bhi.n	ebec <system_clock_source_is_ready+0x5c>
    eba8:	009a      	lsls	r2, r3, #2
    ebaa:	4b18      	ldr	r3, [pc, #96]	; (ec0c <system_clock_source_is_ready+0x7c>)
    ebac:	18d3      	adds	r3, r2, r3
    ebae:	681b      	ldr	r3, [r3, #0]
    ebb0:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_OSC8M:
		mask = SYSCTRL_PCLKSR_OSC8MRDY;
    ebb2:	2308      	movs	r3, #8
    ebb4:	60fb      	str	r3, [r7, #12]
		break;
    ebb6:	e01b      	b.n	ebf0 <system_clock_source_is_ready+0x60>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		mask = SYSCTRL_PCLKSR_OSC32KRDY;
    ebb8:	2304      	movs	r3, #4
    ebba:	60fb      	str	r3, [r7, #12]
		break;
    ebbc:	e018      	b.n	ebf0 <system_clock_source_is_ready+0x60>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		mask = SYSCTRL_PCLKSR_XOSCRDY;
    ebbe:	2301      	movs	r3, #1
    ebc0:	60fb      	str	r3, [r7, #12]
		break;
    ebc2:	e015      	b.n	ebf0 <system_clock_source_is_ready+0x60>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		mask = SYSCTRL_PCLKSR_XOSC32KRDY;
    ebc4:	2302      	movs	r3, #2
    ebc6:	60fb      	str	r3, [r7, #12]
		break;
    ebc8:	e012      	b.n	ebf0 <system_clock_source_is_ready+0x60>

	case SYSTEM_CLOCK_SOURCE_DFLL:
		if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
			mask = (SYSCTRL_PCLKSR_DFLLRDY |
    ebca:	23d0      	movs	r3, #208	; 0xd0
    ebcc:	60fb      	str	r3, [r7, #12]
			        SYSCTRL_PCLKSR_DFLLLCKF | SYSCTRL_PCLKSR_DFLLLCKC);
		} else {
			mask = SYSCTRL_PCLKSR_DFLLRDY;
		}
		break;
    ebce:	e00f      	b.n	ebf0 <system_clock_source_is_ready+0x60>

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		return ((SYSCTRL->DPLLSTATUS.reg &
    ebd0:	4a0f      	ldr	r2, [pc, #60]	; (ec10 <system_clock_source_is_ready+0x80>)
    ebd2:	2350      	movs	r3, #80	; 0x50
    ebd4:	5cd3      	ldrb	r3, [r2, r3]
    ebd6:	b2db      	uxtb	r3, r3
    ebd8:	001a      	movs	r2, r3
    ebda:	2303      	movs	r3, #3
    ebdc:	4013      	ands	r3, r2
				(SYSCTRL_DPLLSTATUS_CLKRDY | SYSCTRL_DPLLSTATUS_LOCK)) ==
    ebde:	3b03      	subs	r3, #3
    ebe0:	425a      	negs	r2, r3
    ebe2:	4153      	adcs	r3, r2
    ebe4:	b2db      	uxtb	r3, r3
    ebe6:	e00c      	b.n	ec02 <system_clock_source_is_ready+0x72>
				(SYSCTRL_DPLLSTATUS_CLKRDY | SYSCTRL_DPLLSTATUS_LOCK));
#endif

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Not possible to disable */
		return true;
    ebe8:	2301      	movs	r3, #1
    ebea:	e00a      	b.n	ec02 <system_clock_source_is_ready+0x72>

	default:
		return false;
    ebec:	2300      	movs	r3, #0
    ebee:	e008      	b.n	ec02 <system_clock_source_is_ready+0x72>
	}

	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    ebf0:	4b07      	ldr	r3, [pc, #28]	; (ec10 <system_clock_source_is_ready+0x80>)
    ebf2:	68db      	ldr	r3, [r3, #12]
    ebf4:	68fa      	ldr	r2, [r7, #12]
    ebf6:	401a      	ands	r2, r3
    ebf8:	68fb      	ldr	r3, [r7, #12]
    ebfa:	1ad3      	subs	r3, r2, r3
    ebfc:	425a      	negs	r2, r3
    ebfe:	4153      	adcs	r3, r2
    ec00:	b2db      	uxtb	r3, r3
}
    ec02:	0018      	movs	r0, r3
    ec04:	46bd      	mov	sp, r7
    ec06:	b004      	add	sp, #16
    ec08:	bd80      	pop	{r7, pc}
    ec0a:	46c0      	nop			; (mov r8, r8)
    ec0c:	00020a68 	.word	0x00020a68
    ec10:	40000800 	.word	0x40000800

0000ec14 <_switch_peripheral_gclk>:
 *
 * Switch all peripheral clock to a not enabled general clock
 * to save power.
 */
static void _switch_peripheral_gclk(void)
{
    ec14:	b580      	push	{r7, lr}
    ec16:	b082      	sub	sp, #8
    ec18:	af00      	add	r7, sp, #0
#if CONF_CLOCK_GCLK_1_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_1;
#elif CONF_CLOCK_GCLK_2_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_2;
#elif CONF_CLOCK_GCLK_3_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_3;
    ec1a:	003b      	movs	r3, r7
    ec1c:	2203      	movs	r2, #3
    ec1e:	701a      	strb	r2, [r3, #0]
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#else
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#endif

	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    ec20:	2300      	movs	r3, #0
    ec22:	607b      	str	r3, [r7, #4]
    ec24:	e009      	b.n	ec3a <_switch_peripheral_gclk+0x26>
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    ec26:	687b      	ldr	r3, [r7, #4]
    ec28:	b2db      	uxtb	r3, r3
    ec2a:	003a      	movs	r2, r7
    ec2c:	0011      	movs	r1, r2
    ec2e:	0018      	movs	r0, r3
    ec30:	4b05      	ldr	r3, [pc, #20]	; (ec48 <_switch_peripheral_gclk+0x34>)
    ec32:	4798      	blx	r3
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    ec34:	687b      	ldr	r3, [r7, #4]
    ec36:	3301      	adds	r3, #1
    ec38:	607b      	str	r3, [r7, #4]
    ec3a:	687b      	ldr	r3, [r7, #4]
    ec3c:	2b24      	cmp	r3, #36	; 0x24
    ec3e:	d9f2      	bls.n	ec26 <_switch_peripheral_gclk+0x12>
	}
}
    ec40:	46c0      	nop			; (mov r8, r8)
    ec42:	46bd      	mov	sp, r7
    ec44:	b002      	add	sp, #8
    ec46:	bd80      	pop	{r7, pc}
    ec48:	0000f23d 	.word	0x0000f23d

0000ec4c <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    ec4c:	b580      	push	{r7, lr}
    ec4e:	b0aa      	sub	sp, #168	; 0xa8
    ec50:	af00      	add	r7, sp, #0
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    ec52:	4b99      	ldr	r3, [pc, #612]	; (eeb8 <system_clock_init+0x26c>)
    ec54:	22c2      	movs	r2, #194	; 0xc2
    ec56:	00d2      	lsls	r2, r2, #3
    ec58:	609a      	str	r2, [r3, #8]
			SYSCTRL_INTFLAG_DFLLRDY;

	system_flash_set_waitstates(CONF_CLOCK_FLASH_WAIT_STATES);
    ec5a:	2002      	movs	r0, #2
    ec5c:	4b97      	ldr	r3, [pc, #604]	; (eebc <system_clock_init+0x270>)
    ec5e:	4798      	blx	r3

	/* Switch all peripheral clock to a not enabled general clock to save power. */
	_switch_peripheral_gclk();
    ec60:	4b97      	ldr	r3, [pc, #604]	; (eec0 <system_clock_init+0x274>)
    ec62:	4798      	blx	r3


	/* XOSC32K */
#if CONF_CLOCK_XOSC32K_ENABLE == true
	struct system_clock_source_xosc32k_config xosc32k_conf;
	system_clock_source_xosc32k_get_config_defaults(&xosc32k_conf);
    ec64:	2394      	movs	r3, #148	; 0x94
    ec66:	18fb      	adds	r3, r7, r3
    ec68:	0018      	movs	r0, r3
    ec6a:	4b96      	ldr	r3, [pc, #600]	; (eec4 <system_clock_init+0x278>)
    ec6c:	4798      	blx	r3

	xosc32k_conf.frequency           = 32768UL;
    ec6e:	2394      	movs	r3, #148	; 0x94
    ec70:	18fb      	adds	r3, r7, r3
    ec72:	2280      	movs	r2, #128	; 0x80
    ec74:	0212      	lsls	r2, r2, #8
    ec76:	609a      	str	r2, [r3, #8]
	xosc32k_conf.external_clock      = CONF_CLOCK_XOSC32K_EXTERNAL_CRYSTAL;
    ec78:	2394      	movs	r3, #148	; 0x94
    ec7a:	18fb      	adds	r3, r7, r3
    ec7c:	2200      	movs	r2, #0
    ec7e:	701a      	strb	r2, [r3, #0]
	xosc32k_conf.startup_time        = CONF_CLOCK_XOSC32K_STARTUP_TIME;
    ec80:	2394      	movs	r3, #148	; 0x94
    ec82:	18fb      	adds	r3, r7, r3
    ec84:	2203      	movs	r2, #3
    ec86:	705a      	strb	r2, [r3, #1]
	xosc32k_conf.auto_gain_control   = CONF_CLOCK_XOSC32K_AUTO_AMPLITUDE_CONTROL;
    ec88:	2394      	movs	r3, #148	; 0x94
    ec8a:	18fb      	adds	r3, r7, r3
    ec8c:	2200      	movs	r2, #0
    ec8e:	709a      	strb	r2, [r3, #2]
	xosc32k_conf.enable_1khz_output  = CONF_CLOCK_XOSC32K_ENABLE_1KHZ_OUPUT;
    ec90:	2394      	movs	r3, #148	; 0x94
    ec92:	18fb      	adds	r3, r7, r3
    ec94:	2200      	movs	r2, #0
    ec96:	70da      	strb	r2, [r3, #3]
	xosc32k_conf.enable_32khz_output = CONF_CLOCK_XOSC32K_ENABLE_32KHZ_OUTPUT;
    ec98:	2394      	movs	r3, #148	; 0x94
    ec9a:	18fb      	adds	r3, r7, r3
    ec9c:	2201      	movs	r2, #1
    ec9e:	711a      	strb	r2, [r3, #4]
	xosc32k_conf.on_demand           = false;
    eca0:	2394      	movs	r3, #148	; 0x94
    eca2:	18fb      	adds	r3, r7, r3
    eca4:	2200      	movs	r2, #0
    eca6:	735a      	strb	r2, [r3, #13]
	xosc32k_conf.run_in_standby      = CONF_CLOCK_XOSC32K_RUN_IN_STANDBY;
    eca8:	2394      	movs	r3, #148	; 0x94
    ecaa:	18fb      	adds	r3, r7, r3
    ecac:	2200      	movs	r2, #0
    ecae:	731a      	strb	r2, [r3, #12]

	system_clock_source_xosc32k_set_config(&xosc32k_conf);
    ecb0:	2394      	movs	r3, #148	; 0x94
    ecb2:	18fb      	adds	r3, r7, r3
    ecb4:	0018      	movs	r0, r3
    ecb6:	4b84      	ldr	r3, [pc, #528]	; (eec8 <system_clock_init+0x27c>)
    ecb8:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_XOSC32K);
    ecba:	2005      	movs	r0, #5
    ecbc:	4b83      	ldr	r3, [pc, #524]	; (eecc <system_clock_init+0x280>)
    ecbe:	4798      	blx	r3
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_XOSC32K));
    ecc0:	46c0      	nop			; (mov r8, r8)
    ecc2:	2005      	movs	r0, #5
    ecc4:	4b82      	ldr	r3, [pc, #520]	; (eed0 <system_clock_init+0x284>)
    ecc6:	4798      	blx	r3
    ecc8:	0003      	movs	r3, r0
    ecca:	001a      	movs	r2, r3
    eccc:	2301      	movs	r3, #1
    ecce:	4053      	eors	r3, r2
    ecd0:	b2db      	uxtb	r3, r3
    ecd2:	2b00      	cmp	r3, #0
    ecd4:	d1f5      	bne.n	ecc2 <system_clock_init+0x76>
	if (CONF_CLOCK_XOSC32K_ON_DEMAND) {
		SYSCTRL->XOSC32K.bit.ONDEMAND = 1;
    ecd6:	4a78      	ldr	r2, [pc, #480]	; (eeb8 <system_clock_init+0x26c>)
    ecd8:	8a93      	ldrh	r3, [r2, #20]
    ecda:	2180      	movs	r1, #128	; 0x80
    ecdc:	430b      	orrs	r3, r1
    ecde:	8293      	strh	r3, [r2, #20]


	/* DFLL Config (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	struct system_clock_source_dfll_config dfll_conf;
	system_clock_source_dfll_get_config_defaults(&dfll_conf);
    ece0:	2380      	movs	r3, #128	; 0x80
    ece2:	18fb      	adds	r3, r7, r3
    ece4:	0018      	movs	r0, r3
    ece6:	4b7b      	ldr	r3, [pc, #492]	; (eed4 <system_clock_init+0x288>)
    ece8:	4798      	blx	r3

	dfll_conf.loop_mode      = CONF_CLOCK_DFLL_LOOP_MODE;
    ecea:	2380      	movs	r3, #128	; 0x80
    ecec:	18fb      	adds	r3, r7, r3
    ecee:	2204      	movs	r2, #4
    ecf0:	701a      	strb	r2, [r3, #0]
	dfll_conf.on_demand      = false;
    ecf2:	2380      	movs	r3, #128	; 0x80
    ecf4:	18fb      	adds	r3, r7, r3
    ecf6:	2200      	movs	r2, #0
    ecf8:	705a      	strb	r2, [r3, #1]
	/* Using DFLL48M COARSE CAL value from NVM Software Calibration Area Mapping 
	   in DFLL.COARSE helps to output a frequency close to 48 MHz.*/
#define NVM_DFLL_COARSE_POS    58 /* DFLL48M Coarse calibration value bit position.*/
#define NVM_DFLL_COARSE_SIZE   6  /* DFLL48M Coarse calibration value bit size.*/

	uint32_t coarse =( *((uint32_t *)(NVMCTRL_OTP4)
    ecfa:	4b77      	ldr	r3, [pc, #476]	; (eed8 <system_clock_init+0x28c>)
    ecfc:	681b      	ldr	r3, [r3, #0]
    ecfe:	0e9b      	lsrs	r3, r3, #26
    ed00:	22a4      	movs	r2, #164	; 0xa4
    ed02:	18ba      	adds	r2, r7, r2
    ed04:	6013      	str	r3, [r2, #0]
			+ (NVM_DFLL_COARSE_POS / 32))
		>> (NVM_DFLL_COARSE_POS % 32))
		& ((1 << NVM_DFLL_COARSE_SIZE) - 1);
	/* In some revision chip, the coarse calibration value is not correct. */
	if (coarse == 0x3f) {
    ed06:	23a4      	movs	r3, #164	; 0xa4
    ed08:	18fb      	adds	r3, r7, r3
    ed0a:	681b      	ldr	r3, [r3, #0]
    ed0c:	2b3f      	cmp	r3, #63	; 0x3f
    ed0e:	d103      	bne.n	ed18 <system_clock_init+0xcc>
		coarse = 0x1f;
    ed10:	231f      	movs	r3, #31
    ed12:	22a4      	movs	r2, #164	; 0xa4
    ed14:	18ba      	adds	r2, r7, r2
    ed16:	6013      	str	r3, [r2, #0]
	}
	dfll_conf.coarse_value = coarse;
    ed18:	23a4      	movs	r3, #164	; 0xa4
    ed1a:	18fb      	adds	r3, r7, r3
    ed1c:	681b      	ldr	r3, [r3, #0]
    ed1e:	b2da      	uxtb	r2, r3
    ed20:	2380      	movs	r3, #128	; 0x80
    ed22:	18fb      	adds	r3, r7, r3
    ed24:	721a      	strb	r2, [r3, #8]
	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_OPEN) {
		dfll_conf.fine_value   = CONF_CLOCK_DFLL_FINE_VALUE;
	}

#  if CONF_CLOCK_DFLL_QUICK_LOCK == true
	dfll_conf.quick_lock = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
    ed26:	2380      	movs	r3, #128	; 0x80
    ed28:	18fb      	adds	r3, r7, r3
    ed2a:	2200      	movs	r2, #0
    ed2c:	805a      	strh	r2, [r3, #2]
#  else
	dfll_conf.quick_lock = SYSTEM_CLOCK_DFLL_QUICK_LOCK_DISABLE;
#  endif

#  if CONF_CLOCK_DFLL_TRACK_AFTER_FINE_LOCK == true
	dfll_conf.stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
    ed2e:	2380      	movs	r3, #128	; 0x80
    ed30:	18fb      	adds	r3, r7, r3
    ed32:	2200      	movs	r2, #0
    ed34:	71da      	strb	r2, [r3, #7]
#  else
	dfll_conf.stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_FIX_AFTER_LOCK;
#  endif

#  if CONF_CLOCK_DFLL_KEEP_LOCK_ON_WAKEUP == true
	dfll_conf.wakeup_lock = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
    ed36:	2380      	movs	r3, #128	; 0x80
    ed38:	18fb      	adds	r3, r7, r3
    ed3a:	2200      	movs	r2, #0
    ed3c:	719a      	strb	r2, [r3, #6]
#  else
	dfll_conf.wakeup_lock = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_LOSE;
#  endif

#  if CONF_CLOCK_DFLL_ENABLE_CHILL_CYCLE == true
	dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_ENABLE;
    ed3e:	2380      	movs	r3, #128	; 0x80
    ed40:	18fb      	adds	r3, r7, r3
    ed42:	2200      	movs	r2, #0
    ed44:	809a      	strh	r2, [r3, #4]
#  else
	dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;
#  endif

	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		dfll_conf.multiply_factor = CONF_CLOCK_DFLL_MULTIPLY_FACTOR;
    ed46:	2380      	movs	r3, #128	; 0x80
    ed48:	18fb      	adds	r3, r7, r3
    ed4a:	4a64      	ldr	r2, [pc, #400]	; (eedc <system_clock_init+0x290>)
    ed4c:	821a      	strh	r2, [r3, #16]
	}

	dfll_conf.coarse_max_step = CONF_CLOCK_DFLL_MAX_COARSE_STEP_SIZE;
    ed4e:	2380      	movs	r3, #128	; 0x80
    ed50:	18fb      	adds	r3, r7, r3
    ed52:	2207      	movs	r2, #7
    ed54:	731a      	strb	r2, [r3, #12]
	dfll_conf.fine_max_step   = CONF_CLOCK_DFLL_MAX_FINE_STEP_SIZE;
    ed56:	2380      	movs	r3, #128	; 0x80
    ed58:	18fb      	adds	r3, r7, r3
    ed5a:	223f      	movs	r2, #63	; 0x3f
    ed5c:	81da      	strh	r2, [r3, #14]
		dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;

		dfll_conf.multiply_factor = 48000;
	}

	system_clock_source_dfll_set_config(&dfll_conf);
    ed5e:	2380      	movs	r3, #128	; 0x80
    ed60:	18fb      	adds	r3, r7, r3
    ed62:	0018      	movs	r0, r3
    ed64:	4b5e      	ldr	r3, [pc, #376]	; (eee0 <system_clock_init+0x294>)
    ed66:	4798      	blx	r3
#endif


	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);
    ed68:	237c      	movs	r3, #124	; 0x7c
    ed6a:	18fb      	adds	r3, r7, r3
    ed6c:	0018      	movs	r0, r3
    ed6e:	4b5d      	ldr	r3, [pc, #372]	; (eee4 <system_clock_init+0x298>)
    ed70:	4798      	blx	r3

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    ed72:	237c      	movs	r3, #124	; 0x7c
    ed74:	18fb      	adds	r3, r7, r3
    ed76:	2200      	movs	r2, #0
    ed78:	701a      	strb	r2, [r3, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
    ed7a:	237c      	movs	r3, #124	; 0x7c
    ed7c:	18fb      	adds	r3, r7, r3
    ed7e:	2201      	movs	r2, #1
    ed80:	709a      	strb	r2, [r3, #2]
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;
    ed82:	237c      	movs	r3, #124	; 0x7c
    ed84:	18fb      	adds	r3, r7, r3
    ed86:	2200      	movs	r2, #0
    ed88:	705a      	strb	r2, [r3, #1]

	system_clock_source_osc8m_set_config(&osc8m_conf);
    ed8a:	237c      	movs	r3, #124	; 0x7c
    ed8c:	18fb      	adds	r3, r7, r3
    ed8e:	0018      	movs	r0, r3
    ed90:	4b55      	ldr	r3, [pc, #340]	; (eee8 <system_clock_init+0x29c>)
    ed92:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    ed94:	2006      	movs	r0, #6
    ed96:	4b4d      	ldr	r3, [pc, #308]	; (eecc <system_clock_init+0x280>)
    ed98:	4798      	blx	r3


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    ed9a:	4b54      	ldr	r3, [pc, #336]	; (eeec <system_clock_init+0x2a0>)
    ed9c:	4798      	blx	r3

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
    ed9e:	2364      	movs	r3, #100	; 0x64
    eda0:	18fb      	adds	r3, r7, r3
    eda2:	0018      	movs	r0, r3
    eda4:	4b52      	ldr	r3, [pc, #328]	; (eef0 <system_clock_init+0x2a4>)
    eda6:	4798      	blx	r3
    eda8:	2364      	movs	r3, #100	; 0x64
    edaa:	18fb      	adds	r3, r7, r3
    edac:	2205      	movs	r2, #5
    edae:	701a      	strb	r2, [r3, #0]
    edb0:	2364      	movs	r3, #100	; 0x64
    edb2:	18fb      	adds	r3, r7, r3
    edb4:	2201      	movs	r2, #1
    edb6:	605a      	str	r2, [r3, #4]
    edb8:	2364      	movs	r3, #100	; 0x64
    edba:	18fb      	adds	r3, r7, r3
    edbc:	2200      	movs	r2, #0
    edbe:	721a      	strb	r2, [r3, #8]
    edc0:	2364      	movs	r3, #100	; 0x64
    edc2:	18fb      	adds	r3, r7, r3
    edc4:	2200      	movs	r2, #0
    edc6:	725a      	strb	r2, [r3, #9]
    edc8:	2364      	movs	r3, #100	; 0x64
    edca:	18fb      	adds	r3, r7, r3
    edcc:	0019      	movs	r1, r3
    edce:	2001      	movs	r0, #1
    edd0:	4b48      	ldr	r3, [pc, #288]	; (eef4 <system_clock_init+0x2a8>)
    edd2:	4798      	blx	r3
    edd4:	2001      	movs	r0, #1
    edd6:	4b48      	ldr	r3, [pc, #288]	; (eef8 <system_clock_init+0x2ac>)
    edd8:	4798      	blx	r3
    edda:	2358      	movs	r3, #88	; 0x58
    eddc:	18fb      	adds	r3, r7, r3
    edde:	0018      	movs	r0, r3
    ede0:	4b43      	ldr	r3, [pc, #268]	; (eef0 <system_clock_init+0x2a4>)
    ede2:	4798      	blx	r3
    ede4:	2358      	movs	r3, #88	; 0x58
    ede6:	18fb      	adds	r3, r7, r3
    ede8:	2204      	movs	r2, #4
    edea:	701a      	strb	r2, [r3, #0]
    edec:	2358      	movs	r3, #88	; 0x58
    edee:	18fb      	adds	r3, r7, r3
    edf0:	2220      	movs	r2, #32
    edf2:	605a      	str	r2, [r3, #4]
    edf4:	2358      	movs	r3, #88	; 0x58
    edf6:	18fb      	adds	r3, r7, r3
    edf8:	2201      	movs	r2, #1
    edfa:	721a      	strb	r2, [r3, #8]
    edfc:	2358      	movs	r3, #88	; 0x58
    edfe:	18fb      	adds	r3, r7, r3
    ee00:	2200      	movs	r2, #0
    ee02:	725a      	strb	r2, [r3, #9]
    ee04:	2358      	movs	r3, #88	; 0x58
    ee06:	18fb      	adds	r3, r7, r3
    ee08:	0019      	movs	r1, r3
    ee0a:	2002      	movs	r0, #2
    ee0c:	4b39      	ldr	r3, [pc, #228]	; (eef4 <system_clock_init+0x2a8>)
    ee0e:	4798      	blx	r3
    ee10:	2002      	movs	r0, #2
    ee12:	4b39      	ldr	r3, [pc, #228]	; (eef8 <system_clock_init+0x2ac>)
    ee14:	4798      	blx	r3
#  if CONF_CLOCK_DFLL_ENABLE == true
	/* Enable DFLL reference clock if in closed loop mode */
	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		struct system_gclk_chan_config dfll_gclk_chan_conf;

		system_gclk_chan_get_config_defaults(&dfll_gclk_chan_conf);
    ee16:	230c      	movs	r3, #12
    ee18:	18fb      	adds	r3, r7, r3
    ee1a:	0018      	movs	r0, r3
    ee1c:	4b37      	ldr	r3, [pc, #220]	; (eefc <system_clock_init+0x2b0>)
    ee1e:	4798      	blx	r3
		dfll_gclk_chan_conf.source_generator = CONF_CLOCK_DFLL_SOURCE_GCLK_GENERATOR;
    ee20:	230c      	movs	r3, #12
    ee22:	18fb      	adds	r3, r7, r3
    ee24:	2201      	movs	r2, #1
    ee26:	701a      	strb	r2, [r3, #0]
		system_gclk_chan_set_config(SYSCTRL_GCLK_ID_DFLL48, &dfll_gclk_chan_conf);
    ee28:	230c      	movs	r3, #12
    ee2a:	18fb      	adds	r3, r7, r3
    ee2c:	0019      	movs	r1, r3
    ee2e:	2000      	movs	r0, #0
    ee30:	4b33      	ldr	r3, [pc, #204]	; (ef00 <system_clock_init+0x2b4>)
    ee32:	4798      	blx	r3
		system_gclk_chan_enable(SYSCTRL_GCLK_ID_DFLL48);
    ee34:	2000      	movs	r0, #0
    ee36:	4b33      	ldr	r3, [pc, #204]	; (ef04 <system_clock_init+0x2b8>)
    ee38:	4798      	blx	r3
#endif


	/* DFLL Enable (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DFLL);
    ee3a:	2007      	movs	r0, #7
    ee3c:	4b23      	ldr	r3, [pc, #140]	; (eecc <system_clock_init+0x280>)
    ee3e:	4798      	blx	r3
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DFLL));
    ee40:	46c0      	nop			; (mov r8, r8)
    ee42:	2007      	movs	r0, #7
    ee44:	4b22      	ldr	r3, [pc, #136]	; (eed0 <system_clock_init+0x284>)
    ee46:	4798      	blx	r3
    ee48:	0003      	movs	r3, r0
    ee4a:	001a      	movs	r2, r3
    ee4c:	2301      	movs	r3, #1
    ee4e:	4053      	eors	r3, r2
    ee50:	b2db      	uxtb	r3, r3
    ee52:	2b00      	cmp	r3, #0
    ee54:	d1f5      	bne.n	ee42 <system_clock_init+0x1f6>
	if (CONF_CLOCK_DFLL_ON_DEMAND) {
		SYSCTRL->DFLLCTRL.bit.ONDEMAND = 1;
    ee56:	4a18      	ldr	r2, [pc, #96]	; (eeb8 <system_clock_init+0x26c>)
    ee58:	8c93      	ldrh	r3, [r2, #36]	; 0x24
    ee5a:	2180      	movs	r1, #128	; 0x80
    ee5c:	430b      	orrs	r3, r1
    ee5e:	8493      	strh	r3, [r2, #36]	; 0x24

#  endif
#endif

	/* CPU and BUS clocks */
	system_cpu_clock_set_divider(CONF_CLOCK_CPU_DIVIDER);
    ee60:	2000      	movs	r0, #0
    ee62:	4b29      	ldr	r3, [pc, #164]	; (ef08 <system_clock_init+0x2bc>)
    ee64:	4798      	blx	r3

	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBA, CONF_CLOCK_APBA_DIVIDER);
    ee66:	2100      	movs	r1, #0
    ee68:	2000      	movs	r0, #0
    ee6a:	4b28      	ldr	r3, [pc, #160]	; (ef0c <system_clock_init+0x2c0>)
    ee6c:	4798      	blx	r3
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBB, CONF_CLOCK_APBB_DIVIDER);
    ee6e:	2100      	movs	r1, #0
    ee70:	2001      	movs	r0, #1
    ee72:	4b26      	ldr	r3, [pc, #152]	; (ef0c <system_clock_init+0x2c0>)
    ee74:	4798      	blx	r3
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);
    ee76:	2100      	movs	r1, #0
    ee78:	2002      	movs	r0, #2
    ee7a:	4b24      	ldr	r3, [pc, #144]	; (ef0c <system_clock_init+0x2c0>)
    ee7c:	4798      	blx	r3

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    ee7e:	003b      	movs	r3, r7
    ee80:	0018      	movs	r0, r3
    ee82:	4b1b      	ldr	r3, [pc, #108]	; (eef0 <system_clock_init+0x2a4>)
    ee84:	4798      	blx	r3
    ee86:	003b      	movs	r3, r7
    ee88:	2207      	movs	r2, #7
    ee8a:	701a      	strb	r2, [r3, #0]
    ee8c:	003b      	movs	r3, r7
    ee8e:	2201      	movs	r2, #1
    ee90:	605a      	str	r2, [r3, #4]
    ee92:	003b      	movs	r3, r7
    ee94:	2200      	movs	r2, #0
    ee96:	721a      	strb	r2, [r3, #8]
    ee98:	003b      	movs	r3, r7
    ee9a:	2200      	movs	r2, #0
    ee9c:	725a      	strb	r2, [r3, #9]
    ee9e:	003b      	movs	r3, r7
    eea0:	0019      	movs	r1, r3
    eea2:	2000      	movs	r0, #0
    eea4:	4b13      	ldr	r3, [pc, #76]	; (eef4 <system_clock_init+0x2a8>)
    eea6:	4798      	blx	r3
    eea8:	2000      	movs	r0, #0
    eeaa:	4b13      	ldr	r3, [pc, #76]	; (eef8 <system_clock_init+0x2ac>)
    eeac:	4798      	blx	r3
#endif
}
    eeae:	46c0      	nop			; (mov r8, r8)
    eeb0:	46bd      	mov	sp, r7
    eeb2:	b02a      	add	sp, #168	; 0xa8
    eeb4:	bd80      	pop	{r7, pc}
    eeb6:	46c0      	nop			; (mov r8, r8)
    eeb8:	40000800 	.word	0x40000800
    eebc:	0000e72d 	.word	0x0000e72d
    eec0:	0000ec15 	.word	0x0000ec15
    eec4:	0000e5fd 	.word	0x0000e5fd
    eec8:	0000e8f5 	.word	0x0000e8f5
    eecc:	0000eae5 	.word	0x0000eae5
    eed0:	0000eb91 	.word	0x0000eb91
    eed4:	0000e667 	.word	0x0000e667
    eed8:	00806024 	.word	0x00806024
    eedc:	000005b9 	.word	0x000005b9
    eee0:	0000ea15 	.word	0x0000ea15
    eee4:	0000e645 	.word	0x0000e645
    eee8:	0000e87d 	.word	0x0000e87d
    eeec:	0000efb5 	.word	0x0000efb5
    eef0:	0000e5b9 	.word	0x0000e5b9
    eef4:	0000efe5 	.word	0x0000efe5
    eef8:	0000f109 	.word	0x0000f109
    eefc:	0000e5e7 	.word	0x0000e5e7
    ef00:	0000f23d 	.word	0x0000f23d
    ef04:	0000f281 	.word	0x0000f281
    ef08:	0000e6b9 	.word	0x0000e6b9
    ef0c:	0000e6d9 	.word	0x0000e6d9

0000ef10 <system_apb_clock_set_mask>:
{
    ef10:	b580      	push	{r7, lr}
    ef12:	b082      	sub	sp, #8
    ef14:	af00      	add	r7, sp, #0
    ef16:	0002      	movs	r2, r0
    ef18:	6039      	str	r1, [r7, #0]
    ef1a:	1dfb      	adds	r3, r7, #7
    ef1c:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    ef1e:	1dfb      	adds	r3, r7, #7
    ef20:	781b      	ldrb	r3, [r3, #0]
    ef22:	2b01      	cmp	r3, #1
    ef24:	d00a      	beq.n	ef3c <system_apb_clock_set_mask+0x2c>
    ef26:	2b02      	cmp	r3, #2
    ef28:	d00f      	beq.n	ef4a <system_apb_clock_set_mask+0x3a>
    ef2a:	2b00      	cmp	r3, #0
    ef2c:	d114      	bne.n	ef58 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
    ef2e:	4b0e      	ldr	r3, [pc, #56]	; (ef68 <system_apb_clock_set_mask+0x58>)
    ef30:	4a0d      	ldr	r2, [pc, #52]	; (ef68 <system_apb_clock_set_mask+0x58>)
    ef32:	6991      	ldr	r1, [r2, #24]
    ef34:	683a      	ldr	r2, [r7, #0]
    ef36:	430a      	orrs	r2, r1
    ef38:	619a      	str	r2, [r3, #24]
			break;
    ef3a:	e00f      	b.n	ef5c <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
    ef3c:	4b0a      	ldr	r3, [pc, #40]	; (ef68 <system_apb_clock_set_mask+0x58>)
    ef3e:	4a0a      	ldr	r2, [pc, #40]	; (ef68 <system_apb_clock_set_mask+0x58>)
    ef40:	69d1      	ldr	r1, [r2, #28]
    ef42:	683a      	ldr	r2, [r7, #0]
    ef44:	430a      	orrs	r2, r1
    ef46:	61da      	str	r2, [r3, #28]
			break;
    ef48:	e008      	b.n	ef5c <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
    ef4a:	4b07      	ldr	r3, [pc, #28]	; (ef68 <system_apb_clock_set_mask+0x58>)
    ef4c:	4a06      	ldr	r2, [pc, #24]	; (ef68 <system_apb_clock_set_mask+0x58>)
    ef4e:	6a11      	ldr	r1, [r2, #32]
    ef50:	683a      	ldr	r2, [r7, #0]
    ef52:	430a      	orrs	r2, r1
    ef54:	621a      	str	r2, [r3, #32]
			break;
    ef56:	e001      	b.n	ef5c <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
    ef58:	2317      	movs	r3, #23
    ef5a:	e000      	b.n	ef5e <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
    ef5c:	2300      	movs	r3, #0
}
    ef5e:	0018      	movs	r0, r3
    ef60:	46bd      	mov	sp, r7
    ef62:	b002      	add	sp, #8
    ef64:	bd80      	pop	{r7, pc}
    ef66:	46c0      	nop			; (mov r8, r8)
    ef68:	40000400 	.word	0x40000400

0000ef6c <system_interrupt_enter_critical_section>:
{
    ef6c:	b580      	push	{r7, lr}
    ef6e:	af00      	add	r7, sp, #0
	cpu_irq_enter_critical();
    ef70:	4b02      	ldr	r3, [pc, #8]	; (ef7c <system_interrupt_enter_critical_section+0x10>)
    ef72:	4798      	blx	r3
}
    ef74:	46c0      	nop			; (mov r8, r8)
    ef76:	46bd      	mov	sp, r7
    ef78:	bd80      	pop	{r7, pc}
    ef7a:	46c0      	nop			; (mov r8, r8)
    ef7c:	00000115 	.word	0x00000115

0000ef80 <system_interrupt_leave_critical_section>:
{
    ef80:	b580      	push	{r7, lr}
    ef82:	af00      	add	r7, sp, #0
	cpu_irq_leave_critical();
    ef84:	4b02      	ldr	r3, [pc, #8]	; (ef90 <system_interrupt_leave_critical_section+0x10>)
    ef86:	4798      	blx	r3
}
    ef88:	46c0      	nop			; (mov r8, r8)
    ef8a:	46bd      	mov	sp, r7
    ef8c:	bd80      	pop	{r7, pc}
    ef8e:	46c0      	nop			; (mov r8, r8)
    ef90:	00000169 	.word	0x00000169

0000ef94 <system_gclk_is_syncing>:
 *
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
    ef94:	b580      	push	{r7, lr}
    ef96:	af00      	add	r7, sp, #0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    ef98:	4b05      	ldr	r3, [pc, #20]	; (efb0 <system_gclk_is_syncing+0x1c>)
    ef9a:	785b      	ldrb	r3, [r3, #1]
    ef9c:	b2db      	uxtb	r3, r3
    ef9e:	b25b      	sxtb	r3, r3
    efa0:	2b00      	cmp	r3, #0
    efa2:	da01      	bge.n	efa8 <system_gclk_is_syncing+0x14>
		return true;
    efa4:	2301      	movs	r3, #1
    efa6:	e000      	b.n	efaa <system_gclk_is_syncing+0x16>
	}

	return false;
    efa8:	2300      	movs	r3, #0
}
    efaa:	0018      	movs	r0, r3
    efac:	46bd      	mov	sp, r7
    efae:	bd80      	pop	{r7, pc}
    efb0:	40000c00 	.word	0x40000c00

0000efb4 <system_gclk_init>:
 *
 * Initializes the Generic Clock module, disabling and resetting all active
 * Generic Clock Generators and Channels to their power-on default values.
 */
void system_gclk_init(void)
{
    efb4:	b580      	push	{r7, lr}
    efb6:	af00      	add	r7, sp, #0
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);
    efb8:	2108      	movs	r1, #8
    efba:	2000      	movs	r0, #0
    efbc:	4b07      	ldr	r3, [pc, #28]	; (efdc <system_gclk_init+0x28>)
    efbe:	4798      	blx	r3

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    efc0:	4b07      	ldr	r3, [pc, #28]	; (efe0 <system_gclk_init+0x2c>)
    efc2:	2201      	movs	r2, #1
    efc4:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    efc6:	46c0      	nop			; (mov r8, r8)
    efc8:	4b05      	ldr	r3, [pc, #20]	; (efe0 <system_gclk_init+0x2c>)
    efca:	781b      	ldrb	r3, [r3, #0]
    efcc:	b2db      	uxtb	r3, r3
    efce:	001a      	movs	r2, r3
    efd0:	2301      	movs	r3, #1
    efd2:	4013      	ands	r3, r2
    efd4:	d1f8      	bne.n	efc8 <system_gclk_init+0x14>
		/* Wait for reset to complete */
	}
}
    efd6:	46c0      	nop			; (mov r8, r8)
    efd8:	46bd      	mov	sp, r7
    efda:	bd80      	pop	{r7, pc}
    efdc:	0000ef11 	.word	0x0000ef11
    efe0:	40000c00 	.word	0x40000c00

0000efe4 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    efe4:	b580      	push	{r7, lr}
    efe6:	b086      	sub	sp, #24
    efe8:	af00      	add	r7, sp, #0
    efea:	0002      	movs	r2, r0
    efec:	6039      	str	r1, [r7, #0]
    efee:	1dfb      	adds	r3, r7, #7
    eff0:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    eff2:	1dfb      	adds	r3, r7, #7
    eff4:	781b      	ldrb	r3, [r3, #0]
    eff6:	617b      	str	r3, [r7, #20]
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);
    eff8:	1dfb      	adds	r3, r7, #7
    effa:	781b      	ldrb	r3, [r3, #0]
    effc:	613b      	str	r3, [r7, #16]

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    effe:	683b      	ldr	r3, [r7, #0]
    f000:	781b      	ldrb	r3, [r3, #0]
    f002:	021b      	lsls	r3, r3, #8
    f004:	001a      	movs	r2, r3
    f006:	697b      	ldr	r3, [r7, #20]
    f008:	4313      	orrs	r3, r2
    f00a:	617b      	str	r3, [r7, #20]

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    f00c:	683b      	ldr	r3, [r7, #0]
    f00e:	785b      	ldrb	r3, [r3, #1]
    f010:	2b00      	cmp	r3, #0
    f012:	d004      	beq.n	f01e <system_gclk_gen_set_config+0x3a>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    f014:	697b      	ldr	r3, [r7, #20]
    f016:	2280      	movs	r2, #128	; 0x80
    f018:	02d2      	lsls	r2, r2, #11
    f01a:	4313      	orrs	r3, r2
    f01c:	617b      	str	r3, [r7, #20]
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    f01e:	683b      	ldr	r3, [r7, #0]
    f020:	7a5b      	ldrb	r3, [r3, #9]
    f022:	2b00      	cmp	r3, #0
    f024:	d004      	beq.n	f030 <system_gclk_gen_set_config+0x4c>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    f026:	697b      	ldr	r3, [r7, #20]
    f028:	2280      	movs	r2, #128	; 0x80
    f02a:	0312      	lsls	r2, r2, #12
    f02c:	4313      	orrs	r3, r2
    f02e:	617b      	str	r3, [r7, #20]
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    f030:	683b      	ldr	r3, [r7, #0]
    f032:	685b      	ldr	r3, [r3, #4]
    f034:	2b01      	cmp	r3, #1
    f036:	d92c      	bls.n	f092 <system_gclk_gen_set_config+0xae>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    f038:	683b      	ldr	r3, [r7, #0]
    f03a:	685a      	ldr	r2, [r3, #4]
    f03c:	683b      	ldr	r3, [r7, #0]
    f03e:	685b      	ldr	r3, [r3, #4]
    f040:	3b01      	subs	r3, #1
    f042:	4013      	ands	r3, r2
    f044:	d11a      	bne.n	f07c <system_gclk_gen_set_config+0x98>
			/* Determine the index of the highest bit set to get the
			 * division factor that must be loaded into the division
			 * register */

			uint32_t div2_count = 0;
    f046:	2300      	movs	r3, #0
    f048:	60fb      	str	r3, [r7, #12]

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    f04a:	2302      	movs	r3, #2
    f04c:	60bb      	str	r3, [r7, #8]
    f04e:	e005      	b.n	f05c <system_gclk_gen_set_config+0x78>
						mask <<= 1) {
				div2_count++;
    f050:	68fb      	ldr	r3, [r7, #12]
    f052:	3301      	adds	r3, #1
    f054:	60fb      	str	r3, [r7, #12]
						mask <<= 1) {
    f056:	68bb      	ldr	r3, [r7, #8]
    f058:	005b      	lsls	r3, r3, #1
    f05a:	60bb      	str	r3, [r7, #8]
			for (mask = (1UL << 1); mask < config->division_factor;
    f05c:	683b      	ldr	r3, [r7, #0]
    f05e:	685a      	ldr	r2, [r3, #4]
    f060:	68bb      	ldr	r3, [r7, #8]
    f062:	429a      	cmp	r2, r3
    f064:	d8f4      	bhi.n	f050 <system_gclk_gen_set_config+0x6c>
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    f066:	68fb      	ldr	r3, [r7, #12]
    f068:	021b      	lsls	r3, r3, #8
    f06a:	693a      	ldr	r2, [r7, #16]
    f06c:	4313      	orrs	r3, r2
    f06e:	613b      	str	r3, [r7, #16]
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    f070:	697b      	ldr	r3, [r7, #20]
    f072:	2280      	movs	r2, #128	; 0x80
    f074:	0352      	lsls	r2, r2, #13
    f076:	4313      	orrs	r3, r2
    f078:	617b      	str	r3, [r7, #20]
    f07a:	e00a      	b.n	f092 <system_gclk_gen_set_config+0xae>
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    f07c:	683b      	ldr	r3, [r7, #0]
    f07e:	685b      	ldr	r3, [r3, #4]
    f080:	021b      	lsls	r3, r3, #8
			new_gendiv_config  |=
    f082:	693a      	ldr	r2, [r7, #16]
    f084:	4313      	orrs	r3, r2
    f086:	613b      	str	r3, [r7, #16]

			/* Enable non-binary division with increased duty cycle accuracy */
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    f088:	697b      	ldr	r3, [r7, #20]
    f08a:	2280      	movs	r2, #128	; 0x80
    f08c:	0292      	lsls	r2, r2, #10
    f08e:	4313      	orrs	r3, r2
    f090:	617b      	str	r3, [r7, #20]
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    f092:	683b      	ldr	r3, [r7, #0]
    f094:	7a1b      	ldrb	r3, [r3, #8]
    f096:	2b00      	cmp	r3, #0
    f098:	d004      	beq.n	f0a4 <system_gclk_gen_set_config+0xc0>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    f09a:	697b      	ldr	r3, [r7, #20]
    f09c:	2280      	movs	r2, #128	; 0x80
    f09e:	0392      	lsls	r2, r2, #14
    f0a0:	4313      	orrs	r3, r2
    f0a2:	617b      	str	r3, [r7, #20]
	}

	while (system_gclk_is_syncing()) {
    f0a4:	46c0      	nop			; (mov r8, r8)
    f0a6:	4b13      	ldr	r3, [pc, #76]	; (f0f4 <system_gclk_gen_set_config+0x110>)
    f0a8:	4798      	blx	r3
    f0aa:	1e03      	subs	r3, r0, #0
    f0ac:	d1fb      	bne.n	f0a6 <system_gclk_gen_set_config+0xc2>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
    f0ae:	4b12      	ldr	r3, [pc, #72]	; (f0f8 <system_gclk_gen_set_config+0x114>)
    f0b0:	4798      	blx	r3

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    f0b2:	4a12      	ldr	r2, [pc, #72]	; (f0fc <system_gclk_gen_set_config+0x118>)
    f0b4:	1dfb      	adds	r3, r7, #7
    f0b6:	781b      	ldrb	r3, [r3, #0]
    f0b8:	7013      	strb	r3, [r2, #0]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    f0ba:	46c0      	nop			; (mov r8, r8)
    f0bc:	4b0d      	ldr	r3, [pc, #52]	; (f0f4 <system_gclk_gen_set_config+0x110>)
    f0be:	4798      	blx	r3
    f0c0:	1e03      	subs	r3, r0, #0
    f0c2:	d1fb      	bne.n	f0bc <system_gclk_gen_set_config+0xd8>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    f0c4:	4b0e      	ldr	r3, [pc, #56]	; (f100 <system_gclk_gen_set_config+0x11c>)
    f0c6:	693a      	ldr	r2, [r7, #16]
    f0c8:	609a      	str	r2, [r3, #8]

	while (system_gclk_is_syncing()) {
    f0ca:	46c0      	nop			; (mov r8, r8)
    f0cc:	4b09      	ldr	r3, [pc, #36]	; (f0f4 <system_gclk_gen_set_config+0x110>)
    f0ce:	4798      	blx	r3
    f0d0:	1e03      	subs	r3, r0, #0
    f0d2:	d1fb      	bne.n	f0cc <system_gclk_gen_set_config+0xe8>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    f0d4:	4b0a      	ldr	r3, [pc, #40]	; (f100 <system_gclk_gen_set_config+0x11c>)
    f0d6:	4a0a      	ldr	r2, [pc, #40]	; (f100 <system_gclk_gen_set_config+0x11c>)
    f0d8:	6851      	ldr	r1, [r2, #4]
    f0da:	2280      	movs	r2, #128	; 0x80
    f0dc:	0252      	lsls	r2, r2, #9
    f0de:	4011      	ands	r1, r2
    f0e0:	697a      	ldr	r2, [r7, #20]
    f0e2:	430a      	orrs	r2, r1
    f0e4:	605a      	str	r2, [r3, #4]

	system_interrupt_leave_critical_section();
    f0e6:	4b07      	ldr	r3, [pc, #28]	; (f104 <system_gclk_gen_set_config+0x120>)
    f0e8:	4798      	blx	r3
}
    f0ea:	46c0      	nop			; (mov r8, r8)
    f0ec:	46bd      	mov	sp, r7
    f0ee:	b006      	add	sp, #24
    f0f0:	bd80      	pop	{r7, pc}
    f0f2:	46c0      	nop			; (mov r8, r8)
    f0f4:	0000ef95 	.word	0x0000ef95
    f0f8:	0000ef6d 	.word	0x0000ef6d
    f0fc:	40000c08 	.word	0x40000c08
    f100:	40000c00 	.word	0x40000c00
    f104:	0000ef81 	.word	0x0000ef81

0000f108 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    f108:	b580      	push	{r7, lr}
    f10a:	b082      	sub	sp, #8
    f10c:	af00      	add	r7, sp, #0
    f10e:	0002      	movs	r2, r0
    f110:	1dfb      	adds	r3, r7, #7
    f112:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing()) {
    f114:	46c0      	nop			; (mov r8, r8)
    f116:	4b0e      	ldr	r3, [pc, #56]	; (f150 <system_gclk_gen_enable+0x48>)
    f118:	4798      	blx	r3
    f11a:	1e03      	subs	r3, r0, #0
    f11c:	d1fb      	bne.n	f116 <system_gclk_gen_enable+0xe>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
    f11e:	4b0d      	ldr	r3, [pc, #52]	; (f154 <system_gclk_gen_enable+0x4c>)
    f120:	4798      	blx	r3

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    f122:	4a0d      	ldr	r2, [pc, #52]	; (f158 <system_gclk_gen_enable+0x50>)
    f124:	1dfb      	adds	r3, r7, #7
    f126:	781b      	ldrb	r3, [r3, #0]
    f128:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
    f12a:	46c0      	nop			; (mov r8, r8)
    f12c:	4b08      	ldr	r3, [pc, #32]	; (f150 <system_gclk_gen_enable+0x48>)
    f12e:	4798      	blx	r3
    f130:	1e03      	subs	r3, r0, #0
    f132:	d1fb      	bne.n	f12c <system_gclk_gen_enable+0x24>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    f134:	4b09      	ldr	r3, [pc, #36]	; (f15c <system_gclk_gen_enable+0x54>)
    f136:	4a09      	ldr	r2, [pc, #36]	; (f15c <system_gclk_gen_enable+0x54>)
    f138:	6852      	ldr	r2, [r2, #4]
    f13a:	2180      	movs	r1, #128	; 0x80
    f13c:	0249      	lsls	r1, r1, #9
    f13e:	430a      	orrs	r2, r1
    f140:	605a      	str	r2, [r3, #4]

	system_interrupt_leave_critical_section();
    f142:	4b07      	ldr	r3, [pc, #28]	; (f160 <system_gclk_gen_enable+0x58>)
    f144:	4798      	blx	r3
}
    f146:	46c0      	nop			; (mov r8, r8)
    f148:	46bd      	mov	sp, r7
    f14a:	b002      	add	sp, #8
    f14c:	bd80      	pop	{r7, pc}
    f14e:	46c0      	nop			; (mov r8, r8)
    f150:	0000ef95 	.word	0x0000ef95
    f154:	0000ef6d 	.word	0x0000ef6d
    f158:	40000c04 	.word	0x40000c04
    f15c:	40000c00 	.word	0x40000c00
    f160:	0000ef81 	.word	0x0000ef81

0000f164 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    f164:	b580      	push	{r7, lr}
    f166:	b086      	sub	sp, #24
    f168:	af00      	add	r7, sp, #0
    f16a:	0002      	movs	r2, r0
    f16c:	1dfb      	adds	r3, r7, #7
    f16e:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing()) {
    f170:	46c0      	nop			; (mov r8, r8)
    f172:	4b2a      	ldr	r3, [pc, #168]	; (f21c <system_gclk_gen_get_hz+0xb8>)
    f174:	4798      	blx	r3
    f176:	1e03      	subs	r3, r0, #0
    f178:	d1fb      	bne.n	f172 <system_gclk_gen_get_hz+0xe>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
    f17a:	4b29      	ldr	r3, [pc, #164]	; (f220 <system_gclk_gen_get_hz+0xbc>)
    f17c:	4798      	blx	r3

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    f17e:	4a29      	ldr	r2, [pc, #164]	; (f224 <system_gclk_gen_get_hz+0xc0>)
    f180:	1dfb      	adds	r3, r7, #7
    f182:	781b      	ldrb	r3, [r3, #0]
    f184:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
    f186:	46c0      	nop			; (mov r8, r8)
    f188:	4b24      	ldr	r3, [pc, #144]	; (f21c <system_gclk_gen_get_hz+0xb8>)
    f18a:	4798      	blx	r3
    f18c:	1e03      	subs	r3, r0, #0
    f18e:	d1fb      	bne.n	f188 <system_gclk_gen_get_hz+0x24>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    f190:	4b25      	ldr	r3, [pc, #148]	; (f228 <system_gclk_gen_get_hz+0xc4>)
    f192:	685b      	ldr	r3, [r3, #4]
    f194:	04db      	lsls	r3, r3, #19
    f196:	0edb      	lsrs	r3, r3, #27
    f198:	b2db      	uxtb	r3, r3
	uint32_t gen_input_hz = system_clock_source_get_hz(
    f19a:	0018      	movs	r0, r3
    f19c:	4b23      	ldr	r3, [pc, #140]	; (f22c <system_gclk_gen_get_hz+0xc8>)
    f19e:	4798      	blx	r3
    f1a0:	0003      	movs	r3, r0
    f1a2:	617b      	str	r3, [r7, #20]

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    f1a4:	4a1f      	ldr	r2, [pc, #124]	; (f224 <system_gclk_gen_get_hz+0xc0>)
    f1a6:	1dfb      	adds	r3, r7, #7
    f1a8:	781b      	ldrb	r3, [r3, #0]
    f1aa:	7013      	strb	r3, [r2, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    f1ac:	4b1e      	ldr	r3, [pc, #120]	; (f228 <system_gclk_gen_get_hz+0xc4>)
    f1ae:	685b      	ldr	r3, [r3, #4]
    f1b0:	02db      	lsls	r3, r3, #11
    f1b2:	0fdb      	lsrs	r3, r3, #31
    f1b4:	b2da      	uxtb	r2, r3
    f1b6:	2313      	movs	r3, #19
    f1b8:	18fb      	adds	r3, r7, r3
    f1ba:	701a      	strb	r2, [r3, #0]

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    f1bc:	4a1c      	ldr	r2, [pc, #112]	; (f230 <system_gclk_gen_get_hz+0xcc>)
    f1be:	1dfb      	adds	r3, r7, #7
    f1c0:	781b      	ldrb	r3, [r3, #0]
    f1c2:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
    f1c4:	46c0      	nop			; (mov r8, r8)
    f1c6:	4b15      	ldr	r3, [pc, #84]	; (f21c <system_gclk_gen_get_hz+0xb8>)
    f1c8:	4798      	blx	r3
    f1ca:	1e03      	subs	r3, r0, #0
    f1cc:	d1fb      	bne.n	f1c6 <system_gclk_gen_get_hz+0x62>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    f1ce:	4b16      	ldr	r3, [pc, #88]	; (f228 <system_gclk_gen_get_hz+0xc4>)
    f1d0:	689b      	ldr	r3, [r3, #8]
    f1d2:	021b      	lsls	r3, r3, #8
    f1d4:	0c1b      	lsrs	r3, r3, #16
    f1d6:	b29b      	uxth	r3, r3
    f1d8:	60fb      	str	r3, [r7, #12]

	system_interrupt_leave_critical_section();
    f1da:	4b16      	ldr	r3, [pc, #88]	; (f234 <system_gclk_gen_get_hz+0xd0>)
    f1dc:	4798      	blx	r3

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    f1de:	2313      	movs	r3, #19
    f1e0:	18fb      	adds	r3, r7, r3
    f1e2:	781b      	ldrb	r3, [r3, #0]
    f1e4:	2b00      	cmp	r3, #0
    f1e6:	d109      	bne.n	f1fc <system_gclk_gen_get_hz+0x98>
    f1e8:	68fb      	ldr	r3, [r7, #12]
    f1ea:	2b01      	cmp	r3, #1
    f1ec:	d906      	bls.n	f1fc <system_gclk_gen_get_hz+0x98>
		gen_input_hz /= divider;
    f1ee:	4b12      	ldr	r3, [pc, #72]	; (f238 <system_gclk_gen_get_hz+0xd4>)
    f1f0:	68f9      	ldr	r1, [r7, #12]
    f1f2:	6978      	ldr	r0, [r7, #20]
    f1f4:	4798      	blx	r3
    f1f6:	0003      	movs	r3, r0
    f1f8:	617b      	str	r3, [r7, #20]
    f1fa:	e00a      	b.n	f212 <system_gclk_gen_get_hz+0xae>
	} else if (divsel) {
    f1fc:	2313      	movs	r3, #19
    f1fe:	18fb      	adds	r3, r7, r3
    f200:	781b      	ldrb	r3, [r3, #0]
    f202:	2b00      	cmp	r3, #0
    f204:	d005      	beq.n	f212 <system_gclk_gen_get_hz+0xae>
		gen_input_hz >>= (divider+1);
    f206:	68fb      	ldr	r3, [r7, #12]
    f208:	3301      	adds	r3, #1
    f20a:	697a      	ldr	r2, [r7, #20]
    f20c:	40da      	lsrs	r2, r3
    f20e:	0013      	movs	r3, r2
    f210:	617b      	str	r3, [r7, #20]
	}

	return gen_input_hz;
    f212:	697b      	ldr	r3, [r7, #20]
}
    f214:	0018      	movs	r0, r3
    f216:	46bd      	mov	sp, r7
    f218:	b006      	add	sp, #24
    f21a:	bd80      	pop	{r7, pc}
    f21c:	0000ef95 	.word	0x0000ef95
    f220:	0000ef6d 	.word	0x0000ef6d
    f224:	40000c04 	.word	0x40000c04
    f228:	40000c00 	.word	0x40000c00
    f22c:	0000e7c1 	.word	0x0000e7c1
    f230:	40000c08 	.word	0x40000c08
    f234:	0000ef81 	.word	0x0000ef81
    f238:	00019cd9 	.word	0x00019cd9

0000f23c <system_gclk_chan_set_config>:
 *
 */
void system_gclk_chan_set_config(
		const uint8_t channel,
		struct system_gclk_chan_config *const config)
{
    f23c:	b580      	push	{r7, lr}
    f23e:	b084      	sub	sp, #16
    f240:	af00      	add	r7, sp, #0
    f242:	0002      	movs	r2, r0
    f244:	6039      	str	r1, [r7, #0]
    f246:	1dfb      	adds	r3, r7, #7
    f248:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	/* Cache the new config to reduce sync requirements */
	uint32_t new_clkctrl_config = (channel << GCLK_CLKCTRL_ID_Pos);
    f24a:	1dfb      	adds	r3, r7, #7
    f24c:	781b      	ldrb	r3, [r3, #0]
    f24e:	60fb      	str	r3, [r7, #12]

	/* Select the desired generic clock generator */
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    f250:	683b      	ldr	r3, [r7, #0]
    f252:	781b      	ldrb	r3, [r3, #0]
    f254:	021b      	lsls	r3, r3, #8
    f256:	001a      	movs	r2, r3
    f258:	68fb      	ldr	r3, [r7, #12]
    f25a:	4313      	orrs	r3, r2
    f25c:	60fb      	str	r3, [r7, #12]

	/* Disable generic clock channel */
	system_gclk_chan_disable(channel);
    f25e:	1dfb      	adds	r3, r7, #7
    f260:	781b      	ldrb	r3, [r3, #0]
    f262:	0018      	movs	r0, r3
    f264:	4b04      	ldr	r3, [pc, #16]	; (f278 <system_gclk_chan_set_config+0x3c>)
    f266:	4798      	blx	r3

	/* Write the new configuration */
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    f268:	4b04      	ldr	r3, [pc, #16]	; (f27c <system_gclk_chan_set_config+0x40>)
    f26a:	68fa      	ldr	r2, [r7, #12]
    f26c:	b292      	uxth	r2, r2
    f26e:	805a      	strh	r2, [r3, #2]
}
    f270:	46c0      	nop			; (mov r8, r8)
    f272:	46bd      	mov	sp, r7
    f274:	b004      	add	sp, #16
    f276:	bd80      	pop	{r7, pc}
    f278:	0000f2c9 	.word	0x0000f2c9
    f27c:	40000c00 	.word	0x40000c00

0000f280 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    f280:	b580      	push	{r7, lr}
    f282:	b082      	sub	sp, #8
    f284:	af00      	add	r7, sp, #0
    f286:	0002      	movs	r2, r0
    f288:	1dfb      	adds	r3, r7, #7
    f28a:	701a      	strb	r2, [r3, #0]
	system_interrupt_enter_critical_section();
    f28c:	4b0a      	ldr	r3, [pc, #40]	; (f2b8 <system_gclk_chan_enable+0x38>)
    f28e:	4798      	blx	r3

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    f290:	4a0a      	ldr	r2, [pc, #40]	; (f2bc <system_gclk_chan_enable+0x3c>)
    f292:	1dfb      	adds	r3, r7, #7
    f294:	781b      	ldrb	r3, [r3, #0]
    f296:	7013      	strb	r3, [r2, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    f298:	4909      	ldr	r1, [pc, #36]	; (f2c0 <system_gclk_chan_enable+0x40>)
    f29a:	4b09      	ldr	r3, [pc, #36]	; (f2c0 <system_gclk_chan_enable+0x40>)
    f29c:	885b      	ldrh	r3, [r3, #2]
    f29e:	b29b      	uxth	r3, r3
    f2a0:	2280      	movs	r2, #128	; 0x80
    f2a2:	01d2      	lsls	r2, r2, #7
    f2a4:	4313      	orrs	r3, r2
    f2a6:	b29b      	uxth	r3, r3
    f2a8:	804b      	strh	r3, [r1, #2]

	system_interrupt_leave_critical_section();
    f2aa:	4b06      	ldr	r3, [pc, #24]	; (f2c4 <system_gclk_chan_enable+0x44>)
    f2ac:	4798      	blx	r3
}
    f2ae:	46c0      	nop			; (mov r8, r8)
    f2b0:	46bd      	mov	sp, r7
    f2b2:	b002      	add	sp, #8
    f2b4:	bd80      	pop	{r7, pc}
    f2b6:	46c0      	nop			; (mov r8, r8)
    f2b8:	0000ef6d 	.word	0x0000ef6d
    f2bc:	40000c02 	.word	0x40000c02
    f2c0:	40000c00 	.word	0x40000c00
    f2c4:	0000ef81 	.word	0x0000ef81

0000f2c8 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    f2c8:	b580      	push	{r7, lr}
    f2ca:	b084      	sub	sp, #16
    f2cc:	af00      	add	r7, sp, #0
    f2ce:	0002      	movs	r2, r0
    f2d0:	1dfb      	adds	r3, r7, #7
    f2d2:	701a      	strb	r2, [r3, #0]
	system_interrupt_enter_critical_section();
    f2d4:	4b1c      	ldr	r3, [pc, #112]	; (f348 <system_gclk_chan_disable+0x80>)
    f2d6:	4798      	blx	r3

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    f2d8:	4a1c      	ldr	r2, [pc, #112]	; (f34c <system_gclk_chan_disable+0x84>)
    f2da:	1dfb      	adds	r3, r7, #7
    f2dc:	781b      	ldrb	r3, [r3, #0]
    f2de:	7013      	strb	r3, [r2, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    f2e0:	4b1b      	ldr	r3, [pc, #108]	; (f350 <system_gclk_chan_disable+0x88>)
    f2e2:	885b      	ldrh	r3, [r3, #2]
    f2e4:	051b      	lsls	r3, r3, #20
    f2e6:	0f1b      	lsrs	r3, r3, #28
    f2e8:	b2db      	uxtb	r3, r3
    f2ea:	60fb      	str	r3, [r7, #12]
	GCLK->CLKCTRL.bit.GEN = 0;
    f2ec:	4a18      	ldr	r2, [pc, #96]	; (f350 <system_gclk_chan_disable+0x88>)
    f2ee:	8853      	ldrh	r3, [r2, #2]
    f2f0:	4918      	ldr	r1, [pc, #96]	; (f354 <system_gclk_chan_disable+0x8c>)
    f2f2:	400b      	ands	r3, r1
    f2f4:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    f2f6:	4a16      	ldr	r2, [pc, #88]	; (f350 <system_gclk_chan_disable+0x88>)
    f2f8:	4b15      	ldr	r3, [pc, #84]	; (f350 <system_gclk_chan_disable+0x88>)
    f2fa:	885b      	ldrh	r3, [r3, #2]
    f2fc:	b29b      	uxth	r3, r3
    f2fe:	4916      	ldr	r1, [pc, #88]	; (f358 <system_gclk_chan_disable+0x90>)
    f300:	400b      	ands	r3, r1
    f302:	b29b      	uxth	r3, r3
    f304:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    f306:	46c0      	nop			; (mov r8, r8)
    f308:	4b11      	ldr	r3, [pc, #68]	; (f350 <system_gclk_chan_disable+0x88>)
    f30a:	885b      	ldrh	r3, [r3, #2]
    f30c:	b29b      	uxth	r3, r3
    f30e:	001a      	movs	r2, r3
    f310:	2380      	movs	r3, #128	; 0x80
    f312:	01db      	lsls	r3, r3, #7
    f314:	4013      	ands	r3, r2
    f316:	d1f7      	bne.n	f308 <system_gclk_chan_disable+0x40>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    f318:	4a0d      	ldr	r2, [pc, #52]	; (f350 <system_gclk_chan_disable+0x88>)
    f31a:	68fb      	ldr	r3, [r7, #12]
    f31c:	b2db      	uxtb	r3, r3
    f31e:	1c19      	adds	r1, r3, #0
    f320:	230f      	movs	r3, #15
    f322:	400b      	ands	r3, r1
    f324:	b2d9      	uxtb	r1, r3
    f326:	8853      	ldrh	r3, [r2, #2]
    f328:	1c08      	adds	r0, r1, #0
    f32a:	210f      	movs	r1, #15
    f32c:	4001      	ands	r1, r0
    f32e:	0208      	lsls	r0, r1, #8
    f330:	4908      	ldr	r1, [pc, #32]	; (f354 <system_gclk_chan_disable+0x8c>)
    f332:	400b      	ands	r3, r1
    f334:	1c19      	adds	r1, r3, #0
    f336:	1c03      	adds	r3, r0, #0
    f338:	430b      	orrs	r3, r1
    f33a:	8053      	strh	r3, [r2, #2]

	system_interrupt_leave_critical_section();
    f33c:	4b07      	ldr	r3, [pc, #28]	; (f35c <system_gclk_chan_disable+0x94>)
    f33e:	4798      	blx	r3
}
    f340:	46c0      	nop			; (mov r8, r8)
    f342:	46bd      	mov	sp, r7
    f344:	b004      	add	sp, #16
    f346:	bd80      	pop	{r7, pc}
    f348:	0000ef6d 	.word	0x0000ef6d
    f34c:	40000c02 	.word	0x40000c02
    f350:	40000c00 	.word	0x40000c00
    f354:	fffff0ff 	.word	0xfffff0ff
    f358:	ffffbfff 	.word	0xffffbfff
    f35c:	0000ef81 	.word	0x0000ef81

0000f360 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    f360:	b580      	push	{r7, lr}
    f362:	b084      	sub	sp, #16
    f364:	af00      	add	r7, sp, #0
    f366:	0002      	movs	r2, r0
    f368:	1dfb      	adds	r3, r7, #7
    f36a:	701a      	strb	r2, [r3, #0]
	uint8_t gen_id;

	system_interrupt_enter_critical_section();
    f36c:	4b0d      	ldr	r3, [pc, #52]	; (f3a4 <system_gclk_chan_get_hz+0x44>)
    f36e:	4798      	blx	r3

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    f370:	4a0d      	ldr	r2, [pc, #52]	; (f3a8 <system_gclk_chan_get_hz+0x48>)
    f372:	1dfb      	adds	r3, r7, #7
    f374:	781b      	ldrb	r3, [r3, #0]
    f376:	7013      	strb	r3, [r2, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    f378:	4b0c      	ldr	r3, [pc, #48]	; (f3ac <system_gclk_chan_get_hz+0x4c>)
    f37a:	885b      	ldrh	r3, [r3, #2]
    f37c:	051b      	lsls	r3, r3, #20
    f37e:	0f1b      	lsrs	r3, r3, #28
    f380:	b2da      	uxtb	r2, r3
    f382:	230f      	movs	r3, #15
    f384:	18fb      	adds	r3, r7, r3
    f386:	701a      	strb	r2, [r3, #0]

	system_interrupt_leave_critical_section();
    f388:	4b09      	ldr	r3, [pc, #36]	; (f3b0 <system_gclk_chan_get_hz+0x50>)
    f38a:	4798      	blx	r3

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    f38c:	230f      	movs	r3, #15
    f38e:	18fb      	adds	r3, r7, r3
    f390:	781b      	ldrb	r3, [r3, #0]
    f392:	0018      	movs	r0, r3
    f394:	4b07      	ldr	r3, [pc, #28]	; (f3b4 <system_gclk_chan_get_hz+0x54>)
    f396:	4798      	blx	r3
    f398:	0003      	movs	r3, r0
}
    f39a:	0018      	movs	r0, r3
    f39c:	46bd      	mov	sp, r7
    f39e:	b004      	add	sp, #16
    f3a0:	bd80      	pop	{r7, pc}
    f3a2:	46c0      	nop			; (mov r8, r8)
    f3a4:	0000ef6d 	.word	0x0000ef6d
    f3a8:	40000c02 	.word	0x40000c02
    f3ac:	40000c00 	.word	0x40000c00
    f3b0:	0000ef81 	.word	0x0000ef81
    f3b4:	0000f165 	.word	0x0000f165

0000f3b8 <_system_dummy_init>:
 * Dummy initialization function, used as a weak alias target for the various
 * init functions called by \ref system_init().
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
    f3b8:	b580      	push	{r7, lr}
    f3ba:	af00      	add	r7, sp, #0
	return;
    f3bc:	46c0      	nop			; (mov r8, r8)
}
    f3be:	46bd      	mov	sp, r7
    f3c0:	bd80      	pop	{r7, pc}
	...

0000f3c4 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    f3c4:	b580      	push	{r7, lr}
    f3c6:	af00      	add	r7, sp, #0
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    f3c8:	4b06      	ldr	r3, [pc, #24]	; (f3e4 <system_init+0x20>)
    f3ca:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    f3cc:	4b06      	ldr	r3, [pc, #24]	; (f3e8 <system_init+0x24>)
    f3ce:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    f3d0:	4b06      	ldr	r3, [pc, #24]	; (f3ec <system_init+0x28>)
    f3d2:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    f3d4:	4b06      	ldr	r3, [pc, #24]	; (f3f0 <system_init+0x2c>)
    f3d6:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    f3d8:	4b06      	ldr	r3, [pc, #24]	; (f3f4 <system_init+0x30>)
    f3da:	4798      	blx	r3
}
    f3dc:	46c0      	nop			; (mov r8, r8)
    f3de:	46bd      	mov	sp, r7
    f3e0:	bd80      	pop	{r7, pc}
    f3e2:	46c0      	nop			; (mov r8, r8)
    f3e4:	0000ec4d 	.word	0x0000ec4d
    f3e8:	00001755 	.word	0x00001755
    f3ec:	0000f3b9 	.word	0x0000f3b9
    f3f0:	0000c5e5 	.word	0x0000c5e5
    f3f4:	0000f3b9 	.word	0x0000f3b9

0000f3f8 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
    f3f8:	b580      	push	{r7, lr}
    f3fa:	b082      	sub	sp, #8
    f3fc:	af00      	add	r7, sp, #0
        uint32_t *pSrc, *pDest;

        /* Initialize the relocate segment */
        pSrc = &_etext;
    f3fe:	4b2f      	ldr	r3, [pc, #188]	; (f4bc <Reset_Handler+0xc4>)
    f400:	607b      	str	r3, [r7, #4]
        pDest = &_srelocate;
    f402:	4b2f      	ldr	r3, [pc, #188]	; (f4c0 <Reset_Handler+0xc8>)
    f404:	603b      	str	r3, [r7, #0]

        if (pSrc != pDest) {
    f406:	687a      	ldr	r2, [r7, #4]
    f408:	683b      	ldr	r3, [r7, #0]
    f40a:	429a      	cmp	r2, r3
    f40c:	d00c      	beq.n	f428 <Reset_Handler+0x30>
                for (; pDest < &_erelocate;) {
    f40e:	e007      	b.n	f420 <Reset_Handler+0x28>
                        *pDest++ = *pSrc++;
    f410:	683b      	ldr	r3, [r7, #0]
    f412:	1d1a      	adds	r2, r3, #4
    f414:	603a      	str	r2, [r7, #0]
    f416:	687a      	ldr	r2, [r7, #4]
    f418:	1d11      	adds	r1, r2, #4
    f41a:	6079      	str	r1, [r7, #4]
    f41c:	6812      	ldr	r2, [r2, #0]
    f41e:	601a      	str	r2, [r3, #0]
                for (; pDest < &_erelocate;) {
    f420:	683a      	ldr	r2, [r7, #0]
    f422:	4b28      	ldr	r3, [pc, #160]	; (f4c4 <Reset_Handler+0xcc>)
    f424:	429a      	cmp	r2, r3
    f426:	d3f3      	bcc.n	f410 <Reset_Handler+0x18>
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    f428:	4b27      	ldr	r3, [pc, #156]	; (f4c8 <Reset_Handler+0xd0>)
    f42a:	603b      	str	r3, [r7, #0]
    f42c:	e004      	b.n	f438 <Reset_Handler+0x40>
                *pDest++ = 0;
    f42e:	683b      	ldr	r3, [r7, #0]
    f430:	1d1a      	adds	r2, r3, #4
    f432:	603a      	str	r2, [r7, #0]
    f434:	2200      	movs	r2, #0
    f436:	601a      	str	r2, [r3, #0]
        for (pDest = &_szero; pDest < &_ezero;) {
    f438:	683a      	ldr	r2, [r7, #0]
    f43a:	4b24      	ldr	r3, [pc, #144]	; (f4cc <Reset_Handler+0xd4>)
    f43c:	429a      	cmp	r2, r3
    f43e:	d3f6      	bcc.n	f42e <Reset_Handler+0x36>
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
    f440:	4b23      	ldr	r3, [pc, #140]	; (f4d0 <Reset_Handler+0xd8>)
    f442:	607b      	str	r3, [r7, #4]
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    f444:	4b23      	ldr	r3, [pc, #140]	; (f4d4 <Reset_Handler+0xdc>)
    f446:	687a      	ldr	r2, [r7, #4]
    f448:	21ff      	movs	r1, #255	; 0xff
    f44a:	438a      	bics	r2, r1
    f44c:	609a      	str	r2, [r3, #8]

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    f44e:	4a22      	ldr	r2, [pc, #136]	; (f4d8 <Reset_Handler+0xe0>)
    f450:	2390      	movs	r3, #144	; 0x90
    f452:	005b      	lsls	r3, r3, #1
    f454:	2102      	movs	r1, #2
    f456:	50d1      	str	r1, [r2, r3]
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    f458:	4a20      	ldr	r2, [pc, #128]	; (f4dc <Reset_Handler+0xe4>)
    f45a:	78d3      	ldrb	r3, [r2, #3]
    f45c:	2103      	movs	r1, #3
    f45e:	438b      	bics	r3, r1
    f460:	1c19      	adds	r1, r3, #0
    f462:	2302      	movs	r3, #2
    f464:	430b      	orrs	r3, r1
    f466:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    f468:	4a1c      	ldr	r2, [pc, #112]	; (f4dc <Reset_Handler+0xe4>)
    f46a:	78d3      	ldrb	r3, [r2, #3]
    f46c:	210c      	movs	r1, #12
    f46e:	438b      	bics	r3, r1
    f470:	1c19      	adds	r1, r3, #0
    f472:	2308      	movs	r3, #8
    f474:	430b      	orrs	r3, r1
    f476:	70d3      	strb	r3, [r2, #3]
#endif
        DMAC->QOSCTRL.bit.DQOS = 2;
    f478:	4a19      	ldr	r2, [pc, #100]	; (f4e0 <Reset_Handler+0xe8>)
    f47a:	7b93      	ldrb	r3, [r2, #14]
    f47c:	2130      	movs	r1, #48	; 0x30
    f47e:	438b      	bics	r3, r1
    f480:	1c19      	adds	r1, r3, #0
    f482:	2320      	movs	r3, #32
    f484:	430b      	orrs	r3, r1
    f486:	7393      	strb	r3, [r2, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    f488:	4a15      	ldr	r2, [pc, #84]	; (f4e0 <Reset_Handler+0xe8>)
    f48a:	7b93      	ldrb	r3, [r2, #14]
    f48c:	210c      	movs	r1, #12
    f48e:	438b      	bics	r3, r1
    f490:	1c19      	adds	r1, r3, #0
    f492:	2308      	movs	r3, #8
    f494:	430b      	orrs	r3, r1
    f496:	7393      	strb	r3, [r2, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    f498:	4a11      	ldr	r2, [pc, #68]	; (f4e0 <Reset_Handler+0xe8>)
    f49a:	7b93      	ldrb	r3, [r2, #14]
    f49c:	2103      	movs	r1, #3
    f49e:	438b      	bics	r3, r1
    f4a0:	1c19      	adds	r1, r3, #0
    f4a2:	2302      	movs	r3, #2
    f4a4:	430b      	orrs	r3, r1
    f4a6:	7393      	strb	r3, [r2, #14]

        /* Overwriting the default value of the NVMCTRL.CTRLB.MANW bit (errata reference 13134) */
        NVMCTRL->CTRLB.bit.MANW = 1;
    f4a8:	4a0e      	ldr	r2, [pc, #56]	; (f4e4 <Reset_Handler+0xec>)
    f4aa:	6853      	ldr	r3, [r2, #4]
    f4ac:	2180      	movs	r1, #128	; 0x80
    f4ae:	430b      	orrs	r3, r1
    f4b0:	6053      	str	r3, [r2, #4]

        /* Initialize the C library */
        __libc_init_array();
    f4b2:	4b0d      	ldr	r3, [pc, #52]	; (f4e8 <Reset_Handler+0xf0>)
    f4b4:	4798      	blx	r3

        /* Branch to main function */
        main();
    f4b6:	4b0d      	ldr	r3, [pc, #52]	; (f4ec <Reset_Handler+0xf4>)
    f4b8:	4798      	blx	r3

        /* Infinite loop */
        while (1);
    f4ba:	e7fe      	b.n	f4ba <Reset_Handler+0xc2>
    f4bc:	00021fe0 	.word	0x00021fe0
    f4c0:	20000000 	.word	0x20000000
    f4c4:	200003fc 	.word	0x200003fc
    f4c8:	200003fc 	.word	0x200003fc
    f4cc:	20002c04 	.word	0x20002c04
    f4d0:	00000000 	.word	0x00000000
    f4d4:	e000ed00 	.word	0xe000ed00
    f4d8:	41007000 	.word	0x41007000
    f4dc:	41005000 	.word	0x41005000
    f4e0:	41004800 	.word	0x41004800
    f4e4:	41004000 	.word	0x41004000
    f4e8:	0001bf79 	.word	0x0001bf79
    f4ec:	000164c5 	.word	0x000164c5

0000f4f0 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    f4f0:	b580      	push	{r7, lr}
    f4f2:	af00      	add	r7, sp, #0
        while (1) {
    f4f4:	e7fe      	b.n	f4f4 <Dummy_Handler+0x4>
	...

0000f4f8 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
    f4f8:	b580      	push	{r7, lr}
    f4fa:	b086      	sub	sp, #24
    f4fc:	af00      	add	r7, sp, #0
    f4fe:	60f8      	str	r0, [r7, #12]
    f500:	60b9      	str	r1, [r7, #8]
    f502:	607a      	str	r2, [r7, #4]
	int nChars = 0;
    f504:	2300      	movs	r3, #0
    f506:	617b      	str	r3, [r7, #20]

	if (file != 0) {
    f508:	68fb      	ldr	r3, [r7, #12]
    f50a:	2b00      	cmp	r3, #0
    f50c:	d012      	beq.n	f534 <_read+0x3c>
		return -1;
    f50e:	2301      	movs	r3, #1
    f510:	425b      	negs	r3, r3
    f512:	e013      	b.n	f53c <_read+0x44>
	}

	for (; len > 0; --len) {
		ptr_get(stdio_base, ptr);
    f514:	4b0b      	ldr	r3, [pc, #44]	; (f544 <_read+0x4c>)
    f516:	681a      	ldr	r2, [r3, #0]
    f518:	4b0b      	ldr	r3, [pc, #44]	; (f548 <_read+0x50>)
    f51a:	681b      	ldr	r3, [r3, #0]
    f51c:	68b9      	ldr	r1, [r7, #8]
    f51e:	0018      	movs	r0, r3
    f520:	4790      	blx	r2
		ptr++;
    f522:	68bb      	ldr	r3, [r7, #8]
    f524:	3301      	adds	r3, #1
    f526:	60bb      	str	r3, [r7, #8]
		nChars++;
    f528:	697b      	ldr	r3, [r7, #20]
    f52a:	3301      	adds	r3, #1
    f52c:	617b      	str	r3, [r7, #20]
	for (; len > 0; --len) {
    f52e:	687b      	ldr	r3, [r7, #4]
    f530:	3b01      	subs	r3, #1
    f532:	607b      	str	r3, [r7, #4]
    f534:	687b      	ldr	r3, [r7, #4]
    f536:	2b00      	cmp	r3, #0
    f538:	dcec      	bgt.n	f514 <_read+0x1c>
	}
	return nChars;
    f53a:	697b      	ldr	r3, [r7, #20]
}
    f53c:	0018      	movs	r0, r3
    f53e:	46bd      	mov	sp, r7
    f540:	b006      	add	sp, #24
    f542:	bd80      	pop	{r7, pc}
    f544:	20002b78 	.word	0x20002b78
    f548:	20002b80 	.word	0x20002b80

0000f54c <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
    f54c:	b580      	push	{r7, lr}
    f54e:	b086      	sub	sp, #24
    f550:	af00      	add	r7, sp, #0
    f552:	60f8      	str	r0, [r7, #12]
    f554:	60b9      	str	r1, [r7, #8]
    f556:	607a      	str	r2, [r7, #4]
	int nChars = 0;
    f558:	2300      	movs	r3, #0
    f55a:	617b      	str	r3, [r7, #20]

	if ((file != 1) && (file != 2) && (file!=3)) {
    f55c:	68fb      	ldr	r3, [r7, #12]
    f55e:	2b01      	cmp	r3, #1
    f560:	d01d      	beq.n	f59e <_write+0x52>
    f562:	68fb      	ldr	r3, [r7, #12]
    f564:	2b02      	cmp	r3, #2
    f566:	d01a      	beq.n	f59e <_write+0x52>
    f568:	68fb      	ldr	r3, [r7, #12]
    f56a:	2b03      	cmp	r3, #3
    f56c:	d017      	beq.n	f59e <_write+0x52>
		return -1;
    f56e:	2301      	movs	r3, #1
    f570:	425b      	negs	r3, r3
    f572:	e018      	b.n	f5a6 <_write+0x5a>
	}

	for (; len != 0; --len) {
		if (ptr_put(stdio_base, *ptr++) < 0) {
    f574:	4b0e      	ldr	r3, [pc, #56]	; (f5b0 <_write+0x64>)
    f576:	681a      	ldr	r2, [r3, #0]
    f578:	4b0e      	ldr	r3, [pc, #56]	; (f5b4 <_write+0x68>)
    f57a:	6818      	ldr	r0, [r3, #0]
    f57c:	68bb      	ldr	r3, [r7, #8]
    f57e:	1c59      	adds	r1, r3, #1
    f580:	60b9      	str	r1, [r7, #8]
    f582:	781b      	ldrb	r3, [r3, #0]
    f584:	0019      	movs	r1, r3
    f586:	4790      	blx	r2
    f588:	1e03      	subs	r3, r0, #0
    f58a:	da02      	bge.n	f592 <_write+0x46>
			return -1;
    f58c:	2301      	movs	r3, #1
    f58e:	425b      	negs	r3, r3
    f590:	e009      	b.n	f5a6 <_write+0x5a>
		}
		++nChars;
    f592:	697b      	ldr	r3, [r7, #20]
    f594:	3301      	adds	r3, #1
    f596:	617b      	str	r3, [r7, #20]
	for (; len != 0; --len) {
    f598:	687b      	ldr	r3, [r7, #4]
    f59a:	3b01      	subs	r3, #1
    f59c:	607b      	str	r3, [r7, #4]
    f59e:	687b      	ldr	r3, [r7, #4]
    f5a0:	2b00      	cmp	r3, #0
    f5a2:	d1e7      	bne.n	f574 <_write+0x28>
	}
	return nChars;
    f5a4:	697b      	ldr	r3, [r7, #20]
}
    f5a6:	0018      	movs	r0, r3
    f5a8:	46bd      	mov	sp, r7
    f5aa:	b006      	add	sp, #24
    f5ac:	bd80      	pop	{r7, pc}
    f5ae:	46c0      	nop			; (mov r8, r8)
    f5b0:	20002b7c 	.word	0x20002b7c
    f5b4:	20002b80 	.word	0x20002b80

0000f5b8 <atGenKey>:
 * \param[in] ca_cmd     instance
 * \param[in] packet    pointer to the packet containing the command being built
 * \return ATCA_SUCCESS
 */
ATCA_STATUS atGenKey(ATCACommand ca_cmd, ATCAPacket *packet)
{
    f5b8:	b580      	push	{r7, lr}
    f5ba:	b082      	sub	sp, #8
    f5bc:	af00      	add	r7, sp, #0
    f5be:	6078      	str	r0, [r7, #4]
    f5c0:	6039      	str	r1, [r7, #0]
    // Set the opcode & parameters
    packet->opcode = ATCA_GENKEY;
    f5c2:	683b      	ldr	r3, [r7, #0]
    f5c4:	2240      	movs	r2, #64	; 0x40
    f5c6:	709a      	strb	r2, [r3, #2]

    if (packet->param1 & GENKEY_MODE_PUBKEY_DIGEST)
    f5c8:	683b      	ldr	r3, [r7, #0]
    f5ca:	78db      	ldrb	r3, [r3, #3]
    f5cc:	001a      	movs	r2, r3
    f5ce:	2310      	movs	r3, #16
    f5d0:	4013      	ands	r3, r2
    f5d2:	d007      	beq.n	f5e4 <atGenKey+0x2c>
    {
        packet->txsize = GENKEY_COUNT_DATA;
    f5d4:	683b      	ldr	r3, [r7, #0]
    f5d6:	220a      	movs	r2, #10
    f5d8:	705a      	strb	r2, [r3, #1]
        packet->rxsize = GENKEY_RSP_SIZE_SHORT;
    f5da:	683b      	ldr	r3, [r7, #0]
    f5dc:	228a      	movs	r2, #138	; 0x8a
    f5de:	2104      	movs	r1, #4
    f5e0:	5299      	strh	r1, [r3, r2]
    f5e2:	e006      	b.n	f5f2 <atGenKey+0x3a>
    }
    else
    {
        packet->txsize = GENKEY_COUNT;
    f5e4:	683b      	ldr	r3, [r7, #0]
    f5e6:	2207      	movs	r2, #7
    f5e8:	705a      	strb	r2, [r3, #1]
        packet->rxsize = GENKEY_RSP_SIZE_LONG;
    f5ea:	683b      	ldr	r3, [r7, #0]
    f5ec:	228a      	movs	r2, #138	; 0x8a
    f5ee:	214b      	movs	r1, #75	; 0x4b
    f5f0:	5299      	strh	r1, [r3, r2]
    }

    atCalcCrc(packet);
    f5f2:	683b      	ldr	r3, [r7, #0]
    f5f4:	0018      	movs	r0, r3
    f5f6:	4b03      	ldr	r3, [pc, #12]	; (f604 <atGenKey+0x4c>)
    f5f8:	4798      	blx	r3
    return ATCA_SUCCESS;
    f5fa:	2300      	movs	r3, #0
}
    f5fc:	0018      	movs	r0, r3
    f5fe:	46bd      	mov	sp, r7
    f600:	b002      	add	sp, #8
    f602:	bd80      	pop	{r7, pc}
    f604:	0000fa0d 	.word	0x0000fa0d

0000f608 <atInfo>:
 * \param[in] ca_cmd   instance
 * \param[in] packet  pointer to the packet containing the command being built
 * \return ATCA_SUCCESS
 */
ATCA_STATUS atInfo(ATCACommand ca_cmd, ATCAPacket *packet)
{
    f608:	b580      	push	{r7, lr}
    f60a:	b082      	sub	sp, #8
    f60c:	af00      	add	r7, sp, #0
    f60e:	6078      	str	r0, [r7, #4]
    f610:	6039      	str	r1, [r7, #0]

    // Set the opcode & parameters
    packet->opcode = ATCA_INFO;
    f612:	683b      	ldr	r3, [r7, #0]
    f614:	2230      	movs	r2, #48	; 0x30
    f616:	709a      	strb	r2, [r3, #2]
    packet->txsize = INFO_COUNT;
    f618:	683b      	ldr	r3, [r7, #0]
    f61a:	2207      	movs	r2, #7
    f61c:	705a      	strb	r2, [r3, #1]
    packet->rxsize = INFO_RSP_SIZE;
    f61e:	683b      	ldr	r3, [r7, #0]
    f620:	228a      	movs	r2, #138	; 0x8a
    f622:	2107      	movs	r1, #7
    f624:	5299      	strh	r1, [r3, r2]

    atCalcCrc(packet);
    f626:	683b      	ldr	r3, [r7, #0]
    f628:	0018      	movs	r0, r3
    f62a:	4b03      	ldr	r3, [pc, #12]	; (f638 <atInfo+0x30>)
    f62c:	4798      	blx	r3
    return ATCA_SUCCESS;
    f62e:	2300      	movs	r3, #0
}
    f630:	0018      	movs	r0, r3
    f632:	46bd      	mov	sp, r7
    f634:	b002      	add	sp, #8
    f636:	bd80      	pop	{r7, pc}
    f638:	0000fa0d 	.word	0x0000fa0d

0000f63c <atNonce>:
 * \param[in] ca_cmd   instance
 * \param[in] packet   pointer to the packet containing the command being built
 * \return ATCA_SUCCESS on success, otherwise an error code.
 */
ATCA_STATUS atNonce(ATCACommand ca_cmd, ATCAPacket *packet)
{
    f63c:	b580      	push	{r7, lr}
    f63e:	b084      	sub	sp, #16
    f640:	af00      	add	r7, sp, #0
    f642:	6078      	str	r0, [r7, #4]
    f644:	6039      	str	r1, [r7, #0]
    // Set the opcode & parameters
    // variable packet size
    uint8_t calc_mode = packet->param1 & NONCE_MODE_MASK;
    f646:	683b      	ldr	r3, [r7, #0]
    f648:	78da      	ldrb	r2, [r3, #3]
    f64a:	230f      	movs	r3, #15
    f64c:	18fb      	adds	r3, r7, r3
    f64e:	2103      	movs	r1, #3
    f650:	400a      	ands	r2, r1
    f652:	701a      	strb	r2, [r3, #0]

    packet->opcode = ATCA_NONCE;
    f654:	683b      	ldr	r3, [r7, #0]
    f656:	2216      	movs	r2, #22
    f658:	709a      	strb	r2, [r3, #2]

    if ((calc_mode == NONCE_MODE_SEED_UPDATE || calc_mode == NONCE_MODE_NO_SEED_UPDATE))
    f65a:	230f      	movs	r3, #15
    f65c:	18fb      	adds	r3, r7, r3
    f65e:	781b      	ldrb	r3, [r3, #0]
    f660:	2b00      	cmp	r3, #0
    f662:	d004      	beq.n	f66e <atNonce+0x32>
    f664:	230f      	movs	r3, #15
    f666:	18fb      	adds	r3, r7, r3
    f668:	781b      	ldrb	r3, [r3, #0]
    f66a:	2b01      	cmp	r3, #1
    f66c:	d107      	bne.n	f67e <atNonce+0x42>
    {
        // Calculated nonce mode, 20 byte NumInm
        packet->txsize = NONCE_COUNT_SHORT;
    f66e:	683b      	ldr	r3, [r7, #0]
    f670:	221b      	movs	r2, #27
    f672:	705a      	strb	r2, [r3, #1]
        packet->rxsize = NONCE_RSP_SIZE_LONG; // 32-byte output
    f674:	683b      	ldr	r3, [r7, #0]
    f676:	228a      	movs	r2, #138	; 0x8a
    f678:	2123      	movs	r1, #35	; 0x23
    f67a:	5299      	strh	r1, [r3, r2]
    f67c:	e018      	b.n	f6b0 <atNonce+0x74>
    }
    else if (calc_mode == NONCE_MODE_PASSTHROUGH)
    f67e:	230f      	movs	r3, #15
    f680:	18fb      	adds	r3, r7, r3
    f682:	781b      	ldrb	r3, [r3, #0]
    f684:	2b03      	cmp	r3, #3
    f686:	d111      	bne.n	f6ac <atNonce+0x70>
    {
        // PAss-through nonce mode
        if ((packet->param1 & NONCE_MODE_INPUT_LEN_MASK) == NONCE_MODE_INPUT_LEN_64)
    f688:	683b      	ldr	r3, [r7, #0]
    f68a:	78db      	ldrb	r3, [r3, #3]
    f68c:	001a      	movs	r2, r3
    f68e:	2320      	movs	r3, #32
    f690:	4013      	ands	r3, r2
    f692:	d003      	beq.n	f69c <atNonce+0x60>
        {
            // 64 byte NumIn
            packet->txsize = NONCE_COUNT_LONG_64;
    f694:	683b      	ldr	r3, [r7, #0]
    f696:	2247      	movs	r2, #71	; 0x47
    f698:	705a      	strb	r2, [r3, #1]
    f69a:	e002      	b.n	f6a2 <atNonce+0x66>
        }
        else
        {
            // 32 byte NumIn
            packet->txsize = NONCE_COUNT_LONG;
    f69c:	683b      	ldr	r3, [r7, #0]
    f69e:	2227      	movs	r2, #39	; 0x27
    f6a0:	705a      	strb	r2, [r3, #1]
        }
        packet->rxsize = NONCE_RSP_SIZE_SHORT; // Status-only output
    f6a2:	683b      	ldr	r3, [r7, #0]
    f6a4:	228a      	movs	r2, #138	; 0x8a
    f6a6:	2104      	movs	r1, #4
    f6a8:	5299      	strh	r1, [r3, r2]
    f6aa:	e001      	b.n	f6b0 <atNonce+0x74>
    }
    else
    {
        return ATCA_BAD_PARAM;
    f6ac:	23e2      	movs	r3, #226	; 0xe2
    f6ae:	e004      	b.n	f6ba <atNonce+0x7e>
    }

    atCalcCrc(packet);
    f6b0:	683b      	ldr	r3, [r7, #0]
    f6b2:	0018      	movs	r0, r3
    f6b4:	4b03      	ldr	r3, [pc, #12]	; (f6c4 <atNonce+0x88>)
    f6b6:	4798      	blx	r3
    return ATCA_SUCCESS;
    f6b8:	2300      	movs	r3, #0
}
    f6ba:	0018      	movs	r0, r3
    f6bc:	46bd      	mov	sp, r7
    f6be:	b004      	add	sp, #16
    f6c0:	bd80      	pop	{r7, pc}
    f6c2:	46c0      	nop			; (mov r8, r8)
    f6c4:	0000fa0d 	.word	0x0000fa0d

0000f6c8 <atRandom>:
 * \param[in] ca_cmd   instance
 * \param[in] packet  pointer to the packet containing the command being built
 * \return ATCA_SUCCESS
 */
ATCA_STATUS atRandom(ATCACommand ca_cmd, ATCAPacket *packet)
{
    f6c8:	b580      	push	{r7, lr}
    f6ca:	b082      	sub	sp, #8
    f6cc:	af00      	add	r7, sp, #0
    f6ce:	6078      	str	r0, [r7, #4]
    f6d0:	6039      	str	r1, [r7, #0]

    // Set the opcode & parameters
    packet->opcode = ATCA_RANDOM;
    f6d2:	683b      	ldr	r3, [r7, #0]
    f6d4:	221b      	movs	r2, #27
    f6d6:	709a      	strb	r2, [r3, #2]
    packet->txsize = RANDOM_COUNT;
    f6d8:	683b      	ldr	r3, [r7, #0]
    f6da:	2207      	movs	r2, #7
    f6dc:	705a      	strb	r2, [r3, #1]
    packet->rxsize = RANDOM_RSP_SIZE;
    f6de:	683b      	ldr	r3, [r7, #0]
    f6e0:	228a      	movs	r2, #138	; 0x8a
    f6e2:	2123      	movs	r1, #35	; 0x23
    f6e4:	5299      	strh	r1, [r3, r2]

    atCalcCrc(packet);
    f6e6:	683b      	ldr	r3, [r7, #0]
    f6e8:	0018      	movs	r0, r3
    f6ea:	4b03      	ldr	r3, [pc, #12]	; (f6f8 <atRandom+0x30>)
    f6ec:	4798      	blx	r3
    return ATCA_SUCCESS;
    f6ee:	2300      	movs	r3, #0
}
    f6f0:	0018      	movs	r0, r3
    f6f2:	46bd      	mov	sp, r7
    f6f4:	b002      	add	sp, #8
    f6f6:	bd80      	pop	{r7, pc}
    f6f8:	0000fa0d 	.word	0x0000fa0d

0000f6fc <atRead>:
 * \param[in] ca_cmd   instance
 * \param[in] packet  pointer to the packet containing the command being built
 * \return ATCA_SUCCESS
 */
ATCA_STATUS atRead(ATCACommand ca_cmd, ATCAPacket *packet)
{
    f6fc:	b580      	push	{r7, lr}
    f6fe:	b082      	sub	sp, #8
    f700:	af00      	add	r7, sp, #0
    f702:	6078      	str	r0, [r7, #4]
    f704:	6039      	str	r1, [r7, #0]

    // Set the opcode & parameters
    packet->opcode = ATCA_READ;
    f706:	683b      	ldr	r3, [r7, #0]
    f708:	2202      	movs	r2, #2
    f70a:	709a      	strb	r2, [r3, #2]
    packet->txsize = READ_COUNT;
    f70c:	683b      	ldr	r3, [r7, #0]
    f70e:	2207      	movs	r2, #7
    f710:	705a      	strb	r2, [r3, #1]

    // variable response size based on read type
    if ((packet->param1 & 0x80) == 0)
    f712:	683b      	ldr	r3, [r7, #0]
    f714:	78db      	ldrb	r3, [r3, #3]
    f716:	b25b      	sxtb	r3, r3
    f718:	2b00      	cmp	r3, #0
    f71a:	db04      	blt.n	f726 <atRead+0x2a>
    {
        packet->rxsize = READ_4_RSP_SIZE;
    f71c:	683b      	ldr	r3, [r7, #0]
    f71e:	228a      	movs	r2, #138	; 0x8a
    f720:	2107      	movs	r1, #7
    f722:	5299      	strh	r1, [r3, r2]
    f724:	e003      	b.n	f72e <atRead+0x32>
    }
    else
    {
        packet->rxsize = READ_32_RSP_SIZE;
    f726:	683b      	ldr	r3, [r7, #0]
    f728:	228a      	movs	r2, #138	; 0x8a
    f72a:	2123      	movs	r1, #35	; 0x23
    f72c:	5299      	strh	r1, [r3, r2]
    }

    atCalcCrc(packet);
    f72e:	683b      	ldr	r3, [r7, #0]
    f730:	0018      	movs	r0, r3
    f732:	4b03      	ldr	r3, [pc, #12]	; (f740 <atRead+0x44>)
    f734:	4798      	blx	r3
    return ATCA_SUCCESS;
    f736:	2300      	movs	r3, #0
}
    f738:	0018      	movs	r0, r3
    f73a:	46bd      	mov	sp, r7
    f73c:	b002      	add	sp, #8
    f73e:	bd80      	pop	{r7, pc}
    f740:	0000fa0d 	.word	0x0000fa0d

0000f744 <atSign>:
 * \param[in] ca_cmd   instance
 * \param[in] packet  pointer to the packet containing the command being built
 * \return ATCA_SUCCESS
 */
ATCA_STATUS atSign(ATCACommand ca_cmd, ATCAPacket *packet)
{
    f744:	b580      	push	{r7, lr}
    f746:	b082      	sub	sp, #8
    f748:	af00      	add	r7, sp, #0
    f74a:	6078      	str	r0, [r7, #4]
    f74c:	6039      	str	r1, [r7, #0]

    // Set the opcode & parameters
    packet->opcode = ATCA_SIGN;
    f74e:	683b      	ldr	r3, [r7, #0]
    f750:	2241      	movs	r2, #65	; 0x41
    f752:	709a      	strb	r2, [r3, #2]
    packet->txsize = SIGN_COUNT;
    f754:	683b      	ldr	r3, [r7, #0]
    f756:	2207      	movs	r2, #7
    f758:	705a      	strb	r2, [r3, #1]

    // could be a 64 or 72 byte response depending upon the key configuration for the KeyID
    packet->rxsize = ATCA_RSP_SIZE_64;
    f75a:	683b      	ldr	r3, [r7, #0]
    f75c:	228a      	movs	r2, #138	; 0x8a
    f75e:	2143      	movs	r1, #67	; 0x43
    f760:	5299      	strh	r1, [r3, r2]

    atCalcCrc(packet);
    f762:	683b      	ldr	r3, [r7, #0]
    f764:	0018      	movs	r0, r3
    f766:	4b03      	ldr	r3, [pc, #12]	; (f774 <atSign+0x30>)
    f768:	4798      	blx	r3
    return ATCA_SUCCESS;
    f76a:	2300      	movs	r3, #0
}
    f76c:	0018      	movs	r0, r3
    f76e:	46bd      	mov	sp, r7
    f770:	b002      	add	sp, #8
    f772:	bd80      	pop	{r7, pc}
    f774:	0000fa0d 	.word	0x0000fa0d

0000f778 <newATCACommand>:
/** \brief constructor for ATCACommand
 * \param[in] device_type - specifies which set of commands and execution times should be associated with this command object
 * \return ATCACommand instance
 */
ATCACommand newATCACommand(ATCADeviceType device_type)    // constructor
{
    f778:	b580      	push	{r7, lr}
    f77a:	b084      	sub	sp, #16
    f77c:	af00      	add	r7, sp, #0
    f77e:	0002      	movs	r2, r0
    f780:	1dfb      	adds	r3, r7, #7
    f782:	701a      	strb	r2, [r3, #0]
    ATCA_STATUS status = ATCA_SUCCESS;
    f784:	230b      	movs	r3, #11
    f786:	18fb      	adds	r3, r7, r3
    f788:	2200      	movs	r2, #0
    f78a:	701a      	strb	r2, [r3, #0]
    ATCACommand ca_cmd;

    ca_cmd = (ATCACommand)malloc(sizeof(atca_command));
    f78c:	2004      	movs	r0, #4
    f78e:	4b0d      	ldr	r3, [pc, #52]	; (f7c4 <newATCACommand+0x4c>)
    f790:	4798      	blx	r3
    f792:	0003      	movs	r3, r0
    f794:	60fb      	str	r3, [r7, #12]
    ca_cmd->dt = device_type;
    f796:	68fb      	ldr	r3, [r7, #12]
    f798:	1dfa      	adds	r2, r7, #7
    f79a:	7812      	ldrb	r2, [r2, #0]
    f79c:	701a      	strb	r2, [r3, #0]
    ca_cmd->clock_divider = 0;
    f79e:	68fb      	ldr	r3, [r7, #12]
    f7a0:	2200      	movs	r2, #0
    f7a2:	705a      	strb	r2, [r3, #1]
    if (status != ATCA_SUCCESS)
    f7a4:	230b      	movs	r3, #11
    f7a6:	18fb      	adds	r3, r7, r3
    f7a8:	781b      	ldrb	r3, [r3, #0]
    f7aa:	2b00      	cmp	r3, #0
    f7ac:	d005      	beq.n	f7ba <newATCACommand+0x42>
    {
        free(ca_cmd);
    f7ae:	68fb      	ldr	r3, [r7, #12]
    f7b0:	0018      	movs	r0, r3
    f7b2:	4b05      	ldr	r3, [pc, #20]	; (f7c8 <newATCACommand+0x50>)
    f7b4:	4798      	blx	r3
        ca_cmd = NULL;
    f7b6:	2300      	movs	r3, #0
    f7b8:	60fb      	str	r3, [r7, #12]
    }

    return ca_cmd;
    f7ba:	68fb      	ldr	r3, [r7, #12]
}
    f7bc:	0018      	movs	r0, r3
    f7be:	46bd      	mov	sp, r7
    f7c0:	b004      	add	sp, #16
    f7c2:	bd80      	pop	{r7, pc}
    f7c4:	0001c0bd 	.word	0x0001c0bd
    f7c8:	0001c0d1 	.word	0x0001c0d1

0000f7cc <deleteATCACommand>:

/** \brief ATCACommand destructor
 * \param[in] ca_cmd instance of a command object
 */
void deleteATCACommand(ATCACommand *ca_cmd)    // destructor
{
    f7cc:	b580      	push	{r7, lr}
    f7ce:	b082      	sub	sp, #8
    f7d0:	af00      	add	r7, sp, #0
    f7d2:	6078      	str	r0, [r7, #4]
    if (*ca_cmd)
    f7d4:	687b      	ldr	r3, [r7, #4]
    f7d6:	681b      	ldr	r3, [r3, #0]
    f7d8:	2b00      	cmp	r3, #0
    f7da:	d004      	beq.n	f7e6 <deleteATCACommand+0x1a>
    {
        free((void*)*ca_cmd);
    f7dc:	687b      	ldr	r3, [r7, #4]
    f7de:	681b      	ldr	r3, [r3, #0]
    f7e0:	0018      	movs	r0, r3
    f7e2:	4b04      	ldr	r3, [pc, #16]	; (f7f4 <deleteATCACommand+0x28>)
    f7e4:	4798      	blx	r3
    }

    *ca_cmd = NULL;
    f7e6:	687b      	ldr	r3, [r7, #4]
    f7e8:	2200      	movs	r2, #0
    f7ea:	601a      	str	r2, [r3, #0]
}
    f7ec:	46c0      	nop			; (mov r8, r8)
    f7ee:	46bd      	mov	sp, r7
    f7f0:	b002      	add	sp, #8
    f7f2:	bd80      	pop	{r7, pc}
    f7f4:	0001c0d1 	.word	0x0001c0d1

0000f7f8 <atGetExecTime>:
 *  \param[in] opcode  Opcode value of the command
 *  \param[in] ca_cmd  Command object for which the execution times are associated
 *  \return ATCA_SUCCESS
 */
ATCA_STATUS atGetExecTime(uint8_t opcode, ATCACommand ca_cmd)
{
    f7f8:	b580      	push	{r7, lr}
    f7fa:	b086      	sub	sp, #24
    f7fc:	af00      	add	r7, sp, #0
    f7fe:	0002      	movs	r2, r0
    f800:	6039      	str	r1, [r7, #0]
    f802:	1dfb      	adds	r3, r7, #7
    f804:	701a      	strb	r2, [r3, #0]
    ATCA_STATUS status = ATCA_SUCCESS;
    f806:	2317      	movs	r3, #23
    f808:	18fb      	adds	r3, r7, r3
    f80a:	2200      	movs	r2, #0
    f80c:	701a      	strb	r2, [r3, #0]
    const device_execution_time_t *execution_times;
    uint8_t i, no_of_commands;


    switch (ca_cmd->dt)
    f80e:	683b      	ldr	r3, [r7, #0]
    f810:	781b      	ldrb	r3, [r3, #0]
    f812:	2b01      	cmp	r3, #1
    f814:	d00f      	beq.n	f836 <atGetExecTime+0x3e>
    f816:	dc02      	bgt.n	f81e <atGetExecTime+0x26>
    f818:	2b00      	cmp	r3, #0
    f81a:	d005      	beq.n	f828 <atGetExecTime+0x30>
    f81c:	e036      	b.n	f88c <atGetExecTime+0x94>
    f81e:	2b02      	cmp	r3, #2
    f820:	d010      	beq.n	f844 <atGetExecTime+0x4c>
    f822:	2b03      	cmp	r3, #3
    f824:	d015      	beq.n	f852 <atGetExecTime+0x5a>
    f826:	e031      	b.n	f88c <atGetExecTime+0x94>
    {
    case ATSHA204A:
        execution_times = device_execution_time_204;
    f828:	4b3a      	ldr	r3, [pc, #232]	; (f914 <atGetExecTime+0x11c>)
    f82a:	613b      	str	r3, [r7, #16]
        no_of_commands = sizeof(device_execution_time_204) / sizeof(device_execution_time_t);
    f82c:	230e      	movs	r3, #14
    f82e:	18fb      	adds	r3, r7, r3
    f830:	220e      	movs	r2, #14
    f832:	701a      	strb	r2, [r3, #0]
        break;
    f834:	e031      	b.n	f89a <atGetExecTime+0xa2>

    case ATECC108A:
        execution_times = device_execution_time_108;
    f836:	4b38      	ldr	r3, [pc, #224]	; (f918 <atGetExecTime+0x120>)
    f838:	613b      	str	r3, [r7, #16]
        no_of_commands = sizeof(device_execution_time_108) / sizeof(device_execution_time_t);
    f83a:	230e      	movs	r3, #14
    f83c:	18fb      	adds	r3, r7, r3
    f83e:	2213      	movs	r2, #19
    f840:	701a      	strb	r2, [r3, #0]
        break;
    f842:	e02a      	b.n	f89a <atGetExecTime+0xa2>

    case ATECC508A:
        execution_times = device_execution_time_508;
    f844:	4b35      	ldr	r3, [pc, #212]	; (f91c <atGetExecTime+0x124>)
    f846:	613b      	str	r3, [r7, #16]
        no_of_commands = sizeof(device_execution_time_508) / sizeof(device_execution_time_t);
    f848:	230e      	movs	r3, #14
    f84a:	18fb      	adds	r3, r7, r3
    f84c:	2214      	movs	r2, #20
    f84e:	701a      	strb	r2, [r3, #0]
        break;
    f850:	e023      	b.n	f89a <atGetExecTime+0xa2>

    case ATECC608A:
        if (ca_cmd->clock_divider == ATCA_CHIPMODE_CLOCK_DIV_M1)
    f852:	683b      	ldr	r3, [r7, #0]
    f854:	785b      	ldrb	r3, [r3, #1]
    f856:	2b28      	cmp	r3, #40	; 0x28
    f858:	d106      	bne.n	f868 <atGetExecTime+0x70>
        {
            execution_times = device_execution_time_608_m1;
    f85a:	4b31      	ldr	r3, [pc, #196]	; (f920 <atGetExecTime+0x128>)
    f85c:	613b      	str	r3, [r7, #16]
            no_of_commands = sizeof(device_execution_time_608_m1) / sizeof(device_execution_time_t);
    f85e:	230e      	movs	r3, #14
    f860:	18fb      	adds	r3, r7, r3
    f862:	2216      	movs	r2, #22
    f864:	701a      	strb	r2, [r3, #0]
        {
            // Assume default M0 clock divider
            execution_times = device_execution_time_608_m0;
            no_of_commands = sizeof(device_execution_time_608_m0) / sizeof(device_execution_time_t);
        }
        break;
    f866:	e018      	b.n	f89a <atGetExecTime+0xa2>
        else if (ca_cmd->clock_divider == ATCA_CHIPMODE_CLOCK_DIV_M2)
    f868:	683b      	ldr	r3, [r7, #0]
    f86a:	785b      	ldrb	r3, [r3, #1]
    f86c:	2b68      	cmp	r3, #104	; 0x68
    f86e:	d106      	bne.n	f87e <atGetExecTime+0x86>
            execution_times = device_execution_time_608_m2;
    f870:	4b2c      	ldr	r3, [pc, #176]	; (f924 <atGetExecTime+0x12c>)
    f872:	613b      	str	r3, [r7, #16]
            no_of_commands = sizeof(device_execution_time_608_m2) / sizeof(device_execution_time_t);
    f874:	230e      	movs	r3, #14
    f876:	18fb      	adds	r3, r7, r3
    f878:	2216      	movs	r2, #22
    f87a:	701a      	strb	r2, [r3, #0]
        break;
    f87c:	e00d      	b.n	f89a <atGetExecTime+0xa2>
            execution_times = device_execution_time_608_m0;
    f87e:	4b2a      	ldr	r3, [pc, #168]	; (f928 <atGetExecTime+0x130>)
    f880:	613b      	str	r3, [r7, #16]
            no_of_commands = sizeof(device_execution_time_608_m0) / sizeof(device_execution_time_t);
    f882:	230e      	movs	r3, #14
    f884:	18fb      	adds	r3, r7, r3
    f886:	2216      	movs	r2, #22
    f888:	701a      	strb	r2, [r3, #0]
        break;
    f88a:	e006      	b.n	f89a <atGetExecTime+0xa2>

    default:
        no_of_commands = 0;
    f88c:	230e      	movs	r3, #14
    f88e:	18fb      	adds	r3, r7, r3
    f890:	2200      	movs	r2, #0
    f892:	701a      	strb	r2, [r3, #0]
        execution_times = NULL;
    f894:	2300      	movs	r3, #0
    f896:	613b      	str	r3, [r7, #16]
        break;
    f898:	46c0      	nop			; (mov r8, r8)
    }

    ca_cmd->execution_time_msec = UNSUPPORTED;
    f89a:	683b      	ldr	r3, [r7, #0]
    f89c:	2201      	movs	r2, #1
    f89e:	4252      	negs	r2, r2
    f8a0:	805a      	strh	r2, [r3, #2]

    for (i = 0; i < no_of_commands; i++)
    f8a2:	230f      	movs	r3, #15
    f8a4:	18fb      	adds	r3, r7, r3
    f8a6:	2200      	movs	r2, #0
    f8a8:	701a      	strb	r2, [r3, #0]
    f8aa:	e01b      	b.n	f8e4 <atGetExecTime+0xec>
    {
        if (execution_times[i].opcode == opcode)
    f8ac:	230f      	movs	r3, #15
    f8ae:	18fb      	adds	r3, r7, r3
    f8b0:	781b      	ldrb	r3, [r3, #0]
    f8b2:	009b      	lsls	r3, r3, #2
    f8b4:	693a      	ldr	r2, [r7, #16]
    f8b6:	18d3      	adds	r3, r2, r3
    f8b8:	781b      	ldrb	r3, [r3, #0]
    f8ba:	1dfa      	adds	r2, r7, #7
    f8bc:	7812      	ldrb	r2, [r2, #0]
    f8be:	429a      	cmp	r2, r3
    f8c0:	d109      	bne.n	f8d6 <atGetExecTime+0xde>
        {
            ca_cmd->execution_time_msec = execution_times[i].execution_time_msec;
    f8c2:	230f      	movs	r3, #15
    f8c4:	18fb      	adds	r3, r7, r3
    f8c6:	781b      	ldrb	r3, [r3, #0]
    f8c8:	009b      	lsls	r3, r3, #2
    f8ca:	693a      	ldr	r2, [r7, #16]
    f8cc:	18d3      	adds	r3, r2, r3
    f8ce:	885a      	ldrh	r2, [r3, #2]
    f8d0:	683b      	ldr	r3, [r7, #0]
    f8d2:	805a      	strh	r2, [r3, #2]
            break;
    f8d4:	e00e      	b.n	f8f4 <atGetExecTime+0xfc>
    for (i = 0; i < no_of_commands; i++)
    f8d6:	230f      	movs	r3, #15
    f8d8:	18fb      	adds	r3, r7, r3
    f8da:	781a      	ldrb	r2, [r3, #0]
    f8dc:	230f      	movs	r3, #15
    f8de:	18fb      	adds	r3, r7, r3
    f8e0:	3201      	adds	r2, #1
    f8e2:	701a      	strb	r2, [r3, #0]
    f8e4:	230f      	movs	r3, #15
    f8e6:	18fa      	adds	r2, r7, r3
    f8e8:	230e      	movs	r3, #14
    f8ea:	18fb      	adds	r3, r7, r3
    f8ec:	7812      	ldrb	r2, [r2, #0]
    f8ee:	781b      	ldrb	r3, [r3, #0]
    f8f0:	429a      	cmp	r2, r3
    f8f2:	d3db      	bcc.n	f8ac <atGetExecTime+0xb4>
        }
    }

    if (ca_cmd->execution_time_msec == UNSUPPORTED)
    f8f4:	683b      	ldr	r3, [r7, #0]
    f8f6:	885b      	ldrh	r3, [r3, #2]
    f8f8:	4a0c      	ldr	r2, [pc, #48]	; (f92c <atGetExecTime+0x134>)
    f8fa:	4293      	cmp	r3, r2
    f8fc:	d103      	bne.n	f906 <atGetExecTime+0x10e>
    {
        status = ATCA_BAD_OPCODE;
    f8fe:	2317      	movs	r3, #23
    f900:	18fb      	adds	r3, r7, r3
    f902:	22f2      	movs	r2, #242	; 0xf2
    f904:	701a      	strb	r2, [r3, #0]
    }

    return status;
    f906:	2317      	movs	r3, #23
    f908:	18fb      	adds	r3, r7, r3
    f90a:	781b      	ldrb	r3, [r3, #0]
}
    f90c:	0018      	movs	r0, r3
    f90e:	46bd      	mov	sp, r7
    f910:	b006      	add	sp, #24
    f912:	bd80      	pop	{r7, pc}
    f914:	00020a8c 	.word	0x00020a8c
    f918:	00020ac4 	.word	0x00020ac4
    f91c:	00020b10 	.word	0x00020b10
    f920:	00020bb8 	.word	0x00020bb8
    f924:	00020c10 	.word	0x00020c10
    f928:	00020b60 	.word	0x00020b60
    f92c:	0000ffff 	.word	0x0000ffff

0000f930 <atCRC>:
 * \param[in]  data    Pointer to the data over which to compute the CRC
 * \param[out] crc_le  Pointer to the place where the two-bytes of CRC will be
 *                     returned in little-endian byte order.
 */
void atCRC(size_t length, const uint8_t *data, uint8_t *crc_le)
{
    f930:	b580      	push	{r7, lr}
    f932:	b088      	sub	sp, #32
    f934:	af00      	add	r7, sp, #0
    f936:	60f8      	str	r0, [r7, #12]
    f938:	60b9      	str	r1, [r7, #8]
    f93a:	607a      	str	r2, [r7, #4]
    size_t counter;
    uint16_t crc_register = 0;
    f93c:	231a      	movs	r3, #26
    f93e:	18fb      	adds	r3, r7, r3
    f940:	2200      	movs	r2, #0
    f942:	801a      	strh	r2, [r3, #0]
    uint16_t polynom = 0x8005;
    f944:	2316      	movs	r3, #22
    f946:	18fb      	adds	r3, r7, r3
    f948:	4a2f      	ldr	r2, [pc, #188]	; (fa08 <atCRC+0xd8>)
    f94a:	801a      	strh	r2, [r3, #0]
    uint8_t shift_register;
    uint8_t data_bit, crc_bit;

    for (counter = 0; counter < length; counter++)
    f94c:	2300      	movs	r3, #0
    f94e:	61fb      	str	r3, [r7, #28]
    f950:	e043      	b.n	f9da <atCRC+0xaa>
    {
        for (shift_register = 0x01; shift_register > 0x00; shift_register <<= 1)
    f952:	2319      	movs	r3, #25
    f954:	18fb      	adds	r3, r7, r3
    f956:	2201      	movs	r2, #1
    f958:	701a      	strb	r2, [r3, #0]
    f95a:	e036      	b.n	f9ca <atCRC+0x9a>
        {
            data_bit = (data[counter] & shift_register) ? 1 : 0;
    f95c:	68ba      	ldr	r2, [r7, #8]
    f95e:	69fb      	ldr	r3, [r7, #28]
    f960:	18d3      	adds	r3, r2, r3
    f962:	781b      	ldrb	r3, [r3, #0]
    f964:	2219      	movs	r2, #25
    f966:	18ba      	adds	r2, r7, r2
    f968:	7812      	ldrb	r2, [r2, #0]
    f96a:	4013      	ands	r3, r2
    f96c:	b2db      	uxtb	r3, r3
    f96e:	1e5a      	subs	r2, r3, #1
    f970:	4193      	sbcs	r3, r2
    f972:	b2da      	uxtb	r2, r3
    f974:	2315      	movs	r3, #21
    f976:	18fb      	adds	r3, r7, r3
    f978:	701a      	strb	r2, [r3, #0]
            crc_bit = crc_register >> 15;
    f97a:	231a      	movs	r3, #26
    f97c:	18fb      	adds	r3, r7, r3
    f97e:	881b      	ldrh	r3, [r3, #0]
    f980:	0bdb      	lsrs	r3, r3, #15
    f982:	b29a      	uxth	r2, r3
    f984:	2314      	movs	r3, #20
    f986:	18fb      	adds	r3, r7, r3
    f988:	701a      	strb	r2, [r3, #0]
            crc_register <<= 1;
    f98a:	231a      	movs	r3, #26
    f98c:	18fa      	adds	r2, r7, r3
    f98e:	231a      	movs	r3, #26
    f990:	18fb      	adds	r3, r7, r3
    f992:	881b      	ldrh	r3, [r3, #0]
    f994:	18db      	adds	r3, r3, r3
    f996:	8013      	strh	r3, [r2, #0]
            if (data_bit != crc_bit)
    f998:	2315      	movs	r3, #21
    f99a:	18fa      	adds	r2, r7, r3
    f99c:	2314      	movs	r3, #20
    f99e:	18fb      	adds	r3, r7, r3
    f9a0:	7812      	ldrb	r2, [r2, #0]
    f9a2:	781b      	ldrb	r3, [r3, #0]
    f9a4:	429a      	cmp	r2, r3
    f9a6:	d009      	beq.n	f9bc <atCRC+0x8c>
            {
                crc_register ^= polynom;
    f9a8:	231a      	movs	r3, #26
    f9aa:	18fb      	adds	r3, r7, r3
    f9ac:	221a      	movs	r2, #26
    f9ae:	18b9      	adds	r1, r7, r2
    f9b0:	2216      	movs	r2, #22
    f9b2:	18ba      	adds	r2, r7, r2
    f9b4:	8809      	ldrh	r1, [r1, #0]
    f9b6:	8812      	ldrh	r2, [r2, #0]
    f9b8:	404a      	eors	r2, r1
    f9ba:	801a      	strh	r2, [r3, #0]
        for (shift_register = 0x01; shift_register > 0x00; shift_register <<= 1)
    f9bc:	2319      	movs	r3, #25
    f9be:	18fa      	adds	r2, r7, r3
    f9c0:	2319      	movs	r3, #25
    f9c2:	18fb      	adds	r3, r7, r3
    f9c4:	781b      	ldrb	r3, [r3, #0]
    f9c6:	18db      	adds	r3, r3, r3
    f9c8:	7013      	strb	r3, [r2, #0]
    f9ca:	2319      	movs	r3, #25
    f9cc:	18fb      	adds	r3, r7, r3
    f9ce:	781b      	ldrb	r3, [r3, #0]
    f9d0:	2b00      	cmp	r3, #0
    f9d2:	d1c3      	bne.n	f95c <atCRC+0x2c>
    for (counter = 0; counter < length; counter++)
    f9d4:	69fb      	ldr	r3, [r7, #28]
    f9d6:	3301      	adds	r3, #1
    f9d8:	61fb      	str	r3, [r7, #28]
    f9da:	69fa      	ldr	r2, [r7, #28]
    f9dc:	68fb      	ldr	r3, [r7, #12]
    f9de:	429a      	cmp	r2, r3
    f9e0:	d3b7      	bcc.n	f952 <atCRC+0x22>
            }
        }
    }
    crc_le[0] = (uint8_t)(crc_register & 0x00FF);
    f9e2:	231a      	movs	r3, #26
    f9e4:	18fb      	adds	r3, r7, r3
    f9e6:	881b      	ldrh	r3, [r3, #0]
    f9e8:	b2da      	uxtb	r2, r3
    f9ea:	687b      	ldr	r3, [r7, #4]
    f9ec:	701a      	strb	r2, [r3, #0]
    crc_le[1] = (uint8_t)(crc_register >> 8);
    f9ee:	687b      	ldr	r3, [r7, #4]
    f9f0:	3301      	adds	r3, #1
    f9f2:	221a      	movs	r2, #26
    f9f4:	18ba      	adds	r2, r7, r2
    f9f6:	8812      	ldrh	r2, [r2, #0]
    f9f8:	0a12      	lsrs	r2, r2, #8
    f9fa:	b292      	uxth	r2, r2
    f9fc:	b2d2      	uxtb	r2, r2
    f9fe:	701a      	strb	r2, [r3, #0]
}
    fa00:	46c0      	nop			; (mov r8, r8)
    fa02:	46bd      	mov	sp, r7
    fa04:	b008      	add	sp, #32
    fa06:	bd80      	pop	{r7, pc}
    fa08:	ffff8005 	.word	0xffff8005

0000fa0c <atCalcCrc>:
/** \brief This function calculates CRC and adds it to the correct offset in the packet data
 * \param[in] packet Packet to calculate CRC data for
 */

void atCalcCrc(ATCAPacket *packet)
{
    fa0c:	b580      	push	{r7, lr}
    fa0e:	b084      	sub	sp, #16
    fa10:	af00      	add	r7, sp, #0
    fa12:	6078      	str	r0, [r7, #4]
    uint8_t length, *crc;

    length = packet->txsize - ATCA_CRC_SIZE;
    fa14:	687b      	ldr	r3, [r7, #4]
    fa16:	785a      	ldrb	r2, [r3, #1]
    fa18:	230f      	movs	r3, #15
    fa1a:	18fb      	adds	r3, r7, r3
    fa1c:	3a02      	subs	r2, #2
    fa1e:	701a      	strb	r2, [r3, #0]
    // computer pointer to CRC in the packet
    crc = &(packet->txsize) + length;
    fa20:	687b      	ldr	r3, [r7, #4]
    fa22:	1c5a      	adds	r2, r3, #1
    fa24:	230f      	movs	r3, #15
    fa26:	18fb      	adds	r3, r7, r3
    fa28:	781b      	ldrb	r3, [r3, #0]
    fa2a:	18d3      	adds	r3, r2, r3
    fa2c:	60bb      	str	r3, [r7, #8]

    // stuff CRC into packet
    atCRC(length, &(packet->txsize), crc);
    fa2e:	230f      	movs	r3, #15
    fa30:	18fb      	adds	r3, r7, r3
    fa32:	7818      	ldrb	r0, [r3, #0]
    fa34:	687b      	ldr	r3, [r7, #4]
    fa36:	3301      	adds	r3, #1
    fa38:	68ba      	ldr	r2, [r7, #8]
    fa3a:	0019      	movs	r1, r3
    fa3c:	4b02      	ldr	r3, [pc, #8]	; (fa48 <atCalcCrc+0x3c>)
    fa3e:	4798      	blx	r3
}
    fa40:	46c0      	nop			; (mov r8, r8)
    fa42:	46bd      	mov	sp, r7
    fa44:	b004      	add	sp, #16
    fa46:	bd80      	pop	{r7, pc}
    fa48:	0000f931 	.word	0x0000f931

0000fa4c <atCheckCrc>:
 * \param[in] response pointer to response
 * \return ATCA_SUCCESS on success, otherwise ATCA_RX_CRC_ERROR
 */

ATCA_STATUS atCheckCrc(const uint8_t *response)
{
    fa4c:	b580      	push	{r7, lr}
    fa4e:	b084      	sub	sp, #16
    fa50:	af00      	add	r7, sp, #0
    fa52:	6078      	str	r0, [r7, #4]
    uint8_t crc[ATCA_CRC_SIZE];
    uint8_t count = response[ATCA_COUNT_IDX];
    fa54:	230f      	movs	r3, #15
    fa56:	18fb      	adds	r3, r7, r3
    fa58:	687a      	ldr	r2, [r7, #4]
    fa5a:	7812      	ldrb	r2, [r2, #0]
    fa5c:	701a      	strb	r2, [r3, #0]

    count -= ATCA_CRC_SIZE;
    fa5e:	230f      	movs	r3, #15
    fa60:	18fb      	adds	r3, r7, r3
    fa62:	220f      	movs	r2, #15
    fa64:	18ba      	adds	r2, r7, r2
    fa66:	7812      	ldrb	r2, [r2, #0]
    fa68:	3a02      	subs	r2, #2
    fa6a:	701a      	strb	r2, [r3, #0]
    atCRC(count, response, crc);
    fa6c:	230f      	movs	r3, #15
    fa6e:	18fb      	adds	r3, r7, r3
    fa70:	781b      	ldrb	r3, [r3, #0]
    fa72:	220c      	movs	r2, #12
    fa74:	18ba      	adds	r2, r7, r2
    fa76:	6879      	ldr	r1, [r7, #4]
    fa78:	0018      	movs	r0, r3
    fa7a:	4b10      	ldr	r3, [pc, #64]	; (fabc <atCheckCrc+0x70>)
    fa7c:	4798      	blx	r3

    return (crc[0] == response[count] && crc[1] == response[count + 1]) ? ATCA_SUCCESS : ATCA_RX_CRC_ERROR;
    fa7e:	230c      	movs	r3, #12
    fa80:	18fb      	adds	r3, r7, r3
    fa82:	781a      	ldrb	r2, [r3, #0]
    fa84:	230f      	movs	r3, #15
    fa86:	18fb      	adds	r3, r7, r3
    fa88:	781b      	ldrb	r3, [r3, #0]
    fa8a:	6879      	ldr	r1, [r7, #4]
    fa8c:	18cb      	adds	r3, r1, r3
    fa8e:	781b      	ldrb	r3, [r3, #0]
    fa90:	429a      	cmp	r2, r3
    fa92:	d10d      	bne.n	fab0 <atCheckCrc+0x64>
    fa94:	230c      	movs	r3, #12
    fa96:	18fb      	adds	r3, r7, r3
    fa98:	785a      	ldrb	r2, [r3, #1]
    fa9a:	230f      	movs	r3, #15
    fa9c:	18fb      	adds	r3, r7, r3
    fa9e:	781b      	ldrb	r3, [r3, #0]
    faa0:	3301      	adds	r3, #1
    faa2:	6879      	ldr	r1, [r7, #4]
    faa4:	18cb      	adds	r3, r1, r3
    faa6:	781b      	ldrb	r3, [r3, #0]
    faa8:	429a      	cmp	r2, r3
    faaa:	d101      	bne.n	fab0 <atCheckCrc+0x64>
    faac:	2300      	movs	r3, #0
    faae:	e000      	b.n	fab2 <atCheckCrc+0x66>
    fab0:	23e5      	movs	r3, #229	; 0xe5
}
    fab2:	0018      	movs	r0, r3
    fab4:	46bd      	mov	sp, r7
    fab6:	b004      	add	sp, #16
    fab8:	bd80      	pop	{r7, pc}
    faba:	46c0      	nop			; (mov r8, r8)
    fabc:	0000f931 	.word	0x0000f931

0000fac0 <isATCAError>:
 * \param[in] data pointer to received data - expected to be in the form of a CA device response frame
 * \return ATCA_SUCCESS on success, otherwise an error code.
 */

ATCA_STATUS isATCAError(uint8_t *data)
{
    fac0:	b580      	push	{r7, lr}
    fac2:	b084      	sub	sp, #16
    fac4:	af00      	add	r7, sp, #0
    fac6:	6078      	str	r0, [r7, #4]
    uint8_t good[4] = { 0x04, 0x00, 0x03, 0x40 };
    fac8:	230c      	movs	r3, #12
    faca:	18fb      	adds	r3, r7, r3
    facc:	4a1d      	ldr	r2, [pc, #116]	; (fb44 <isATCAError+0x84>)
    face:	6812      	ldr	r2, [r2, #0]
    fad0:	601a      	str	r2, [r3, #0]

    if (memcmp(data, good, 4) == 0)
    fad2:	230c      	movs	r3, #12
    fad4:	18f9      	adds	r1, r7, r3
    fad6:	687b      	ldr	r3, [r7, #4]
    fad8:	2204      	movs	r2, #4
    fada:	0018      	movs	r0, r3
    fadc:	4b1a      	ldr	r3, [pc, #104]	; (fb48 <isATCAError+0x88>)
    fade:	4798      	blx	r3
    fae0:	1e03      	subs	r3, r0, #0
    fae2:	d101      	bne.n	fae8 <isATCAError+0x28>
    {
        return ATCA_SUCCESS;
    fae4:	2300      	movs	r3, #0
    fae6:	e028      	b.n	fb3a <isATCAError+0x7a>
    }

    if (data[0] == 0x04)        // error packets are always 4 bytes long
    fae8:	687b      	ldr	r3, [r7, #4]
    faea:	781b      	ldrb	r3, [r3, #0]
    faec:	2b04      	cmp	r3, #4
    faee:	d123      	bne.n	fb38 <isATCAError+0x78>
    {
        switch (data[1])
    faf0:	687b      	ldr	r3, [r7, #4]
    faf2:	3301      	adds	r3, #1
    faf4:	781b      	ldrb	r3, [r3, #0]
    faf6:	2b07      	cmp	r3, #7
    faf8:	d014      	beq.n	fb24 <isATCAError+0x64>
    fafa:	dc06      	bgt.n	fb0a <isATCAError+0x4a>
    fafc:	2b03      	cmp	r3, #3
    fafe:	d00d      	beq.n	fb1c <isATCAError+0x5c>
    fb00:	2b05      	cmp	r3, #5
    fb02:	d00d      	beq.n	fb20 <isATCAError+0x60>
    fb04:	2b01      	cmp	r3, #1
    fb06:	d007      	beq.n	fb18 <isATCAError+0x58>
    fb08:	e014      	b.n	fb34 <isATCAError+0x74>
    fb0a:	2b11      	cmp	r3, #17
    fb0c:	d00e      	beq.n	fb2c <isATCAError+0x6c>
    fb0e:	2bff      	cmp	r3, #255	; 0xff
    fb10:	d00e      	beq.n	fb30 <isATCAError+0x70>
    fb12:	2b0f      	cmp	r3, #15
    fb14:	d008      	beq.n	fb28 <isATCAError+0x68>
    fb16:	e00d      	b.n	fb34 <isATCAError+0x74>
        {
        case 0x01: // checkmac or verify failed
            return ATCA_CHECKMAC_VERIFY_FAILED;
    fb18:	23d1      	movs	r3, #209	; 0xd1
    fb1a:	e00e      	b.n	fb3a <isATCAError+0x7a>
            break;
        case 0x03: // command received byte length, opcode or parameter was illegal
            return ATCA_PARSE_ERROR;
    fb1c:	23d2      	movs	r3, #210	; 0xd2
    fb1e:	e00c      	b.n	fb3a <isATCAError+0x7a>
            break;
        case 0x05: // computation error during ECC processing causing invalid results
            return ATCA_STATUS_ECC;
    fb20:	23d6      	movs	r3, #214	; 0xd6
    fb22:	e00a      	b.n	fb3a <isATCAError+0x7a>
            break;
        case 0x07: // chip is in self test failure mode
            return ATCA_STATUS_SELFTEST_ERROR;
    fb24:	23d7      	movs	r3, #215	; 0xd7
    fb26:	e008      	b.n	fb3a <isATCAError+0x7a>
            break;
        case 0x0f: // chip can't execute the command
            return ATCA_EXECUTION_ERROR;
    fb28:	23f4      	movs	r3, #244	; 0xf4
    fb2a:	e006      	b.n	fb3a <isATCAError+0x7a>
            break;
        case 0x11: // chip was successfully woken up
            return ATCA_WAKE_SUCCESS;
    fb2c:	23f3      	movs	r3, #243	; 0xf3
    fb2e:	e004      	b.n	fb3a <isATCAError+0x7a>
            break;
        case 0xff: // bad crc found (command not properly received by device) or other comm error
            return ATCA_STATUS_CRC;
    fb30:	23d4      	movs	r3, #212	; 0xd4
    fb32:	e002      	b.n	fb3a <isATCAError+0x7a>
            break;
        default:
            return ATCA_GEN_FAIL;
    fb34:	23e1      	movs	r3, #225	; 0xe1
    fb36:	e000      	b.n	fb3a <isATCAError+0x7a>
            break;
        }
    }
    else
    {
        return ATCA_SUCCESS;
    fb38:	2300      	movs	r3, #0
    }
}
    fb3a:	0018      	movs	r0, r3
    fb3c:	46bd      	mov	sp, r7
    fb3e:	b004      	add	sp, #16
    fb40:	bd80      	pop	{r7, pc}
    fb42:	46c0      	nop			; (mov r8, r8)
    fb44:	00020c68 	.word	0x00020c68
    fb48:	0001c11f 	.word	0x0001c11f

0000fb4c <newATCADevice>:
 * \param[in] cfg  pointer to an interface configuration object
 * \return reference to a new ATCADevice
 */

ATCADevice newATCADevice(ATCAIfaceCfg *cfg)
{
    fb4c:	b580      	push	{r7, lr}
    fb4e:	b084      	sub	sp, #16
    fb50:	af00      	add	r7, sp, #0
    fb52:	6078      	str	r0, [r7, #4]
    ATCADevice ca_dev = NULL;
    fb54:	2300      	movs	r3, #0
    fb56:	60fb      	str	r3, [r7, #12]

    if (cfg == NULL)
    fb58:	687b      	ldr	r3, [r7, #4]
    fb5a:	2b00      	cmp	r3, #0
    fb5c:	d101      	bne.n	fb62 <newATCADevice+0x16>
    {
        return NULL;
    fb5e:	2300      	movs	r3, #0
    fb60:	e022      	b.n	fba8 <newATCADevice+0x5c>
    }

    ca_dev = (ATCADevice)malloc(sizeof(struct atca_device));
    fb62:	2008      	movs	r0, #8
    fb64:	4b12      	ldr	r3, [pc, #72]	; (fbb0 <newATCADevice+0x64>)
    fb66:	4798      	blx	r3
    fb68:	0003      	movs	r3, r0
    fb6a:	60fb      	str	r3, [r7, #12]
    ca_dev->mCommands = (ATCACommand)newATCACommand(cfg->devtype);
    fb6c:	687b      	ldr	r3, [r7, #4]
    fb6e:	785b      	ldrb	r3, [r3, #1]
    fb70:	0018      	movs	r0, r3
    fb72:	4b10      	ldr	r3, [pc, #64]	; (fbb4 <newATCADevice+0x68>)
    fb74:	4798      	blx	r3
    fb76:	0002      	movs	r2, r0
    fb78:	68fb      	ldr	r3, [r7, #12]
    fb7a:	601a      	str	r2, [r3, #0]
    ca_dev->mIface    = (ATCAIface)newATCAIface(cfg);
    fb7c:	687b      	ldr	r3, [r7, #4]
    fb7e:	0018      	movs	r0, r3
    fb80:	4b0d      	ldr	r3, [pc, #52]	; (fbb8 <newATCADevice+0x6c>)
    fb82:	4798      	blx	r3
    fb84:	0002      	movs	r2, r0
    fb86:	68fb      	ldr	r3, [r7, #12]
    fb88:	605a      	str	r2, [r3, #4]

    if (ca_dev->mCommands == NULL || ca_dev->mIface == NULL)
    fb8a:	68fb      	ldr	r3, [r7, #12]
    fb8c:	681b      	ldr	r3, [r3, #0]
    fb8e:	2b00      	cmp	r3, #0
    fb90:	d003      	beq.n	fb9a <newATCADevice+0x4e>
    fb92:	68fb      	ldr	r3, [r7, #12]
    fb94:	685b      	ldr	r3, [r3, #4]
    fb96:	2b00      	cmp	r3, #0
    fb98:	d105      	bne.n	fba6 <newATCADevice+0x5a>
    {
        free(ca_dev);
    fb9a:	68fb      	ldr	r3, [r7, #12]
    fb9c:	0018      	movs	r0, r3
    fb9e:	4b07      	ldr	r3, [pc, #28]	; (fbbc <newATCADevice+0x70>)
    fba0:	4798      	blx	r3
        ca_dev = NULL;
    fba2:	2300      	movs	r3, #0
    fba4:	60fb      	str	r3, [r7, #12]
    }

    return ca_dev;
    fba6:	68fb      	ldr	r3, [r7, #12]
}
    fba8:	0018      	movs	r0, r3
    fbaa:	46bd      	mov	sp, r7
    fbac:	b004      	add	sp, #16
    fbae:	bd80      	pop	{r7, pc}
    fbb0:	0001c0bd 	.word	0x0001c0bd
    fbb4:	0000f779 	.word	0x0000f779
    fbb8:	0000fc35 	.word	0x0000fc35
    fbbc:	0001c0d1 	.word	0x0001c0d1

0000fbc0 <atGetCommands>:
/** \brief returns a reference to the ATCACommand object for the device
 * \param[in] dev  reference to a device
 * \return reference to the ATCACommand object for the device
 */
ATCACommand atGetCommands(ATCADevice dev)
{
    fbc0:	b580      	push	{r7, lr}
    fbc2:	b082      	sub	sp, #8
    fbc4:	af00      	add	r7, sp, #0
    fbc6:	6078      	str	r0, [r7, #4]
    return dev->mCommands;
    fbc8:	687b      	ldr	r3, [r7, #4]
    fbca:	681b      	ldr	r3, [r3, #0]
}
    fbcc:	0018      	movs	r0, r3
    fbce:	46bd      	mov	sp, r7
    fbd0:	b002      	add	sp, #8
    fbd2:	bd80      	pop	{r7, pc}

0000fbd4 <atGetIFace>:
 * \param[in] dev  reference to a device
 * \return reference to the ATCAIface object for the device
 */

ATCAIface atGetIFace(ATCADevice dev)
{
    fbd4:	b580      	push	{r7, lr}
    fbd6:	b082      	sub	sp, #8
    fbd8:	af00      	add	r7, sp, #0
    fbda:	6078      	str	r0, [r7, #4]
    return dev->mIface;
    fbdc:	687b      	ldr	r3, [r7, #4]
    fbde:	685b      	ldr	r3, [r3, #4]
}
    fbe0:	0018      	movs	r0, r3
    fbe2:	46bd      	mov	sp, r7
    fbe4:	b002      	add	sp, #8
    fbe6:	bd80      	pop	{r7, pc}

0000fbe8 <deleteATCADevice>:
/** \brief destructor for a device NULLs reference after object is freed
 * \param[in] ca_dev  pointer to a reference to a device
 *
 */
void deleteATCADevice(ATCADevice *ca_dev)   // destructor
{
    fbe8:	b580      	push	{r7, lr}
    fbea:	b084      	sub	sp, #16
    fbec:	af00      	add	r7, sp, #0
    fbee:	6078      	str	r0, [r7, #4]
    struct atca_device *dev = *ca_dev;
    fbf0:	687b      	ldr	r3, [r7, #4]
    fbf2:	681b      	ldr	r3, [r3, #0]
    fbf4:	60fb      	str	r3, [r7, #12]

    if (*ca_dev)
    fbf6:	687b      	ldr	r3, [r7, #4]
    fbf8:	681b      	ldr	r3, [r3, #0]
    fbfa:	2b00      	cmp	r3, #0
    fbfc:	d00d      	beq.n	fc1a <deleteATCADevice+0x32>
    {
        deleteATCACommand( (ATCACommand*)&(dev->mCommands));
    fbfe:	68fb      	ldr	r3, [r7, #12]
    fc00:	0018      	movs	r0, r3
    fc02:	4b09      	ldr	r3, [pc, #36]	; (fc28 <deleteATCADevice+0x40>)
    fc04:	4798      	blx	r3
        deleteATCAIface((ATCAIface*)&(dev->mIface));
    fc06:	68fb      	ldr	r3, [r7, #12]
    fc08:	3304      	adds	r3, #4
    fc0a:	0018      	movs	r0, r3
    fc0c:	4b07      	ldr	r3, [pc, #28]	; (fc2c <deleteATCADevice+0x44>)
    fc0e:	4798      	blx	r3
        free((void*)*ca_dev);
    fc10:	687b      	ldr	r3, [r7, #4]
    fc12:	681b      	ldr	r3, [r3, #0]
    fc14:	0018      	movs	r0, r3
    fc16:	4b06      	ldr	r3, [pc, #24]	; (fc30 <deleteATCADevice+0x48>)
    fc18:	4798      	blx	r3
    }

    *ca_dev = NULL;
    fc1a:	687b      	ldr	r3, [r7, #4]
    fc1c:	2200      	movs	r2, #0
    fc1e:	601a      	str	r2, [r3, #0]
}
    fc20:	46c0      	nop			; (mov r8, r8)
    fc22:	46bd      	mov	sp, r7
    fc24:	b004      	add	sp, #16
    fc26:	bd80      	pop	{r7, pc}
    fc28:	0000f7cd 	.word	0x0000f7cd
    fc2c:	0000fdd1 	.word	0x0000fdd1
    fc30:	0001c0d1 	.word	0x0001c0d1

0000fc34 <newATCAIface>:
 * \param[in] cfg  points to the logical configuration for the interface
 * \return ATCAIface
 */

ATCAIface newATCAIface(ATCAIfaceCfg *cfg)  // constructor
{
    fc34:	b580      	push	{r7, lr}
    fc36:	b084      	sub	sp, #16
    fc38:	af00      	add	r7, sp, #0
    fc3a:	6078      	str	r0, [r7, #4]
    ATCAIface ca_iface;

    ca_iface = (ATCAIface)malloc(sizeof(struct atca_iface));
    fc3c:	2028      	movs	r0, #40	; 0x28
    fc3e:	4b0e      	ldr	r3, [pc, #56]	; (fc78 <newATCAIface+0x44>)
    fc40:	4798      	blx	r3
    fc42:	0003      	movs	r3, r0
    fc44:	60fb      	str	r3, [r7, #12]
    ca_iface->mType = cfg->iface_type;
    fc46:	687b      	ldr	r3, [r7, #4]
    fc48:	781a      	ldrb	r2, [r3, #0]
    fc4a:	68fb      	ldr	r3, [r7, #12]
    fc4c:	701a      	strb	r2, [r3, #0]
    ca_iface->mIfaceCFG = cfg;
    fc4e:	68fb      	ldr	r3, [r7, #12]
    fc50:	687a      	ldr	r2, [r7, #4]
    fc52:	605a      	str	r2, [r3, #4]

    if (atinit(ca_iface) != ATCA_SUCCESS)
    fc54:	68fb      	ldr	r3, [r7, #12]
    fc56:	0018      	movs	r0, r3
    fc58:	4b08      	ldr	r3, [pc, #32]	; (fc7c <newATCAIface+0x48>)
    fc5a:	4798      	blx	r3
    fc5c:	1e03      	subs	r3, r0, #0
    fc5e:	d005      	beq.n	fc6c <newATCAIface+0x38>
    {
        free(ca_iface);
    fc60:	68fb      	ldr	r3, [r7, #12]
    fc62:	0018      	movs	r0, r3
    fc64:	4b06      	ldr	r3, [pc, #24]	; (fc80 <newATCAIface+0x4c>)
    fc66:	4798      	blx	r3
        ca_iface = NULL;
    fc68:	2300      	movs	r3, #0
    fc6a:	60fb      	str	r3, [r7, #12]
    }

    return ca_iface;
    fc6c:	68fb      	ldr	r3, [r7, #12]
}
    fc6e:	0018      	movs	r0, r3
    fc70:	46bd      	mov	sp, r7
    fc72:	b004      	add	sp, #16
    fc74:	bd80      	pop	{r7, pc}
    fc76:	46c0      	nop			; (mov r8, r8)
    fc78:	0001c0bd 	.word	0x0001c0bd
    fc7c:	0000fc85 	.word	0x0000fc85
    fc80:	0001c0d1 	.word	0x0001c0d1

0000fc84 <atinit>:
 * \param[in] ca_iface  points to the logical configuration for the interface
 * \return ATCA_SUCCESS on success, otherwise an error code.
 */

ATCA_STATUS atinit(ATCAIface ca_iface)
{
    fc84:	b590      	push	{r4, r7, lr}
    fc86:	b08d      	sub	sp, #52	; 0x34
    fc88:	af00      	add	r7, sp, #0
    fc8a:	6078      	str	r0, [r7, #4]
    ATCA_STATUS status = ATCA_COMM_FAIL;
    fc8c:	232f      	movs	r3, #47	; 0x2f
    fc8e:	18fb      	adds	r3, r7, r3
    fc90:	22f0      	movs	r2, #240	; 0xf0
    fc92:	701a      	strb	r2, [r3, #0]
    ATCAHAL_t hal;

    _atinit(ca_iface, &hal);
    fc94:	2308      	movs	r3, #8
    fc96:	18fa      	adds	r2, r7, r3
    fc98:	687b      	ldr	r3, [r7, #4]
    fc9a:	0011      	movs	r1, r2
    fc9c:	0018      	movs	r0, r3
    fc9e:	4b14      	ldr	r3, [pc, #80]	; (fcf0 <atinit+0x6c>)
    fca0:	4798      	blx	r3

    status = ca_iface->atinit(&hal, ca_iface->mIfaceCFG);
    fca2:	687b      	ldr	r3, [r7, #4]
    fca4:	689a      	ldr	r2, [r3, #8]
    fca6:	687b      	ldr	r3, [r7, #4]
    fca8:	6859      	ldr	r1, [r3, #4]
    fcaa:	232f      	movs	r3, #47	; 0x2f
    fcac:	18fc      	adds	r4, r7, r3
    fcae:	2308      	movs	r3, #8
    fcb0:	18fb      	adds	r3, r7, r3
    fcb2:	0018      	movs	r0, r3
    fcb4:	4790      	blx	r2
    fcb6:	0003      	movs	r3, r0
    fcb8:	7023      	strb	r3, [r4, #0]
    if (status == ATCA_SUCCESS)
    fcba:	232f      	movs	r3, #47	; 0x2f
    fcbc:	18fb      	adds	r3, r7, r3
    fcbe:	781b      	ldrb	r3, [r3, #0]
    fcc0:	2b00      	cmp	r3, #0
    fcc2:	d10d      	bne.n	fce0 <atinit+0x5c>
    {
        ca_iface->hal_data = hal.hal_data;
    fcc4:	2308      	movs	r3, #8
    fcc6:	18fb      	adds	r3, r7, r3
    fcc8:	6a1a      	ldr	r2, [r3, #32]
    fcca:	687b      	ldr	r3, [r7, #4]
    fccc:	625a      	str	r2, [r3, #36]	; 0x24

        // Perform the post init
        status = ca_iface->atpostinit(ca_iface);
    fcce:	687b      	ldr	r3, [r7, #4]
    fcd0:	68db      	ldr	r3, [r3, #12]
    fcd2:	222f      	movs	r2, #47	; 0x2f
    fcd4:	18bc      	adds	r4, r7, r2
    fcd6:	687a      	ldr	r2, [r7, #4]
    fcd8:	0010      	movs	r0, r2
    fcda:	4798      	blx	r3
    fcdc:	0003      	movs	r3, r0
    fcde:	7023      	strb	r3, [r4, #0]
    }

    return status;
    fce0:	232f      	movs	r3, #47	; 0x2f
    fce2:	18fb      	adds	r3, r7, r3
    fce4:	781b      	ldrb	r3, [r3, #0]
}
    fce6:	0018      	movs	r0, r3
    fce8:	46bd      	mov	sp, r7
    fcea:	b00d      	add	sp, #52	; 0x34
    fcec:	bd90      	pop	{r4, r7, pc}
    fcee:	46c0      	nop			; (mov r8, r8)
    fcf0:	0000fe15 	.word	0x0000fe15

0000fcf4 <atsend>:
 * \param[in] txdata    pointer to the data to be transmitted to the device
 * \param[in] txlength  The total number of bytes to be transmitted to the device
 * \return ATCA_SUCCESS on success, otherwise an error code.
 */
ATCA_STATUS atsend(ATCAIface ca_iface, uint8_t *txdata, int txlength)
{
    fcf4:	b580      	push	{r7, lr}
    fcf6:	b084      	sub	sp, #16
    fcf8:	af00      	add	r7, sp, #0
    fcfa:	60f8      	str	r0, [r7, #12]
    fcfc:	60b9      	str	r1, [r7, #8]
    fcfe:	607a      	str	r2, [r7, #4]
    return ca_iface->atsend(ca_iface, txdata, txlength);
    fd00:	68fb      	ldr	r3, [r7, #12]
    fd02:	691b      	ldr	r3, [r3, #16]
    fd04:	687a      	ldr	r2, [r7, #4]
    fd06:	68b9      	ldr	r1, [r7, #8]
    fd08:	68f8      	ldr	r0, [r7, #12]
    fd0a:	4798      	blx	r3
    fd0c:	0003      	movs	r3, r0
}
    fd0e:	0018      	movs	r0, r3
    fd10:	46bd      	mov	sp, r7
    fd12:	b004      	add	sp, #16
    fd14:	bd80      	pop	{r7, pc}

0000fd16 <atreceive>:
 * \param[in] rxdata   pointer to the data to be stored from device
 * \param[in] rxlength  pointer to holds the number of bytes to be received from device.
 * \return ATCA_SUCCESS on success, otherwise an error code.
 */
ATCA_STATUS atreceive(ATCAIface ca_iface, uint8_t *rxdata, uint16_t *rxlength)
{
    fd16:	b580      	push	{r7, lr}
    fd18:	b084      	sub	sp, #16
    fd1a:	af00      	add	r7, sp, #0
    fd1c:	60f8      	str	r0, [r7, #12]
    fd1e:	60b9      	str	r1, [r7, #8]
    fd20:	607a      	str	r2, [r7, #4]
    return ca_iface->atreceive(ca_iface, rxdata, rxlength);
    fd22:	68fb      	ldr	r3, [r7, #12]
    fd24:	695b      	ldr	r3, [r3, #20]
    fd26:	687a      	ldr	r2, [r7, #4]
    fd28:	68b9      	ldr	r1, [r7, #8]
    fd2a:	68f8      	ldr	r0, [r7, #12]
    fd2c:	4798      	blx	r3
    fd2e:	0003      	movs	r3, r0
}
    fd30:	0018      	movs	r0, r3
    fd32:	46bd      	mov	sp, r7
    fd34:	b004      	add	sp, #16
    fd36:	bd80      	pop	{r7, pc}

0000fd38 <atwake>:
 *  User should not call this function directly,instead  use atcab_wakeup() function
 * \param[in] ca_iface  points to the logical configuration for the interface
 * \return ATCA_SUCCESS on success, otherwise an error code.
 */
ATCA_STATUS atwake(ATCAIface ca_iface)
{
    fd38:	b580      	push	{r7, lr}
    fd3a:	b082      	sub	sp, #8
    fd3c:	af00      	add	r7, sp, #0
    fd3e:	6078      	str	r0, [r7, #4]
    return ca_iface->atwake(ca_iface);
    fd40:	687b      	ldr	r3, [r7, #4]
    fd42:	699b      	ldr	r3, [r3, #24]
    fd44:	687a      	ldr	r2, [r7, #4]
    fd46:	0010      	movs	r0, r2
    fd48:	4798      	blx	r3
    fd4a:	0003      	movs	r3, r0
}
    fd4c:	0018      	movs	r0, r3
    fd4e:	46bd      	mov	sp, r7
    fd50:	b002      	add	sp, #8
    fd52:	bd80      	pop	{r7, pc}

0000fd54 <atidle>:
 *  User should not call this function directly,instead  use atcab_idle() function
 * \param[in] ca_iface  points to the logical configuration for the interface
 * \return ATCA_SUCCESS on success, otherwise an error code.
 */
ATCA_STATUS atidle(ATCAIface ca_iface)
{
    fd54:	b590      	push	{r4, r7, lr}
    fd56:	b085      	sub	sp, #20
    fd58:	af00      	add	r7, sp, #0
    fd5a:	6078      	str	r0, [r7, #4]
    ATCA_STATUS status;

    status = ca_iface->atidle(ca_iface);
    fd5c:	687b      	ldr	r3, [r7, #4]
    fd5e:	69db      	ldr	r3, [r3, #28]
    fd60:	220f      	movs	r2, #15
    fd62:	18bc      	adds	r4, r7, r2
    fd64:	687a      	ldr	r2, [r7, #4]
    fd66:	0010      	movs	r0, r2
    fd68:	4798      	blx	r3
    fd6a:	0003      	movs	r3, r0
    fd6c:	7023      	strb	r3, [r4, #0]
    atca_delay_ms(1);
    fd6e:	2001      	movs	r0, #1
    fd70:	4b04      	ldr	r3, [pc, #16]	; (fd84 <atidle+0x30>)
    fd72:	4798      	blx	r3
    return status;
    fd74:	230f      	movs	r3, #15
    fd76:	18fb      	adds	r3, r7, r3
    fd78:	781b      	ldrb	r3, [r3, #0]
}
    fd7a:	0018      	movs	r0, r3
    fd7c:	46bd      	mov	sp, r7
    fd7e:	b005      	add	sp, #20
    fd80:	bd90      	pop	{r4, r7, pc}
    fd82:	46c0      	nop			; (mov r8, r8)
    fd84:	00012379 	.word	0x00012379

0000fd88 <atsleep>:
 *  User should not call this function directly,instead  use atcab_sleep() function
 * \param[in] ca_iface  points to the logical configuration for the interface
 * \return ATCA_SUCCESS on success, otherwise an error code.
 */
ATCA_STATUS atsleep(ATCAIface ca_iface)
{
    fd88:	b590      	push	{r4, r7, lr}
    fd8a:	b085      	sub	sp, #20
    fd8c:	af00      	add	r7, sp, #0
    fd8e:	6078      	str	r0, [r7, #4]
    ATCA_STATUS status;

    status = ca_iface->atsleep(ca_iface);
    fd90:	687b      	ldr	r3, [r7, #4]
    fd92:	6a1b      	ldr	r3, [r3, #32]
    fd94:	220f      	movs	r2, #15
    fd96:	18bc      	adds	r4, r7, r2
    fd98:	687a      	ldr	r2, [r7, #4]
    fd9a:	0010      	movs	r0, r2
    fd9c:	4798      	blx	r3
    fd9e:	0003      	movs	r3, r0
    fda0:	7023      	strb	r3, [r4, #0]
    atca_delay_ms(1);
    fda2:	2001      	movs	r0, #1
    fda4:	4b04      	ldr	r3, [pc, #16]	; (fdb8 <atsleep+0x30>)
    fda6:	4798      	blx	r3
    return status;
    fda8:	230f      	movs	r3, #15
    fdaa:	18fb      	adds	r3, r7, r3
    fdac:	781b      	ldrb	r3, [r3, #0]
}
    fdae:	0018      	movs	r0, r3
    fdb0:	46bd      	mov	sp, r7
    fdb2:	b005      	add	sp, #20
    fdb4:	bd90      	pop	{r4, r7, pc}
    fdb6:	46c0      	nop			; (mov r8, r8)
    fdb8:	00012379 	.word	0x00012379

0000fdbc <atgetifacecfg>:
/** \brief This function returns the pointer to Interface configuration of the Crypto Auth device.
 * \param[in] ca_iface  points to the logical configuration for the interface
 * \return returns the pointer to ATCAIfaceCfg.
 */
ATCAIfaceCfg * atgetifacecfg(ATCAIface ca_iface)
{
    fdbc:	b580      	push	{r7, lr}
    fdbe:	b082      	sub	sp, #8
    fdc0:	af00      	add	r7, sp, #0
    fdc2:	6078      	str	r0, [r7, #4]
    return ca_iface->mIfaceCFG;
    fdc4:	687b      	ldr	r3, [r7, #4]
    fdc6:	685b      	ldr	r3, [r3, #4]
}
    fdc8:	0018      	movs	r0, r3
    fdca:	46bd      	mov	sp, r7
    fdcc:	b002      	add	sp, #8
    fdce:	bd80      	pop	{r7, pc}

0000fdd0 <deleteATCAIface>:

/** \brief destructor for ATCAIface objects
 * \param[in] ca_iface  points to the logical configuration for the interface
 */
void deleteATCAIface(ATCAIface *ca_iface) // destructor
{
    fdd0:	b580      	push	{r7, lr}
    fdd2:	b082      	sub	sp, #8
    fdd4:	af00      	add	r7, sp, #0
    fdd6:	6078      	str	r0, [r7, #4]
    if (*ca_iface)
    fdd8:	687b      	ldr	r3, [r7, #4]
    fdda:	681b      	ldr	r3, [r3, #0]
    fddc:	2b00      	cmp	r3, #0
    fdde:	d00e      	beq.n	fdfe <deleteATCAIface+0x2e>
    {
        hal_iface_release( (*ca_iface)->mType, (*ca_iface)->hal_data);  // let HAL clean up and disable physical level interface if ref count is 0
    fde0:	687b      	ldr	r3, [r7, #4]
    fde2:	681b      	ldr	r3, [r3, #0]
    fde4:	781a      	ldrb	r2, [r3, #0]
    fde6:	687b      	ldr	r3, [r7, #4]
    fde8:	681b      	ldr	r3, [r3, #0]
    fdea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    fdec:	0019      	movs	r1, r3
    fdee:	0010      	movs	r0, r2
    fdf0:	4b06      	ldr	r3, [pc, #24]	; (fe0c <deleteATCAIface+0x3c>)
    fdf2:	4798      	blx	r3
        free((void*)*ca_iface);
    fdf4:	687b      	ldr	r3, [r7, #4]
    fdf6:	681b      	ldr	r3, [r3, #0]
    fdf8:	0018      	movs	r0, r3
    fdfa:	4b05      	ldr	r3, [pc, #20]	; (fe10 <deleteATCAIface+0x40>)
    fdfc:	4798      	blx	r3
    }

    *ca_iface = NULL;
    fdfe:	687b      	ldr	r3, [r7, #4]
    fe00:	2200      	movs	r2, #0
    fe02:	601a      	str	r2, [r3, #0]
}
    fe04:	46c0      	nop			; (mov r8, r8)
    fe06:	46bd      	mov	sp, r7
    fe08:	b002      	add	sp, #8
    fe0a:	bd80      	pop	{r7, pc}
    fe0c:	000110e9 	.word	0x000110e9
    fe10:	0001c0d1 	.word	0x0001c0d1

0000fe14 <_atinit>:

ATCA_STATUS _atinit(ATCAIface ca_iface, ATCAHAL_t *hal)
{
    fe14:	b580      	push	{r7, lr}
    fe16:	b082      	sub	sp, #8
    fe18:	af00      	add	r7, sp, #0
    fe1a:	6078      	str	r0, [r7, #4]
    fe1c:	6039      	str	r1, [r7, #0]
    // get method mapping to HAL methods for this interface
    hal_iface_init(ca_iface->mIfaceCFG, hal);
    fe1e:	687b      	ldr	r3, [r7, #4]
    fe20:	685b      	ldr	r3, [r3, #4]
    fe22:	683a      	ldr	r2, [r7, #0]
    fe24:	0011      	movs	r1, r2
    fe26:	0018      	movs	r0, r3
    fe28:	4b13      	ldr	r3, [pc, #76]	; (fe78 <_atinit+0x64>)
    fe2a:	4798      	blx	r3
    ca_iface->atinit     = hal->halinit;
    fe2c:	683b      	ldr	r3, [r7, #0]
    fe2e:	681a      	ldr	r2, [r3, #0]
    fe30:	687b      	ldr	r3, [r7, #4]
    fe32:	609a      	str	r2, [r3, #8]
    ca_iface->atpostinit = hal->halpostinit;
    fe34:	683b      	ldr	r3, [r7, #0]
    fe36:	685a      	ldr	r2, [r3, #4]
    fe38:	687b      	ldr	r3, [r7, #4]
    fe3a:	60da      	str	r2, [r3, #12]
    ca_iface->atsend     = hal->halsend;
    fe3c:	683b      	ldr	r3, [r7, #0]
    fe3e:	689a      	ldr	r2, [r3, #8]
    fe40:	687b      	ldr	r3, [r7, #4]
    fe42:	611a      	str	r2, [r3, #16]
    ca_iface->atreceive  = hal->halreceive;
    fe44:	683b      	ldr	r3, [r7, #0]
    fe46:	68da      	ldr	r2, [r3, #12]
    fe48:	687b      	ldr	r3, [r7, #4]
    fe4a:	615a      	str	r2, [r3, #20]
    ca_iface->atwake     = hal->halwake;
    fe4c:	683b      	ldr	r3, [r7, #0]
    fe4e:	691a      	ldr	r2, [r3, #16]
    fe50:	687b      	ldr	r3, [r7, #4]
    fe52:	619a      	str	r2, [r3, #24]
    ca_iface->atsleep    = hal->halsleep;
    fe54:	683b      	ldr	r3, [r7, #0]
    fe56:	699a      	ldr	r2, [r3, #24]
    fe58:	687b      	ldr	r3, [r7, #4]
    fe5a:	621a      	str	r2, [r3, #32]
    ca_iface->atidle     = hal->halidle;
    fe5c:	683b      	ldr	r3, [r7, #0]
    fe5e:	695a      	ldr	r2, [r3, #20]
    fe60:	687b      	ldr	r3, [r7, #4]
    fe62:	61da      	str	r2, [r3, #28]
    ca_iface->hal_data   = hal->hal_data;
    fe64:	683b      	ldr	r3, [r7, #0]
    fe66:	6a1a      	ldr	r2, [r3, #32]
    fe68:	687b      	ldr	r3, [r7, #4]
    fe6a:	625a      	str	r2, [r3, #36]	; 0x24

    return ATCA_SUCCESS;
    fe6c:	2300      	movs	r3, #0
}
    fe6e:	0018      	movs	r0, r3
    fe70:	46bd      	mov	sp, r7
    fe72:	b002      	add	sp, #8
    fe74:	bd80      	pop	{r7, pc}
    fe76:	46c0      	nop			; (mov r8, r8)
    fe78:	0001104d 	.word	0x0001104d

0000fe7c <atcab_init>:
 *  This method builds a global ATCADevice instance behinds the scenes that's used for all Basic API operations
 *  \param[in] cfg      pointer that holds the interface configuration.  This is usually a predefined configuration found in atca_cfgs.h
 *  \return    ATCA_SUCCESS on success, otherwise an error code.
 */
ATCA_STATUS atcab_init(ATCAIfaceCfg *cfg)
{
    fe7c:	b5b0      	push	{r4, r5, r7, lr}
    fe7e:	b086      	sub	sp, #24
    fe80:	af02      	add	r7, sp, #8
    fe82:	6078      	str	r0, [r7, #4]
    ATCA_STATUS status = ATCA_GEN_FAIL;
    fe84:	230f      	movs	r3, #15
    fe86:	18fb      	adds	r3, r7, r3
    fe88:	22e1      	movs	r2, #225	; 0xe1
    fe8a:	701a      	strb	r2, [r3, #0]

    if (_gDevice)       // if there's already a device created, release it
    fe8c:	4b24      	ldr	r3, [pc, #144]	; (ff20 <atcab_init+0xa4>)
    fe8e:	681b      	ldr	r3, [r3, #0]
    fe90:	2b00      	cmp	r3, #0
    fe92:	d001      	beq.n	fe98 <atcab_init+0x1c>
    {
        atcab_release();
    fe94:	4b23      	ldr	r3, [pc, #140]	; (ff24 <atcab_init+0xa8>)
    fe96:	4798      	blx	r3
    }
    _gDevice = newATCADevice(cfg);
    fe98:	687b      	ldr	r3, [r7, #4]
    fe9a:	0018      	movs	r0, r3
    fe9c:	4b22      	ldr	r3, [pc, #136]	; (ff28 <atcab_init+0xac>)
    fe9e:	4798      	blx	r3
    fea0:	0002      	movs	r2, r0
    fea2:	4b1f      	ldr	r3, [pc, #124]	; (ff20 <atcab_init+0xa4>)
    fea4:	601a      	str	r2, [r3, #0]

    if ((_gDevice == NULL) || (_gDevice->mIface == NULL) || (_gDevice->mCommands == NULL))
    fea6:	4b1e      	ldr	r3, [pc, #120]	; (ff20 <atcab_init+0xa4>)
    fea8:	681b      	ldr	r3, [r3, #0]
    feaa:	2b00      	cmp	r3, #0
    feac:	d009      	beq.n	fec2 <atcab_init+0x46>
    feae:	4b1c      	ldr	r3, [pc, #112]	; (ff20 <atcab_init+0xa4>)
    feb0:	681b      	ldr	r3, [r3, #0]
    feb2:	685b      	ldr	r3, [r3, #4]
    feb4:	2b00      	cmp	r3, #0
    feb6:	d004      	beq.n	fec2 <atcab_init+0x46>
    feb8:	4b19      	ldr	r3, [pc, #100]	; (ff20 <atcab_init+0xa4>)
    feba:	681b      	ldr	r3, [r3, #0]
    febc:	681b      	ldr	r3, [r3, #0]
    febe:	2b00      	cmp	r3, #0
    fec0:	d101      	bne.n	fec6 <atcab_init+0x4a>
    {
        return ATCA_GEN_FAIL;  // Device creation failed
    fec2:	23e1      	movs	r3, #225	; 0xe1
    fec4:	e028      	b.n	ff18 <atcab_init+0x9c>

    }
    if (cfg->devtype == ATECC608A)
    fec6:	687b      	ldr	r3, [r7, #4]
    fec8:	785b      	ldrb	r3, [r3, #1]
    feca:	2b03      	cmp	r3, #3
    fecc:	d123      	bne.n	ff16 <atcab_init+0x9a>
    {

        if ((status = atcab_read_bytes_zone(ATCA_ZONE_CONFIG, 0, ATCA_CHIPMODE_OFFSET, &_gDevice->mCommands->clock_divider, 1)) != ATCA_SUCCESS)
    fece:	4b14      	ldr	r3, [pc, #80]	; (ff20 <atcab_init+0xa4>)
    fed0:	681b      	ldr	r3, [r3, #0]
    fed2:	681b      	ldr	r3, [r3, #0]
    fed4:	1c5a      	adds	r2, r3, #1
    fed6:	230f      	movs	r3, #15
    fed8:	18fc      	adds	r4, r7, r3
    feda:	2301      	movs	r3, #1
    fedc:	9300      	str	r3, [sp, #0]
    fede:	0013      	movs	r3, r2
    fee0:	2213      	movs	r2, #19
    fee2:	2100      	movs	r1, #0
    fee4:	2000      	movs	r0, #0
    fee6:	4d11      	ldr	r5, [pc, #68]	; (ff2c <atcab_init+0xb0>)
    fee8:	47a8      	blx	r5
    feea:	0003      	movs	r3, r0
    feec:	7023      	strb	r3, [r4, #0]
    feee:	230f      	movs	r3, #15
    fef0:	18fb      	adds	r3, r7, r3
    fef2:	781b      	ldrb	r3, [r3, #0]
    fef4:	2b00      	cmp	r3, #0
    fef6:	d003      	beq.n	ff00 <atcab_init+0x84>
        {
            return status;
    fef8:	230f      	movs	r3, #15
    fefa:	18fb      	adds	r3, r7, r3
    fefc:	781b      	ldrb	r3, [r3, #0]
    fefe:	e00b      	b.n	ff18 <atcab_init+0x9c>
        }
        _gDevice->mCommands->clock_divider &= ATCA_CHIPMODE_CLOCK_DIV_MASK;
    ff00:	4b07      	ldr	r3, [pc, #28]	; (ff20 <atcab_init+0xa4>)
    ff02:	681b      	ldr	r3, [r3, #0]
    ff04:	681a      	ldr	r2, [r3, #0]
    ff06:	4b06      	ldr	r3, [pc, #24]	; (ff20 <atcab_init+0xa4>)
    ff08:	681b      	ldr	r3, [r3, #0]
    ff0a:	681b      	ldr	r3, [r3, #0]
    ff0c:	785b      	ldrb	r3, [r3, #1]
    ff0e:	2107      	movs	r1, #7
    ff10:	438b      	bics	r3, r1
    ff12:	b2db      	uxtb	r3, r3
    ff14:	7053      	strb	r3, [r2, #1]
    }

    return ATCA_SUCCESS;
    ff16:	2300      	movs	r3, #0
}
    ff18:	0018      	movs	r0, r3
    ff1a:	46bd      	mov	sp, r7
    ff1c:	b004      	add	sp, #16
    ff1e:	bdb0      	pop	{r4, r5, r7, pc}
    ff20:	20000590 	.word	0x20000590
    ff24:	0000ff31 	.word	0x0000ff31
    ff28:	0000fb4d 	.word	0x0000fb4d
    ff2c:	0001171d 	.word	0x0001171d

0000ff30 <atcab_release>:
/** \brief release (free) the global ATCADevice instance.
 *  This must be called in order to release or free up the interface.
 *  \return Returns ATCA_SUCCESS .
 */
ATCA_STATUS atcab_release(void)
{
    ff30:	b580      	push	{r7, lr}
    ff32:	af00      	add	r7, sp, #0
    deleteATCADevice(&_gDevice);
    ff34:	4b03      	ldr	r3, [pc, #12]	; (ff44 <atcab_release+0x14>)
    ff36:	0018      	movs	r0, r3
    ff38:	4b03      	ldr	r3, [pc, #12]	; (ff48 <atcab_release+0x18>)
    ff3a:	4798      	blx	r3
    return ATCA_SUCCESS;
    ff3c:	2300      	movs	r3, #0
}
    ff3e:	0018      	movs	r0, r3
    ff40:	46bd      	mov	sp, r7
    ff42:	bd80      	pop	{r7, pc}
    ff44:	20000590 	.word	0x20000590
    ff48:	0000fbe9 	.word	0x0000fbe9

0000ff4c <atcab_get_device>:

/** \brief Get the global device object.
 *  \return instance of global ATCADevice
 */
ATCADevice atcab_get_device(void)
{
    ff4c:	b580      	push	{r7, lr}
    ff4e:	af00      	add	r7, sp, #0
    return _gDevice;
    ff50:	4b02      	ldr	r3, [pc, #8]	; (ff5c <atcab_get_device+0x10>)
    ff52:	681b      	ldr	r3, [r3, #0]
}
    ff54:	0018      	movs	r0, r3
    ff56:	46bd      	mov	sp, r7
    ff58:	bd80      	pop	{r7, pc}
    ff5a:	46c0      	nop			; (mov r8, r8)
    ff5c:	20000590 	.word	0x20000590

0000ff60 <atcab_wakeup>:

/** \brief wakeup the CryptoAuth device
 *  \return ATCA_SUCCESS on success, otherwise an error code.
 */
ATCA_STATUS atcab_wakeup(void)
{
    ff60:	b580      	push	{r7, lr}
    ff62:	af00      	add	r7, sp, #0
    if (_gDevice == NULL)
    ff64:	4b07      	ldr	r3, [pc, #28]	; (ff84 <atcab_wakeup+0x24>)
    ff66:	681b      	ldr	r3, [r3, #0]
    ff68:	2b00      	cmp	r3, #0
    ff6a:	d101      	bne.n	ff70 <atcab_wakeup+0x10>
    {
        return ATCA_GEN_FAIL;
    ff6c:	23e1      	movs	r3, #225	; 0xe1
    ff6e:	e006      	b.n	ff7e <atcab_wakeup+0x1e>
    }

    return atwake(_gDevice->mIface);
    ff70:	4b04      	ldr	r3, [pc, #16]	; (ff84 <atcab_wakeup+0x24>)
    ff72:	681b      	ldr	r3, [r3, #0]
    ff74:	685b      	ldr	r3, [r3, #4]
    ff76:	0018      	movs	r0, r3
    ff78:	4b03      	ldr	r3, [pc, #12]	; (ff88 <atcab_wakeup+0x28>)
    ff7a:	4798      	blx	r3
    ff7c:	0003      	movs	r3, r0
}
    ff7e:	0018      	movs	r0, r3
    ff80:	46bd      	mov	sp, r7
    ff82:	bd80      	pop	{r7, pc}
    ff84:	20000590 	.word	0x20000590
    ff88:	0000fd39 	.word	0x0000fd39

0000ff8c <atcab_idle>:

/** \brief idle the CryptoAuth device
 *  \return ATCA_SUCCESS on success, otherwise an error code.
 */
ATCA_STATUS atcab_idle(void)
{
    ff8c:	b580      	push	{r7, lr}
    ff8e:	af00      	add	r7, sp, #0
    if (_gDevice == NULL)
    ff90:	4b07      	ldr	r3, [pc, #28]	; (ffb0 <atcab_idle+0x24>)
    ff92:	681b      	ldr	r3, [r3, #0]
    ff94:	2b00      	cmp	r3, #0
    ff96:	d101      	bne.n	ff9c <atcab_idle+0x10>
    {
        return ATCA_GEN_FAIL;
    ff98:	23e1      	movs	r3, #225	; 0xe1
    ff9a:	e006      	b.n	ffaa <atcab_idle+0x1e>
    }

    return atidle(_gDevice->mIface);
    ff9c:	4b04      	ldr	r3, [pc, #16]	; (ffb0 <atcab_idle+0x24>)
    ff9e:	681b      	ldr	r3, [r3, #0]
    ffa0:	685b      	ldr	r3, [r3, #4]
    ffa2:	0018      	movs	r0, r3
    ffa4:	4b03      	ldr	r3, [pc, #12]	; (ffb4 <atcab_idle+0x28>)
    ffa6:	4798      	blx	r3
    ffa8:	0003      	movs	r3, r0
}
    ffaa:	0018      	movs	r0, r3
    ffac:	46bd      	mov	sp, r7
    ffae:	bd80      	pop	{r7, pc}
    ffb0:	20000590 	.word	0x20000590
    ffb4:	0000fd55 	.word	0x0000fd55

0000ffb8 <atcab_sleep>:

/** \brief invoke sleep on the CryptoAuth device
 *  \return ATCA_SUCCESS on success, otherwise an error code.
 */
ATCA_STATUS atcab_sleep(void)
{
    ffb8:	b580      	push	{r7, lr}
    ffba:	af00      	add	r7, sp, #0
    if (_gDevice == NULL)
    ffbc:	4b07      	ldr	r3, [pc, #28]	; (ffdc <atcab_sleep+0x24>)
    ffbe:	681b      	ldr	r3, [r3, #0]
    ffc0:	2b00      	cmp	r3, #0
    ffc2:	d101      	bne.n	ffc8 <atcab_sleep+0x10>
    {
        return ATCA_GEN_FAIL;
    ffc4:	23e1      	movs	r3, #225	; 0xe1
    ffc6:	e006      	b.n	ffd6 <atcab_sleep+0x1e>
    }

    return atsleep(_gDevice->mIface);
    ffc8:	4b04      	ldr	r3, [pc, #16]	; (ffdc <atcab_sleep+0x24>)
    ffca:	681b      	ldr	r3, [r3, #0]
    ffcc:	685b      	ldr	r3, [r3, #4]
    ffce:	0018      	movs	r0, r3
    ffd0:	4b03      	ldr	r3, [pc, #12]	; (ffe0 <atcab_sleep+0x28>)
    ffd2:	4798      	blx	r3
    ffd4:	0003      	movs	r3, r0
}
    ffd6:	0018      	movs	r0, r3
    ffd8:	46bd      	mov	sp, r7
    ffda:	bd80      	pop	{r7, pc}
    ffdc:	20000590 	.word	0x20000590
    ffe0:	0000fd89 	.word	0x0000fd89

0000ffe4 <_atcab_exit>:

/** \brief common cleanup code which idles the device after any operation
 *  \return ATCA_SUCCESS on success, otherwise an error code.
 */
ATCA_STATUS _atcab_exit(void)
{
    ffe4:	b580      	push	{r7, lr}
    ffe6:	af00      	add	r7, sp, #0
    return atcab_idle();
    ffe8:	4b02      	ldr	r3, [pc, #8]	; (fff4 <_atcab_exit+0x10>)
    ffea:	4798      	blx	r3
    ffec:	0003      	movs	r3, r0
}
    ffee:	0018      	movs	r0, r3
    fff0:	46bd      	mov	sp, r7
    fff2:	bd80      	pop	{r7, pc}
    fff4:	0000ff8d 	.word	0x0000ff8d

0000fff8 <atcab_get_addr>:
 *  \param[in] offset Offset Number within the block of data or configuration or OTP zone.
 *  \param[out] addr  Pointer to the address of data or configuration or OTP zone.
 *  \return ATCA_SUCCESS on success, otherwise an error code.
 */
ATCA_STATUS atcab_get_addr(uint8_t zone, uint16_t slot, uint8_t block, uint8_t offset, uint16_t* addr)
{
    fff8:	b5b0      	push	{r4, r5, r7, lr}
    fffa:	b084      	sub	sp, #16
    fffc:	af00      	add	r7, sp, #0
    fffe:	0005      	movs	r5, r0
   10000:	000c      	movs	r4, r1
   10002:	0010      	movs	r0, r2
   10004:	0019      	movs	r1, r3
   10006:	1dfb      	adds	r3, r7, #7
   10008:	1c2a      	adds	r2, r5, #0
   1000a:	701a      	strb	r2, [r3, #0]
   1000c:	1d3b      	adds	r3, r7, #4
   1000e:	1c22      	adds	r2, r4, #0
   10010:	801a      	strh	r2, [r3, #0]
   10012:	1dbb      	adds	r3, r7, #6
   10014:	1c02      	adds	r2, r0, #0
   10016:	701a      	strb	r2, [r3, #0]
   10018:	1cfb      	adds	r3, r7, #3
   1001a:	1c0a      	adds	r2, r1, #0
   1001c:	701a      	strb	r2, [r3, #0]
    ATCA_STATUS status = ATCA_SUCCESS;
   1001e:	230f      	movs	r3, #15
   10020:	18fb      	adds	r3, r7, r3
   10022:	2200      	movs	r2, #0
   10024:	701a      	strb	r2, [r3, #0]
    uint8_t mem_zone = zone & 0x03;
   10026:	230e      	movs	r3, #14
   10028:	18fb      	adds	r3, r7, r3
   1002a:	1dfa      	adds	r2, r7, #7
   1002c:	7812      	ldrb	r2, [r2, #0]
   1002e:	2103      	movs	r1, #3
   10030:	400a      	ands	r2, r1
   10032:	701a      	strb	r2, [r3, #0]

    if (addr == NULL)
   10034:	6a3b      	ldr	r3, [r7, #32]
   10036:	2b00      	cmp	r3, #0
   10038:	d101      	bne.n	1003e <atcab_get_addr+0x46>
    {
        return ATCA_BAD_PARAM;
   1003a:	23e2      	movs	r3, #226	; 0xe2
   1003c:	e052      	b.n	100e4 <atcab_get_addr+0xec>
    }
    if ((mem_zone != ATCA_ZONE_CONFIG) && (mem_zone != ATCA_ZONE_DATA) && (mem_zone != ATCA_ZONE_OTP))
   1003e:	230e      	movs	r3, #14
   10040:	18fb      	adds	r3, r7, r3
   10042:	781b      	ldrb	r3, [r3, #0]
   10044:	2b00      	cmp	r3, #0
   10046:	d00b      	beq.n	10060 <atcab_get_addr+0x68>
   10048:	230e      	movs	r3, #14
   1004a:	18fb      	adds	r3, r7, r3
   1004c:	781b      	ldrb	r3, [r3, #0]
   1004e:	2b02      	cmp	r3, #2
   10050:	d006      	beq.n	10060 <atcab_get_addr+0x68>
   10052:	230e      	movs	r3, #14
   10054:	18fb      	adds	r3, r7, r3
   10056:	781b      	ldrb	r3, [r3, #0]
   10058:	2b01      	cmp	r3, #1
   1005a:	d001      	beq.n	10060 <atcab_get_addr+0x68>
    {
        return ATCA_BAD_PARAM;
   1005c:	23e2      	movs	r3, #226	; 0xe2
   1005e:	e041      	b.n	100e4 <atcab_get_addr+0xec>
    }
    do
    {
        // Initialize the addr to 00
        *addr = 0;
   10060:	6a3b      	ldr	r3, [r7, #32]
   10062:	2200      	movs	r2, #0
   10064:	801a      	strh	r2, [r3, #0]
        // Mask the offset
        offset = offset & (uint8_t)0x07;
   10066:	1cfb      	adds	r3, r7, #3
   10068:	1cfa      	adds	r2, r7, #3
   1006a:	7812      	ldrb	r2, [r2, #0]
   1006c:	2107      	movs	r1, #7
   1006e:	400a      	ands	r2, r1
   10070:	701a      	strb	r2, [r3, #0]
        if ((mem_zone == ATCA_ZONE_CONFIG) || (mem_zone == ATCA_ZONE_OTP))
   10072:	230e      	movs	r3, #14
   10074:	18fb      	adds	r3, r7, r3
   10076:	781b      	ldrb	r3, [r3, #0]
   10078:	2b00      	cmp	r3, #0
   1007a:	d004      	beq.n	10086 <atcab_get_addr+0x8e>
   1007c:	230e      	movs	r3, #14
   1007e:	18fb      	adds	r3, r7, r3
   10080:	781b      	ldrb	r3, [r3, #0]
   10082:	2b01      	cmp	r3, #1
   10084:	d110      	bne.n	100a8 <atcab_get_addr+0xb0>
        {
            *addr = block << 3;
   10086:	1dbb      	adds	r3, r7, #6
   10088:	781b      	ldrb	r3, [r3, #0]
   1008a:	b29b      	uxth	r3, r3
   1008c:	00db      	lsls	r3, r3, #3
   1008e:	b29a      	uxth	r2, r3
   10090:	6a3b      	ldr	r3, [r7, #32]
   10092:	801a      	strh	r2, [r3, #0]
            *addr |= offset;
   10094:	6a3b      	ldr	r3, [r7, #32]
   10096:	881a      	ldrh	r2, [r3, #0]
   10098:	1cfb      	adds	r3, r7, #3
   1009a:	781b      	ldrb	r3, [r3, #0]
   1009c:	b29b      	uxth	r3, r3
   1009e:	4313      	orrs	r3, r2
   100a0:	b29a      	uxth	r2, r3
   100a2:	6a3b      	ldr	r3, [r7, #32]
   100a4:	801a      	strh	r2, [r3, #0]
   100a6:	e01a      	b.n	100de <atcab_get_addr+0xe6>
        }
        else     // ATCA_ZONE_DATA
        {
            *addr = slot << 3;
   100a8:	1d3b      	adds	r3, r7, #4
   100aa:	881b      	ldrh	r3, [r3, #0]
   100ac:	00db      	lsls	r3, r3, #3
   100ae:	b29a      	uxth	r2, r3
   100b0:	6a3b      	ldr	r3, [r7, #32]
   100b2:	801a      	strh	r2, [r3, #0]
            *addr  |= offset;
   100b4:	6a3b      	ldr	r3, [r7, #32]
   100b6:	881a      	ldrh	r2, [r3, #0]
   100b8:	1cfb      	adds	r3, r7, #3
   100ba:	781b      	ldrb	r3, [r3, #0]
   100bc:	b29b      	uxth	r3, r3
   100be:	4313      	orrs	r3, r2
   100c0:	b29a      	uxth	r2, r3
   100c2:	6a3b      	ldr	r3, [r7, #32]
   100c4:	801a      	strh	r2, [r3, #0]
            *addr |= block << 8;
   100c6:	6a3b      	ldr	r3, [r7, #32]
   100c8:	881b      	ldrh	r3, [r3, #0]
   100ca:	b21a      	sxth	r2, r3
   100cc:	1dbb      	adds	r3, r7, #6
   100ce:	781b      	ldrb	r3, [r3, #0]
   100d0:	021b      	lsls	r3, r3, #8
   100d2:	b21b      	sxth	r3, r3
   100d4:	4313      	orrs	r3, r2
   100d6:	b21b      	sxth	r3, r3
   100d8:	b29a      	uxth	r2, r3
   100da:	6a3b      	ldr	r3, [r7, #32]
   100dc:	801a      	strh	r2, [r3, #0]
        }
    }
    while (0);

    return status;
   100de:	230f      	movs	r3, #15
   100e0:	18fb      	adds	r3, r7, r3
   100e2:	781b      	ldrb	r3, [r3, #0]
}
   100e4:	0018      	movs	r0, r3
   100e6:	46bd      	mov	sp, r7
   100e8:	b004      	add	sp, #16
   100ea:	bdb0      	pop	{r4, r5, r7, pc}

000100ec <atcab_get_zone_size>:
 * \param[out] size  Zone size is returned here.
 *
 * \return ATCA_SUCCESS on success, otherwise an error code.
 */
ATCA_STATUS atcab_get_zone_size(uint8_t zone, uint16_t slot, size_t* size)
{
   100ec:	b580      	push	{r7, lr}
   100ee:	b084      	sub	sp, #16
   100f0:	af00      	add	r7, sp, #0
   100f2:	603a      	str	r2, [r7, #0]
   100f4:	1dfb      	adds	r3, r7, #7
   100f6:	1c02      	adds	r2, r0, #0
   100f8:	701a      	strb	r2, [r3, #0]
   100fa:	1d3b      	adds	r3, r7, #4
   100fc:	1c0a      	adds	r2, r1, #0
   100fe:	801a      	strh	r2, [r3, #0]
    ATCA_STATUS status = ATCA_SUCCESS;
   10100:	230f      	movs	r3, #15
   10102:	18fb      	adds	r3, r7, r3
   10104:	2200      	movs	r2, #0
   10106:	701a      	strb	r2, [r3, #0]

    if (size == NULL)
   10108:	683b      	ldr	r3, [r7, #0]
   1010a:	2b00      	cmp	r3, #0
   1010c:	d101      	bne.n	10112 <atcab_get_zone_size+0x26>
    {
        return ATCA_BAD_PARAM;
   1010e:	23e2      	movs	r3, #226	; 0xe2
   10110:	e056      	b.n	101c0 <atcab_get_zone_size+0xd4>
    }

    if (_gDevice->mIface->mIfaceCFG->devtype == ATSHA204A)
   10112:	4b2d      	ldr	r3, [pc, #180]	; (101c8 <atcab_get_zone_size+0xdc>)
   10114:	681b      	ldr	r3, [r3, #0]
   10116:	685b      	ldr	r3, [r3, #4]
   10118:	685b      	ldr	r3, [r3, #4]
   1011a:	785b      	ldrb	r3, [r3, #1]
   1011c:	2b00      	cmp	r3, #0
   1011e:	d119      	bne.n	10154 <atcab_get_zone_size+0x68>
    {
        switch (zone)
   10120:	1dfb      	adds	r3, r7, #7
   10122:	781b      	ldrb	r3, [r3, #0]
   10124:	2b01      	cmp	r3, #1
   10126:	d007      	beq.n	10138 <atcab_get_zone_size+0x4c>
   10128:	2b02      	cmp	r3, #2
   1012a:	d009      	beq.n	10140 <atcab_get_zone_size+0x54>
   1012c:	2b00      	cmp	r3, #0
   1012e:	d10b      	bne.n	10148 <atcab_get_zone_size+0x5c>
        {
        case ATCA_ZONE_CONFIG: *size = 88; break;
   10130:	683b      	ldr	r3, [r7, #0]
   10132:	2258      	movs	r2, #88	; 0x58
   10134:	601a      	str	r2, [r3, #0]
   10136:	e040      	b.n	101ba <atcab_get_zone_size+0xce>
        case ATCA_ZONE_OTP:    *size = 64; break;
   10138:	683b      	ldr	r3, [r7, #0]
   1013a:	2240      	movs	r2, #64	; 0x40
   1013c:	601a      	str	r2, [r3, #0]
   1013e:	e03c      	b.n	101ba <atcab_get_zone_size+0xce>
        case ATCA_ZONE_DATA:   *size = 32; break;
   10140:	683b      	ldr	r3, [r7, #0]
   10142:	2220      	movs	r2, #32
   10144:	601a      	str	r2, [r3, #0]
   10146:	e038      	b.n	101ba <atcab_get_zone_size+0xce>
        default: status = ATCA_BAD_PARAM; break;
   10148:	230f      	movs	r3, #15
   1014a:	18fb      	adds	r3, r7, r3
   1014c:	22e2      	movs	r2, #226	; 0xe2
   1014e:	701a      	strb	r2, [r3, #0]
   10150:	46c0      	nop			; (mov r8, r8)
   10152:	e032      	b.n	101ba <atcab_get_zone_size+0xce>
        }
    }
    else
    {
        switch (zone)
   10154:	1dfb      	adds	r3, r7, #7
   10156:	781b      	ldrb	r3, [r3, #0]
   10158:	2b01      	cmp	r3, #1
   1015a:	d007      	beq.n	1016c <atcab_get_zone_size+0x80>
   1015c:	2b02      	cmp	r3, #2
   1015e:	d009      	beq.n	10174 <atcab_get_zone_size+0x88>
   10160:	2b00      	cmp	r3, #0
   10162:	d125      	bne.n	101b0 <atcab_get_zone_size+0xc4>
        {
        case ATCA_ZONE_CONFIG: *size = 128; break;
   10164:	683b      	ldr	r3, [r7, #0]
   10166:	2280      	movs	r2, #128	; 0x80
   10168:	601a      	str	r2, [r3, #0]
   1016a:	e026      	b.n	101ba <atcab_get_zone_size+0xce>
        case ATCA_ZONE_OTP:    *size = 64; break;
   1016c:	683b      	ldr	r3, [r7, #0]
   1016e:	2240      	movs	r2, #64	; 0x40
   10170:	601a      	str	r2, [r3, #0]
   10172:	e022      	b.n	101ba <atcab_get_zone_size+0xce>
        case ATCA_ZONE_DATA:
            if (slot < 8)
   10174:	1d3b      	adds	r3, r7, #4
   10176:	881b      	ldrh	r3, [r3, #0]
   10178:	2b07      	cmp	r3, #7
   1017a:	d803      	bhi.n	10184 <atcab_get_zone_size+0x98>
            {
                *size = 36;
   1017c:	683b      	ldr	r3, [r7, #0]
   1017e:	2224      	movs	r2, #36	; 0x24
   10180:	601a      	str	r2, [r3, #0]
            }
            else
            {
                status = ATCA_BAD_PARAM;
            }
            break;
   10182:	e01a      	b.n	101ba <atcab_get_zone_size+0xce>
            else if (slot == 8)
   10184:	1d3b      	adds	r3, r7, #4
   10186:	881b      	ldrh	r3, [r3, #0]
   10188:	2b08      	cmp	r3, #8
   1018a:	d104      	bne.n	10196 <atcab_get_zone_size+0xaa>
                *size = 416;
   1018c:	683b      	ldr	r3, [r7, #0]
   1018e:	22d0      	movs	r2, #208	; 0xd0
   10190:	0052      	lsls	r2, r2, #1
   10192:	601a      	str	r2, [r3, #0]
            break;
   10194:	e011      	b.n	101ba <atcab_get_zone_size+0xce>
            else if (slot < 16)
   10196:	1d3b      	adds	r3, r7, #4
   10198:	881b      	ldrh	r3, [r3, #0]
   1019a:	2b0f      	cmp	r3, #15
   1019c:	d803      	bhi.n	101a6 <atcab_get_zone_size+0xba>
                *size = 72;
   1019e:	683b      	ldr	r3, [r7, #0]
   101a0:	2248      	movs	r2, #72	; 0x48
   101a2:	601a      	str	r2, [r3, #0]
            break;
   101a4:	e009      	b.n	101ba <atcab_get_zone_size+0xce>
                status = ATCA_BAD_PARAM;
   101a6:	230f      	movs	r3, #15
   101a8:	18fb      	adds	r3, r7, r3
   101aa:	22e2      	movs	r2, #226	; 0xe2
   101ac:	701a      	strb	r2, [r3, #0]
            break;
   101ae:	e004      	b.n	101ba <atcab_get_zone_size+0xce>
        default: status = ATCA_BAD_PARAM; break;
   101b0:	230f      	movs	r3, #15
   101b2:	18fb      	adds	r3, r7, r3
   101b4:	22e2      	movs	r2, #226	; 0xe2
   101b6:	701a      	strb	r2, [r3, #0]
   101b8:	46c0      	nop			; (mov r8, r8)
        }
    }

    return status;
   101ba:	230f      	movs	r3, #15
   101bc:	18fb      	adds	r3, r7, r3
   101be:	781b      	ldrb	r3, [r3, #0]
}
   101c0:	0018      	movs	r0, r3
   101c2:	46bd      	mov	sp, r7
   101c4:	b004      	add	sp, #16
   101c6:	bd80      	pop	{r7, pc}
   101c8:	20000590 	.word	0x20000590

000101cc <atcab_execute_command>:
 *
 *
 * \return ATCA_SUCCESS on success, otherwise an error code.
 */
ATCA_STATUS atcab_execute_command(ATCAPacket* packet)
{
   101cc:	b590      	push	{r4, r7, lr}
   101ce:	b087      	sub	sp, #28
   101d0:	af00      	add	r7, sp, #0
   101d2:	6078      	str	r0, [r7, #4]
    ATCA_STATUS status;
    ATCACommand ca_cmd = _gDevice->mCommands;
   101d4:	4b45      	ldr	r3, [pc, #276]	; (102ec <atcab_execute_command+0x120>)
   101d6:	681b      	ldr	r3, [r3, #0]
   101d8:	681b      	ldr	r3, [r3, #0]
   101da:	613b      	str	r3, [r7, #16]
    ATCAIface ca_iface = _gDevice->mIface;
   101dc:	4b43      	ldr	r3, [pc, #268]	; (102ec <atcab_execute_command+0x120>)
   101de:	681b      	ldr	r3, [r3, #0]
   101e0:	685b      	ldr	r3, [r3, #4]
   101e2:	60fb      	str	r3, [r7, #12]

    if ((status = atGetExecTime(packet->opcode, ca_cmd)) != ATCA_SUCCESS)
   101e4:	687b      	ldr	r3, [r7, #4]
   101e6:	789b      	ldrb	r3, [r3, #2]
   101e8:	2217      	movs	r2, #23
   101ea:	18bc      	adds	r4, r7, r2
   101ec:	693a      	ldr	r2, [r7, #16]
   101ee:	0011      	movs	r1, r2
   101f0:	0018      	movs	r0, r3
   101f2:	4b3f      	ldr	r3, [pc, #252]	; (102f0 <atcab_execute_command+0x124>)
   101f4:	4798      	blx	r3
   101f6:	0003      	movs	r3, r0
   101f8:	7023      	strb	r3, [r4, #0]
   101fa:	2317      	movs	r3, #23
   101fc:	18fb      	adds	r3, r7, r3
   101fe:	781b      	ldrb	r3, [r3, #0]
   10200:	2b00      	cmp	r3, #0
   10202:	d003      	beq.n	1020c <atcab_execute_command+0x40>
    {
        return status;
   10204:	2317      	movs	r3, #23
   10206:	18fb      	adds	r3, r7, r3
   10208:	781b      	ldrb	r3, [r3, #0]
   1020a:	e06a      	b.n	102e2 <atcab_execute_command+0x116>
    }
    do
    {
        if ((status = atcab_wakeup()) != ATCA_SUCCESS)
   1020c:	2317      	movs	r3, #23
   1020e:	18fc      	adds	r4, r7, r3
   10210:	4b38      	ldr	r3, [pc, #224]	; (102f4 <atcab_execute_command+0x128>)
   10212:	4798      	blx	r3
   10214:	0003      	movs	r3, r0
   10216:	7023      	strb	r3, [r4, #0]
   10218:	2317      	movs	r3, #23
   1021a:	18fb      	adds	r3, r7, r3
   1021c:	781b      	ldrb	r3, [r3, #0]
   1021e:	2b00      	cmp	r3, #0
   10220:	d153      	bne.n	102ca <atcab_execute_command+0xfe>
        {
            break;
        }

        // send the command
        if ((status = atsend(ca_iface, (uint8_t*)packet, packet->txsize)) != ATCA_SUCCESS)
   10222:	687b      	ldr	r3, [r7, #4]
   10224:	785b      	ldrb	r3, [r3, #1]
   10226:	001a      	movs	r2, r3
   10228:	2317      	movs	r3, #23
   1022a:	18fc      	adds	r4, r7, r3
   1022c:	6879      	ldr	r1, [r7, #4]
   1022e:	68fb      	ldr	r3, [r7, #12]
   10230:	0018      	movs	r0, r3
   10232:	4b31      	ldr	r3, [pc, #196]	; (102f8 <atcab_execute_command+0x12c>)
   10234:	4798      	blx	r3
   10236:	0003      	movs	r3, r0
   10238:	7023      	strb	r3, [r4, #0]
   1023a:	2317      	movs	r3, #23
   1023c:	18fb      	adds	r3, r7, r3
   1023e:	781b      	ldrb	r3, [r3, #0]
   10240:	2b00      	cmp	r3, #0
   10242:	d144      	bne.n	102ce <atcab_execute_command+0x102>
        {
            break;
        }

        // delay the appropriate amount of time for command to execute
        atca_delay_ms(ca_cmd->execution_time_msec);
   10244:	693b      	ldr	r3, [r7, #16]
   10246:	885b      	ldrh	r3, [r3, #2]
   10248:	0018      	movs	r0, r3
   1024a:	4b2c      	ldr	r3, [pc, #176]	; (102fc <atcab_execute_command+0x130>)
   1024c:	4798      	blx	r3

        // receive the response
        if ((status = atreceive(ca_iface, packet->data, &(packet->rxsize))) != ATCA_SUCCESS)
   1024e:	687b      	ldr	r3, [r7, #4]
   10250:	1d99      	adds	r1, r3, #6
   10252:	687b      	ldr	r3, [r7, #4]
   10254:	338a      	adds	r3, #138	; 0x8a
   10256:	001a      	movs	r2, r3
   10258:	2317      	movs	r3, #23
   1025a:	18fc      	adds	r4, r7, r3
   1025c:	68fb      	ldr	r3, [r7, #12]
   1025e:	0018      	movs	r0, r3
   10260:	4b27      	ldr	r3, [pc, #156]	; (10300 <atcab_execute_command+0x134>)
   10262:	4798      	blx	r3
   10264:	0003      	movs	r3, r0
   10266:	7023      	strb	r3, [r4, #0]
   10268:	2317      	movs	r3, #23
   1026a:	18fb      	adds	r3, r7, r3
   1026c:	781b      	ldrb	r3, [r3, #0]
   1026e:	2b00      	cmp	r3, #0
   10270:	d12f      	bne.n	102d2 <atcab_execute_command+0x106>
        {
            break;
        }

        // Check response size
        if (packet->rxsize < 4)
   10272:	687b      	ldr	r3, [r7, #4]
   10274:	228a      	movs	r2, #138	; 0x8a
   10276:	5a9b      	ldrh	r3, [r3, r2]
   10278:	2b03      	cmp	r3, #3
   1027a:	d80e      	bhi.n	1029a <atcab_execute_command+0xce>
        {
            if (packet->rxsize > 0)
   1027c:	687b      	ldr	r3, [r7, #4]
   1027e:	228a      	movs	r2, #138	; 0x8a
   10280:	5a9b      	ldrh	r3, [r3, r2]
   10282:	2b00      	cmp	r3, #0
   10284:	d004      	beq.n	10290 <atcab_execute_command+0xc4>
            {
                status = ATCA_RX_FAIL;
   10286:	2317      	movs	r3, #23
   10288:	18fb      	adds	r3, r7, r3
   1028a:	22e6      	movs	r2, #230	; 0xe6
   1028c:	701a      	strb	r2, [r3, #0]
            }
            else
            {
                status = ATCA_RX_NO_RESPONSE;
            }
            break;
   1028e:	e023      	b.n	102d8 <atcab_execute_command+0x10c>
                status = ATCA_RX_NO_RESPONSE;
   10290:	2317      	movs	r3, #23
   10292:	18fb      	adds	r3, r7, r3
   10294:	22e7      	movs	r2, #231	; 0xe7
   10296:	701a      	strb	r2, [r3, #0]
            break;
   10298:	e01e      	b.n	102d8 <atcab_execute_command+0x10c>
        }

        if ((status = atCheckCrc(packet->data)) != ATCA_SUCCESS)
   1029a:	687b      	ldr	r3, [r7, #4]
   1029c:	3306      	adds	r3, #6
   1029e:	2217      	movs	r2, #23
   102a0:	18bc      	adds	r4, r7, r2
   102a2:	0018      	movs	r0, r3
   102a4:	4b17      	ldr	r3, [pc, #92]	; (10304 <atcab_execute_command+0x138>)
   102a6:	4798      	blx	r3
   102a8:	0003      	movs	r3, r0
   102aa:	7023      	strb	r3, [r4, #0]
   102ac:	2317      	movs	r3, #23
   102ae:	18fb      	adds	r3, r7, r3
   102b0:	781b      	ldrb	r3, [r3, #0]
   102b2:	2b00      	cmp	r3, #0
   102b4:	d10f      	bne.n	102d6 <atcab_execute_command+0x10a>
        {
            break;
        }

        if ((status = isATCAError(packet->data)) != ATCA_SUCCESS)
   102b6:	687b      	ldr	r3, [r7, #4]
   102b8:	3306      	adds	r3, #6
   102ba:	2217      	movs	r2, #23
   102bc:	18bc      	adds	r4, r7, r2
   102be:	0018      	movs	r0, r3
   102c0:	4b11      	ldr	r3, [pc, #68]	; (10308 <atcab_execute_command+0x13c>)
   102c2:	4798      	blx	r3
   102c4:	0003      	movs	r3, r0
   102c6:	7023      	strb	r3, [r4, #0]
   102c8:	e006      	b.n	102d8 <atcab_execute_command+0x10c>
            break;
   102ca:	46c0      	nop			; (mov r8, r8)
   102cc:	e004      	b.n	102d8 <atcab_execute_command+0x10c>
            break;
   102ce:	46c0      	nop			; (mov r8, r8)
   102d0:	e002      	b.n	102d8 <atcab_execute_command+0x10c>
            break;
   102d2:	46c0      	nop			; (mov r8, r8)
   102d4:	e000      	b.n	102d8 <atcab_execute_command+0x10c>
            break;
   102d6:	46c0      	nop			; (mov r8, r8)
            break;
        }
    }
    while (0);

    _atcab_exit();
   102d8:	4b0c      	ldr	r3, [pc, #48]	; (1030c <atcab_execute_command+0x140>)
   102da:	4798      	blx	r3
    return status;
   102dc:	2317      	movs	r3, #23
   102de:	18fb      	adds	r3, r7, r3
   102e0:	781b      	ldrb	r3, [r3, #0]
   102e2:	0018      	movs	r0, r3
   102e4:	46bd      	mov	sp, r7
   102e6:	b007      	add	sp, #28
   102e8:	bd90      	pop	{r4, r7, pc}
   102ea:	46c0      	nop			; (mov r8, r8)
   102ec:	20000590 	.word	0x20000590
   102f0:	0000f7f9 	.word	0x0000f7f9
   102f4:	0000ff61 	.word	0x0000ff61
   102f8:	0000fcf5 	.word	0x0000fcf5
   102fc:	00012379 	.word	0x00012379
   10300:	0000fd17 	.word	0x0000fd17
   10304:	0000fa4d 	.word	0x0000fa4d
   10308:	0000fac1 	.word	0x0000fac1
   1030c:	0000ffe5 	.word	0x0000ffe5

00010310 <base64Char>:
 * \param[in] id     index to check
 * \param[in] rules  base64 ruleset to use
 * \return the base 64 character of the given index
 */
char base64Char(char id, const uint8_t * rules)
{
   10310:	b580      	push	{r7, lr}
   10312:	b082      	sub	sp, #8
   10314:	af00      	add	r7, sp, #0
   10316:	0002      	movs	r2, r0
   10318:	6039      	str	r1, [r7, #0]
   1031a:	1dfb      	adds	r3, r7, #7
   1031c:	701a      	strb	r2, [r3, #0]
    if (id >= 0 && (id < 26))
   1031e:	1dfb      	adds	r3, r7, #7
   10320:	781b      	ldrb	r3, [r3, #0]
   10322:	2b19      	cmp	r3, #25
   10324:	d804      	bhi.n	10330 <base64Char+0x20>
    {
        return (char)('A' + id);
   10326:	1dfb      	adds	r3, r7, #7
   10328:	781b      	ldrb	r3, [r3, #0]
   1032a:	3341      	adds	r3, #65	; 0x41
   1032c:	b2db      	uxtb	r3, r3
   1032e:	e031      	b.n	10394 <base64Char+0x84>
    }
    if ((id >= 26) && (id < 52))
   10330:	1dfb      	adds	r3, r7, #7
   10332:	781b      	ldrb	r3, [r3, #0]
   10334:	2b19      	cmp	r3, #25
   10336:	d908      	bls.n	1034a <base64Char+0x3a>
   10338:	1dfb      	adds	r3, r7, #7
   1033a:	781b      	ldrb	r3, [r3, #0]
   1033c:	2b33      	cmp	r3, #51	; 0x33
   1033e:	d804      	bhi.n	1034a <base64Char+0x3a>
    {
        return (char)('a' + id - 26);
   10340:	1dfb      	adds	r3, r7, #7
   10342:	781b      	ldrb	r3, [r3, #0]
   10344:	3347      	adds	r3, #71	; 0x47
   10346:	b2db      	uxtb	r3, r3
   10348:	e024      	b.n	10394 <base64Char+0x84>
    }
    if ((id >= 52) && (id < 62))
   1034a:	1dfb      	adds	r3, r7, #7
   1034c:	781b      	ldrb	r3, [r3, #0]
   1034e:	2b33      	cmp	r3, #51	; 0x33
   10350:	d908      	bls.n	10364 <base64Char+0x54>
   10352:	1dfb      	adds	r3, r7, #7
   10354:	781b      	ldrb	r3, [r3, #0]
   10356:	2b3d      	cmp	r3, #61	; 0x3d
   10358:	d804      	bhi.n	10364 <base64Char+0x54>
    {
        return (char)('0' + id - 52);
   1035a:	1dfb      	adds	r3, r7, #7
   1035c:	781b      	ldrb	r3, [r3, #0]
   1035e:	3b04      	subs	r3, #4
   10360:	b2db      	uxtb	r3, r3
   10362:	e017      	b.n	10394 <base64Char+0x84>
    }
    if (id == 62)
   10364:	1dfb      	adds	r3, r7, #7
   10366:	781b      	ldrb	r3, [r3, #0]
   10368:	2b3e      	cmp	r3, #62	; 0x3e
   1036a:	d102      	bne.n	10372 <base64Char+0x62>
    {
        return rules[0];
   1036c:	683b      	ldr	r3, [r7, #0]
   1036e:	781b      	ldrb	r3, [r3, #0]
   10370:	e010      	b.n	10394 <base64Char+0x84>
    }
    if (id == 63)
   10372:	1dfb      	adds	r3, r7, #7
   10374:	781b      	ldrb	r3, [r3, #0]
   10376:	2b3f      	cmp	r3, #63	; 0x3f
   10378:	d103      	bne.n	10382 <base64Char+0x72>
    {
        return rules[1];
   1037a:	683b      	ldr	r3, [r7, #0]
   1037c:	3301      	adds	r3, #1
   1037e:	781b      	ldrb	r3, [r3, #0]
   10380:	e008      	b.n	10394 <base64Char+0x84>
    }

    if (id == IS_EQUAL)
   10382:	1dfb      	adds	r3, r7, #7
   10384:	781b      	ldrb	r3, [r3, #0]
   10386:	2b40      	cmp	r3, #64	; 0x40
   10388:	d103      	bne.n	10392 <base64Char+0x82>
    {
        return rules[2];
   1038a:	683b      	ldr	r3, [r7, #0]
   1038c:	3302      	adds	r3, #2
   1038e:	781b      	ldrb	r3, [r3, #0]
   10390:	e000      	b.n	10394 <base64Char+0x84>
    }
    return IS_INVALID;
   10392:	23ff      	movs	r3, #255	; 0xff
}
   10394:	0018      	movs	r0, r3
   10396:	46bd      	mov	sp, r7
   10398:	b002      	add	sp, #8
   1039a:	bd80      	pop	{r7, pc}

0001039c <atcab_base64encode_>:
    size_t          array_len,   /**< [in] The length of the byte array */
    char*           encoded,     /**< [in] The output converted to base 64 encoded characters. */
    size_t*         encoded_len, /**< [inout] Input: The size of the encoded buffer, Output: The length of the encoded base 64 character string */
    const uint8_t * rules        /**< [in] ruleset to use during encoding */
    )
{
   1039c:	b590      	push	{r4, r7, lr}
   1039e:	b08d      	sub	sp, #52	; 0x34
   103a0:	af00      	add	r7, sp, #0
   103a2:	60f8      	str	r0, [r7, #12]
   103a4:	60b9      	str	r1, [r7, #8]
   103a6:	607a      	str	r2, [r7, #4]
   103a8:	603b      	str	r3, [r7, #0]
    ATCA_STATUS status = ATCA_SUCCESS;
   103aa:	232f      	movs	r3, #47	; 0x2f
   103ac:	18fb      	adds	r3, r7, r3
   103ae:	2200      	movs	r2, #0
   103b0:	701a      	strb	r2, [r3, #0]
    size_t i = 0;
   103b2:	2300      	movs	r3, #0
   103b4:	62bb      	str	r3, [r7, #40]	; 0x28
    size_t j = 0;
   103b6:	2300      	movs	r3, #0
   103b8:	627b      	str	r3, [r7, #36]	; 0x24
    size_t offset = 0;
   103ba:	2300      	movs	r3, #0
   103bc:	623b      	str	r3, [r7, #32]
    int id = 0;
   103be:	2300      	movs	r3, #0
   103c0:	61bb      	str	r3, [r7, #24]
    size_t out_len;

    size_t r3 = (array_len % 3);
   103c2:	68ba      	ldr	r2, [r7, #8]
   103c4:	4bb8      	ldr	r3, [pc, #736]	; (106a8 <atcab_base64encode_+0x30c>)
   103c6:	2103      	movs	r1, #3
   103c8:	0010      	movs	r0, r2
   103ca:	4798      	blx	r3
   103cc:	000b      	movs	r3, r1
   103ce:	617b      	str	r3, [r7, #20]
    size_t b64_len = ((array_len * 4) / 3) + r3;
   103d0:	68bb      	ldr	r3, [r7, #8]
   103d2:	009a      	lsls	r2, r3, #2
   103d4:	4bb5      	ldr	r3, [pc, #724]	; (106ac <atcab_base64encode_+0x310>)
   103d6:	2103      	movs	r1, #3
   103d8:	0010      	movs	r0, r2
   103da:	4798      	blx	r3
   103dc:	0003      	movs	r3, r0
   103de:	001a      	movs	r2, r3
   103e0:	697b      	ldr	r3, [r7, #20]
   103e2:	18d3      	adds	r3, r2, r3
   103e4:	613b      	str	r3, [r7, #16]

    do
    {
        // Check the input parameters
        if (encoded == NULL || byte_array == NULL || encoded_len == NULL || !rules)
   103e6:	687b      	ldr	r3, [r7, #4]
   103e8:	2b00      	cmp	r3, #0
   103ea:	d008      	beq.n	103fe <atcab_base64encode_+0x62>
   103ec:	68fb      	ldr	r3, [r7, #12]
   103ee:	2b00      	cmp	r3, #0
   103f0:	d005      	beq.n	103fe <atcab_base64encode_+0x62>
   103f2:	683b      	ldr	r3, [r7, #0]
   103f4:	2b00      	cmp	r3, #0
   103f6:	d002      	beq.n	103fe <atcab_base64encode_+0x62>
   103f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   103fa:	2b00      	cmp	r3, #0
   103fc:	d10c      	bne.n	10418 <atcab_base64encode_+0x7c>
        {
            status = ATCA_BAD_PARAM;
   103fe:	232f      	movs	r3, #47	; 0x2f
   10400:	18fb      	adds	r3, r7, r3
   10402:	22e2      	movs	r2, #226	; 0xe2
   10404:	701a      	strb	r2, [r3, #0]
            BREAK(status, "Null input parameter");
   10406:	232f      	movs	r3, #47	; 0x2f
   10408:	18fb      	adds	r3, r7, r3
   1040a:	781a      	ldrb	r2, [r3, #0]
   1040c:	4ba8      	ldr	r3, [pc, #672]	; (106b0 <atcab_base64encode_+0x314>)
   1040e:	0011      	movs	r1, r2
   10410:	0018      	movs	r0, r3
   10412:	4ba8      	ldr	r3, [pc, #672]	; (106b4 <atcab_base64encode_+0x318>)
   10414:	4798      	blx	r3
   10416:	e140      	b.n	1069a <atcab_base64encode_+0x2fe>
        }

        // Set the output length.  Add the \r\n every n characters
        out_len = b64_len;
   10418:	693b      	ldr	r3, [r7, #16]
   1041a:	61fb      	str	r3, [r7, #28]
        if (rules[3])
   1041c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   1041e:	3303      	adds	r3, #3
   10420:	781b      	ldrb	r3, [r3, #0]
   10422:	2b00      	cmp	r3, #0
   10424:	d00c      	beq.n	10440 <atcab_base64encode_+0xa4>
        {
            out_len += (b64_len / rules[3]) * 2;
   10426:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   10428:	3303      	adds	r3, #3
   1042a:	781b      	ldrb	r3, [r3, #0]
   1042c:	001a      	movs	r2, r3
   1042e:	4b9f      	ldr	r3, [pc, #636]	; (106ac <atcab_base64encode_+0x310>)
   10430:	0011      	movs	r1, r2
   10432:	6938      	ldr	r0, [r7, #16]
   10434:	4798      	blx	r3
   10436:	0003      	movs	r3, r0
   10438:	005b      	lsls	r3, r3, #1
   1043a:	69fa      	ldr	r2, [r7, #28]
   1043c:	18d3      	adds	r3, r2, r3
   1043e:	61fb      	str	r3, [r7, #28]
        }

        if (*encoded_len < out_len)
   10440:	683b      	ldr	r3, [r7, #0]
   10442:	681a      	ldr	r2, [r3, #0]
   10444:	69fb      	ldr	r3, [r7, #28]
   10446:	429a      	cmp	r2, r3
   10448:	d20c      	bcs.n	10464 <atcab_base64encode_+0xc8>
        {
            status = ATCA_BAD_PARAM;
   1044a:	232f      	movs	r3, #47	; 0x2f
   1044c:	18fb      	adds	r3, r7, r3
   1044e:	22e2      	movs	r2, #226	; 0xe2
   10450:	701a      	strb	r2, [r3, #0]
            BREAK(status, "Length of encoded buffer too small");
   10452:	232f      	movs	r3, #47	; 0x2f
   10454:	18fb      	adds	r3, r7, r3
   10456:	781a      	ldrb	r2, [r3, #0]
   10458:	4b97      	ldr	r3, [pc, #604]	; (106b8 <atcab_base64encode_+0x31c>)
   1045a:	0011      	movs	r1, r2
   1045c:	0018      	movs	r0, r3
   1045e:	4b95      	ldr	r3, [pc, #596]	; (106b4 <atcab_base64encode_+0x318>)
   10460:	4798      	blx	r3
   10462:	e11a      	b.n	1069a <atcab_base64encode_+0x2fe>
        }
        // Initialize the return length to 0
        *encoded_len = 0;
   10464:	683b      	ldr	r3, [r7, #0]
   10466:	2200      	movs	r2, #0
   10468:	601a      	str	r2, [r3, #0]

        // Loop through the byte array by 3 then map to 4 base 64 encoded characters
        for (i = 0; i < array_len; i += 3)
   1046a:	2300      	movs	r3, #0
   1046c:	62bb      	str	r3, [r7, #40]	; 0x28
   1046e:	e0e6      	b.n	1063e <atcab_base64encode_+0x2a2>
        {
            id = (byte_array[i] & 0xFC) >> 2;
   10470:	68fa      	ldr	r2, [r7, #12]
   10472:	6abb      	ldr	r3, [r7, #40]	; 0x28
   10474:	18d3      	adds	r3, r2, r3
   10476:	781b      	ldrb	r3, [r3, #0]
   10478:	089b      	lsrs	r3, r3, #2
   1047a:	b2db      	uxtb	r3, r3
   1047c:	61bb      	str	r3, [r7, #24]
            encoded[j++] = base64Char(id, rules);
   1047e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   10480:	1c5a      	adds	r2, r3, #1
   10482:	627a      	str	r2, [r7, #36]	; 0x24
   10484:	687a      	ldr	r2, [r7, #4]
   10486:	18d4      	adds	r4, r2, r3
   10488:	69bb      	ldr	r3, [r7, #24]
   1048a:	b2db      	uxtb	r3, r3
   1048c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   1048e:	0011      	movs	r1, r2
   10490:	0018      	movs	r0, r3
   10492:	4b8a      	ldr	r3, [pc, #552]	; (106bc <atcab_base64encode_+0x320>)
   10494:	4798      	blx	r3
   10496:	0003      	movs	r3, r0
   10498:	7023      	strb	r3, [r4, #0]
            id = (byte_array[i] & 0x03) << 4;
   1049a:	68fa      	ldr	r2, [r7, #12]
   1049c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1049e:	18d3      	adds	r3, r2, r3
   104a0:	781b      	ldrb	r3, [r3, #0]
   104a2:	011b      	lsls	r3, r3, #4
   104a4:	2230      	movs	r2, #48	; 0x30
   104a6:	4013      	ands	r3, r2
   104a8:	61bb      	str	r3, [r7, #24]
            if (i + 1 < array_len)
   104aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
   104ac:	1c5a      	adds	r2, r3, #1
   104ae:	68bb      	ldr	r3, [r7, #8]
   104b0:	429a      	cmp	r2, r3
   104b2:	d272      	bcs.n	1059a <atcab_base64encode_+0x1fe>
            {
                id |= (byte_array[i + 1] & 0xF0) >> 4;
   104b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
   104b6:	3301      	adds	r3, #1
   104b8:	68fa      	ldr	r2, [r7, #12]
   104ba:	18d3      	adds	r3, r2, r3
   104bc:	781b      	ldrb	r3, [r3, #0]
   104be:	091b      	lsrs	r3, r3, #4
   104c0:	b2db      	uxtb	r3, r3
   104c2:	001a      	movs	r2, r3
   104c4:	69bb      	ldr	r3, [r7, #24]
   104c6:	4313      	orrs	r3, r2
   104c8:	61bb      	str	r3, [r7, #24]
                encoded[j++] = base64Char(id, rules);
   104ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   104cc:	1c5a      	adds	r2, r3, #1
   104ce:	627a      	str	r2, [r7, #36]	; 0x24
   104d0:	687a      	ldr	r2, [r7, #4]
   104d2:	18d4      	adds	r4, r2, r3
   104d4:	69bb      	ldr	r3, [r7, #24]
   104d6:	b2db      	uxtb	r3, r3
   104d8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   104da:	0011      	movs	r1, r2
   104dc:	0018      	movs	r0, r3
   104de:	4b77      	ldr	r3, [pc, #476]	; (106bc <atcab_base64encode_+0x320>)
   104e0:	4798      	blx	r3
   104e2:	0003      	movs	r3, r0
   104e4:	7023      	strb	r3, [r4, #0]
                id = (byte_array[i + 1] & 0x0F) << 2;
   104e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
   104e8:	3301      	adds	r3, #1
   104ea:	68fa      	ldr	r2, [r7, #12]
   104ec:	18d3      	adds	r3, r2, r3
   104ee:	781b      	ldrb	r3, [r3, #0]
   104f0:	009b      	lsls	r3, r3, #2
   104f2:	223c      	movs	r2, #60	; 0x3c
   104f4:	4013      	ands	r3, r2
   104f6:	61bb      	str	r3, [r7, #24]
                if (i + 2 < array_len)
   104f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
   104fa:	1c9a      	adds	r2, r3, #2
   104fc:	68bb      	ldr	r3, [r7, #8]
   104fe:	429a      	cmp	r2, r3
   10500:	d230      	bcs.n	10564 <atcab_base64encode_+0x1c8>
                {
                    id |= (byte_array[i + 2] & 0xC0) >> 6;
   10502:	6abb      	ldr	r3, [r7, #40]	; 0x28
   10504:	3302      	adds	r3, #2
   10506:	68fa      	ldr	r2, [r7, #12]
   10508:	18d3      	adds	r3, r2, r3
   1050a:	781b      	ldrb	r3, [r3, #0]
   1050c:	099b      	lsrs	r3, r3, #6
   1050e:	b2db      	uxtb	r3, r3
   10510:	001a      	movs	r2, r3
   10512:	69bb      	ldr	r3, [r7, #24]
   10514:	4313      	orrs	r3, r2
   10516:	61bb      	str	r3, [r7, #24]
                    encoded[j++] = base64Char(id, rules);
   10518:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1051a:	1c5a      	adds	r2, r3, #1
   1051c:	627a      	str	r2, [r7, #36]	; 0x24
   1051e:	687a      	ldr	r2, [r7, #4]
   10520:	18d4      	adds	r4, r2, r3
   10522:	69bb      	ldr	r3, [r7, #24]
   10524:	b2db      	uxtb	r3, r3
   10526:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   10528:	0011      	movs	r1, r2
   1052a:	0018      	movs	r0, r3
   1052c:	4b63      	ldr	r3, [pc, #396]	; (106bc <atcab_base64encode_+0x320>)
   1052e:	4798      	blx	r3
   10530:	0003      	movs	r3, r0
   10532:	7023      	strb	r3, [r4, #0]
                    id = byte_array[i + 2] & 0x3F;
   10534:	6abb      	ldr	r3, [r7, #40]	; 0x28
   10536:	3302      	adds	r3, #2
   10538:	68fa      	ldr	r2, [r7, #12]
   1053a:	18d3      	adds	r3, r2, r3
   1053c:	781b      	ldrb	r3, [r3, #0]
   1053e:	001a      	movs	r2, r3
   10540:	233f      	movs	r3, #63	; 0x3f
   10542:	4013      	ands	r3, r2
   10544:	61bb      	str	r3, [r7, #24]
                    encoded[j++] = base64Char(id, rules);
   10546:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   10548:	1c5a      	adds	r2, r3, #1
   1054a:	627a      	str	r2, [r7, #36]	; 0x24
   1054c:	687a      	ldr	r2, [r7, #4]
   1054e:	18d4      	adds	r4, r2, r3
   10550:	69bb      	ldr	r3, [r7, #24]
   10552:	b2db      	uxtb	r3, r3
   10554:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   10556:	0011      	movs	r1, r2
   10558:	0018      	movs	r0, r3
   1055a:	4b58      	ldr	r3, [pc, #352]	; (106bc <atcab_base64encode_+0x320>)
   1055c:	4798      	blx	r3
   1055e:	0003      	movs	r3, r0
   10560:	7023      	strb	r3, [r4, #0]
   10562:	e040      	b.n	105e6 <atcab_base64encode_+0x24a>
                }
                else
                {
                    encoded[j++] = base64Char(id, rules);
   10564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   10566:	1c5a      	adds	r2, r3, #1
   10568:	627a      	str	r2, [r7, #36]	; 0x24
   1056a:	687a      	ldr	r2, [r7, #4]
   1056c:	18d4      	adds	r4, r2, r3
   1056e:	69bb      	ldr	r3, [r7, #24]
   10570:	b2db      	uxtb	r3, r3
   10572:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   10574:	0011      	movs	r1, r2
   10576:	0018      	movs	r0, r3
   10578:	4b50      	ldr	r3, [pc, #320]	; (106bc <atcab_base64encode_+0x320>)
   1057a:	4798      	blx	r3
   1057c:	0003      	movs	r3, r0
   1057e:	7023      	strb	r3, [r4, #0]
                    encoded[j++] = base64Char(IS_EQUAL, rules);
   10580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   10582:	1c5a      	adds	r2, r3, #1
   10584:	627a      	str	r2, [r7, #36]	; 0x24
   10586:	687a      	ldr	r2, [r7, #4]
   10588:	18d4      	adds	r4, r2, r3
   1058a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   1058c:	0019      	movs	r1, r3
   1058e:	2040      	movs	r0, #64	; 0x40
   10590:	4b4a      	ldr	r3, [pc, #296]	; (106bc <atcab_base64encode_+0x320>)
   10592:	4798      	blx	r3
   10594:	0003      	movs	r3, r0
   10596:	7023      	strb	r3, [r4, #0]
   10598:	e025      	b.n	105e6 <atcab_base64encode_+0x24a>
                }
            }
            else
            {
                encoded[j++] = base64Char(id, rules);
   1059a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1059c:	1c5a      	adds	r2, r3, #1
   1059e:	627a      	str	r2, [r7, #36]	; 0x24
   105a0:	687a      	ldr	r2, [r7, #4]
   105a2:	18d4      	adds	r4, r2, r3
   105a4:	69bb      	ldr	r3, [r7, #24]
   105a6:	b2db      	uxtb	r3, r3
   105a8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   105aa:	0011      	movs	r1, r2
   105ac:	0018      	movs	r0, r3
   105ae:	4b43      	ldr	r3, [pc, #268]	; (106bc <atcab_base64encode_+0x320>)
   105b0:	4798      	blx	r3
   105b2:	0003      	movs	r3, r0
   105b4:	7023      	strb	r3, [r4, #0]
                encoded[j++] = base64Char(IS_EQUAL, rules);
   105b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   105b8:	1c5a      	adds	r2, r3, #1
   105ba:	627a      	str	r2, [r7, #36]	; 0x24
   105bc:	687a      	ldr	r2, [r7, #4]
   105be:	18d4      	adds	r4, r2, r3
   105c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   105c2:	0019      	movs	r1, r3
   105c4:	2040      	movs	r0, #64	; 0x40
   105c6:	4b3d      	ldr	r3, [pc, #244]	; (106bc <atcab_base64encode_+0x320>)
   105c8:	4798      	blx	r3
   105ca:	0003      	movs	r3, r0
   105cc:	7023      	strb	r3, [r4, #0]
                encoded[j++] = base64Char(IS_EQUAL, rules);
   105ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   105d0:	1c5a      	adds	r2, r3, #1
   105d2:	627a      	str	r2, [r7, #36]	; 0x24
   105d4:	687a      	ldr	r2, [r7, #4]
   105d6:	18d4      	adds	r4, r2, r3
   105d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   105da:	0019      	movs	r1, r3
   105dc:	2040      	movs	r0, #64	; 0x40
   105de:	4b37      	ldr	r3, [pc, #220]	; (106bc <atcab_base64encode_+0x320>)
   105e0:	4798      	blx	r3
   105e2:	0003      	movs	r3, r0
   105e4:	7023      	strb	r3, [r4, #0]
            }
            // Add \r\n every n bytes if specified
            if (rules[3] && ((j - offset) % rules[3] == 0) && encoded[j - 1])
   105e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   105e8:	3303      	adds	r3, #3
   105ea:	781b      	ldrb	r3, [r3, #0]
   105ec:	2b00      	cmp	r3, #0
   105ee:	d023      	beq.n	10638 <atcab_base64encode_+0x29c>
   105f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   105f2:	6a3b      	ldr	r3, [r7, #32]
   105f4:	1ad2      	subs	r2, r2, r3
   105f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   105f8:	3303      	adds	r3, #3
   105fa:	781b      	ldrb	r3, [r3, #0]
   105fc:	0019      	movs	r1, r3
   105fe:	4b2a      	ldr	r3, [pc, #168]	; (106a8 <atcab_base64encode_+0x30c>)
   10600:	0010      	movs	r0, r2
   10602:	4798      	blx	r3
   10604:	1e0b      	subs	r3, r1, #0
   10606:	d117      	bne.n	10638 <atcab_base64encode_+0x29c>
   10608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1060a:	3b01      	subs	r3, #1
   1060c:	687a      	ldr	r2, [r7, #4]
   1060e:	18d3      	adds	r3, r2, r3
   10610:	781b      	ldrb	r3, [r3, #0]
   10612:	2b00      	cmp	r3, #0
   10614:	d010      	beq.n	10638 <atcab_base64encode_+0x29c>
            {
                // as soon as we do this, we introduce an offset
                encoded[j++] = '\r';
   10616:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   10618:	1c5a      	adds	r2, r3, #1
   1061a:	627a      	str	r2, [r7, #36]	; 0x24
   1061c:	687a      	ldr	r2, [r7, #4]
   1061e:	18d3      	adds	r3, r2, r3
   10620:	220d      	movs	r2, #13
   10622:	701a      	strb	r2, [r3, #0]
                encoded[j++] = '\n';
   10624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   10626:	1c5a      	adds	r2, r3, #1
   10628:	627a      	str	r2, [r7, #36]	; 0x24
   1062a:	687a      	ldr	r2, [r7, #4]
   1062c:	18d3      	adds	r3, r2, r3
   1062e:	220a      	movs	r2, #10
   10630:	701a      	strb	r2, [r3, #0]
                offset += 2;
   10632:	6a3b      	ldr	r3, [r7, #32]
   10634:	3302      	adds	r3, #2
   10636:	623b      	str	r3, [r7, #32]
        for (i = 0; i < array_len; i += 3)
   10638:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1063a:	3303      	adds	r3, #3
   1063c:	62bb      	str	r3, [r7, #40]	; 0x28
   1063e:	6aba      	ldr	r2, [r7, #40]	; 0x28
   10640:	68bb      	ldr	r3, [r7, #8]
   10642:	429a      	cmp	r2, r3
   10644:	d200      	bcs.n	10648 <atcab_base64encode_+0x2ac>
   10646:	e713      	b.n	10470 <atcab_base64encode_+0xd4>
            }
        }

        /* Check if there is padding to be stripped from the end*/
        for (j -= 1; j; j--)
   10648:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1064a:	3b01      	subs	r3, #1
   1064c:	627b      	str	r3, [r7, #36]	; 0x24
   1064e:	e014      	b.n	1067a <atcab_base64encode_+0x2de>
        {
            if (encoded[j])
   10650:	687a      	ldr	r2, [r7, #4]
   10652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   10654:	18d3      	adds	r3, r2, r3
   10656:	781b      	ldrb	r3, [r3, #0]
   10658:	2b00      	cmp	r3, #0
   1065a:	d00b      	beq.n	10674 <atcab_base64encode_+0x2d8>
            {
                if ('\r' != encoded[j] && '\n' != encoded[j])
   1065c:	687a      	ldr	r2, [r7, #4]
   1065e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   10660:	18d3      	adds	r3, r2, r3
   10662:	781b      	ldrb	r3, [r3, #0]
   10664:	2b0d      	cmp	r3, #13
   10666:	d005      	beq.n	10674 <atcab_base64encode_+0x2d8>
   10668:	687a      	ldr	r2, [r7, #4]
   1066a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1066c:	18d3      	adds	r3, r2, r3
   1066e:	781b      	ldrb	r3, [r3, #0]
   10670:	2b0a      	cmp	r3, #10
   10672:	d106      	bne.n	10682 <atcab_base64encode_+0x2e6>
        for (j -= 1; j; j--)
   10674:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   10676:	3b01      	subs	r3, #1
   10678:	627b      	str	r3, [r7, #36]	; 0x24
   1067a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1067c:	2b00      	cmp	r3, #0
   1067e:	d1e7      	bne.n	10650 <atcab_base64encode_+0x2b4>
   10680:	e000      	b.n	10684 <atcab_base64encode_+0x2e8>
                {
                    break;
   10682:	46c0      	nop			; (mov r8, r8)
                }
            }
        }
        /* Make sure the result is terminated */
        encoded[++j] = 0;
   10684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   10686:	3301      	adds	r3, #1
   10688:	627b      	str	r3, [r7, #36]	; 0x24
   1068a:	687a      	ldr	r2, [r7, #4]
   1068c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1068e:	18d3      	adds	r3, r2, r3
   10690:	2200      	movs	r2, #0
   10692:	701a      	strb	r2, [r3, #0]

        // Set the final encoded length
        *encoded_len = j;
   10694:	683b      	ldr	r3, [r7, #0]
   10696:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   10698:	601a      	str	r2, [r3, #0]
    }
    while (false);
    return status;
   1069a:	232f      	movs	r3, #47	; 0x2f
   1069c:	18fb      	adds	r3, r7, r3
   1069e:	781b      	ldrb	r3, [r3, #0]
}
   106a0:	0018      	movs	r0, r3
   106a2:	46bd      	mov	sp, r7
   106a4:	b00d      	add	sp, #52	; 0x34
   106a6:	bd90      	pop	{r4, r7, pc}
   106a8:	00019de5 	.word	0x00019de5
   106ac:	00019cd9 	.word	0x00019cd9
   106b0:	00020c84 	.word	0x00020c84
   106b4:	0001c2d5 	.word	0x0001c2d5
   106b8:	00020d1c 	.word	0x00020d1c
   106bc:	00010311 	.word	0x00010311

000106c0 <atcab_base64encode>:
 *                            character string.
 *
 * \return ATCA_SUCCESS on success, otherwise an error code.
 */
ATCA_STATUS atcab_base64encode(const uint8_t* byte_array, size_t array_len, char* encoded, size_t* encoded_len)
{
   106c0:	b590      	push	{r4, r7, lr}
   106c2:	b087      	sub	sp, #28
   106c4:	af02      	add	r7, sp, #8
   106c6:	60f8      	str	r0, [r7, #12]
   106c8:	60b9      	str	r1, [r7, #8]
   106ca:	607a      	str	r2, [r7, #4]
   106cc:	603b      	str	r3, [r7, #0]
    return atcab_base64encode_(byte_array, array_len, encoded, encoded_len, atcab_b64rules_default);
   106ce:	683c      	ldr	r4, [r7, #0]
   106d0:	687a      	ldr	r2, [r7, #4]
   106d2:	68b9      	ldr	r1, [r7, #8]
   106d4:	68f8      	ldr	r0, [r7, #12]
   106d6:	4b05      	ldr	r3, [pc, #20]	; (106ec <atcab_base64encode+0x2c>)
   106d8:	9300      	str	r3, [sp, #0]
   106da:	0023      	movs	r3, r4
   106dc:	4c04      	ldr	r4, [pc, #16]	; (106f0 <atcab_base64encode+0x30>)
   106de:	47a0      	blx	r4
   106e0:	0003      	movs	r3, r0
}
   106e2:	0018      	movs	r0, r3
   106e4:	46bd      	mov	sp, r7
   106e6:	b005      	add	sp, #20
   106e8:	bd90      	pop	{r4, r7, pc}
   106ea:	46c0      	nop			; (mov r8, r8)
   106ec:	20000150 	.word	0x20000150
   106f0:	0001039d 	.word	0x0001039d

000106f4 <atcac_sw_sha2_256_init>:
 * \param[in] ctx  ptr to context data structure
 * \return ATCA_SUCCESS on success, otherwise an error code.
 */

int atcac_sw_sha2_256_init(atcac_sha2_256_ctx* ctx)
{
   106f4:	b580      	push	{r7, lr}
   106f6:	b082      	sub	sp, #8
   106f8:	af00      	add	r7, sp, #0
   106fa:	6078      	str	r0, [r7, #4]
    if (sizeof(sw_sha256_ctx) > sizeof(atcac_sha2_256_ctx))
    {
        return ATCA_ASSERT_FAILURE;  // atcac_sha1_ctx isn't large enough for this implementation
    }
    sw_sha256_init((sw_sha256_ctx*)ctx);
   106fc:	687b      	ldr	r3, [r7, #4]
   106fe:	0018      	movs	r0, r3
   10700:	4b03      	ldr	r3, [pc, #12]	; (10710 <atcac_sw_sha2_256_init+0x1c>)
   10702:	4798      	blx	r3

    return ATCA_SUCCESS;
   10704:	2300      	movs	r3, #0
}
   10706:	0018      	movs	r0, r3
   10708:	46bd      	mov	sp, r7
   1070a:	b002      	add	sp, #8
   1070c:	bd80      	pop	{r7, pc}
   1070e:	46c0      	nop			; (mov r8, r8)
   10710:	00010e05 	.word	0x00010e05

00010714 <atcac_sw_sha2_256_update>:
    \param[in] data_size  size amount of data to hash in the given block, in bytes
    \return ATCA_SUCCESS
 */

int atcac_sw_sha2_256_update(atcac_sha2_256_ctx* ctx, const uint8_t* data, size_t data_size)
{
   10714:	b580      	push	{r7, lr}
   10716:	b084      	sub	sp, #16
   10718:	af00      	add	r7, sp, #0
   1071a:	60f8      	str	r0, [r7, #12]
   1071c:	60b9      	str	r1, [r7, #8]
   1071e:	607a      	str	r2, [r7, #4]
    sw_sha256_update((sw_sha256_ctx*)ctx, data, (uint32_t)data_size);
   10720:	687a      	ldr	r2, [r7, #4]
   10722:	68b9      	ldr	r1, [r7, #8]
   10724:	68fb      	ldr	r3, [r7, #12]
   10726:	0018      	movs	r0, r3
   10728:	4b03      	ldr	r3, [pc, #12]	; (10738 <atcac_sw_sha2_256_update+0x24>)
   1072a:	4798      	blx	r3

    return ATCA_SUCCESS;
   1072c:	2300      	movs	r3, #0
}
   1072e:	0018      	movs	r0, r3
   10730:	46bd      	mov	sp, r7
   10732:	b004      	add	sp, #16
   10734:	bd80      	pop	{r7, pc}
   10736:	46c0      	nop			; (mov r8, r8)
   10738:	00010e4d 	.word	0x00010e4d

0001073c <atcac_sw_sha2_256_finish>:
 * \param[out] digest  receives the computed digest of the SHA 256
 * \return ATCA_SUCCESS
 */

int atcac_sw_sha2_256_finish(atcac_sha2_256_ctx* ctx, uint8_t digest[ATCA_SHA2_256_DIGEST_SIZE])
{
   1073c:	b580      	push	{r7, lr}
   1073e:	b082      	sub	sp, #8
   10740:	af00      	add	r7, sp, #0
   10742:	6078      	str	r0, [r7, #4]
   10744:	6039      	str	r1, [r7, #0]
    sw_sha256_final((sw_sha256_ctx*)ctx, digest);
   10746:	683a      	ldr	r2, [r7, #0]
   10748:	687b      	ldr	r3, [r7, #4]
   1074a:	0011      	movs	r1, r2
   1074c:	0018      	movs	r0, r3
   1074e:	4b03      	ldr	r3, [pc, #12]	; (1075c <atcac_sw_sha2_256_finish+0x20>)
   10750:	4798      	blx	r3

    return ATCA_SUCCESS;
   10752:	2300      	movs	r3, #0
}
   10754:	0018      	movs	r0, r3
   10756:	46bd      	mov	sp, r7
   10758:	b002      	add	sp, #8
   1075a:	bd80      	pop	{r7, pc}
   1075c:	00010f11 	.word	0x00010f11

00010760 <atcac_sw_sha2_256>:
 * \param[out] digest     result
 * \return ATCA_SUCCESS on success, otherwise an error code.
 */

int atcac_sw_sha2_256(const uint8_t* data, size_t data_size, uint8_t digest[ATCA_SHA2_256_DIGEST_SIZE])
{
   10760:	b580      	push	{r7, lr}
   10762:	b0b6      	sub	sp, #216	; 0xd8
   10764:	af00      	add	r7, sp, #0
   10766:	60f8      	str	r0, [r7, #12]
   10768:	60b9      	str	r1, [r7, #8]
   1076a:	607a      	str	r2, [r7, #4]
    int ret;
    atcac_sha2_256_ctx ctx;

    ret = atcac_sw_sha2_256_init(&ctx);
   1076c:	2314      	movs	r3, #20
   1076e:	18fb      	adds	r3, r7, r3
   10770:	0018      	movs	r0, r3
   10772:	4b1e      	ldr	r3, [pc, #120]	; (107ec <atcac_sw_sha2_256+0x8c>)
   10774:	4798      	blx	r3
   10776:	0003      	movs	r3, r0
   10778:	22d4      	movs	r2, #212	; 0xd4
   1077a:	18ba      	adds	r2, r7, r2
   1077c:	6013      	str	r3, [r2, #0]
    if (ret != ATCA_SUCCESS)
   1077e:	23d4      	movs	r3, #212	; 0xd4
   10780:	18fb      	adds	r3, r7, r3
   10782:	681b      	ldr	r3, [r3, #0]
   10784:	2b00      	cmp	r3, #0
   10786:	d003      	beq.n	10790 <atcac_sw_sha2_256+0x30>
    {
        return ret;
   10788:	23d4      	movs	r3, #212	; 0xd4
   1078a:	18fb      	adds	r3, r7, r3
   1078c:	681b      	ldr	r3, [r3, #0]
   1078e:	e028      	b.n	107e2 <atcac_sw_sha2_256+0x82>
    }

    ret = atcac_sw_sha2_256_update(&ctx, data, data_size);
   10790:	68ba      	ldr	r2, [r7, #8]
   10792:	68f9      	ldr	r1, [r7, #12]
   10794:	2314      	movs	r3, #20
   10796:	18fb      	adds	r3, r7, r3
   10798:	0018      	movs	r0, r3
   1079a:	4b15      	ldr	r3, [pc, #84]	; (107f0 <atcac_sw_sha2_256+0x90>)
   1079c:	4798      	blx	r3
   1079e:	0003      	movs	r3, r0
   107a0:	22d4      	movs	r2, #212	; 0xd4
   107a2:	18ba      	adds	r2, r7, r2
   107a4:	6013      	str	r3, [r2, #0]
    if (ret != ATCA_SUCCESS)
   107a6:	23d4      	movs	r3, #212	; 0xd4
   107a8:	18fb      	adds	r3, r7, r3
   107aa:	681b      	ldr	r3, [r3, #0]
   107ac:	2b00      	cmp	r3, #0
   107ae:	d003      	beq.n	107b8 <atcac_sw_sha2_256+0x58>
    {
        return ret;
   107b0:	23d4      	movs	r3, #212	; 0xd4
   107b2:	18fb      	adds	r3, r7, r3
   107b4:	681b      	ldr	r3, [r3, #0]
   107b6:	e014      	b.n	107e2 <atcac_sw_sha2_256+0x82>
    }

    ret = atcac_sw_sha2_256_finish(&ctx, digest);
   107b8:	687a      	ldr	r2, [r7, #4]
   107ba:	2314      	movs	r3, #20
   107bc:	18fb      	adds	r3, r7, r3
   107be:	0011      	movs	r1, r2
   107c0:	0018      	movs	r0, r3
   107c2:	4b0c      	ldr	r3, [pc, #48]	; (107f4 <atcac_sw_sha2_256+0x94>)
   107c4:	4798      	blx	r3
   107c6:	0003      	movs	r3, r0
   107c8:	22d4      	movs	r2, #212	; 0xd4
   107ca:	18ba      	adds	r2, r7, r2
   107cc:	6013      	str	r3, [r2, #0]
    if (ret != ATCA_SUCCESS)
   107ce:	23d4      	movs	r3, #212	; 0xd4
   107d0:	18fb      	adds	r3, r7, r3
   107d2:	681b      	ldr	r3, [r3, #0]
   107d4:	2b00      	cmp	r3, #0
   107d6:	d003      	beq.n	107e0 <atcac_sw_sha2_256+0x80>
    {
        return ret;
   107d8:	23d4      	movs	r3, #212	; 0xd4
   107da:	18fb      	adds	r3, r7, r3
   107dc:	681b      	ldr	r3, [r3, #0]
   107de:	e000      	b.n	107e2 <atcac_sw_sha2_256+0x82>
    }

    return ATCA_SUCCESS;
   107e0:	2300      	movs	r3, #0
   107e2:	0018      	movs	r0, r3
   107e4:	46bd      	mov	sp, r7
   107e6:	b036      	add	sp, #216	; 0xd8
   107e8:	bd80      	pop	{r7, pc}
   107ea:	46c0      	nop			; (mov r8, r8)
   107ec:	000106f5 	.word	0x000106f5
   107f0:	00010715 	.word	0x00010715
   107f4:	0001073d 	.word	0x0001073d

000107f8 <sw_sha256_process>:
 * \param[in] ctx          SHA256 hash context
 * \param[in] blocks       Raw blocks to be processed
 * \param[in] block_count  Number of 64-byte blocks to process
 */
static void sw_sha256_process(sw_sha256_ctx* ctx, const uint8_t* blocks, uint32_t block_count)
{
   107f8:	b580      	push	{r7, lr}
   107fa:	b0d8      	sub	sp, #352	; 0x160
   107fc:	af00      	add	r7, sp, #0
   107fe:	60f8      	str	r0, [r7, #12]
   10800:	60b9      	str	r1, [r7, #8]
   10802:	607a      	str	r2, [r7, #4]
    int i = 0;
   10804:	2300      	movs	r3, #0
   10806:	22ae      	movs	r2, #174	; 0xae
   10808:	0052      	lsls	r2, r2, #1
   1080a:	18ba      	adds	r2, r7, r2
   1080c:	6013      	str	r3, [r2, #0]
    uint32_t block = 0;
   1080e:	2300      	movs	r3, #0
   10810:	22ac      	movs	r2, #172	; 0xac
   10812:	0052      	lsls	r2, r2, #1
   10814:	18ba      	adds	r2, r7, r2
   10816:	6013      	str	r3, [r2, #0]
        0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,
        0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2
    };

    // Loop through all the blocks to process
    for (block = 0; block < block_count; block++)
   10818:	2300      	movs	r3, #0
   1081a:	22ac      	movs	r2, #172	; 0xac
   1081c:	0052      	lsls	r2, r2, #1
   1081e:	18ba      	adds	r2, r7, r2
   10820:	6013      	str	r3, [r2, #0]
   10822:	e2dd      	b.n	10de0 <sw_sha256_process+0x5e8>
        uint32_t word_value;
        uint32_t s0, s1;
        uint32_t t1, t2;
        uint32_t maj, ch;
        uint32_t rotate_register[8];
        const uint8_t* cur_msg_block = &blocks[block * SHA256_BLOCK_SIZE];
   10824:	23ac      	movs	r3, #172	; 0xac
   10826:	005b      	lsls	r3, r3, #1
   10828:	18fb      	adds	r3, r7, r3
   1082a:	681b      	ldr	r3, [r3, #0]
   1082c:	019b      	lsls	r3, r3, #6
   1082e:	68ba      	ldr	r2, [r7, #8]
   10830:	18d3      	adds	r3, r2, r3
   10832:	22a8      	movs	r2, #168	; 0xa8
   10834:	0052      	lsls	r2, r2, #1
   10836:	18ba      	adds	r2, r7, r2
   10838:	6013      	str	r3, [r2, #0]

        // Swap word bytes
        for (i = 0; i < SHA256_BLOCK_SIZE; i += 4)
   1083a:	2300      	movs	r3, #0
   1083c:	22ae      	movs	r2, #174	; 0xae
   1083e:	0052      	lsls	r2, r2, #1
   10840:	18ba      	adds	r2, r7, r2
   10842:	6013      	str	r3, [r2, #0]
   10844:	e063      	b.n	1090e <sw_sha256_process+0x116>
        {
            w_union.w_byte[i + 3] = cur_msg_block[i + 0];
   10846:	23ae      	movs	r3, #174	; 0xae
   10848:	005b      	lsls	r3, r3, #1
   1084a:	18fb      	adds	r3, r7, r3
   1084c:	681b      	ldr	r3, [r3, #0]
   1084e:	3303      	adds	r3, #3
   10850:	22ae      	movs	r2, #174	; 0xae
   10852:	0052      	lsls	r2, r2, #1
   10854:	18ba      	adds	r2, r7, r2
   10856:	6812      	ldr	r2, [r2, #0]
   10858:	21a8      	movs	r1, #168	; 0xa8
   1085a:	0049      	lsls	r1, r1, #1
   1085c:	1879      	adds	r1, r7, r1
   1085e:	6809      	ldr	r1, [r1, #0]
   10860:	188a      	adds	r2, r1, r2
   10862:	7811      	ldrb	r1, [r2, #0]
   10864:	4a92      	ldr	r2, [pc, #584]	; (10ab0 <sw_sha256_process+0x2b8>)
   10866:	20b0      	movs	r0, #176	; 0xb0
   10868:	0040      	lsls	r0, r0, #1
   1086a:	4684      	mov	ip, r0
   1086c:	44bc      	add	ip, r7
   1086e:	4462      	add	r2, ip
   10870:	54d1      	strb	r1, [r2, r3]
            w_union.w_byte[i + 2] = cur_msg_block[i + 1];
   10872:	23ae      	movs	r3, #174	; 0xae
   10874:	005b      	lsls	r3, r3, #1
   10876:	18fb      	adds	r3, r7, r3
   10878:	681b      	ldr	r3, [r3, #0]
   1087a:	3302      	adds	r3, #2
   1087c:	22ae      	movs	r2, #174	; 0xae
   1087e:	0052      	lsls	r2, r2, #1
   10880:	18ba      	adds	r2, r7, r2
   10882:	6812      	ldr	r2, [r2, #0]
   10884:	3201      	adds	r2, #1
   10886:	21a8      	movs	r1, #168	; 0xa8
   10888:	0049      	lsls	r1, r1, #1
   1088a:	1879      	adds	r1, r7, r1
   1088c:	6809      	ldr	r1, [r1, #0]
   1088e:	188a      	adds	r2, r1, r2
   10890:	7811      	ldrb	r1, [r2, #0]
   10892:	4a87      	ldr	r2, [pc, #540]	; (10ab0 <sw_sha256_process+0x2b8>)
   10894:	20b0      	movs	r0, #176	; 0xb0
   10896:	0040      	lsls	r0, r0, #1
   10898:	4684      	mov	ip, r0
   1089a:	44bc      	add	ip, r7
   1089c:	4462      	add	r2, ip
   1089e:	54d1      	strb	r1, [r2, r3]
            w_union.w_byte[i + 1] = cur_msg_block[i + 2];
   108a0:	23ae      	movs	r3, #174	; 0xae
   108a2:	005b      	lsls	r3, r3, #1
   108a4:	18fb      	adds	r3, r7, r3
   108a6:	681b      	ldr	r3, [r3, #0]
   108a8:	3301      	adds	r3, #1
   108aa:	22ae      	movs	r2, #174	; 0xae
   108ac:	0052      	lsls	r2, r2, #1
   108ae:	18ba      	adds	r2, r7, r2
   108b0:	6812      	ldr	r2, [r2, #0]
   108b2:	3202      	adds	r2, #2
   108b4:	21a8      	movs	r1, #168	; 0xa8
   108b6:	0049      	lsls	r1, r1, #1
   108b8:	1879      	adds	r1, r7, r1
   108ba:	6809      	ldr	r1, [r1, #0]
   108bc:	188a      	adds	r2, r1, r2
   108be:	7811      	ldrb	r1, [r2, #0]
   108c0:	4a7b      	ldr	r2, [pc, #492]	; (10ab0 <sw_sha256_process+0x2b8>)
   108c2:	20b0      	movs	r0, #176	; 0xb0
   108c4:	0040      	lsls	r0, r0, #1
   108c6:	4684      	mov	ip, r0
   108c8:	44bc      	add	ip, r7
   108ca:	4462      	add	r2, ip
   108cc:	54d1      	strb	r1, [r2, r3]
            w_union.w_byte[i + 0] = cur_msg_block[i + 3];
   108ce:	23ae      	movs	r3, #174	; 0xae
   108d0:	005b      	lsls	r3, r3, #1
   108d2:	18fb      	adds	r3, r7, r3
   108d4:	681b      	ldr	r3, [r3, #0]
   108d6:	3303      	adds	r3, #3
   108d8:	22a8      	movs	r2, #168	; 0xa8
   108da:	0052      	lsls	r2, r2, #1
   108dc:	18ba      	adds	r2, r7, r2
   108de:	6812      	ldr	r2, [r2, #0]
   108e0:	18d3      	adds	r3, r2, r3
   108e2:	7819      	ldrb	r1, [r3, #0]
   108e4:	4b72      	ldr	r3, [pc, #456]	; (10ab0 <sw_sha256_process+0x2b8>)
   108e6:	22b0      	movs	r2, #176	; 0xb0
   108e8:	0052      	lsls	r2, r2, #1
   108ea:	18ba      	adds	r2, r7, r2
   108ec:	18d2      	adds	r2, r2, r3
   108ee:	23ae      	movs	r3, #174	; 0xae
   108f0:	005b      	lsls	r3, r3, #1
   108f2:	18fb      	adds	r3, r7, r3
   108f4:	681b      	ldr	r3, [r3, #0]
   108f6:	18d3      	adds	r3, r2, r3
   108f8:	1c0a      	adds	r2, r1, #0
   108fa:	701a      	strb	r2, [r3, #0]
        for (i = 0; i < SHA256_BLOCK_SIZE; i += 4)
   108fc:	23ae      	movs	r3, #174	; 0xae
   108fe:	005b      	lsls	r3, r3, #1
   10900:	18fb      	adds	r3, r7, r3
   10902:	681b      	ldr	r3, [r3, #0]
   10904:	3304      	adds	r3, #4
   10906:	22ae      	movs	r2, #174	; 0xae
   10908:	0052      	lsls	r2, r2, #1
   1090a:	18ba      	adds	r2, r7, r2
   1090c:	6013      	str	r3, [r2, #0]
   1090e:	23ae      	movs	r3, #174	; 0xae
   10910:	005b      	lsls	r3, r3, #1
   10912:	18fb      	adds	r3, r7, r3
   10914:	681b      	ldr	r3, [r3, #0]
   10916:	2b3f      	cmp	r3, #63	; 0x3f
   10918:	dd95      	ble.n	10846 <sw_sha256_process+0x4e>
        }

        w_index = 16;
   1091a:	2310      	movs	r3, #16
   1091c:	22aa      	movs	r2, #170	; 0xaa
   1091e:	0052      	lsls	r2, r2, #1
   10920:	18ba      	adds	r2, r7, r2
   10922:	6013      	str	r3, [r2, #0]
        while (w_index < SHA256_BLOCK_SIZE)
   10924:	e08d      	b.n	10a42 <sw_sha256_process+0x24a>
        {
            // right rotate for 32-bit variable in C: (value >> places) | (value << 32 - places)
            word_value = w_union.w_word[w_index - 15];
   10926:	23aa      	movs	r3, #170	; 0xaa
   10928:	005b      	lsls	r3, r3, #1
   1092a:	18fb      	adds	r3, r7, r3
   1092c:	681b      	ldr	r3, [r3, #0]
   1092e:	3b0f      	subs	r3, #15
   10930:	001a      	movs	r2, r3
   10932:	4b5f      	ldr	r3, [pc, #380]	; (10ab0 <sw_sha256_process+0x2b8>)
   10934:	21b0      	movs	r1, #176	; 0xb0
   10936:	0049      	lsls	r1, r1, #1
   10938:	468c      	mov	ip, r1
   1093a:	44bc      	add	ip, r7
   1093c:	4463      	add	r3, ip
   1093e:	0092      	lsls	r2, r2, #2
   10940:	58d3      	ldr	r3, [r2, r3]
   10942:	22a6      	movs	r2, #166	; 0xa6
   10944:	0052      	lsls	r2, r2, #1
   10946:	18ba      	adds	r2, r7, r2
   10948:	6013      	str	r3, [r2, #0]
            s0 = rotate_right(word_value, 7) ^ rotate_right(word_value, 18) ^ (word_value >> 3);
   1094a:	23a6      	movs	r3, #166	; 0xa6
   1094c:	005b      	lsls	r3, r3, #1
   1094e:	18fb      	adds	r3, r7, r3
   10950:	681b      	ldr	r3, [r3, #0]
   10952:	2207      	movs	r2, #7
   10954:	41d3      	rors	r3, r2
   10956:	001a      	movs	r2, r3
   10958:	23a6      	movs	r3, #166	; 0xa6
   1095a:	005b      	lsls	r3, r3, #1
   1095c:	18fb      	adds	r3, r7, r3
   1095e:	681b      	ldr	r3, [r3, #0]
   10960:	2112      	movs	r1, #18
   10962:	41cb      	rors	r3, r1
   10964:	405a      	eors	r2, r3
   10966:	23a6      	movs	r3, #166	; 0xa6
   10968:	005b      	lsls	r3, r3, #1
   1096a:	18fb      	adds	r3, r7, r3
   1096c:	681b      	ldr	r3, [r3, #0]
   1096e:	08db      	lsrs	r3, r3, #3
   10970:	4053      	eors	r3, r2
   10972:	22a4      	movs	r2, #164	; 0xa4
   10974:	0052      	lsls	r2, r2, #1
   10976:	18ba      	adds	r2, r7, r2
   10978:	6013      	str	r3, [r2, #0]

            word_value = w_union.w_word[w_index - 2];
   1097a:	23aa      	movs	r3, #170	; 0xaa
   1097c:	005b      	lsls	r3, r3, #1
   1097e:	18fb      	adds	r3, r7, r3
   10980:	681b      	ldr	r3, [r3, #0]
   10982:	1e9a      	subs	r2, r3, #2
   10984:	4b4a      	ldr	r3, [pc, #296]	; (10ab0 <sw_sha256_process+0x2b8>)
   10986:	21b0      	movs	r1, #176	; 0xb0
   10988:	0049      	lsls	r1, r1, #1
   1098a:	468c      	mov	ip, r1
   1098c:	44bc      	add	ip, r7
   1098e:	4463      	add	r3, ip
   10990:	0092      	lsls	r2, r2, #2
   10992:	58d3      	ldr	r3, [r2, r3]
   10994:	22a6      	movs	r2, #166	; 0xa6
   10996:	0052      	lsls	r2, r2, #1
   10998:	18ba      	adds	r2, r7, r2
   1099a:	6013      	str	r3, [r2, #0]
            s1 = rotate_right(word_value, 17) ^ rotate_right(word_value, 19) ^ (word_value >> 10);
   1099c:	23a6      	movs	r3, #166	; 0xa6
   1099e:	005b      	lsls	r3, r3, #1
   109a0:	18fb      	adds	r3, r7, r3
   109a2:	681b      	ldr	r3, [r3, #0]
   109a4:	2211      	movs	r2, #17
   109a6:	41d3      	rors	r3, r2
   109a8:	001a      	movs	r2, r3
   109aa:	23a6      	movs	r3, #166	; 0xa6
   109ac:	005b      	lsls	r3, r3, #1
   109ae:	18fb      	adds	r3, r7, r3
   109b0:	681b      	ldr	r3, [r3, #0]
   109b2:	2113      	movs	r1, #19
   109b4:	41cb      	rors	r3, r1
   109b6:	405a      	eors	r2, r3
   109b8:	23a6      	movs	r3, #166	; 0xa6
   109ba:	005b      	lsls	r3, r3, #1
   109bc:	18fb      	adds	r3, r7, r3
   109be:	681b      	ldr	r3, [r3, #0]
   109c0:	0a9b      	lsrs	r3, r3, #10
   109c2:	4053      	eors	r3, r2
   109c4:	22a2      	movs	r2, #162	; 0xa2
   109c6:	0052      	lsls	r2, r2, #1
   109c8:	18ba      	adds	r2, r7, r2
   109ca:	6013      	str	r3, [r2, #0]

            w_union.w_word[w_index] = w_union.w_word[w_index - 16] + s0 + w_union.w_word[w_index - 7] + s1;
   109cc:	23aa      	movs	r3, #170	; 0xaa
   109ce:	005b      	lsls	r3, r3, #1
   109d0:	18fb      	adds	r3, r7, r3
   109d2:	681b      	ldr	r3, [r3, #0]
   109d4:	3b10      	subs	r3, #16
   109d6:	001a      	movs	r2, r3
   109d8:	4b35      	ldr	r3, [pc, #212]	; (10ab0 <sw_sha256_process+0x2b8>)
   109da:	21b0      	movs	r1, #176	; 0xb0
   109dc:	0049      	lsls	r1, r1, #1
   109de:	468c      	mov	ip, r1
   109e0:	44bc      	add	ip, r7
   109e2:	4463      	add	r3, ip
   109e4:	0092      	lsls	r2, r2, #2
   109e6:	58d2      	ldr	r2, [r2, r3]
   109e8:	23a4      	movs	r3, #164	; 0xa4
   109ea:	005b      	lsls	r3, r3, #1
   109ec:	18fb      	adds	r3, r7, r3
   109ee:	681b      	ldr	r3, [r3, #0]
   109f0:	18d2      	adds	r2, r2, r3
   109f2:	23aa      	movs	r3, #170	; 0xaa
   109f4:	005b      	lsls	r3, r3, #1
   109f6:	18fb      	adds	r3, r7, r3
   109f8:	681b      	ldr	r3, [r3, #0]
   109fa:	1fd9      	subs	r1, r3, #7
   109fc:	4b2c      	ldr	r3, [pc, #176]	; (10ab0 <sw_sha256_process+0x2b8>)
   109fe:	20b0      	movs	r0, #176	; 0xb0
   10a00:	0040      	lsls	r0, r0, #1
   10a02:	4684      	mov	ip, r0
   10a04:	44bc      	add	ip, r7
   10a06:	4463      	add	r3, ip
   10a08:	0089      	lsls	r1, r1, #2
   10a0a:	58cb      	ldr	r3, [r1, r3]
   10a0c:	18d2      	adds	r2, r2, r3
   10a0e:	23a2      	movs	r3, #162	; 0xa2
   10a10:	005b      	lsls	r3, r3, #1
   10a12:	18fb      	adds	r3, r7, r3
   10a14:	681b      	ldr	r3, [r3, #0]
   10a16:	18d1      	adds	r1, r2, r3
   10a18:	4b25      	ldr	r3, [pc, #148]	; (10ab0 <sw_sha256_process+0x2b8>)
   10a1a:	22b0      	movs	r2, #176	; 0xb0
   10a1c:	0052      	lsls	r2, r2, #1
   10a1e:	4694      	mov	ip, r2
   10a20:	44bc      	add	ip, r7
   10a22:	4463      	add	r3, ip
   10a24:	22aa      	movs	r2, #170	; 0xaa
   10a26:	0052      	lsls	r2, r2, #1
   10a28:	18ba      	adds	r2, r7, r2
   10a2a:	6812      	ldr	r2, [r2, #0]
   10a2c:	0092      	lsls	r2, r2, #2
   10a2e:	50d1      	str	r1, [r2, r3]

            w_index++;
   10a30:	23aa      	movs	r3, #170	; 0xaa
   10a32:	005b      	lsls	r3, r3, #1
   10a34:	18fb      	adds	r3, r7, r3
   10a36:	681b      	ldr	r3, [r3, #0]
   10a38:	3301      	adds	r3, #1
   10a3a:	22aa      	movs	r2, #170	; 0xaa
   10a3c:	0052      	lsls	r2, r2, #1
   10a3e:	18ba      	adds	r2, r7, r2
   10a40:	6013      	str	r3, [r2, #0]
        while (w_index < SHA256_BLOCK_SIZE)
   10a42:	23aa      	movs	r3, #170	; 0xaa
   10a44:	005b      	lsls	r3, r3, #1
   10a46:	18fb      	adds	r3, r7, r3
   10a48:	681b      	ldr	r3, [r3, #0]
   10a4a:	2b3f      	cmp	r3, #63	; 0x3f
   10a4c:	d800      	bhi.n	10a50 <sw_sha256_process+0x258>
   10a4e:	e76a      	b.n	10926 <sw_sha256_process+0x12e>
        }

        // Initialize hash value for this chunk.
        for (i = 0; i < 8; i++)
   10a50:	2300      	movs	r3, #0
   10a52:	22ae      	movs	r2, #174	; 0xae
   10a54:	0052      	lsls	r2, r2, #1
   10a56:	18ba      	adds	r2, r7, r2
   10a58:	6013      	str	r3, [r2, #0]
   10a5a:	e01c      	b.n	10a96 <sw_sha256_process+0x29e>
        {
            rotate_register[i] = ctx->hash[i];
   10a5c:	68fb      	ldr	r3, [r7, #12]
   10a5e:	22ae      	movs	r2, #174	; 0xae
   10a60:	0052      	lsls	r2, r2, #1
   10a62:	18ba      	adds	r2, r7, r2
   10a64:	6812      	ldr	r2, [r2, #0]
   10a66:	3222      	adds	r2, #34	; 0x22
   10a68:	0092      	lsls	r2, r2, #2
   10a6a:	58d1      	ldr	r1, [r2, r3]
   10a6c:	4b11      	ldr	r3, [pc, #68]	; (10ab4 <sw_sha256_process+0x2bc>)
   10a6e:	22b0      	movs	r2, #176	; 0xb0
   10a70:	0052      	lsls	r2, r2, #1
   10a72:	4694      	mov	ip, r2
   10a74:	44bc      	add	ip, r7
   10a76:	4463      	add	r3, ip
   10a78:	22ae      	movs	r2, #174	; 0xae
   10a7a:	0052      	lsls	r2, r2, #1
   10a7c:	18ba      	adds	r2, r7, r2
   10a7e:	6812      	ldr	r2, [r2, #0]
   10a80:	0092      	lsls	r2, r2, #2
   10a82:	50d1      	str	r1, [r2, r3]
        for (i = 0; i < 8; i++)
   10a84:	23ae      	movs	r3, #174	; 0xae
   10a86:	005b      	lsls	r3, r3, #1
   10a88:	18fb      	adds	r3, r7, r3
   10a8a:	681b      	ldr	r3, [r3, #0]
   10a8c:	3301      	adds	r3, #1
   10a8e:	22ae      	movs	r2, #174	; 0xae
   10a90:	0052      	lsls	r2, r2, #1
   10a92:	18ba      	adds	r2, r7, r2
   10a94:	6013      	str	r3, [r2, #0]
   10a96:	23ae      	movs	r3, #174	; 0xae
   10a98:	005b      	lsls	r3, r3, #1
   10a9a:	18fb      	adds	r3, r7, r3
   10a9c:	681b      	ldr	r3, [r3, #0]
   10a9e:	2b07      	cmp	r3, #7
   10aa0:	dddc      	ble.n	10a5c <sw_sha256_process+0x264>
        }

        // hash calculation loop
        for (i = 0; i < SHA256_BLOCK_SIZE; i++)
   10aa2:	2300      	movs	r3, #0
   10aa4:	22ae      	movs	r2, #174	; 0xae
   10aa6:	0052      	lsls	r2, r2, #1
   10aa8:	18ba      	adds	r2, r7, r2
   10aaa:	6013      	str	r3, [r2, #0]
   10aac:	e156      	b.n	10d5c <sw_sha256_process+0x564>
   10aae:	46c0      	nop			; (mov r8, r8)
   10ab0:	fffffed4 	.word	0xfffffed4
   10ab4:	fffffeb4 	.word	0xfffffeb4
        {
            s0 = rotate_right(rotate_register[0], 2)
   10ab8:	4bcf      	ldr	r3, [pc, #828]	; (10df8 <sw_sha256_process+0x600>)
   10aba:	22b0      	movs	r2, #176	; 0xb0
   10abc:	0052      	lsls	r2, r2, #1
   10abe:	4694      	mov	ip, r2
   10ac0:	44bc      	add	ip, r7
   10ac2:	4463      	add	r3, ip
   10ac4:	681b      	ldr	r3, [r3, #0]
   10ac6:	2202      	movs	r2, #2
   10ac8:	41d3      	rors	r3, r2
   10aca:	001a      	movs	r2, r3
                 ^ rotate_right(rotate_register[0], 13)
   10acc:	4bca      	ldr	r3, [pc, #808]	; (10df8 <sw_sha256_process+0x600>)
   10ace:	21b0      	movs	r1, #176	; 0xb0
   10ad0:	0049      	lsls	r1, r1, #1
   10ad2:	468c      	mov	ip, r1
   10ad4:	44bc      	add	ip, r7
   10ad6:	4463      	add	r3, ip
   10ad8:	681b      	ldr	r3, [r3, #0]
   10ada:	210d      	movs	r1, #13
   10adc:	41cb      	rors	r3, r1
   10ade:	405a      	eors	r2, r3
                 ^ rotate_right(rotate_register[0], 22);
   10ae0:	4bc5      	ldr	r3, [pc, #788]	; (10df8 <sw_sha256_process+0x600>)
   10ae2:	21b0      	movs	r1, #176	; 0xb0
   10ae4:	0049      	lsls	r1, r1, #1
   10ae6:	468c      	mov	ip, r1
   10ae8:	44bc      	add	ip, r7
   10aea:	4463      	add	r3, ip
   10aec:	681b      	ldr	r3, [r3, #0]
   10aee:	2116      	movs	r1, #22
   10af0:	41cb      	rors	r3, r1
            s0 = rotate_right(rotate_register[0], 2)
   10af2:	4053      	eors	r3, r2
   10af4:	22a4      	movs	r2, #164	; 0xa4
   10af6:	0052      	lsls	r2, r2, #1
   10af8:	18ba      	adds	r2, r7, r2
   10afa:	6013      	str	r3, [r2, #0]
            maj = (rotate_register[0] & rotate_register[1])
   10afc:	4bbe      	ldr	r3, [pc, #760]	; (10df8 <sw_sha256_process+0x600>)
   10afe:	22b0      	movs	r2, #176	; 0xb0
   10b00:	0052      	lsls	r2, r2, #1
   10b02:	4694      	mov	ip, r2
   10b04:	44bc      	add	ip, r7
   10b06:	4463      	add	r3, ip
   10b08:	681a      	ldr	r2, [r3, #0]
   10b0a:	4bbb      	ldr	r3, [pc, #748]	; (10df8 <sw_sha256_process+0x600>)
   10b0c:	21b0      	movs	r1, #176	; 0xb0
   10b0e:	0049      	lsls	r1, r1, #1
   10b10:	468c      	mov	ip, r1
   10b12:	44bc      	add	ip, r7
   10b14:	4463      	add	r3, ip
   10b16:	685b      	ldr	r3, [r3, #4]
   10b18:	401a      	ands	r2, r3
                  ^ (rotate_register[0] & rotate_register[2])
   10b1a:	4bb7      	ldr	r3, [pc, #732]	; (10df8 <sw_sha256_process+0x600>)
   10b1c:	21b0      	movs	r1, #176	; 0xb0
   10b1e:	0049      	lsls	r1, r1, #1
   10b20:	468c      	mov	ip, r1
   10b22:	44bc      	add	ip, r7
   10b24:	4463      	add	r3, ip
   10b26:	6819      	ldr	r1, [r3, #0]
   10b28:	4bb3      	ldr	r3, [pc, #716]	; (10df8 <sw_sha256_process+0x600>)
   10b2a:	20b0      	movs	r0, #176	; 0xb0
   10b2c:	0040      	lsls	r0, r0, #1
   10b2e:	4684      	mov	ip, r0
   10b30:	44bc      	add	ip, r7
   10b32:	4463      	add	r3, ip
   10b34:	689b      	ldr	r3, [r3, #8]
   10b36:	400b      	ands	r3, r1
   10b38:	405a      	eors	r2, r3
                  ^ (rotate_register[1] & rotate_register[2]);
   10b3a:	4baf      	ldr	r3, [pc, #700]	; (10df8 <sw_sha256_process+0x600>)
   10b3c:	21b0      	movs	r1, #176	; 0xb0
   10b3e:	0049      	lsls	r1, r1, #1
   10b40:	468c      	mov	ip, r1
   10b42:	44bc      	add	ip, r7
   10b44:	4463      	add	r3, ip
   10b46:	6859      	ldr	r1, [r3, #4]
   10b48:	4bab      	ldr	r3, [pc, #684]	; (10df8 <sw_sha256_process+0x600>)
   10b4a:	20b0      	movs	r0, #176	; 0xb0
   10b4c:	0040      	lsls	r0, r0, #1
   10b4e:	4684      	mov	ip, r0
   10b50:	44bc      	add	ip, r7
   10b52:	4463      	add	r3, ip
   10b54:	689b      	ldr	r3, [r3, #8]
   10b56:	400b      	ands	r3, r1
            maj = (rotate_register[0] & rotate_register[1])
   10b58:	4053      	eors	r3, r2
   10b5a:	22a0      	movs	r2, #160	; 0xa0
   10b5c:	0052      	lsls	r2, r2, #1
   10b5e:	18ba      	adds	r2, r7, r2
   10b60:	6013      	str	r3, [r2, #0]
            t2 = s0 + maj;
   10b62:	23a4      	movs	r3, #164	; 0xa4
   10b64:	005b      	lsls	r3, r3, #1
   10b66:	18fb      	adds	r3, r7, r3
   10b68:	681a      	ldr	r2, [r3, #0]
   10b6a:	23a0      	movs	r3, #160	; 0xa0
   10b6c:	005b      	lsls	r3, r3, #1
   10b6e:	18fb      	adds	r3, r7, r3
   10b70:	681b      	ldr	r3, [r3, #0]
   10b72:	18d3      	adds	r3, r2, r3
   10b74:	229e      	movs	r2, #158	; 0x9e
   10b76:	0052      	lsls	r2, r2, #1
   10b78:	18ba      	adds	r2, r7, r2
   10b7a:	6013      	str	r3, [r2, #0]
            s1 = rotate_right(rotate_register[4], 6)
   10b7c:	4b9e      	ldr	r3, [pc, #632]	; (10df8 <sw_sha256_process+0x600>)
   10b7e:	22b0      	movs	r2, #176	; 0xb0
   10b80:	0052      	lsls	r2, r2, #1
   10b82:	4694      	mov	ip, r2
   10b84:	44bc      	add	ip, r7
   10b86:	4463      	add	r3, ip
   10b88:	691b      	ldr	r3, [r3, #16]
   10b8a:	2206      	movs	r2, #6
   10b8c:	41d3      	rors	r3, r2
   10b8e:	001a      	movs	r2, r3
                 ^ rotate_right(rotate_register[4], 11)
   10b90:	4b99      	ldr	r3, [pc, #612]	; (10df8 <sw_sha256_process+0x600>)
   10b92:	21b0      	movs	r1, #176	; 0xb0
   10b94:	0049      	lsls	r1, r1, #1
   10b96:	468c      	mov	ip, r1
   10b98:	44bc      	add	ip, r7
   10b9a:	4463      	add	r3, ip
   10b9c:	691b      	ldr	r3, [r3, #16]
   10b9e:	210b      	movs	r1, #11
   10ba0:	41cb      	rors	r3, r1
   10ba2:	405a      	eors	r2, r3
                 ^ rotate_right(rotate_register[4], 25);
   10ba4:	4b94      	ldr	r3, [pc, #592]	; (10df8 <sw_sha256_process+0x600>)
   10ba6:	21b0      	movs	r1, #176	; 0xb0
   10ba8:	0049      	lsls	r1, r1, #1
   10baa:	468c      	mov	ip, r1
   10bac:	44bc      	add	ip, r7
   10bae:	4463      	add	r3, ip
   10bb0:	691b      	ldr	r3, [r3, #16]
   10bb2:	2119      	movs	r1, #25
   10bb4:	41cb      	rors	r3, r1
            s1 = rotate_right(rotate_register[4], 6)
   10bb6:	4053      	eors	r3, r2
   10bb8:	22a2      	movs	r2, #162	; 0xa2
   10bba:	0052      	lsls	r2, r2, #1
   10bbc:	18ba      	adds	r2, r7, r2
   10bbe:	6013      	str	r3, [r2, #0]
            ch = (rotate_register[4] & rotate_register[5])
   10bc0:	4b8d      	ldr	r3, [pc, #564]	; (10df8 <sw_sha256_process+0x600>)
   10bc2:	22b0      	movs	r2, #176	; 0xb0
   10bc4:	0052      	lsls	r2, r2, #1
   10bc6:	4694      	mov	ip, r2
   10bc8:	44bc      	add	ip, r7
   10bca:	4463      	add	r3, ip
   10bcc:	691a      	ldr	r2, [r3, #16]
   10bce:	4b8a      	ldr	r3, [pc, #552]	; (10df8 <sw_sha256_process+0x600>)
   10bd0:	21b0      	movs	r1, #176	; 0xb0
   10bd2:	0049      	lsls	r1, r1, #1
   10bd4:	468c      	mov	ip, r1
   10bd6:	44bc      	add	ip, r7
   10bd8:	4463      	add	r3, ip
   10bda:	695b      	ldr	r3, [r3, #20]
   10bdc:	401a      	ands	r2, r3
                 ^ (~rotate_register[4] & rotate_register[6]);
   10bde:	4b86      	ldr	r3, [pc, #536]	; (10df8 <sw_sha256_process+0x600>)
   10be0:	21b0      	movs	r1, #176	; 0xb0
   10be2:	0049      	lsls	r1, r1, #1
   10be4:	468c      	mov	ip, r1
   10be6:	44bc      	add	ip, r7
   10be8:	4463      	add	r3, ip
   10bea:	691b      	ldr	r3, [r3, #16]
   10bec:	43d9      	mvns	r1, r3
   10bee:	4b82      	ldr	r3, [pc, #520]	; (10df8 <sw_sha256_process+0x600>)
   10bf0:	20b0      	movs	r0, #176	; 0xb0
   10bf2:	0040      	lsls	r0, r0, #1
   10bf4:	4684      	mov	ip, r0
   10bf6:	44bc      	add	ip, r7
   10bf8:	4463      	add	r3, ip
   10bfa:	699b      	ldr	r3, [r3, #24]
   10bfc:	400b      	ands	r3, r1
            ch = (rotate_register[4] & rotate_register[5])
   10bfe:	4053      	eors	r3, r2
   10c00:	229c      	movs	r2, #156	; 0x9c
   10c02:	0052      	lsls	r2, r2, #1
   10c04:	18ba      	adds	r2, r7, r2
   10c06:	6013      	str	r3, [r2, #0]
            t1 = rotate_register[7] + s1 + ch + k[i] + w_union.w_word[i];
   10c08:	4b7b      	ldr	r3, [pc, #492]	; (10df8 <sw_sha256_process+0x600>)
   10c0a:	22b0      	movs	r2, #176	; 0xb0
   10c0c:	0052      	lsls	r2, r2, #1
   10c0e:	4694      	mov	ip, r2
   10c10:	44bc      	add	ip, r7
   10c12:	4463      	add	r3, ip
   10c14:	69da      	ldr	r2, [r3, #28]
   10c16:	23a2      	movs	r3, #162	; 0xa2
   10c18:	005b      	lsls	r3, r3, #1
   10c1a:	18fb      	adds	r3, r7, r3
   10c1c:	681b      	ldr	r3, [r3, #0]
   10c1e:	18d2      	adds	r2, r2, r3
   10c20:	239c      	movs	r3, #156	; 0x9c
   10c22:	005b      	lsls	r3, r3, #1
   10c24:	18fb      	adds	r3, r7, r3
   10c26:	681b      	ldr	r3, [r3, #0]
   10c28:	18d2      	adds	r2, r2, r3
   10c2a:	4b74      	ldr	r3, [pc, #464]	; (10dfc <sw_sha256_process+0x604>)
   10c2c:	21ae      	movs	r1, #174	; 0xae
   10c2e:	0049      	lsls	r1, r1, #1
   10c30:	1879      	adds	r1, r7, r1
   10c32:	6809      	ldr	r1, [r1, #0]
   10c34:	0089      	lsls	r1, r1, #2
   10c36:	58cb      	ldr	r3, [r1, r3]
   10c38:	18d2      	adds	r2, r2, r3
   10c3a:	4b71      	ldr	r3, [pc, #452]	; (10e00 <sw_sha256_process+0x608>)
   10c3c:	21b0      	movs	r1, #176	; 0xb0
   10c3e:	0049      	lsls	r1, r1, #1
   10c40:	468c      	mov	ip, r1
   10c42:	44bc      	add	ip, r7
   10c44:	4463      	add	r3, ip
   10c46:	21ae      	movs	r1, #174	; 0xae
   10c48:	0049      	lsls	r1, r1, #1
   10c4a:	1879      	adds	r1, r7, r1
   10c4c:	6809      	ldr	r1, [r1, #0]
   10c4e:	0089      	lsls	r1, r1, #2
   10c50:	58cb      	ldr	r3, [r1, r3]
   10c52:	18d3      	adds	r3, r2, r3
   10c54:	229a      	movs	r2, #154	; 0x9a
   10c56:	0052      	lsls	r2, r2, #1
   10c58:	18ba      	adds	r2, r7, r2
   10c5a:	6013      	str	r3, [r2, #0]

            rotate_register[7] = rotate_register[6];
   10c5c:	4b66      	ldr	r3, [pc, #408]	; (10df8 <sw_sha256_process+0x600>)
   10c5e:	22b0      	movs	r2, #176	; 0xb0
   10c60:	0052      	lsls	r2, r2, #1
   10c62:	4694      	mov	ip, r2
   10c64:	44bc      	add	ip, r7
   10c66:	4463      	add	r3, ip
   10c68:	699a      	ldr	r2, [r3, #24]
   10c6a:	4b63      	ldr	r3, [pc, #396]	; (10df8 <sw_sha256_process+0x600>)
   10c6c:	21b0      	movs	r1, #176	; 0xb0
   10c6e:	0049      	lsls	r1, r1, #1
   10c70:	468c      	mov	ip, r1
   10c72:	44bc      	add	ip, r7
   10c74:	4463      	add	r3, ip
   10c76:	61da      	str	r2, [r3, #28]
            rotate_register[6] = rotate_register[5];
   10c78:	4b5f      	ldr	r3, [pc, #380]	; (10df8 <sw_sha256_process+0x600>)
   10c7a:	22b0      	movs	r2, #176	; 0xb0
   10c7c:	0052      	lsls	r2, r2, #1
   10c7e:	4694      	mov	ip, r2
   10c80:	44bc      	add	ip, r7
   10c82:	4463      	add	r3, ip
   10c84:	695a      	ldr	r2, [r3, #20]
   10c86:	4b5c      	ldr	r3, [pc, #368]	; (10df8 <sw_sha256_process+0x600>)
   10c88:	21b0      	movs	r1, #176	; 0xb0
   10c8a:	0049      	lsls	r1, r1, #1
   10c8c:	468c      	mov	ip, r1
   10c8e:	44bc      	add	ip, r7
   10c90:	4463      	add	r3, ip
   10c92:	619a      	str	r2, [r3, #24]
            rotate_register[5] = rotate_register[4];
   10c94:	4b58      	ldr	r3, [pc, #352]	; (10df8 <sw_sha256_process+0x600>)
   10c96:	22b0      	movs	r2, #176	; 0xb0
   10c98:	0052      	lsls	r2, r2, #1
   10c9a:	4694      	mov	ip, r2
   10c9c:	44bc      	add	ip, r7
   10c9e:	4463      	add	r3, ip
   10ca0:	691a      	ldr	r2, [r3, #16]
   10ca2:	4b55      	ldr	r3, [pc, #340]	; (10df8 <sw_sha256_process+0x600>)
   10ca4:	21b0      	movs	r1, #176	; 0xb0
   10ca6:	0049      	lsls	r1, r1, #1
   10ca8:	468c      	mov	ip, r1
   10caa:	44bc      	add	ip, r7
   10cac:	4463      	add	r3, ip
   10cae:	615a      	str	r2, [r3, #20]
            rotate_register[4] = rotate_register[3] + t1;
   10cb0:	4b51      	ldr	r3, [pc, #324]	; (10df8 <sw_sha256_process+0x600>)
   10cb2:	22b0      	movs	r2, #176	; 0xb0
   10cb4:	0052      	lsls	r2, r2, #1
   10cb6:	4694      	mov	ip, r2
   10cb8:	44bc      	add	ip, r7
   10cba:	4463      	add	r3, ip
   10cbc:	68da      	ldr	r2, [r3, #12]
   10cbe:	239a      	movs	r3, #154	; 0x9a
   10cc0:	005b      	lsls	r3, r3, #1
   10cc2:	18fb      	adds	r3, r7, r3
   10cc4:	681b      	ldr	r3, [r3, #0]
   10cc6:	18d2      	adds	r2, r2, r3
   10cc8:	4b4b      	ldr	r3, [pc, #300]	; (10df8 <sw_sha256_process+0x600>)
   10cca:	21b0      	movs	r1, #176	; 0xb0
   10ccc:	0049      	lsls	r1, r1, #1
   10cce:	468c      	mov	ip, r1
   10cd0:	44bc      	add	ip, r7
   10cd2:	4463      	add	r3, ip
   10cd4:	611a      	str	r2, [r3, #16]
            rotate_register[3] = rotate_register[2];
   10cd6:	4b48      	ldr	r3, [pc, #288]	; (10df8 <sw_sha256_process+0x600>)
   10cd8:	22b0      	movs	r2, #176	; 0xb0
   10cda:	0052      	lsls	r2, r2, #1
   10cdc:	4694      	mov	ip, r2
   10cde:	44bc      	add	ip, r7
   10ce0:	4463      	add	r3, ip
   10ce2:	689a      	ldr	r2, [r3, #8]
   10ce4:	4b44      	ldr	r3, [pc, #272]	; (10df8 <sw_sha256_process+0x600>)
   10ce6:	21b0      	movs	r1, #176	; 0xb0
   10ce8:	0049      	lsls	r1, r1, #1
   10cea:	468c      	mov	ip, r1
   10cec:	44bc      	add	ip, r7
   10cee:	4463      	add	r3, ip
   10cf0:	60da      	str	r2, [r3, #12]
            rotate_register[2] = rotate_register[1];
   10cf2:	4b41      	ldr	r3, [pc, #260]	; (10df8 <sw_sha256_process+0x600>)
   10cf4:	22b0      	movs	r2, #176	; 0xb0
   10cf6:	0052      	lsls	r2, r2, #1
   10cf8:	4694      	mov	ip, r2
   10cfa:	44bc      	add	ip, r7
   10cfc:	4463      	add	r3, ip
   10cfe:	685a      	ldr	r2, [r3, #4]
   10d00:	4b3d      	ldr	r3, [pc, #244]	; (10df8 <sw_sha256_process+0x600>)
   10d02:	21b0      	movs	r1, #176	; 0xb0
   10d04:	0049      	lsls	r1, r1, #1
   10d06:	468c      	mov	ip, r1
   10d08:	44bc      	add	ip, r7
   10d0a:	4463      	add	r3, ip
   10d0c:	609a      	str	r2, [r3, #8]
            rotate_register[1] = rotate_register[0];
   10d0e:	4b3a      	ldr	r3, [pc, #232]	; (10df8 <sw_sha256_process+0x600>)
   10d10:	22b0      	movs	r2, #176	; 0xb0
   10d12:	0052      	lsls	r2, r2, #1
   10d14:	4694      	mov	ip, r2
   10d16:	44bc      	add	ip, r7
   10d18:	4463      	add	r3, ip
   10d1a:	681a      	ldr	r2, [r3, #0]
   10d1c:	4b36      	ldr	r3, [pc, #216]	; (10df8 <sw_sha256_process+0x600>)
   10d1e:	21b0      	movs	r1, #176	; 0xb0
   10d20:	0049      	lsls	r1, r1, #1
   10d22:	468c      	mov	ip, r1
   10d24:	44bc      	add	ip, r7
   10d26:	4463      	add	r3, ip
   10d28:	605a      	str	r2, [r3, #4]
            rotate_register[0] = t1 + t2;
   10d2a:	239a      	movs	r3, #154	; 0x9a
   10d2c:	005b      	lsls	r3, r3, #1
   10d2e:	18fb      	adds	r3, r7, r3
   10d30:	681a      	ldr	r2, [r3, #0]
   10d32:	239e      	movs	r3, #158	; 0x9e
   10d34:	005b      	lsls	r3, r3, #1
   10d36:	18fb      	adds	r3, r7, r3
   10d38:	681b      	ldr	r3, [r3, #0]
   10d3a:	18d2      	adds	r2, r2, r3
   10d3c:	4b2e      	ldr	r3, [pc, #184]	; (10df8 <sw_sha256_process+0x600>)
   10d3e:	21b0      	movs	r1, #176	; 0xb0
   10d40:	0049      	lsls	r1, r1, #1
   10d42:	468c      	mov	ip, r1
   10d44:	44bc      	add	ip, r7
   10d46:	4463      	add	r3, ip
   10d48:	601a      	str	r2, [r3, #0]
        for (i = 0; i < SHA256_BLOCK_SIZE; i++)
   10d4a:	23ae      	movs	r3, #174	; 0xae
   10d4c:	005b      	lsls	r3, r3, #1
   10d4e:	18fb      	adds	r3, r7, r3
   10d50:	681b      	ldr	r3, [r3, #0]
   10d52:	3301      	adds	r3, #1
   10d54:	22ae      	movs	r2, #174	; 0xae
   10d56:	0052      	lsls	r2, r2, #1
   10d58:	18ba      	adds	r2, r7, r2
   10d5a:	6013      	str	r3, [r2, #0]
   10d5c:	23ae      	movs	r3, #174	; 0xae
   10d5e:	005b      	lsls	r3, r3, #1
   10d60:	18fb      	adds	r3, r7, r3
   10d62:	681b      	ldr	r3, [r3, #0]
   10d64:	2b3f      	cmp	r3, #63	; 0x3f
   10d66:	dc00      	bgt.n	10d6a <sw_sha256_process+0x572>
   10d68:	e6a6      	b.n	10ab8 <sw_sha256_process+0x2c0>
        }

        // Add the hash of this block to current result.
        for (i = 0; i < 8; i++)
   10d6a:	2300      	movs	r3, #0
   10d6c:	22ae      	movs	r2, #174	; 0xae
   10d6e:	0052      	lsls	r2, r2, #1
   10d70:	18ba      	adds	r2, r7, r2
   10d72:	6013      	str	r3, [r2, #0]
   10d74:	e025      	b.n	10dc2 <sw_sha256_process+0x5ca>
        {
            ctx->hash[i] += rotate_register[i];
   10d76:	68fb      	ldr	r3, [r7, #12]
   10d78:	22ae      	movs	r2, #174	; 0xae
   10d7a:	0052      	lsls	r2, r2, #1
   10d7c:	18ba      	adds	r2, r7, r2
   10d7e:	6812      	ldr	r2, [r2, #0]
   10d80:	3222      	adds	r2, #34	; 0x22
   10d82:	0092      	lsls	r2, r2, #2
   10d84:	58d2      	ldr	r2, [r2, r3]
   10d86:	4b1c      	ldr	r3, [pc, #112]	; (10df8 <sw_sha256_process+0x600>)
   10d88:	21b0      	movs	r1, #176	; 0xb0
   10d8a:	0049      	lsls	r1, r1, #1
   10d8c:	468c      	mov	ip, r1
   10d8e:	44bc      	add	ip, r7
   10d90:	4463      	add	r3, ip
   10d92:	21ae      	movs	r1, #174	; 0xae
   10d94:	0049      	lsls	r1, r1, #1
   10d96:	1879      	adds	r1, r7, r1
   10d98:	6809      	ldr	r1, [r1, #0]
   10d9a:	0089      	lsls	r1, r1, #2
   10d9c:	58cb      	ldr	r3, [r1, r3]
   10d9e:	18d1      	adds	r1, r2, r3
   10da0:	68fb      	ldr	r3, [r7, #12]
   10da2:	22ae      	movs	r2, #174	; 0xae
   10da4:	0052      	lsls	r2, r2, #1
   10da6:	18ba      	adds	r2, r7, r2
   10da8:	6812      	ldr	r2, [r2, #0]
   10daa:	3222      	adds	r2, #34	; 0x22
   10dac:	0092      	lsls	r2, r2, #2
   10dae:	50d1      	str	r1, [r2, r3]
        for (i = 0; i < 8; i++)
   10db0:	23ae      	movs	r3, #174	; 0xae
   10db2:	005b      	lsls	r3, r3, #1
   10db4:	18fb      	adds	r3, r7, r3
   10db6:	681b      	ldr	r3, [r3, #0]
   10db8:	3301      	adds	r3, #1
   10dba:	22ae      	movs	r2, #174	; 0xae
   10dbc:	0052      	lsls	r2, r2, #1
   10dbe:	18ba      	adds	r2, r7, r2
   10dc0:	6013      	str	r3, [r2, #0]
   10dc2:	23ae      	movs	r3, #174	; 0xae
   10dc4:	005b      	lsls	r3, r3, #1
   10dc6:	18fb      	adds	r3, r7, r3
   10dc8:	681b      	ldr	r3, [r3, #0]
   10dca:	2b07      	cmp	r3, #7
   10dcc:	ddd3      	ble.n	10d76 <sw_sha256_process+0x57e>
    for (block = 0; block < block_count; block++)
   10dce:	23ac      	movs	r3, #172	; 0xac
   10dd0:	005b      	lsls	r3, r3, #1
   10dd2:	18fb      	adds	r3, r7, r3
   10dd4:	681b      	ldr	r3, [r3, #0]
   10dd6:	3301      	adds	r3, #1
   10dd8:	22ac      	movs	r2, #172	; 0xac
   10dda:	0052      	lsls	r2, r2, #1
   10ddc:	18ba      	adds	r2, r7, r2
   10dde:	6013      	str	r3, [r2, #0]
   10de0:	23ac      	movs	r3, #172	; 0xac
   10de2:	005b      	lsls	r3, r3, #1
   10de4:	18fb      	adds	r3, r7, r3
   10de6:	681a      	ldr	r2, [r3, #0]
   10de8:	687b      	ldr	r3, [r7, #4]
   10dea:	429a      	cmp	r2, r3
   10dec:	d200      	bcs.n	10df0 <sw_sha256_process+0x5f8>
   10dee:	e519      	b.n	10824 <sw_sha256_process+0x2c>
        }
    }
}
   10df0:	46c0      	nop			; (mov r8, r8)
   10df2:	46bd      	mov	sp, r7
   10df4:	b058      	add	sp, #352	; 0x160
   10df6:	bd80      	pop	{r7, pc}
   10df8:	fffffeb4 	.word	0xfffffeb4
   10dfc:	00020d54 	.word	0x00020d54
   10e00:	fffffed4 	.word	0xfffffed4

00010e04 <sw_sha256_init>:
 *
 * \param[in] ctx          SHA256 hash context
 */

void sw_sha256_init(sw_sha256_ctx* ctx)
{
   10e04:	b580      	push	{r7, lr}
   10e06:	b084      	sub	sp, #16
   10e08:	af00      	add	r7, sp, #0
   10e0a:	6078      	str	r0, [r7, #4]
        0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a,
        0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19
    };
    int i;

    memset(ctx, 0, sizeof(*ctx));
   10e0c:	687b      	ldr	r3, [r7, #4]
   10e0e:	22a8      	movs	r2, #168	; 0xa8
   10e10:	2100      	movs	r1, #0
   10e12:	0018      	movs	r0, r3
   10e14:	4b0b      	ldr	r3, [pc, #44]	; (10e44 <sw_sha256_init+0x40>)
   10e16:	4798      	blx	r3
    for (i = 0; i < 8; i++)
   10e18:	2300      	movs	r3, #0
   10e1a:	60fb      	str	r3, [r7, #12]
   10e1c:	e00b      	b.n	10e36 <sw_sha256_init+0x32>
    {
        ctx->hash[i] = hash_init[i];
   10e1e:	4b0a      	ldr	r3, [pc, #40]	; (10e48 <sw_sha256_init+0x44>)
   10e20:	68fa      	ldr	r2, [r7, #12]
   10e22:	0092      	lsls	r2, r2, #2
   10e24:	58d1      	ldr	r1, [r2, r3]
   10e26:	687b      	ldr	r3, [r7, #4]
   10e28:	68fa      	ldr	r2, [r7, #12]
   10e2a:	3222      	adds	r2, #34	; 0x22
   10e2c:	0092      	lsls	r2, r2, #2
   10e2e:	50d1      	str	r1, [r2, r3]
    for (i = 0; i < 8; i++)
   10e30:	68fb      	ldr	r3, [r7, #12]
   10e32:	3301      	adds	r3, #1
   10e34:	60fb      	str	r3, [r7, #12]
   10e36:	68fb      	ldr	r3, [r7, #12]
   10e38:	2b07      	cmp	r3, #7
   10e3a:	ddf0      	ble.n	10e1e <sw_sha256_init+0x1a>
    }
}
   10e3c:	46c0      	nop			; (mov r8, r8)
   10e3e:	46bd      	mov	sp, r7
   10e40:	b004      	add	sp, #16
   10e42:	bd80      	pop	{r7, pc}
   10e44:	0001c173 	.word	0x0001c173
   10e48:	00020e54 	.word	0x00020e54

00010e4c <sw_sha256_update>:
 * \param[in] ctx          SHA256 hash context
 * \param[in] msg          Raw blocks to be processed
 * \param[in] msg_size     The size of the message passed
 */
void sw_sha256_update(sw_sha256_ctx* ctx, const uint8_t* msg, uint32_t msg_size)
{
   10e4c:	b580      	push	{r7, lr}
   10e4e:	b088      	sub	sp, #32
   10e50:	af00      	add	r7, sp, #0
   10e52:	60f8      	str	r0, [r7, #12]
   10e54:	60b9      	str	r1, [r7, #8]
   10e56:	607a      	str	r2, [r7, #4]
    uint32_t block_count;
    uint32_t rem_size = SHA256_BLOCK_SIZE - ctx->block_size;
   10e58:	68fb      	ldr	r3, [r7, #12]
   10e5a:	685b      	ldr	r3, [r3, #4]
   10e5c:	2240      	movs	r2, #64	; 0x40
   10e5e:	1ad3      	subs	r3, r2, r3
   10e60:	61fb      	str	r3, [r7, #28]
    uint32_t copy_size = msg_size > rem_size ? rem_size : msg_size;
   10e62:	69fa      	ldr	r2, [r7, #28]
   10e64:	687b      	ldr	r3, [r7, #4]
   10e66:	4293      	cmp	r3, r2
   10e68:	d900      	bls.n	10e6c <sw_sha256_update+0x20>
   10e6a:	0013      	movs	r3, r2
   10e6c:	61bb      	str	r3, [r7, #24]

    // Copy data into current block
    memcpy(&ctx->block[ctx->block_size], msg, copy_size);
   10e6e:	68fb      	ldr	r3, [r7, #12]
   10e70:	685b      	ldr	r3, [r3, #4]
   10e72:	3308      	adds	r3, #8
   10e74:	68fa      	ldr	r2, [r7, #12]
   10e76:	18d3      	adds	r3, r2, r3
   10e78:	69ba      	ldr	r2, [r7, #24]
   10e7a:	68b9      	ldr	r1, [r7, #8]
   10e7c:	0018      	movs	r0, r3
   10e7e:	4b22      	ldr	r3, [pc, #136]	; (10f08 <sw_sha256_update+0xbc>)
   10e80:	4798      	blx	r3

    if (ctx->block_size + msg_size < SHA256_BLOCK_SIZE)
   10e82:	68fb      	ldr	r3, [r7, #12]
   10e84:	685a      	ldr	r2, [r3, #4]
   10e86:	687b      	ldr	r3, [r7, #4]
   10e88:	18d3      	adds	r3, r2, r3
   10e8a:	2b3f      	cmp	r3, #63	; 0x3f
   10e8c:	d806      	bhi.n	10e9c <sw_sha256_update+0x50>
    {
        // Not enough data to finish off the current block
        ctx->block_size += msg_size;
   10e8e:	68fb      	ldr	r3, [r7, #12]
   10e90:	685a      	ldr	r2, [r3, #4]
   10e92:	687b      	ldr	r3, [r7, #4]
   10e94:	18d2      	adds	r2, r2, r3
   10e96:	68fb      	ldr	r3, [r7, #12]
   10e98:	605a      	str	r2, [r3, #4]
        return;
   10e9a:	e031      	b.n	10f00 <sw_sha256_update+0xb4>
    }

    // Process the current block
    sw_sha256_process(ctx, ctx->block, 1);
   10e9c:	68fb      	ldr	r3, [r7, #12]
   10e9e:	3308      	adds	r3, #8
   10ea0:	0019      	movs	r1, r3
   10ea2:	68fb      	ldr	r3, [r7, #12]
   10ea4:	2201      	movs	r2, #1
   10ea6:	0018      	movs	r0, r3
   10ea8:	4b18      	ldr	r3, [pc, #96]	; (10f0c <sw_sha256_update+0xc0>)
   10eaa:	4798      	blx	r3

    // Process any additional blocks
    msg_size -= copy_size; // Adjust to the remaining message bytes
   10eac:	687a      	ldr	r2, [r7, #4]
   10eae:	69bb      	ldr	r3, [r7, #24]
   10eb0:	1ad3      	subs	r3, r2, r3
   10eb2:	607b      	str	r3, [r7, #4]
    block_count = msg_size / SHA256_BLOCK_SIZE;
   10eb4:	687b      	ldr	r3, [r7, #4]
   10eb6:	099b      	lsrs	r3, r3, #6
   10eb8:	617b      	str	r3, [r7, #20]
    sw_sha256_process(ctx, &msg[copy_size], block_count);
   10eba:	68ba      	ldr	r2, [r7, #8]
   10ebc:	69bb      	ldr	r3, [r7, #24]
   10ebe:	18d1      	adds	r1, r2, r3
   10ec0:	697a      	ldr	r2, [r7, #20]
   10ec2:	68fb      	ldr	r3, [r7, #12]
   10ec4:	0018      	movs	r0, r3
   10ec6:	4b11      	ldr	r3, [pc, #68]	; (10f0c <sw_sha256_update+0xc0>)
   10ec8:	4798      	blx	r3

    // Save any remaining data
    ctx->total_msg_size += (block_count + 1) * SHA256_BLOCK_SIZE;
   10eca:	68fb      	ldr	r3, [r7, #12]
   10ecc:	681a      	ldr	r2, [r3, #0]
   10ece:	697b      	ldr	r3, [r7, #20]
   10ed0:	3301      	adds	r3, #1
   10ed2:	019b      	lsls	r3, r3, #6
   10ed4:	18d2      	adds	r2, r2, r3
   10ed6:	68fb      	ldr	r3, [r7, #12]
   10ed8:	601a      	str	r2, [r3, #0]
    ctx->block_size = msg_size % SHA256_BLOCK_SIZE;
   10eda:	687b      	ldr	r3, [r7, #4]
   10edc:	223f      	movs	r2, #63	; 0x3f
   10ede:	401a      	ands	r2, r3
   10ee0:	68fb      	ldr	r3, [r7, #12]
   10ee2:	605a      	str	r2, [r3, #4]
    memcpy(ctx->block, &msg[copy_size + block_count * SHA256_BLOCK_SIZE], ctx->block_size);
   10ee4:	68fb      	ldr	r3, [r7, #12]
   10ee6:	3308      	adds	r3, #8
   10ee8:	0018      	movs	r0, r3
   10eea:	697b      	ldr	r3, [r7, #20]
   10eec:	019a      	lsls	r2, r3, #6
   10eee:	69bb      	ldr	r3, [r7, #24]
   10ef0:	18d3      	adds	r3, r2, r3
   10ef2:	68ba      	ldr	r2, [r7, #8]
   10ef4:	18d1      	adds	r1, r2, r3
   10ef6:	68fb      	ldr	r3, [r7, #12]
   10ef8:	685b      	ldr	r3, [r3, #4]
   10efa:	001a      	movs	r2, r3
   10efc:	4b02      	ldr	r3, [pc, #8]	; (10f08 <sw_sha256_update+0xbc>)
   10efe:	4798      	blx	r3
}
   10f00:	46bd      	mov	sp, r7
   10f02:	b008      	add	sp, #32
   10f04:	bd80      	pop	{r7, pc}
   10f06:	46c0      	nop			; (mov r8, r8)
   10f08:	0001c13d 	.word	0x0001c13d
   10f0c:	000107f9 	.word	0x000107f9

00010f10 <sw_sha256_final>:
/** \brief completes the final SHA256 calculation and returns the final digest/hash
 * \param[in]  ctx     ptr to context data structure
 * \param[out] digest  receives the computed digest of the SHA 256
 */
void sw_sha256_final(sw_sha256_ctx* ctx, uint8_t digest[SHA256_DIGEST_SIZE])
{
   10f10:	b580      	push	{r7, lr}
   10f12:	b086      	sub	sp, #24
   10f14:	af00      	add	r7, sp, #0
   10f16:	6078      	str	r0, [r7, #4]
   10f18:	6039      	str	r1, [r7, #0]
    int i, j;
    uint32_t msg_size_bits;
    uint32_t pad_zero_count;

    // Calculate the total message size in bits
    ctx->total_msg_size += ctx->block_size;
   10f1a:	687b      	ldr	r3, [r7, #4]
   10f1c:	681a      	ldr	r2, [r3, #0]
   10f1e:	687b      	ldr	r3, [r7, #4]
   10f20:	685b      	ldr	r3, [r3, #4]
   10f22:	18d2      	adds	r2, r2, r3
   10f24:	687b      	ldr	r3, [r7, #4]
   10f26:	601a      	str	r2, [r3, #0]
    msg_size_bits = ctx->total_msg_size * 8;
   10f28:	687b      	ldr	r3, [r7, #4]
   10f2a:	681b      	ldr	r3, [r3, #0]
   10f2c:	00db      	lsls	r3, r3, #3
   10f2e:	60fb      	str	r3, [r7, #12]

    // Calculate the number of padding zero bytes required between the 1 bit byte and the 64 bit message size in bits.
    pad_zero_count = (SHA256_BLOCK_SIZE - ((ctx->block_size + 9) % SHA256_BLOCK_SIZE)) % SHA256_BLOCK_SIZE;
   10f30:	687b      	ldr	r3, [r7, #4]
   10f32:	685b      	ldr	r3, [r3, #4]
   10f34:	2209      	movs	r2, #9
   10f36:	4252      	negs	r2, r2
   10f38:	1ad3      	subs	r3, r2, r3
   10f3a:	223f      	movs	r2, #63	; 0x3f
   10f3c:	4013      	ands	r3, r2
   10f3e:	60bb      	str	r3, [r7, #8]

    // Append a single 1 bit
    ctx->block[ctx->block_size++] = 0x80;
   10f40:	687b      	ldr	r3, [r7, #4]
   10f42:	685b      	ldr	r3, [r3, #4]
   10f44:	1c59      	adds	r1, r3, #1
   10f46:	687a      	ldr	r2, [r7, #4]
   10f48:	6051      	str	r1, [r2, #4]
   10f4a:	687a      	ldr	r2, [r7, #4]
   10f4c:	18d3      	adds	r3, r2, r3
   10f4e:	2280      	movs	r2, #128	; 0x80
   10f50:	721a      	strb	r2, [r3, #8]

    // Add padding zeros plus upper 4 bytes of total msg size in bits (only supporting 32bit message bit counts)
    memset(&ctx->block[ctx->block_size], 0, pad_zero_count + 4);
   10f52:	687b      	ldr	r3, [r7, #4]
   10f54:	685b      	ldr	r3, [r3, #4]
   10f56:	3308      	adds	r3, #8
   10f58:	687a      	ldr	r2, [r7, #4]
   10f5a:	18d0      	adds	r0, r2, r3
   10f5c:	68bb      	ldr	r3, [r7, #8]
   10f5e:	3304      	adds	r3, #4
   10f60:	001a      	movs	r2, r3
   10f62:	2100      	movs	r1, #0
   10f64:	4b37      	ldr	r3, [pc, #220]	; (11044 <sw_sha256_final+0x134>)
   10f66:	4798      	blx	r3
    ctx->block_size += pad_zero_count + 4;
   10f68:	687b      	ldr	r3, [r7, #4]
   10f6a:	685a      	ldr	r2, [r3, #4]
   10f6c:	68bb      	ldr	r3, [r7, #8]
   10f6e:	18d3      	adds	r3, r2, r3
   10f70:	1d1a      	adds	r2, r3, #4
   10f72:	687b      	ldr	r3, [r7, #4]
   10f74:	605a      	str	r2, [r3, #4]

    // Add the total message size in bits to the end of the current block. Technically this is
    // supposed to be 8 bytes. This shortcut will reduce the max message size to 536,870,911 bytes.
    ctx->block[ctx->block_size++] = (uint8_t)(msg_size_bits >> 24);
   10f76:	687b      	ldr	r3, [r7, #4]
   10f78:	685b      	ldr	r3, [r3, #4]
   10f7a:	1c59      	adds	r1, r3, #1
   10f7c:	687a      	ldr	r2, [r7, #4]
   10f7e:	6051      	str	r1, [r2, #4]
   10f80:	68fa      	ldr	r2, [r7, #12]
   10f82:	0e12      	lsrs	r2, r2, #24
   10f84:	b2d1      	uxtb	r1, r2
   10f86:	687a      	ldr	r2, [r7, #4]
   10f88:	18d3      	adds	r3, r2, r3
   10f8a:	1c0a      	adds	r2, r1, #0
   10f8c:	721a      	strb	r2, [r3, #8]
    ctx->block[ctx->block_size++] = (uint8_t)(msg_size_bits >> 16);
   10f8e:	687b      	ldr	r3, [r7, #4]
   10f90:	685b      	ldr	r3, [r3, #4]
   10f92:	1c59      	adds	r1, r3, #1
   10f94:	687a      	ldr	r2, [r7, #4]
   10f96:	6051      	str	r1, [r2, #4]
   10f98:	68fa      	ldr	r2, [r7, #12]
   10f9a:	0c12      	lsrs	r2, r2, #16
   10f9c:	b2d1      	uxtb	r1, r2
   10f9e:	687a      	ldr	r2, [r7, #4]
   10fa0:	18d3      	adds	r3, r2, r3
   10fa2:	1c0a      	adds	r2, r1, #0
   10fa4:	721a      	strb	r2, [r3, #8]
    ctx->block[ctx->block_size++] = (uint8_t)(msg_size_bits >> 8);
   10fa6:	687b      	ldr	r3, [r7, #4]
   10fa8:	685b      	ldr	r3, [r3, #4]
   10faa:	1c59      	adds	r1, r3, #1
   10fac:	687a      	ldr	r2, [r7, #4]
   10fae:	6051      	str	r1, [r2, #4]
   10fb0:	68fa      	ldr	r2, [r7, #12]
   10fb2:	0a12      	lsrs	r2, r2, #8
   10fb4:	b2d1      	uxtb	r1, r2
   10fb6:	687a      	ldr	r2, [r7, #4]
   10fb8:	18d3      	adds	r3, r2, r3
   10fba:	1c0a      	adds	r2, r1, #0
   10fbc:	721a      	strb	r2, [r3, #8]
    ctx->block[ctx->block_size++] = (uint8_t)(msg_size_bits >> 0);
   10fbe:	687b      	ldr	r3, [r7, #4]
   10fc0:	685b      	ldr	r3, [r3, #4]
   10fc2:	1c59      	adds	r1, r3, #1
   10fc4:	687a      	ldr	r2, [r7, #4]
   10fc6:	6051      	str	r1, [r2, #4]
   10fc8:	68fa      	ldr	r2, [r7, #12]
   10fca:	b2d1      	uxtb	r1, r2
   10fcc:	687a      	ldr	r2, [r7, #4]
   10fce:	18d3      	adds	r3, r2, r3
   10fd0:	1c0a      	adds	r2, r1, #0
   10fd2:	721a      	strb	r2, [r3, #8]

    sw_sha256_process(ctx, ctx->block, ctx->block_size / SHA256_BLOCK_SIZE);
   10fd4:	687b      	ldr	r3, [r7, #4]
   10fd6:	3308      	adds	r3, #8
   10fd8:	0019      	movs	r1, r3
   10fda:	687b      	ldr	r3, [r7, #4]
   10fdc:	685b      	ldr	r3, [r3, #4]
   10fde:	099a      	lsrs	r2, r3, #6
   10fe0:	687b      	ldr	r3, [r7, #4]
   10fe2:	0018      	movs	r0, r3
   10fe4:	4b18      	ldr	r3, [pc, #96]	; (11048 <sw_sha256_final+0x138>)
   10fe6:	4798      	blx	r3

    // All blocks have been processed.
    // Concatenate the hashes to produce digest, MSB of every hash first.
    for (i = 0; i < 8; i++)
   10fe8:	2300      	movs	r3, #0
   10fea:	617b      	str	r3, [r7, #20]
   10fec:	e023      	b.n	11036 <sw_sha256_final+0x126>
    {
        for (j = sizeof(int32_t) - 1; j >= 0; j--, ctx->hash[i] >>= 8)
   10fee:	2303      	movs	r3, #3
   10ff0:	613b      	str	r3, [r7, #16]
   10ff2:	e01a      	b.n	1102a <sw_sha256_final+0x11a>
        {
            digest[i * sizeof(int32_t) + j] = ctx->hash[i] & 0xFF;
   10ff4:	697b      	ldr	r3, [r7, #20]
   10ff6:	009a      	lsls	r2, r3, #2
   10ff8:	693b      	ldr	r3, [r7, #16]
   10ffa:	18d3      	adds	r3, r2, r3
   10ffc:	683a      	ldr	r2, [r7, #0]
   10ffe:	18d3      	adds	r3, r2, r3
   11000:	687a      	ldr	r2, [r7, #4]
   11002:	6979      	ldr	r1, [r7, #20]
   11004:	3122      	adds	r1, #34	; 0x22
   11006:	0089      	lsls	r1, r1, #2
   11008:	588a      	ldr	r2, [r1, r2]
   1100a:	b2d2      	uxtb	r2, r2
   1100c:	701a      	strb	r2, [r3, #0]
        for (j = sizeof(int32_t) - 1; j >= 0; j--, ctx->hash[i] >>= 8)
   1100e:	693b      	ldr	r3, [r7, #16]
   11010:	3b01      	subs	r3, #1
   11012:	613b      	str	r3, [r7, #16]
   11014:	687b      	ldr	r3, [r7, #4]
   11016:	697a      	ldr	r2, [r7, #20]
   11018:	3222      	adds	r2, #34	; 0x22
   1101a:	0092      	lsls	r2, r2, #2
   1101c:	58d3      	ldr	r3, [r2, r3]
   1101e:	0a19      	lsrs	r1, r3, #8
   11020:	687b      	ldr	r3, [r7, #4]
   11022:	697a      	ldr	r2, [r7, #20]
   11024:	3222      	adds	r2, #34	; 0x22
   11026:	0092      	lsls	r2, r2, #2
   11028:	50d1      	str	r1, [r2, r3]
   1102a:	693b      	ldr	r3, [r7, #16]
   1102c:	2b00      	cmp	r3, #0
   1102e:	dae1      	bge.n	10ff4 <sw_sha256_final+0xe4>
    for (i = 0; i < 8; i++)
   11030:	697b      	ldr	r3, [r7, #20]
   11032:	3301      	adds	r3, #1
   11034:	617b      	str	r3, [r7, #20]
   11036:	697b      	ldr	r3, [r7, #20]
   11038:	2b07      	cmp	r3, #7
   1103a:	ddd8      	ble.n	10fee <sw_sha256_final+0xde>
        }
    }
}
   1103c:	46c0      	nop			; (mov r8, r8)
   1103e:	46bd      	mov	sp, r7
   11040:	b006      	add	sp, #24
   11042:	bd80      	pop	{r7, pc}
   11044:	0001c173 	.word	0x0001c173
   11048:	000107f9 	.word	0x000107f9

0001104c <hal_iface_init>:
 * \param[in] hal pointer to ATCAHAL_t intermediate data structure
 *  \return ATCA_SUCCESS on success, otherwise an error code.
 */

ATCA_STATUS hal_iface_init(ATCAIfaceCfg *cfg, ATCAHAL_t *hal)
{
   1104c:	b580      	push	{r7, lr}
   1104e:	b084      	sub	sp, #16
   11050:	af00      	add	r7, sp, #0
   11052:	6078      	str	r0, [r7, #4]
   11054:	6039      	str	r1, [r7, #0]
    // Because C isn't a real object oriented language or dynamically typed, some switch in the overall system is unavoidable
    // The key here is to provide the flexibility to include just the types of interfaces you want/need without breaking the
    // object model.  The former is needed so in an embedded, constrained memory environment, you don't have to pay the price
    // (in terms of memory) for interfaces you don't use in your application.
    ATCA_STATUS status = ATCA_COMM_FAIL;
   11056:	230f      	movs	r3, #15
   11058:	18fb      	adds	r3, r7, r3
   1105a:	22f0      	movs	r2, #240	; 0xf0
   1105c:	701a      	strb	r2, [r3, #0]

    switch (cfg->iface_type)
   1105e:	687b      	ldr	r3, [r7, #4]
   11060:	781b      	ldrb	r3, [r3, #0]
   11062:	2b05      	cmp	r3, #5
   11064:	d824      	bhi.n	110b0 <hal_iface_init+0x64>
   11066:	009a      	lsls	r2, r3, #2
   11068:	4b16      	ldr	r3, [pc, #88]	; (110c4 <hal_iface_init+0x78>)
   1106a:	18d3      	adds	r3, r2, r3
   1106c:	681b      	ldr	r3, [r3, #0]
   1106e:	469f      	mov	pc, r3
    {
    case ATCA_I2C_IFACE:
        #ifdef ATCA_HAL_I2C
        hal->halinit = &hal_i2c_init;
   11070:	683b      	ldr	r3, [r7, #0]
   11072:	4a15      	ldr	r2, [pc, #84]	; (110c8 <hal_iface_init+0x7c>)
   11074:	601a      	str	r2, [r3, #0]
        hal->halpostinit = &hal_i2c_post_init;
   11076:	683b      	ldr	r3, [r7, #0]
   11078:	4a14      	ldr	r2, [pc, #80]	; (110cc <hal_iface_init+0x80>)
   1107a:	605a      	str	r2, [r3, #4]
        hal->halreceive = &hal_i2c_receive;
   1107c:	683b      	ldr	r3, [r7, #0]
   1107e:	4a14      	ldr	r2, [pc, #80]	; (110d0 <hal_iface_init+0x84>)
   11080:	60da      	str	r2, [r3, #12]
        hal->halsend = &hal_i2c_send;
   11082:	683b      	ldr	r3, [r7, #0]
   11084:	4a13      	ldr	r2, [pc, #76]	; (110d4 <hal_iface_init+0x88>)
   11086:	609a      	str	r2, [r3, #8]
        hal->halsleep = &hal_i2c_sleep;
   11088:	683b      	ldr	r3, [r7, #0]
   1108a:	4a13      	ldr	r2, [pc, #76]	; (110d8 <hal_iface_init+0x8c>)
   1108c:	619a      	str	r2, [r3, #24]
        hal->halwake = &hal_i2c_wake;
   1108e:	683b      	ldr	r3, [r7, #0]
   11090:	4a12      	ldr	r2, [pc, #72]	; (110dc <hal_iface_init+0x90>)
   11092:	611a      	str	r2, [r3, #16]
        hal->halidle = &hal_i2c_idle;
   11094:	683b      	ldr	r3, [r7, #0]
   11096:	4a12      	ldr	r2, [pc, #72]	; (110e0 <hal_iface_init+0x94>)
   11098:	615a      	str	r2, [r3, #20]
        hal->halrelease = &hal_i2c_release;
   1109a:	683b      	ldr	r3, [r7, #0]
   1109c:	4a11      	ldr	r2, [pc, #68]	; (110e4 <hal_iface_init+0x98>)
   1109e:	61da      	str	r2, [r3, #28]
        hal->hal_data = NULL;
   110a0:	683b      	ldr	r3, [r7, #0]
   110a2:	2200      	movs	r2, #0
   110a4:	621a      	str	r2, [r3, #32]

        status = ATCA_SUCCESS;
   110a6:	230f      	movs	r3, #15
   110a8:	18fb      	adds	r3, r7, r3
   110aa:	2200      	movs	r2, #0
   110ac:	701a      	strb	r2, [r3, #0]
        #endif
        break;
   110ae:	e002      	b.n	110b6 <hal_iface_init+0x6a>

        status = ATCA_SUCCESS;
        #endif
        break;
    default:
        break;
   110b0:	46c0      	nop			; (mov r8, r8)
   110b2:	e000      	b.n	110b6 <hal_iface_init+0x6a>
        break;
   110b4:	46c0      	nop			; (mov r8, r8)
    }
    return status;
   110b6:	230f      	movs	r3, #15
   110b8:	18fb      	adds	r3, r7, r3
   110ba:	781b      	ldrb	r3, [r3, #0]
}
   110bc:	0018      	movs	r0, r3
   110be:	46bd      	mov	sp, r7
   110c0:	b004      	add	sp, #16
   110c2:	bd80      	pop	{r7, pc}
   110c4:	00020e74 	.word	0x00020e74
   110c8:	00011c09 	.word	0x00011c09
   110cc:	00011db9 	.word	0x00011db9
   110d0:	00011e71 	.word	0x00011e71
   110d4:	00011dcd 	.word	0x00011dcd
   110d8:	00012241 	.word	0x00012241
   110dc:	00012065 	.word	0x00012065
   110e0:	000121b1 	.word	0x000121b1
   110e4:	000122d1 	.word	0x000122d1

000110e8 <hal_iface_release>:
 * \param[in] hal_data - pointer to opaque hal data maintained by HAL implementation for this interface type
 *  \return ATCA_SUCCESS on success, otherwise an error code.
 */

ATCA_STATUS hal_iface_release(ATCAIfaceType iface_type, void *hal_data)
{
   110e8:	b590      	push	{r4, r7, lr}
   110ea:	b085      	sub	sp, #20
   110ec:	af00      	add	r7, sp, #0
   110ee:	0002      	movs	r2, r0
   110f0:	6039      	str	r1, [r7, #0]
   110f2:	1dfb      	adds	r3, r7, #7
   110f4:	701a      	strb	r2, [r3, #0]
    ATCA_STATUS status = ATCA_GEN_FAIL;
   110f6:	230f      	movs	r3, #15
   110f8:	18fb      	adds	r3, r7, r3
   110fa:	22e1      	movs	r2, #225	; 0xe1
   110fc:	701a      	strb	r2, [r3, #0]

    switch (iface_type)
   110fe:	1dfb      	adds	r3, r7, #7
   11100:	781b      	ldrb	r3, [r3, #0]
   11102:	2b05      	cmp	r3, #5
   11104:	d80d      	bhi.n	11122 <hal_iface_release+0x3a>
   11106:	009a      	lsls	r2, r3, #2
   11108:	4b0b      	ldr	r3, [pc, #44]	; (11138 <hal_iface_release+0x50>)
   1110a:	18d3      	adds	r3, r2, r3
   1110c:	681b      	ldr	r3, [r3, #0]
   1110e:	469f      	mov	pc, r3
    {
    case ATCA_I2C_IFACE:
#ifdef ATCA_HAL_I2C
        status = hal_i2c_release(hal_data);
   11110:	230f      	movs	r3, #15
   11112:	18fc      	adds	r4, r7, r3
   11114:	683b      	ldr	r3, [r7, #0]
   11116:	0018      	movs	r0, r3
   11118:	4b08      	ldr	r3, [pc, #32]	; (1113c <hal_iface_release+0x54>)
   1111a:	4798      	blx	r3
   1111c:	0003      	movs	r3, r0
   1111e:	7023      	strb	r3, [r4, #0]
#endif
        break;
   11120:	e002      	b.n	11128 <hal_iface_release+0x40>
    case ATCA_CUSTOM_IFACE:
#ifdef ATCA_HAL_CUSTOM
#endif
        break;
    default:
        break;
   11122:	46c0      	nop			; (mov r8, r8)
   11124:	e000      	b.n	11128 <hal_iface_release+0x40>
        break;
   11126:	46c0      	nop			; (mov r8, r8)
    }

    return status;
   11128:	230f      	movs	r3, #15
   1112a:	18fb      	adds	r3, r7, r3
   1112c:	781b      	ldrb	r3, [r3, #0]
}
   1112e:	0018      	movs	r0, r3
   11130:	46bd      	mov	sp, r7
   11132:	b005      	add	sp, #20
   11134:	bd90      	pop	{r4, r7, pc}
   11136:	46c0      	nop			; (mov r8, r8)
   11138:	00020e8c 	.word	0x00020e8c
   1113c:	000122d1 	.word	0x000122d1

00011140 <atcab_genkey_base>:
 *                         isn't required.
 *
 * \return ATCA_SUCCESS on success, otherwise an error code.
 */
ATCA_STATUS atcab_genkey_base(uint8_t mode, uint16_t key_id, const uint8_t* other_data, uint8_t* public_key)
{
   11140:	b590      	push	{r4, r7, lr}
   11142:	b0ab      	sub	sp, #172	; 0xac
   11144:	af00      	add	r7, sp, #0
   11146:	60ba      	str	r2, [r7, #8]
   11148:	607b      	str	r3, [r7, #4]
   1114a:	230f      	movs	r3, #15
   1114c:	18fb      	adds	r3, r7, r3
   1114e:	1c02      	adds	r2, r0, #0
   11150:	701a      	strb	r2, [r3, #0]
   11152:	230c      	movs	r3, #12
   11154:	18fb      	adds	r3, r7, r3
   11156:	1c0a      	adds	r2, r1, #0
   11158:	801a      	strh	r2, [r3, #0]
    ATCAPacket packet;
    ATCACommand ca_cmd = _gDevice->mCommands;
   1115a:	4b30      	ldr	r3, [pc, #192]	; (1121c <atcab_genkey_base+0xdc>)
   1115c:	681b      	ldr	r3, [r3, #0]
   1115e:	681b      	ldr	r3, [r3, #0]
   11160:	22a0      	movs	r2, #160	; 0xa0
   11162:	18ba      	adds	r2, r7, r2
   11164:	6013      	str	r3, [r2, #0]
    ATCA_STATUS status = ATCA_GEN_FAIL;
   11166:	23a7      	movs	r3, #167	; 0xa7
   11168:	18fb      	adds	r3, r7, r3
   1116a:	22e1      	movs	r2, #225	; 0xe1
   1116c:	701a      	strb	r2, [r3, #0]

    do
    {
        // Build GenKey command
        packet.param1 = mode;
   1116e:	2314      	movs	r3, #20
   11170:	18fb      	adds	r3, r7, r3
   11172:	220f      	movs	r2, #15
   11174:	18ba      	adds	r2, r7, r2
   11176:	7812      	ldrb	r2, [r2, #0]
   11178:	70da      	strb	r2, [r3, #3]
        packet.param2 = key_id;
   1117a:	2314      	movs	r3, #20
   1117c:	18fb      	adds	r3, r7, r3
   1117e:	220c      	movs	r2, #12
   11180:	18ba      	adds	r2, r7, r2
   11182:	8812      	ldrh	r2, [r2, #0]
   11184:	809a      	strh	r2, [r3, #4]
        if (other_data)
   11186:	68bb      	ldr	r3, [r7, #8]
   11188:	2b00      	cmp	r3, #0
   1118a:	d007      	beq.n	1119c <atcab_genkey_base+0x5c>
        {
            memcpy(packet.data, other_data, GENKEY_OTHER_DATA_SIZE);
   1118c:	68b9      	ldr	r1, [r7, #8]
   1118e:	2314      	movs	r3, #20
   11190:	18fb      	adds	r3, r7, r3
   11192:	3306      	adds	r3, #6
   11194:	2203      	movs	r2, #3
   11196:	0018      	movs	r0, r3
   11198:	4b21      	ldr	r3, [pc, #132]	; (11220 <atcab_genkey_base+0xe0>)
   1119a:	4798      	blx	r3
        }

        if ((status = atGenKey(ca_cmd, &packet)) != ATCA_SUCCESS)
   1119c:	23a7      	movs	r3, #167	; 0xa7
   1119e:	18fc      	adds	r4, r7, r3
   111a0:	2314      	movs	r3, #20
   111a2:	18fa      	adds	r2, r7, r3
   111a4:	23a0      	movs	r3, #160	; 0xa0
   111a6:	18fb      	adds	r3, r7, r3
   111a8:	681b      	ldr	r3, [r3, #0]
   111aa:	0011      	movs	r1, r2
   111ac:	0018      	movs	r0, r3
   111ae:	4b1d      	ldr	r3, [pc, #116]	; (11224 <atcab_genkey_base+0xe4>)
   111b0:	4798      	blx	r3
   111b2:	0003      	movs	r3, r0
   111b4:	7023      	strb	r3, [r4, #0]
   111b6:	23a7      	movs	r3, #167	; 0xa7
   111b8:	18fb      	adds	r3, r7, r3
   111ba:	781b      	ldrb	r3, [r3, #0]
   111bc:	2b00      	cmp	r3, #0
   111be:	d122      	bne.n	11206 <atcab_genkey_base+0xc6>
        {
            break;
        }

        if ((status = atcab_execute_command(&packet)) != ATCA_SUCCESS)
   111c0:	23a7      	movs	r3, #167	; 0xa7
   111c2:	18fc      	adds	r4, r7, r3
   111c4:	2314      	movs	r3, #20
   111c6:	18fb      	adds	r3, r7, r3
   111c8:	0018      	movs	r0, r3
   111ca:	4b17      	ldr	r3, [pc, #92]	; (11228 <atcab_genkey_base+0xe8>)
   111cc:	4798      	blx	r3
   111ce:	0003      	movs	r3, r0
   111d0:	7023      	strb	r3, [r4, #0]
   111d2:	23a7      	movs	r3, #167	; 0xa7
   111d4:	18fb      	adds	r3, r7, r3
   111d6:	781b      	ldrb	r3, [r3, #0]
   111d8:	2b00      	cmp	r3, #0
   111da:	d116      	bne.n	1120a <atcab_genkey_base+0xca>
        {
            break;
        }

        if (public_key && packet.data[ATCA_COUNT_IDX] > 4)
   111dc:	687b      	ldr	r3, [r7, #4]
   111de:	2b00      	cmp	r3, #0
   111e0:	d014      	beq.n	1120c <atcab_genkey_base+0xcc>
   111e2:	2314      	movs	r3, #20
   111e4:	18fb      	adds	r3, r7, r3
   111e6:	799b      	ldrb	r3, [r3, #6]
   111e8:	2b04      	cmp	r3, #4
   111ea:	d90f      	bls.n	1120c <atcab_genkey_base+0xcc>
        {
            memcpy(public_key, &packet.data[ATCA_RSP_DATA_IDX], packet.data[ATCA_COUNT_IDX] - 3);
   111ec:	2314      	movs	r3, #20
   111ee:	18fb      	adds	r3, r7, r3
   111f0:	799b      	ldrb	r3, [r3, #6]
   111f2:	3b03      	subs	r3, #3
   111f4:	001a      	movs	r2, r3
   111f6:	2314      	movs	r3, #20
   111f8:	18fb      	adds	r3, r7, r3
   111fa:	1dd9      	adds	r1, r3, #7
   111fc:	687b      	ldr	r3, [r7, #4]
   111fe:	0018      	movs	r0, r3
   11200:	4b07      	ldr	r3, [pc, #28]	; (11220 <atcab_genkey_base+0xe0>)
   11202:	4798      	blx	r3
   11204:	e002      	b.n	1120c <atcab_genkey_base+0xcc>
            break;
   11206:	46c0      	nop			; (mov r8, r8)
   11208:	e000      	b.n	1120c <atcab_genkey_base+0xcc>
            break;
   1120a:	46c0      	nop			; (mov r8, r8)
        }
    }
    while (0);

    return status;
   1120c:	23a7      	movs	r3, #167	; 0xa7
   1120e:	18fb      	adds	r3, r7, r3
   11210:	781b      	ldrb	r3, [r3, #0]
}
   11212:	0018      	movs	r0, r3
   11214:	46bd      	mov	sp, r7
   11216:	b02b      	add	sp, #172	; 0xac
   11218:	bd90      	pop	{r4, r7, pc}
   1121a:	46c0      	nop			; (mov r8, r8)
   1121c:	20000590 	.word	0x20000590
   11220:	0001c13d 	.word	0x0001c13d
   11224:	0000f5b9 	.word	0x0000f5b9
   11228:	000101cd 	.word	0x000101cd

0001122c <atcab_get_pubkey>:
 *                          isn't required.
 *
 *  \return ATCA_SUCCESS on success, otherwise an error code.
 */
ATCA_STATUS atcab_get_pubkey(uint16_t key_id, uint8_t *public_key)
{
   1122c:	b590      	push	{r4, r7, lr}
   1122e:	b083      	sub	sp, #12
   11230:	af00      	add	r7, sp, #0
   11232:	0002      	movs	r2, r0
   11234:	6039      	str	r1, [r7, #0]
   11236:	1dbb      	adds	r3, r7, #6
   11238:	801a      	strh	r2, [r3, #0]
    return atcab_genkey_base(GENKEY_MODE_PUBLIC, key_id, NULL, public_key);
   1123a:	683a      	ldr	r2, [r7, #0]
   1123c:	1dbb      	adds	r3, r7, #6
   1123e:	8819      	ldrh	r1, [r3, #0]
   11240:	0013      	movs	r3, r2
   11242:	2200      	movs	r2, #0
   11244:	2000      	movs	r0, #0
   11246:	4c03      	ldr	r4, [pc, #12]	; (11254 <atcab_get_pubkey+0x28>)
   11248:	47a0      	blx	r4
   1124a:	0003      	movs	r3, r0
   1124c:	0018      	movs	r0, r3
   1124e:	46bd      	mov	sp, r7
   11250:	b003      	add	sp, #12
   11252:	bd90      	pop	{r4, r7, pc}
   11254:	00011141 	.word	0x00011141

00011258 <atcab_info_base>:
 * \param[out] out_data  Response from info command (4 bytes). Can be set to
 *                       NULL if not required.
 * \return ATCA_SUCCESS on success, otherwise an error code.
 */
ATCA_STATUS atcab_info_base(uint8_t mode, uint16_t param2, uint8_t* out_data)
{
   11258:	b590      	push	{r4, r7, lr}
   1125a:	b0a9      	sub	sp, #164	; 0xa4
   1125c:	af00      	add	r7, sp, #0
   1125e:	603a      	str	r2, [r7, #0]
   11260:	1dfb      	adds	r3, r7, #7
   11262:	1c02      	adds	r2, r0, #0
   11264:	701a      	strb	r2, [r3, #0]
   11266:	1d3b      	adds	r3, r7, #4
   11268:	1c0a      	adds	r2, r1, #0
   1126a:	801a      	strh	r2, [r3, #0]
    ATCAPacket packet;
    ATCACommand ca_cmd = _gDevice->mCommands;
   1126c:	4b27      	ldr	r3, [pc, #156]	; (1130c <atcab_info_base+0xb4>)
   1126e:	681b      	ldr	r3, [r3, #0]
   11270:	681b      	ldr	r3, [r3, #0]
   11272:	2298      	movs	r2, #152	; 0x98
   11274:	18ba      	adds	r2, r7, r2
   11276:	6013      	str	r3, [r2, #0]
    ATCA_STATUS status = ATCA_GEN_FAIL;
   11278:	239f      	movs	r3, #159	; 0x9f
   1127a:	18fb      	adds	r3, r7, r3
   1127c:	22e1      	movs	r2, #225	; 0xe1
   1127e:	701a      	strb	r2, [r3, #0]

    // build an info command
    packet.param1 = mode;
   11280:	230c      	movs	r3, #12
   11282:	18fb      	adds	r3, r7, r3
   11284:	1dfa      	adds	r2, r7, #7
   11286:	7812      	ldrb	r2, [r2, #0]
   11288:	70da      	strb	r2, [r3, #3]
    packet.param2 = param2;
   1128a:	230c      	movs	r3, #12
   1128c:	18fb      	adds	r3, r7, r3
   1128e:	1d3a      	adds	r2, r7, #4
   11290:	8812      	ldrh	r2, [r2, #0]
   11292:	809a      	strh	r2, [r3, #4]

    do
    {

        if ((status = atInfo(ca_cmd, &packet)) != ATCA_SUCCESS)
   11294:	239f      	movs	r3, #159	; 0x9f
   11296:	18fc      	adds	r4, r7, r3
   11298:	230c      	movs	r3, #12
   1129a:	18fa      	adds	r2, r7, r3
   1129c:	2398      	movs	r3, #152	; 0x98
   1129e:	18fb      	adds	r3, r7, r3
   112a0:	681b      	ldr	r3, [r3, #0]
   112a2:	0011      	movs	r1, r2
   112a4:	0018      	movs	r0, r3
   112a6:	4b1a      	ldr	r3, [pc, #104]	; (11310 <atcab_info_base+0xb8>)
   112a8:	4798      	blx	r3
   112aa:	0003      	movs	r3, r0
   112ac:	7023      	strb	r3, [r4, #0]
   112ae:	239f      	movs	r3, #159	; 0x9f
   112b0:	18fb      	adds	r3, r7, r3
   112b2:	781b      	ldrb	r3, [r3, #0]
   112b4:	2b00      	cmp	r3, #0
   112b6:	d11f      	bne.n	112f8 <atcab_info_base+0xa0>
        {
            break;
        }

        if ((status = atcab_execute_command(&packet)) != ATCA_SUCCESS)
   112b8:	239f      	movs	r3, #159	; 0x9f
   112ba:	18fc      	adds	r4, r7, r3
   112bc:	230c      	movs	r3, #12
   112be:	18fb      	adds	r3, r7, r3
   112c0:	0018      	movs	r0, r3
   112c2:	4b14      	ldr	r3, [pc, #80]	; (11314 <atcab_info_base+0xbc>)
   112c4:	4798      	blx	r3
   112c6:	0003      	movs	r3, r0
   112c8:	7023      	strb	r3, [r4, #0]
   112ca:	239f      	movs	r3, #159	; 0x9f
   112cc:	18fb      	adds	r3, r7, r3
   112ce:	781b      	ldrb	r3, [r3, #0]
   112d0:	2b00      	cmp	r3, #0
   112d2:	d113      	bne.n	112fc <atcab_info_base+0xa4>
        {
            break;
        }

        if (out_data != NULL && packet.rxsize >= 7)
   112d4:	683b      	ldr	r3, [r7, #0]
   112d6:	2b00      	cmp	r3, #0
   112d8:	d011      	beq.n	112fe <atcab_info_base+0xa6>
   112da:	230c      	movs	r3, #12
   112dc:	18fb      	adds	r3, r7, r3
   112de:	228a      	movs	r2, #138	; 0x8a
   112e0:	5a9b      	ldrh	r3, [r3, r2]
   112e2:	2b06      	cmp	r3, #6
   112e4:	d90b      	bls.n	112fe <atcab_info_base+0xa6>
        {
            memcpy(out_data, &packet.data[ATCA_RSP_DATA_IDX], 4);
   112e6:	230c      	movs	r3, #12
   112e8:	18fb      	adds	r3, r7, r3
   112ea:	1dd9      	adds	r1, r3, #7
   112ec:	683b      	ldr	r3, [r7, #0]
   112ee:	2204      	movs	r2, #4
   112f0:	0018      	movs	r0, r3
   112f2:	4b09      	ldr	r3, [pc, #36]	; (11318 <atcab_info_base+0xc0>)
   112f4:	4798      	blx	r3
   112f6:	e002      	b.n	112fe <atcab_info_base+0xa6>
            break;
   112f8:	46c0      	nop			; (mov r8, r8)
   112fa:	e000      	b.n	112fe <atcab_info_base+0xa6>
            break;
   112fc:	46c0      	nop			; (mov r8, r8)
        }
    }
    while (0);

    return status;
   112fe:	239f      	movs	r3, #159	; 0x9f
   11300:	18fb      	adds	r3, r7, r3
   11302:	781b      	ldrb	r3, [r3, #0]
}
   11304:	0018      	movs	r0, r3
   11306:	46bd      	mov	sp, r7
   11308:	b029      	add	sp, #164	; 0xa4
   1130a:	bd90      	pop	{r4, r7, pc}
   1130c:	20000590 	.word	0x20000590
   11310:	0000f609 	.word	0x0000f609
   11314:	000101cd 	.word	0x000101cd
   11318:	0001c13d 	.word	0x0001c13d

0001131c <atcab_info>:
/** \brief Use the Info command to get the device revision (DevRev).
 *  \param[out] revision  Device revision is returned here (4 bytes).
 *  \return ATCA_SUCCESS on success, otherwise an error code.
 */
ATCA_STATUS atcab_info(uint8_t* revision)
{
   1131c:	b580      	push	{r7, lr}
   1131e:	b082      	sub	sp, #8
   11320:	af00      	add	r7, sp, #0
   11322:	6078      	str	r0, [r7, #4]
    if (revision == NULL)
   11324:	687b      	ldr	r3, [r7, #4]
   11326:	2b00      	cmp	r3, #0
   11328:	d101      	bne.n	1132e <atcab_info+0x12>
    {
        return ATCA_BAD_PARAM;
   1132a:	23e2      	movs	r3, #226	; 0xe2
   1132c:	e006      	b.n	1133c <atcab_info+0x20>
    }

    return atcab_info_base(INFO_MODE_REVISION, 0, revision);
   1132e:	687b      	ldr	r3, [r7, #4]
   11330:	001a      	movs	r2, r3
   11332:	2100      	movs	r1, #0
   11334:	2000      	movs	r0, #0
   11336:	4b03      	ldr	r3, [pc, #12]	; (11344 <atcab_info+0x28>)
   11338:	4798      	blx	r3
   1133a:	0003      	movs	r3, r0
}
   1133c:	0018      	movs	r0, r3
   1133e:	46bd      	mov	sp, r7
   11340:	b002      	add	sp, #8
   11342:	bd80      	pop	{r7, pc}
   11344:	00011259 	.word	0x00011259

00011348 <atcab_nonce_base>:
 *                          needed.
 *
 * \return ATCA_SUCCESS on success, otherwise an error code.
 */
ATCA_STATUS atcab_nonce_base(uint8_t mode, uint16_t zero, const uint8_t *num_in, uint8_t* rand_out)
{
   11348:	b590      	push	{r4, r7, lr}
   1134a:	b0ab      	sub	sp, #172	; 0xac
   1134c:	af00      	add	r7, sp, #0
   1134e:	60ba      	str	r2, [r7, #8]
   11350:	607b      	str	r3, [r7, #4]
   11352:	230f      	movs	r3, #15
   11354:	18fb      	adds	r3, r7, r3
   11356:	1c02      	adds	r2, r0, #0
   11358:	701a      	strb	r2, [r3, #0]
   1135a:	230c      	movs	r3, #12
   1135c:	18fb      	adds	r3, r7, r3
   1135e:	1c0a      	adds	r2, r1, #0
   11360:	801a      	strh	r2, [r3, #0]
    ATCAPacket packet;
    ATCACommand ca_cmd = _gDevice->mCommands;
   11362:	4b46      	ldr	r3, [pc, #280]	; (1147c <atcab_nonce_base+0x134>)
   11364:	681b      	ldr	r3, [r3, #0]
   11366:	681b      	ldr	r3, [r3, #0]
   11368:	22a0      	movs	r2, #160	; 0xa0
   1136a:	18ba      	adds	r2, r7, r2
   1136c:	6013      	str	r3, [r2, #0]
    ATCA_STATUS status = ATCA_GEN_FAIL;
   1136e:	23a7      	movs	r3, #167	; 0xa7
   11370:	18fb      	adds	r3, r7, r3
   11372:	22e1      	movs	r2, #225	; 0xe1
   11374:	701a      	strb	r2, [r3, #0]
    uint8_t nonce_mode = mode & NONCE_MODE_MASK;
   11376:	239f      	movs	r3, #159	; 0x9f
   11378:	18fb      	adds	r3, r7, r3
   1137a:	220f      	movs	r2, #15
   1137c:	18ba      	adds	r2, r7, r2
   1137e:	7812      	ldrb	r2, [r2, #0]
   11380:	2103      	movs	r1, #3
   11382:	400a      	ands	r2, r1
   11384:	701a      	strb	r2, [r3, #0]

    do
    {
        // build a nonce command
        packet.param1 = mode;
   11386:	2310      	movs	r3, #16
   11388:	18fb      	adds	r3, r7, r3
   1138a:	220f      	movs	r2, #15
   1138c:	18ba      	adds	r2, r7, r2
   1138e:	7812      	ldrb	r2, [r2, #0]
   11390:	70da      	strb	r2, [r3, #3]
        packet.param2 = zero;
   11392:	2310      	movs	r3, #16
   11394:	18fb      	adds	r3, r7, r3
   11396:	220c      	movs	r2, #12
   11398:	18ba      	adds	r2, r7, r2
   1139a:	8812      	ldrh	r2, [r2, #0]
   1139c:	809a      	strh	r2, [r3, #4]

        // Copy the right amount of NumIn data
        if ((nonce_mode == NONCE_MODE_SEED_UPDATE || nonce_mode == NONCE_MODE_NO_SEED_UPDATE))
   1139e:	239f      	movs	r3, #159	; 0x9f
   113a0:	18fb      	adds	r3, r7, r3
   113a2:	781b      	ldrb	r3, [r3, #0]
   113a4:	2b00      	cmp	r3, #0
   113a6:	d004      	beq.n	113b2 <atcab_nonce_base+0x6a>
   113a8:	239f      	movs	r3, #159	; 0x9f
   113aa:	18fb      	adds	r3, r7, r3
   113ac:	781b      	ldrb	r3, [r3, #0]
   113ae:	2b01      	cmp	r3, #1
   113b0:	d108      	bne.n	113c4 <atcab_nonce_base+0x7c>
        {
            memcpy(packet.data, num_in, NONCE_NUMIN_SIZE);
   113b2:	68b9      	ldr	r1, [r7, #8]
   113b4:	2310      	movs	r3, #16
   113b6:	18fb      	adds	r3, r7, r3
   113b8:	3306      	adds	r3, #6
   113ba:	2214      	movs	r2, #20
   113bc:	0018      	movs	r0, r3
   113be:	4b30      	ldr	r3, [pc, #192]	; (11480 <atcab_nonce_base+0x138>)
   113c0:	4798      	blx	r3
   113c2:	e01e      	b.n	11402 <atcab_nonce_base+0xba>
        }
        else if (nonce_mode == NONCE_MODE_PASSTHROUGH)
   113c4:	239f      	movs	r3, #159	; 0x9f
   113c6:	18fb      	adds	r3, r7, r3
   113c8:	781b      	ldrb	r3, [r3, #0]
   113ca:	2b03      	cmp	r3, #3
   113cc:	d117      	bne.n	113fe <atcab_nonce_base+0xb6>
        {
            if ((mode & NONCE_MODE_INPUT_LEN_MASK) == NONCE_MODE_INPUT_LEN_64)
   113ce:	230f      	movs	r3, #15
   113d0:	18fb      	adds	r3, r7, r3
   113d2:	781b      	ldrb	r3, [r3, #0]
   113d4:	2220      	movs	r2, #32
   113d6:	4013      	ands	r3, r2
   113d8:	d008      	beq.n	113ec <atcab_nonce_base+0xa4>
            {
                memcpy(packet.data, num_in, 64);
   113da:	68b9      	ldr	r1, [r7, #8]
   113dc:	2310      	movs	r3, #16
   113de:	18fb      	adds	r3, r7, r3
   113e0:	3306      	adds	r3, #6
   113e2:	2240      	movs	r2, #64	; 0x40
   113e4:	0018      	movs	r0, r3
   113e6:	4b26      	ldr	r3, [pc, #152]	; (11480 <atcab_nonce_base+0x138>)
   113e8:	4798      	blx	r3
   113ea:	e00a      	b.n	11402 <atcab_nonce_base+0xba>
            }
            else
            {
                memcpy(packet.data, num_in, 32);
   113ec:	68b9      	ldr	r1, [r7, #8]
   113ee:	2310      	movs	r3, #16
   113f0:	18fb      	adds	r3, r7, r3
   113f2:	3306      	adds	r3, #6
   113f4:	2220      	movs	r2, #32
   113f6:	0018      	movs	r0, r3
   113f8:	4b21      	ldr	r3, [pc, #132]	; (11480 <atcab_nonce_base+0x138>)
   113fa:	4798      	blx	r3
   113fc:	e001      	b.n	11402 <atcab_nonce_base+0xba>
            }
        }
        else
        {
            return ATCA_BAD_PARAM;
   113fe:	23e2      	movs	r3, #226	; 0xe2
   11400:	e037      	b.n	11472 <atcab_nonce_base+0x12a>
        }

        if ((status = atNonce(ca_cmd, &packet)) != ATCA_SUCCESS)
   11402:	23a7      	movs	r3, #167	; 0xa7
   11404:	18fc      	adds	r4, r7, r3
   11406:	2310      	movs	r3, #16
   11408:	18fa      	adds	r2, r7, r3
   1140a:	23a0      	movs	r3, #160	; 0xa0
   1140c:	18fb      	adds	r3, r7, r3
   1140e:	681b      	ldr	r3, [r3, #0]
   11410:	0011      	movs	r1, r2
   11412:	0018      	movs	r0, r3
   11414:	4b1b      	ldr	r3, [pc, #108]	; (11484 <atcab_nonce_base+0x13c>)
   11416:	4798      	blx	r3
   11418:	0003      	movs	r3, r0
   1141a:	7023      	strb	r3, [r4, #0]
   1141c:	23a7      	movs	r3, #167	; 0xa7
   1141e:	18fb      	adds	r3, r7, r3
   11420:	781b      	ldrb	r3, [r3, #0]
   11422:	2b00      	cmp	r3, #0
   11424:	d11f      	bne.n	11466 <atcab_nonce_base+0x11e>
        {
            break;
        }

        if ((status = atcab_execute_command(&packet)) != ATCA_SUCCESS)
   11426:	23a7      	movs	r3, #167	; 0xa7
   11428:	18fc      	adds	r4, r7, r3
   1142a:	2310      	movs	r3, #16
   1142c:	18fb      	adds	r3, r7, r3
   1142e:	0018      	movs	r0, r3
   11430:	4b15      	ldr	r3, [pc, #84]	; (11488 <atcab_nonce_base+0x140>)
   11432:	4798      	blx	r3
   11434:	0003      	movs	r3, r0
   11436:	7023      	strb	r3, [r4, #0]
   11438:	23a7      	movs	r3, #167	; 0xa7
   1143a:	18fb      	adds	r3, r7, r3
   1143c:	781b      	ldrb	r3, [r3, #0]
   1143e:	2b00      	cmp	r3, #0
   11440:	d113      	bne.n	1146a <atcab_nonce_base+0x122>
        {
            break;
        }

        if ((rand_out != NULL) && (packet.rxsize >= 35))
   11442:	687b      	ldr	r3, [r7, #4]
   11444:	2b00      	cmp	r3, #0
   11446:	d011      	beq.n	1146c <atcab_nonce_base+0x124>
   11448:	2310      	movs	r3, #16
   1144a:	18fb      	adds	r3, r7, r3
   1144c:	228a      	movs	r2, #138	; 0x8a
   1144e:	5a9b      	ldrh	r3, [r3, r2]
   11450:	2b22      	cmp	r3, #34	; 0x22
   11452:	d90b      	bls.n	1146c <atcab_nonce_base+0x124>
        {
            memcpy(&rand_out[0], &packet.data[ATCA_RSP_DATA_IDX], 32);
   11454:	2310      	movs	r3, #16
   11456:	18fb      	adds	r3, r7, r3
   11458:	1dd9      	adds	r1, r3, #7
   1145a:	687b      	ldr	r3, [r7, #4]
   1145c:	2220      	movs	r2, #32
   1145e:	0018      	movs	r0, r3
   11460:	4b07      	ldr	r3, [pc, #28]	; (11480 <atcab_nonce_base+0x138>)
   11462:	4798      	blx	r3
   11464:	e002      	b.n	1146c <atcab_nonce_base+0x124>
            break;
   11466:	46c0      	nop			; (mov r8, r8)
   11468:	e000      	b.n	1146c <atcab_nonce_base+0x124>
            break;
   1146a:	46c0      	nop			; (mov r8, r8)
        }

    }
    while (0);

    return status;
   1146c:	23a7      	movs	r3, #167	; 0xa7
   1146e:	18fb      	adds	r3, r7, r3
   11470:	781b      	ldrb	r3, [r3, #0]
}
   11472:	0018      	movs	r0, r3
   11474:	46bd      	mov	sp, r7
   11476:	b02b      	add	sp, #172	; 0xac
   11478:	bd90      	pop	{r4, r7, pc}
   1147a:	46c0      	nop			; (mov r8, r8)
   1147c:	20000590 	.word	0x20000590
   11480:	0001c13d 	.word	0x0001c13d
   11484:	0000f63d 	.word	0x0000f63d
   11488:	000101cd 	.word	0x000101cd

0001148c <atcab_nonce_load>:
 *                          depending on device and target.
 *
 *  \return ATCA_SUCCESS on success, otherwise an error code.
 */
ATCA_STATUS atcab_nonce_load(uint8_t target, const uint8_t *num_in, uint16_t num_in_size)
{
   1148c:	b590      	push	{r4, r7, lr}
   1148e:	b085      	sub	sp, #20
   11490:	af00      	add	r7, sp, #0
   11492:	6039      	str	r1, [r7, #0]
   11494:	0011      	movs	r1, r2
   11496:	1dfb      	adds	r3, r7, #7
   11498:	1c02      	adds	r2, r0, #0
   1149a:	701a      	strb	r2, [r3, #0]
   1149c:	1d3b      	adds	r3, r7, #4
   1149e:	1c0a      	adds	r2, r1, #0
   114a0:	801a      	strh	r2, [r3, #0]
    uint8_t mode = NONCE_MODE_PASSTHROUGH | (NONCE_MODE_TARGET_MASK & target);
   114a2:	1dfb      	adds	r3, r7, #7
   114a4:	781b      	ldrb	r3, [r3, #0]
   114a6:	223f      	movs	r2, #63	; 0x3f
   114a8:	4393      	bics	r3, r2
   114aa:	b2da      	uxtb	r2, r3
   114ac:	230f      	movs	r3, #15
   114ae:	18fb      	adds	r3, r7, r3
   114b0:	2103      	movs	r1, #3
   114b2:	430a      	orrs	r2, r1
   114b4:	701a      	strb	r2, [r3, #0]

    if (num_in_size == 32)
   114b6:	1d3b      	adds	r3, r7, #4
   114b8:	881b      	ldrh	r3, [r3, #0]
   114ba:	2b20      	cmp	r3, #32
   114bc:	d106      	bne.n	114cc <atcab_nonce_load+0x40>
    {
        mode |= NONCE_MODE_INPUT_LEN_32;
   114be:	230f      	movs	r3, #15
   114c0:	18fb      	adds	r3, r7, r3
   114c2:	220f      	movs	r2, #15
   114c4:	18ba      	adds	r2, r7, r2
   114c6:	7812      	ldrb	r2, [r2, #0]
   114c8:	701a      	strb	r2, [r3, #0]
   114ca:	e00e      	b.n	114ea <atcab_nonce_load+0x5e>
    }
    else if (num_in_size == 64)
   114cc:	1d3b      	adds	r3, r7, #4
   114ce:	881b      	ldrh	r3, [r3, #0]
   114d0:	2b40      	cmp	r3, #64	; 0x40
   114d2:	d108      	bne.n	114e6 <atcab_nonce_load+0x5a>
    {
        mode |= NONCE_MODE_INPUT_LEN_64;
   114d4:	230f      	movs	r3, #15
   114d6:	18fb      	adds	r3, r7, r3
   114d8:	220f      	movs	r2, #15
   114da:	18ba      	adds	r2, r7, r2
   114dc:	7812      	ldrb	r2, [r2, #0]
   114de:	2120      	movs	r1, #32
   114e0:	430a      	orrs	r2, r1
   114e2:	701a      	strb	r2, [r3, #0]
   114e4:	e001      	b.n	114ea <atcab_nonce_load+0x5e>
    }
    else
    {
        return ATCA_BAD_PARAM;
   114e6:	23e2      	movs	r3, #226	; 0xe2
   114e8:	e008      	b.n	114fc <atcab_nonce_load+0x70>
    }

    return atcab_nonce_base(mode, 0, num_in, NULL);
   114ea:	683a      	ldr	r2, [r7, #0]
   114ec:	230f      	movs	r3, #15
   114ee:	18fb      	adds	r3, r7, r3
   114f0:	7818      	ldrb	r0, [r3, #0]
   114f2:	2300      	movs	r3, #0
   114f4:	2100      	movs	r1, #0
   114f6:	4c03      	ldr	r4, [pc, #12]	; (11504 <atcab_nonce_load+0x78>)
   114f8:	47a0      	blx	r4
   114fa:	0003      	movs	r3, r0
}
   114fc:	0018      	movs	r0, r3
   114fe:	46bd      	mov	sp, r7
   11500:	b005      	add	sp, #20
   11502:	bd90      	pop	{r4, r7, pc}
   11504:	00011349 	.word	0x00011349

00011508 <atcab_random>:
 * \param[out] rand_out  32 bytes of random data is returned here.
 *
 * \return ATCA_SUCCESS on success, otherwise an error code.
 */
ATCA_STATUS atcab_random(uint8_t *rand_out)
{
   11508:	b590      	push	{r4, r7, lr}
   1150a:	b0a9      	sub	sp, #164	; 0xa4
   1150c:	af00      	add	r7, sp, #0
   1150e:	6078      	str	r0, [r7, #4]
    ATCAPacket packet;
    ATCACommand ca_cmd = _gDevice->mCommands;
   11510:	4b2d      	ldr	r3, [pc, #180]	; (115c8 <atcab_random+0xc0>)
   11512:	681b      	ldr	r3, [r3, #0]
   11514:	681b      	ldr	r3, [r3, #0]
   11516:	2298      	movs	r2, #152	; 0x98
   11518:	18ba      	adds	r2, r7, r2
   1151a:	6013      	str	r3, [r2, #0]
    ATCA_STATUS status = ATCA_GEN_FAIL;
   1151c:	239f      	movs	r3, #159	; 0x9f
   1151e:	18fb      	adds	r3, r7, r3
   11520:	22e1      	movs	r2, #225	; 0xe1
   11522:	701a      	strb	r2, [r3, #0]

    do
    {
        // build an random command
        packet.param1 = RANDOM_SEED_UPDATE;
   11524:	230c      	movs	r3, #12
   11526:	18fb      	adds	r3, r7, r3
   11528:	2200      	movs	r2, #0
   1152a:	70da      	strb	r2, [r3, #3]
        packet.param2 = 0x0000;
   1152c:	230c      	movs	r3, #12
   1152e:	18fb      	adds	r3, r7, r3
   11530:	2200      	movs	r2, #0
   11532:	809a      	strh	r2, [r3, #4]

        if ((status = atRandom(ca_cmd, &packet)) != ATCA_SUCCESS)
   11534:	239f      	movs	r3, #159	; 0x9f
   11536:	18fc      	adds	r4, r7, r3
   11538:	230c      	movs	r3, #12
   1153a:	18fa      	adds	r2, r7, r3
   1153c:	2398      	movs	r3, #152	; 0x98
   1153e:	18fb      	adds	r3, r7, r3
   11540:	681b      	ldr	r3, [r3, #0]
   11542:	0011      	movs	r1, r2
   11544:	0018      	movs	r0, r3
   11546:	4b21      	ldr	r3, [pc, #132]	; (115cc <atcab_random+0xc4>)
   11548:	4798      	blx	r3
   1154a:	0003      	movs	r3, r0
   1154c:	7023      	strb	r3, [r4, #0]
   1154e:	239f      	movs	r3, #159	; 0x9f
   11550:	18fb      	adds	r3, r7, r3
   11552:	781b      	ldrb	r3, [r3, #0]
   11554:	2b00      	cmp	r3, #0
   11556:	d12d      	bne.n	115b4 <atcab_random+0xac>
        {
            break;
        }

        if ((status = atcab_execute_command(&packet)) != ATCA_SUCCESS)
   11558:	239f      	movs	r3, #159	; 0x9f
   1155a:	18fc      	adds	r4, r7, r3
   1155c:	230c      	movs	r3, #12
   1155e:	18fb      	adds	r3, r7, r3
   11560:	0018      	movs	r0, r3
   11562:	4b1b      	ldr	r3, [pc, #108]	; (115d0 <atcab_random+0xc8>)
   11564:	4798      	blx	r3
   11566:	0003      	movs	r3, r0
   11568:	7023      	strb	r3, [r4, #0]
   1156a:	239f      	movs	r3, #159	; 0x9f
   1156c:	18fb      	adds	r3, r7, r3
   1156e:	781b      	ldrb	r3, [r3, #0]
   11570:	2b00      	cmp	r3, #0
   11572:	d121      	bne.n	115b8 <atcab_random+0xb0>
        {
            break;
        }

        if (packet.rxsize < packet.data[ATCA_COUNT_IDX] || packet.data[ATCA_COUNT_IDX] != RANDOM_RSP_SIZE)
   11574:	230c      	movs	r3, #12
   11576:	18fb      	adds	r3, r7, r3
   11578:	228a      	movs	r2, #138	; 0x8a
   1157a:	5a9a      	ldrh	r2, [r3, r2]
   1157c:	230c      	movs	r3, #12
   1157e:	18fb      	adds	r3, r7, r3
   11580:	799b      	ldrb	r3, [r3, #6]
   11582:	b29b      	uxth	r3, r3
   11584:	429a      	cmp	r2, r3
   11586:	d304      	bcc.n	11592 <atcab_random+0x8a>
   11588:	230c      	movs	r3, #12
   1158a:	18fb      	adds	r3, r7, r3
   1158c:	799b      	ldrb	r3, [r3, #6]
   1158e:	2b23      	cmp	r3, #35	; 0x23
   11590:	d004      	beq.n	1159c <atcab_random+0x94>
        {
            status = ATCA_RX_FAIL;
   11592:	239f      	movs	r3, #159	; 0x9f
   11594:	18fb      	adds	r3, r7, r3
   11596:	22e6      	movs	r2, #230	; 0xe6
   11598:	701a      	strb	r2, [r3, #0]
            break;
   1159a:	e00e      	b.n	115ba <atcab_random+0xb2>
        }

        if (rand_out)
   1159c:	687b      	ldr	r3, [r7, #4]
   1159e:	2b00      	cmp	r3, #0
   115a0:	d00b      	beq.n	115ba <atcab_random+0xb2>
        {
            memcpy(rand_out, &packet.data[ATCA_RSP_DATA_IDX], RANDOM_NUM_SIZE);
   115a2:	230c      	movs	r3, #12
   115a4:	18fb      	adds	r3, r7, r3
   115a6:	1dd9      	adds	r1, r3, #7
   115a8:	687b      	ldr	r3, [r7, #4]
   115aa:	2220      	movs	r2, #32
   115ac:	0018      	movs	r0, r3
   115ae:	4b09      	ldr	r3, [pc, #36]	; (115d4 <atcab_random+0xcc>)
   115b0:	4798      	blx	r3
   115b2:	e002      	b.n	115ba <atcab_random+0xb2>
            break;
   115b4:	46c0      	nop			; (mov r8, r8)
   115b6:	e000      	b.n	115ba <atcab_random+0xb2>
            break;
   115b8:	46c0      	nop			; (mov r8, r8)
        }
    }
    while (0);


    return status;
   115ba:	239f      	movs	r3, #159	; 0x9f
   115bc:	18fb      	adds	r3, r7, r3
   115be:	781b      	ldrb	r3, [r3, #0]
}
   115c0:	0018      	movs	r0, r3
   115c2:	46bd      	mov	sp, r7
   115c4:	b029      	add	sp, #164	; 0xa4
   115c6:	bd90      	pop	{r4, r7, pc}
   115c8:	20000590 	.word	0x20000590
   115cc:	0000f6c9 	.word	0x0000f6c9
   115d0:	000101cd 	.word	0x000101cd
   115d4:	0001c13d 	.word	0x0001c13d

000115d8 <atcab_read_zone>:
 *  \param[in]  len     Length of the data to be read. Must be either 4 or 32.
 *
 *  returns ATCA_SUCCESS on success, otherwise an error code.
 */
ATCA_STATUS atcab_read_zone(uint8_t zone, uint16_t slot, uint8_t block, uint8_t offset, uint8_t *data, uint8_t len)
{
   115d8:	b5b0      	push	{r4, r5, r7, lr}
   115da:	b0aa      	sub	sp, #168	; 0xa8
   115dc:	af02      	add	r7, sp, #8
   115de:	0005      	movs	r5, r0
   115e0:	000c      	movs	r4, r1
   115e2:	0010      	movs	r0, r2
   115e4:	0019      	movs	r1, r3
   115e6:	1dfb      	adds	r3, r7, #7
   115e8:	1c2a      	adds	r2, r5, #0
   115ea:	701a      	strb	r2, [r3, #0]
   115ec:	1d3b      	adds	r3, r7, #4
   115ee:	1c22      	adds	r2, r4, #0
   115f0:	801a      	strh	r2, [r3, #0]
   115f2:	1dbb      	adds	r3, r7, #6
   115f4:	1c02      	adds	r2, r0, #0
   115f6:	701a      	strb	r2, [r3, #0]
   115f8:	1cfb      	adds	r3, r7, #3
   115fa:	1c0a      	adds	r2, r1, #0
   115fc:	701a      	strb	r2, [r3, #0]
    ATCAPacket packet;
    ATCACommand ca_cmd = _gDevice->mCommands;
   115fe:	4b42      	ldr	r3, [pc, #264]	; (11708 <atcab_read_zone+0x130>)
   11600:	681b      	ldr	r3, [r3, #0]
   11602:	681b      	ldr	r3, [r3, #0]
   11604:	2298      	movs	r2, #152	; 0x98
   11606:	18ba      	adds	r2, r7, r2
   11608:	6013      	str	r3, [r2, #0]
    ATCA_STATUS status = ATCA_GEN_FAIL;
   1160a:	239f      	movs	r3, #159	; 0x9f
   1160c:	18fb      	adds	r3, r7, r3
   1160e:	22e1      	movs	r2, #225	; 0xe1
   11610:	701a      	strb	r2, [r3, #0]
    uint16_t addr;

    do
    {
        // Check the input parameters
        if (data == NULL)
   11612:	23b0      	movs	r3, #176	; 0xb0
   11614:	18fb      	adds	r3, r7, r3
   11616:	681b      	ldr	r3, [r3, #0]
   11618:	2b00      	cmp	r3, #0
   1161a:	d101      	bne.n	11620 <atcab_read_zone+0x48>
        {
            return ATCA_BAD_PARAM;
   1161c:	23e2      	movs	r3, #226	; 0xe2
   1161e:	e06e      	b.n	116fe <atcab_read_zone+0x126>
        }

        if (len != 4 && len != 32)
   11620:	23b4      	movs	r3, #180	; 0xb4
   11622:	18fb      	adds	r3, r7, r3
   11624:	781b      	ldrb	r3, [r3, #0]
   11626:	2b04      	cmp	r3, #4
   11628:	d006      	beq.n	11638 <atcab_read_zone+0x60>
   1162a:	23b4      	movs	r3, #180	; 0xb4
   1162c:	18fb      	adds	r3, r7, r3
   1162e:	781b      	ldrb	r3, [r3, #0]
   11630:	2b20      	cmp	r3, #32
   11632:	d001      	beq.n	11638 <atcab_read_zone+0x60>
        {
            return ATCA_BAD_PARAM;
   11634:	23e2      	movs	r3, #226	; 0xe2
   11636:	e062      	b.n	116fe <atcab_read_zone+0x126>
        }

        // The get address function checks the remaining variables
        if ((status = atcab_get_addr(zone, slot, block, offset, &addr)) != ATCA_SUCCESS)
   11638:	239f      	movs	r3, #159	; 0x9f
   1163a:	18fc      	adds	r4, r7, r3
   1163c:	1cfb      	adds	r3, r7, #3
   1163e:	781d      	ldrb	r5, [r3, #0]
   11640:	1dbb      	adds	r3, r7, #6
   11642:	781a      	ldrb	r2, [r3, #0]
   11644:	1d3b      	adds	r3, r7, #4
   11646:	8819      	ldrh	r1, [r3, #0]
   11648:	1dfb      	adds	r3, r7, #7
   1164a:	7818      	ldrb	r0, [r3, #0]
   1164c:	230a      	movs	r3, #10
   1164e:	18fb      	adds	r3, r7, r3
   11650:	9300      	str	r3, [sp, #0]
   11652:	002b      	movs	r3, r5
   11654:	4d2d      	ldr	r5, [pc, #180]	; (1170c <atcab_read_zone+0x134>)
   11656:	47a8      	blx	r5
   11658:	0003      	movs	r3, r0
   1165a:	7023      	strb	r3, [r4, #0]
   1165c:	239f      	movs	r3, #159	; 0x9f
   1165e:	18fb      	adds	r3, r7, r3
   11660:	781b      	ldrb	r3, [r3, #0]
   11662:	2b00      	cmp	r3, #0
   11664:	d143      	bne.n	116ee <atcab_read_zone+0x116>
        {
            break;
        }

        // If there are 32 bytes to read, then OR the bit into the mode
        if (len == ATCA_BLOCK_SIZE)
   11666:	23b4      	movs	r3, #180	; 0xb4
   11668:	18fb      	adds	r3, r7, r3
   1166a:	781b      	ldrb	r3, [r3, #0]
   1166c:	2b20      	cmp	r3, #32
   1166e:	d106      	bne.n	1167e <atcab_read_zone+0xa6>
        {
            zone = zone | ATCA_ZONE_READWRITE_32;
   11670:	1dfb      	adds	r3, r7, #7
   11672:	1dfa      	adds	r2, r7, #7
   11674:	7812      	ldrb	r2, [r2, #0]
   11676:	2180      	movs	r1, #128	; 0x80
   11678:	4249      	negs	r1, r1
   1167a:	430a      	orrs	r2, r1
   1167c:	701a      	strb	r2, [r3, #0]
        }

        // build a read command
        packet.param1 = zone;
   1167e:	230c      	movs	r3, #12
   11680:	18fb      	adds	r3, r7, r3
   11682:	1dfa      	adds	r2, r7, #7
   11684:	7812      	ldrb	r2, [r2, #0]
   11686:	70da      	strb	r2, [r3, #3]
        packet.param2 = addr;
   11688:	230a      	movs	r3, #10
   1168a:	18fb      	adds	r3, r7, r3
   1168c:	881a      	ldrh	r2, [r3, #0]
   1168e:	230c      	movs	r3, #12
   11690:	18fb      	adds	r3, r7, r3
   11692:	809a      	strh	r2, [r3, #4]

        if ((status = atRead(ca_cmd, &packet)) != ATCA_SUCCESS)
   11694:	239f      	movs	r3, #159	; 0x9f
   11696:	18fc      	adds	r4, r7, r3
   11698:	230c      	movs	r3, #12
   1169a:	18fa      	adds	r2, r7, r3
   1169c:	2398      	movs	r3, #152	; 0x98
   1169e:	18fb      	adds	r3, r7, r3
   116a0:	681b      	ldr	r3, [r3, #0]
   116a2:	0011      	movs	r1, r2
   116a4:	0018      	movs	r0, r3
   116a6:	4b1a      	ldr	r3, [pc, #104]	; (11710 <atcab_read_zone+0x138>)
   116a8:	4798      	blx	r3
   116aa:	0003      	movs	r3, r0
   116ac:	7023      	strb	r3, [r4, #0]
   116ae:	239f      	movs	r3, #159	; 0x9f
   116b0:	18fb      	adds	r3, r7, r3
   116b2:	781b      	ldrb	r3, [r3, #0]
   116b4:	2b00      	cmp	r3, #0
   116b6:	d11c      	bne.n	116f2 <atcab_read_zone+0x11a>
        {
            break;
        }

        if ((status = atcab_execute_command(&packet)) != ATCA_SUCCESS)
   116b8:	239f      	movs	r3, #159	; 0x9f
   116ba:	18fc      	adds	r4, r7, r3
   116bc:	230c      	movs	r3, #12
   116be:	18fb      	adds	r3, r7, r3
   116c0:	0018      	movs	r0, r3
   116c2:	4b14      	ldr	r3, [pc, #80]	; (11714 <atcab_read_zone+0x13c>)
   116c4:	4798      	blx	r3
   116c6:	0003      	movs	r3, r0
   116c8:	7023      	strb	r3, [r4, #0]
   116ca:	239f      	movs	r3, #159	; 0x9f
   116cc:	18fb      	adds	r3, r7, r3
   116ce:	781b      	ldrb	r3, [r3, #0]
   116d0:	2b00      	cmp	r3, #0
   116d2:	d110      	bne.n	116f6 <atcab_read_zone+0x11e>
        {
            break;
        }

        memcpy(data, &packet.data[1], len);
   116d4:	23b4      	movs	r3, #180	; 0xb4
   116d6:	18fb      	adds	r3, r7, r3
   116d8:	781a      	ldrb	r2, [r3, #0]
   116da:	230c      	movs	r3, #12
   116dc:	18fb      	adds	r3, r7, r3
   116de:	1dd9      	adds	r1, r3, #7
   116e0:	23b0      	movs	r3, #176	; 0xb0
   116e2:	18fb      	adds	r3, r7, r3
   116e4:	681b      	ldr	r3, [r3, #0]
   116e6:	0018      	movs	r0, r3
   116e8:	4b0b      	ldr	r3, [pc, #44]	; (11718 <atcab_read_zone+0x140>)
   116ea:	4798      	blx	r3
   116ec:	e004      	b.n	116f8 <atcab_read_zone+0x120>
            break;
   116ee:	46c0      	nop			; (mov r8, r8)
   116f0:	e002      	b.n	116f8 <atcab_read_zone+0x120>
            break;
   116f2:	46c0      	nop			; (mov r8, r8)
   116f4:	e000      	b.n	116f8 <atcab_read_zone+0x120>
            break;
   116f6:	46c0      	nop			; (mov r8, r8)
    }
    while (0);

    return status;
   116f8:	239f      	movs	r3, #159	; 0x9f
   116fa:	18fb      	adds	r3, r7, r3
   116fc:	781b      	ldrb	r3, [r3, #0]
}
   116fe:	0018      	movs	r0, r3
   11700:	46bd      	mov	sp, r7
   11702:	b028      	add	sp, #160	; 0xa0
   11704:	bdb0      	pop	{r4, r5, r7, pc}
   11706:	46c0      	nop			; (mov r8, r8)
   11708:	20000590 	.word	0x20000590
   1170c:	0000fff9 	.word	0x0000fff9
   11710:	0000f6fd 	.word	0x0000f6fd
   11714:	000101cd 	.word	0x000101cd
   11718:	0001c13d 	.word	0x0001c13d

0001171c <atcab_read_bytes_zone>:
 *  \param[in]  length  Number of bytes to read starting from the offset.
 *
 *  \return ATCA_SUCCESS on success, otherwise an error code.
 */
ATCA_STATUS atcab_read_bytes_zone(uint8_t zone, uint16_t slot, size_t offset, uint8_t *data, size_t length)
{
   1171c:	b5b0      	push	{r4, r5, r7, lr}
   1171e:	b098      	sub	sp, #96	; 0x60
   11720:	af02      	add	r7, sp, #8
   11722:	60ba      	str	r2, [r7, #8]
   11724:	607b      	str	r3, [r7, #4]
   11726:	230f      	movs	r3, #15
   11728:	18fb      	adds	r3, r7, r3
   1172a:	1c02      	adds	r2, r0, #0
   1172c:	701a      	strb	r2, [r3, #0]
   1172e:	230c      	movs	r3, #12
   11730:	18fb      	adds	r3, r7, r3
   11732:	1c0a      	adds	r2, r1, #0
   11734:	801a      	strh	r2, [r3, #0]
    ATCA_STATUS status = ATCA_GEN_FAIL;
   11736:	2357      	movs	r3, #87	; 0x57
   11738:	18fb      	adds	r3, r7, r3
   1173a:	22e1      	movs	r2, #225	; 0xe1
   1173c:	701a      	strb	r2, [r3, #0]
    size_t zone_size = 0;
   1173e:	2300      	movs	r3, #0
   11740:	637b      	str	r3, [r7, #52]	; 0x34
    uint8_t read_buf[32];
    size_t data_idx = 0;
   11742:	2300      	movs	r3, #0
   11744:	653b      	str	r3, [r7, #80]	; 0x50
    size_t cur_block = 0;
   11746:	2300      	movs	r3, #0
   11748:	64fb      	str	r3, [r7, #76]	; 0x4c
    size_t cur_offset = 0;
   1174a:	2300      	movs	r3, #0
   1174c:	64bb      	str	r3, [r7, #72]	; 0x48
    uint8_t read_size = ATCA_BLOCK_SIZE;
   1174e:	2347      	movs	r3, #71	; 0x47
   11750:	18fb      	adds	r3, r7, r3
   11752:	2220      	movs	r2, #32
   11754:	701a      	strb	r2, [r3, #0]
    size_t read_buf_idx = 0;
   11756:	2300      	movs	r3, #0
   11758:	643b      	str	r3, [r7, #64]	; 0x40
    size_t copy_length = 0;
   1175a:	2300      	movs	r3, #0
   1175c:	63fb      	str	r3, [r7, #60]	; 0x3c
    size_t read_offset = 0;
   1175e:	2300      	movs	r3, #0
   11760:	63bb      	str	r3, [r7, #56]	; 0x38

    if (zone != ATCA_ZONE_CONFIG && zone != ATCA_ZONE_OTP && zone != ATCA_ZONE_DATA)
   11762:	230f      	movs	r3, #15
   11764:	18fb      	adds	r3, r7, r3
   11766:	781b      	ldrb	r3, [r3, #0]
   11768:	2b00      	cmp	r3, #0
   1176a:	d00b      	beq.n	11784 <atcab_read_bytes_zone+0x68>
   1176c:	230f      	movs	r3, #15
   1176e:	18fb      	adds	r3, r7, r3
   11770:	781b      	ldrb	r3, [r3, #0]
   11772:	2b01      	cmp	r3, #1
   11774:	d006      	beq.n	11784 <atcab_read_bytes_zone+0x68>
   11776:	230f      	movs	r3, #15
   11778:	18fb      	adds	r3, r7, r3
   1177a:	781b      	ldrb	r3, [r3, #0]
   1177c:	2b02      	cmp	r3, #2
   1177e:	d001      	beq.n	11784 <atcab_read_bytes_zone+0x68>
    {
        return ATCA_BAD_PARAM;
   11780:	23e2      	movs	r3, #226	; 0xe2
   11782:	e0b5      	b.n	118f0 <atcab_read_bytes_zone+0x1d4>
    }
    if (zone == ATCA_ZONE_DATA && slot > 15)
   11784:	230f      	movs	r3, #15
   11786:	18fb      	adds	r3, r7, r3
   11788:	781b      	ldrb	r3, [r3, #0]
   1178a:	2b02      	cmp	r3, #2
   1178c:	d106      	bne.n	1179c <atcab_read_bytes_zone+0x80>
   1178e:	230c      	movs	r3, #12
   11790:	18fb      	adds	r3, r7, r3
   11792:	881b      	ldrh	r3, [r3, #0]
   11794:	2b0f      	cmp	r3, #15
   11796:	d901      	bls.n	1179c <atcab_read_bytes_zone+0x80>
    {
        return ATCA_BAD_PARAM;
   11798:	23e2      	movs	r3, #226	; 0xe2
   1179a:	e0a9      	b.n	118f0 <atcab_read_bytes_zone+0x1d4>
    }
    if (length == 0)
   1179c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   1179e:	2b00      	cmp	r3, #0
   117a0:	d101      	bne.n	117a6 <atcab_read_bytes_zone+0x8a>
    {
        return ATCA_SUCCESS;  // Always succeed reading 0 bytes
   117a2:	2300      	movs	r3, #0
   117a4:	e0a4      	b.n	118f0 <atcab_read_bytes_zone+0x1d4>
    }
    if (data == NULL)
   117a6:	687b      	ldr	r3, [r7, #4]
   117a8:	2b00      	cmp	r3, #0
   117aa:	d101      	bne.n	117b0 <atcab_read_bytes_zone+0x94>
    {
        return ATCA_BAD_PARAM;
   117ac:	23e2      	movs	r3, #226	; 0xe2
   117ae:	e09f      	b.n	118f0 <atcab_read_bytes_zone+0x1d4>
    }

    do
    {
        status = atcab_get_zone_size(zone, slot, &zone_size);
   117b0:	2357      	movs	r3, #87	; 0x57
   117b2:	18fc      	adds	r4, r7, r3
   117b4:	2334      	movs	r3, #52	; 0x34
   117b6:	18fa      	adds	r2, r7, r3
   117b8:	230c      	movs	r3, #12
   117ba:	18fb      	adds	r3, r7, r3
   117bc:	8819      	ldrh	r1, [r3, #0]
   117be:	230f      	movs	r3, #15
   117c0:	18fb      	adds	r3, r7, r3
   117c2:	781b      	ldrb	r3, [r3, #0]
   117c4:	0018      	movs	r0, r3
   117c6:	4b4c      	ldr	r3, [pc, #304]	; (118f8 <atcab_read_bytes_zone+0x1dc>)
   117c8:	4798      	blx	r3
   117ca:	0003      	movs	r3, r0
   117cc:	7023      	strb	r3, [r4, #0]
        if (status != ATCA_SUCCESS)
   117ce:	2357      	movs	r3, #87	; 0x57
   117d0:	18fb      	adds	r3, r7, r3
   117d2:	781b      	ldrb	r3, [r3, #0]
   117d4:	2b00      	cmp	r3, #0
   117d6:	d000      	beq.n	117da <atcab_read_bytes_zone+0xbe>
   117d8:	e084      	b.n	118e4 <atcab_read_bytes_zone+0x1c8>
        {
            break;
        }
        if (offset + length > zone_size)
   117da:	68ba      	ldr	r2, [r7, #8]
   117dc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   117de:	18d2      	adds	r2, r2, r3
   117e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   117e2:	429a      	cmp	r2, r3
   117e4:	d901      	bls.n	117ea <atcab_read_bytes_zone+0xce>
        {
            return ATCA_BAD_PARAM; // Can't read past the end of a zone
   117e6:	23e2      	movs	r3, #226	; 0xe2
   117e8:	e082      	b.n	118f0 <atcab_read_bytes_zone+0x1d4>

        }
        cur_block = offset / ATCA_BLOCK_SIZE;
   117ea:	68bb      	ldr	r3, [r7, #8]
   117ec:	095b      	lsrs	r3, r3, #5
   117ee:	64fb      	str	r3, [r7, #76]	; 0x4c

        while (data_idx < length)
   117f0:	e073      	b.n	118da <atcab_read_bytes_zone+0x1be>
        {
            if (read_size == ATCA_BLOCK_SIZE && zone_size - cur_block * ATCA_BLOCK_SIZE < ATCA_BLOCK_SIZE)
   117f2:	2347      	movs	r3, #71	; 0x47
   117f4:	18fb      	adds	r3, r7, r3
   117f6:	781b      	ldrb	r3, [r3, #0]
   117f8:	2b20      	cmp	r3, #32
   117fa:	d110      	bne.n	1181e <atcab_read_bytes_zone+0x102>
   117fc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   117fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   11800:	015b      	lsls	r3, r3, #5
   11802:	1ad3      	subs	r3, r2, r3
   11804:	2b1f      	cmp	r3, #31
   11806:	d80a      	bhi.n	1181e <atcab_read_bytes_zone+0x102>
            {
                // We have less than a block to read and can't read past the end of the zone, switch to word reads
                read_size = ATCA_WORD_SIZE;
   11808:	2347      	movs	r3, #71	; 0x47
   1180a:	18fb      	adds	r3, r7, r3
   1180c:	2204      	movs	r2, #4
   1180e:	701a      	strb	r2, [r3, #0]
                cur_offset = ((data_idx + offset) / ATCA_WORD_SIZE) % (ATCA_BLOCK_SIZE / ATCA_WORD_SIZE);
   11810:	6d3a      	ldr	r2, [r7, #80]	; 0x50
   11812:	68bb      	ldr	r3, [r7, #8]
   11814:	18d3      	adds	r3, r2, r3
   11816:	089b      	lsrs	r3, r3, #2
   11818:	2207      	movs	r2, #7
   1181a:	4013      	ands	r3, r2
   1181c:	64bb      	str	r3, [r7, #72]	; 0x48
            }

            // Read next chunk of data
            status = atcab_read_zone(
   1181e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   11820:	b2da      	uxtb	r2, r3
   11822:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   11824:	b2dd      	uxtb	r5, r3
   11826:	2357      	movs	r3, #87	; 0x57
   11828:	18fc      	adds	r4, r7, r3
   1182a:	230c      	movs	r3, #12
   1182c:	18fb      	adds	r3, r7, r3
   1182e:	8819      	ldrh	r1, [r3, #0]
   11830:	230f      	movs	r3, #15
   11832:	18fb      	adds	r3, r7, r3
   11834:	7818      	ldrb	r0, [r3, #0]
   11836:	2347      	movs	r3, #71	; 0x47
   11838:	18fb      	adds	r3, r7, r3
   1183a:	781b      	ldrb	r3, [r3, #0]
   1183c:	9301      	str	r3, [sp, #4]
   1183e:	2314      	movs	r3, #20
   11840:	18fb      	adds	r3, r7, r3
   11842:	9300      	str	r3, [sp, #0]
   11844:	002b      	movs	r3, r5
   11846:	4d2d      	ldr	r5, [pc, #180]	; (118fc <atcab_read_bytes_zone+0x1e0>)
   11848:	47a8      	blx	r5
   1184a:	0003      	movs	r3, r0
   1184c:	7023      	strb	r3, [r4, #0]
                slot,
                (uint8_t)cur_block,
                (uint8_t)cur_offset,
                read_buf,
                read_size);
            if (status != ATCA_SUCCESS)
   1184e:	2357      	movs	r3, #87	; 0x57
   11850:	18fb      	adds	r3, r7, r3
   11852:	781b      	ldrb	r3, [r3, #0]
   11854:	2b00      	cmp	r3, #0
   11856:	d147      	bne.n	118e8 <atcab_read_bytes_zone+0x1cc>
            {
                break;
            }

            // Calculate where in the read buffer we need data from
            read_offset = cur_block * ATCA_BLOCK_SIZE + cur_offset * ATCA_WORD_SIZE;
   11858:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   1185a:	00da      	lsls	r2, r3, #3
   1185c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   1185e:	18d3      	adds	r3, r2, r3
   11860:	009b      	lsls	r3, r3, #2
   11862:	63bb      	str	r3, [r7, #56]	; 0x38
            if (read_offset < offset)
   11864:	6bba      	ldr	r2, [r7, #56]	; 0x38
   11866:	68bb      	ldr	r3, [r7, #8]
   11868:	429a      	cmp	r2, r3
   1186a:	d204      	bcs.n	11876 <atcab_read_bytes_zone+0x15a>
            {
                read_buf_idx = offset - read_offset;  // Read data starts before the requested chunk
   1186c:	68ba      	ldr	r2, [r7, #8]
   1186e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   11870:	1ad3      	subs	r3, r2, r3
   11872:	643b      	str	r3, [r7, #64]	; 0x40
   11874:	e001      	b.n	1187a <atcab_read_bytes_zone+0x15e>
            }
            else
            {
                read_buf_idx = 0;                     // Read data is within the requested chunk
   11876:	2300      	movs	r3, #0
   11878:	643b      	str	r3, [r7, #64]	; 0x40

            }
            // Calculate how much data from the read buffer we want to copy
            if (length - data_idx < read_size - read_buf_idx)
   1187a:	6eba      	ldr	r2, [r7, #104]	; 0x68
   1187c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   1187e:	1ad2      	subs	r2, r2, r3
   11880:	2347      	movs	r3, #71	; 0x47
   11882:	18fb      	adds	r3, r7, r3
   11884:	7819      	ldrb	r1, [r3, #0]
   11886:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   11888:	1acb      	subs	r3, r1, r3
   1188a:	429a      	cmp	r2, r3
   1188c:	d204      	bcs.n	11898 <atcab_read_bytes_zone+0x17c>
            {
                copy_length = length - data_idx;
   1188e:	6eba      	ldr	r2, [r7, #104]	; 0x68
   11890:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   11892:	1ad3      	subs	r3, r2, r3
   11894:	63fb      	str	r3, [r7, #60]	; 0x3c
   11896:	e005      	b.n	118a4 <atcab_read_bytes_zone+0x188>
            }
            else
            {
                copy_length = read_size - read_buf_idx;
   11898:	2347      	movs	r3, #71	; 0x47
   1189a:	18fb      	adds	r3, r7, r3
   1189c:	781a      	ldrb	r2, [r3, #0]
   1189e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   118a0:	1ad3      	subs	r3, r2, r3
   118a2:	63fb      	str	r3, [r7, #60]	; 0x3c
            }

            memcpy(&data[data_idx], &read_buf[read_buf_idx], copy_length);
   118a4:	687a      	ldr	r2, [r7, #4]
   118a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   118a8:	18d0      	adds	r0, r2, r3
   118aa:	2314      	movs	r3, #20
   118ac:	18fa      	adds	r2, r7, r3
   118ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   118b0:	18d3      	adds	r3, r2, r3
   118b2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   118b4:	0019      	movs	r1, r3
   118b6:	4b12      	ldr	r3, [pc, #72]	; (11900 <atcab_read_bytes_zone+0x1e4>)
   118b8:	4798      	blx	r3
            data_idx += copy_length;
   118ba:	6d3a      	ldr	r2, [r7, #80]	; 0x50
   118bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   118be:	18d3      	adds	r3, r2, r3
   118c0:	653b      	str	r3, [r7, #80]	; 0x50
            if (read_size == ATCA_BLOCK_SIZE)
   118c2:	2347      	movs	r3, #71	; 0x47
   118c4:	18fb      	adds	r3, r7, r3
   118c6:	781b      	ldrb	r3, [r3, #0]
   118c8:	2b20      	cmp	r3, #32
   118ca:	d103      	bne.n	118d4 <atcab_read_bytes_zone+0x1b8>
            {
                cur_block += 1;
   118cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   118ce:	3301      	adds	r3, #1
   118d0:	64fb      	str	r3, [r7, #76]	; 0x4c
   118d2:	e002      	b.n	118da <atcab_read_bytes_zone+0x1be>
            }
            else
            {
                cur_offset += 1;
   118d4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   118d6:	3301      	adds	r3, #1
   118d8:	64bb      	str	r3, [r7, #72]	; 0x48
        while (data_idx < length)
   118da:	6d3a      	ldr	r2, [r7, #80]	; 0x50
   118dc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   118de:	429a      	cmp	r2, r3
   118e0:	d387      	bcc.n	117f2 <atcab_read_bytes_zone+0xd6>
   118e2:	e002      	b.n	118ea <atcab_read_bytes_zone+0x1ce>
            break;
   118e4:	46c0      	nop			; (mov r8, r8)
   118e6:	e000      	b.n	118ea <atcab_read_bytes_zone+0x1ce>
                break;
   118e8:	46c0      	nop			; (mov r8, r8)
            break;
        }
    }
    while (false);

    return status;
   118ea:	2357      	movs	r3, #87	; 0x57
   118ec:	18fb      	adds	r3, r7, r3
   118ee:	781b      	ldrb	r3, [r3, #0]
}
   118f0:	0018      	movs	r0, r3
   118f2:	46bd      	mov	sp, r7
   118f4:	b016      	add	sp, #88	; 0x58
   118f6:	bdb0      	pop	{r4, r5, r7, pc}
   118f8:	000100ed 	.word	0x000100ed
   118fc:	000115d9 	.word	0x000115d9
   11900:	0001c13d 	.word	0x0001c13d

00011904 <atcab_sign_base>:
 *                        curve.
 *
 * \return ATCA_SUCCESS on success, otherwise an error code.
 */
ATCA_STATUS atcab_sign_base(uint8_t mode, uint16_t key_id, uint8_t *signature)
{
   11904:	b590      	push	{r4, r7, lr}
   11906:	b0a9      	sub	sp, #164	; 0xa4
   11908:	af00      	add	r7, sp, #0
   1190a:	603a      	str	r2, [r7, #0]
   1190c:	1dfb      	adds	r3, r7, #7
   1190e:	1c02      	adds	r2, r0, #0
   11910:	701a      	strb	r2, [r3, #0]
   11912:	1d3b      	adds	r3, r7, #4
   11914:	1c0a      	adds	r2, r1, #0
   11916:	801a      	strh	r2, [r3, #0]
    ATCAPacket packet;
    ATCACommand ca_cmd = _gDevice->mCommands;
   11918:	4b2b      	ldr	r3, [pc, #172]	; (119c8 <atcab_sign_base+0xc4>)
   1191a:	681b      	ldr	r3, [r3, #0]
   1191c:	681b      	ldr	r3, [r3, #0]
   1191e:	2298      	movs	r2, #152	; 0x98
   11920:	18ba      	adds	r2, r7, r2
   11922:	6013      	str	r3, [r2, #0]
    ATCA_STATUS status = ATCA_GEN_FAIL;
   11924:	239f      	movs	r3, #159	; 0x9f
   11926:	18fb      	adds	r3, r7, r3
   11928:	22e1      	movs	r2, #225	; 0xe1
   1192a:	701a      	strb	r2, [r3, #0]

    if (signature == NULL)
   1192c:	683b      	ldr	r3, [r7, #0]
   1192e:	2b00      	cmp	r3, #0
   11930:	d101      	bne.n	11936 <atcab_sign_base+0x32>
    {
        return ATCA_BAD_PARAM;
   11932:	23e2      	movs	r3, #226	; 0xe2
   11934:	e043      	b.n	119be <atcab_sign_base+0xba>
    }

    do
    {
        // Build sign command
        packet.param1 = mode;
   11936:	230c      	movs	r3, #12
   11938:	18fb      	adds	r3, r7, r3
   1193a:	1dfa      	adds	r2, r7, #7
   1193c:	7812      	ldrb	r2, [r2, #0]
   1193e:	70da      	strb	r2, [r3, #3]
        packet.param2 = key_id;
   11940:	230c      	movs	r3, #12
   11942:	18fb      	adds	r3, r7, r3
   11944:	1d3a      	adds	r2, r7, #4
   11946:	8812      	ldrh	r2, [r2, #0]
   11948:	809a      	strh	r2, [r3, #4]
        if ((status = atSign(ca_cmd, &packet)) != ATCA_SUCCESS)
   1194a:	239f      	movs	r3, #159	; 0x9f
   1194c:	18fc      	adds	r4, r7, r3
   1194e:	230c      	movs	r3, #12
   11950:	18fa      	adds	r2, r7, r3
   11952:	2398      	movs	r3, #152	; 0x98
   11954:	18fb      	adds	r3, r7, r3
   11956:	681b      	ldr	r3, [r3, #0]
   11958:	0011      	movs	r1, r2
   1195a:	0018      	movs	r0, r3
   1195c:	4b1b      	ldr	r3, [pc, #108]	; (119cc <atcab_sign_base+0xc8>)
   1195e:	4798      	blx	r3
   11960:	0003      	movs	r3, r0
   11962:	7023      	strb	r3, [r4, #0]
   11964:	239f      	movs	r3, #159	; 0x9f
   11966:	18fb      	adds	r3, r7, r3
   11968:	781b      	ldrb	r3, [r3, #0]
   1196a:	2b00      	cmp	r3, #0
   1196c:	d121      	bne.n	119b2 <atcab_sign_base+0xae>
        {
            break;
        }

        if ((status = atcab_execute_command(&packet)) != ATCA_SUCCESS)
   1196e:	239f      	movs	r3, #159	; 0x9f
   11970:	18fc      	adds	r4, r7, r3
   11972:	230c      	movs	r3, #12
   11974:	18fb      	adds	r3, r7, r3
   11976:	0018      	movs	r0, r3
   11978:	4b15      	ldr	r3, [pc, #84]	; (119d0 <atcab_sign_base+0xcc>)
   1197a:	4798      	blx	r3
   1197c:	0003      	movs	r3, r0
   1197e:	7023      	strb	r3, [r4, #0]
   11980:	239f      	movs	r3, #159	; 0x9f
   11982:	18fb      	adds	r3, r7, r3
   11984:	781b      	ldrb	r3, [r3, #0]
   11986:	2b00      	cmp	r3, #0
   11988:	d115      	bne.n	119b6 <atcab_sign_base+0xb2>
        {
            break;
        }

        if (packet.rxsize > 4)
   1198a:	230c      	movs	r3, #12
   1198c:	18fb      	adds	r3, r7, r3
   1198e:	228a      	movs	r2, #138	; 0x8a
   11990:	5a9b      	ldrh	r3, [r3, r2]
   11992:	2b04      	cmp	r3, #4
   11994:	d910      	bls.n	119b8 <atcab_sign_base+0xb4>
        {
            memcpy(signature, &packet.data[ATCA_RSP_DATA_IDX], packet.rxsize - ATCA_PACKET_OVERHEAD);
   11996:	230c      	movs	r3, #12
   11998:	18fb      	adds	r3, r7, r3
   1199a:	228a      	movs	r2, #138	; 0x8a
   1199c:	5a9b      	ldrh	r3, [r3, r2]
   1199e:	3b03      	subs	r3, #3
   119a0:	001a      	movs	r2, r3
   119a2:	230c      	movs	r3, #12
   119a4:	18fb      	adds	r3, r7, r3
   119a6:	1dd9      	adds	r1, r3, #7
   119a8:	683b      	ldr	r3, [r7, #0]
   119aa:	0018      	movs	r0, r3
   119ac:	4b09      	ldr	r3, [pc, #36]	; (119d4 <atcab_sign_base+0xd0>)
   119ae:	4798      	blx	r3
   119b0:	e002      	b.n	119b8 <atcab_sign_base+0xb4>
            break;
   119b2:	46c0      	nop			; (mov r8, r8)
   119b4:	e000      	b.n	119b8 <atcab_sign_base+0xb4>
            break;
   119b6:	46c0      	nop			; (mov r8, r8)
        }

    }
    while (0);

    return status;
   119b8:	239f      	movs	r3, #159	; 0x9f
   119ba:	18fb      	adds	r3, r7, r3
   119bc:	781b      	ldrb	r3, [r3, #0]
}
   119be:	0018      	movs	r0, r3
   119c0:	46bd      	mov	sp, r7
   119c2:	b029      	add	sp, #164	; 0xa4
   119c4:	bd90      	pop	{r4, r7, pc}
   119c6:	46c0      	nop			; (mov r8, r8)
   119c8:	20000590 	.word	0x20000590
   119cc:	0000f745 	.word	0x0000f745
   119d0:	000101cd 	.word	0x000101cd
   119d4:	0001c13d 	.word	0x0001c13d

000119d8 <atcab_sign>:
 *                         curve.
 *
 * \return ATCA_SUCCESS on success, otherwise an error code.
 */
ATCA_STATUS atcab_sign(uint16_t key_id, const uint8_t *msg, uint8_t *signature)
{
   119d8:	b590      	push	{r4, r7, lr}
   119da:	b087      	sub	sp, #28
   119dc:	af00      	add	r7, sp, #0
   119de:	60b9      	str	r1, [r7, #8]
   119e0:	607a      	str	r2, [r7, #4]
   119e2:	230e      	movs	r3, #14
   119e4:	18fb      	adds	r3, r7, r3
   119e6:	1c02      	adds	r2, r0, #0
   119e8:	801a      	strh	r2, [r3, #0]
    ATCA_STATUS status = ATCA_GEN_FAIL;
   119ea:	2317      	movs	r3, #23
   119ec:	18fb      	adds	r3, r7, r3
   119ee:	22e1      	movs	r2, #225	; 0xe1
   119f0:	701a      	strb	r2, [r3, #0]
    uint8_t nonce_target = NONCE_MODE_TARGET_TEMPKEY;
   119f2:	2316      	movs	r3, #22
   119f4:	18fb      	adds	r3, r7, r3
   119f6:	2200      	movs	r2, #0
   119f8:	701a      	strb	r2, [r3, #0]
    uint8_t sign_source = SIGN_MODE_SOURCE_TEMPKEY;
   119fa:	2315      	movs	r3, #21
   119fc:	18fb      	adds	r3, r7, r3
   119fe:	2200      	movs	r2, #0
   11a00:	701a      	strb	r2, [r3, #0]

    do
    {
        // Make sure RNG has updated its seed
        if ((status = atcab_random(NULL)) != ATCA_SUCCESS)
   11a02:	2317      	movs	r3, #23
   11a04:	18fc      	adds	r4, r7, r3
   11a06:	2000      	movs	r0, #0
   11a08:	4b22      	ldr	r3, [pc, #136]	; (11a94 <atcab_sign+0xbc>)
   11a0a:	4798      	blx	r3
   11a0c:	0003      	movs	r3, r0
   11a0e:	7023      	strb	r3, [r4, #0]
   11a10:	2317      	movs	r3, #23
   11a12:	18fb      	adds	r3, r7, r3
   11a14:	781b      	ldrb	r3, [r3, #0]
   11a16:	2b00      	cmp	r3, #0
   11a18:	d131      	bne.n	11a7e <atcab_sign+0xa6>
        {
            break;
        }

        // Load message into device
        if (_gDevice->mCommands->dt == ATECC608A)
   11a1a:	4b1f      	ldr	r3, [pc, #124]	; (11a98 <atcab_sign+0xc0>)
   11a1c:	681b      	ldr	r3, [r3, #0]
   11a1e:	681b      	ldr	r3, [r3, #0]
   11a20:	781b      	ldrb	r3, [r3, #0]
   11a22:	2b03      	cmp	r3, #3
   11a24:	d107      	bne.n	11a36 <atcab_sign+0x5e>
        {
            // Use the Message Digest Buffer for the ATECC608A
            nonce_target = NONCE_MODE_TARGET_MSGDIGBUF;
   11a26:	2316      	movs	r3, #22
   11a28:	18fb      	adds	r3, r7, r3
   11a2a:	2240      	movs	r2, #64	; 0x40
   11a2c:	701a      	strb	r2, [r3, #0]
            sign_source = SIGN_MODE_SOURCE_MSGDIGBUF;
   11a2e:	2315      	movs	r3, #21
   11a30:	18fb      	adds	r3, r7, r3
   11a32:	2220      	movs	r2, #32
   11a34:	701a      	strb	r2, [r3, #0]
        }
        if ((status = atcab_nonce_load(nonce_target, msg, 32)) != ATCA_SUCCESS)
   11a36:	2317      	movs	r3, #23
   11a38:	18fc      	adds	r4, r7, r3
   11a3a:	68b9      	ldr	r1, [r7, #8]
   11a3c:	2316      	movs	r3, #22
   11a3e:	18fb      	adds	r3, r7, r3
   11a40:	781b      	ldrb	r3, [r3, #0]
   11a42:	2220      	movs	r2, #32
   11a44:	0018      	movs	r0, r3
   11a46:	4b15      	ldr	r3, [pc, #84]	; (11a9c <atcab_sign+0xc4>)
   11a48:	4798      	blx	r3
   11a4a:	0003      	movs	r3, r0
   11a4c:	7023      	strb	r3, [r4, #0]
   11a4e:	2317      	movs	r3, #23
   11a50:	18fb      	adds	r3, r7, r3
   11a52:	781b      	ldrb	r3, [r3, #0]
   11a54:	2b00      	cmp	r3, #0
   11a56:	d114      	bne.n	11a82 <atcab_sign+0xaa>
        {
            break;
        }

        // Sign the message
        if ((status = atcab_sign_base(SIGN_MODE_EXTERNAL | sign_source, key_id, signature)) != ATCA_SUCCESS)
   11a58:	2315      	movs	r3, #21
   11a5a:	18fb      	adds	r3, r7, r3
   11a5c:	781b      	ldrb	r3, [r3, #0]
   11a5e:	2280      	movs	r2, #128	; 0x80
   11a60:	4252      	negs	r2, r2
   11a62:	4313      	orrs	r3, r2
   11a64:	b2d8      	uxtb	r0, r3
   11a66:	2317      	movs	r3, #23
   11a68:	18fc      	adds	r4, r7, r3
   11a6a:	687a      	ldr	r2, [r7, #4]
   11a6c:	230e      	movs	r3, #14
   11a6e:	18fb      	adds	r3, r7, r3
   11a70:	881b      	ldrh	r3, [r3, #0]
   11a72:	0019      	movs	r1, r3
   11a74:	4b0a      	ldr	r3, [pc, #40]	; (11aa0 <atcab_sign+0xc8>)
   11a76:	4798      	blx	r3
   11a78:	0003      	movs	r3, r0
   11a7a:	7023      	strb	r3, [r4, #0]
   11a7c:	e002      	b.n	11a84 <atcab_sign+0xac>
            break;
   11a7e:	46c0      	nop			; (mov r8, r8)
   11a80:	e000      	b.n	11a84 <atcab_sign+0xac>
            break;
   11a82:	46c0      	nop			; (mov r8, r8)
            break;
        }
    }
    while (0);

    return status;
   11a84:	2317      	movs	r3, #23
   11a86:	18fb      	adds	r3, r7, r3
   11a88:	781b      	ldrb	r3, [r3, #0]
}
   11a8a:	0018      	movs	r0, r3
   11a8c:	46bd      	mov	sp, r7
   11a8e:	b007      	add	sp, #28
   11a90:	bd90      	pop	{r4, r7, pc}
   11a92:	46c0      	nop			; (mov r8, r8)
   11a94:	00011509 	.word	0x00011509
   11a98:	20000590 	.word	0x20000590
   11a9c:	0001148d 	.word	0x0001148d
   11aa0:	00011905 	.word	0x00011905

00011aa4 <i2c_master_is_syncing>:
{
   11aa4:	b580      	push	{r7, lr}
   11aa6:	b084      	sub	sp, #16
   11aa8:	af00      	add	r7, sp, #0
   11aaa:	6078      	str	r0, [r7, #4]
	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
   11aac:	687b      	ldr	r3, [r7, #4]
   11aae:	681b      	ldr	r3, [r3, #0]
   11ab0:	60fb      	str	r3, [r7, #12]
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
   11ab2:	68fb      	ldr	r3, [r7, #12]
   11ab4:	69db      	ldr	r3, [r3, #28]
   11ab6:	2207      	movs	r2, #7
   11ab8:	4013      	ands	r3, r2
   11aba:	1e5a      	subs	r2, r3, #1
   11abc:	4193      	sbcs	r3, r2
   11abe:	b2db      	uxtb	r3, r3
}
   11ac0:	0018      	movs	r0, r3
   11ac2:	46bd      	mov	sp, r7
   11ac4:	b004      	add	sp, #16
   11ac6:	bd80      	pop	{r7, pc}

00011ac8 <_i2c_master_wait_for_sync>:
{
   11ac8:	b580      	push	{r7, lr}
   11aca:	b082      	sub	sp, #8
   11acc:	af00      	add	r7, sp, #0
   11ace:	6078      	str	r0, [r7, #4]
	while (i2c_master_is_syncing(module)) {
   11ad0:	46c0      	nop			; (mov r8, r8)
   11ad2:	687b      	ldr	r3, [r7, #4]
   11ad4:	0018      	movs	r0, r3
   11ad6:	4b04      	ldr	r3, [pc, #16]	; (11ae8 <_i2c_master_wait_for_sync+0x20>)
   11ad8:	4798      	blx	r3
   11ada:	1e03      	subs	r3, r0, #0
   11adc:	d1f9      	bne.n	11ad2 <_i2c_master_wait_for_sync+0xa>
}
   11ade:	46c0      	nop			; (mov r8, r8)
   11ae0:	46bd      	mov	sp, r7
   11ae2:	b002      	add	sp, #8
   11ae4:	bd80      	pop	{r7, pc}
   11ae6:	46c0      	nop			; (mov r8, r8)
   11ae8:	00011aa5 	.word	0x00011aa5

00011aec <i2c_master_get_config_defaults>:
{
   11aec:	b580      	push	{r7, lr}
   11aee:	b082      	sub	sp, #8
   11af0:	af00      	add	r7, sp, #0
   11af2:	6078      	str	r0, [r7, #4]
	config->baud_rate        = I2C_MASTER_BAUD_RATE_100KHZ;
   11af4:	687b      	ldr	r3, [r7, #4]
   11af6:	2264      	movs	r2, #100	; 0x64
   11af8:	601a      	str	r2, [r3, #0]
	config->baud_rate_high_speed = I2C_MASTER_BAUD_RATE_3400KHZ;
   11afa:	687b      	ldr	r3, [r7, #4]
   11afc:	4a1b      	ldr	r2, [pc, #108]	; (11b6c <i2c_master_get_config_defaults+0x80>)
   11afe:	605a      	str	r2, [r3, #4]
	config->transfer_speed       = I2C_MASTER_SPEED_STANDARD_AND_FAST;
   11b00:	687b      	ldr	r3, [r7, #4]
   11b02:	2200      	movs	r2, #0
   11b04:	609a      	str	r2, [r3, #8]
	config->generator_source = GCLK_GENERATOR_0;
   11b06:	687b      	ldr	r3, [r7, #4]
   11b08:	2200      	movs	r2, #0
   11b0a:	731a      	strb	r2, [r3, #12]
	config->run_in_standby   = false;
   11b0c:	687b      	ldr	r3, [r7, #4]
   11b0e:	2200      	movs	r2, #0
   11b10:	761a      	strb	r2, [r3, #24]
	config->start_hold_time  = I2C_MASTER_START_HOLD_TIME_300NS_600NS;
   11b12:	687b      	ldr	r3, [r7, #4]
   11b14:	2280      	movs	r2, #128	; 0x80
   11b16:	0392      	lsls	r2, r2, #14
   11b18:	611a      	str	r2, [r3, #16]
	config->buffer_timeout   = 65535;
   11b1a:	687b      	ldr	r3, [r7, #4]
   11b1c:	2201      	movs	r2, #1
   11b1e:	4252      	negs	r2, r2
   11b20:	82da      	strh	r2, [r3, #22]
	config->unknown_bus_state_timeout = 65535;
   11b22:	687b      	ldr	r3, [r7, #4]
   11b24:	2201      	movs	r2, #1
   11b26:	4252      	negs	r2, r2
   11b28:	829a      	strh	r2, [r3, #20]
	config->pinmux_pad0      = PINMUX_DEFAULT;
   11b2a:	687b      	ldr	r3, [r7, #4]
   11b2c:	2200      	movs	r2, #0
   11b2e:	61da      	str	r2, [r3, #28]
	config->pinmux_pad1      = PINMUX_DEFAULT;
   11b30:	687b      	ldr	r3, [r7, #4]
   11b32:	2200      	movs	r2, #0
   11b34:	621a      	str	r2, [r3, #32]
	config->scl_low_timeout  = false;
   11b36:	687b      	ldr	r3, [r7, #4]
   11b38:	2224      	movs	r2, #36	; 0x24
   11b3a:	2100      	movs	r1, #0
   11b3c:	5499      	strb	r1, [r3, r2]
	config->inactive_timeout = I2C_MASTER_INACTIVE_TIMEOUT_DISABLED;
   11b3e:	687b      	ldr	r3, [r7, #4]
   11b40:	2200      	movs	r2, #0
   11b42:	629a      	str	r2, [r3, #40]	; 0x28
	config->scl_stretch_only_after_ack_bit = false;
   11b44:	687b      	ldr	r3, [r7, #4]
   11b46:	222c      	movs	r2, #44	; 0x2c
   11b48:	2100      	movs	r1, #0
   11b4a:	5499      	strb	r1, [r3, r2]
	config->slave_scl_low_extend_timeout   = false;
   11b4c:	687b      	ldr	r3, [r7, #4]
   11b4e:	222d      	movs	r2, #45	; 0x2d
   11b50:	2100      	movs	r1, #0
   11b52:	5499      	strb	r1, [r3, r2]
	config->master_scl_low_extend_timeout  = false;
   11b54:	687b      	ldr	r3, [r7, #4]
   11b56:	222e      	movs	r2, #46	; 0x2e
   11b58:	2100      	movs	r1, #0
   11b5a:	5499      	strb	r1, [r3, r2]
	config->sda_scl_rise_time_ns = 215;
   11b5c:	687b      	ldr	r3, [r7, #4]
   11b5e:	22d7      	movs	r2, #215	; 0xd7
   11b60:	861a      	strh	r2, [r3, #48]	; 0x30
}
   11b62:	46c0      	nop			; (mov r8, r8)
   11b64:	46bd      	mov	sp, r7
   11b66:	b002      	add	sp, #8
   11b68:	bd80      	pop	{r7, pc}
   11b6a:	46c0      	nop			; (mov r8, r8)
   11b6c:	00000d48 	.word	0x00000d48

00011b70 <i2c_master_enable>:
{
   11b70:	b580      	push	{r7, lr}
   11b72:	b084      	sub	sp, #16
   11b74:	af00      	add	r7, sp, #0
   11b76:	6078      	str	r0, [r7, #4]
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   11b78:	687b      	ldr	r3, [r7, #4]
   11b7a:	681b      	ldr	r3, [r3, #0]
   11b7c:	60bb      	str	r3, [r7, #8]
	uint32_t timeout_counter = 0;
   11b7e:	2300      	movs	r3, #0
   11b80:	60fb      	str	r3, [r7, #12]
	_i2c_master_wait_for_sync(module);
   11b82:	687b      	ldr	r3, [r7, #4]
   11b84:	0018      	movs	r0, r3
   11b86:	4b10      	ldr	r3, [pc, #64]	; (11bc8 <i2c_master_enable+0x58>)
   11b88:	4798      	blx	r3
	i2c_module->CTRLA.reg |= SERCOM_I2CM_CTRLA_ENABLE;
   11b8a:	68bb      	ldr	r3, [r7, #8]
   11b8c:	681b      	ldr	r3, [r3, #0]
   11b8e:	2202      	movs	r2, #2
   11b90:	431a      	orrs	r2, r3
   11b92:	68bb      	ldr	r3, [r7, #8]
   11b94:	601a      	str	r2, [r3, #0]
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
   11b96:	e00c      	b.n	11bb2 <i2c_master_enable+0x42>
		timeout_counter++;
   11b98:	68fb      	ldr	r3, [r7, #12]
   11b9a:	3301      	adds	r3, #1
   11b9c:	60fb      	str	r3, [r7, #12]
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
   11b9e:	687b      	ldr	r3, [r7, #4]
   11ba0:	88db      	ldrh	r3, [r3, #6]
   11ba2:	001a      	movs	r2, r3
   11ba4:	68fb      	ldr	r3, [r7, #12]
   11ba6:	429a      	cmp	r2, r3
   11ba8:	d803      	bhi.n	11bb2 <i2c_master_enable+0x42>
			i2c_module->STATUS.reg = SERCOM_I2CM_STATUS_BUSSTATE(1);
   11baa:	68bb      	ldr	r3, [r7, #8]
   11bac:	2210      	movs	r2, #16
   11bae:	835a      	strh	r2, [r3, #26]
			return;
   11bb0:	e006      	b.n	11bc0 <i2c_master_enable+0x50>
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
   11bb2:	68bb      	ldr	r3, [r7, #8]
   11bb4:	8b5b      	ldrh	r3, [r3, #26]
   11bb6:	b29b      	uxth	r3, r3
   11bb8:	001a      	movs	r2, r3
   11bba:	2310      	movs	r3, #16
   11bbc:	4013      	ands	r3, r2
   11bbe:	d0eb      	beq.n	11b98 <i2c_master_enable+0x28>
}
   11bc0:	46bd      	mov	sp, r7
   11bc2:	b004      	add	sp, #16
   11bc4:	bd80      	pop	{r7, pc}
   11bc6:	46c0      	nop			; (mov r8, r8)
   11bc8:	00011ac9 	.word	0x00011ac9

00011bcc <i2c_master_disable>:
{
   11bcc:	b580      	push	{r7, lr}
   11bce:	b084      	sub	sp, #16
   11bd0:	af00      	add	r7, sp, #0
   11bd2:	6078      	str	r0, [r7, #4]
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   11bd4:	687b      	ldr	r3, [r7, #4]
   11bd6:	681b      	ldr	r3, [r3, #0]
   11bd8:	60fb      	str	r3, [r7, #12]
	_i2c_master_wait_for_sync(module);
   11bda:	687b      	ldr	r3, [r7, #4]
   11bdc:	0018      	movs	r0, r3
   11bde:	4b09      	ldr	r3, [pc, #36]	; (11c04 <i2c_master_disable+0x38>)
   11be0:	4798      	blx	r3
	i2c_module->INTENCLR.reg = SERCOM_I2CM_INTENCLR_MASK;
   11be2:	68fb      	ldr	r3, [r7, #12]
   11be4:	2283      	movs	r2, #131	; 0x83
   11be6:	751a      	strb	r2, [r3, #20]
	i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_MASK;
   11be8:	68fb      	ldr	r3, [r7, #12]
   11bea:	2283      	movs	r2, #131	; 0x83
   11bec:	761a      	strb	r2, [r3, #24]
	i2c_module->CTRLA.reg &= ~SERCOM_I2CM_CTRLA_ENABLE;
   11bee:	68fb      	ldr	r3, [r7, #12]
   11bf0:	681b      	ldr	r3, [r3, #0]
   11bf2:	2202      	movs	r2, #2
   11bf4:	4393      	bics	r3, r2
   11bf6:	001a      	movs	r2, r3
   11bf8:	68fb      	ldr	r3, [r7, #12]
   11bfa:	601a      	str	r2, [r3, #0]
}
   11bfc:	46c0      	nop			; (mov r8, r8)
   11bfe:	46bd      	mov	sp, r7
   11c00:	b004      	add	sp, #16
   11c02:	bd80      	pop	{r7, pc}
   11c04:	00011ac9 	.word	0x00011ac9

00011c08 <hal_i2c_init>:
 * \param[in] hal - opaque ptr to HAL data
 * \param[in] cfg - interface configuration
 * \return ATCA_SUCCESS on success, otherwise an error code.
 */
ATCA_STATUS hal_i2c_init(void *hal, ATCAIfaceCfg *cfg)
{
   11c08:	b580      	push	{r7, lr}
   11c0a:	b086      	sub	sp, #24
   11c0c:	af00      	add	r7, sp, #0
   11c0e:	6078      	str	r0, [r7, #4]
   11c10:	6039      	str	r1, [r7, #0]
    int bus = cfg->atcai2c.bus;   // 0-based logical bus number
   11c12:	683b      	ldr	r3, [r7, #0]
   11c14:	795b      	ldrb	r3, [r3, #5]
   11c16:	613b      	str	r3, [r7, #16]
    ATCAHAL_t *phal = (ATCAHAL_t*)hal;
   11c18:	687b      	ldr	r3, [r7, #4]
   11c1a:	60fb      	str	r3, [r7, #12]

    if (i2c_bus_ref_ct == 0)       // power up state, no i2c buses will have been used
   11c1c:	4b57      	ldr	r3, [pc, #348]	; (11d7c <hal_i2c_init+0x174>)
   11c1e:	681b      	ldr	r3, [r3, #0]
   11c20:	2b00      	cmp	r3, #0
   11c22:	d10d      	bne.n	11c40 <hal_i2c_init+0x38>
    {
        for (int i = 0; i < MAX_I2C_BUSES; i++)
   11c24:	2300      	movs	r3, #0
   11c26:	617b      	str	r3, [r7, #20]
   11c28:	e007      	b.n	11c3a <hal_i2c_init+0x32>
        {
            i2c_hal_data[i] = NULL;
   11c2a:	4b55      	ldr	r3, [pc, #340]	; (11d80 <hal_i2c_init+0x178>)
   11c2c:	697a      	ldr	r2, [r7, #20]
   11c2e:	0092      	lsls	r2, r2, #2
   11c30:	2100      	movs	r1, #0
   11c32:	50d1      	str	r1, [r2, r3]
        for (int i = 0; i < MAX_I2C_BUSES; i++)
   11c34:	697b      	ldr	r3, [r7, #20]
   11c36:	3301      	adds	r3, #1
   11c38:	617b      	str	r3, [r7, #20]
   11c3a:	697b      	ldr	r3, [r7, #20]
   11c3c:	2b05      	cmp	r3, #5
   11c3e:	ddf4      	ble.n	11c2a <hal_i2c_init+0x22>
        }
    }

    i2c_bus_ref_ct++;  // total across buses
   11c40:	4b4e      	ldr	r3, [pc, #312]	; (11d7c <hal_i2c_init+0x174>)
   11c42:	681b      	ldr	r3, [r3, #0]
   11c44:	1c5a      	adds	r2, r3, #1
   11c46:	4b4d      	ldr	r3, [pc, #308]	; (11d7c <hal_i2c_init+0x174>)
   11c48:	601a      	str	r2, [r3, #0]

    if (bus >= 0 && bus < MAX_I2C_BUSES)
   11c4a:	693b      	ldr	r3, [r7, #16]
   11c4c:	2b00      	cmp	r3, #0
   11c4e:	da00      	bge.n	11c52 <hal_i2c_init+0x4a>
   11c50:	e08e      	b.n	11d70 <hal_i2c_init+0x168>
   11c52:	693b      	ldr	r3, [r7, #16]
   11c54:	2b05      	cmp	r3, #5
   11c56:	dd00      	ble.n	11c5a <hal_i2c_init+0x52>
   11c58:	e08a      	b.n	11d70 <hal_i2c_init+0x168>
    {
        // if this is the first time this bus and interface has been created, do the physical work of enabling it
        if (i2c_hal_data[bus] == NULL)
   11c5a:	4b49      	ldr	r3, [pc, #292]	; (11d80 <hal_i2c_init+0x178>)
   11c5c:	693a      	ldr	r2, [r7, #16]
   11c5e:	0092      	lsls	r2, r2, #2
   11c60:	58d3      	ldr	r3, [r2, r3]
   11c62:	2b00      	cmp	r3, #0
   11c64:	d175      	bne.n	11d52 <hal_i2c_init+0x14a>
        {
            i2c_hal_data[bus] = malloc(sizeof(ATCAI2CMaster_t) );
   11c66:	2014      	movs	r0, #20
   11c68:	4b46      	ldr	r3, [pc, #280]	; (11d84 <hal_i2c_init+0x17c>)
   11c6a:	4798      	blx	r3
   11c6c:	0003      	movs	r3, r0
   11c6e:	0019      	movs	r1, r3
   11c70:	4b43      	ldr	r3, [pc, #268]	; (11d80 <hal_i2c_init+0x178>)
   11c72:	693a      	ldr	r2, [r7, #16]
   11c74:	0092      	lsls	r2, r2, #2
   11c76:	50d1      	str	r1, [r2, r3]
            i2c_hal_data[bus]->ref_ct = 1;  // buses are shared, this is the first instance
   11c78:	4b41      	ldr	r3, [pc, #260]	; (11d80 <hal_i2c_init+0x178>)
   11c7a:	693a      	ldr	r2, [r7, #16]
   11c7c:	0092      	lsls	r2, r2, #2
   11c7e:	58d3      	ldr	r3, [r2, r3]
   11c80:	2201      	movs	r2, #1
   11c82:	60da      	str	r2, [r3, #12]
            i2c_master_get_config_defaults(&config_i2c_master);
   11c84:	4b40      	ldr	r3, [pc, #256]	; (11d88 <hal_i2c_init+0x180>)
   11c86:	0018      	movs	r0, r3
   11c88:	4b40      	ldr	r3, [pc, #256]	; (11d8c <hal_i2c_init+0x184>)
   11c8a:	4798      	blx	r3
                config_i2c_master.pinmux_pad1 = PINMUX_PA09C_SERCOM0_PAD1;
            }
#endif

            // config_i2c_master.buffer_timeout = 10000;
            config_i2c_master.baud_rate = cfg->atcai2c.baud / 1000;
   11c8c:	683b      	ldr	r3, [r7, #0]
   11c8e:	6898      	ldr	r0, [r3, #8]
   11c90:	4b3f      	ldr	r3, [pc, #252]	; (11d90 <hal_i2c_init+0x188>)
   11c92:	22fa      	movs	r2, #250	; 0xfa
   11c94:	0091      	lsls	r1, r2, #2
   11c96:	4798      	blx	r3
   11c98:	0003      	movs	r3, r0
   11c9a:	001a      	movs	r2, r3
   11c9c:	4b3a      	ldr	r3, [pc, #232]	; (11d88 <hal_i2c_init+0x180>)
   11c9e:	601a      	str	r2, [r3, #0]

            switch (bus)
   11ca0:	693b      	ldr	r3, [r7, #16]
   11ca2:	2b05      	cmp	r3, #5
   11ca4:	d847      	bhi.n	11d36 <hal_i2c_init+0x12e>
   11ca6:	693b      	ldr	r3, [r7, #16]
   11ca8:	009a      	lsls	r2, r3, #2
   11caa:	4b3a      	ldr	r3, [pc, #232]	; (11d94 <hal_i2c_init+0x18c>)
   11cac:	18d3      	adds	r3, r2, r3
   11cae:	681b      	ldr	r3, [r3, #0]
   11cb0:	469f      	mov	pc, r3
            {
            case 0: i2c_master_init(&(i2c_hal_data[bus]->i2c_master_instance), SERCOM0, &config_i2c_master); break;
   11cb2:	4b33      	ldr	r3, [pc, #204]	; (11d80 <hal_i2c_init+0x178>)
   11cb4:	693a      	ldr	r2, [r7, #16]
   11cb6:	0092      	lsls	r2, r2, #2
   11cb8:	58d3      	ldr	r3, [r2, r3]
   11cba:	0018      	movs	r0, r3
   11cbc:	4b32      	ldr	r3, [pc, #200]	; (11d88 <hal_i2c_init+0x180>)
   11cbe:	4936      	ldr	r1, [pc, #216]	; (11d98 <hal_i2c_init+0x190>)
   11cc0:	001a      	movs	r2, r3
   11cc2:	4b36      	ldr	r3, [pc, #216]	; (11d9c <hal_i2c_init+0x194>)
   11cc4:	4798      	blx	r3
   11cc6:	e036      	b.n	11d36 <hal_i2c_init+0x12e>
            case 1: i2c_master_init(&(i2c_hal_data[bus]->i2c_master_instance), SERCOM1, &config_i2c_master); break;
   11cc8:	4b2d      	ldr	r3, [pc, #180]	; (11d80 <hal_i2c_init+0x178>)
   11cca:	693a      	ldr	r2, [r7, #16]
   11ccc:	0092      	lsls	r2, r2, #2
   11cce:	58d3      	ldr	r3, [r2, r3]
   11cd0:	0018      	movs	r0, r3
   11cd2:	4b2d      	ldr	r3, [pc, #180]	; (11d88 <hal_i2c_init+0x180>)
   11cd4:	4932      	ldr	r1, [pc, #200]	; (11da0 <hal_i2c_init+0x198>)
   11cd6:	001a      	movs	r2, r3
   11cd8:	4b30      	ldr	r3, [pc, #192]	; (11d9c <hal_i2c_init+0x194>)
   11cda:	4798      	blx	r3
   11cdc:	e02b      	b.n	11d36 <hal_i2c_init+0x12e>
            case 2: i2c_master_init(&(i2c_hal_data[bus]->i2c_master_instance), SERCOM2, &config_i2c_master); break;
   11cde:	4b28      	ldr	r3, [pc, #160]	; (11d80 <hal_i2c_init+0x178>)
   11ce0:	693a      	ldr	r2, [r7, #16]
   11ce2:	0092      	lsls	r2, r2, #2
   11ce4:	58d3      	ldr	r3, [r2, r3]
   11ce6:	0018      	movs	r0, r3
   11ce8:	4b27      	ldr	r3, [pc, #156]	; (11d88 <hal_i2c_init+0x180>)
   11cea:	492e      	ldr	r1, [pc, #184]	; (11da4 <hal_i2c_init+0x19c>)
   11cec:	001a      	movs	r2, r3
   11cee:	4b2b      	ldr	r3, [pc, #172]	; (11d9c <hal_i2c_init+0x194>)
   11cf0:	4798      	blx	r3
   11cf2:	e020      	b.n	11d36 <hal_i2c_init+0x12e>
            case 3: i2c_master_init(&(i2c_hal_data[bus]->i2c_master_instance), SERCOM3, &config_i2c_master); break;
   11cf4:	4b22      	ldr	r3, [pc, #136]	; (11d80 <hal_i2c_init+0x178>)
   11cf6:	693a      	ldr	r2, [r7, #16]
   11cf8:	0092      	lsls	r2, r2, #2
   11cfa:	58d3      	ldr	r3, [r2, r3]
   11cfc:	0018      	movs	r0, r3
   11cfe:	4b22      	ldr	r3, [pc, #136]	; (11d88 <hal_i2c_init+0x180>)
   11d00:	4929      	ldr	r1, [pc, #164]	; (11da8 <hal_i2c_init+0x1a0>)
   11d02:	001a      	movs	r2, r3
   11d04:	4b25      	ldr	r3, [pc, #148]	; (11d9c <hal_i2c_init+0x194>)
   11d06:	4798      	blx	r3
   11d08:	e015      	b.n	11d36 <hal_i2c_init+0x12e>
            case 4: i2c_master_init(&(i2c_hal_data[bus]->i2c_master_instance), SERCOM4, &config_i2c_master); break;
   11d0a:	4b1d      	ldr	r3, [pc, #116]	; (11d80 <hal_i2c_init+0x178>)
   11d0c:	693a      	ldr	r2, [r7, #16]
   11d0e:	0092      	lsls	r2, r2, #2
   11d10:	58d3      	ldr	r3, [r2, r3]
   11d12:	0018      	movs	r0, r3
   11d14:	4b1c      	ldr	r3, [pc, #112]	; (11d88 <hal_i2c_init+0x180>)
   11d16:	4925      	ldr	r1, [pc, #148]	; (11dac <hal_i2c_init+0x1a4>)
   11d18:	001a      	movs	r2, r3
   11d1a:	4b20      	ldr	r3, [pc, #128]	; (11d9c <hal_i2c_init+0x194>)
   11d1c:	4798      	blx	r3
   11d1e:	e00a      	b.n	11d36 <hal_i2c_init+0x12e>
            case 5: i2c_master_init(&(i2c_hal_data[bus]->i2c_master_instance), SERCOM5, &config_i2c_master); break;
   11d20:	4b17      	ldr	r3, [pc, #92]	; (11d80 <hal_i2c_init+0x178>)
   11d22:	693a      	ldr	r2, [r7, #16]
   11d24:	0092      	lsls	r2, r2, #2
   11d26:	58d3      	ldr	r3, [r2, r3]
   11d28:	0018      	movs	r0, r3
   11d2a:	4b17      	ldr	r3, [pc, #92]	; (11d88 <hal_i2c_init+0x180>)
   11d2c:	4920      	ldr	r1, [pc, #128]	; (11db0 <hal_i2c_init+0x1a8>)
   11d2e:	001a      	movs	r2, r3
   11d30:	4b1a      	ldr	r3, [pc, #104]	; (11d9c <hal_i2c_init+0x194>)
   11d32:	4798      	blx	r3
   11d34:	46c0      	nop			; (mov r8, r8)
            }

            // store this for use during the release phase
            i2c_hal_data[bus]->bus_index = bus;
   11d36:	4b12      	ldr	r3, [pc, #72]	; (11d80 <hal_i2c_init+0x178>)
   11d38:	693a      	ldr	r2, [r7, #16]
   11d3a:	0092      	lsls	r2, r2, #2
   11d3c:	58d3      	ldr	r3, [r2, r3]
   11d3e:	693a      	ldr	r2, [r7, #16]
   11d40:	611a      	str	r2, [r3, #16]
            i2c_master_enable(&(i2c_hal_data[bus]->i2c_master_instance));
   11d42:	4b0f      	ldr	r3, [pc, #60]	; (11d80 <hal_i2c_init+0x178>)
   11d44:	693a      	ldr	r2, [r7, #16]
   11d46:	0092      	lsls	r2, r2, #2
   11d48:	58d3      	ldr	r3, [r2, r3]
   11d4a:	0018      	movs	r0, r3
   11d4c:	4b19      	ldr	r3, [pc, #100]	; (11db4 <hal_i2c_init+0x1ac>)
   11d4e:	4798      	blx	r3
   11d50:	e006      	b.n	11d60 <hal_i2c_init+0x158>
        }
        else
        {
            // otherwise, another interface already initialized the bus, so this interface will share it and any different
            // cfg parameters will be ignored...first one to initialize this sets the configuration
            i2c_hal_data[bus]->ref_ct++;
   11d52:	4b0b      	ldr	r3, [pc, #44]	; (11d80 <hal_i2c_init+0x178>)
   11d54:	693a      	ldr	r2, [r7, #16]
   11d56:	0092      	lsls	r2, r2, #2
   11d58:	58d3      	ldr	r3, [r2, r3]
   11d5a:	68da      	ldr	r2, [r3, #12]
   11d5c:	3201      	adds	r2, #1
   11d5e:	60da      	str	r2, [r3, #12]
        }

        phal->hal_data = i2c_hal_data[bus];
   11d60:	4b07      	ldr	r3, [pc, #28]	; (11d80 <hal_i2c_init+0x178>)
   11d62:	693a      	ldr	r2, [r7, #16]
   11d64:	0092      	lsls	r2, r2, #2
   11d66:	58d2      	ldr	r2, [r2, r3]
   11d68:	68fb      	ldr	r3, [r7, #12]
   11d6a:	621a      	str	r2, [r3, #32]

        return ATCA_SUCCESS;
   11d6c:	2300      	movs	r3, #0
   11d6e:	e000      	b.n	11d72 <hal_i2c_init+0x16a>
    }

    return ATCA_COMM_FAIL;
   11d70:	23f0      	movs	r3, #240	; 0xf0
}
   11d72:	0018      	movs	r0, r3
   11d74:	46bd      	mov	sp, r7
   11d76:	b006      	add	sp, #24
   11d78:	bd80      	pop	{r7, pc}
   11d7a:	46c0      	nop			; (mov r8, r8)
   11d7c:	20000594 	.word	0x20000594
   11d80:	20002b84 	.word	0x20002b84
   11d84:	0001c0bd 	.word	0x0001c0bd
   11d88:	20000598 	.word	0x20000598
   11d8c:	00011aed 	.word	0x00011aed
   11d90:	00019cd9 	.word	0x00019cd9
   11d94:	00020ee8 	.word	0x00020ee8
   11d98:	42000800 	.word	0x42000800
   11d9c:	00005be9 	.word	0x00005be9
   11da0:	42000c00 	.word	0x42000c00
   11da4:	42001000 	.word	0x42001000
   11da8:	42001400 	.word	0x42001400
   11dac:	42001800 	.word	0x42001800
   11db0:	42001c00 	.word	0x42001c00
   11db4:	00011b71 	.word	0x00011b71

00011db8 <hal_i2c_post_init>:
/** \brief HAL implementation of I2C post init
 * \param[in] iface  instance
 * \return ATCA_SUCCESS
 */
ATCA_STATUS hal_i2c_post_init(ATCAIface iface)
{
   11db8:	b580      	push	{r7, lr}
   11dba:	b082      	sub	sp, #8
   11dbc:	af00      	add	r7, sp, #0
   11dbe:	6078      	str	r0, [r7, #4]
    return ATCA_SUCCESS;
   11dc0:	2300      	movs	r3, #0
}
   11dc2:	0018      	movs	r0, r3
   11dc4:	46bd      	mov	sp, r7
   11dc6:	b002      	add	sp, #8
   11dc8:	bd80      	pop	{r7, pc}
	...

00011dcc <hal_i2c_send>:
 * \param[in] txlength  number of bytes to send
 * \return ATCA_SUCCESS on success, otherwise an error code.
 */

ATCA_STATUS hal_i2c_send(ATCAIface iface, uint8_t *txdata, int txlength)
{
   11dcc:	b580      	push	{r7, lr}
   11dce:	b08a      	sub	sp, #40	; 0x28
   11dd0:	af00      	add	r7, sp, #0
   11dd2:	60f8      	str	r0, [r7, #12]
   11dd4:	60b9      	str	r1, [r7, #8]
   11dd6:	607a      	str	r2, [r7, #4]
    ATCAIfaceCfg *cfg = atgetifacecfg(iface);
   11dd8:	68fb      	ldr	r3, [r7, #12]
   11dda:	0018      	movs	r0, r3
   11ddc:	4b21      	ldr	r3, [pc, #132]	; (11e64 <hal_i2c_send+0x98>)
   11dde:	4798      	blx	r3
   11de0:	0003      	movs	r3, r0
   11de2:	627b      	str	r3, [r7, #36]	; 0x24
    int bus = cfg->atcai2c.bus;
   11de4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   11de6:	795b      	ldrb	r3, [r3, #5]
   11de8:	623b      	str	r3, [r7, #32]

    struct i2c_master_packet packet = {
        .address            = cfg->atcai2c.slave_address >> 1,
   11dea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   11dec:	791b      	ldrb	r3, [r3, #4]
    struct i2c_master_packet packet = {
   11dee:	085b      	lsrs	r3, r3, #1
   11df0:	b2db      	uxtb	r3, r3
   11df2:	b29a      	uxth	r2, r3
   11df4:	2314      	movs	r3, #20
   11df6:	18fb      	adds	r3, r7, r3
   11df8:	801a      	strh	r2, [r3, #0]
   11dfa:	687b      	ldr	r3, [r7, #4]
   11dfc:	b29a      	uxth	r2, r3
   11dfe:	2314      	movs	r3, #20
   11e00:	18fb      	adds	r3, r7, r3
   11e02:	805a      	strh	r2, [r3, #2]
   11e04:	2314      	movs	r3, #20
   11e06:	18fb      	adds	r3, r7, r3
   11e08:	68ba      	ldr	r2, [r7, #8]
   11e0a:	605a      	str	r2, [r3, #4]
   11e0c:	2314      	movs	r3, #20
   11e0e:	18fb      	adds	r3, r7, r3
   11e10:	2200      	movs	r2, #0
   11e12:	721a      	strb	r2, [r3, #8]
   11e14:	2314      	movs	r3, #20
   11e16:	18fb      	adds	r3, r7, r3
   11e18:	2200      	movs	r2, #0
   11e1a:	725a      	strb	r2, [r3, #9]
   11e1c:	2314      	movs	r3, #20
   11e1e:	18fb      	adds	r3, r7, r3
   11e20:	2200      	movs	r2, #0
   11e22:	729a      	strb	r2, [r3, #10]
    // for this implementation of I2C with CryptoAuth chips, txdata is assumed to have ATCAPacket format

    // other device types that don't require i/o tokens on the front end of a command need a different hal_i2c_send and wire it up instead of this one
    // this covers devices such as ATSHA204A and ATECCx08A that require a word address value pre-pended to the packet
    // txdata[0] is using _reserved byte of the ATCAPacket
    txdata[0] = 0x03;   // insert the Word Address Value, Command token
   11e24:	68bb      	ldr	r3, [r7, #8]
   11e26:	2203      	movs	r2, #3
   11e28:	701a      	strb	r2, [r3, #0]
    txlength++;         // account for word address value byte.
   11e2a:	687b      	ldr	r3, [r7, #4]
   11e2c:	3301      	adds	r3, #1
   11e2e:	607b      	str	r3, [r7, #4]
    packet.data_length = txlength;
   11e30:	687b      	ldr	r3, [r7, #4]
   11e32:	b29a      	uxth	r2, r3
   11e34:	2314      	movs	r3, #20
   11e36:	18fb      	adds	r3, r7, r3
   11e38:	805a      	strh	r2, [r3, #2]

    //	statusCode = i2c_master_write_packet_wait(&i2c_master_instance, &packet);
    //if ( i2c_master_write_packet_wait_no_stop( &(i2c_hal_data[bus]->i2c_master_instance), &packet) != STATUS_OK)
    if (i2c_master_write_packet_wait(&(i2c_hal_data[bus]->i2c_master_instance), &packet) != STATUS_OK)
   11e3a:	4b0b      	ldr	r3, [pc, #44]	; (11e68 <hal_i2c_send+0x9c>)
   11e3c:	6a3a      	ldr	r2, [r7, #32]
   11e3e:	0092      	lsls	r2, r2, #2
   11e40:	58d3      	ldr	r3, [r2, r3]
   11e42:	001a      	movs	r2, r3
   11e44:	2314      	movs	r3, #20
   11e46:	18fb      	adds	r3, r7, r3
   11e48:	0019      	movs	r1, r3
   11e4a:	0010      	movs	r0, r2
   11e4c:	4b07      	ldr	r3, [pc, #28]	; (11e6c <hal_i2c_send+0xa0>)
   11e4e:	4798      	blx	r3
   11e50:	1e03      	subs	r3, r0, #0
   11e52:	d001      	beq.n	11e58 <hal_i2c_send+0x8c>
    {
        return ATCA_COMM_FAIL;
   11e54:	23f0      	movs	r3, #240	; 0xf0
   11e56:	e000      	b.n	11e5a <hal_i2c_send+0x8e>
    }

    return ATCA_SUCCESS;
   11e58:	2300      	movs	r3, #0
}
   11e5a:	0018      	movs	r0, r3
   11e5c:	46bd      	mov	sp, r7
   11e5e:	b00a      	add	sp, #40	; 0x28
   11e60:	bd80      	pop	{r7, pc}
   11e62:	46c0      	nop			; (mov r8, r8)
   11e64:	0000fdbd 	.word	0x0000fdbd
   11e68:	20002b84 	.word	0x20002b84
   11e6c:	00006221 	.word	0x00006221

00011e70 <hal_i2c_receive>:
 * \param[in] rxlength  ptr to expected number of receive bytes to request
 * \return ATCA_SUCCESS on success, otherwise an error code.
 */

ATCA_STATUS hal_i2c_receive(ATCAIface iface, uint8_t *rxdata, uint16_t *rxlength)
{
   11e70:	b580      	push	{r7, lr}
   11e72:	b08c      	sub	sp, #48	; 0x30
   11e74:	af00      	add	r7, sp, #0
   11e76:	60f8      	str	r0, [r7, #12]
   11e78:	60b9      	str	r1, [r7, #8]
   11e7a:	607a      	str	r2, [r7, #4]
    ATCAIfaceCfg *cfg = atgetifacecfg(iface);
   11e7c:	68fb      	ldr	r3, [r7, #12]
   11e7e:	0018      	movs	r0, r3
   11e80:	4b29      	ldr	r3, [pc, #164]	; (11f28 <hal_i2c_receive+0xb8>)
   11e82:	4798      	blx	r3
   11e84:	0003      	movs	r3, r0
   11e86:	627b      	str	r3, [r7, #36]	; 0x24
    int bus = cfg->atcai2c.bus;
   11e88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   11e8a:	795b      	ldrb	r3, [r3, #5]
   11e8c:	623b      	str	r3, [r7, #32]
    int retries = cfg->rx_retries;
   11e8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   11e90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   11e92:	62fb      	str	r3, [r7, #44]	; 0x2c
    int status = !STATUS_OK;
   11e94:	2301      	movs	r3, #1
   11e96:	62bb      	str	r3, [r7, #40]	; 0x28

    struct i2c_master_packet packet = {
        .address            = cfg->atcai2c.slave_address >> 1,
   11e98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   11e9a:	791b      	ldrb	r3, [r3, #4]
    struct i2c_master_packet packet = {
   11e9c:	085b      	lsrs	r3, r3, #1
   11e9e:	b2db      	uxtb	r3, r3
   11ea0:	b29a      	uxth	r2, r3
   11ea2:	2314      	movs	r3, #20
   11ea4:	18fb      	adds	r3, r7, r3
   11ea6:	801a      	strh	r2, [r3, #0]
        .data_length        = *rxlength,
   11ea8:	687b      	ldr	r3, [r7, #4]
   11eaa:	881a      	ldrh	r2, [r3, #0]
    struct i2c_master_packet packet = {
   11eac:	2314      	movs	r3, #20
   11eae:	18fb      	adds	r3, r7, r3
   11eb0:	805a      	strh	r2, [r3, #2]
   11eb2:	2314      	movs	r3, #20
   11eb4:	18fb      	adds	r3, r7, r3
   11eb6:	68ba      	ldr	r2, [r7, #8]
   11eb8:	605a      	str	r2, [r3, #4]
   11eba:	2314      	movs	r3, #20
   11ebc:	18fb      	adds	r3, r7, r3
   11ebe:	2200      	movs	r2, #0
   11ec0:	721a      	strb	r2, [r3, #8]
   11ec2:	2314      	movs	r3, #20
   11ec4:	18fb      	adds	r3, r7, r3
   11ec6:	2200      	movs	r2, #0
   11ec8:	725a      	strb	r2, [r3, #9]
   11eca:	2314      	movs	r3, #20
   11ecc:	18fb      	adds	r3, r7, r3
   11ece:	2200      	movs	r2, #0
   11ed0:	729a      	strb	r2, [r3, #10]
        .ten_bit_address    = false,
        .high_speed         = false,
        .hs_master_code     = 0x0,
    };

    while (retries-- > 0 && status != STATUS_OK)
   11ed2:	e00c      	b.n	11eee <hal_i2c_receive+0x7e>
    {
        status = i2c_master_read_packet_wait(&(i2c_hal_data[bus]->i2c_master_instance), &packet);
   11ed4:	4b15      	ldr	r3, [pc, #84]	; (11f2c <hal_i2c_receive+0xbc>)
   11ed6:	6a3a      	ldr	r2, [r7, #32]
   11ed8:	0092      	lsls	r2, r2, #2
   11eda:	58d3      	ldr	r3, [r2, r3]
   11edc:	001a      	movs	r2, r3
   11ede:	2314      	movs	r3, #20
   11ee0:	18fb      	adds	r3, r7, r3
   11ee2:	0019      	movs	r1, r3
   11ee4:	0010      	movs	r0, r2
   11ee6:	4b12      	ldr	r3, [pc, #72]	; (11f30 <hal_i2c_receive+0xc0>)
   11ee8:	4798      	blx	r3
   11eea:	0003      	movs	r3, r0
   11eec:	62bb      	str	r3, [r7, #40]	; 0x28
    while (retries-- > 0 && status != STATUS_OK)
   11eee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   11ef0:	1e5a      	subs	r2, r3, #1
   11ef2:	62fa      	str	r2, [r7, #44]	; 0x2c
   11ef4:	2b00      	cmp	r3, #0
   11ef6:	dd02      	ble.n	11efe <hal_i2c_receive+0x8e>
   11ef8:	6abb      	ldr	r3, [r7, #40]	; 0x28
   11efa:	2b00      	cmp	r3, #0
   11efc:	d1ea      	bne.n	11ed4 <hal_i2c_receive+0x64>
    }

    if (status != STATUS_OK)
   11efe:	6abb      	ldr	r3, [r7, #40]	; 0x28
   11f00:	2b00      	cmp	r3, #0
   11f02:	d001      	beq.n	11f08 <hal_i2c_receive+0x98>
    {
        return ATCA_COMM_FAIL;
   11f04:	23f0      	movs	r3, #240	; 0xf0
   11f06:	e00a      	b.n	11f1e <hal_i2c_receive+0xae>
    }

    if (atCheckCrc(packet.data) != ATCA_SUCCESS)
   11f08:	2314      	movs	r3, #20
   11f0a:	18fb      	adds	r3, r7, r3
   11f0c:	685b      	ldr	r3, [r3, #4]
   11f0e:	0018      	movs	r0, r3
   11f10:	4b08      	ldr	r3, [pc, #32]	; (11f34 <hal_i2c_receive+0xc4>)
   11f12:	4798      	blx	r3
   11f14:	1e03      	subs	r3, r0, #0
   11f16:	d001      	beq.n	11f1c <hal_i2c_receive+0xac>
    {
        return ATCA_COMM_FAIL;
   11f18:	23f0      	movs	r3, #240	; 0xf0
   11f1a:	e000      	b.n	11f1e <hal_i2c_receive+0xae>
    }

    return ATCA_SUCCESS;
   11f1c:	2300      	movs	r3, #0
}
   11f1e:	0018      	movs	r0, r3
   11f20:	46bd      	mov	sp, r7
   11f22:	b00c      	add	sp, #48	; 0x30
   11f24:	bd80      	pop	{r7, pc}
   11f26:	46c0      	nop			; (mov r8, r8)
   11f28:	0000fdbd 	.word	0x0000fdbd
   11f2c:	20002b84 	.word	0x20002b84
   11f30:	00006079 	.word	0x00006079
   11f34:	0000fa4d 	.word	0x0000fa4d

00011f38 <change_i2c_speed>:
 * \param[in] iface  interface on which to change bus speed
 * \param[in] speed  baud rate (typically 100000 or 400000)
 */

void change_i2c_speed(ATCAIface iface, uint32_t speed)
{
   11f38:	b580      	push	{r7, lr}
   11f3a:	b084      	sub	sp, #16
   11f3c:	af00      	add	r7, sp, #0
   11f3e:	6078      	str	r0, [r7, #4]
   11f40:	6039      	str	r1, [r7, #0]
    ATCAIfaceCfg *cfg = atgetifacecfg(iface);
   11f42:	687b      	ldr	r3, [r7, #4]
   11f44:	0018      	movs	r0, r3
   11f46:	4b38      	ldr	r3, [pc, #224]	; (12028 <change_i2c_speed+0xf0>)
   11f48:	4798      	blx	r3
   11f4a:	0003      	movs	r3, r0
   11f4c:	60fb      	str	r3, [r7, #12]
    int bus = cfg->atcai2c.bus;
   11f4e:	68fb      	ldr	r3, [r7, #12]
   11f50:	795b      	ldrb	r3, [r3, #5]
   11f52:	60bb      	str	r3, [r7, #8]

    config_i2c_master.buffer_timeout = 10000;
   11f54:	4b35      	ldr	r3, [pc, #212]	; (1202c <change_i2c_speed+0xf4>)
   11f56:	4a36      	ldr	r2, [pc, #216]	; (12030 <change_i2c_speed+0xf8>)
   11f58:	82da      	strh	r2, [r3, #22]
    config_i2c_master.baud_rate = speed / 1000;
   11f5a:	6838      	ldr	r0, [r7, #0]
   11f5c:	4b35      	ldr	r3, [pc, #212]	; (12034 <change_i2c_speed+0xfc>)
   11f5e:	22fa      	movs	r2, #250	; 0xfa
   11f60:	0091      	lsls	r1, r2, #2
   11f62:	4798      	blx	r3
   11f64:	0003      	movs	r3, r0
   11f66:	001a      	movs	r2, r3
   11f68:	4b30      	ldr	r3, [pc, #192]	; (1202c <change_i2c_speed+0xf4>)
   11f6a:	601a      	str	r2, [r3, #0]

    i2c_master_disable(&(i2c_hal_data[bus]->i2c_master_instance));
   11f6c:	4b32      	ldr	r3, [pc, #200]	; (12038 <change_i2c_speed+0x100>)
   11f6e:	68ba      	ldr	r2, [r7, #8]
   11f70:	0092      	lsls	r2, r2, #2
   11f72:	58d3      	ldr	r3, [r2, r3]
   11f74:	0018      	movs	r0, r3
   11f76:	4b31      	ldr	r3, [pc, #196]	; (1203c <change_i2c_speed+0x104>)
   11f78:	4798      	blx	r3

    switch (bus)
   11f7a:	68bb      	ldr	r3, [r7, #8]
   11f7c:	2b05      	cmp	r3, #5
   11f7e:	d847      	bhi.n	12010 <change_i2c_speed+0xd8>
   11f80:	68bb      	ldr	r3, [r7, #8]
   11f82:	009a      	lsls	r2, r3, #2
   11f84:	4b2e      	ldr	r3, [pc, #184]	; (12040 <change_i2c_speed+0x108>)
   11f86:	18d3      	adds	r3, r2, r3
   11f88:	681b      	ldr	r3, [r3, #0]
   11f8a:	469f      	mov	pc, r3
    {
    case 0: i2c_master_init(&(i2c_hal_data[bus]->i2c_master_instance), SERCOM0, &config_i2c_master); break;
   11f8c:	4b2a      	ldr	r3, [pc, #168]	; (12038 <change_i2c_speed+0x100>)
   11f8e:	68ba      	ldr	r2, [r7, #8]
   11f90:	0092      	lsls	r2, r2, #2
   11f92:	58d3      	ldr	r3, [r2, r3]
   11f94:	0018      	movs	r0, r3
   11f96:	4b25      	ldr	r3, [pc, #148]	; (1202c <change_i2c_speed+0xf4>)
   11f98:	492a      	ldr	r1, [pc, #168]	; (12044 <change_i2c_speed+0x10c>)
   11f9a:	001a      	movs	r2, r3
   11f9c:	4b2a      	ldr	r3, [pc, #168]	; (12048 <change_i2c_speed+0x110>)
   11f9e:	4798      	blx	r3
   11fa0:	e036      	b.n	12010 <change_i2c_speed+0xd8>
    case 1: i2c_master_init(&(i2c_hal_data[bus]->i2c_master_instance), SERCOM1, &config_i2c_master); break;
   11fa2:	4b25      	ldr	r3, [pc, #148]	; (12038 <change_i2c_speed+0x100>)
   11fa4:	68ba      	ldr	r2, [r7, #8]
   11fa6:	0092      	lsls	r2, r2, #2
   11fa8:	58d3      	ldr	r3, [r2, r3]
   11faa:	0018      	movs	r0, r3
   11fac:	4b1f      	ldr	r3, [pc, #124]	; (1202c <change_i2c_speed+0xf4>)
   11fae:	4927      	ldr	r1, [pc, #156]	; (1204c <change_i2c_speed+0x114>)
   11fb0:	001a      	movs	r2, r3
   11fb2:	4b25      	ldr	r3, [pc, #148]	; (12048 <change_i2c_speed+0x110>)
   11fb4:	4798      	blx	r3
   11fb6:	e02b      	b.n	12010 <change_i2c_speed+0xd8>
    case 2: i2c_master_init(&(i2c_hal_data[bus]->i2c_master_instance), SERCOM2, &config_i2c_master); break;
   11fb8:	4b1f      	ldr	r3, [pc, #124]	; (12038 <change_i2c_speed+0x100>)
   11fba:	68ba      	ldr	r2, [r7, #8]
   11fbc:	0092      	lsls	r2, r2, #2
   11fbe:	58d3      	ldr	r3, [r2, r3]
   11fc0:	0018      	movs	r0, r3
   11fc2:	4b1a      	ldr	r3, [pc, #104]	; (1202c <change_i2c_speed+0xf4>)
   11fc4:	4922      	ldr	r1, [pc, #136]	; (12050 <change_i2c_speed+0x118>)
   11fc6:	001a      	movs	r2, r3
   11fc8:	4b1f      	ldr	r3, [pc, #124]	; (12048 <change_i2c_speed+0x110>)
   11fca:	4798      	blx	r3
   11fcc:	e020      	b.n	12010 <change_i2c_speed+0xd8>
    case 3: i2c_master_init(&(i2c_hal_data[bus]->i2c_master_instance), SERCOM3, &config_i2c_master); break;
   11fce:	4b1a      	ldr	r3, [pc, #104]	; (12038 <change_i2c_speed+0x100>)
   11fd0:	68ba      	ldr	r2, [r7, #8]
   11fd2:	0092      	lsls	r2, r2, #2
   11fd4:	58d3      	ldr	r3, [r2, r3]
   11fd6:	0018      	movs	r0, r3
   11fd8:	4b14      	ldr	r3, [pc, #80]	; (1202c <change_i2c_speed+0xf4>)
   11fda:	491e      	ldr	r1, [pc, #120]	; (12054 <change_i2c_speed+0x11c>)
   11fdc:	001a      	movs	r2, r3
   11fde:	4b1a      	ldr	r3, [pc, #104]	; (12048 <change_i2c_speed+0x110>)
   11fe0:	4798      	blx	r3
   11fe2:	e015      	b.n	12010 <change_i2c_speed+0xd8>
    case 4: i2c_master_init(&(i2c_hal_data[bus]->i2c_master_instance), SERCOM4, &config_i2c_master); break;
   11fe4:	4b14      	ldr	r3, [pc, #80]	; (12038 <change_i2c_speed+0x100>)
   11fe6:	68ba      	ldr	r2, [r7, #8]
   11fe8:	0092      	lsls	r2, r2, #2
   11fea:	58d3      	ldr	r3, [r2, r3]
   11fec:	0018      	movs	r0, r3
   11fee:	4b0f      	ldr	r3, [pc, #60]	; (1202c <change_i2c_speed+0xf4>)
   11ff0:	4919      	ldr	r1, [pc, #100]	; (12058 <change_i2c_speed+0x120>)
   11ff2:	001a      	movs	r2, r3
   11ff4:	4b14      	ldr	r3, [pc, #80]	; (12048 <change_i2c_speed+0x110>)
   11ff6:	4798      	blx	r3
   11ff8:	e00a      	b.n	12010 <change_i2c_speed+0xd8>
    case 5: i2c_master_init(&(i2c_hal_data[bus]->i2c_master_instance), SERCOM5, &config_i2c_master); break;
   11ffa:	4b0f      	ldr	r3, [pc, #60]	; (12038 <change_i2c_speed+0x100>)
   11ffc:	68ba      	ldr	r2, [r7, #8]
   11ffe:	0092      	lsls	r2, r2, #2
   12000:	58d3      	ldr	r3, [r2, r3]
   12002:	0018      	movs	r0, r3
   12004:	4b09      	ldr	r3, [pc, #36]	; (1202c <change_i2c_speed+0xf4>)
   12006:	4915      	ldr	r1, [pc, #84]	; (1205c <change_i2c_speed+0x124>)
   12008:	001a      	movs	r2, r3
   1200a:	4b0f      	ldr	r3, [pc, #60]	; (12048 <change_i2c_speed+0x110>)
   1200c:	4798      	blx	r3
   1200e:	46c0      	nop			; (mov r8, r8)
    }

    i2c_master_enable(&(i2c_hal_data[bus]->i2c_master_instance));
   12010:	4b09      	ldr	r3, [pc, #36]	; (12038 <change_i2c_speed+0x100>)
   12012:	68ba      	ldr	r2, [r7, #8]
   12014:	0092      	lsls	r2, r2, #2
   12016:	58d3      	ldr	r3, [r2, r3]
   12018:	0018      	movs	r0, r3
   1201a:	4b11      	ldr	r3, [pc, #68]	; (12060 <change_i2c_speed+0x128>)
   1201c:	4798      	blx	r3
}
   1201e:	46c0      	nop			; (mov r8, r8)
   12020:	46bd      	mov	sp, r7
   12022:	b004      	add	sp, #16
   12024:	bd80      	pop	{r7, pc}
   12026:	46c0      	nop			; (mov r8, r8)
   12028:	0000fdbd 	.word	0x0000fdbd
   1202c:	20000598 	.word	0x20000598
   12030:	00002710 	.word	0x00002710
   12034:	00019cd9 	.word	0x00019cd9
   12038:	20002b84 	.word	0x20002b84
   1203c:	00011bcd 	.word	0x00011bcd
   12040:	00020f00 	.word	0x00020f00
   12044:	42000800 	.word	0x42000800
   12048:	00005be9 	.word	0x00005be9
   1204c:	42000c00 	.word	0x42000c00
   12050:	42001000 	.word	0x42001000
   12054:	42001400 	.word	0x42001400
   12058:	42001800 	.word	0x42001800
   1205c:	42001c00 	.word	0x42001c00
   12060:	00011b71 	.word	0x00011b71

00012064 <hal_i2c_wake>:
 * \param[in] iface  interface to logical device to wakeup
 * \return ATCA_SUCCESS on success, otherwise an error code.
 */

ATCA_STATUS hal_i2c_wake(ATCAIface iface)
{
   12064:	b580      	push	{r7, lr}
   12066:	b08c      	sub	sp, #48	; 0x30
   12068:	af00      	add	r7, sp, #0
   1206a:	6078      	str	r0, [r7, #4]
    ATCAIfaceCfg *cfg = atgetifacecfg(iface);
   1206c:	687b      	ldr	r3, [r7, #4]
   1206e:	0018      	movs	r0, r3
   12070:	4b46      	ldr	r3, [pc, #280]	; (1218c <hal_i2c_wake+0x128>)
   12072:	4798      	blx	r3
   12074:	0003      	movs	r3, r0
   12076:	627b      	str	r3, [r7, #36]	; 0x24
    int bus = cfg->atcai2c.bus;
   12078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1207a:	795b      	ldrb	r3, [r3, #5]
   1207c:	623b      	str	r3, [r7, #32]
    int retries = cfg->rx_retries;
   1207e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   12080:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   12082:	62fb      	str	r3, [r7, #44]	; 0x2c
    uint32_t bdrt = cfg->atcai2c.baud;
   12084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   12086:	689b      	ldr	r3, [r3, #8]
   12088:	61fb      	str	r3, [r7, #28]
    int status = !STATUS_OK;
   1208a:	2301      	movs	r3, #1
   1208c:	62bb      	str	r3, [r7, #40]	; 0x28
    uint8_t data[4], expected[4] = { 0x04, 0x11, 0x33, 0x43 };
   1208e:	2314      	movs	r3, #20
   12090:	18fb      	adds	r3, r7, r3
   12092:	4a3f      	ldr	r2, [pc, #252]	; (12190 <hal_i2c_wake+0x12c>)
   12094:	6812      	ldr	r2, [r2, #0]
   12096:	601a      	str	r2, [r3, #0]

    if (bdrt != 100000)    // if not already at 100KHz, change it
   12098:	69fb      	ldr	r3, [r7, #28]
   1209a:	4a3e      	ldr	r2, [pc, #248]	; (12194 <hal_i2c_wake+0x130>)
   1209c:	4293      	cmp	r3, r2
   1209e:	d005      	beq.n	120ac <hal_i2c_wake+0x48>
    {
        change_i2c_speed(iface, 100000);
   120a0:	4a3c      	ldr	r2, [pc, #240]	; (12194 <hal_i2c_wake+0x130>)
   120a2:	687b      	ldr	r3, [r7, #4]
   120a4:	0011      	movs	r1, r2
   120a6:	0018      	movs	r0, r3
   120a8:	4b3b      	ldr	r3, [pc, #236]	; (12198 <hal_i2c_wake+0x134>)
   120aa:	4798      	blx	r3
    }

    // Send the wake by writing to an address of 0x00
    struct i2c_master_packet packet = {
   120ac:	2308      	movs	r3, #8
   120ae:	18fb      	adds	r3, r7, r3
   120b0:	2200      	movs	r2, #0
   120b2:	801a      	strh	r2, [r3, #0]
   120b4:	2308      	movs	r3, #8
   120b6:	18fb      	adds	r3, r7, r3
   120b8:	2200      	movs	r2, #0
   120ba:	805a      	strh	r2, [r3, #2]
   120bc:	2308      	movs	r3, #8
   120be:	18fb      	adds	r3, r7, r3
   120c0:	2218      	movs	r2, #24
   120c2:	18ba      	adds	r2, r7, r2
   120c4:	605a      	str	r2, [r3, #4]
   120c6:	2308      	movs	r3, #8
   120c8:	18fb      	adds	r3, r7, r3
   120ca:	2200      	movs	r2, #0
   120cc:	721a      	strb	r2, [r3, #8]
   120ce:	2308      	movs	r3, #8
   120d0:	18fb      	adds	r3, r7, r3
   120d2:	2200      	movs	r2, #0
   120d4:	725a      	strb	r2, [r3, #9]
   120d6:	2308      	movs	r3, #8
   120d8:	18fb      	adds	r3, r7, r3
   120da:	2200      	movs	r2, #0
   120dc:	729a      	strb	r2, [r3, #10]
        .high_speed         = false,
        .hs_master_code     = 0x0,
    };

    // Send the 00 address as the wake pulse
    i2c_master_write_packet_wait(&(i2c_hal_data[bus]->i2c_master_instance), &packet);       // part will NACK, so don't check for status
   120de:	4b2f      	ldr	r3, [pc, #188]	; (1219c <hal_i2c_wake+0x138>)
   120e0:	6a3a      	ldr	r2, [r7, #32]
   120e2:	0092      	lsls	r2, r2, #2
   120e4:	58d3      	ldr	r3, [r2, r3]
   120e6:	001a      	movs	r2, r3
   120e8:	2308      	movs	r3, #8
   120ea:	18fb      	adds	r3, r7, r3
   120ec:	0019      	movs	r1, r3
   120ee:	0010      	movs	r0, r2
   120f0:	4b2b      	ldr	r3, [pc, #172]	; (121a0 <hal_i2c_wake+0x13c>)
   120f2:	4798      	blx	r3

    atca_delay_us(cfg->wake_delay);                                                         // wait tWHI + tWLO which is configured based on device type and configuration structure
   120f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   120f6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
   120f8:	0018      	movs	r0, r3
   120fa:	4b2a      	ldr	r3, [pc, #168]	; (121a4 <hal_i2c_wake+0x140>)
   120fc:	4798      	blx	r3

    packet.address = cfg->atcai2c.slave_address >> 1;
   120fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   12100:	791b      	ldrb	r3, [r3, #4]
   12102:	085b      	lsrs	r3, r3, #1
   12104:	b2db      	uxtb	r3, r3
   12106:	b29a      	uxth	r2, r3
   12108:	2308      	movs	r3, #8
   1210a:	18fb      	adds	r3, r7, r3
   1210c:	801a      	strh	r2, [r3, #0]
    packet.data_length = 4;
   1210e:	2308      	movs	r3, #8
   12110:	18fb      	adds	r3, r7, r3
   12112:	2204      	movs	r2, #4
   12114:	805a      	strh	r2, [r3, #2]
    packet.data = data;
   12116:	2308      	movs	r3, #8
   12118:	18fb      	adds	r3, r7, r3
   1211a:	2218      	movs	r2, #24
   1211c:	18ba      	adds	r2, r7, r2
   1211e:	605a      	str	r2, [r3, #4]

    while (retries-- > 0 && status != STATUS_OK)
   12120:	e00c      	b.n	1213c <hal_i2c_wake+0xd8>
    {
        status = i2c_master_read_packet_wait(&(i2c_hal_data[bus]->i2c_master_instance), &packet);
   12122:	4b1e      	ldr	r3, [pc, #120]	; (1219c <hal_i2c_wake+0x138>)
   12124:	6a3a      	ldr	r2, [r7, #32]
   12126:	0092      	lsls	r2, r2, #2
   12128:	58d3      	ldr	r3, [r2, r3]
   1212a:	001a      	movs	r2, r3
   1212c:	2308      	movs	r3, #8
   1212e:	18fb      	adds	r3, r7, r3
   12130:	0019      	movs	r1, r3
   12132:	0010      	movs	r0, r2
   12134:	4b1c      	ldr	r3, [pc, #112]	; (121a8 <hal_i2c_wake+0x144>)
   12136:	4798      	blx	r3
   12138:	0003      	movs	r3, r0
   1213a:	62bb      	str	r3, [r7, #40]	; 0x28
    while (retries-- > 0 && status != STATUS_OK)
   1213c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1213e:	1e5a      	subs	r2, r3, #1
   12140:	62fa      	str	r2, [r7, #44]	; 0x2c
   12142:	2b00      	cmp	r3, #0
   12144:	dd02      	ble.n	1214c <hal_i2c_wake+0xe8>
   12146:	6abb      	ldr	r3, [r7, #40]	; 0x28
   12148:	2b00      	cmp	r3, #0
   1214a:	d1ea      	bne.n	12122 <hal_i2c_wake+0xbe>
    }

    // if necessary, revert baud rate to what came in.
    if (bdrt != 100000)
   1214c:	69fb      	ldr	r3, [r7, #28]
   1214e:	4a11      	ldr	r2, [pc, #68]	; (12194 <hal_i2c_wake+0x130>)
   12150:	4293      	cmp	r3, r2
   12152:	d005      	beq.n	12160 <hal_i2c_wake+0xfc>
    {
        change_i2c_speed(iface, bdrt);
   12154:	69fa      	ldr	r2, [r7, #28]
   12156:	687b      	ldr	r3, [r7, #4]
   12158:	0011      	movs	r1, r2
   1215a:	0018      	movs	r0, r3
   1215c:	4b0e      	ldr	r3, [pc, #56]	; (12198 <hal_i2c_wake+0x134>)
   1215e:	4798      	blx	r3
    }

    if (status != STATUS_OK)
   12160:	6abb      	ldr	r3, [r7, #40]	; 0x28
   12162:	2b00      	cmp	r3, #0
   12164:	d001      	beq.n	1216a <hal_i2c_wake+0x106>
    {
        return ATCA_COMM_FAIL;
   12166:	23f0      	movs	r3, #240	; 0xf0
   12168:	e00c      	b.n	12184 <hal_i2c_wake+0x120>
    }

    if (memcmp(data, expected, 4) == 0)
   1216a:	2314      	movs	r3, #20
   1216c:	18f9      	adds	r1, r7, r3
   1216e:	2318      	movs	r3, #24
   12170:	18fb      	adds	r3, r7, r3
   12172:	2204      	movs	r2, #4
   12174:	0018      	movs	r0, r3
   12176:	4b0d      	ldr	r3, [pc, #52]	; (121ac <hal_i2c_wake+0x148>)
   12178:	4798      	blx	r3
   1217a:	1e03      	subs	r3, r0, #0
   1217c:	d101      	bne.n	12182 <hal_i2c_wake+0x11e>
    {
        return ATCA_SUCCESS;
   1217e:	2300      	movs	r3, #0
   12180:	e000      	b.n	12184 <hal_i2c_wake+0x120>
    }

    return ATCA_COMM_FAIL;
   12182:	23f0      	movs	r3, #240	; 0xf0
}
   12184:	0018      	movs	r0, r3
   12186:	46bd      	mov	sp, r7
   12188:	b00c      	add	sp, #48	; 0x30
   1218a:	bd80      	pop	{r7, pc}
   1218c:	0000fdbd 	.word	0x0000fdbd
   12190:	00020ee4 	.word	0x00020ee4
   12194:	000186a0 	.word	0x000186a0
   12198:	00011f39 	.word	0x00011f39
   1219c:	20002b84 	.word	0x20002b84
   121a0:	00006221 	.word	0x00006221
   121a4:	0001234d 	.word	0x0001234d
   121a8:	00006079 	.word	0x00006079
   121ac:	0001c11f 	.word	0x0001c11f

000121b0 <hal_i2c_idle>:
 * \param[in] iface  interface to logical device to idle
 * \return ATCA_SUCCESS on success, otherwise an error code.
 */

ATCA_STATUS hal_i2c_idle(ATCAIface iface)
{
   121b0:	b580      	push	{r7, lr}
   121b2:	b088      	sub	sp, #32
   121b4:	af00      	add	r7, sp, #0
   121b6:	6078      	str	r0, [r7, #4]
    ATCAIfaceCfg *cfg = atgetifacecfg(iface);
   121b8:	687b      	ldr	r3, [r7, #4]
   121ba:	0018      	movs	r0, r3
   121bc:	4b1d      	ldr	r3, [pc, #116]	; (12234 <hal_i2c_idle+0x84>)
   121be:	4798      	blx	r3
   121c0:	0003      	movs	r3, r0
   121c2:	61fb      	str	r3, [r7, #28]
    int bus = cfg->atcai2c.bus;
   121c4:	69fb      	ldr	r3, [r7, #28]
   121c6:	795b      	ldrb	r3, [r3, #5]
   121c8:	61bb      	str	r3, [r7, #24]
    uint8_t data[4];

    struct i2c_master_packet packet = {
        .address            = cfg->atcai2c.slave_address >> 1,
   121ca:	69fb      	ldr	r3, [r7, #28]
   121cc:	791b      	ldrb	r3, [r3, #4]
    struct i2c_master_packet packet = {
   121ce:	085b      	lsrs	r3, r3, #1
   121d0:	b2db      	uxtb	r3, r3
   121d2:	b29a      	uxth	r2, r3
   121d4:	2308      	movs	r3, #8
   121d6:	18fb      	adds	r3, r7, r3
   121d8:	801a      	strh	r2, [r3, #0]
   121da:	2308      	movs	r3, #8
   121dc:	18fb      	adds	r3, r7, r3
   121de:	2201      	movs	r2, #1
   121e0:	805a      	strh	r2, [r3, #2]
   121e2:	2308      	movs	r3, #8
   121e4:	18fb      	adds	r3, r7, r3
   121e6:	2214      	movs	r2, #20
   121e8:	18ba      	adds	r2, r7, r2
   121ea:	605a      	str	r2, [r3, #4]
   121ec:	2308      	movs	r3, #8
   121ee:	18fb      	adds	r3, r7, r3
   121f0:	2200      	movs	r2, #0
   121f2:	721a      	strb	r2, [r3, #8]
   121f4:	2308      	movs	r3, #8
   121f6:	18fb      	adds	r3, r7, r3
   121f8:	2200      	movs	r2, #0
   121fa:	725a      	strb	r2, [r3, #9]
   121fc:	2308      	movs	r3, #8
   121fe:	18fb      	adds	r3, r7, r3
   12200:	2200      	movs	r2, #0
   12202:	729a      	strb	r2, [r3, #10]
        .ten_bit_address    = false,
        .high_speed         = false,
        .hs_master_code     = 0x0,
    };

    data[0] = 0x02;  // idle word address value
   12204:	2314      	movs	r3, #20
   12206:	18fb      	adds	r3, r7, r3
   12208:	2202      	movs	r2, #2
   1220a:	701a      	strb	r2, [r3, #0]
    if (i2c_master_write_packet_wait(&(i2c_hal_data[bus]->i2c_master_instance), &packet) != STATUS_OK)
   1220c:	4b0a      	ldr	r3, [pc, #40]	; (12238 <hal_i2c_idle+0x88>)
   1220e:	69ba      	ldr	r2, [r7, #24]
   12210:	0092      	lsls	r2, r2, #2
   12212:	58d3      	ldr	r3, [r2, r3]
   12214:	001a      	movs	r2, r3
   12216:	2308      	movs	r3, #8
   12218:	18fb      	adds	r3, r7, r3
   1221a:	0019      	movs	r1, r3
   1221c:	0010      	movs	r0, r2
   1221e:	4b07      	ldr	r3, [pc, #28]	; (1223c <hal_i2c_idle+0x8c>)
   12220:	4798      	blx	r3
   12222:	1e03      	subs	r3, r0, #0
   12224:	d001      	beq.n	1222a <hal_i2c_idle+0x7a>
    {
        return ATCA_COMM_FAIL;
   12226:	23f0      	movs	r3, #240	; 0xf0
   12228:	e000      	b.n	1222c <hal_i2c_idle+0x7c>
    }

    return ATCA_SUCCESS;
   1222a:	2300      	movs	r3, #0

}
   1222c:	0018      	movs	r0, r3
   1222e:	46bd      	mov	sp, r7
   12230:	b008      	add	sp, #32
   12232:	bd80      	pop	{r7, pc}
   12234:	0000fdbd 	.word	0x0000fdbd
   12238:	20002b84 	.word	0x20002b84
   1223c:	00006221 	.word	0x00006221

00012240 <hal_i2c_sleep>:
 * \param[in] iface  interface to logical device to sleep
 * \return ATCA_SUCCESS on success, otherwise an error code.
 */

ATCA_STATUS hal_i2c_sleep(ATCAIface iface)
{
   12240:	b580      	push	{r7, lr}
   12242:	b088      	sub	sp, #32
   12244:	af00      	add	r7, sp, #0
   12246:	6078      	str	r0, [r7, #4]
    ATCAIfaceCfg *cfg = atgetifacecfg(iface);
   12248:	687b      	ldr	r3, [r7, #4]
   1224a:	0018      	movs	r0, r3
   1224c:	4b1d      	ldr	r3, [pc, #116]	; (122c4 <hal_i2c_sleep+0x84>)
   1224e:	4798      	blx	r3
   12250:	0003      	movs	r3, r0
   12252:	61fb      	str	r3, [r7, #28]
    int bus = cfg->atcai2c.bus;
   12254:	69fb      	ldr	r3, [r7, #28]
   12256:	795b      	ldrb	r3, [r3, #5]
   12258:	61bb      	str	r3, [r7, #24]
    uint8_t data[4];

    struct i2c_master_packet packet = {
        .address            = cfg->atcai2c.slave_address >> 1,
   1225a:	69fb      	ldr	r3, [r7, #28]
   1225c:	791b      	ldrb	r3, [r3, #4]
    struct i2c_master_packet packet = {
   1225e:	085b      	lsrs	r3, r3, #1
   12260:	b2db      	uxtb	r3, r3
   12262:	b29a      	uxth	r2, r3
   12264:	2308      	movs	r3, #8
   12266:	18fb      	adds	r3, r7, r3
   12268:	801a      	strh	r2, [r3, #0]
   1226a:	2308      	movs	r3, #8
   1226c:	18fb      	adds	r3, r7, r3
   1226e:	2201      	movs	r2, #1
   12270:	805a      	strh	r2, [r3, #2]
   12272:	2308      	movs	r3, #8
   12274:	18fb      	adds	r3, r7, r3
   12276:	2214      	movs	r2, #20
   12278:	18ba      	adds	r2, r7, r2
   1227a:	605a      	str	r2, [r3, #4]
   1227c:	2308      	movs	r3, #8
   1227e:	18fb      	adds	r3, r7, r3
   12280:	2200      	movs	r2, #0
   12282:	721a      	strb	r2, [r3, #8]
   12284:	2308      	movs	r3, #8
   12286:	18fb      	adds	r3, r7, r3
   12288:	2200      	movs	r2, #0
   1228a:	725a      	strb	r2, [r3, #9]
   1228c:	2308      	movs	r3, #8
   1228e:	18fb      	adds	r3, r7, r3
   12290:	2200      	movs	r2, #0
   12292:	729a      	strb	r2, [r3, #10]
        .ten_bit_address    = false,
        .high_speed         = false,
        .hs_master_code     = 0x0,
    };

    data[0] = 0x01;  // sleep word address value
   12294:	2314      	movs	r3, #20
   12296:	18fb      	adds	r3, r7, r3
   12298:	2201      	movs	r2, #1
   1229a:	701a      	strb	r2, [r3, #0]
    if (i2c_master_write_packet_wait(&(i2c_hal_data[bus]->i2c_master_instance), &packet) != STATUS_OK)
   1229c:	4b0a      	ldr	r3, [pc, #40]	; (122c8 <hal_i2c_sleep+0x88>)
   1229e:	69ba      	ldr	r2, [r7, #24]
   122a0:	0092      	lsls	r2, r2, #2
   122a2:	58d3      	ldr	r3, [r2, r3]
   122a4:	001a      	movs	r2, r3
   122a6:	2308      	movs	r3, #8
   122a8:	18fb      	adds	r3, r7, r3
   122aa:	0019      	movs	r1, r3
   122ac:	0010      	movs	r0, r2
   122ae:	4b07      	ldr	r3, [pc, #28]	; (122cc <hal_i2c_sleep+0x8c>)
   122b0:	4798      	blx	r3
   122b2:	1e03      	subs	r3, r0, #0
   122b4:	d001      	beq.n	122ba <hal_i2c_sleep+0x7a>
    {
        return ATCA_COMM_FAIL;
   122b6:	23f0      	movs	r3, #240	; 0xf0
   122b8:	e000      	b.n	122bc <hal_i2c_sleep+0x7c>
    }

    return ATCA_SUCCESS;
   122ba:	2300      	movs	r3, #0
}
   122bc:	0018      	movs	r0, r3
   122be:	46bd      	mov	sp, r7
   122c0:	b008      	add	sp, #32
   122c2:	bd80      	pop	{r7, pc}
   122c4:	0000fdbd 	.word	0x0000fdbd
   122c8:	20002b84 	.word	0x20002b84
   122cc:	00006221 	.word	0x00006221

000122d0 <hal_i2c_release>:
 * \param[in] hal_data - opaque pointer to hal data structure - known only to the HAL implementation
 * return ATCA_SUCCESS
 */

ATCA_STATUS hal_i2c_release(void *hal_data)
{
   122d0:	b580      	push	{r7, lr}
   122d2:	b084      	sub	sp, #16
   122d4:	af00      	add	r7, sp, #0
   122d6:	6078      	str	r0, [r7, #4]
    ATCAI2CMaster_t *hal = (ATCAI2CMaster_t*)hal_data;
   122d8:	687b      	ldr	r3, [r7, #4]
   122da:	60fb      	str	r3, [r7, #12]

    i2c_bus_ref_ct--;  // track total i2c bus interface instances for consistency checking and debugging
   122dc:	4b17      	ldr	r3, [pc, #92]	; (1233c <hal_i2c_release+0x6c>)
   122de:	681b      	ldr	r3, [r3, #0]
   122e0:	1e5a      	subs	r2, r3, #1
   122e2:	4b16      	ldr	r3, [pc, #88]	; (1233c <hal_i2c_release+0x6c>)
   122e4:	601a      	str	r2, [r3, #0]

    // if the use count for this bus has gone to 0 references, disable it.  protect against an unbracketed release
    if (hal && --(hal->ref_ct) <= 0 && i2c_hal_data[hal->bus_index] != NULL)
   122e6:	68fb      	ldr	r3, [r7, #12]
   122e8:	2b00      	cmp	r3, #0
   122ea:	d021      	beq.n	12330 <hal_i2c_release+0x60>
   122ec:	68fb      	ldr	r3, [r7, #12]
   122ee:	68db      	ldr	r3, [r3, #12]
   122f0:	1e5a      	subs	r2, r3, #1
   122f2:	68fb      	ldr	r3, [r7, #12]
   122f4:	60da      	str	r2, [r3, #12]
   122f6:	68fb      	ldr	r3, [r7, #12]
   122f8:	68db      	ldr	r3, [r3, #12]
   122fa:	2b00      	cmp	r3, #0
   122fc:	dc18      	bgt.n	12330 <hal_i2c_release+0x60>
   122fe:	68fb      	ldr	r3, [r7, #12]
   12300:	691a      	ldr	r2, [r3, #16]
   12302:	4b0f      	ldr	r3, [pc, #60]	; (12340 <hal_i2c_release+0x70>)
   12304:	0092      	lsls	r2, r2, #2
   12306:	58d3      	ldr	r3, [r2, r3]
   12308:	2b00      	cmp	r3, #0
   1230a:	d011      	beq.n	12330 <hal_i2c_release+0x60>
    {
        i2c_master_reset(&(hal->i2c_master_instance));
   1230c:	68fb      	ldr	r3, [r7, #12]
   1230e:	0018      	movs	r0, r3
   12310:	4b0c      	ldr	r3, [pc, #48]	; (12344 <hal_i2c_release+0x74>)
   12312:	4798      	blx	r3
        free(i2c_hal_data[hal->bus_index]);
   12314:	68fb      	ldr	r3, [r7, #12]
   12316:	691a      	ldr	r2, [r3, #16]
   12318:	4b09      	ldr	r3, [pc, #36]	; (12340 <hal_i2c_release+0x70>)
   1231a:	0092      	lsls	r2, r2, #2
   1231c:	58d3      	ldr	r3, [r2, r3]
   1231e:	0018      	movs	r0, r3
   12320:	4b09      	ldr	r3, [pc, #36]	; (12348 <hal_i2c_release+0x78>)
   12322:	4798      	blx	r3
        i2c_hal_data[hal->bus_index] = NULL;
   12324:	68fb      	ldr	r3, [r7, #12]
   12326:	691a      	ldr	r2, [r3, #16]
   12328:	4b05      	ldr	r3, [pc, #20]	; (12340 <hal_i2c_release+0x70>)
   1232a:	0092      	lsls	r2, r2, #2
   1232c:	2100      	movs	r1, #0
   1232e:	50d1      	str	r1, [r2, r3]
    }

    return ATCA_SUCCESS;
   12330:	2300      	movs	r3, #0
}
   12332:	0018      	movs	r0, r3
   12334:	46bd      	mov	sp, r7
   12336:	b004      	add	sp, #16
   12338:	bd80      	pop	{r7, pc}
   1233a:	46c0      	nop			; (mov r8, r8)
   1233c:	20000594 	.word	0x20000594
   12340:	20002b84 	.word	0x20002b84
   12344:	00005cb9 	.word	0x00005cb9
   12348:	0001c0d1 	.word	0x0001c0d1

0001234c <atca_delay_us>:
/** \brief This function delays for a number of microseconds.
 *
 * \param[in] delay number of 0.001 milliseconds to delay
 */
void atca_delay_us(uint32_t delay)
{
   1234c:	b580      	push	{r7, lr}
   1234e:	b082      	sub	sp, #8
   12350:	af00      	add	r7, sp, #0
   12352:	6078      	str	r0, [r7, #4]
    // use ASF supplied delay
    delay_us(delay);
   12354:	687b      	ldr	r3, [r7, #4]
   12356:	2b00      	cmp	r3, #0
   12358:	d004      	beq.n	12364 <atca_delay_us+0x18>
   1235a:	687b      	ldr	r3, [r7, #4]
   1235c:	0018      	movs	r0, r3
   1235e:	4b05      	ldr	r3, [pc, #20]	; (12374 <atca_delay_us+0x28>)
   12360:	4798      	blx	r3
}
   12362:	e002      	b.n	1236a <atca_delay_us+0x1e>
    delay_us(delay);
   12364:	2001      	movs	r0, #1
   12366:	4b03      	ldr	r3, [pc, #12]	; (12374 <atca_delay_us+0x28>)
   12368:	4798      	blx	r3
}
   1236a:	46c0      	nop			; (mov r8, r8)
   1236c:	46bd      	mov	sp, r7
   1236e:	b002      	add	sp, #8
   12370:	bd80      	pop	{r7, pc}
   12372:	46c0      	nop			; (mov r8, r8)
   12374:	00000509 	.word	0x00000509

00012378 <atca_delay_ms>:
 * \param[in] delay number of milliseconds to delay
 */

/* ASF already has delay_ms - see delay.h */
void atca_delay_ms(uint32_t delay)
{
   12378:	b580      	push	{r7, lr}
   1237a:	b082      	sub	sp, #8
   1237c:	af00      	add	r7, sp, #0
   1237e:	6078      	str	r0, [r7, #4]
    // use ASF supplied delay
    delay_ms(delay);
   12380:	687b      	ldr	r3, [r7, #4]
   12382:	2b00      	cmp	r3, #0
   12384:	d004      	beq.n	12390 <atca_delay_ms+0x18>
   12386:	687b      	ldr	r3, [r7, #4]
   12388:	0018      	movs	r0, r3
   1238a:	4b05      	ldr	r3, [pc, #20]	; (123a0 <atca_delay_ms+0x28>)
   1238c:	4798      	blx	r3
}
   1238e:	e002      	b.n	12396 <atca_delay_ms+0x1e>
    delay_ms(delay);
   12390:	2001      	movs	r0, #1
   12392:	4b04      	ldr	r3, [pc, #16]	; (123a4 <atca_delay_ms+0x2c>)
   12394:	4798      	blx	r3
}
   12396:	46c0      	nop			; (mov r8, r8)
   12398:	46bd      	mov	sp, r7
   1239a:	b002      	add	sp, #8
   1239c:	bd80      	pop	{r7, pc}
   1239e:	46c0      	nop			; (mov r8, r8)
   123a0:	00000539 	.word	0x00000539
   123a4:	00000509 	.word	0x00000509

000123a8 <atca_jwt_check_payload_start>:
 * order to append a claim
 */
void atca_jwt_check_payload_start(
    atca_jwt_t* jwt     /**< [in] JWT Context to use */
    )
{
   123a8:	b580      	push	{r7, lr}
   123aa:	b084      	sub	sp, #16
   123ac:	af00      	add	r7, sp, #0
   123ae:	6078      	str	r0, [r7, #4]
    /* Rationality checks: a) must be valid, b) buf must be valid, c) must not be at the start, d) must have room */
    if (jwt && jwt->buf && jwt->cur && (jwt->cur < jwt->buflen - 1))
   123b0:	687b      	ldr	r3, [r7, #4]
   123b2:	2b00      	cmp	r3, #0
   123b4:	d03a      	beq.n	1242c <atca_jwt_check_payload_start+0x84>
   123b6:	687b      	ldr	r3, [r7, #4]
   123b8:	681b      	ldr	r3, [r3, #0]
   123ba:	2b00      	cmp	r3, #0
   123bc:	d036      	beq.n	1242c <atca_jwt_check_payload_start+0x84>
   123be:	687b      	ldr	r3, [r7, #4]
   123c0:	88db      	ldrh	r3, [r3, #6]
   123c2:	2b00      	cmp	r3, #0
   123c4:	d032      	beq.n	1242c <atca_jwt_check_payload_start+0x84>
   123c6:	687b      	ldr	r3, [r7, #4]
   123c8:	88db      	ldrh	r3, [r3, #6]
   123ca:	001a      	movs	r2, r3
   123cc:	687b      	ldr	r3, [r7, #4]
   123ce:	889b      	ldrh	r3, [r3, #4]
   123d0:	3b01      	subs	r3, #1
   123d2:	429a      	cmp	r2, r3
   123d4:	da2a      	bge.n	1242c <atca_jwt_check_payload_start+0x84>
    {
        /* Check the previous */
        char c = jwt->buf[jwt->cur - 1];
   123d6:	687b      	ldr	r3, [r7, #4]
   123d8:	681a      	ldr	r2, [r3, #0]
   123da:	687b      	ldr	r3, [r7, #4]
   123dc:	88db      	ldrh	r3, [r3, #6]
   123de:	3b01      	subs	r3, #1
   123e0:	18d2      	adds	r2, r2, r3
   123e2:	230f      	movs	r3, #15
   123e4:	18fb      	adds	r3, r7, r3
   123e6:	7812      	ldrb	r2, [r2, #0]
   123e8:	701a      	strb	r2, [r3, #0]
        if ('.' == c)
   123ea:	230f      	movs	r3, #15
   123ec:	18fb      	adds	r3, r7, r3
   123ee:	781b      	ldrb	r3, [r3, #0]
   123f0:	2b2e      	cmp	r3, #46	; 0x2e
   123f2:	d10b      	bne.n	1240c <atca_jwt_check_payload_start+0x64>
        {
            jwt->buf[jwt->cur++] = '{';
   123f4:	687b      	ldr	r3, [r7, #4]
   123f6:	681a      	ldr	r2, [r3, #0]
   123f8:	687b      	ldr	r3, [r7, #4]
   123fa:	88db      	ldrh	r3, [r3, #6]
   123fc:	1c59      	adds	r1, r3, #1
   123fe:	b288      	uxth	r0, r1
   12400:	6879      	ldr	r1, [r7, #4]
   12402:	80c8      	strh	r0, [r1, #6]
   12404:	18d3      	adds	r3, r2, r3
   12406:	227b      	movs	r2, #123	; 0x7b
   12408:	701a      	strb	r2, [r3, #0]
        else if ('{' != c)
        {
            jwt->buf[jwt->cur++] = ',';
        }
    }
}
   1240a:	e00f      	b.n	1242c <atca_jwt_check_payload_start+0x84>
        else if ('{' != c)
   1240c:	230f      	movs	r3, #15
   1240e:	18fb      	adds	r3, r7, r3
   12410:	781b      	ldrb	r3, [r3, #0]
   12412:	2b7b      	cmp	r3, #123	; 0x7b
   12414:	d00a      	beq.n	1242c <atca_jwt_check_payload_start+0x84>
            jwt->buf[jwt->cur++] = ',';
   12416:	687b      	ldr	r3, [r7, #4]
   12418:	681a      	ldr	r2, [r3, #0]
   1241a:	687b      	ldr	r3, [r7, #4]
   1241c:	88db      	ldrh	r3, [r3, #6]
   1241e:	1c59      	adds	r1, r3, #1
   12420:	b288      	uxth	r0, r1
   12422:	6879      	ldr	r1, [r7, #4]
   12424:	80c8      	strh	r0, [r1, #6]
   12426:	18d3      	adds	r3, r2, r3
   12428:	222c      	movs	r2, #44	; 0x2c
   1242a:	701a      	strb	r2, [r3, #0]
}
   1242c:	46c0      	nop			; (mov r8, r8)
   1242e:	46bd      	mov	sp, r7
   12430:	b004      	add	sp, #16
   12432:	bd80      	pop	{r7, pc}

00012434 <atca_jwt_init>:
ATCA_STATUS atca_jwt_init(
    atca_jwt_t* jwt,    /**< [in] JWT Context to initialize */
    char*       buf,    /**< [inout] Pointer to a buffer to store the token */
    uint16_t    buflen  /**< [in] Length of the buffer */
    )
{
   12434:	b5b0      	push	{r4, r5, r7, lr}
   12436:	b088      	sub	sp, #32
   12438:	af02      	add	r7, sp, #8
   1243a:	60f8      	str	r0, [r7, #12]
   1243c:	60b9      	str	r1, [r7, #8]
   1243e:	1dbb      	adds	r3, r7, #6
   12440:	801a      	strh	r2, [r3, #0]
    ATCA_STATUS ret = ATCA_BAD_PARAM;
   12442:	2317      	movs	r3, #23
   12444:	18fb      	adds	r3, r7, r3
   12446:	22e2      	movs	r2, #226	; 0xe2
   12448:	701a      	strb	r2, [r3, #0]
    size_t tSize;

    if (jwt && buf && buflen)
   1244a:	68fb      	ldr	r3, [r7, #12]
   1244c:	2b00      	cmp	r3, #0
   1244e:	d047      	beq.n	124e0 <atca_jwt_init+0xac>
   12450:	68bb      	ldr	r3, [r7, #8]
   12452:	2b00      	cmp	r3, #0
   12454:	d044      	beq.n	124e0 <atca_jwt_init+0xac>
   12456:	1dbb      	adds	r3, r7, #6
   12458:	881b      	ldrh	r3, [r3, #0]
   1245a:	2b00      	cmp	r3, #0
   1245c:	d040      	beq.n	124e0 <atca_jwt_init+0xac>
    {
        jwt->buf = buf;
   1245e:	68fb      	ldr	r3, [r7, #12]
   12460:	68ba      	ldr	r2, [r7, #8]
   12462:	601a      	str	r2, [r3, #0]
        jwt->buflen = buflen;
   12464:	68fb      	ldr	r3, [r7, #12]
   12466:	1dba      	adds	r2, r7, #6
   12468:	8812      	ldrh	r2, [r2, #0]
   1246a:	809a      	strh	r2, [r3, #4]
        jwt->cur = 0;
   1246c:	68fb      	ldr	r3, [r7, #12]
   1246e:	2200      	movs	r2, #0
   12470:	80da      	strh	r2, [r3, #6]

        /* Encode the header into the buffer */
        tSize = jwt->buflen;
   12472:	68fb      	ldr	r3, [r7, #12]
   12474:	889b      	ldrh	r3, [r3, #4]
   12476:	613b      	str	r3, [r7, #16]
        ret = atcab_base64encode_((const uint8_t*)g_jwt_header, strlen(g_jwt_header), jwt->buf,
   12478:	68fb      	ldr	r3, [r7, #12]
   1247a:	681a      	ldr	r2, [r3, #0]
   1247c:	2317      	movs	r3, #23
   1247e:	18fc      	adds	r4, r7, r3
   12480:	2310      	movs	r3, #16
   12482:	18f9      	adds	r1, r7, r3
   12484:	481a      	ldr	r0, [pc, #104]	; (124f0 <atca_jwt_init+0xbc>)
   12486:	4b1b      	ldr	r3, [pc, #108]	; (124f4 <atca_jwt_init+0xc0>)
   12488:	9300      	str	r3, [sp, #0]
   1248a:	000b      	movs	r3, r1
   1248c:	211b      	movs	r1, #27
   1248e:	4d1a      	ldr	r5, [pc, #104]	; (124f8 <atca_jwt_init+0xc4>)
   12490:	47a8      	blx	r5
   12492:	0003      	movs	r3, r0
   12494:	7023      	strb	r3, [r4, #0]
                                  &tSize, atcab_b64rules_urlsafe);
        if (ATCA_SUCCESS == ret)
   12496:	2317      	movs	r3, #23
   12498:	18fb      	adds	r3, r7, r3
   1249a:	781b      	ldrb	r3, [r3, #0]
   1249c:	2b00      	cmp	r3, #0
   1249e:	d11f      	bne.n	124e0 <atca_jwt_init+0xac>
        {
            jwt->cur += (uint16_t)tSize;
   124a0:	68fb      	ldr	r3, [r7, #12]
   124a2:	88da      	ldrh	r2, [r3, #6]
   124a4:	693b      	ldr	r3, [r7, #16]
   124a6:	b29b      	uxth	r3, r3
   124a8:	18d3      	adds	r3, r2, r3
   124aa:	b29a      	uxth	r2, r3
   124ac:	68fb      	ldr	r3, [r7, #12]
   124ae:	80da      	strh	r2, [r3, #6]

            /* Check length */
            if (jwt->cur < jwt->buflen - 1)
   124b0:	68fb      	ldr	r3, [r7, #12]
   124b2:	88db      	ldrh	r3, [r3, #6]
   124b4:	001a      	movs	r2, r3
   124b6:	68fb      	ldr	r3, [r7, #12]
   124b8:	889b      	ldrh	r3, [r3, #4]
   124ba:	3b01      	subs	r3, #1
   124bc:	429a      	cmp	r2, r3
   124be:	da0b      	bge.n	124d8 <atca_jwt_init+0xa4>
            {
                /* Add the separator */
                jwt->buf[jwt->cur++] = '.';
   124c0:	68fb      	ldr	r3, [r7, #12]
   124c2:	681a      	ldr	r2, [r3, #0]
   124c4:	68fb      	ldr	r3, [r7, #12]
   124c6:	88db      	ldrh	r3, [r3, #6]
   124c8:	1c59      	adds	r1, r3, #1
   124ca:	b288      	uxth	r0, r1
   124cc:	68f9      	ldr	r1, [r7, #12]
   124ce:	80c8      	strh	r0, [r1, #6]
   124d0:	18d3      	adds	r3, r2, r3
   124d2:	222e      	movs	r2, #46	; 0x2e
   124d4:	701a      	strb	r2, [r3, #0]
   124d6:	e003      	b.n	124e0 <atca_jwt_init+0xac>
            }
            else
            {
                ret = ATCA_INVALID_SIZE;
   124d8:	2317      	movs	r3, #23
   124da:	18fb      	adds	r3, r7, r3
   124dc:	22e4      	movs	r2, #228	; 0xe4
   124de:	701a      	strb	r2, [r3, #0]
            }
        }
    }
    return ret;
   124e0:	2317      	movs	r3, #23
   124e2:	18fb      	adds	r3, r7, r3
   124e4:	781b      	ldrb	r3, [r3, #0]
}
   124e6:	0018      	movs	r0, r3
   124e8:	46bd      	mov	sp, r7
   124ea:	b006      	add	sp, #24
   124ec:	bdb0      	pop	{r4, r5, r7, pc}
   124ee:	46c0      	nop			; (mov r8, r8)
   124f0:	00020f18 	.word	0x00020f18
   124f4:	20000154 	.word	0x20000154
   124f8:	0001039d 	.word	0x0001039d

000124fc <atca_jwt_finalize>:
 */
ATCA_STATUS atca_jwt_finalize(
    atca_jwt_t* jwt,    /**< [in] JWT Context to use */
    uint16_t    key_id  /**< [in] Key Id (Slot number) used to sign */
    )
{
   124fc:	b5b0      	push	{r4, r5, r7, lr}
   124fe:	b088      	sub	sp, #32
   12500:	af02      	add	r7, sp, #8
   12502:	6078      	str	r0, [r7, #4]
   12504:	000a      	movs	r2, r1
   12506:	1cbb      	adds	r3, r7, #2
   12508:	801a      	strh	r2, [r3, #0]
    ATCA_STATUS status;
    uint16_t i;
    size_t rem;
    size_t tSize;

    if (!jwt || !jwt->buf || !jwt->buflen || !jwt->cur)
   1250a:	687b      	ldr	r3, [r7, #4]
   1250c:	2b00      	cmp	r3, #0
   1250e:	d00b      	beq.n	12528 <atca_jwt_finalize+0x2c>
   12510:	687b      	ldr	r3, [r7, #4]
   12512:	681b      	ldr	r3, [r3, #0]
   12514:	2b00      	cmp	r3, #0
   12516:	d007      	beq.n	12528 <atca_jwt_finalize+0x2c>
   12518:	687b      	ldr	r3, [r7, #4]
   1251a:	889b      	ldrh	r3, [r3, #4]
   1251c:	2b00      	cmp	r3, #0
   1251e:	d003      	beq.n	12528 <atca_jwt_finalize+0x2c>
   12520:	687b      	ldr	r3, [r7, #4]
   12522:	88db      	ldrh	r3, [r3, #6]
   12524:	2b00      	cmp	r3, #0
   12526:	d101      	bne.n	1252c <atca_jwt_finalize+0x30>
    {
        return ATCA_BAD_PARAM;
   12528:	23e2      	movs	r3, #226	; 0xe2
   1252a:	e124      	b.n	12776 <atca_jwt_finalize+0x27a>
    }

    /* Verify the payload is closed */
    if ('}' != jwt->buf[jwt->cur - 1])
   1252c:	687b      	ldr	r3, [r7, #4]
   1252e:	681a      	ldr	r2, [r3, #0]
   12530:	687b      	ldr	r3, [r7, #4]
   12532:	88db      	ldrh	r3, [r3, #6]
   12534:	3b01      	subs	r3, #1
   12536:	18d3      	adds	r3, r2, r3
   12538:	781b      	ldrb	r3, [r3, #0]
   1253a:	2b7d      	cmp	r3, #125	; 0x7d
   1253c:	d00a      	beq.n	12554 <atca_jwt_finalize+0x58>
    {
        jwt->buf[jwt->cur++] = '}';
   1253e:	687b      	ldr	r3, [r7, #4]
   12540:	681a      	ldr	r2, [r3, #0]
   12542:	687b      	ldr	r3, [r7, #4]
   12544:	88db      	ldrh	r3, [r3, #6]
   12546:	1c59      	adds	r1, r3, #1
   12548:	b288      	uxth	r0, r1
   1254a:	6879      	ldr	r1, [r7, #4]
   1254c:	80c8      	strh	r0, [r1, #6]
   1254e:	18d3      	adds	r3, r2, r3
   12550:	227d      	movs	r2, #125	; 0x7d
   12552:	701a      	strb	r2, [r3, #0]
    }

    /* Find the start of the "claims" portion of the token - header should
       already be encoded */
    for (i = 0; i < jwt->cur; i++)
   12554:	2316      	movs	r3, #22
   12556:	18fb      	adds	r3, r7, r3
   12558:	2200      	movs	r2, #0
   1255a:	801a      	strh	r2, [r3, #0]
   1255c:	e017      	b.n	1258e <atca_jwt_finalize+0x92>
    {
        if ('.' == jwt->buf[i])
   1255e:	687b      	ldr	r3, [r7, #4]
   12560:	681a      	ldr	r2, [r3, #0]
   12562:	2316      	movs	r3, #22
   12564:	18fb      	adds	r3, r7, r3
   12566:	881b      	ldrh	r3, [r3, #0]
   12568:	18d3      	adds	r3, r2, r3
   1256a:	781b      	ldrb	r3, [r3, #0]
   1256c:	2b2e      	cmp	r3, #46	; 0x2e
   1256e:	d107      	bne.n	12580 <atca_jwt_finalize+0x84>
        {
            i++;
   12570:	2316      	movs	r3, #22
   12572:	18fb      	adds	r3, r7, r3
   12574:	881a      	ldrh	r2, [r3, #0]
   12576:	2316      	movs	r3, #22
   12578:	18fb      	adds	r3, r7, r3
   1257a:	3201      	adds	r2, #1
   1257c:	801a      	strh	r2, [r3, #0]
            break;
   1257e:	e00d      	b.n	1259c <atca_jwt_finalize+0xa0>
    for (i = 0; i < jwt->cur; i++)
   12580:	2316      	movs	r3, #22
   12582:	18fb      	adds	r3, r7, r3
   12584:	881a      	ldrh	r2, [r3, #0]
   12586:	2316      	movs	r3, #22
   12588:	18fb      	adds	r3, r7, r3
   1258a:	3201      	adds	r2, #1
   1258c:	801a      	strh	r2, [r3, #0]
   1258e:	687b      	ldr	r3, [r7, #4]
   12590:	88db      	ldrh	r3, [r3, #6]
   12592:	2216      	movs	r2, #22
   12594:	18ba      	adds	r2, r7, r2
   12596:	8812      	ldrh	r2, [r2, #0]
   12598:	429a      	cmp	r2, r3
   1259a:	d3e0      	bcc.n	1255e <atca_jwt_finalize+0x62>
        }
    }

    /* Make sure there is enough remaining buffer given base64 4/3 expansion */
    rem = (jwt->cur - i + ATCA_SIG_SIZE) * 4;
   1259c:	687b      	ldr	r3, [r7, #4]
   1259e:	88db      	ldrh	r3, [r3, #6]
   125a0:	001a      	movs	r2, r3
   125a2:	2316      	movs	r3, #22
   125a4:	18fb      	adds	r3, r7, r3
   125a6:	881b      	ldrh	r3, [r3, #0]
   125a8:	1ad3      	subs	r3, r2, r3
   125aa:	3340      	adds	r3, #64	; 0x40
   125ac:	009b      	lsls	r3, r3, #2
   125ae:	613b      	str	r3, [r7, #16]
    rem /= 3;
   125b0:	693a      	ldr	r2, [r7, #16]
   125b2:	4b73      	ldr	r3, [pc, #460]	; (12780 <atca_jwt_finalize+0x284>)
   125b4:	2103      	movs	r1, #3
   125b6:	0010      	movs	r0, r2
   125b8:	4798      	blx	r3
   125ba:	0003      	movs	r3, r0
   125bc:	613b      	str	r3, [r7, #16]

    /* Increase Count to accomodate: 1 for the '.', 1 for the null terminator,
        and 1 for padding */
    rem += 3;
   125be:	693b      	ldr	r3, [r7, #16]
   125c0:	3303      	adds	r3, #3
   125c2:	613b      	str	r3, [r7, #16]

    if (rem > (size_t)(jwt->buflen - jwt->cur))
   125c4:	687b      	ldr	r3, [r7, #4]
   125c6:	889b      	ldrh	r3, [r3, #4]
   125c8:	001a      	movs	r2, r3
   125ca:	687b      	ldr	r3, [r7, #4]
   125cc:	88db      	ldrh	r3, [r3, #6]
   125ce:	1ad3      	subs	r3, r2, r3
   125d0:	001a      	movs	r2, r3
   125d2:	693b      	ldr	r3, [r7, #16]
   125d4:	429a      	cmp	r2, r3
   125d6:	d201      	bcs.n	125dc <atca_jwt_finalize+0xe0>
    {
        return ATCA_INVALID_SIZE;
   125d8:	23e4      	movs	r3, #228	; 0xe4
   125da:	e0cc      	b.n	12776 <atca_jwt_finalize+0x27a>
    }

    /* Calculate the payload length */
    rem = jwt->cur - i;
   125dc:	687b      	ldr	r3, [r7, #4]
   125de:	88db      	ldrh	r3, [r3, #6]
   125e0:	001a      	movs	r2, r3
   125e2:	2316      	movs	r3, #22
   125e4:	18fb      	adds	r3, r7, r3
   125e6:	881b      	ldrh	r3, [r3, #0]
   125e8:	1ad3      	subs	r3, r2, r3
   125ea:	613b      	str	r3, [r7, #16]
    /* Move the payload to make room for the encoding */
    memmove(jwt->buf + jwt->buflen - jwt->cur, &jwt->buf[i], rem);
   125ec:	687b      	ldr	r3, [r7, #4]
   125ee:	681a      	ldr	r2, [r3, #0]
   125f0:	687b      	ldr	r3, [r7, #4]
   125f2:	889b      	ldrh	r3, [r3, #4]
   125f4:	0019      	movs	r1, r3
   125f6:	687b      	ldr	r3, [r7, #4]
   125f8:	88db      	ldrh	r3, [r3, #6]
   125fa:	1acb      	subs	r3, r1, r3
   125fc:	18d0      	adds	r0, r2, r3
   125fe:	687b      	ldr	r3, [r7, #4]
   12600:	681a      	ldr	r2, [r3, #0]
   12602:	2316      	movs	r3, #22
   12604:	18fb      	adds	r3, r7, r3
   12606:	881b      	ldrh	r3, [r3, #0]
   12608:	18d3      	adds	r3, r2, r3
   1260a:	693a      	ldr	r2, [r7, #16]
   1260c:	0019      	movs	r1, r3
   1260e:	4b5d      	ldr	r3, [pc, #372]	; (12784 <atca_jwt_finalize+0x288>)
   12610:	4798      	blx	r3

    /* Encode the payload into the buffer */
    tSize = jwt->buflen;
   12612:	687b      	ldr	r3, [r7, #4]
   12614:	889b      	ldrh	r3, [r3, #4]
   12616:	60bb      	str	r3, [r7, #8]
    status = atcab_base64encode_((uint8_t*)(jwt->buf + jwt->buflen - jwt->cur), rem,
   12618:	687b      	ldr	r3, [r7, #4]
   1261a:	681a      	ldr	r2, [r3, #0]
   1261c:	687b      	ldr	r3, [r7, #4]
   1261e:	889b      	ldrh	r3, [r3, #4]
   12620:	0019      	movs	r1, r3
   12622:	687b      	ldr	r3, [r7, #4]
   12624:	88db      	ldrh	r3, [r3, #6]
   12626:	1acb      	subs	r3, r1, r3
   12628:	18d0      	adds	r0, r2, r3
                                 &jwt->buf[i], &tSize, atcab_b64rules_urlsafe);
   1262a:	687b      	ldr	r3, [r7, #4]
   1262c:	681a      	ldr	r2, [r3, #0]
    status = atcab_base64encode_((uint8_t*)(jwt->buf + jwt->buflen - jwt->cur), rem,
   1262e:	2316      	movs	r3, #22
   12630:	18fb      	adds	r3, r7, r3
   12632:	881b      	ldrh	r3, [r3, #0]
   12634:	18d2      	adds	r2, r2, r3
   12636:	230f      	movs	r3, #15
   12638:	18fc      	adds	r4, r7, r3
   1263a:	2308      	movs	r3, #8
   1263c:	18fd      	adds	r5, r7, r3
   1263e:	6939      	ldr	r1, [r7, #16]
   12640:	4b51      	ldr	r3, [pc, #324]	; (12788 <atca_jwt_finalize+0x28c>)
   12642:	9300      	str	r3, [sp, #0]
   12644:	002b      	movs	r3, r5
   12646:	4d51      	ldr	r5, [pc, #324]	; (1278c <atca_jwt_finalize+0x290>)
   12648:	47a8      	blx	r5
   1264a:	0003      	movs	r3, r0
   1264c:	7023      	strb	r3, [r4, #0]
    if (ATCA_SUCCESS != status)
   1264e:	230f      	movs	r3, #15
   12650:	18fb      	adds	r3, r7, r3
   12652:	781b      	ldrb	r3, [r3, #0]
   12654:	2b00      	cmp	r3, #0
   12656:	d003      	beq.n	12660 <atca_jwt_finalize+0x164>
    {
        return status;
   12658:	230f      	movs	r3, #15
   1265a:	18fb      	adds	r3, r7, r3
   1265c:	781b      	ldrb	r3, [r3, #0]
   1265e:	e08a      	b.n	12776 <atca_jwt_finalize+0x27a>
    }

    jwt->cur = (uint16_t)(i + tSize);
   12660:	68bb      	ldr	r3, [r7, #8]
   12662:	b29a      	uxth	r2, r3
   12664:	2316      	movs	r3, #22
   12666:	18fb      	adds	r3, r7, r3
   12668:	881b      	ldrh	r3, [r3, #0]
   1266a:	18d3      	adds	r3, r2, r3
   1266c:	b29a      	uxth	r2, r3
   1266e:	687b      	ldr	r3, [r7, #4]
   12670:	80da      	strh	r2, [r3, #6]

    /* Make sure there room to add the signature
        ECDSA(P256) -> 64 bytes -> base64 -> 86.3 (87) -> 88 including null */
    if (jwt->cur >= jwt->buflen - 88)
   12672:	687b      	ldr	r3, [r7, #4]
   12674:	88db      	ldrh	r3, [r3, #6]
   12676:	001a      	movs	r2, r3
   12678:	687b      	ldr	r3, [r7, #4]
   1267a:	889b      	ldrh	r3, [r3, #4]
   1267c:	3b58      	subs	r3, #88	; 0x58
   1267e:	429a      	cmp	r2, r3
   12680:	db01      	blt.n	12686 <atca_jwt_finalize+0x18a>
    {
        /* Something broke */
        return ATCA_INVALID_SIZE;
   12682:	23e4      	movs	r3, #228	; 0xe4
   12684:	e077      	b.n	12776 <atca_jwt_finalize+0x27a>
    }

    /* Create digest of the message store and store in the buffer */
    status = atcac_sw_sha2_256((const uint8_t*)jwt->buf, jwt->cur, (uint8_t*)(jwt->buf + jwt->buflen - 32));
   12686:	687b      	ldr	r3, [r7, #4]
   12688:	6818      	ldr	r0, [r3, #0]
   1268a:	687b      	ldr	r3, [r7, #4]
   1268c:	88db      	ldrh	r3, [r3, #6]
   1268e:	0019      	movs	r1, r3
   12690:	687b      	ldr	r3, [r7, #4]
   12692:	681a      	ldr	r2, [r3, #0]
   12694:	687b      	ldr	r3, [r7, #4]
   12696:	889b      	ldrh	r3, [r3, #4]
   12698:	3b20      	subs	r3, #32
   1269a:	18d3      	adds	r3, r2, r3
   1269c:	001a      	movs	r2, r3
   1269e:	4b3c      	ldr	r3, [pc, #240]	; (12790 <atca_jwt_finalize+0x294>)
   126a0:	4798      	blx	r3
   126a2:	0002      	movs	r2, r0
   126a4:	230f      	movs	r3, #15
   126a6:	18fb      	adds	r3, r7, r3
   126a8:	701a      	strb	r2, [r3, #0]
    if (ATCA_SUCCESS != status)
   126aa:	230f      	movs	r3, #15
   126ac:	18fb      	adds	r3, r7, r3
   126ae:	781b      	ldrb	r3, [r3, #0]
   126b0:	2b00      	cmp	r3, #0
   126b2:	d003      	beq.n	126bc <atca_jwt_finalize+0x1c0>
    {
        return status;
   126b4:	230f      	movs	r3, #15
   126b6:	18fb      	adds	r3, r7, r3
   126b8:	781b      	ldrb	r3, [r3, #0]
   126ba:	e05c      	b.n	12776 <atca_jwt_finalize+0x27a>
    }

    /* Create ECSDA signature of the digest and store it back in the buffer */
    status = atcab_sign(key_id, (const uint8_t*)(jwt->buf + jwt->buflen - ATCA_SHA_DIGEST_SIZE),
   126bc:	687b      	ldr	r3, [r7, #4]
   126be:	681a      	ldr	r2, [r3, #0]
   126c0:	687b      	ldr	r3, [r7, #4]
   126c2:	889b      	ldrh	r3, [r3, #4]
   126c4:	3b20      	subs	r3, #32
   126c6:	18d1      	adds	r1, r2, r3
                        (uint8_t*)(jwt->buf + jwt->buflen - 64));
   126c8:	687b      	ldr	r3, [r7, #4]
   126ca:	681a      	ldr	r2, [r3, #0]
   126cc:	687b      	ldr	r3, [r7, #4]
   126ce:	889b      	ldrh	r3, [r3, #4]
   126d0:	3b40      	subs	r3, #64	; 0x40
   126d2:	18d2      	adds	r2, r2, r3
    status = atcab_sign(key_id, (const uint8_t*)(jwt->buf + jwt->buflen - ATCA_SHA_DIGEST_SIZE),
   126d4:	230f      	movs	r3, #15
   126d6:	18fc      	adds	r4, r7, r3
   126d8:	1cbb      	adds	r3, r7, #2
   126da:	881b      	ldrh	r3, [r3, #0]
   126dc:	0018      	movs	r0, r3
   126de:	4b2d      	ldr	r3, [pc, #180]	; (12794 <atca_jwt_finalize+0x298>)
   126e0:	4798      	blx	r3
   126e2:	0003      	movs	r3, r0
   126e4:	7023      	strb	r3, [r4, #0]
    if (ATCA_SUCCESS != status)
   126e6:	230f      	movs	r3, #15
   126e8:	18fb      	adds	r3, r7, r3
   126ea:	781b      	ldrb	r3, [r3, #0]
   126ec:	2b00      	cmp	r3, #0
   126ee:	d003      	beq.n	126f8 <atca_jwt_finalize+0x1fc>
    {
        return status;
   126f0:	230f      	movs	r3, #15
   126f2:	18fb      	adds	r3, r7, r3
   126f4:	781b      	ldrb	r3, [r3, #0]
   126f6:	e03e      	b.n	12776 <atca_jwt_finalize+0x27a>
    }

    /* Add the separator */
    jwt->buf[jwt->cur++] = '.';
   126f8:	687b      	ldr	r3, [r7, #4]
   126fa:	681a      	ldr	r2, [r3, #0]
   126fc:	687b      	ldr	r3, [r7, #4]
   126fe:	88db      	ldrh	r3, [r3, #6]
   12700:	1c59      	adds	r1, r3, #1
   12702:	b288      	uxth	r0, r1
   12704:	6879      	ldr	r1, [r7, #4]
   12706:	80c8      	strh	r0, [r1, #6]
   12708:	18d3      	adds	r3, r2, r3
   1270a:	222e      	movs	r2, #46	; 0x2e
   1270c:	701a      	strb	r2, [r3, #0]

    /* Encode the signature and store it in the buffer */
    tSize = jwt->buflen - jwt->cur;
   1270e:	687b      	ldr	r3, [r7, #4]
   12710:	889b      	ldrh	r3, [r3, #4]
   12712:	001a      	movs	r2, r3
   12714:	687b      	ldr	r3, [r7, #4]
   12716:	88db      	ldrh	r3, [r3, #6]
   12718:	1ad3      	subs	r3, r2, r3
   1271a:	60bb      	str	r3, [r7, #8]
    atcab_base64encode_((const uint8_t*)(jwt->buf + jwt->buflen - ATCA_SIG_SIZE), ATCA_SIG_SIZE,
   1271c:	687b      	ldr	r3, [r7, #4]
   1271e:	681a      	ldr	r2, [r3, #0]
   12720:	687b      	ldr	r3, [r7, #4]
   12722:	889b      	ldrh	r3, [r3, #4]
   12724:	3b40      	subs	r3, #64	; 0x40
   12726:	18d0      	adds	r0, r2, r3
                        &jwt->buf[jwt->cur], &tSize, atcab_b64rules_urlsafe);
   12728:	687b      	ldr	r3, [r7, #4]
   1272a:	681b      	ldr	r3, [r3, #0]
   1272c:	687a      	ldr	r2, [r7, #4]
   1272e:	88d2      	ldrh	r2, [r2, #6]
    atcab_base64encode_((const uint8_t*)(jwt->buf + jwt->buflen - ATCA_SIG_SIZE), ATCA_SIG_SIZE,
   12730:	189a      	adds	r2, r3, r2
   12732:	2308      	movs	r3, #8
   12734:	18f9      	adds	r1, r7, r3
   12736:	4b14      	ldr	r3, [pc, #80]	; (12788 <atca_jwt_finalize+0x28c>)
   12738:	9300      	str	r3, [sp, #0]
   1273a:	000b      	movs	r3, r1
   1273c:	2140      	movs	r1, #64	; 0x40
   1273e:	4c13      	ldr	r4, [pc, #76]	; (1278c <atca_jwt_finalize+0x290>)
   12740:	47a0      	blx	r4
    jwt->cur += (uint16_t)tSize;
   12742:	687b      	ldr	r3, [r7, #4]
   12744:	88da      	ldrh	r2, [r3, #6]
   12746:	68bb      	ldr	r3, [r7, #8]
   12748:	b29b      	uxth	r3, r3
   1274a:	18d3      	adds	r3, r2, r3
   1274c:	b29a      	uxth	r2, r3
   1274e:	687b      	ldr	r3, [r7, #4]
   12750:	80da      	strh	r2, [r3, #6]

    if (jwt->cur >= jwt->buflen)
   12752:	687b      	ldr	r3, [r7, #4]
   12754:	88da      	ldrh	r2, [r3, #6]
   12756:	687b      	ldr	r3, [r7, #4]
   12758:	889b      	ldrh	r3, [r3, #4]
   1275a:	429a      	cmp	r2, r3
   1275c:	d301      	bcc.n	12762 <atca_jwt_finalize+0x266>
    {
        /* Something broke */
        return ATCA_INVALID_SIZE;
   1275e:	23e4      	movs	r3, #228	; 0xe4
   12760:	e009      	b.n	12776 <atca_jwt_finalize+0x27a>
    }

    /* Make sure resulting buffer is null terminated */
    jwt->buf[jwt->cur] = 0;
   12762:	687b      	ldr	r3, [r7, #4]
   12764:	681b      	ldr	r3, [r3, #0]
   12766:	687a      	ldr	r2, [r7, #4]
   12768:	88d2      	ldrh	r2, [r2, #6]
   1276a:	189b      	adds	r3, r3, r2
   1276c:	2200      	movs	r2, #0
   1276e:	701a      	strb	r2, [r3, #0]

    return status;
   12770:	230f      	movs	r3, #15
   12772:	18fb      	adds	r3, r7, r3
   12774:	781b      	ldrb	r3, [r3, #0]
}
   12776:	0018      	movs	r0, r3
   12778:	46bd      	mov	sp, r7
   1277a:	b006      	add	sp, #24
   1277c:	bdb0      	pop	{r4, r5, r7, pc}
   1277e:	46c0      	nop			; (mov r8, r8)
   12780:	00019cd9 	.word	0x00019cd9
   12784:	0001c14f 	.word	0x0001c14f
   12788:	20000154 	.word	0x20000154
   1278c:	0001039d 	.word	0x0001039d
   12790:	00010761 	.word	0x00010761
   12794:	000119d9 	.word	0x000119d9

00012798 <atca_jwt_add_claim_string>:
ATCA_STATUS atca_jwt_add_claim_string(
    atca_jwt_t* jwt,    /**< [in] JWT Context to use */
    const char* claim,  /**< [in] Name of the claim to be inserted */
    const char* value   /**< [in] Null terminated string to be insterted */
    )
{
   12798:	b590      	push	{r4, r7, lr}
   1279a:	b089      	sub	sp, #36	; 0x24
   1279c:	af02      	add	r7, sp, #8
   1279e:	60f8      	str	r0, [r7, #12]
   127a0:	60b9      	str	r1, [r7, #8]
   127a2:	607a      	str	r2, [r7, #4]
    int32_t written;
    int32_t remaining;

    if (jwt && jwt->buf && jwt->buflen && claim && value)
   127a4:	68fb      	ldr	r3, [r7, #12]
   127a6:	2b00      	cmp	r3, #0
   127a8:	d03a      	beq.n	12820 <atca_jwt_add_claim_string+0x88>
   127aa:	68fb      	ldr	r3, [r7, #12]
   127ac:	681b      	ldr	r3, [r3, #0]
   127ae:	2b00      	cmp	r3, #0
   127b0:	d036      	beq.n	12820 <atca_jwt_add_claim_string+0x88>
   127b2:	68fb      	ldr	r3, [r7, #12]
   127b4:	889b      	ldrh	r3, [r3, #4]
   127b6:	2b00      	cmp	r3, #0
   127b8:	d032      	beq.n	12820 <atca_jwt_add_claim_string+0x88>
   127ba:	68bb      	ldr	r3, [r7, #8]
   127bc:	2b00      	cmp	r3, #0
   127be:	d02f      	beq.n	12820 <atca_jwt_add_claim_string+0x88>
   127c0:	687b      	ldr	r3, [r7, #4]
   127c2:	2b00      	cmp	r3, #0
   127c4:	d02c      	beq.n	12820 <atca_jwt_add_claim_string+0x88>
    {
        atca_jwt_check_payload_start(jwt);
   127c6:	68fb      	ldr	r3, [r7, #12]
   127c8:	0018      	movs	r0, r3
   127ca:	4b18      	ldr	r3, [pc, #96]	; (1282c <atca_jwt_add_claim_string+0x94>)
   127cc:	4798      	blx	r3

        remaining = jwt->buflen - jwt->cur;
   127ce:	68fb      	ldr	r3, [r7, #12]
   127d0:	889b      	ldrh	r3, [r3, #4]
   127d2:	001a      	movs	r2, r3
   127d4:	68fb      	ldr	r3, [r7, #12]
   127d6:	88db      	ldrh	r3, [r3, #6]
   127d8:	1ad3      	subs	r3, r2, r3
   127da:	617b      	str	r3, [r7, #20]
        written = snprintf(&jwt->buf[jwt->cur], remaining, "\"%s\":\"%s\"", claim, value);
   127dc:	68fb      	ldr	r3, [r7, #12]
   127de:	681b      	ldr	r3, [r3, #0]
   127e0:	68fa      	ldr	r2, [r7, #12]
   127e2:	88d2      	ldrh	r2, [r2, #6]
   127e4:	1898      	adds	r0, r3, r2
   127e6:	6979      	ldr	r1, [r7, #20]
   127e8:	68bc      	ldr	r4, [r7, #8]
   127ea:	4a11      	ldr	r2, [pc, #68]	; (12830 <atca_jwt_add_claim_string+0x98>)
   127ec:	687b      	ldr	r3, [r7, #4]
   127ee:	9300      	str	r3, [sp, #0]
   127f0:	0023      	movs	r3, r4
   127f2:	4c10      	ldr	r4, [pc, #64]	; (12834 <atca_jwt_add_claim_string+0x9c>)
   127f4:	47a0      	blx	r4
   127f6:	0003      	movs	r3, r0
   127f8:	613b      	str	r3, [r7, #16]
        if (0 < written && written < remaining)
   127fa:	693b      	ldr	r3, [r7, #16]
   127fc:	2b00      	cmp	r3, #0
   127fe:	dd0d      	ble.n	1281c <atca_jwt_add_claim_string+0x84>
   12800:	693a      	ldr	r2, [r7, #16]
   12802:	697b      	ldr	r3, [r7, #20]
   12804:	429a      	cmp	r2, r3
   12806:	da09      	bge.n	1281c <atca_jwt_add_claim_string+0x84>
        {
            jwt->cur += written;
   12808:	68fb      	ldr	r3, [r7, #12]
   1280a:	88da      	ldrh	r2, [r3, #6]
   1280c:	693b      	ldr	r3, [r7, #16]
   1280e:	b29b      	uxth	r3, r3
   12810:	18d3      	adds	r3, r2, r3
   12812:	b29a      	uxth	r2, r3
   12814:	68fb      	ldr	r3, [r7, #12]
   12816:	80da      	strh	r2, [r3, #6]
            return ATCA_SUCCESS;
   12818:	2300      	movs	r3, #0
   1281a:	e002      	b.n	12822 <atca_jwt_add_claim_string+0x8a>
        }
        else
        {
            return ATCA_GEN_FAIL;
   1281c:	23e1      	movs	r3, #225	; 0xe1
   1281e:	e000      	b.n	12822 <atca_jwt_add_claim_string+0x8a>
        }
    }
    else
    {
        return ATCA_BAD_PARAM;
   12820:	23e2      	movs	r3, #226	; 0xe2
    }
}
   12822:	0018      	movs	r0, r3
   12824:	46bd      	mov	sp, r7
   12826:	b007      	add	sp, #28
   12828:	bd90      	pop	{r4, r7, pc}
   1282a:	46c0      	nop			; (mov r8, r8)
   1282c:	000123a9 	.word	0x000123a9
   12830:	00020f34 	.word	0x00020f34
   12834:	0001c595 	.word	0x0001c595

00012838 <atca_jwt_add_claim_numeric>:
ATCA_STATUS atca_jwt_add_claim_numeric(
    atca_jwt_t* jwt,    /**< [in] JWT Context to use */
    const char* claim,  /**< [in] Name of the claim to be inserted */
    int32_t     value   /**< [in] integer value to be inserted */
    )
{
   12838:	b590      	push	{r4, r7, lr}
   1283a:	b089      	sub	sp, #36	; 0x24
   1283c:	af02      	add	r7, sp, #8
   1283e:	60f8      	str	r0, [r7, #12]
   12840:	60b9      	str	r1, [r7, #8]
   12842:	607a      	str	r2, [r7, #4]
    int32_t written;
    int32_t remaining;

    if (jwt && jwt->buf && jwt->buflen && claim)
   12844:	68fb      	ldr	r3, [r7, #12]
   12846:	2b00      	cmp	r3, #0
   12848:	d037      	beq.n	128ba <atca_jwt_add_claim_numeric+0x82>
   1284a:	68fb      	ldr	r3, [r7, #12]
   1284c:	681b      	ldr	r3, [r3, #0]
   1284e:	2b00      	cmp	r3, #0
   12850:	d033      	beq.n	128ba <atca_jwt_add_claim_numeric+0x82>
   12852:	68fb      	ldr	r3, [r7, #12]
   12854:	889b      	ldrh	r3, [r3, #4]
   12856:	2b00      	cmp	r3, #0
   12858:	d02f      	beq.n	128ba <atca_jwt_add_claim_numeric+0x82>
   1285a:	68bb      	ldr	r3, [r7, #8]
   1285c:	2b00      	cmp	r3, #0
   1285e:	d02c      	beq.n	128ba <atca_jwt_add_claim_numeric+0x82>
    {
        atca_jwt_check_payload_start(jwt);
   12860:	68fb      	ldr	r3, [r7, #12]
   12862:	0018      	movs	r0, r3
   12864:	4b17      	ldr	r3, [pc, #92]	; (128c4 <atca_jwt_add_claim_numeric+0x8c>)
   12866:	4798      	blx	r3

        remaining = jwt->buflen - jwt->cur;
   12868:	68fb      	ldr	r3, [r7, #12]
   1286a:	889b      	ldrh	r3, [r3, #4]
   1286c:	001a      	movs	r2, r3
   1286e:	68fb      	ldr	r3, [r7, #12]
   12870:	88db      	ldrh	r3, [r3, #6]
   12872:	1ad3      	subs	r3, r2, r3
   12874:	617b      	str	r3, [r7, #20]
        written = snprintf(&jwt->buf[jwt->cur], remaining, "\"%s\":%d", claim, value);
   12876:	68fb      	ldr	r3, [r7, #12]
   12878:	681b      	ldr	r3, [r3, #0]
   1287a:	68fa      	ldr	r2, [r7, #12]
   1287c:	88d2      	ldrh	r2, [r2, #6]
   1287e:	1898      	adds	r0, r3, r2
   12880:	6979      	ldr	r1, [r7, #20]
   12882:	68bc      	ldr	r4, [r7, #8]
   12884:	4a10      	ldr	r2, [pc, #64]	; (128c8 <atca_jwt_add_claim_numeric+0x90>)
   12886:	687b      	ldr	r3, [r7, #4]
   12888:	9300      	str	r3, [sp, #0]
   1288a:	0023      	movs	r3, r4
   1288c:	4c0f      	ldr	r4, [pc, #60]	; (128cc <atca_jwt_add_claim_numeric+0x94>)
   1288e:	47a0      	blx	r4
   12890:	0003      	movs	r3, r0
   12892:	613b      	str	r3, [r7, #16]
        if (0 < written && written < remaining)
   12894:	693b      	ldr	r3, [r7, #16]
   12896:	2b00      	cmp	r3, #0
   12898:	dd0d      	ble.n	128b6 <atca_jwt_add_claim_numeric+0x7e>
   1289a:	693a      	ldr	r2, [r7, #16]
   1289c:	697b      	ldr	r3, [r7, #20]
   1289e:	429a      	cmp	r2, r3
   128a0:	da09      	bge.n	128b6 <atca_jwt_add_claim_numeric+0x7e>
        {
            jwt->cur += written;
   128a2:	68fb      	ldr	r3, [r7, #12]
   128a4:	88da      	ldrh	r2, [r3, #6]
   128a6:	693b      	ldr	r3, [r7, #16]
   128a8:	b29b      	uxth	r3, r3
   128aa:	18d3      	adds	r3, r2, r3
   128ac:	b29a      	uxth	r2, r3
   128ae:	68fb      	ldr	r3, [r7, #12]
   128b0:	80da      	strh	r2, [r3, #6]
            return 0;
   128b2:	2300      	movs	r3, #0
   128b4:	e002      	b.n	128bc <atca_jwt_add_claim_numeric+0x84>
        }
        else
        {
            return ATCA_GEN_FAIL;
   128b6:	23e1      	movs	r3, #225	; 0xe1
   128b8:	e000      	b.n	128bc <atca_jwt_add_claim_numeric+0x84>
        }
    }
    else
    {
        return ATCA_BAD_PARAM;
   128ba:	23e2      	movs	r3, #226	; 0xe2
    }
}
   128bc:	0018      	movs	r0, r3
   128be:	46bd      	mov	sp, r7
   128c0:	b007      	add	sp, #28
   128c2:	bd90      	pop	{r4, r7, pc}
   128c4:	000123a9 	.word	0x000123a9
   128c8:	00020f40 	.word	0x00020f40
   128cc:	0001c595 	.word	0x0001c595

000128d0 <NewMessageData>:
#pragma GCC diagnostic ignored "-Wshadow"
#pragma GCC diagnostic ignored "-Wcast-align"

#include "MQTTClient.h"

static void NewMessageData(MessageData* md, MQTTString* aTopicName, MQTTMessage* aMessage) {
   128d0:	b580      	push	{r7, lr}
   128d2:	b084      	sub	sp, #16
   128d4:	af00      	add	r7, sp, #0
   128d6:	60f8      	str	r0, [r7, #12]
   128d8:	60b9      	str	r1, [r7, #8]
   128da:	607a      	str	r2, [r7, #4]
    md->topicName = aTopicName;
   128dc:	68fb      	ldr	r3, [r7, #12]
   128de:	68ba      	ldr	r2, [r7, #8]
   128e0:	605a      	str	r2, [r3, #4]
    md->message = aMessage;
   128e2:	68fb      	ldr	r3, [r7, #12]
   128e4:	687a      	ldr	r2, [r7, #4]
   128e6:	601a      	str	r2, [r3, #0]
}
   128e8:	46c0      	nop			; (mov r8, r8)
   128ea:	46bd      	mov	sp, r7
   128ec:	b004      	add	sp, #16
   128ee:	bd80      	pop	{r7, pc}

000128f0 <getNextPacketId>:


static int getNextPacketId(MQTTClient *c) {
   128f0:	b580      	push	{r7, lr}
   128f2:	b082      	sub	sp, #8
   128f4:	af00      	add	r7, sp, #0
   128f6:	6078      	str	r0, [r7, #4]
    return c->next_packetid = (c->next_packetid == MAX_PACKET_ID) ? 1 : c->next_packetid + 1;
   128f8:	687b      	ldr	r3, [r7, #4]
   128fa:	681b      	ldr	r3, [r3, #0]
   128fc:	4a07      	ldr	r2, [pc, #28]	; (1291c <getNextPacketId+0x2c>)
   128fe:	4293      	cmp	r3, r2
   12900:	d003      	beq.n	1290a <getNextPacketId+0x1a>
   12902:	687b      	ldr	r3, [r7, #4]
   12904:	681b      	ldr	r3, [r3, #0]
   12906:	1c5a      	adds	r2, r3, #1
   12908:	e000      	b.n	1290c <getNextPacketId+0x1c>
   1290a:	2201      	movs	r2, #1
   1290c:	687b      	ldr	r3, [r7, #4]
   1290e:	601a      	str	r2, [r3, #0]
   12910:	687b      	ldr	r3, [r7, #4]
   12912:	681b      	ldr	r3, [r3, #0]
}
   12914:	0018      	movs	r0, r3
   12916:	46bd      	mov	sp, r7
   12918:	b002      	add	sp, #8
   1291a:	bd80      	pop	{r7, pc}
   1291c:	0000ffff 	.word	0x0000ffff

00012920 <sendPacket>:


static int sendPacket(MQTTClient* c, int length, Timer* timer)
{
   12920:	b5f0      	push	{r4, r5, r6, r7, lr}
   12922:	b087      	sub	sp, #28
   12924:	af00      	add	r7, sp, #0
   12926:	60f8      	str	r0, [r7, #12]
   12928:	60b9      	str	r1, [r7, #8]
   1292a:	607a      	str	r2, [r7, #4]
    int rc = MQTTCLIENT_FAILURE, 
   1292c:	2301      	movs	r3, #1
   1292e:	425b      	negs	r3, r3
   12930:	617b      	str	r3, [r7, #20]
        sent = 0;
   12932:	2300      	movs	r3, #0
   12934:	613b      	str	r3, [r7, #16]
    
    while (sent < length && !TimerIsExpired(timer))
   12936:	e01a      	b.n	1296e <sendPacket+0x4e>
    {
        rc = c->ipstack->mqttwrite(c->ipstack, &c->buf[sent], length, TimerLeftMS(timer));
   12938:	68fb      	ldr	r3, [r7, #12]
   1293a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   1293c:	685c      	ldr	r4, [r3, #4]
   1293e:	68fb      	ldr	r3, [r7, #12]
   12940:	6d1d      	ldr	r5, [r3, #80]	; 0x50
   12942:	68fb      	ldr	r3, [r7, #12]
   12944:	691a      	ldr	r2, [r3, #16]
   12946:	693b      	ldr	r3, [r7, #16]
   12948:	18d6      	adds	r6, r2, r3
   1294a:	687b      	ldr	r3, [r7, #4]
   1294c:	0018      	movs	r0, r3
   1294e:	4b1a      	ldr	r3, [pc, #104]	; (129b8 <sendPacket+0x98>)
   12950:	4798      	blx	r3
   12952:	0003      	movs	r3, r0
   12954:	68ba      	ldr	r2, [r7, #8]
   12956:	0031      	movs	r1, r6
   12958:	0028      	movs	r0, r5
   1295a:	47a0      	blx	r4
   1295c:	0003      	movs	r3, r0
   1295e:	617b      	str	r3, [r7, #20]
        if (rc < 0)  // there was an error writing the data
   12960:	697b      	ldr	r3, [r7, #20]
   12962:	2b00      	cmp	r3, #0
   12964:	db0e      	blt.n	12984 <sendPacket+0x64>
            break;
        sent += rc;
   12966:	693a      	ldr	r2, [r7, #16]
   12968:	697b      	ldr	r3, [r7, #20]
   1296a:	18d3      	adds	r3, r2, r3
   1296c:	613b      	str	r3, [r7, #16]
    while (sent < length && !TimerIsExpired(timer))
   1296e:	693a      	ldr	r2, [r7, #16]
   12970:	68bb      	ldr	r3, [r7, #8]
   12972:	429a      	cmp	r2, r3
   12974:	da07      	bge.n	12986 <sendPacket+0x66>
   12976:	687b      	ldr	r3, [r7, #4]
   12978:	0018      	movs	r0, r3
   1297a:	4b10      	ldr	r3, [pc, #64]	; (129bc <sendPacket+0x9c>)
   1297c:	4798      	blx	r3
   1297e:	1e03      	subs	r3, r0, #0
   12980:	d0da      	beq.n	12938 <sendPacket+0x18>
   12982:	e000      	b.n	12986 <sendPacket+0x66>
            break;
   12984:	46c0      	nop			; (mov r8, r8)
    }
    if (sent == length)
   12986:	693a      	ldr	r2, [r7, #16]
   12988:	68bb      	ldr	r3, [r7, #8]
   1298a:	429a      	cmp	r2, r3
   1298c:	d10b      	bne.n	129a6 <sendPacket+0x86>
    {
        TimerCountdown(&c->ping_timer, c->keepAliveInterval); // record the fact that we have successfully sent the packet
   1298e:	68fb      	ldr	r3, [r7, #12]
   12990:	3354      	adds	r3, #84	; 0x54
   12992:	001a      	movs	r2, r3
   12994:	68fb      	ldr	r3, [r7, #12]
   12996:	699b      	ldr	r3, [r3, #24]
   12998:	0019      	movs	r1, r3
   1299a:	0010      	movs	r0, r2
   1299c:	4b08      	ldr	r3, [pc, #32]	; (129c0 <sendPacket+0xa0>)
   1299e:	4798      	blx	r3
        rc = MQTTCLIENT_SUCCESS;
   129a0:	2300      	movs	r3, #0
   129a2:	617b      	str	r3, [r7, #20]
   129a4:	e002      	b.n	129ac <sendPacket+0x8c>
    }
    else
        rc = MQTTCLIENT_FAILURE;
   129a6:	2301      	movs	r3, #1
   129a8:	425b      	negs	r3, r3
   129aa:	617b      	str	r3, [r7, #20]
    return rc;
   129ac:	697b      	ldr	r3, [r7, #20]
}
   129ae:	0018      	movs	r0, r3
   129b0:	46bd      	mov	sp, r7
   129b2:	b007      	add	sp, #28
   129b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   129b6:	46c0      	nop			; (mov r8, r8)
   129b8:	00014851 	.word	0x00014851
   129bc:	00014681 	.word	0x00014681
   129c0:	000147cd 	.word	0x000147cd

000129c4 <MQTTClientInit>:


void MQTTClientInit(MQTTClient* c, Network* network, unsigned int command_timeout_ms,
		unsigned char* sendbuf, size_t sendbuf_size, unsigned char* readbuf, size_t readbuf_size)
{
   129c4:	b580      	push	{r7, lr}
   129c6:	b086      	sub	sp, #24
   129c8:	af00      	add	r7, sp, #0
   129ca:	60f8      	str	r0, [r7, #12]
   129cc:	60b9      	str	r1, [r7, #8]
   129ce:	607a      	str	r2, [r7, #4]
   129d0:	603b      	str	r3, [r7, #0]
    int i;
    c->ipstack = network;
   129d2:	68fb      	ldr	r3, [r7, #12]
   129d4:	68ba      	ldr	r2, [r7, #8]
   129d6:	651a      	str	r2, [r3, #80]	; 0x50
    
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
   129d8:	2300      	movs	r3, #0
   129da:	617b      	str	r3, [r7, #20]
   129dc:	e00a      	b.n	129f4 <MQTTClientInit+0x30>
        c->messageHandlers[i].topicFilter = 0;
   129de:	68fa      	ldr	r2, [r7, #12]
   129e0:	697b      	ldr	r3, [r7, #20]
   129e2:	3304      	adds	r3, #4
   129e4:	00db      	lsls	r3, r3, #3
   129e6:	18d3      	adds	r3, r2, r3
   129e8:	3304      	adds	r3, #4
   129ea:	2200      	movs	r2, #0
   129ec:	601a      	str	r2, [r3, #0]
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
   129ee:	697b      	ldr	r3, [r7, #20]
   129f0:	3301      	adds	r3, #1
   129f2:	617b      	str	r3, [r7, #20]
   129f4:	697b      	ldr	r3, [r7, #20]
   129f6:	2b04      	cmp	r3, #4
   129f8:	ddf1      	ble.n	129de <MQTTClientInit+0x1a>
    c->command_timeout_ms = command_timeout_ms;
   129fa:	68fb      	ldr	r3, [r7, #12]
   129fc:	687a      	ldr	r2, [r7, #4]
   129fe:	605a      	str	r2, [r3, #4]
    c->buf = sendbuf;
   12a00:	68fb      	ldr	r3, [r7, #12]
   12a02:	683a      	ldr	r2, [r7, #0]
   12a04:	611a      	str	r2, [r3, #16]
    c->buf_size = sendbuf_size;
   12a06:	68fb      	ldr	r3, [r7, #12]
   12a08:	6a3a      	ldr	r2, [r7, #32]
   12a0a:	609a      	str	r2, [r3, #8]
    c->readbuf = readbuf;
   12a0c:	68fb      	ldr	r3, [r7, #12]
   12a0e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   12a10:	615a      	str	r2, [r3, #20]
    c->readbuf_size = readbuf_size;
   12a12:	68fb      	ldr	r3, [r7, #12]
   12a14:	6aba      	ldr	r2, [r7, #40]	; 0x28
   12a16:	60da      	str	r2, [r3, #12]
    c->isconnected = 0;
   12a18:	68fb      	ldr	r3, [r7, #12]
   12a1a:	2200      	movs	r2, #0
   12a1c:	621a      	str	r2, [r3, #32]
    c->ping_outstanding = 0;
   12a1e:	68fb      	ldr	r3, [r7, #12]
   12a20:	2200      	movs	r2, #0
   12a22:	771a      	strb	r2, [r3, #28]
    c->defaultMessageHandler = NULL;
   12a24:	68fb      	ldr	r3, [r7, #12]
   12a26:	2200      	movs	r2, #0
   12a28:	64da      	str	r2, [r3, #76]	; 0x4c
	c->next_packetid = 1;
   12a2a:	68fb      	ldr	r3, [r7, #12]
   12a2c:	2201      	movs	r2, #1
   12a2e:	601a      	str	r2, [r3, #0]
    TimerInit(&c->ping_timer);
   12a30:	68fb      	ldr	r3, [r7, #12]
   12a32:	3354      	adds	r3, #84	; 0x54
   12a34:	0018      	movs	r0, r3
   12a36:	4b03      	ldr	r3, [pc, #12]	; (12a44 <MQTTClientInit+0x80>)
   12a38:	4798      	blx	r3
#if defined(MQTT_TASK)
	MutexInit(&c->mutex);
#endif
}
   12a3a:	46c0      	nop			; (mov r8, r8)
   12a3c:	46bd      	mov	sp, r7
   12a3e:	b006      	add	sp, #24
   12a40:	bd80      	pop	{r7, pc}
   12a42:	46c0      	nop			; (mov r8, r8)
   12a44:	0001465d 	.word	0x0001465d

00012a48 <decodePacket>:


static int decodePacket(MQTTClient* c, int* value, int timeout)
{
   12a48:	b590      	push	{r4, r7, lr}
   12a4a:	b08b      	sub	sp, #44	; 0x2c
   12a4c:	af00      	add	r7, sp, #0
   12a4e:	60f8      	str	r0, [r7, #12]
   12a50:	60b9      	str	r1, [r7, #8]
   12a52:	607a      	str	r2, [r7, #4]
    unsigned char i;
    int multiplier = 1;
   12a54:	2301      	movs	r3, #1
   12a56:	627b      	str	r3, [r7, #36]	; 0x24
    int len = 0;
   12a58:	2300      	movs	r3, #0
   12a5a:	623b      	str	r3, [r7, #32]
    const int MAX_NO_OF_REMAINING_LENGTH_BYTES = 4;
   12a5c:	2304      	movs	r3, #4
   12a5e:	61fb      	str	r3, [r7, #28]

    *value = 0;
   12a60:	68bb      	ldr	r3, [r7, #8]
   12a62:	2200      	movs	r2, #0
   12a64:	601a      	str	r2, [r3, #0]
    do
    {
        int rc = MQTTPACKET_READ_ERROR;
   12a66:	2301      	movs	r3, #1
   12a68:	425b      	negs	r3, r3
   12a6a:	61bb      	str	r3, [r7, #24]

        if (++len > MAX_NO_OF_REMAINING_LENGTH_BYTES)
   12a6c:	6a3b      	ldr	r3, [r7, #32]
   12a6e:	3301      	adds	r3, #1
   12a70:	623b      	str	r3, [r7, #32]
   12a72:	6a3a      	ldr	r2, [r7, #32]
   12a74:	69fb      	ldr	r3, [r7, #28]
   12a76:	429a      	cmp	r2, r3
   12a78:	dd03      	ble.n	12a82 <decodePacket+0x3a>
        {
            rc = MQTTPACKET_READ_ERROR; /* bad data */
   12a7a:	2301      	movs	r3, #1
   12a7c:	425b      	negs	r3, r3
   12a7e:	61bb      	str	r3, [r7, #24]
            goto exit;
   12a80:	e026      	b.n	12ad0 <decodePacket+0x88>
        }
        rc = c->ipstack->mqttread(c->ipstack, &i, 1, timeout);
   12a82:	68fb      	ldr	r3, [r7, #12]
   12a84:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   12a86:	681c      	ldr	r4, [r3, #0]
   12a88:	68fb      	ldr	r3, [r7, #12]
   12a8a:	6d18      	ldr	r0, [r3, #80]	; 0x50
   12a8c:	687b      	ldr	r3, [r7, #4]
   12a8e:	2217      	movs	r2, #23
   12a90:	18b9      	adds	r1, r7, r2
   12a92:	2201      	movs	r2, #1
   12a94:	47a0      	blx	r4
   12a96:	0003      	movs	r3, r0
   12a98:	61bb      	str	r3, [r7, #24]
        if (rc != 1)
   12a9a:	69bb      	ldr	r3, [r7, #24]
   12a9c:	2b01      	cmp	r3, #1
   12a9e:	d116      	bne.n	12ace <decodePacket+0x86>
            goto exit;
        *value += (i & 127) * multiplier;
   12aa0:	68bb      	ldr	r3, [r7, #8]
   12aa2:	681a      	ldr	r2, [r3, #0]
   12aa4:	2317      	movs	r3, #23
   12aa6:	18fb      	adds	r3, r7, r3
   12aa8:	781b      	ldrb	r3, [r3, #0]
   12aaa:	0019      	movs	r1, r3
   12aac:	237f      	movs	r3, #127	; 0x7f
   12aae:	400b      	ands	r3, r1
   12ab0:	6a79      	ldr	r1, [r7, #36]	; 0x24
   12ab2:	434b      	muls	r3, r1
   12ab4:	18d2      	adds	r2, r2, r3
   12ab6:	68bb      	ldr	r3, [r7, #8]
   12ab8:	601a      	str	r2, [r3, #0]
        multiplier *= 128;
   12aba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   12abc:	01db      	lsls	r3, r3, #7
   12abe:	627b      	str	r3, [r7, #36]	; 0x24
    } while ((i & 128) != 0);
   12ac0:	2317      	movs	r3, #23
   12ac2:	18fb      	adds	r3, r7, r3
   12ac4:	781b      	ldrb	r3, [r3, #0]
   12ac6:	b25b      	sxtb	r3, r3
   12ac8:	2b00      	cmp	r3, #0
   12aca:	dbcc      	blt.n	12a66 <decodePacket+0x1e>
   12acc:	e000      	b.n	12ad0 <decodePacket+0x88>
            goto exit;
   12ace:	46c0      	nop			; (mov r8, r8)
exit:
    return len;
   12ad0:	6a3b      	ldr	r3, [r7, #32]
}
   12ad2:	0018      	movs	r0, r3
   12ad4:	46bd      	mov	sp, r7
   12ad6:	b00b      	add	sp, #44	; 0x2c
   12ad8:	bd90      	pop	{r4, r7, pc}
	...

00012adc <readPacket>:


static int readPacket(MQTTClient* c, Timer* timer)
{
   12adc:	b5f0      	push	{r4, r5, r6, r7, lr}
   12ade:	46c6      	mov	lr, r8
   12ae0:	b500      	push	{lr}
   12ae2:	b086      	sub	sp, #24
   12ae4:	af00      	add	r7, sp, #0
   12ae6:	6078      	str	r0, [r7, #4]
   12ae8:	6039      	str	r1, [r7, #0]
    int rc = MQTTCLIENT_FAILURE;
   12aea:	2301      	movs	r3, #1
   12aec:	425b      	negs	r3, r3
   12aee:	617b      	str	r3, [r7, #20]
    MQTTHeader header = {0};
   12af0:	2300      	movs	r3, #0
   12af2:	60fb      	str	r3, [r7, #12]
    int len = 0;
   12af4:	2300      	movs	r3, #0
   12af6:	613b      	str	r3, [r7, #16]
    int rem_len = 0;
   12af8:	2300      	movs	r3, #0
   12afa:	60bb      	str	r3, [r7, #8]

    /* 1. read the header byte.  This has the packet type in it */
    if (c->ipstack->mqttread(c->ipstack, c->readbuf, 1, TimerLeftMS(timer)) != 1)
   12afc:	687b      	ldr	r3, [r7, #4]
   12afe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   12b00:	681c      	ldr	r4, [r3, #0]
   12b02:	687b      	ldr	r3, [r7, #4]
   12b04:	6d1d      	ldr	r5, [r3, #80]	; 0x50
   12b06:	687b      	ldr	r3, [r7, #4]
   12b08:	695e      	ldr	r6, [r3, #20]
   12b0a:	683b      	ldr	r3, [r7, #0]
   12b0c:	0018      	movs	r0, r3
   12b0e:	4b2b      	ldr	r3, [pc, #172]	; (12bbc <readPacket+0xe0>)
   12b10:	4798      	blx	r3
   12b12:	0003      	movs	r3, r0
   12b14:	2201      	movs	r2, #1
   12b16:	0031      	movs	r1, r6
   12b18:	0028      	movs	r0, r5
   12b1a:	47a0      	blx	r4
   12b1c:	0003      	movs	r3, r0
   12b1e:	2b01      	cmp	r3, #1
   12b20:	d141      	bne.n	12ba6 <readPacket+0xca>
        goto exit;

    len = 1;
   12b22:	2301      	movs	r3, #1
   12b24:	613b      	str	r3, [r7, #16]
    /* 2. read the remaining length.  This is variable in itself */
    decodePacket(c, &rem_len, TimerLeftMS(timer));
   12b26:	683b      	ldr	r3, [r7, #0]
   12b28:	0018      	movs	r0, r3
   12b2a:	4b24      	ldr	r3, [pc, #144]	; (12bbc <readPacket+0xe0>)
   12b2c:	4798      	blx	r3
   12b2e:	0002      	movs	r2, r0
   12b30:	2308      	movs	r3, #8
   12b32:	18f9      	adds	r1, r7, r3
   12b34:	687b      	ldr	r3, [r7, #4]
   12b36:	0018      	movs	r0, r3
   12b38:	4b21      	ldr	r3, [pc, #132]	; (12bc0 <readPacket+0xe4>)
   12b3a:	4798      	blx	r3
    len += MQTTPacket_encode(c->readbuf + 1, rem_len); /* put the original remaining length back into the buffer */
   12b3c:	687b      	ldr	r3, [r7, #4]
   12b3e:	695b      	ldr	r3, [r3, #20]
   12b40:	3301      	adds	r3, #1
   12b42:	68ba      	ldr	r2, [r7, #8]
   12b44:	0011      	movs	r1, r2
   12b46:	0018      	movs	r0, r3
   12b48:	4b1e      	ldr	r3, [pc, #120]	; (12bc4 <readPacket+0xe8>)
   12b4a:	4798      	blx	r3
   12b4c:	0002      	movs	r2, r0
   12b4e:	693b      	ldr	r3, [r7, #16]
   12b50:	189b      	adds	r3, r3, r2
   12b52:	613b      	str	r3, [r7, #16]

    /* 3. read the rest of the buffer using a callback to supply the rest of the data */
    if (rem_len > 0 && (c->ipstack->mqttread(c->ipstack, c->readbuf + len, rem_len, TimerLeftMS(timer)) != rem_len))
   12b54:	68bb      	ldr	r3, [r7, #8]
   12b56:	2b00      	cmp	r3, #0
   12b58:	dd17      	ble.n	12b8a <readPacket+0xae>
   12b5a:	687b      	ldr	r3, [r7, #4]
   12b5c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   12b5e:	681c      	ldr	r4, [r3, #0]
   12b60:	687b      	ldr	r3, [r7, #4]
   12b62:	6d1d      	ldr	r5, [r3, #80]	; 0x50
   12b64:	687b      	ldr	r3, [r7, #4]
   12b66:	695a      	ldr	r2, [r3, #20]
   12b68:	693b      	ldr	r3, [r7, #16]
   12b6a:	18d6      	adds	r6, r2, r3
   12b6c:	68bb      	ldr	r3, [r7, #8]
   12b6e:	4698      	mov	r8, r3
   12b70:	683b      	ldr	r3, [r7, #0]
   12b72:	0018      	movs	r0, r3
   12b74:	4b11      	ldr	r3, [pc, #68]	; (12bbc <readPacket+0xe0>)
   12b76:	4798      	blx	r3
   12b78:	0003      	movs	r3, r0
   12b7a:	4642      	mov	r2, r8
   12b7c:	0031      	movs	r1, r6
   12b7e:	0028      	movs	r0, r5
   12b80:	47a0      	blx	r4
   12b82:	0002      	movs	r2, r0
   12b84:	68bb      	ldr	r3, [r7, #8]
   12b86:	429a      	cmp	r2, r3
   12b88:	d10f      	bne.n	12baa <readPacket+0xce>
        goto exit;

    header.byte = c->readbuf[0];
   12b8a:	687b      	ldr	r3, [r7, #4]
   12b8c:	695b      	ldr	r3, [r3, #20]
   12b8e:	781a      	ldrb	r2, [r3, #0]
   12b90:	230c      	movs	r3, #12
   12b92:	18fb      	adds	r3, r7, r3
   12b94:	701a      	strb	r2, [r3, #0]
    rc = header.bits.type;
   12b96:	230c      	movs	r3, #12
   12b98:	18fb      	adds	r3, r7, r3
   12b9a:	781b      	ldrb	r3, [r3, #0]
   12b9c:	061b      	lsls	r3, r3, #24
   12b9e:	0f1b      	lsrs	r3, r3, #28
   12ba0:	b2db      	uxtb	r3, r3
   12ba2:	617b      	str	r3, [r7, #20]
   12ba4:	e002      	b.n	12bac <readPacket+0xd0>
        goto exit;
   12ba6:	46c0      	nop			; (mov r8, r8)
   12ba8:	e000      	b.n	12bac <readPacket+0xd0>
        goto exit;
   12baa:	46c0      	nop			; (mov r8, r8)
exit:
    return rc;
   12bac:	697b      	ldr	r3, [r7, #20]
}
   12bae:	0018      	movs	r0, r3
   12bb0:	46bd      	mov	sp, r7
   12bb2:	b006      	add	sp, #24
   12bb4:	bc04      	pop	{r2}
   12bb6:	4690      	mov	r8, r2
   12bb8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   12bba:	46c0      	nop			; (mov r8, r8)
   12bbc:	00014851 	.word	0x00014851
   12bc0:	00012a49 	.word	0x00012a49
   12bc4:	00013bd9 	.word	0x00013bd9

00012bc8 <isTopicMatched>:

// assume topic filter and name is in correct format
// # can only be at end
// + and # can only be next to separator
static char isTopicMatched(char* topicFilter, MQTTString* topicName)
{
   12bc8:	b580      	push	{r7, lr}
   12bca:	b086      	sub	sp, #24
   12bcc:	af00      	add	r7, sp, #0
   12bce:	6078      	str	r0, [r7, #4]
   12bd0:	6039      	str	r1, [r7, #0]
    char* curf = topicFilter;
   12bd2:	687b      	ldr	r3, [r7, #4]
   12bd4:	617b      	str	r3, [r7, #20]
    char* curn = topicName->lenstring.data;
   12bd6:	683b      	ldr	r3, [r7, #0]
   12bd8:	689b      	ldr	r3, [r3, #8]
   12bda:	613b      	str	r3, [r7, #16]
    char* curn_end = curn + topicName->lenstring.len;
   12bdc:	683b      	ldr	r3, [r7, #0]
   12bde:	685b      	ldr	r3, [r3, #4]
   12be0:	001a      	movs	r2, r3
   12be2:	693b      	ldr	r3, [r7, #16]
   12be4:	189b      	adds	r3, r3, r2
   12be6:	60bb      	str	r3, [r7, #8]
    
    while (*curf && curn < curn_end)
   12be8:	e039      	b.n	12c5e <isTopicMatched+0x96>
    {
        if (*curn == '/' && *curf != '/')
   12bea:	693b      	ldr	r3, [r7, #16]
   12bec:	781b      	ldrb	r3, [r3, #0]
   12bee:	2b2f      	cmp	r3, #47	; 0x2f
   12bf0:	d103      	bne.n	12bfa <isTopicMatched+0x32>
   12bf2:	697b      	ldr	r3, [r7, #20]
   12bf4:	781b      	ldrb	r3, [r3, #0]
   12bf6:	2b2f      	cmp	r3, #47	; 0x2f
   12bf8:	d13a      	bne.n	12c70 <isTopicMatched+0xa8>
            break;
        if (*curf != '+' && *curf != '#' && *curf != *curn)
   12bfa:	697b      	ldr	r3, [r7, #20]
   12bfc:	781b      	ldrb	r3, [r3, #0]
   12bfe:	2b2b      	cmp	r3, #43	; 0x2b
   12c00:	d009      	beq.n	12c16 <isTopicMatched+0x4e>
   12c02:	697b      	ldr	r3, [r7, #20]
   12c04:	781b      	ldrb	r3, [r3, #0]
   12c06:	2b23      	cmp	r3, #35	; 0x23
   12c08:	d005      	beq.n	12c16 <isTopicMatched+0x4e>
   12c0a:	697b      	ldr	r3, [r7, #20]
   12c0c:	781a      	ldrb	r2, [r3, #0]
   12c0e:	693b      	ldr	r3, [r7, #16]
   12c10:	781b      	ldrb	r3, [r3, #0]
   12c12:	429a      	cmp	r2, r3
   12c14:	d12e      	bne.n	12c74 <isTopicMatched+0xac>
            break;
        if (*curf == '+')
   12c16:	697b      	ldr	r3, [r7, #20]
   12c18:	781b      	ldrb	r3, [r3, #0]
   12c1a:	2b2b      	cmp	r3, #43	; 0x2b
   12c1c:	d112      	bne.n	12c44 <isTopicMatched+0x7c>
        {   // skip until we meet the next separator, or end of string
            char* nextpos = curn + 1;
   12c1e:	693b      	ldr	r3, [r7, #16]
   12c20:	3301      	adds	r3, #1
   12c22:	60fb      	str	r3, [r7, #12]
            while (nextpos < curn_end && *nextpos != '/')
   12c24:	e005      	b.n	12c32 <isTopicMatched+0x6a>
                nextpos = ++curn + 1;
   12c26:	693b      	ldr	r3, [r7, #16]
   12c28:	3301      	adds	r3, #1
   12c2a:	613b      	str	r3, [r7, #16]
   12c2c:	693b      	ldr	r3, [r7, #16]
   12c2e:	3301      	adds	r3, #1
   12c30:	60fb      	str	r3, [r7, #12]
            while (nextpos < curn_end && *nextpos != '/')
   12c32:	68fa      	ldr	r2, [r7, #12]
   12c34:	68bb      	ldr	r3, [r7, #8]
   12c36:	429a      	cmp	r2, r3
   12c38:	d20b      	bcs.n	12c52 <isTopicMatched+0x8a>
   12c3a:	68fb      	ldr	r3, [r7, #12]
   12c3c:	781b      	ldrb	r3, [r3, #0]
   12c3e:	2b2f      	cmp	r3, #47	; 0x2f
   12c40:	d1f1      	bne.n	12c26 <isTopicMatched+0x5e>
   12c42:	e006      	b.n	12c52 <isTopicMatched+0x8a>
        }
        else if (*curf == '#')
   12c44:	697b      	ldr	r3, [r7, #20]
   12c46:	781b      	ldrb	r3, [r3, #0]
   12c48:	2b23      	cmp	r3, #35	; 0x23
   12c4a:	d102      	bne.n	12c52 <isTopicMatched+0x8a>
            curn = curn_end - 1;    // skip until end of string
   12c4c:	68bb      	ldr	r3, [r7, #8]
   12c4e:	3b01      	subs	r3, #1
   12c50:	613b      	str	r3, [r7, #16]
        curf++;
   12c52:	697b      	ldr	r3, [r7, #20]
   12c54:	3301      	adds	r3, #1
   12c56:	617b      	str	r3, [r7, #20]
        curn++;
   12c58:	693b      	ldr	r3, [r7, #16]
   12c5a:	3301      	adds	r3, #1
   12c5c:	613b      	str	r3, [r7, #16]
    while (*curf && curn < curn_end)
   12c5e:	697b      	ldr	r3, [r7, #20]
   12c60:	781b      	ldrb	r3, [r3, #0]
   12c62:	2b00      	cmp	r3, #0
   12c64:	d007      	beq.n	12c76 <isTopicMatched+0xae>
   12c66:	693a      	ldr	r2, [r7, #16]
   12c68:	68bb      	ldr	r3, [r7, #8]
   12c6a:	429a      	cmp	r2, r3
   12c6c:	d3bd      	bcc.n	12bea <isTopicMatched+0x22>
   12c6e:	e002      	b.n	12c76 <isTopicMatched+0xae>
            break;
   12c70:	46c0      	nop			; (mov r8, r8)
   12c72:	e000      	b.n	12c76 <isTopicMatched+0xae>
            break;
   12c74:	46c0      	nop			; (mov r8, r8)
    };
    
    return (curn == curn_end) && (*curf == '\0');
   12c76:	693a      	ldr	r2, [r7, #16]
   12c78:	68bb      	ldr	r3, [r7, #8]
   12c7a:	429a      	cmp	r2, r3
   12c7c:	d105      	bne.n	12c8a <isTopicMatched+0xc2>
   12c7e:	697b      	ldr	r3, [r7, #20]
   12c80:	781b      	ldrb	r3, [r3, #0]
   12c82:	2b00      	cmp	r3, #0
   12c84:	d101      	bne.n	12c8a <isTopicMatched+0xc2>
   12c86:	2301      	movs	r3, #1
   12c88:	e000      	b.n	12c8c <isTopicMatched+0xc4>
   12c8a:	2300      	movs	r3, #0
   12c8c:	b2db      	uxtb	r3, r3
}
   12c8e:	0018      	movs	r0, r3
   12c90:	46bd      	mov	sp, r7
   12c92:	b006      	add	sp, #24
   12c94:	bd80      	pop	{r7, pc}
	...

00012c98 <deliverMessage>:


int deliverMessage(MQTTClient* c, MQTTString* topicName, MQTTMessage* message)
{
   12c98:	b580      	push	{r7, lr}
   12c9a:	b08a      	sub	sp, #40	; 0x28
   12c9c:	af00      	add	r7, sp, #0
   12c9e:	60f8      	str	r0, [r7, #12]
   12ca0:	60b9      	str	r1, [r7, #8]
   12ca2:	607a      	str	r2, [r7, #4]
    int i;
    int rc = MQTTCLIENT_FAILURE;
   12ca4:	2301      	movs	r3, #1
   12ca6:	425b      	negs	r3, r3
   12ca8:	623b      	str	r3, [r7, #32]

    // we have to find the right message handler - indexed by topic
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
   12caa:	2300      	movs	r3, #0
   12cac:	627b      	str	r3, [r7, #36]	; 0x24
   12cae:	e044      	b.n	12d3a <deliverMessage+0xa2>
    {
        if (c->messageHandlers[i].topicFilter != 0 && (MQTTPacket_equals(topicName, (char*)c->messageHandlers[i].topicFilter) ||
   12cb0:	68fa      	ldr	r2, [r7, #12]
   12cb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   12cb4:	3304      	adds	r3, #4
   12cb6:	00db      	lsls	r3, r3, #3
   12cb8:	18d3      	adds	r3, r2, r3
   12cba:	3304      	adds	r3, #4
   12cbc:	681b      	ldr	r3, [r3, #0]
   12cbe:	2b00      	cmp	r3, #0
   12cc0:	d038      	beq.n	12d34 <deliverMessage+0x9c>
   12cc2:	68fa      	ldr	r2, [r7, #12]
   12cc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   12cc6:	3304      	adds	r3, #4
   12cc8:	00db      	lsls	r3, r3, #3
   12cca:	18d3      	adds	r3, r2, r3
   12ccc:	3304      	adds	r3, #4
   12cce:	681a      	ldr	r2, [r3, #0]
   12cd0:	68bb      	ldr	r3, [r7, #8]
   12cd2:	0011      	movs	r1, r2
   12cd4:	0018      	movs	r0, r3
   12cd6:	4b28      	ldr	r3, [pc, #160]	; (12d78 <deliverMessage+0xe0>)
   12cd8:	4798      	blx	r3
   12cda:	1e03      	subs	r3, r0, #0
   12cdc:	d10d      	bne.n	12cfa <deliverMessage+0x62>
                isTopicMatched((char*)c->messageHandlers[i].topicFilter, topicName)))
   12cde:	68fa      	ldr	r2, [r7, #12]
   12ce0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   12ce2:	3304      	adds	r3, #4
   12ce4:	00db      	lsls	r3, r3, #3
   12ce6:	18d3      	adds	r3, r2, r3
   12ce8:	3304      	adds	r3, #4
   12cea:	681b      	ldr	r3, [r3, #0]
   12cec:	68ba      	ldr	r2, [r7, #8]
   12cee:	0011      	movs	r1, r2
   12cf0:	0018      	movs	r0, r3
   12cf2:	4b22      	ldr	r3, [pc, #136]	; (12d7c <deliverMessage+0xe4>)
   12cf4:	4798      	blx	r3
   12cf6:	1e03      	subs	r3, r0, #0
        if (c->messageHandlers[i].topicFilter != 0 && (MQTTPacket_equals(topicName, (char*)c->messageHandlers[i].topicFilter) ||
   12cf8:	d01c      	beq.n	12d34 <deliverMessage+0x9c>
        {
            if (c->messageHandlers[i].fp != NULL)
   12cfa:	68fa      	ldr	r2, [r7, #12]
   12cfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   12cfe:	3304      	adds	r3, #4
   12d00:	00db      	lsls	r3, r3, #3
   12d02:	18d3      	adds	r3, r2, r3
   12d04:	3308      	adds	r3, #8
   12d06:	681b      	ldr	r3, [r3, #0]
   12d08:	2b00      	cmp	r3, #0
   12d0a:	d013      	beq.n	12d34 <deliverMessage+0x9c>
            {
                MessageData md;
                NewMessageData(&md, topicName, message);
   12d0c:	687a      	ldr	r2, [r7, #4]
   12d0e:	68b9      	ldr	r1, [r7, #8]
   12d10:	2318      	movs	r3, #24
   12d12:	18fb      	adds	r3, r7, r3
   12d14:	0018      	movs	r0, r3
   12d16:	4b1a      	ldr	r3, [pc, #104]	; (12d80 <deliverMessage+0xe8>)
   12d18:	4798      	blx	r3
                c->messageHandlers[i].fp(&md);
   12d1a:	68fa      	ldr	r2, [r7, #12]
   12d1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   12d1e:	3304      	adds	r3, #4
   12d20:	00db      	lsls	r3, r3, #3
   12d22:	18d3      	adds	r3, r2, r3
   12d24:	3308      	adds	r3, #8
   12d26:	681b      	ldr	r3, [r3, #0]
   12d28:	2218      	movs	r2, #24
   12d2a:	18ba      	adds	r2, r7, r2
   12d2c:	0010      	movs	r0, r2
   12d2e:	4798      	blx	r3
                rc = MQTTCLIENT_SUCCESS;
   12d30:	2300      	movs	r3, #0
   12d32:	623b      	str	r3, [r7, #32]
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
   12d34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   12d36:	3301      	adds	r3, #1
   12d38:	627b      	str	r3, [r7, #36]	; 0x24
   12d3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   12d3c:	2b04      	cmp	r3, #4
   12d3e:	ddb7      	ble.n	12cb0 <deliverMessage+0x18>
            }
        }
    }
    
    if (rc == MQTTCLIENT_FAILURE && c->defaultMessageHandler != NULL) 
   12d40:	6a3b      	ldr	r3, [r7, #32]
   12d42:	3301      	adds	r3, #1
   12d44:	d112      	bne.n	12d6c <deliverMessage+0xd4>
   12d46:	68fb      	ldr	r3, [r7, #12]
   12d48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   12d4a:	2b00      	cmp	r3, #0
   12d4c:	d00e      	beq.n	12d6c <deliverMessage+0xd4>
    {
        MessageData md;
        NewMessageData(&md, topicName, message);
   12d4e:	687a      	ldr	r2, [r7, #4]
   12d50:	68b9      	ldr	r1, [r7, #8]
   12d52:	2310      	movs	r3, #16
   12d54:	18fb      	adds	r3, r7, r3
   12d56:	0018      	movs	r0, r3
   12d58:	4b09      	ldr	r3, [pc, #36]	; (12d80 <deliverMessage+0xe8>)
   12d5a:	4798      	blx	r3
        c->defaultMessageHandler(&md);
   12d5c:	68fb      	ldr	r3, [r7, #12]
   12d5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   12d60:	2210      	movs	r2, #16
   12d62:	18ba      	adds	r2, r7, r2
   12d64:	0010      	movs	r0, r2
   12d66:	4798      	blx	r3
        rc = MQTTCLIENT_SUCCESS;
   12d68:	2300      	movs	r3, #0
   12d6a:	623b      	str	r3, [r7, #32]
    }   
    
    return rc;
   12d6c:	6a3b      	ldr	r3, [r7, #32]
}
   12d6e:	0018      	movs	r0, r3
   12d70:	46bd      	mov	sp, r7
   12d72:	b00a      	add	sp, #40	; 0x28
   12d74:	bd80      	pop	{r7, pc}
   12d76:	46c0      	nop			; (mov r8, r8)
   12d78:	00013fed 	.word	0x00013fed
   12d7c:	00012bc9 	.word	0x00012bc9
   12d80:	000128d1 	.word	0x000128d1

00012d84 <keepalive>:


int keepalive(MQTTClient* c)
{
   12d84:	b580      	push	{r7, lr}
   12d86:	b086      	sub	sp, #24
   12d88:	af00      	add	r7, sp, #0
   12d8a:	6078      	str	r0, [r7, #4]
    int rc = MQTTCLIENT_FAILURE;
   12d8c:	2301      	movs	r3, #1
   12d8e:	425b      	negs	r3, r3
   12d90:	617b      	str	r3, [r7, #20]

    if (c->keepAliveInterval == 0)
   12d92:	687b      	ldr	r3, [r7, #4]
   12d94:	699b      	ldr	r3, [r3, #24]
   12d96:	2b00      	cmp	r3, #0
   12d98:	d102      	bne.n	12da0 <keepalive+0x1c>
    {
        rc = MQTTCLIENT_SUCCESS;
   12d9a:	2300      	movs	r3, #0
   12d9c:	617b      	str	r3, [r7, #20]
        goto exit;
   12d9e:	e033      	b.n	12e08 <keepalive+0x84>
    }

    if (TimerIsExpired(&c->ping_timer))
   12da0:	687b      	ldr	r3, [r7, #4]
   12da2:	3354      	adds	r3, #84	; 0x54
   12da4:	0018      	movs	r0, r3
   12da6:	4b1b      	ldr	r3, [pc, #108]	; (12e14 <keepalive+0x90>)
   12da8:	4798      	blx	r3
   12daa:	1e03      	subs	r3, r0, #0
   12dac:	d02c      	beq.n	12e08 <keepalive+0x84>
    {
        if (!c->ping_outstanding)
   12dae:	687b      	ldr	r3, [r7, #4]
   12db0:	7f1b      	ldrb	r3, [r3, #28]
   12db2:	2b00      	cmp	r3, #0
   12db4:	d128      	bne.n	12e08 <keepalive+0x84>
        {
            Timer timer;
            TimerInit(&timer);
   12db6:	2308      	movs	r3, #8
   12db8:	18fb      	adds	r3, r7, r3
   12dba:	0018      	movs	r0, r3
   12dbc:	4b16      	ldr	r3, [pc, #88]	; (12e18 <keepalive+0x94>)
   12dbe:	4798      	blx	r3
            TimerCountdownMS(&timer, 1000);
   12dc0:	23fa      	movs	r3, #250	; 0xfa
   12dc2:	009a      	lsls	r2, r3, #2
   12dc4:	2308      	movs	r3, #8
   12dc6:	18fb      	adds	r3, r7, r3
   12dc8:	0011      	movs	r1, r2
   12dca:	0018      	movs	r0, r3
   12dcc:	4b13      	ldr	r3, [pc, #76]	; (12e1c <keepalive+0x98>)
   12dce:	4798      	blx	r3
            int len = MQTTSerialize_pingreq(c->buf, c->buf_size);
   12dd0:	687b      	ldr	r3, [r7, #4]
   12dd2:	691a      	ldr	r2, [r3, #16]
   12dd4:	687b      	ldr	r3, [r7, #4]
   12dd6:	689b      	ldr	r3, [r3, #8]
   12dd8:	0019      	movs	r1, r3
   12dda:	0010      	movs	r0, r2
   12ddc:	4b10      	ldr	r3, [pc, #64]	; (12e20 <keepalive+0x9c>)
   12dde:	4798      	blx	r3
   12de0:	0003      	movs	r3, r0
   12de2:	613b      	str	r3, [r7, #16]
            if (len > 0 && (rc = sendPacket(c, len, &timer)) == MQTTCLIENT_SUCCESS) // send the ping packet
   12de4:	693b      	ldr	r3, [r7, #16]
   12de6:	2b00      	cmp	r3, #0
   12de8:	dd0e      	ble.n	12e08 <keepalive+0x84>
   12dea:	2308      	movs	r3, #8
   12dec:	18fa      	adds	r2, r7, r3
   12dee:	6939      	ldr	r1, [r7, #16]
   12df0:	687b      	ldr	r3, [r7, #4]
   12df2:	0018      	movs	r0, r3
   12df4:	4b0b      	ldr	r3, [pc, #44]	; (12e24 <keepalive+0xa0>)
   12df6:	4798      	blx	r3
   12df8:	0003      	movs	r3, r0
   12dfa:	617b      	str	r3, [r7, #20]
   12dfc:	697b      	ldr	r3, [r7, #20]
   12dfe:	2b00      	cmp	r3, #0
   12e00:	d102      	bne.n	12e08 <keepalive+0x84>
                c->ping_outstanding = 1;
   12e02:	687b      	ldr	r3, [r7, #4]
   12e04:	2201      	movs	r2, #1
   12e06:	771a      	strb	r2, [r3, #28]
        }
    }

exit:
    return rc;
   12e08:	697b      	ldr	r3, [r7, #20]
}
   12e0a:	0018      	movs	r0, r3
   12e0c:	46bd      	mov	sp, r7
   12e0e:	b006      	add	sp, #24
   12e10:	bd80      	pop	{r7, pc}
   12e12:	46c0      	nop			; (mov r8, r8)
   12e14:	00014681 	.word	0x00014681
   12e18:	0001465d 	.word	0x0001465d
   12e1c:	00014721 	.word	0x00014721
   12e20:	000139fd 	.word	0x000139fd
   12e24:	00012921 	.word	0x00012921

00012e28 <cycle>:


int cycle(MQTTClient* c, Timer* timer)
{
   12e28:	b5f0      	push	{r4, r5, r6, r7, lr}
   12e2a:	b095      	sub	sp, #84	; 0x54
   12e2c:	af06      	add	r7, sp, #24
   12e2e:	6078      	str	r0, [r7, #4]
   12e30:	6039      	str	r1, [r7, #0]
    // read the socket, see what work is due
    unsigned short packet_type = readPacket(c, timer);
   12e32:	683a      	ldr	r2, [r7, #0]
   12e34:	687b      	ldr	r3, [r7, #4]
   12e36:	0011      	movs	r1, r2
   12e38:	0018      	movs	r0, r3
   12e3a:	4b70      	ldr	r3, [pc, #448]	; (12ffc <cycle+0x1d4>)
   12e3c:	4798      	blx	r3
   12e3e:	0002      	movs	r2, r0
   12e40:	232e      	movs	r3, #46	; 0x2e
   12e42:	18fb      	adds	r3, r7, r3
   12e44:	801a      	strh	r2, [r3, #0]
    
    int len = 0,
   12e46:	2300      	movs	r3, #0
   12e48:	637b      	str	r3, [r7, #52]	; 0x34
        rc = MQTTCLIENT_SUCCESS;
   12e4a:	2300      	movs	r3, #0
   12e4c:	633b      	str	r3, [r7, #48]	; 0x30

    switch (packet_type)
   12e4e:	232e      	movs	r3, #46	; 0x2e
   12e50:	18fb      	adds	r3, r7, r3
   12e52:	881b      	ldrh	r3, [r3, #0]
   12e54:	2b0d      	cmp	r3, #13
   12e56:	d900      	bls.n	12e5a <cycle+0x32>
   12e58:	e0bd      	b.n	12fd6 <cycle+0x1ae>
   12e5a:	009a      	lsls	r2, r3, #2
   12e5c:	4b68      	ldr	r3, [pc, #416]	; (13000 <cycle+0x1d8>)
   12e5e:	18d3      	adds	r3, r2, r3
   12e60:	681b      	ldr	r3, [r3, #0]
   12e62:	469f      	mov	pc, r3
        case PUBLISH:
        {
            MQTTString topicName;
            MQTTMessage msg;
            int intQoS;
            if (MQTTDeserialize_publish(&msg.dup, &intQoS, &msg.retained, &msg.id, &topicName,
   12e64:	687b      	ldr	r3, [r7, #4]
   12e66:	695a      	ldr	r2, [r3, #20]
               (unsigned char**)&msg.payload, (int*)&msg.payloadlen, c->readbuf, c->readbuf_size) != 1)
   12e68:	687b      	ldr	r3, [r7, #4]
   12e6a:	68db      	ldr	r3, [r3, #12]
            if (MQTTDeserialize_publish(&msg.dup, &intQoS, &msg.retained, &msg.id, &topicName,
   12e6c:	001e      	movs	r6, r3
   12e6e:	2310      	movs	r3, #16
   12e70:	18fb      	adds	r3, r7, r3
   12e72:	1d1d      	adds	r5, r3, #4
   12e74:	2310      	movs	r3, #16
   12e76:	18fb      	adds	r3, r7, r3
   12e78:	1c5c      	adds	r4, r3, #1
   12e7a:	230c      	movs	r3, #12
   12e7c:	18f9      	adds	r1, r7, r3
   12e7e:	2310      	movs	r3, #16
   12e80:	18fb      	adds	r3, r7, r3
   12e82:	1c98      	adds	r0, r3, #2
   12e84:	9604      	str	r6, [sp, #16]
   12e86:	9203      	str	r2, [sp, #12]
   12e88:	2310      	movs	r3, #16
   12e8a:	18fb      	adds	r3, r7, r3
   12e8c:	330c      	adds	r3, #12
   12e8e:	9302      	str	r3, [sp, #8]
   12e90:	2310      	movs	r3, #16
   12e92:	18fb      	adds	r3, r7, r3
   12e94:	3308      	adds	r3, #8
   12e96:	9301      	str	r3, [sp, #4]
   12e98:	2320      	movs	r3, #32
   12e9a:	18fb      	adds	r3, r7, r3
   12e9c:	9300      	str	r3, [sp, #0]
   12e9e:	002b      	movs	r3, r5
   12ea0:	0022      	movs	r2, r4
   12ea2:	4c58      	ldr	r4, [pc, #352]	; (13004 <cycle+0x1dc>)
   12ea4:	47a0      	blx	r4
   12ea6:	0003      	movs	r3, r0
   12ea8:	2b01      	cmp	r3, #1
   12eaa:	d000      	beq.n	12eae <cycle+0x86>
   12eac:	e098      	b.n	12fe0 <cycle+0x1b8>
                goto exit;
            msg.qos = (enum QoS)intQoS;
   12eae:	68fb      	ldr	r3, [r7, #12]
   12eb0:	b2da      	uxtb	r2, r3
   12eb2:	2310      	movs	r3, #16
   12eb4:	18fb      	adds	r3, r7, r3
   12eb6:	701a      	strb	r2, [r3, #0]
            deliverMessage(c, &topicName, &msg);
   12eb8:	2310      	movs	r3, #16
   12eba:	18fa      	adds	r2, r7, r3
   12ebc:	2320      	movs	r3, #32
   12ebe:	18f9      	adds	r1, r7, r3
   12ec0:	687b      	ldr	r3, [r7, #4]
   12ec2:	0018      	movs	r0, r3
   12ec4:	4b50      	ldr	r3, [pc, #320]	; (13008 <cycle+0x1e0>)
   12ec6:	4798      	blx	r3
            if (msg.qos != QOS0)
   12ec8:	2310      	movs	r3, #16
   12eca:	18fb      	adds	r3, r7, r3
   12ecc:	781b      	ldrb	r3, [r3, #0]
   12ece:	2b00      	cmp	r3, #0
   12ed0:	d100      	bne.n	12ed4 <cycle+0xac>
   12ed2:	e07d      	b.n	12fd0 <cycle+0x1a8>
            {
                if (msg.qos == QOS1)
   12ed4:	2310      	movs	r3, #16
   12ed6:	18fb      	adds	r3, r7, r3
   12ed8:	781b      	ldrb	r3, [r3, #0]
   12eda:	2b01      	cmp	r3, #1
   12edc:	d10f      	bne.n	12efe <cycle+0xd6>
                    len = MQTTSerialize_ack(c->buf, c->buf_size, PUBACK, 0, msg.id);
   12ede:	687b      	ldr	r3, [r7, #4]
   12ee0:	6918      	ldr	r0, [r3, #16]
   12ee2:	687b      	ldr	r3, [r7, #4]
   12ee4:	689b      	ldr	r3, [r3, #8]
   12ee6:	0019      	movs	r1, r3
   12ee8:	2310      	movs	r3, #16
   12eea:	18fb      	adds	r3, r7, r3
   12eec:	889b      	ldrh	r3, [r3, #4]
   12eee:	9300      	str	r3, [sp, #0]
   12ef0:	2300      	movs	r3, #0
   12ef2:	2204      	movs	r2, #4
   12ef4:	4c45      	ldr	r4, [pc, #276]	; (1300c <cycle+0x1e4>)
   12ef6:	47a0      	blx	r4
   12ef8:	0003      	movs	r3, r0
   12efa:	637b      	str	r3, [r7, #52]	; 0x34
   12efc:	e013      	b.n	12f26 <cycle+0xfe>
                else if (msg.qos == QOS2)
   12efe:	2310      	movs	r3, #16
   12f00:	18fb      	adds	r3, r7, r3
   12f02:	781b      	ldrb	r3, [r3, #0]
   12f04:	2b02      	cmp	r3, #2
   12f06:	d10e      	bne.n	12f26 <cycle+0xfe>
                    len = MQTTSerialize_ack(c->buf, c->buf_size, PUBREC, 0, msg.id);
   12f08:	687b      	ldr	r3, [r7, #4]
   12f0a:	6918      	ldr	r0, [r3, #16]
   12f0c:	687b      	ldr	r3, [r7, #4]
   12f0e:	689b      	ldr	r3, [r3, #8]
   12f10:	0019      	movs	r1, r3
   12f12:	2310      	movs	r3, #16
   12f14:	18fb      	adds	r3, r7, r3
   12f16:	889b      	ldrh	r3, [r3, #4]
   12f18:	9300      	str	r3, [sp, #0]
   12f1a:	2300      	movs	r3, #0
   12f1c:	2205      	movs	r2, #5
   12f1e:	4c3b      	ldr	r4, [pc, #236]	; (1300c <cycle+0x1e4>)
   12f20:	47a0      	blx	r4
   12f22:	0003      	movs	r3, r0
   12f24:	637b      	str	r3, [r7, #52]	; 0x34
                if (len <= 0)
   12f26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   12f28:	2b00      	cmp	r3, #0
   12f2a:	dc03      	bgt.n	12f34 <cycle+0x10c>
                    rc = MQTTCLIENT_FAILURE;
   12f2c:	2301      	movs	r3, #1
   12f2e:	425b      	negs	r3, r3
   12f30:	633b      	str	r3, [r7, #48]	; 0x30
   12f32:	e007      	b.n	12f44 <cycle+0x11c>
                else
                    rc = sendPacket(c, len, timer);
   12f34:	683a      	ldr	r2, [r7, #0]
   12f36:	6b79      	ldr	r1, [r7, #52]	; 0x34
   12f38:	687b      	ldr	r3, [r7, #4]
   12f3a:	0018      	movs	r0, r3
   12f3c:	4b34      	ldr	r3, [pc, #208]	; (13010 <cycle+0x1e8>)
   12f3e:	4798      	blx	r3
   12f40:	0003      	movs	r3, r0
   12f42:	633b      	str	r3, [r7, #48]	; 0x30
                if (rc == MQTTCLIENT_FAILURE)
   12f44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   12f46:	3301      	adds	r3, #1
   12f48:	d142      	bne.n	12fd0 <cycle+0x1a8>
                    goto exit; // there was a problem
   12f4a:	46c0      	nop			; (mov r8, r8)
   12f4c:	e049      	b.n	12fe2 <cycle+0x1ba>
        }
        case PUBREC:
        {
            unsigned short mypacketid;
            unsigned char dup, type;
            if (MQTTDeserialize_ack(&type, &dup, &mypacketid, c->readbuf, c->readbuf_size) != 1)
   12f4e:	687b      	ldr	r3, [r7, #4]
   12f50:	695c      	ldr	r4, [r3, #20]
   12f52:	687b      	ldr	r3, [r7, #4]
   12f54:	68db      	ldr	r3, [r3, #12]
   12f56:	220a      	movs	r2, #10
   12f58:	18ba      	adds	r2, r7, r2
   12f5a:	2109      	movs	r1, #9
   12f5c:	1879      	adds	r1, r7, r1
   12f5e:	2008      	movs	r0, #8
   12f60:	1838      	adds	r0, r7, r0
   12f62:	9300      	str	r3, [sp, #0]
   12f64:	0023      	movs	r3, r4
   12f66:	4c2b      	ldr	r4, [pc, #172]	; (13014 <cycle+0x1ec>)
   12f68:	47a0      	blx	r4
   12f6a:	0003      	movs	r3, r0
   12f6c:	2b01      	cmp	r3, #1
   12f6e:	d003      	beq.n	12f78 <cycle+0x150>
                rc = MQTTCLIENT_FAILURE;
   12f70:	2301      	movs	r3, #1
   12f72:	425b      	negs	r3, r3
   12f74:	633b      	str	r3, [r7, #48]	; 0x30
   12f76:	e023      	b.n	12fc0 <cycle+0x198>
            else if ((len = MQTTSerialize_ack(c->buf, c->buf_size, PUBREL, 0, mypacketid)) <= 0)
   12f78:	687b      	ldr	r3, [r7, #4]
   12f7a:	6918      	ldr	r0, [r3, #16]
   12f7c:	687b      	ldr	r3, [r7, #4]
   12f7e:	689b      	ldr	r3, [r3, #8]
   12f80:	0019      	movs	r1, r3
   12f82:	230a      	movs	r3, #10
   12f84:	18fb      	adds	r3, r7, r3
   12f86:	881b      	ldrh	r3, [r3, #0]
   12f88:	9300      	str	r3, [sp, #0]
   12f8a:	2300      	movs	r3, #0
   12f8c:	2206      	movs	r2, #6
   12f8e:	4c1f      	ldr	r4, [pc, #124]	; (1300c <cycle+0x1e4>)
   12f90:	47a0      	blx	r4
   12f92:	0003      	movs	r3, r0
   12f94:	637b      	str	r3, [r7, #52]	; 0x34
   12f96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   12f98:	2b00      	cmp	r3, #0
   12f9a:	dc03      	bgt.n	12fa4 <cycle+0x17c>
                rc = MQTTCLIENT_FAILURE;
   12f9c:	2301      	movs	r3, #1
   12f9e:	425b      	negs	r3, r3
   12fa0:	633b      	str	r3, [r7, #48]	; 0x30
   12fa2:	e00d      	b.n	12fc0 <cycle+0x198>
            else if ((rc = sendPacket(c, len, timer)) != MQTTCLIENT_SUCCESS) // send the PUBREL packet
   12fa4:	683a      	ldr	r2, [r7, #0]
   12fa6:	6b79      	ldr	r1, [r7, #52]	; 0x34
   12fa8:	687b      	ldr	r3, [r7, #4]
   12faa:	0018      	movs	r0, r3
   12fac:	4b18      	ldr	r3, [pc, #96]	; (13010 <cycle+0x1e8>)
   12fae:	4798      	blx	r3
   12fb0:	0003      	movs	r3, r0
   12fb2:	633b      	str	r3, [r7, #48]	; 0x30
   12fb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   12fb6:	2b00      	cmp	r3, #0
   12fb8:	d002      	beq.n	12fc0 <cycle+0x198>
                rc = MQTTCLIENT_FAILURE; // there was a problem
   12fba:	2301      	movs	r3, #1
   12fbc:	425b      	negs	r3, r3
   12fbe:	633b      	str	r3, [r7, #48]	; 0x30
            if (rc == MQTTCLIENT_FAILURE)
   12fc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   12fc2:	3301      	adds	r3, #1
   12fc4:	d106      	bne.n	12fd4 <cycle+0x1ac>
                goto exit; // there was a problem
   12fc6:	e00c      	b.n	12fe2 <cycle+0x1ba>
            break;
        }
        case PUBCOMP:
            break;
        case PINGRESP:
            c->ping_outstanding = 0;
   12fc8:	687b      	ldr	r3, [r7, #4]
   12fca:	2200      	movs	r2, #0
   12fcc:	771a      	strb	r2, [r3, #28]
            break;
   12fce:	e002      	b.n	12fd6 <cycle+0x1ae>
            break;
   12fd0:	46c0      	nop			; (mov r8, r8)
   12fd2:	e000      	b.n	12fd6 <cycle+0x1ae>
            break;
   12fd4:	46c0      	nop			; (mov r8, r8)
    }
    keepalive(c);
   12fd6:	687b      	ldr	r3, [r7, #4]
   12fd8:	0018      	movs	r0, r3
   12fda:	4b0f      	ldr	r3, [pc, #60]	; (13018 <cycle+0x1f0>)
   12fdc:	4798      	blx	r3
   12fde:	e000      	b.n	12fe2 <cycle+0x1ba>
                goto exit;
   12fe0:	46c0      	nop			; (mov r8, r8)
exit:
    if (rc == MQTTCLIENT_SUCCESS)
   12fe2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   12fe4:	2b00      	cmp	r3, #0
   12fe6:	d103      	bne.n	12ff0 <cycle+0x1c8>
        rc = packet_type;
   12fe8:	232e      	movs	r3, #46	; 0x2e
   12fea:	18fb      	adds	r3, r7, r3
   12fec:	881b      	ldrh	r3, [r3, #0]
   12fee:	633b      	str	r3, [r7, #48]	; 0x30
    return rc;
   12ff0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
   12ff2:	0018      	movs	r0, r3
   12ff4:	46bd      	mov	sp, r7
   12ff6:	b00f      	add	sp, #60	; 0x3c
   12ff8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   12ffa:	46c0      	nop			; (mov r8, r8)
   12ffc:	00012add 	.word	0x00012add
   13000:	00020f48 	.word	0x00020f48
   13004:	00013a21 	.word	0x00013a21
   13008:	00012c99 	.word	0x00012c99
   1300c:	00014219 	.word	0x00014219
   13010:	00012921 	.word	0x00012921
   13014:	00013b25 	.word	0x00013b25
   13018:	00012d85 	.word	0x00012d85

0001301c <MQTTYield>:


int MQTTYield(MQTTClient* c, int timeout_ms)
{
   1301c:	b580      	push	{r7, lr}
   1301e:	b086      	sub	sp, #24
   13020:	af00      	add	r7, sp, #0
   13022:	6078      	str	r0, [r7, #4]
   13024:	6039      	str	r1, [r7, #0]
    int rc = MQTTCLIENT_SUCCESS;
   13026:	2300      	movs	r3, #0
   13028:	617b      	str	r3, [r7, #20]
    Timer timer;

    TimerInit(&timer);
   1302a:	230c      	movs	r3, #12
   1302c:	18fb      	adds	r3, r7, r3
   1302e:	0018      	movs	r0, r3
   13030:	4b11      	ldr	r3, [pc, #68]	; (13078 <MQTTYield+0x5c>)
   13032:	4798      	blx	r3
    TimerCountdownMS(&timer, timeout_ms);
   13034:	683a      	ldr	r2, [r7, #0]
   13036:	230c      	movs	r3, #12
   13038:	18fb      	adds	r3, r7, r3
   1303a:	0011      	movs	r1, r2
   1303c:	0018      	movs	r0, r3
   1303e:	4b0f      	ldr	r3, [pc, #60]	; (1307c <MQTTYield+0x60>)
   13040:	4798      	blx	r3

	do
    {
        if (cycle(c, &timer) == MQTTCLIENT_FAILURE)
   13042:	230c      	movs	r3, #12
   13044:	18fa      	adds	r2, r7, r3
   13046:	687b      	ldr	r3, [r7, #4]
   13048:	0011      	movs	r1, r2
   1304a:	0018      	movs	r0, r3
   1304c:	4b0c      	ldr	r3, [pc, #48]	; (13080 <MQTTYield+0x64>)
   1304e:	4798      	blx	r3
   13050:	0003      	movs	r3, r0
   13052:	3301      	adds	r3, #1
   13054:	d103      	bne.n	1305e <MQTTYield+0x42>
        {
            rc = MQTTCLIENT_FAILURE;
   13056:	2301      	movs	r3, #1
   13058:	425b      	negs	r3, r3
   1305a:	617b      	str	r3, [r7, #20]
            break;
   1305c:	e006      	b.n	1306c <MQTTYield+0x50>
        }
	} while (!TimerIsExpired(&timer));
   1305e:	230c      	movs	r3, #12
   13060:	18fb      	adds	r3, r7, r3
   13062:	0018      	movs	r0, r3
   13064:	4b07      	ldr	r3, [pc, #28]	; (13084 <MQTTYield+0x68>)
   13066:	4798      	blx	r3
   13068:	1e03      	subs	r3, r0, #0
   1306a:	d0ea      	beq.n	13042 <MQTTYield+0x26>
        
    return rc;
   1306c:	697b      	ldr	r3, [r7, #20]
}
   1306e:	0018      	movs	r0, r3
   13070:	46bd      	mov	sp, r7
   13072:	b006      	add	sp, #24
   13074:	bd80      	pop	{r7, pc}
   13076:	46c0      	nop			; (mov r8, r8)
   13078:	0001465d 	.word	0x0001465d
   1307c:	00014721 	.word	0x00014721
   13080:	00012e29 	.word	0x00012e29
   13084:	00014681 	.word	0x00014681

00013088 <waitfor>:
}
#endif


int waitfor(MQTTClient* c, int packet_type, Timer* timer)
{
   13088:	b580      	push	{r7, lr}
   1308a:	b086      	sub	sp, #24
   1308c:	af00      	add	r7, sp, #0
   1308e:	60f8      	str	r0, [r7, #12]
   13090:	60b9      	str	r1, [r7, #8]
   13092:	607a      	str	r2, [r7, #4]
    int rc = MQTTCLIENT_FAILURE;
   13094:	2301      	movs	r3, #1
   13096:	425b      	negs	r3, r3
   13098:	617b      	str	r3, [r7, #20]
    
    do
    {
        if (TimerIsExpired(timer))
   1309a:	687b      	ldr	r3, [r7, #4]
   1309c:	0018      	movs	r0, r3
   1309e:	4b0b      	ldr	r3, [pc, #44]	; (130cc <waitfor+0x44>)
   130a0:	4798      	blx	r3
   130a2:	1e03      	subs	r3, r0, #0
   130a4:	d10c      	bne.n	130c0 <waitfor+0x38>
            break; // we timed out
    }
    while ((rc = cycle(c, timer)) != packet_type);  
   130a6:	687a      	ldr	r2, [r7, #4]
   130a8:	68fb      	ldr	r3, [r7, #12]
   130aa:	0011      	movs	r1, r2
   130ac:	0018      	movs	r0, r3
   130ae:	4b08      	ldr	r3, [pc, #32]	; (130d0 <waitfor+0x48>)
   130b0:	4798      	blx	r3
   130b2:	0003      	movs	r3, r0
   130b4:	617b      	str	r3, [r7, #20]
   130b6:	697a      	ldr	r2, [r7, #20]
   130b8:	68bb      	ldr	r3, [r7, #8]
   130ba:	429a      	cmp	r2, r3
   130bc:	d1ed      	bne.n	1309a <waitfor+0x12>
   130be:	e000      	b.n	130c2 <waitfor+0x3a>
            break; // we timed out
   130c0:	46c0      	nop			; (mov r8, r8)
    
    return rc;
   130c2:	697b      	ldr	r3, [r7, #20]
}
   130c4:	0018      	movs	r0, r3
   130c6:	46bd      	mov	sp, r7
   130c8:	b006      	add	sp, #24
   130ca:	bd80      	pop	{r7, pc}
   130cc:	00014681 	.word	0x00014681
   130d0:	00012e29 	.word	0x00012e29

000130d4 <MQTTConnect>:


int MQTTConnect(MQTTClient* c, MQTTPacket_connectData* options)
{
   130d4:	b590      	push	{r4, r7, lr}
   130d6:	b09f      	sub	sp, #124	; 0x7c
   130d8:	af00      	add	r7, sp, #0
   130da:	6078      	str	r0, [r7, #4]
   130dc:	6039      	str	r1, [r7, #0]
    Timer connect_timer;
    int rc = MQTTCLIENT_FAILURE;
   130de:	2301      	movs	r3, #1
   130e0:	425b      	negs	r3, r3
   130e2:	677b      	str	r3, [r7, #116]	; 0x74
    MQTTPacket_connectData default_options = MQTTPacket_connectData_initializer;
   130e4:	2310      	movs	r3, #16
   130e6:	18fa      	adds	r2, r7, r3
   130e8:	4b41      	ldr	r3, [pc, #260]	; (131f0 <MQTTConnect+0x11c>)
   130ea:	0010      	movs	r0, r2
   130ec:	0019      	movs	r1, r3
   130ee:	2358      	movs	r3, #88	; 0x58
   130f0:	001a      	movs	r2, r3
   130f2:	4b40      	ldr	r3, [pc, #256]	; (131f4 <MQTTConnect+0x120>)
   130f4:	4798      	blx	r3
    int len = 0;
   130f6:	2300      	movs	r3, #0
   130f8:	673b      	str	r3, [r7, #112]	; 0x70

#if defined(MQTT_TASK)
	MutexLock(&c->mutex);
#endif
	if (c->isconnected) /* don't send connect packet again if we are already connected */
   130fa:	687b      	ldr	r3, [r7, #4]
   130fc:	6a1b      	ldr	r3, [r3, #32]
   130fe:	2b00      	cmp	r3, #0
   13100:	d166      	bne.n	131d0 <MQTTConnect+0xfc>
		goto exit;
    
    TimerInit(&connect_timer);
   13102:	2368      	movs	r3, #104	; 0x68
   13104:	18fb      	adds	r3, r7, r3
   13106:	0018      	movs	r0, r3
   13108:	4b3b      	ldr	r3, [pc, #236]	; (131f8 <MQTTConnect+0x124>)
   1310a:	4798      	blx	r3
    TimerCountdownMS(&connect_timer, c->command_timeout_ms);
   1310c:	687b      	ldr	r3, [r7, #4]
   1310e:	685a      	ldr	r2, [r3, #4]
   13110:	2368      	movs	r3, #104	; 0x68
   13112:	18fb      	adds	r3, r7, r3
   13114:	0011      	movs	r1, r2
   13116:	0018      	movs	r0, r3
   13118:	4b38      	ldr	r3, [pc, #224]	; (131fc <MQTTConnect+0x128>)
   1311a:	4798      	blx	r3

    if (options == 0)
   1311c:	683b      	ldr	r3, [r7, #0]
   1311e:	2b00      	cmp	r3, #0
   13120:	d102      	bne.n	13128 <MQTTConnect+0x54>
        options = &default_options; /* set default options if none were supplied */
   13122:	2310      	movs	r3, #16
   13124:	18fb      	adds	r3, r7, r3
   13126:	603b      	str	r3, [r7, #0]
    
    c->keepAliveInterval = options->keepAliveInterval;
   13128:	683b      	ldr	r3, [r7, #0]
   1312a:	8b1b      	ldrh	r3, [r3, #24]
   1312c:	001a      	movs	r2, r3
   1312e:	687b      	ldr	r3, [r7, #4]
   13130:	619a      	str	r2, [r3, #24]
    TimerCountdown(&c->ping_timer, c->keepAliveInterval);
   13132:	687b      	ldr	r3, [r7, #4]
   13134:	3354      	adds	r3, #84	; 0x54
   13136:	001a      	movs	r2, r3
   13138:	687b      	ldr	r3, [r7, #4]
   1313a:	699b      	ldr	r3, [r3, #24]
   1313c:	0019      	movs	r1, r3
   1313e:	0010      	movs	r0, r2
   13140:	4b2f      	ldr	r3, [pc, #188]	; (13200 <MQTTConnect+0x12c>)
   13142:	4798      	blx	r3
    if ((len = MQTTSerialize_connect(c->buf, c->buf_size, options)) <= 0)
   13144:	687b      	ldr	r3, [r7, #4]
   13146:	6918      	ldr	r0, [r3, #16]
   13148:	687b      	ldr	r3, [r7, #4]
   1314a:	689b      	ldr	r3, [r3, #8]
   1314c:	0019      	movs	r1, r3
   1314e:	683b      	ldr	r3, [r7, #0]
   13150:	001a      	movs	r2, r3
   13152:	4b2c      	ldr	r3, [pc, #176]	; (13204 <MQTTConnect+0x130>)
   13154:	4798      	blx	r3
   13156:	0003      	movs	r3, r0
   13158:	673b      	str	r3, [r7, #112]	; 0x70
   1315a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   1315c:	2b00      	cmp	r3, #0
   1315e:	dd39      	ble.n	131d4 <MQTTConnect+0x100>
        goto exit;
    if ((rc = sendPacket(c, len, &connect_timer)) != MQTTCLIENT_SUCCESS)  // send the connect packet
   13160:	2368      	movs	r3, #104	; 0x68
   13162:	18fa      	adds	r2, r7, r3
   13164:	6f39      	ldr	r1, [r7, #112]	; 0x70
   13166:	687b      	ldr	r3, [r7, #4]
   13168:	0018      	movs	r0, r3
   1316a:	4b27      	ldr	r3, [pc, #156]	; (13208 <MQTTConnect+0x134>)
   1316c:	4798      	blx	r3
   1316e:	0003      	movs	r3, r0
   13170:	677b      	str	r3, [r7, #116]	; 0x74
   13172:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   13174:	2b00      	cmp	r3, #0
   13176:	d12f      	bne.n	131d8 <MQTTConnect+0x104>
        goto exit; // there was a problem
    
    // this will be a blocking call, wait for the connack
    if (waitfor(c, CONNACK, &connect_timer) == CONNACK)
   13178:	2368      	movs	r3, #104	; 0x68
   1317a:	18fa      	adds	r2, r7, r3
   1317c:	687b      	ldr	r3, [r7, #4]
   1317e:	2102      	movs	r1, #2
   13180:	0018      	movs	r0, r3
   13182:	4b22      	ldr	r3, [pc, #136]	; (1320c <MQTTConnect+0x138>)
   13184:	4798      	blx	r3
   13186:	0003      	movs	r3, r0
   13188:	2b02      	cmp	r3, #2
   1318a:	d11d      	bne.n	131c8 <MQTTConnect+0xf4>
    {
        unsigned char connack_rc = 255;
   1318c:	230f      	movs	r3, #15
   1318e:	18fb      	adds	r3, r7, r3
   13190:	22ff      	movs	r2, #255	; 0xff
   13192:	701a      	strb	r2, [r3, #0]
        unsigned char sessionPresent = 0;
   13194:	230e      	movs	r3, #14
   13196:	18fb      	adds	r3, r7, r3
   13198:	2200      	movs	r2, #0
   1319a:	701a      	strb	r2, [r3, #0]
        if (MQTTDeserialize_connack(&sessionPresent, &connack_rc, c->readbuf, c->readbuf_size) == 1)
   1319c:	687b      	ldr	r3, [r7, #4]
   1319e:	695a      	ldr	r2, [r3, #20]
   131a0:	687b      	ldr	r3, [r7, #4]
   131a2:	68db      	ldr	r3, [r3, #12]
   131a4:	210f      	movs	r1, #15
   131a6:	1879      	adds	r1, r7, r1
   131a8:	200e      	movs	r0, #14
   131aa:	1838      	adds	r0, r7, r0
   131ac:	4c18      	ldr	r4, [pc, #96]	; (13210 <MQTTConnect+0x13c>)
   131ae:	47a0      	blx	r4
   131b0:	0003      	movs	r3, r0
   131b2:	2b01      	cmp	r3, #1
   131b4:	d104      	bne.n	131c0 <MQTTConnect+0xec>
            rc = connack_rc;
   131b6:	230f      	movs	r3, #15
   131b8:	18fb      	adds	r3, r7, r3
   131ba:	781b      	ldrb	r3, [r3, #0]
   131bc:	677b      	str	r3, [r7, #116]	; 0x74
   131be:	e00c      	b.n	131da <MQTTConnect+0x106>
        else
            rc = MQTTCLIENT_FAILURE;
   131c0:	2301      	movs	r3, #1
   131c2:	425b      	negs	r3, r3
   131c4:	677b      	str	r3, [r7, #116]	; 0x74
   131c6:	e008      	b.n	131da <MQTTConnect+0x106>
    }
    else
        rc = MQTTCLIENT_FAILURE;
   131c8:	2301      	movs	r3, #1
   131ca:	425b      	negs	r3, r3
   131cc:	677b      	str	r3, [r7, #116]	; 0x74
   131ce:	e004      	b.n	131da <MQTTConnect+0x106>
		goto exit;
   131d0:	46c0      	nop			; (mov r8, r8)
   131d2:	e002      	b.n	131da <MQTTConnect+0x106>
        goto exit;
   131d4:	46c0      	nop			; (mov r8, r8)
   131d6:	e000      	b.n	131da <MQTTConnect+0x106>
        goto exit; // there was a problem
   131d8:	46c0      	nop			; (mov r8, r8)
    
exit:
    if (rc == MQTTCLIENT_SUCCESS)
   131da:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   131dc:	2b00      	cmp	r3, #0
   131de:	d102      	bne.n	131e6 <MQTTConnect+0x112>
        c->isconnected = 1;
   131e0:	687b      	ldr	r3, [r7, #4]
   131e2:	2201      	movs	r2, #1
   131e4:	621a      	str	r2, [r3, #32]

#if defined(MQTT_TASK)
	MutexUnlock(&c->mutex);
#endif

    return rc;
   131e6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
}
   131e8:	0018      	movs	r0, r3
   131ea:	46bd      	mov	sp, r7
   131ec:	b01f      	add	sp, #124	; 0x7c
   131ee:	bd90      	pop	{r4, r7, pc}
   131f0:	00020f80 	.word	0x00020f80
   131f4:	0001c13d 	.word	0x0001c13d
   131f8:	0001465d 	.word	0x0001465d
   131fc:	00014721 	.word	0x00014721
   13200:	000147cd 	.word	0x000147cd
   13204:	00013629 	.word	0x00013629
   13208:	00012921 	.word	0x00012921
   1320c:	00013089 	.word	0x00013089
   13210:	000138a5 	.word	0x000138a5

00013214 <MQTTSubscribe>:


int MQTTSubscribe(MQTTClient* c, const char* topicFilter, enum QoS qos, messageHandler messageHandler)
{ 
   13214:	b5b0      	push	{r4, r5, r7, lr}
   13216:	b094      	sub	sp, #80	; 0x50
   13218:	af04      	add	r7, sp, #16
   1321a:	60f8      	str	r0, [r7, #12]
   1321c:	60b9      	str	r1, [r7, #8]
   1321e:	603b      	str	r3, [r7, #0]
   13220:	1dfb      	adds	r3, r7, #7
   13222:	701a      	strb	r2, [r3, #0]
    int rc = MQTTCLIENT_FAILURE;  
   13224:	2301      	movs	r3, #1
   13226:	425b      	negs	r3, r3
   13228:	63fb      	str	r3, [r7, #60]	; 0x3c
    Timer timer;
    int len = 0;
   1322a:	2300      	movs	r3, #0
   1322c:	637b      	str	r3, [r7, #52]	; 0x34
    MQTTString topic = MQTTString_initializer;
   1322e:	2320      	movs	r3, #32
   13230:	18fb      	adds	r3, r7, r3
   13232:	2200      	movs	r2, #0
   13234:	601a      	str	r2, [r3, #0]
   13236:	2320      	movs	r3, #32
   13238:	18fb      	adds	r3, r7, r3
   1323a:	2200      	movs	r2, #0
   1323c:	605a      	str	r2, [r3, #4]
   1323e:	2320      	movs	r3, #32
   13240:	18fb      	adds	r3, r7, r3
   13242:	2200      	movs	r2, #0
   13244:	609a      	str	r2, [r3, #8]
    topic.cstring = (char *)topicFilter;
   13246:	2320      	movs	r3, #32
   13248:	18fb      	adds	r3, r7, r3
   1324a:	68ba      	ldr	r2, [r7, #8]
   1324c:	601a      	str	r2, [r3, #0]
    int qos_val = qos;
   1324e:	1dfb      	adds	r3, r7, #7
   13250:	781b      	ldrb	r3, [r3, #0]
   13252:	61fb      	str	r3, [r7, #28]
    
#if defined(MQTT_TASK)
	MutexLock(&c->mutex);
#endif
	if (!c->isconnected)
   13254:	68fb      	ldr	r3, [r7, #12]
   13256:	6a1b      	ldr	r3, [r3, #32]
   13258:	2b00      	cmp	r3, #0
   1325a:	d100      	bne.n	1325e <MQTTSubscribe+0x4a>
   1325c:	e088      	b.n	13370 <MQTTSubscribe+0x15c>
		goto exit;

    TimerInit(&timer);
   1325e:	232c      	movs	r3, #44	; 0x2c
   13260:	18fb      	adds	r3, r7, r3
   13262:	0018      	movs	r0, r3
   13264:	4b47      	ldr	r3, [pc, #284]	; (13384 <MQTTSubscribe+0x170>)
   13266:	4798      	blx	r3
    TimerCountdownMS(&timer, c->command_timeout_ms);
   13268:	68fb      	ldr	r3, [r7, #12]
   1326a:	685a      	ldr	r2, [r3, #4]
   1326c:	232c      	movs	r3, #44	; 0x2c
   1326e:	18fb      	adds	r3, r7, r3
   13270:	0011      	movs	r1, r2
   13272:	0018      	movs	r0, r3
   13274:	4b44      	ldr	r3, [pc, #272]	; (13388 <MQTTSubscribe+0x174>)
   13276:	4798      	blx	r3
    
    len = MQTTSerialize_subscribe(c->buf, c->buf_size, 0, getNextPacketId(c), 1, &topic, &qos_val);
   13278:	68fb      	ldr	r3, [r7, #12]
   1327a:	691c      	ldr	r4, [r3, #16]
   1327c:	68fb      	ldr	r3, [r7, #12]
   1327e:	689b      	ldr	r3, [r3, #8]
   13280:	001d      	movs	r5, r3
   13282:	68fb      	ldr	r3, [r7, #12]
   13284:	0018      	movs	r0, r3
   13286:	4b41      	ldr	r3, [pc, #260]	; (1338c <MQTTSubscribe+0x178>)
   13288:	4798      	blx	r3
   1328a:	0003      	movs	r3, r0
   1328c:	b29a      	uxth	r2, r3
   1328e:	231c      	movs	r3, #28
   13290:	18fb      	adds	r3, r7, r3
   13292:	9302      	str	r3, [sp, #8]
   13294:	2320      	movs	r3, #32
   13296:	18fb      	adds	r3, r7, r3
   13298:	9301      	str	r3, [sp, #4]
   1329a:	2301      	movs	r3, #1
   1329c:	9300      	str	r3, [sp, #0]
   1329e:	0013      	movs	r3, r2
   132a0:	2200      	movs	r2, #0
   132a2:	0029      	movs	r1, r5
   132a4:	0020      	movs	r0, r4
   132a6:	4c3a      	ldr	r4, [pc, #232]	; (13390 <MQTTSubscribe+0x17c>)
   132a8:	47a0      	blx	r4
   132aa:	0003      	movs	r3, r0
   132ac:	637b      	str	r3, [r7, #52]	; 0x34
    if (len <= 0)
   132ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   132b0:	2b00      	cmp	r3, #0
   132b2:	dd5f      	ble.n	13374 <MQTTSubscribe+0x160>
        goto exit;
    if ((rc = sendPacket(c, len, &timer)) != MQTTCLIENT_SUCCESS) // send the subscribe packet
   132b4:	232c      	movs	r3, #44	; 0x2c
   132b6:	18fa      	adds	r2, r7, r3
   132b8:	6b79      	ldr	r1, [r7, #52]	; 0x34
   132ba:	68fb      	ldr	r3, [r7, #12]
   132bc:	0018      	movs	r0, r3
   132be:	4b35      	ldr	r3, [pc, #212]	; (13394 <MQTTSubscribe+0x180>)
   132c0:	4798      	blx	r3
   132c2:	0003      	movs	r3, r0
   132c4:	63fb      	str	r3, [r7, #60]	; 0x3c
   132c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   132c8:	2b00      	cmp	r3, #0
   132ca:	d155      	bne.n	13378 <MQTTSubscribe+0x164>
        goto exit;             // there was a problem
    
    if (waitfor(c, SUBACK, &timer) == SUBACK)      // wait for suback 
   132cc:	232c      	movs	r3, #44	; 0x2c
   132ce:	18fa      	adds	r2, r7, r3
   132d0:	68fb      	ldr	r3, [r7, #12]
   132d2:	2109      	movs	r1, #9
   132d4:	0018      	movs	r0, r3
   132d6:	4b30      	ldr	r3, [pc, #192]	; (13398 <MQTTSubscribe+0x184>)
   132d8:	4798      	blx	r3
   132da:	0003      	movs	r3, r0
   132dc:	2b09      	cmp	r3, #9
   132de:	d143      	bne.n	13368 <MQTTSubscribe+0x154>
    {
        int count = 0, grantedQoS = -1;
   132e0:	2300      	movs	r3, #0
   132e2:	61bb      	str	r3, [r7, #24]
   132e4:	2301      	movs	r3, #1
   132e6:	425b      	negs	r3, r3
   132e8:	617b      	str	r3, [r7, #20]
        unsigned short mypacketid;
        if (MQTTDeserialize_suback(&mypacketid, 1, &count, &grantedQoS, c->readbuf, c->readbuf_size) == 1)
   132ea:	68fb      	ldr	r3, [r7, #12]
   132ec:	695a      	ldr	r2, [r3, #20]
   132ee:	68fb      	ldr	r3, [r7, #12]
   132f0:	68db      	ldr	r3, [r3, #12]
   132f2:	001c      	movs	r4, r3
   132f4:	2314      	movs	r3, #20
   132f6:	18fb      	adds	r3, r7, r3
   132f8:	2118      	movs	r1, #24
   132fa:	1879      	adds	r1, r7, r1
   132fc:	2012      	movs	r0, #18
   132fe:	1838      	adds	r0, r7, r0
   13300:	9401      	str	r4, [sp, #4]
   13302:	9200      	str	r2, [sp, #0]
   13304:	000a      	movs	r2, r1
   13306:	2101      	movs	r1, #1
   13308:	4c24      	ldr	r4, [pc, #144]	; (1339c <MQTTSubscribe+0x188>)
   1330a:	47a0      	blx	r4
   1330c:	0003      	movs	r3, r0
   1330e:	2b01      	cmp	r3, #1
   13310:	d101      	bne.n	13316 <MQTTSubscribe+0x102>
            rc = grantedQoS; // 0, 1, 2 or 0x80 
   13312:	697b      	ldr	r3, [r7, #20]
   13314:	63fb      	str	r3, [r7, #60]	; 0x3c
        if (rc != 0x80)
   13316:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   13318:	2b80      	cmp	r3, #128	; 0x80
   1331a:	d02e      	beq.n	1337a <MQTTSubscribe+0x166>
        {
            int i;
            for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
   1331c:	2300      	movs	r3, #0
   1331e:	63bb      	str	r3, [r7, #56]	; 0x38
   13320:	e01e      	b.n	13360 <MQTTSubscribe+0x14c>
            {
                if (c->messageHandlers[i].topicFilter == 0)
   13322:	68fa      	ldr	r2, [r7, #12]
   13324:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   13326:	3304      	adds	r3, #4
   13328:	00db      	lsls	r3, r3, #3
   1332a:	18d3      	adds	r3, r2, r3
   1332c:	3304      	adds	r3, #4
   1332e:	681b      	ldr	r3, [r3, #0]
   13330:	2b00      	cmp	r3, #0
   13332:	d112      	bne.n	1335a <MQTTSubscribe+0x146>
                {
                    c->messageHandlers[i].topicFilter = topicFilter;
   13334:	68fa      	ldr	r2, [r7, #12]
   13336:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   13338:	3304      	adds	r3, #4
   1333a:	00db      	lsls	r3, r3, #3
   1333c:	18d3      	adds	r3, r2, r3
   1333e:	3304      	adds	r3, #4
   13340:	68ba      	ldr	r2, [r7, #8]
   13342:	601a      	str	r2, [r3, #0]
                    c->messageHandlers[i].fp = messageHandler;
   13344:	68fa      	ldr	r2, [r7, #12]
   13346:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   13348:	3304      	adds	r3, #4
   1334a:	00db      	lsls	r3, r3, #3
   1334c:	18d3      	adds	r3, r2, r3
   1334e:	3308      	adds	r3, #8
   13350:	683a      	ldr	r2, [r7, #0]
   13352:	601a      	str	r2, [r3, #0]
                    rc = 0;
   13354:	2300      	movs	r3, #0
   13356:	63fb      	str	r3, [r7, #60]	; 0x3c
                    break;
   13358:	e00f      	b.n	1337a <MQTTSubscribe+0x166>
            for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
   1335a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1335c:	3301      	adds	r3, #1
   1335e:	63bb      	str	r3, [r7, #56]	; 0x38
   13360:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   13362:	2b04      	cmp	r3, #4
   13364:	dddd      	ble.n	13322 <MQTTSubscribe+0x10e>
   13366:	e008      	b.n	1337a <MQTTSubscribe+0x166>
                }
            }
        }
    }
    else 
        rc = MQTTCLIENT_FAILURE;
   13368:	2301      	movs	r3, #1
   1336a:	425b      	negs	r3, r3
   1336c:	63fb      	str	r3, [r7, #60]	; 0x3c
   1336e:	e004      	b.n	1337a <MQTTSubscribe+0x166>
		goto exit;
   13370:	46c0      	nop			; (mov r8, r8)
   13372:	e002      	b.n	1337a <MQTTSubscribe+0x166>
        goto exit;
   13374:	46c0      	nop			; (mov r8, r8)
   13376:	e000      	b.n	1337a <MQTTSubscribe+0x166>
        goto exit;             // there was a problem
   13378:	46c0      	nop			; (mov r8, r8)
        
exit:
#if defined(MQTT_TASK)
	MutexUnlock(&c->mutex);
#endif
    return rc;
   1337a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
   1337c:	0018      	movs	r0, r3
   1337e:	46bd      	mov	sp, r7
   13380:	b010      	add	sp, #64	; 0x40
   13382:	bdb0      	pop	{r4, r5, r7, pc}
   13384:	0001465d 	.word	0x0001465d
   13388:	00014721 	.word	0x00014721
   1338c:	000128f1 	.word	0x000128f1
   13390:	00014361 	.word	0x00014361
   13394:	00012921 	.word	0x00012921
   13398:	00013089 	.word	0x00013089
   1339c:	000144b1 	.word	0x000144b1

000133a0 <MQTTPublish>:
    return rc;
}


int MQTTPublish(MQTTClient* c, const char* topicName, MQTTMessage* message)
{
   133a0:	b5f0      	push	{r4, r5, r6, r7, lr}
   133a2:	46ce      	mov	lr, r9
   133a4:	4647      	mov	r7, r8
   133a6:	b580      	push	{r7, lr}
   133a8:	b097      	sub	sp, #92	; 0x5c
   133aa:	af08      	add	r7, sp, #32
   133ac:	60f8      	str	r0, [r7, #12]
   133ae:	60b9      	str	r1, [r7, #8]
   133b0:	607a      	str	r2, [r7, #4]
    int rc = MQTTCLIENT_FAILURE;
   133b2:	2301      	movs	r3, #1
   133b4:	425b      	negs	r3, r3
   133b6:	637b      	str	r3, [r7, #52]	; 0x34
    Timer timer;   
    MQTTString topic = MQTTString_initializer;
   133b8:	231c      	movs	r3, #28
   133ba:	18fb      	adds	r3, r7, r3
   133bc:	2200      	movs	r2, #0
   133be:	601a      	str	r2, [r3, #0]
   133c0:	231c      	movs	r3, #28
   133c2:	18fb      	adds	r3, r7, r3
   133c4:	2200      	movs	r2, #0
   133c6:	605a      	str	r2, [r3, #4]
   133c8:	231c      	movs	r3, #28
   133ca:	18fb      	adds	r3, r7, r3
   133cc:	2200      	movs	r2, #0
   133ce:	609a      	str	r2, [r3, #8]
    topic.cstring = (char *)topicName;
   133d0:	231c      	movs	r3, #28
   133d2:	18fb      	adds	r3, r7, r3
   133d4:	68ba      	ldr	r2, [r7, #8]
   133d6:	601a      	str	r2, [r3, #0]
    int len = 0;
   133d8:	2300      	movs	r3, #0
   133da:	633b      	str	r3, [r7, #48]	; 0x30

#if defined(MQTT_TASK)
	MutexLock(&c->mutex);
#endif
	if (!c->isconnected)
   133dc:	68fb      	ldr	r3, [r7, #12]
   133de:	6a1b      	ldr	r3, [r3, #32]
   133e0:	2b00      	cmp	r3, #0
   133e2:	d100      	bne.n	133e6 <MQTTPublish+0x46>
   133e4:	e0a0      	b.n	13528 <MQTTPublish+0x188>
		goto exit;

    TimerInit(&timer);
   133e6:	2328      	movs	r3, #40	; 0x28
   133e8:	18fb      	adds	r3, r7, r3
   133ea:	0018      	movs	r0, r3
   133ec:	4b55      	ldr	r3, [pc, #340]	; (13544 <MQTTPublish+0x1a4>)
   133ee:	4798      	blx	r3
    TimerCountdownMS(&timer, c->command_timeout_ms);
   133f0:	68fb      	ldr	r3, [r7, #12]
   133f2:	685a      	ldr	r2, [r3, #4]
   133f4:	2328      	movs	r3, #40	; 0x28
   133f6:	18fb      	adds	r3, r7, r3
   133f8:	0011      	movs	r1, r2
   133fa:	0018      	movs	r0, r3
   133fc:	4b52      	ldr	r3, [pc, #328]	; (13548 <MQTTPublish+0x1a8>)
   133fe:	4798      	blx	r3

    if (message->qos == QOS1 || message->qos == QOS2)
   13400:	687b      	ldr	r3, [r7, #4]
   13402:	781b      	ldrb	r3, [r3, #0]
   13404:	2b01      	cmp	r3, #1
   13406:	d003      	beq.n	13410 <MQTTPublish+0x70>
   13408:	687b      	ldr	r3, [r7, #4]
   1340a:	781b      	ldrb	r3, [r3, #0]
   1340c:	2b02      	cmp	r3, #2
   1340e:	d107      	bne.n	13420 <MQTTPublish+0x80>
        message->id = getNextPacketId(c);
   13410:	68fb      	ldr	r3, [r7, #12]
   13412:	0018      	movs	r0, r3
   13414:	4b4d      	ldr	r3, [pc, #308]	; (1354c <MQTTPublish+0x1ac>)
   13416:	4798      	blx	r3
   13418:	0003      	movs	r3, r0
   1341a:	b29a      	uxth	r2, r3
   1341c:	687b      	ldr	r3, [r7, #4]
   1341e:	809a      	strh	r2, [r3, #4]
    
    len = MQTTSerialize_publish(c->buf, c->buf_size, 0, message->qos, message->retained, message->id, 
   13420:	68fb      	ldr	r3, [r7, #12]
   13422:	691b      	ldr	r3, [r3, #16]
   13424:	469c      	mov	ip, r3
   13426:	68fb      	ldr	r3, [r7, #12]
   13428:	689b      	ldr	r3, [r3, #8]
   1342a:	001d      	movs	r5, r3
   1342c:	687b      	ldr	r3, [r7, #4]
   1342e:	781b      	ldrb	r3, [r3, #0]
   13430:	001e      	movs	r6, r3
   13432:	687b      	ldr	r3, [r7, #4]
   13434:	785b      	ldrb	r3, [r3, #1]
   13436:	4698      	mov	r8, r3
   13438:	687b      	ldr	r3, [r7, #4]
   1343a:	889b      	ldrh	r3, [r3, #4]
   1343c:	4699      	mov	r9, r3
              topic, (unsigned char*)message->payload, message->payloadlen);
   1343e:	687b      	ldr	r3, [r7, #4]
   13440:	689a      	ldr	r2, [r3, #8]
   13442:	687b      	ldr	r3, [r7, #4]
   13444:	68db      	ldr	r3, [r3, #12]
    len = MQTTSerialize_publish(c->buf, c->buf_size, 0, message->qos, message->retained, message->id, 
   13446:	9306      	str	r3, [sp, #24]
   13448:	9205      	str	r2, [sp, #20]
   1344a:	231c      	movs	r3, #28
   1344c:	18fa      	adds	r2, r7, r3
   1344e:	2308      	movs	r3, #8
   13450:	446b      	add	r3, sp
   13452:	ca13      	ldmia	r2!, {r0, r1, r4}
   13454:	c313      	stmia	r3!, {r0, r1, r4}
   13456:	464b      	mov	r3, r9
   13458:	9301      	str	r3, [sp, #4]
   1345a:	4643      	mov	r3, r8
   1345c:	9300      	str	r3, [sp, #0]
   1345e:	0033      	movs	r3, r6
   13460:	2200      	movs	r2, #0
   13462:	0029      	movs	r1, r5
   13464:	4660      	mov	r0, ip
   13466:	4c3a      	ldr	r4, [pc, #232]	; (13550 <MQTTPublish+0x1b0>)
   13468:	47a0      	blx	r4
   1346a:	0003      	movs	r3, r0
   1346c:	633b      	str	r3, [r7, #48]	; 0x30
    if (len <= 0)
   1346e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   13470:	2b00      	cmp	r3, #0
   13472:	dd5b      	ble.n	1352c <MQTTPublish+0x18c>
        goto exit;
    if ((rc = sendPacket(c, len, &timer)) != MQTTCLIENT_SUCCESS) // send the subscribe packet
   13474:	2328      	movs	r3, #40	; 0x28
   13476:	18fa      	adds	r2, r7, r3
   13478:	6b39      	ldr	r1, [r7, #48]	; 0x30
   1347a:	68fb      	ldr	r3, [r7, #12]
   1347c:	0018      	movs	r0, r3
   1347e:	4b35      	ldr	r3, [pc, #212]	; (13554 <MQTTPublish+0x1b4>)
   13480:	4798      	blx	r3
   13482:	0003      	movs	r3, r0
   13484:	637b      	str	r3, [r7, #52]	; 0x34
   13486:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   13488:	2b00      	cmp	r3, #0
   1348a:	d151      	bne.n	13530 <MQTTPublish+0x190>
        goto exit; // there was a problem
    
    if (message->qos == QOS1)
   1348c:	687b      	ldr	r3, [r7, #4]
   1348e:	781b      	ldrb	r3, [r3, #0]
   13490:	2b01      	cmp	r3, #1
   13492:	d122      	bne.n	134da <MQTTPublish+0x13a>
    {
        if (waitfor(c, PUBACK, &timer) == PUBACK)
   13494:	2328      	movs	r3, #40	; 0x28
   13496:	18fa      	adds	r2, r7, r3
   13498:	68fb      	ldr	r3, [r7, #12]
   1349a:	2104      	movs	r1, #4
   1349c:	0018      	movs	r0, r3
   1349e:	4b2e      	ldr	r3, [pc, #184]	; (13558 <MQTTPublish+0x1b8>)
   134a0:	4798      	blx	r3
   134a2:	0003      	movs	r3, r0
   134a4:	2b04      	cmp	r3, #4
   134a6:	d114      	bne.n	134d2 <MQTTPublish+0x132>
        {
            unsigned short mypacketid;
            unsigned char dup, type;
            if (MQTTDeserialize_ack(&type, &dup, &mypacketid, c->readbuf, c->readbuf_size) != 1)
   134a8:	68fb      	ldr	r3, [r7, #12]
   134aa:	695c      	ldr	r4, [r3, #20]
   134ac:	68fb      	ldr	r3, [r7, #12]
   134ae:	68db      	ldr	r3, [r3, #12]
   134b0:	221a      	movs	r2, #26
   134b2:	18ba      	adds	r2, r7, r2
   134b4:	2119      	movs	r1, #25
   134b6:	1879      	adds	r1, r7, r1
   134b8:	2018      	movs	r0, #24
   134ba:	1838      	adds	r0, r7, r0
   134bc:	9300      	str	r3, [sp, #0]
   134be:	0023      	movs	r3, r4
   134c0:	4c26      	ldr	r4, [pc, #152]	; (1355c <MQTTPublish+0x1bc>)
   134c2:	47a0      	blx	r4
   134c4:	0003      	movs	r3, r0
   134c6:	2b01      	cmp	r3, #1
   134c8:	d033      	beq.n	13532 <MQTTPublish+0x192>
                rc = MQTTCLIENT_FAILURE;
   134ca:	2301      	movs	r3, #1
   134cc:	425b      	negs	r3, r3
   134ce:	637b      	str	r3, [r7, #52]	; 0x34
   134d0:	e02f      	b.n	13532 <MQTTPublish+0x192>
        }
        else
            rc = MQTTCLIENT_FAILURE;
   134d2:	2301      	movs	r3, #1
   134d4:	425b      	negs	r3, r3
   134d6:	637b      	str	r3, [r7, #52]	; 0x34
   134d8:	e02b      	b.n	13532 <MQTTPublish+0x192>
    }
    else if (message->qos == QOS2)
   134da:	687b      	ldr	r3, [r7, #4]
   134dc:	781b      	ldrb	r3, [r3, #0]
   134de:	2b02      	cmp	r3, #2
   134e0:	d127      	bne.n	13532 <MQTTPublish+0x192>
    {
        if (waitfor(c, PUBCOMP, &timer) == PUBCOMP)
   134e2:	2328      	movs	r3, #40	; 0x28
   134e4:	18fa      	adds	r2, r7, r3
   134e6:	68fb      	ldr	r3, [r7, #12]
   134e8:	2107      	movs	r1, #7
   134ea:	0018      	movs	r0, r3
   134ec:	4b1a      	ldr	r3, [pc, #104]	; (13558 <MQTTPublish+0x1b8>)
   134ee:	4798      	blx	r3
   134f0:	0003      	movs	r3, r0
   134f2:	2b07      	cmp	r3, #7
   134f4:	d114      	bne.n	13520 <MQTTPublish+0x180>
        {
            unsigned short mypacketid;
            unsigned char dup, type;
            if (MQTTDeserialize_ack(&type, &dup, &mypacketid, c->readbuf, c->readbuf_size) != 1)
   134f6:	68fb      	ldr	r3, [r7, #12]
   134f8:	695c      	ldr	r4, [r3, #20]
   134fa:	68fb      	ldr	r3, [r7, #12]
   134fc:	68db      	ldr	r3, [r3, #12]
   134fe:	2216      	movs	r2, #22
   13500:	18ba      	adds	r2, r7, r2
   13502:	2115      	movs	r1, #21
   13504:	1879      	adds	r1, r7, r1
   13506:	2014      	movs	r0, #20
   13508:	1838      	adds	r0, r7, r0
   1350a:	9300      	str	r3, [sp, #0]
   1350c:	0023      	movs	r3, r4
   1350e:	4c13      	ldr	r4, [pc, #76]	; (1355c <MQTTPublish+0x1bc>)
   13510:	47a0      	blx	r4
   13512:	0003      	movs	r3, r0
   13514:	2b01      	cmp	r3, #1
   13516:	d00c      	beq.n	13532 <MQTTPublish+0x192>
                rc = MQTTCLIENT_FAILURE;
   13518:	2301      	movs	r3, #1
   1351a:	425b      	negs	r3, r3
   1351c:	637b      	str	r3, [r7, #52]	; 0x34
   1351e:	e008      	b.n	13532 <MQTTPublish+0x192>
        }
        else
            rc = MQTTCLIENT_FAILURE;
   13520:	2301      	movs	r3, #1
   13522:	425b      	negs	r3, r3
   13524:	637b      	str	r3, [r7, #52]	; 0x34
   13526:	e004      	b.n	13532 <MQTTPublish+0x192>
		goto exit;
   13528:	46c0      	nop			; (mov r8, r8)
   1352a:	e002      	b.n	13532 <MQTTPublish+0x192>
        goto exit;
   1352c:	46c0      	nop			; (mov r8, r8)
   1352e:	e000      	b.n	13532 <MQTTPublish+0x192>
        goto exit; // there was a problem
   13530:	46c0      	nop			; (mov r8, r8)
    
exit:
#if defined(MQTT_TASK)
	MutexUnlock(&c->mutex);
#endif
    return rc;
   13532:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
   13534:	0018      	movs	r0, r3
   13536:	46bd      	mov	sp, r7
   13538:	b00f      	add	sp, #60	; 0x3c
   1353a:	bc0c      	pop	{r2, r3}
   1353c:	4690      	mov	r8, r2
   1353e:	4699      	mov	r9, r3
   13540:	bdf0      	pop	{r4, r5, r6, r7, pc}
   13542:	46c0      	nop			; (mov r8, r8)
   13544:	0001465d 	.word	0x0001465d
   13548:	00014721 	.word	0x00014721
   1354c:	000128f1 	.word	0x000128f1
   13550:	000140ad 	.word	0x000140ad
   13554:	00012921 	.word	0x00012921
   13558:	00013089 	.word	0x00013089
   1355c:	00013b25 	.word	0x00013b25

00013560 <MQTTSerialize_connectLength>:
  * Determines the length of the MQTT connect packet that would be produced using the supplied connect options.
  * @param options the options to be used to build the connect packet
  * @return the length of buffer needed to contain the serialized version of the packet
  */
int MQTTSerialize_connectLength(MQTTPacket_connectData* options)
{
   13560:	b590      	push	{r4, r7, lr}
   13562:	b085      	sub	sp, #20
   13564:	af00      	add	r7, sp, #0
   13566:	6078      	str	r0, [r7, #4]
	int len = 0;
   13568:	2300      	movs	r3, #0
   1356a:	60fb      	str	r3, [r7, #12]

	FUNC_ENTRY;

	if (options->MQTTVersion == 3)
   1356c:	687b      	ldr	r3, [r7, #4]
   1356e:	7a1b      	ldrb	r3, [r3, #8]
   13570:	2b03      	cmp	r3, #3
   13572:	d102      	bne.n	1357a <MQTTSerialize_connectLength+0x1a>
		len = 12; /* variable depending on MQTT or MQIsdp */
   13574:	230c      	movs	r3, #12
   13576:	60fb      	str	r3, [r7, #12]
   13578:	e005      	b.n	13586 <MQTTSerialize_connectLength+0x26>
	else if (options->MQTTVersion == 4)
   1357a:	687b      	ldr	r3, [r7, #4]
   1357c:	7a1b      	ldrb	r3, [r3, #8]
   1357e:	2b04      	cmp	r3, #4
   13580:	d101      	bne.n	13586 <MQTTSerialize_connectLength+0x26>
		len = 10;
   13582:	230a      	movs	r3, #10
   13584:	60fb      	str	r3, [r7, #12]

	len += MQTTstrlen(options->clientID)+2;
   13586:	687b      	ldr	r3, [r7, #4]
   13588:	68d8      	ldr	r0, [r3, #12]
   1358a:	6919      	ldr	r1, [r3, #16]
   1358c:	695a      	ldr	r2, [r3, #20]
   1358e:	4b25      	ldr	r3, [pc, #148]	; (13624 <MQTTSerialize_connectLength+0xc4>)
   13590:	4798      	blx	r3
   13592:	0003      	movs	r3, r0
   13594:	3302      	adds	r3, #2
   13596:	68fa      	ldr	r2, [r7, #12]
   13598:	18d3      	adds	r3, r2, r3
   1359a:	60fb      	str	r3, [r7, #12]
	if (options->willFlag)
   1359c:	687b      	ldr	r3, [r7, #4]
   1359e:	7edb      	ldrb	r3, [r3, #27]
   135a0:	2b00      	cmp	r3, #0
   135a2:	d013      	beq.n	135cc <MQTTSerialize_connectLength+0x6c>
		len += MQTTstrlen(options->will.topicName)+2 + MQTTstrlen(options->will.message)+2;
   135a4:	687b      	ldr	r3, [r7, #4]
   135a6:	6a58      	ldr	r0, [r3, #36]	; 0x24
   135a8:	6a99      	ldr	r1, [r3, #40]	; 0x28
   135aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   135ac:	4b1d      	ldr	r3, [pc, #116]	; (13624 <MQTTSerialize_connectLength+0xc4>)
   135ae:	4798      	blx	r3
   135b0:	0003      	movs	r3, r0
   135b2:	1c9c      	adds	r4, r3, #2
   135b4:	687b      	ldr	r3, [r7, #4]
   135b6:	6b18      	ldr	r0, [r3, #48]	; 0x30
   135b8:	6b59      	ldr	r1, [r3, #52]	; 0x34
   135ba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   135bc:	4b19      	ldr	r3, [pc, #100]	; (13624 <MQTTSerialize_connectLength+0xc4>)
   135be:	4798      	blx	r3
   135c0:	0003      	movs	r3, r0
   135c2:	18e3      	adds	r3, r4, r3
   135c4:	3302      	adds	r3, #2
   135c6:	68fa      	ldr	r2, [r7, #12]
   135c8:	18d3      	adds	r3, r2, r3
   135ca:	60fb      	str	r3, [r7, #12]
	if (options->username.cstring || options->username.lenstring.data)
   135cc:	687b      	ldr	r3, [r7, #4]
   135ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   135d0:	2b00      	cmp	r3, #0
   135d2:	d103      	bne.n	135dc <MQTTSerialize_connectLength+0x7c>
   135d4:	687b      	ldr	r3, [r7, #4]
   135d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   135d8:	2b00      	cmp	r3, #0
   135da:	d00a      	beq.n	135f2 <MQTTSerialize_connectLength+0x92>
		len += MQTTstrlen(options->username)+2;
   135dc:	687b      	ldr	r3, [r7, #4]
   135de:	6c18      	ldr	r0, [r3, #64]	; 0x40
   135e0:	6c59      	ldr	r1, [r3, #68]	; 0x44
   135e2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
   135e4:	4b0f      	ldr	r3, [pc, #60]	; (13624 <MQTTSerialize_connectLength+0xc4>)
   135e6:	4798      	blx	r3
   135e8:	0003      	movs	r3, r0
   135ea:	3302      	adds	r3, #2
   135ec:	68fa      	ldr	r2, [r7, #12]
   135ee:	18d3      	adds	r3, r2, r3
   135f0:	60fb      	str	r3, [r7, #12]
	if (options->password.cstring || options->password.lenstring.data)
   135f2:	687b      	ldr	r3, [r7, #4]
   135f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   135f6:	2b00      	cmp	r3, #0
   135f8:	d103      	bne.n	13602 <MQTTSerialize_connectLength+0xa2>
   135fa:	687b      	ldr	r3, [r7, #4]
   135fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   135fe:	2b00      	cmp	r3, #0
   13600:	d00a      	beq.n	13618 <MQTTSerialize_connectLength+0xb8>
		len += MQTTstrlen(options->password)+2;
   13602:	687b      	ldr	r3, [r7, #4]
   13604:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
   13606:	6d19      	ldr	r1, [r3, #80]	; 0x50
   13608:	6d5a      	ldr	r2, [r3, #84]	; 0x54
   1360a:	4b06      	ldr	r3, [pc, #24]	; (13624 <MQTTSerialize_connectLength+0xc4>)
   1360c:	4798      	blx	r3
   1360e:	0003      	movs	r3, r0
   13610:	3302      	adds	r3, #2
   13612:	68fa      	ldr	r2, [r7, #12]
   13614:	18d3      	adds	r3, r2, r3
   13616:	60fb      	str	r3, [r7, #12]

	FUNC_EXIT_RC(len);
	return len;
   13618:	68fb      	ldr	r3, [r7, #12]
}
   1361a:	0018      	movs	r0, r3
   1361c:	46bd      	mov	sp, r7
   1361e:	b005      	add	sp, #20
   13620:	bd90      	pop	{r4, r7, pc}
   13622:	46c0      	nop			; (mov r8, r8)
   13624:	00013fad 	.word	0x00013fad

00013628 <MQTTSerialize_connect>:
  * @param len the length in bytes of the supplied buffer
  * @param options the options to be used to build the connect packet
  * @return serialized length, or error if 0
  */
int MQTTSerialize_connect(unsigned char* buf, int buflen, MQTTPacket_connectData* options)
{
   13628:	b590      	push	{r4, r7, lr}
   1362a:	b08b      	sub	sp, #44	; 0x2c
   1362c:	af00      	add	r7, sp, #0
   1362e:	60f8      	str	r0, [r7, #12]
   13630:	60b9      	str	r1, [r7, #8]
   13632:	607a      	str	r2, [r7, #4]
	unsigned char *ptr = buf;
   13634:	68fb      	ldr	r3, [r7, #12]
   13636:	61fb      	str	r3, [r7, #28]
	MQTTHeader header = {0};
   13638:	2300      	movs	r3, #0
   1363a:	61bb      	str	r3, [r7, #24]
	MQTTConnectFlags flags = {0};
   1363c:	2300      	movs	r3, #0
   1363e:	617b      	str	r3, [r7, #20]
	int len = 0;
   13640:	2300      	movs	r3, #0
   13642:	623b      	str	r3, [r7, #32]
	int rc = -1;
   13644:	2301      	movs	r3, #1
   13646:	425b      	negs	r3, r3
   13648:	627b      	str	r3, [r7, #36]	; 0x24

	FUNC_ENTRY;
	if (MQTTPacket_len(len = MQTTSerialize_connectLength(options)) > buflen)
   1364a:	687b      	ldr	r3, [r7, #4]
   1364c:	0018      	movs	r0, r3
   1364e:	4b8c      	ldr	r3, [pc, #560]	; (13880 <MQTTSerialize_connect+0x258>)
   13650:	4798      	blx	r3
   13652:	0003      	movs	r3, r0
   13654:	623b      	str	r3, [r7, #32]
   13656:	6a3b      	ldr	r3, [r7, #32]
   13658:	0018      	movs	r0, r3
   1365a:	4b8a      	ldr	r3, [pc, #552]	; (13884 <MQTTSerialize_connect+0x25c>)
   1365c:	4798      	blx	r3
   1365e:	0002      	movs	r2, r0
   13660:	68bb      	ldr	r3, [r7, #8]
   13662:	429a      	cmp	r2, r3
   13664:	dd03      	ble.n	1366e <MQTTSerialize_connect+0x46>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
   13666:	2302      	movs	r3, #2
   13668:	425b      	negs	r3, r3
   1366a:	627b      	str	r3, [r7, #36]	; 0x24
		goto exit;
   1366c:	e103      	b.n	13876 <MQTTSerialize_connect+0x24e>
	}

	header.byte = 0;
   1366e:	2318      	movs	r3, #24
   13670:	18fb      	adds	r3, r7, r3
   13672:	2200      	movs	r2, #0
   13674:	701a      	strb	r2, [r3, #0]
	header.bits.type = CONNECT;
   13676:	2318      	movs	r3, #24
   13678:	18fb      	adds	r3, r7, r3
   1367a:	781a      	ldrb	r2, [r3, #0]
   1367c:	210f      	movs	r1, #15
   1367e:	400a      	ands	r2, r1
   13680:	1c11      	adds	r1, r2, #0
   13682:	2210      	movs	r2, #16
   13684:	430a      	orrs	r2, r1
   13686:	701a      	strb	r2, [r3, #0]
	writeChar(&ptr, header.byte); /* write header */
   13688:	2318      	movs	r3, #24
   1368a:	18fb      	adds	r3, r7, r3
   1368c:	781a      	ldrb	r2, [r3, #0]
   1368e:	231c      	movs	r3, #28
   13690:	18fb      	adds	r3, r7, r3
   13692:	0011      	movs	r1, r2
   13694:	0018      	movs	r0, r3
   13696:	4b7c      	ldr	r3, [pc, #496]	; (13888 <MQTTSerialize_connect+0x260>)
   13698:	4798      	blx	r3

	ptr += MQTTPacket_encode(ptr, len); /* write remaining length */
   1369a:	69fb      	ldr	r3, [r7, #28]
   1369c:	6a3a      	ldr	r2, [r7, #32]
   1369e:	0011      	movs	r1, r2
   136a0:	0018      	movs	r0, r3
   136a2:	4b7a      	ldr	r3, [pc, #488]	; (1388c <MQTTSerialize_connect+0x264>)
   136a4:	4798      	blx	r3
   136a6:	0002      	movs	r2, r0
   136a8:	69fb      	ldr	r3, [r7, #28]
   136aa:	189b      	adds	r3, r3, r2
   136ac:	61fb      	str	r3, [r7, #28]

	if (options->MQTTVersion == 4)
   136ae:	687b      	ldr	r3, [r7, #4]
   136b0:	7a1b      	ldrb	r3, [r3, #8]
   136b2:	2b04      	cmp	r3, #4
   136b4:	d10d      	bne.n	136d2 <MQTTSerialize_connect+0xaa>
	{
		writeCString(&ptr, "MQTT");
   136b6:	4a76      	ldr	r2, [pc, #472]	; (13890 <MQTTSerialize_connect+0x268>)
   136b8:	231c      	movs	r3, #28
   136ba:	18fb      	adds	r3, r7, r3
   136bc:	0011      	movs	r1, r2
   136be:	0018      	movs	r0, r3
   136c0:	4b74      	ldr	r3, [pc, #464]	; (13894 <MQTTSerialize_connect+0x26c>)
   136c2:	4798      	blx	r3
		writeChar(&ptr, (char) 4);
   136c4:	231c      	movs	r3, #28
   136c6:	18fb      	adds	r3, r7, r3
   136c8:	2104      	movs	r1, #4
   136ca:	0018      	movs	r0, r3
   136cc:	4b6e      	ldr	r3, [pc, #440]	; (13888 <MQTTSerialize_connect+0x260>)
   136ce:	4798      	blx	r3
   136d0:	e00c      	b.n	136ec <MQTTSerialize_connect+0xc4>
	}
	else
	{
		writeCString(&ptr, "MQIsdp");
   136d2:	4a71      	ldr	r2, [pc, #452]	; (13898 <MQTTSerialize_connect+0x270>)
   136d4:	231c      	movs	r3, #28
   136d6:	18fb      	adds	r3, r7, r3
   136d8:	0011      	movs	r1, r2
   136da:	0018      	movs	r0, r3
   136dc:	4b6d      	ldr	r3, [pc, #436]	; (13894 <MQTTSerialize_connect+0x26c>)
   136de:	4798      	blx	r3
		writeChar(&ptr, (char) 3);
   136e0:	231c      	movs	r3, #28
   136e2:	18fb      	adds	r3, r7, r3
   136e4:	2103      	movs	r1, #3
   136e6:	0018      	movs	r0, r3
   136e8:	4b67      	ldr	r3, [pc, #412]	; (13888 <MQTTSerialize_connect+0x260>)
   136ea:	4798      	blx	r3
	}

	flags.all = 0;
   136ec:	2314      	movs	r3, #20
   136ee:	18fb      	adds	r3, r7, r3
   136f0:	2200      	movs	r2, #0
   136f2:	701a      	strb	r2, [r3, #0]
	flags.bits.cleansession = options->cleansession;
   136f4:	687b      	ldr	r3, [r7, #4]
   136f6:	7e9b      	ldrb	r3, [r3, #26]
   136f8:	1c1a      	adds	r2, r3, #0
   136fa:	2301      	movs	r3, #1
   136fc:	4013      	ands	r3, r2
   136fe:	b2da      	uxtb	r2, r3
   13700:	2314      	movs	r3, #20
   13702:	18fb      	adds	r3, r7, r3
   13704:	2101      	movs	r1, #1
   13706:	400a      	ands	r2, r1
   13708:	1890      	adds	r0, r2, r2
   1370a:	781a      	ldrb	r2, [r3, #0]
   1370c:	2102      	movs	r1, #2
   1370e:	438a      	bics	r2, r1
   13710:	1c11      	adds	r1, r2, #0
   13712:	1c02      	adds	r2, r0, #0
   13714:	430a      	orrs	r2, r1
   13716:	701a      	strb	r2, [r3, #0]
	flags.bits.will = (options->willFlag) ? 1 : 0;
   13718:	687b      	ldr	r3, [r7, #4]
   1371a:	7edb      	ldrb	r3, [r3, #27]
   1371c:	1e5a      	subs	r2, r3, #1
   1371e:	4193      	sbcs	r3, r2
   13720:	b2da      	uxtb	r2, r3
   13722:	2314      	movs	r3, #20
   13724:	18fb      	adds	r3, r7, r3
   13726:	2101      	movs	r1, #1
   13728:	400a      	ands	r2, r1
   1372a:	0090      	lsls	r0, r2, #2
   1372c:	781a      	ldrb	r2, [r3, #0]
   1372e:	2104      	movs	r1, #4
   13730:	438a      	bics	r2, r1
   13732:	1c11      	adds	r1, r2, #0
   13734:	1c02      	adds	r2, r0, #0
   13736:	430a      	orrs	r2, r1
   13738:	701a      	strb	r2, [r3, #0]
	if (flags.bits.will)
   1373a:	2314      	movs	r3, #20
   1373c:	18fb      	adds	r3, r7, r3
   1373e:	781b      	ldrb	r3, [r3, #0]
   13740:	2204      	movs	r2, #4
   13742:	4013      	ands	r3, r2
   13744:	b2db      	uxtb	r3, r3
   13746:	2b00      	cmp	r3, #0
   13748:	d025      	beq.n	13796 <MQTTSerialize_connect+0x16e>
	{
		flags.bits.willQoS = options->will.qos;
   1374a:	687b      	ldr	r3, [r7, #4]
   1374c:	223d      	movs	r2, #61	; 0x3d
   1374e:	5c9b      	ldrb	r3, [r3, r2]
   13750:	1c1a      	adds	r2, r3, #0
   13752:	2303      	movs	r3, #3
   13754:	4013      	ands	r3, r2
   13756:	b2da      	uxtb	r2, r3
   13758:	2314      	movs	r3, #20
   1375a:	18fb      	adds	r3, r7, r3
   1375c:	2103      	movs	r1, #3
   1375e:	400a      	ands	r2, r1
   13760:	00d0      	lsls	r0, r2, #3
   13762:	781a      	ldrb	r2, [r3, #0]
   13764:	2118      	movs	r1, #24
   13766:	438a      	bics	r2, r1
   13768:	1c11      	adds	r1, r2, #0
   1376a:	1c02      	adds	r2, r0, #0
   1376c:	430a      	orrs	r2, r1
   1376e:	701a      	strb	r2, [r3, #0]
		flags.bits.willRetain = options->will.retained;
   13770:	687b      	ldr	r3, [r7, #4]
   13772:	223c      	movs	r2, #60	; 0x3c
   13774:	5c9b      	ldrb	r3, [r3, r2]
   13776:	1c1a      	adds	r2, r3, #0
   13778:	2301      	movs	r3, #1
   1377a:	4013      	ands	r3, r2
   1377c:	b2da      	uxtb	r2, r3
   1377e:	2314      	movs	r3, #20
   13780:	18fb      	adds	r3, r7, r3
   13782:	2101      	movs	r1, #1
   13784:	400a      	ands	r2, r1
   13786:	0150      	lsls	r0, r2, #5
   13788:	781a      	ldrb	r2, [r3, #0]
   1378a:	2120      	movs	r1, #32
   1378c:	438a      	bics	r2, r1
   1378e:	1c11      	adds	r1, r2, #0
   13790:	1c02      	adds	r2, r0, #0
   13792:	430a      	orrs	r2, r1
   13794:	701a      	strb	r2, [r3, #0]
	}

	if (options->username.cstring || options->username.lenstring.data)
   13796:	687b      	ldr	r3, [r7, #4]
   13798:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1379a:	2b00      	cmp	r3, #0
   1379c:	d103      	bne.n	137a6 <MQTTSerialize_connect+0x17e>
   1379e:	687b      	ldr	r3, [r7, #4]
   137a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   137a2:	2b00      	cmp	r3, #0
   137a4:	d006      	beq.n	137b4 <MQTTSerialize_connect+0x18c>
		flags.bits.username = 1;
   137a6:	2314      	movs	r3, #20
   137a8:	18fb      	adds	r3, r7, r3
   137aa:	781a      	ldrb	r2, [r3, #0]
   137ac:	2180      	movs	r1, #128	; 0x80
   137ae:	4249      	negs	r1, r1
   137b0:	430a      	orrs	r2, r1
   137b2:	701a      	strb	r2, [r3, #0]
	if (options->password.cstring || options->password.lenstring.data)
   137b4:	687b      	ldr	r3, [r7, #4]
   137b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   137b8:	2b00      	cmp	r3, #0
   137ba:	d103      	bne.n	137c4 <MQTTSerialize_connect+0x19c>
   137bc:	687b      	ldr	r3, [r7, #4]
   137be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   137c0:	2b00      	cmp	r3, #0
   137c2:	d005      	beq.n	137d0 <MQTTSerialize_connect+0x1a8>
		flags.bits.password = 1;
   137c4:	2314      	movs	r3, #20
   137c6:	18fb      	adds	r3, r7, r3
   137c8:	781a      	ldrb	r2, [r3, #0]
   137ca:	2140      	movs	r1, #64	; 0x40
   137cc:	430a      	orrs	r2, r1
   137ce:	701a      	strb	r2, [r3, #0]

	writeChar(&ptr, flags.all);
   137d0:	2314      	movs	r3, #20
   137d2:	18fb      	adds	r3, r7, r3
   137d4:	781a      	ldrb	r2, [r3, #0]
   137d6:	231c      	movs	r3, #28
   137d8:	18fb      	adds	r3, r7, r3
   137da:	0011      	movs	r1, r2
   137dc:	0018      	movs	r0, r3
   137de:	4b2a      	ldr	r3, [pc, #168]	; (13888 <MQTTSerialize_connect+0x260>)
   137e0:	4798      	blx	r3
	writeInt(&ptr, options->keepAliveInterval);
   137e2:	687b      	ldr	r3, [r7, #4]
   137e4:	8b1b      	ldrh	r3, [r3, #24]
   137e6:	001a      	movs	r2, r3
   137e8:	231c      	movs	r3, #28
   137ea:	18fb      	adds	r3, r7, r3
   137ec:	0011      	movs	r1, r2
   137ee:	0018      	movs	r0, r3
   137f0:	4b2a      	ldr	r3, [pc, #168]	; (1389c <MQTTSerialize_connect+0x274>)
   137f2:	4798      	blx	r3
	writeMQTTString(&ptr, options->clientID);
   137f4:	687b      	ldr	r3, [r7, #4]
   137f6:	221c      	movs	r2, #28
   137f8:	18b8      	adds	r0, r7, r2
   137fa:	68d9      	ldr	r1, [r3, #12]
   137fc:	691a      	ldr	r2, [r3, #16]
   137fe:	695b      	ldr	r3, [r3, #20]
   13800:	4c27      	ldr	r4, [pc, #156]	; (138a0 <MQTTSerialize_connect+0x278>)
   13802:	47a0      	blx	r4
	if (options->willFlag)
   13804:	687b      	ldr	r3, [r7, #4]
   13806:	7edb      	ldrb	r3, [r3, #27]
   13808:	2b00      	cmp	r3, #0
   1380a:	d00f      	beq.n	1382c <MQTTSerialize_connect+0x204>
	{
		writeMQTTString(&ptr, options->will.topicName);
   1380c:	687b      	ldr	r3, [r7, #4]
   1380e:	221c      	movs	r2, #28
   13810:	18b8      	adds	r0, r7, r2
   13812:	6a59      	ldr	r1, [r3, #36]	; 0x24
   13814:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   13816:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   13818:	4c21      	ldr	r4, [pc, #132]	; (138a0 <MQTTSerialize_connect+0x278>)
   1381a:	47a0      	blx	r4
		writeMQTTString(&ptr, options->will.message);
   1381c:	687b      	ldr	r3, [r7, #4]
   1381e:	221c      	movs	r2, #28
   13820:	18b8      	adds	r0, r7, r2
   13822:	6b19      	ldr	r1, [r3, #48]	; 0x30
   13824:	6b5a      	ldr	r2, [r3, #52]	; 0x34
   13826:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   13828:	4c1d      	ldr	r4, [pc, #116]	; (138a0 <MQTTSerialize_connect+0x278>)
   1382a:	47a0      	blx	r4
	}
	if (flags.bits.username)
   1382c:	2314      	movs	r3, #20
   1382e:	18fb      	adds	r3, r7, r3
   13830:	781b      	ldrb	r3, [r3, #0]
   13832:	227f      	movs	r2, #127	; 0x7f
   13834:	4393      	bics	r3, r2
   13836:	b2db      	uxtb	r3, r3
   13838:	2b00      	cmp	r3, #0
   1383a:	d007      	beq.n	1384c <MQTTSerialize_connect+0x224>
		writeMQTTString(&ptr, options->username);
   1383c:	687b      	ldr	r3, [r7, #4]
   1383e:	221c      	movs	r2, #28
   13840:	18b8      	adds	r0, r7, r2
   13842:	6c19      	ldr	r1, [r3, #64]	; 0x40
   13844:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   13846:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   13848:	4c15      	ldr	r4, [pc, #84]	; (138a0 <MQTTSerialize_connect+0x278>)
   1384a:	47a0      	blx	r4
	if (flags.bits.password)
   1384c:	2314      	movs	r3, #20
   1384e:	18fb      	adds	r3, r7, r3
   13850:	781b      	ldrb	r3, [r3, #0]
   13852:	2240      	movs	r2, #64	; 0x40
   13854:	4013      	ands	r3, r2
   13856:	b2db      	uxtb	r3, r3
   13858:	2b00      	cmp	r3, #0
   1385a:	d007      	beq.n	1386c <MQTTSerialize_connect+0x244>
		writeMQTTString(&ptr, options->password);
   1385c:	687b      	ldr	r3, [r7, #4]
   1385e:	221c      	movs	r2, #28
   13860:	18b8      	adds	r0, r7, r2
   13862:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
   13864:	6d1a      	ldr	r2, [r3, #80]	; 0x50
   13866:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   13868:	4c0d      	ldr	r4, [pc, #52]	; (138a0 <MQTTSerialize_connect+0x278>)
   1386a:	47a0      	blx	r4

	rc = ptr - buf;
   1386c:	69fb      	ldr	r3, [r7, #28]
   1386e:	001a      	movs	r2, r3
   13870:	68fb      	ldr	r3, [r7, #12]
   13872:	1ad3      	subs	r3, r2, r3
   13874:	627b      	str	r3, [r7, #36]	; 0x24

	exit: FUNC_EXIT_RC(rc);
	return rc;
   13876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
   13878:	0018      	movs	r0, r3
   1387a:	46bd      	mov	sp, r7
   1387c:	b00b      	add	sp, #44	; 0x2c
   1387e:	bd90      	pop	{r4, r7, pc}
   13880:	00013561 	.word	0x00013561
   13884:	00013cd1 	.word	0x00013cd1
   13888:	00013df3 	.word	0x00013df3
   1388c:	00013bd9 	.word	0x00013bd9
   13890:	00020fd8 	.word	0x00020fd8
   13894:	00013e75 	.word	0x00013e75
   13898:	00020fe0 	.word	0x00020fe0
   1389c:	00013e1d 	.word	0x00013e1d
   138a0:	00013ec5 	.word	0x00013ec5

000138a4 <MQTTDeserialize_connack>:
  * @param buf the raw buffer data, of the correct length determined by the remaining length field
  * @param len the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success, 0 is failure
  */
int MQTTDeserialize_connack(unsigned char* sessionPresent, unsigned char* connack_rc, unsigned char* buf, int buflen)
{
   138a4:	b580      	push	{r7, lr}
   138a6:	b08a      	sub	sp, #40	; 0x28
   138a8:	af00      	add	r7, sp, #0
   138aa:	60f8      	str	r0, [r7, #12]
   138ac:	60b9      	str	r1, [r7, #8]
   138ae:	607a      	str	r2, [r7, #4]
   138b0:	603b      	str	r3, [r7, #0]
	MQTTHeader header = {0};
   138b2:	2300      	movs	r3, #0
   138b4:	61fb      	str	r3, [r7, #28]
	unsigned char* curdata = buf;
   138b6:	687b      	ldr	r3, [r7, #4]
   138b8:	61bb      	str	r3, [r7, #24]
	unsigned char* enddata = NULL;
   138ba:	2300      	movs	r3, #0
   138bc:	623b      	str	r3, [r7, #32]
	int rc = 0;
   138be:	2300      	movs	r3, #0
   138c0:	627b      	str	r3, [r7, #36]	; 0x24
	int mylen;
	MQTTConnackFlags flags = {0};
   138c2:	2300      	movs	r3, #0
   138c4:	613b      	str	r3, [r7, #16]

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
   138c6:	2318      	movs	r3, #24
   138c8:	18fb      	adds	r3, r7, r3
   138ca:	0018      	movs	r0, r3
   138cc:	4b25      	ldr	r3, [pc, #148]	; (13964 <MQTTDeserialize_connack+0xc0>)
   138ce:	4798      	blx	r3
   138d0:	0003      	movs	r3, r0
   138d2:	001a      	movs	r2, r3
   138d4:	231c      	movs	r3, #28
   138d6:	18fb      	adds	r3, r7, r3
   138d8:	701a      	strb	r2, [r3, #0]
	if (header.bits.type != CONNACK)
   138da:	231c      	movs	r3, #28
   138dc:	18fb      	adds	r3, r7, r3
   138de:	781b      	ldrb	r3, [r3, #0]
   138e0:	220f      	movs	r2, #15
   138e2:	4393      	bics	r3, r2
   138e4:	b2db      	uxtb	r3, r3
   138e6:	2b20      	cmp	r3, #32
   138e8:	d134      	bne.n	13954 <MQTTDeserialize_connack+0xb0>
		goto exit;

	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
   138ea:	69bb      	ldr	r3, [r7, #24]
   138ec:	2214      	movs	r2, #20
   138ee:	18ba      	adds	r2, r7, r2
   138f0:	0011      	movs	r1, r2
   138f2:	0018      	movs	r0, r3
   138f4:	4b1c      	ldr	r3, [pc, #112]	; (13968 <MQTTDeserialize_connack+0xc4>)
   138f6:	4798      	blx	r3
   138f8:	0003      	movs	r3, r0
   138fa:	627b      	str	r3, [r7, #36]	; 0x24
   138fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   138fe:	69bb      	ldr	r3, [r7, #24]
   13900:	189b      	adds	r3, r3, r2
   13902:	61bb      	str	r3, [r7, #24]
	enddata = curdata + mylen;
   13904:	69bb      	ldr	r3, [r7, #24]
   13906:	697a      	ldr	r2, [r7, #20]
   13908:	189b      	adds	r3, r3, r2
   1390a:	623b      	str	r3, [r7, #32]
	if (enddata - curdata < 2)
   1390c:	6a3b      	ldr	r3, [r7, #32]
   1390e:	69ba      	ldr	r2, [r7, #24]
   13910:	1a9b      	subs	r3, r3, r2
   13912:	2b01      	cmp	r3, #1
   13914:	dd20      	ble.n	13958 <MQTTDeserialize_connack+0xb4>
		goto exit;

	flags.all = readChar(&curdata);
   13916:	2318      	movs	r3, #24
   13918:	18fb      	adds	r3, r7, r3
   1391a:	0018      	movs	r0, r3
   1391c:	4b11      	ldr	r3, [pc, #68]	; (13964 <MQTTDeserialize_connack+0xc0>)
   1391e:	4798      	blx	r3
   13920:	0003      	movs	r3, r0
   13922:	001a      	movs	r2, r3
   13924:	2310      	movs	r3, #16
   13926:	18fb      	adds	r3, r7, r3
   13928:	701a      	strb	r2, [r3, #0]
	*sessionPresent = flags.bits.sessionpresent;
   1392a:	2310      	movs	r3, #16
   1392c:	18fb      	adds	r3, r7, r3
   1392e:	781b      	ldrb	r3, [r3, #0]
   13930:	061b      	lsls	r3, r3, #24
   13932:	0fdb      	lsrs	r3, r3, #31
   13934:	b2db      	uxtb	r3, r3
   13936:	001a      	movs	r2, r3
   13938:	68fb      	ldr	r3, [r7, #12]
   1393a:	701a      	strb	r2, [r3, #0]
	*connack_rc = readChar(&curdata);
   1393c:	2318      	movs	r3, #24
   1393e:	18fb      	adds	r3, r7, r3
   13940:	0018      	movs	r0, r3
   13942:	4b08      	ldr	r3, [pc, #32]	; (13964 <MQTTDeserialize_connack+0xc0>)
   13944:	4798      	blx	r3
   13946:	0003      	movs	r3, r0
   13948:	001a      	movs	r2, r3
   1394a:	68bb      	ldr	r3, [r7, #8]
   1394c:	701a      	strb	r2, [r3, #0]

	rc = 1;
   1394e:	2301      	movs	r3, #1
   13950:	627b      	str	r3, [r7, #36]	; 0x24
   13952:	e002      	b.n	1395a <MQTTDeserialize_connack+0xb6>
		goto exit;
   13954:	46c0      	nop			; (mov r8, r8)
   13956:	e000      	b.n	1395a <MQTTDeserialize_connack+0xb6>
		goto exit;
   13958:	46c0      	nop			; (mov r8, r8)
exit:
	FUNC_EXIT_RC(rc);
	return rc;
   1395a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
   1395c:	0018      	movs	r0, r3
   1395e:	46bd      	mov	sp, r7
   13960:	b00a      	add	sp, #40	; 0x28
   13962:	bd80      	pop	{r7, pc}
   13964:	00013dc7 	.word	0x00013dc7
   13968:	00013d61 	.word	0x00013d61

0001396c <MQTTSerialize_zero>:
  * @param buflen the length in bytes of the supplied buffer, to avoid overruns
  * @param packettype the message type
  * @return serialized length, or error if 0
  */
int MQTTSerialize_zero(unsigned char* buf, int buflen, unsigned char packettype)
{
   1396c:	b580      	push	{r7, lr}
   1396e:	b088      	sub	sp, #32
   13970:	af00      	add	r7, sp, #0
   13972:	60f8      	str	r0, [r7, #12]
   13974:	60b9      	str	r1, [r7, #8]
   13976:	1dfb      	adds	r3, r7, #7
   13978:	701a      	strb	r2, [r3, #0]
	MQTTHeader header = {0};
   1397a:	2300      	movs	r3, #0
   1397c:	61bb      	str	r3, [r7, #24]
	int rc = -1;
   1397e:	2301      	movs	r3, #1
   13980:	425b      	negs	r3, r3
   13982:	61fb      	str	r3, [r7, #28]
	unsigned char *ptr = buf;
   13984:	68fb      	ldr	r3, [r7, #12]
   13986:	617b      	str	r3, [r7, #20]

	FUNC_ENTRY;
	if (buflen < 2)
   13988:	68bb      	ldr	r3, [r7, #8]
   1398a:	2b01      	cmp	r3, #1
   1398c:	dc03      	bgt.n	13996 <MQTTSerialize_zero+0x2a>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
   1398e:	2302      	movs	r3, #2
   13990:	425b      	negs	r3, r3
   13992:	61fb      	str	r3, [r7, #28]
		goto exit;
   13994:	e029      	b.n	139ea <MQTTSerialize_zero+0x7e>
	}
	header.byte = 0;
   13996:	2318      	movs	r3, #24
   13998:	18fb      	adds	r3, r7, r3
   1399a:	2200      	movs	r2, #0
   1399c:	701a      	strb	r2, [r3, #0]
	header.bits.type = packettype;
   1399e:	1dfb      	adds	r3, r7, #7
   139a0:	781b      	ldrb	r3, [r3, #0]
   139a2:	220f      	movs	r2, #15
   139a4:	4013      	ands	r3, r2
   139a6:	b2da      	uxtb	r2, r3
   139a8:	2318      	movs	r3, #24
   139aa:	18fb      	adds	r3, r7, r3
   139ac:	0110      	lsls	r0, r2, #4
   139ae:	781a      	ldrb	r2, [r3, #0]
   139b0:	210f      	movs	r1, #15
   139b2:	400a      	ands	r2, r1
   139b4:	1c11      	adds	r1, r2, #0
   139b6:	1c02      	adds	r2, r0, #0
   139b8:	430a      	orrs	r2, r1
   139ba:	701a      	strb	r2, [r3, #0]
	writeChar(&ptr, header.byte); /* write header */
   139bc:	2318      	movs	r3, #24
   139be:	18fb      	adds	r3, r7, r3
   139c0:	781a      	ldrb	r2, [r3, #0]
   139c2:	2314      	movs	r3, #20
   139c4:	18fb      	adds	r3, r7, r3
   139c6:	0011      	movs	r1, r2
   139c8:	0018      	movs	r0, r3
   139ca:	4b0a      	ldr	r3, [pc, #40]	; (139f4 <MQTTSerialize_zero+0x88>)
   139cc:	4798      	blx	r3

	ptr += MQTTPacket_encode(ptr, 0); /* write remaining length */
   139ce:	697b      	ldr	r3, [r7, #20]
   139d0:	2100      	movs	r1, #0
   139d2:	0018      	movs	r0, r3
   139d4:	4b08      	ldr	r3, [pc, #32]	; (139f8 <MQTTSerialize_zero+0x8c>)
   139d6:	4798      	blx	r3
   139d8:	0002      	movs	r2, r0
   139da:	697b      	ldr	r3, [r7, #20]
   139dc:	189b      	adds	r3, r3, r2
   139de:	617b      	str	r3, [r7, #20]
	rc = ptr - buf;
   139e0:	697b      	ldr	r3, [r7, #20]
   139e2:	001a      	movs	r2, r3
   139e4:	68fb      	ldr	r3, [r7, #12]
   139e6:	1ad3      	subs	r3, r2, r3
   139e8:	61fb      	str	r3, [r7, #28]
exit:
	FUNC_EXIT_RC(rc);
	return rc;
   139ea:	69fb      	ldr	r3, [r7, #28]
}
   139ec:	0018      	movs	r0, r3
   139ee:	46bd      	mov	sp, r7
   139f0:	b008      	add	sp, #32
   139f2:	bd80      	pop	{r7, pc}
   139f4:	00013df3 	.word	0x00013df3
   139f8:	00013bd9 	.word	0x00013bd9

000139fc <MQTTSerialize_pingreq>:
  * @param buf the buffer into which the packet will be serialized
  * @param buflen the length in bytes of the supplied buffer, to avoid overruns
  * @return serialized length, or error if 0
  */
int MQTTSerialize_pingreq(unsigned char* buf, int buflen)
{
   139fc:	b580      	push	{r7, lr}
   139fe:	b082      	sub	sp, #8
   13a00:	af00      	add	r7, sp, #0
   13a02:	6078      	str	r0, [r7, #4]
   13a04:	6039      	str	r1, [r7, #0]
	return MQTTSerialize_zero(buf, buflen, PINGREQ);
   13a06:	6839      	ldr	r1, [r7, #0]
   13a08:	687b      	ldr	r3, [r7, #4]
   13a0a:	220c      	movs	r2, #12
   13a0c:	0018      	movs	r0, r3
   13a0e:	4b03      	ldr	r3, [pc, #12]	; (13a1c <MQTTSerialize_pingreq+0x20>)
   13a10:	4798      	blx	r3
   13a12:	0003      	movs	r3, r0
}
   13a14:	0018      	movs	r0, r3
   13a16:	46bd      	mov	sp, r7
   13a18:	b002      	add	sp, #8
   13a1a:	bd80      	pop	{r7, pc}
   13a1c:	0001396d 	.word	0x0001396d

00013a20 <MQTTDeserialize_publish>:
  * @param buflen the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success
  */
int MQTTDeserialize_publish(unsigned char* dup, int* qos, unsigned char* retained, unsigned short* packetid, MQTTString* topicName,
		unsigned char** payload, int* payloadlen, unsigned char* buf, int buflen)
{
   13a20:	b580      	push	{r7, lr}
   13a22:	b08a      	sub	sp, #40	; 0x28
   13a24:	af00      	add	r7, sp, #0
   13a26:	60f8      	str	r0, [r7, #12]
   13a28:	60b9      	str	r1, [r7, #8]
   13a2a:	607a      	str	r2, [r7, #4]
   13a2c:	603b      	str	r3, [r7, #0]
	MQTTHeader header = {0};
   13a2e:	2300      	movs	r3, #0
   13a30:	61fb      	str	r3, [r7, #28]
	unsigned char* curdata = buf;
   13a32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   13a34:	61bb      	str	r3, [r7, #24]
	unsigned char* enddata = NULL;
   13a36:	2300      	movs	r3, #0
   13a38:	623b      	str	r3, [r7, #32]
	int rc = 0;
   13a3a:	2300      	movs	r3, #0
   13a3c:	627b      	str	r3, [r7, #36]	; 0x24
	int mylen = 0;
   13a3e:	2300      	movs	r3, #0
   13a40:	617b      	str	r3, [r7, #20]

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
   13a42:	2318      	movs	r3, #24
   13a44:	18fb      	adds	r3, r7, r3
   13a46:	0018      	movs	r0, r3
   13a48:	4b32      	ldr	r3, [pc, #200]	; (13b14 <MQTTDeserialize_publish+0xf4>)
   13a4a:	4798      	blx	r3
   13a4c:	0003      	movs	r3, r0
   13a4e:	001a      	movs	r2, r3
   13a50:	231c      	movs	r3, #28
   13a52:	18fb      	adds	r3, r7, r3
   13a54:	701a      	strb	r2, [r3, #0]
	if (header.bits.type != PUBLISH)
   13a56:	231c      	movs	r3, #28
   13a58:	18fb      	adds	r3, r7, r3
   13a5a:	781b      	ldrb	r3, [r3, #0]
   13a5c:	220f      	movs	r2, #15
   13a5e:	4393      	bics	r3, r2
   13a60:	b2db      	uxtb	r3, r3
   13a62:	2b30      	cmp	r3, #48	; 0x30
   13a64:	d150      	bne.n	13b08 <MQTTDeserialize_publish+0xe8>
		goto exit;
	*dup = header.bits.dup;
   13a66:	231c      	movs	r3, #28
   13a68:	18fb      	adds	r3, r7, r3
   13a6a:	781b      	ldrb	r3, [r3, #0]
   13a6c:	071b      	lsls	r3, r3, #28
   13a6e:	0fdb      	lsrs	r3, r3, #31
   13a70:	b2db      	uxtb	r3, r3
   13a72:	001a      	movs	r2, r3
   13a74:	68fb      	ldr	r3, [r7, #12]
   13a76:	701a      	strb	r2, [r3, #0]
	*qos = header.bits.qos;
   13a78:	231c      	movs	r3, #28
   13a7a:	18fb      	adds	r3, r7, r3
   13a7c:	781b      	ldrb	r3, [r3, #0]
   13a7e:	075b      	lsls	r3, r3, #29
   13a80:	0f9b      	lsrs	r3, r3, #30
   13a82:	b2db      	uxtb	r3, r3
   13a84:	001a      	movs	r2, r3
   13a86:	68bb      	ldr	r3, [r7, #8]
   13a88:	601a      	str	r2, [r3, #0]
	*retained = header.bits.retain;
   13a8a:	231c      	movs	r3, #28
   13a8c:	18fb      	adds	r3, r7, r3
   13a8e:	781b      	ldrb	r3, [r3, #0]
   13a90:	07db      	lsls	r3, r3, #31
   13a92:	0fdb      	lsrs	r3, r3, #31
   13a94:	b2db      	uxtb	r3, r3
   13a96:	001a      	movs	r2, r3
   13a98:	687b      	ldr	r3, [r7, #4]
   13a9a:	701a      	strb	r2, [r3, #0]

	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
   13a9c:	69bb      	ldr	r3, [r7, #24]
   13a9e:	2214      	movs	r2, #20
   13aa0:	18ba      	adds	r2, r7, r2
   13aa2:	0011      	movs	r1, r2
   13aa4:	0018      	movs	r0, r3
   13aa6:	4b1c      	ldr	r3, [pc, #112]	; (13b18 <MQTTDeserialize_publish+0xf8>)
   13aa8:	4798      	blx	r3
   13aaa:	0003      	movs	r3, r0
   13aac:	627b      	str	r3, [r7, #36]	; 0x24
   13aae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   13ab0:	69bb      	ldr	r3, [r7, #24]
   13ab2:	189b      	adds	r3, r3, r2
   13ab4:	61bb      	str	r3, [r7, #24]
	enddata = curdata + mylen;
   13ab6:	69bb      	ldr	r3, [r7, #24]
   13ab8:	697a      	ldr	r2, [r7, #20]
   13aba:	189b      	adds	r3, r3, r2
   13abc:	623b      	str	r3, [r7, #32]

	if (!readMQTTLenString(topicName, &curdata, enddata) ||
   13abe:	6a3a      	ldr	r2, [r7, #32]
   13ac0:	2318      	movs	r3, #24
   13ac2:	18f9      	adds	r1, r7, r3
   13ac4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   13ac6:	0018      	movs	r0, r3
   13ac8:	4b14      	ldr	r3, [pc, #80]	; (13b1c <MQTTDeserialize_publish+0xfc>)
   13aca:	4798      	blx	r3
   13acc:	1e03      	subs	r3, r0, #0
   13ace:	d01c      	beq.n	13b0a <MQTTDeserialize_publish+0xea>
		enddata - curdata < 0) /* do we have enough data to read the protocol version byte? */
   13ad0:	6a3b      	ldr	r3, [r7, #32]
   13ad2:	69ba      	ldr	r2, [r7, #24]
   13ad4:	1a9b      	subs	r3, r3, r2
	if (!readMQTTLenString(topicName, &curdata, enddata) ||
   13ad6:	d418      	bmi.n	13b0a <MQTTDeserialize_publish+0xea>
		goto exit;

	if (*qos > 0)
   13ad8:	68bb      	ldr	r3, [r7, #8]
   13ada:	681b      	ldr	r3, [r3, #0]
   13adc:	2b00      	cmp	r3, #0
   13ade:	dd08      	ble.n	13af2 <MQTTDeserialize_publish+0xd2>
		*packetid = readInt(&curdata);
   13ae0:	2318      	movs	r3, #24
   13ae2:	18fb      	adds	r3, r7, r3
   13ae4:	0018      	movs	r0, r3
   13ae6:	4b0e      	ldr	r3, [pc, #56]	; (13b20 <MQTTDeserialize_publish+0x100>)
   13ae8:	4798      	blx	r3
   13aea:	0003      	movs	r3, r0
   13aec:	b29a      	uxth	r2, r3
   13aee:	683b      	ldr	r3, [r7, #0]
   13af0:	801a      	strh	r2, [r3, #0]

	*payloadlen = enddata - curdata;
   13af2:	6a3b      	ldr	r3, [r7, #32]
   13af4:	69ba      	ldr	r2, [r7, #24]
   13af6:	1a9a      	subs	r2, r3, r2
   13af8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   13afa:	601a      	str	r2, [r3, #0]
	*payload = curdata;
   13afc:	69ba      	ldr	r2, [r7, #24]
   13afe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   13b00:	601a      	str	r2, [r3, #0]
	rc = 1;
   13b02:	2301      	movs	r3, #1
   13b04:	627b      	str	r3, [r7, #36]	; 0x24
   13b06:	e000      	b.n	13b0a <MQTTDeserialize_publish+0xea>
		goto exit;
   13b08:	46c0      	nop			; (mov r8, r8)
exit:
	FUNC_EXIT_RC(rc);
	return rc;
   13b0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
   13b0c:	0018      	movs	r0, r3
   13b0e:	46bd      	mov	sp, r7
   13b10:	b00a      	add	sp, #40	; 0x28
   13b12:	bd80      	pop	{r7, pc}
   13b14:	00013dc7 	.word	0x00013dc7
   13b18:	00013d61 	.word	0x00013d61
   13b1c:	00013f45 	.word	0x00013f45
   13b20:	00013d95 	.word	0x00013d95

00013b24 <MQTTDeserialize_ack>:
  * @param buf the raw buffer data, of the correct length determined by the remaining length field
  * @param buflen the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success, 0 is failure
  */
int MQTTDeserialize_ack(unsigned char* packettype, unsigned char* dup, unsigned short* packetid, unsigned char* buf, int buflen)
{
   13b24:	b580      	push	{r7, lr}
   13b26:	b08a      	sub	sp, #40	; 0x28
   13b28:	af00      	add	r7, sp, #0
   13b2a:	60f8      	str	r0, [r7, #12]
   13b2c:	60b9      	str	r1, [r7, #8]
   13b2e:	607a      	str	r2, [r7, #4]
   13b30:	603b      	str	r3, [r7, #0]
	MQTTHeader header = {0};
   13b32:	2300      	movs	r3, #0
   13b34:	61fb      	str	r3, [r7, #28]
	unsigned char* curdata = buf;
   13b36:	683b      	ldr	r3, [r7, #0]
   13b38:	61bb      	str	r3, [r7, #24]
	unsigned char* enddata = NULL;
   13b3a:	2300      	movs	r3, #0
   13b3c:	623b      	str	r3, [r7, #32]
	int rc = 0;
   13b3e:	2300      	movs	r3, #0
   13b40:	627b      	str	r3, [r7, #36]	; 0x24
	int mylen;

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
   13b42:	2318      	movs	r3, #24
   13b44:	18fb      	adds	r3, r7, r3
   13b46:	0018      	movs	r0, r3
   13b48:	4b20      	ldr	r3, [pc, #128]	; (13bcc <MQTTDeserialize_ack+0xa8>)
   13b4a:	4798      	blx	r3
   13b4c:	0003      	movs	r3, r0
   13b4e:	001a      	movs	r2, r3
   13b50:	231c      	movs	r3, #28
   13b52:	18fb      	adds	r3, r7, r3
   13b54:	701a      	strb	r2, [r3, #0]
	*dup = header.bits.dup;
   13b56:	231c      	movs	r3, #28
   13b58:	18fb      	adds	r3, r7, r3
   13b5a:	781b      	ldrb	r3, [r3, #0]
   13b5c:	071b      	lsls	r3, r3, #28
   13b5e:	0fdb      	lsrs	r3, r3, #31
   13b60:	b2db      	uxtb	r3, r3
   13b62:	001a      	movs	r2, r3
   13b64:	68bb      	ldr	r3, [r7, #8]
   13b66:	701a      	strb	r2, [r3, #0]
	*packettype = header.bits.type;
   13b68:	231c      	movs	r3, #28
   13b6a:	18fb      	adds	r3, r7, r3
   13b6c:	781b      	ldrb	r3, [r3, #0]
   13b6e:	061b      	lsls	r3, r3, #24
   13b70:	0f1b      	lsrs	r3, r3, #28
   13b72:	b2db      	uxtb	r3, r3
   13b74:	001a      	movs	r2, r3
   13b76:	68fb      	ldr	r3, [r7, #12]
   13b78:	701a      	strb	r2, [r3, #0]

	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
   13b7a:	69bb      	ldr	r3, [r7, #24]
   13b7c:	2214      	movs	r2, #20
   13b7e:	18ba      	adds	r2, r7, r2
   13b80:	0011      	movs	r1, r2
   13b82:	0018      	movs	r0, r3
   13b84:	4b12      	ldr	r3, [pc, #72]	; (13bd0 <MQTTDeserialize_ack+0xac>)
   13b86:	4798      	blx	r3
   13b88:	0003      	movs	r3, r0
   13b8a:	627b      	str	r3, [r7, #36]	; 0x24
   13b8c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   13b8e:	69bb      	ldr	r3, [r7, #24]
   13b90:	189b      	adds	r3, r3, r2
   13b92:	61bb      	str	r3, [r7, #24]
	enddata = curdata + mylen;
   13b94:	69bb      	ldr	r3, [r7, #24]
   13b96:	697a      	ldr	r2, [r7, #20]
   13b98:	189b      	adds	r3, r3, r2
   13b9a:	623b      	str	r3, [r7, #32]

	if (enddata - curdata < 2)
   13b9c:	6a3b      	ldr	r3, [r7, #32]
   13b9e:	69ba      	ldr	r2, [r7, #24]
   13ba0:	1a9b      	subs	r3, r3, r2
   13ba2:	2b01      	cmp	r3, #1
   13ba4:	dd0b      	ble.n	13bbe <MQTTDeserialize_ack+0x9a>
		goto exit;
	*packetid = readInt(&curdata);
   13ba6:	2318      	movs	r3, #24
   13ba8:	18fb      	adds	r3, r7, r3
   13baa:	0018      	movs	r0, r3
   13bac:	4b09      	ldr	r3, [pc, #36]	; (13bd4 <MQTTDeserialize_ack+0xb0>)
   13bae:	4798      	blx	r3
   13bb0:	0003      	movs	r3, r0
   13bb2:	b29a      	uxth	r2, r3
   13bb4:	687b      	ldr	r3, [r7, #4]
   13bb6:	801a      	strh	r2, [r3, #0]

	rc = 1;
   13bb8:	2301      	movs	r3, #1
   13bba:	627b      	str	r3, [r7, #36]	; 0x24
   13bbc:	e000      	b.n	13bc0 <MQTTDeserialize_ack+0x9c>
		goto exit;
   13bbe:	46c0      	nop			; (mov r8, r8)
exit:
	FUNC_EXIT_RC(rc);
	return rc;
   13bc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
   13bc2:	0018      	movs	r0, r3
   13bc4:	46bd      	mov	sp, r7
   13bc6:	b00a      	add	sp, #40	; 0x28
   13bc8:	bd80      	pop	{r7, pc}
   13bca:	46c0      	nop			; (mov r8, r8)
   13bcc:	00013dc7 	.word	0x00013dc7
   13bd0:	00013d61 	.word	0x00013d61
   13bd4:	00013d95 	.word	0x00013d95

00013bd8 <MQTTPacket_encode>:
 * @param buf the buffer into which the encoded data is written
 * @param length the length to be encoded
 * @return the number of bytes written to buffer
 */
int MQTTPacket_encode(unsigned char* buf, int length)
{
   13bd8:	b580      	push	{r7, lr}
   13bda:	b084      	sub	sp, #16
   13bdc:	af00      	add	r7, sp, #0
   13bde:	6078      	str	r0, [r7, #4]
   13be0:	6039      	str	r1, [r7, #0]
	int rc = 0;
   13be2:	2300      	movs	r3, #0
   13be4:	60fb      	str	r3, [r7, #12]

	FUNC_ENTRY;
	do
	{
		char d = length % 128;
   13be6:	683b      	ldr	r3, [r7, #0]
   13be8:	4a17      	ldr	r2, [pc, #92]	; (13c48 <MQTTPacket_encode+0x70>)
   13bea:	4013      	ands	r3, r2
   13bec:	d504      	bpl.n	13bf8 <MQTTPacket_encode+0x20>
   13bee:	3b01      	subs	r3, #1
   13bf0:	2280      	movs	r2, #128	; 0x80
   13bf2:	4252      	negs	r2, r2
   13bf4:	4313      	orrs	r3, r2
   13bf6:	3301      	adds	r3, #1
   13bf8:	001a      	movs	r2, r3
   13bfa:	230b      	movs	r3, #11
   13bfc:	18fb      	adds	r3, r7, r3
   13bfe:	701a      	strb	r2, [r3, #0]
		length /= 128;
   13c00:	683b      	ldr	r3, [r7, #0]
   13c02:	2b00      	cmp	r3, #0
   13c04:	da00      	bge.n	13c08 <MQTTPacket_encode+0x30>
   13c06:	337f      	adds	r3, #127	; 0x7f
   13c08:	11db      	asrs	r3, r3, #7
   13c0a:	603b      	str	r3, [r7, #0]
		/* if there are more digits to encode, set the top bit of this digit */
		if (length > 0)
   13c0c:	683b      	ldr	r3, [r7, #0]
   13c0e:	2b00      	cmp	r3, #0
   13c10:	dd08      	ble.n	13c24 <MQTTPacket_encode+0x4c>
			d |= 0x80;
   13c12:	230b      	movs	r3, #11
   13c14:	18fb      	adds	r3, r7, r3
   13c16:	220b      	movs	r2, #11
   13c18:	18ba      	adds	r2, r7, r2
   13c1a:	7812      	ldrb	r2, [r2, #0]
   13c1c:	2180      	movs	r1, #128	; 0x80
   13c1e:	4249      	negs	r1, r1
   13c20:	430a      	orrs	r2, r1
   13c22:	701a      	strb	r2, [r3, #0]
		buf[rc++] = d;
   13c24:	68fb      	ldr	r3, [r7, #12]
   13c26:	1c5a      	adds	r2, r3, #1
   13c28:	60fa      	str	r2, [r7, #12]
   13c2a:	001a      	movs	r2, r3
   13c2c:	687b      	ldr	r3, [r7, #4]
   13c2e:	189b      	adds	r3, r3, r2
   13c30:	220b      	movs	r2, #11
   13c32:	18ba      	adds	r2, r7, r2
   13c34:	7812      	ldrb	r2, [r2, #0]
   13c36:	701a      	strb	r2, [r3, #0]
	} while (length > 0);
   13c38:	683b      	ldr	r3, [r7, #0]
   13c3a:	2b00      	cmp	r3, #0
   13c3c:	dcd3      	bgt.n	13be6 <MQTTPacket_encode+0xe>
	FUNC_EXIT_RC(rc);
	return rc;
   13c3e:	68fb      	ldr	r3, [r7, #12]
}
   13c40:	0018      	movs	r0, r3
   13c42:	46bd      	mov	sp, r7
   13c44:	b004      	add	sp, #16
   13c46:	bd80      	pop	{r7, pc}
   13c48:	8000007f 	.word	0x8000007f

00013c4c <MQTTPacket_decode>:
 * @param getcharfn pointer to function to read the next character from the data source
 * @param value the decoded length returned
 * @return the number of bytes read from the socket
 */
int MQTTPacket_decode(int (*getcharfn)(unsigned char*, int), int* value)
{
   13c4c:	b580      	push	{r7, lr}
   13c4e:	b086      	sub	sp, #24
   13c50:	af00      	add	r7, sp, #0
   13c52:	6078      	str	r0, [r7, #4]
   13c54:	6039      	str	r1, [r7, #0]
	unsigned char c;
	int multiplier = 1;
   13c56:	2301      	movs	r3, #1
   13c58:	617b      	str	r3, [r7, #20]
	int len = 0;
   13c5a:	2300      	movs	r3, #0
   13c5c:	613b      	str	r3, [r7, #16]
#define MAX_NO_OF_REMAINING_LENGTH_BYTES 4

	FUNC_ENTRY;
	*value = 0;
   13c5e:	683b      	ldr	r3, [r7, #0]
   13c60:	2200      	movs	r2, #0
   13c62:	601a      	str	r2, [r3, #0]
	do
	{
		int rc = MQTTPACKET_READ_ERROR;
   13c64:	2301      	movs	r3, #1
   13c66:	425b      	negs	r3, r3
   13c68:	60fb      	str	r3, [r7, #12]

		if (++len > MAX_NO_OF_REMAINING_LENGTH_BYTES)
   13c6a:	693b      	ldr	r3, [r7, #16]
   13c6c:	3301      	adds	r3, #1
   13c6e:	613b      	str	r3, [r7, #16]
   13c70:	693b      	ldr	r3, [r7, #16]
   13c72:	2b04      	cmp	r3, #4
   13c74:	dd03      	ble.n	13c7e <MQTTPacket_decode+0x32>
		{
			rc = MQTTPACKET_READ_ERROR;	/* bad data */
   13c76:	2301      	movs	r3, #1
   13c78:	425b      	negs	r3, r3
   13c7a:	60fb      	str	r3, [r7, #12]
			goto exit;
   13c7c:	e022      	b.n	13cc4 <MQTTPacket_decode+0x78>
		}
		rc = (*getcharfn)(&c, 1);
   13c7e:	230b      	movs	r3, #11
   13c80:	18fa      	adds	r2, r7, r3
   13c82:	687b      	ldr	r3, [r7, #4]
   13c84:	2101      	movs	r1, #1
   13c86:	0010      	movs	r0, r2
   13c88:	4798      	blx	r3
   13c8a:	0003      	movs	r3, r0
   13c8c:	60fb      	str	r3, [r7, #12]
		if (rc != 1)
   13c8e:	68fb      	ldr	r3, [r7, #12]
   13c90:	2b01      	cmp	r3, #1
   13c92:	d116      	bne.n	13cc2 <MQTTPacket_decode+0x76>
			goto exit;
		*value += (c & 127) * multiplier;
   13c94:	683b      	ldr	r3, [r7, #0]
   13c96:	681a      	ldr	r2, [r3, #0]
   13c98:	230b      	movs	r3, #11
   13c9a:	18fb      	adds	r3, r7, r3
   13c9c:	781b      	ldrb	r3, [r3, #0]
   13c9e:	0019      	movs	r1, r3
   13ca0:	237f      	movs	r3, #127	; 0x7f
   13ca2:	400b      	ands	r3, r1
   13ca4:	6979      	ldr	r1, [r7, #20]
   13ca6:	434b      	muls	r3, r1
   13ca8:	18d2      	adds	r2, r2, r3
   13caa:	683b      	ldr	r3, [r7, #0]
   13cac:	601a      	str	r2, [r3, #0]
		multiplier *= 128;
   13cae:	697b      	ldr	r3, [r7, #20]
   13cb0:	01db      	lsls	r3, r3, #7
   13cb2:	617b      	str	r3, [r7, #20]
	} while ((c & 128) != 0);
   13cb4:	230b      	movs	r3, #11
   13cb6:	18fb      	adds	r3, r7, r3
   13cb8:	781b      	ldrb	r3, [r3, #0]
   13cba:	b25b      	sxtb	r3, r3
   13cbc:	2b00      	cmp	r3, #0
   13cbe:	dbd1      	blt.n	13c64 <MQTTPacket_decode+0x18>
   13cc0:	e000      	b.n	13cc4 <MQTTPacket_decode+0x78>
			goto exit;
   13cc2:	46c0      	nop			; (mov r8, r8)
exit:
	FUNC_EXIT_RC(len);
	return len;
   13cc4:	693b      	ldr	r3, [r7, #16]
}
   13cc6:	0018      	movs	r0, r3
   13cc8:	46bd      	mov	sp, r7
   13cca:	b006      	add	sp, #24
   13ccc:	bd80      	pop	{r7, pc}
	...

00013cd0 <MQTTPacket_len>:


int MQTTPacket_len(int rem_len)
{
   13cd0:	b580      	push	{r7, lr}
   13cd2:	b082      	sub	sp, #8
   13cd4:	af00      	add	r7, sp, #0
   13cd6:	6078      	str	r0, [r7, #4]
	rem_len += 1; /* header byte */
   13cd8:	687b      	ldr	r3, [r7, #4]
   13cda:	3301      	adds	r3, #1
   13cdc:	607b      	str	r3, [r7, #4]

	/* now remaining_length field */
	if (rem_len < 128)
   13cde:	687b      	ldr	r3, [r7, #4]
   13ce0:	2b7f      	cmp	r3, #127	; 0x7f
   13ce2:	dc03      	bgt.n	13cec <MQTTPacket_len+0x1c>
		rem_len += 1;
   13ce4:	687b      	ldr	r3, [r7, #4]
   13ce6:	3301      	adds	r3, #1
   13ce8:	607b      	str	r3, [r7, #4]
   13cea:	e012      	b.n	13d12 <MQTTPacket_len+0x42>
	else if (rem_len < 16384)
   13cec:	687b      	ldr	r3, [r7, #4]
   13cee:	4a0b      	ldr	r2, [pc, #44]	; (13d1c <MQTTPacket_len+0x4c>)
   13cf0:	4293      	cmp	r3, r2
   13cf2:	dc03      	bgt.n	13cfc <MQTTPacket_len+0x2c>
		rem_len += 2;
   13cf4:	687b      	ldr	r3, [r7, #4]
   13cf6:	3302      	adds	r3, #2
   13cf8:	607b      	str	r3, [r7, #4]
   13cfa:	e00a      	b.n	13d12 <MQTTPacket_len+0x42>
	else if (rem_len < 2097151)
   13cfc:	687b      	ldr	r3, [r7, #4]
   13cfe:	4a08      	ldr	r2, [pc, #32]	; (13d20 <MQTTPacket_len+0x50>)
   13d00:	4293      	cmp	r3, r2
   13d02:	dc03      	bgt.n	13d0c <MQTTPacket_len+0x3c>
		rem_len += 3;
   13d04:	687b      	ldr	r3, [r7, #4]
   13d06:	3303      	adds	r3, #3
   13d08:	607b      	str	r3, [r7, #4]
   13d0a:	e002      	b.n	13d12 <MQTTPacket_len+0x42>
	else
		rem_len += 4;
   13d0c:	687b      	ldr	r3, [r7, #4]
   13d0e:	3304      	adds	r3, #4
   13d10:	607b      	str	r3, [r7, #4]
	return rem_len;
   13d12:	687b      	ldr	r3, [r7, #4]
}
   13d14:	0018      	movs	r0, r3
   13d16:	46bd      	mov	sp, r7
   13d18:	b002      	add	sp, #8
   13d1a:	bd80      	pop	{r7, pc}
   13d1c:	00003fff 	.word	0x00003fff
   13d20:	001ffffe 	.word	0x001ffffe

00013d24 <bufchar>:


static unsigned char* bufptr;

int bufchar(unsigned char* c, int count)
{
   13d24:	b580      	push	{r7, lr}
   13d26:	b084      	sub	sp, #16
   13d28:	af00      	add	r7, sp, #0
   13d2a:	6078      	str	r0, [r7, #4]
   13d2c:	6039      	str	r1, [r7, #0]
	int i;

	for (i = 0; i < count; ++i)
   13d2e:	2300      	movs	r3, #0
   13d30:	60fb      	str	r3, [r7, #12]
   13d32:	e00a      	b.n	13d4a <bufchar+0x26>
		*c = *bufptr++;
   13d34:	4b09      	ldr	r3, [pc, #36]	; (13d5c <bufchar+0x38>)
   13d36:	681b      	ldr	r3, [r3, #0]
   13d38:	1c59      	adds	r1, r3, #1
   13d3a:	4a08      	ldr	r2, [pc, #32]	; (13d5c <bufchar+0x38>)
   13d3c:	6011      	str	r1, [r2, #0]
   13d3e:	781a      	ldrb	r2, [r3, #0]
   13d40:	687b      	ldr	r3, [r7, #4]
   13d42:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < count; ++i)
   13d44:	68fb      	ldr	r3, [r7, #12]
   13d46:	3301      	adds	r3, #1
   13d48:	60fb      	str	r3, [r7, #12]
   13d4a:	68fa      	ldr	r2, [r7, #12]
   13d4c:	683b      	ldr	r3, [r7, #0]
   13d4e:	429a      	cmp	r2, r3
   13d50:	dbf0      	blt.n	13d34 <bufchar+0x10>
	return count;
   13d52:	683b      	ldr	r3, [r7, #0]
}
   13d54:	0018      	movs	r0, r3
   13d56:	46bd      	mov	sp, r7
   13d58:	b004      	add	sp, #16
   13d5a:	bd80      	pop	{r7, pc}
   13d5c:	200005cc 	.word	0x200005cc

00013d60 <MQTTPacket_decodeBuf>:


int MQTTPacket_decodeBuf(unsigned char* buf, int* value)
{
   13d60:	b580      	push	{r7, lr}
   13d62:	b082      	sub	sp, #8
   13d64:	af00      	add	r7, sp, #0
   13d66:	6078      	str	r0, [r7, #4]
   13d68:	6039      	str	r1, [r7, #0]
	bufptr = buf;
   13d6a:	4b07      	ldr	r3, [pc, #28]	; (13d88 <MQTTPacket_decodeBuf+0x28>)
   13d6c:	687a      	ldr	r2, [r7, #4]
   13d6e:	601a      	str	r2, [r3, #0]
	return MQTTPacket_decode(bufchar, value);
   13d70:	683a      	ldr	r2, [r7, #0]
   13d72:	4b06      	ldr	r3, [pc, #24]	; (13d8c <MQTTPacket_decodeBuf+0x2c>)
   13d74:	0011      	movs	r1, r2
   13d76:	0018      	movs	r0, r3
   13d78:	4b05      	ldr	r3, [pc, #20]	; (13d90 <MQTTPacket_decodeBuf+0x30>)
   13d7a:	4798      	blx	r3
   13d7c:	0003      	movs	r3, r0
}
   13d7e:	0018      	movs	r0, r3
   13d80:	46bd      	mov	sp, r7
   13d82:	b002      	add	sp, #8
   13d84:	bd80      	pop	{r7, pc}
   13d86:	46c0      	nop			; (mov r8, r8)
   13d88:	200005cc 	.word	0x200005cc
   13d8c:	00013d25 	.word	0x00013d25
   13d90:	00013c4d 	.word	0x00013c4d

00013d94 <readInt>:
 * Calculates an integer from two bytes read from the input buffer
 * @param pptr pointer to the input buffer - incremented by the number of bytes used & returned
 * @return the integer value calculated
 */
int readInt(unsigned char** pptr)
{
   13d94:	b580      	push	{r7, lr}
   13d96:	b084      	sub	sp, #16
   13d98:	af00      	add	r7, sp, #0
   13d9a:	6078      	str	r0, [r7, #4]
	unsigned char* ptr = *pptr;
   13d9c:	687b      	ldr	r3, [r7, #4]
   13d9e:	681b      	ldr	r3, [r3, #0]
   13da0:	60fb      	str	r3, [r7, #12]
	int len = 256*(*ptr) + (*(ptr+1));
   13da2:	68fb      	ldr	r3, [r7, #12]
   13da4:	781b      	ldrb	r3, [r3, #0]
   13da6:	021b      	lsls	r3, r3, #8
   13da8:	68fa      	ldr	r2, [r7, #12]
   13daa:	3201      	adds	r2, #1
   13dac:	7812      	ldrb	r2, [r2, #0]
   13dae:	189b      	adds	r3, r3, r2
   13db0:	60bb      	str	r3, [r7, #8]
	*pptr += 2;
   13db2:	687b      	ldr	r3, [r7, #4]
   13db4:	681b      	ldr	r3, [r3, #0]
   13db6:	1c9a      	adds	r2, r3, #2
   13db8:	687b      	ldr	r3, [r7, #4]
   13dba:	601a      	str	r2, [r3, #0]
	return len;
   13dbc:	68bb      	ldr	r3, [r7, #8]
}
   13dbe:	0018      	movs	r0, r3
   13dc0:	46bd      	mov	sp, r7
   13dc2:	b004      	add	sp, #16
   13dc4:	bd80      	pop	{r7, pc}

00013dc6 <readChar>:
 * Reads one character from the input buffer.
 * @param pptr pointer to the input buffer - incremented by the number of bytes used & returned
 * @return the character read
 */
char readChar(unsigned char** pptr)
{
   13dc6:	b580      	push	{r7, lr}
   13dc8:	b084      	sub	sp, #16
   13dca:	af00      	add	r7, sp, #0
   13dcc:	6078      	str	r0, [r7, #4]
	char c = **pptr;
   13dce:	687b      	ldr	r3, [r7, #4]
   13dd0:	681a      	ldr	r2, [r3, #0]
   13dd2:	230f      	movs	r3, #15
   13dd4:	18fb      	adds	r3, r7, r3
   13dd6:	7812      	ldrb	r2, [r2, #0]
   13dd8:	701a      	strb	r2, [r3, #0]
	(*pptr)++;
   13dda:	687b      	ldr	r3, [r7, #4]
   13ddc:	681b      	ldr	r3, [r3, #0]
   13dde:	1c5a      	adds	r2, r3, #1
   13de0:	687b      	ldr	r3, [r7, #4]
   13de2:	601a      	str	r2, [r3, #0]
	return c;
   13de4:	230f      	movs	r3, #15
   13de6:	18fb      	adds	r3, r7, r3
   13de8:	781b      	ldrb	r3, [r3, #0]
}
   13dea:	0018      	movs	r0, r3
   13dec:	46bd      	mov	sp, r7
   13dee:	b004      	add	sp, #16
   13df0:	bd80      	pop	{r7, pc}

00013df2 <writeChar>:
 * Writes one character to an output buffer.
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param c the character to write
 */
void writeChar(unsigned char** pptr, char c)
{
   13df2:	b580      	push	{r7, lr}
   13df4:	b082      	sub	sp, #8
   13df6:	af00      	add	r7, sp, #0
   13df8:	6078      	str	r0, [r7, #4]
   13dfa:	000a      	movs	r2, r1
   13dfc:	1cfb      	adds	r3, r7, #3
   13dfe:	701a      	strb	r2, [r3, #0]
	**pptr = c;
   13e00:	687b      	ldr	r3, [r7, #4]
   13e02:	681b      	ldr	r3, [r3, #0]
   13e04:	1cfa      	adds	r2, r7, #3
   13e06:	7812      	ldrb	r2, [r2, #0]
   13e08:	701a      	strb	r2, [r3, #0]
	(*pptr)++;
   13e0a:	687b      	ldr	r3, [r7, #4]
   13e0c:	681b      	ldr	r3, [r3, #0]
   13e0e:	1c5a      	adds	r2, r3, #1
   13e10:	687b      	ldr	r3, [r7, #4]
   13e12:	601a      	str	r2, [r3, #0]
}
   13e14:	46c0      	nop			; (mov r8, r8)
   13e16:	46bd      	mov	sp, r7
   13e18:	b002      	add	sp, #8
   13e1a:	bd80      	pop	{r7, pc}

00013e1c <writeInt>:
 * Writes an integer as 2 bytes to an output buffer.
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param anInt the integer to write
 */
void writeInt(unsigned char** pptr, int anInt)
{
   13e1c:	b580      	push	{r7, lr}
   13e1e:	b082      	sub	sp, #8
   13e20:	af00      	add	r7, sp, #0
   13e22:	6078      	str	r0, [r7, #4]
   13e24:	6039      	str	r1, [r7, #0]
	**pptr = (unsigned char)(anInt / 256);
   13e26:	687b      	ldr	r3, [r7, #4]
   13e28:	681a      	ldr	r2, [r3, #0]
   13e2a:	683b      	ldr	r3, [r7, #0]
   13e2c:	2b00      	cmp	r3, #0
   13e2e:	da00      	bge.n	13e32 <writeInt+0x16>
   13e30:	33ff      	adds	r3, #255	; 0xff
   13e32:	121b      	asrs	r3, r3, #8
   13e34:	b2db      	uxtb	r3, r3
   13e36:	7013      	strb	r3, [r2, #0]
	(*pptr)++;
   13e38:	687b      	ldr	r3, [r7, #4]
   13e3a:	681b      	ldr	r3, [r3, #0]
   13e3c:	1c5a      	adds	r2, r3, #1
   13e3e:	687b      	ldr	r3, [r7, #4]
   13e40:	601a      	str	r2, [r3, #0]
	**pptr = (unsigned char)(anInt % 256);
   13e42:	687b      	ldr	r3, [r7, #4]
   13e44:	681a      	ldr	r2, [r3, #0]
   13e46:	683b      	ldr	r3, [r7, #0]
   13e48:	4908      	ldr	r1, [pc, #32]	; (13e6c <writeInt+0x50>)
   13e4a:	400b      	ands	r3, r1
   13e4c:	d503      	bpl.n	13e56 <writeInt+0x3a>
   13e4e:	3b01      	subs	r3, #1
   13e50:	4907      	ldr	r1, [pc, #28]	; (13e70 <writeInt+0x54>)
   13e52:	430b      	orrs	r3, r1
   13e54:	3301      	adds	r3, #1
   13e56:	b2db      	uxtb	r3, r3
   13e58:	7013      	strb	r3, [r2, #0]
	(*pptr)++;
   13e5a:	687b      	ldr	r3, [r7, #4]
   13e5c:	681b      	ldr	r3, [r3, #0]
   13e5e:	1c5a      	adds	r2, r3, #1
   13e60:	687b      	ldr	r3, [r7, #4]
   13e62:	601a      	str	r2, [r3, #0]
}
   13e64:	46c0      	nop			; (mov r8, r8)
   13e66:	46bd      	mov	sp, r7
   13e68:	b002      	add	sp, #8
   13e6a:	bd80      	pop	{r7, pc}
   13e6c:	800000ff 	.word	0x800000ff
   13e70:	ffffff00 	.word	0xffffff00

00013e74 <writeCString>:
 * Writes a "UTF" string to an output buffer.  Converts C string to length-delimited.
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param string the C string to write
 */
void writeCString(unsigned char** pptr, const char* string)
{
   13e74:	b580      	push	{r7, lr}
   13e76:	b084      	sub	sp, #16
   13e78:	af00      	add	r7, sp, #0
   13e7a:	6078      	str	r0, [r7, #4]
   13e7c:	6039      	str	r1, [r7, #0]
	int len = strlen(string);
   13e7e:	683b      	ldr	r3, [r7, #0]
   13e80:	0018      	movs	r0, r3
   13e82:	4b0d      	ldr	r3, [pc, #52]	; (13eb8 <writeCString+0x44>)
   13e84:	4798      	blx	r3
   13e86:	0003      	movs	r3, r0
   13e88:	60fb      	str	r3, [r7, #12]
	writeInt(pptr, len);
   13e8a:	68fa      	ldr	r2, [r7, #12]
   13e8c:	687b      	ldr	r3, [r7, #4]
   13e8e:	0011      	movs	r1, r2
   13e90:	0018      	movs	r0, r3
   13e92:	4b0a      	ldr	r3, [pc, #40]	; (13ebc <writeCString+0x48>)
   13e94:	4798      	blx	r3
	memcpy(*pptr, string, len);
   13e96:	687b      	ldr	r3, [r7, #4]
   13e98:	681b      	ldr	r3, [r3, #0]
   13e9a:	68fa      	ldr	r2, [r7, #12]
   13e9c:	6839      	ldr	r1, [r7, #0]
   13e9e:	0018      	movs	r0, r3
   13ea0:	4b07      	ldr	r3, [pc, #28]	; (13ec0 <writeCString+0x4c>)
   13ea2:	4798      	blx	r3
	*pptr += len;
   13ea4:	687b      	ldr	r3, [r7, #4]
   13ea6:	681a      	ldr	r2, [r3, #0]
   13ea8:	68fb      	ldr	r3, [r7, #12]
   13eaa:	18d2      	adds	r2, r2, r3
   13eac:	687b      	ldr	r3, [r7, #4]
   13eae:	601a      	str	r2, [r3, #0]
}
   13eb0:	46c0      	nop			; (mov r8, r8)
   13eb2:	46bd      	mov	sp, r7
   13eb4:	b004      	add	sp, #16
   13eb6:	bd80      	pop	{r7, pc}
   13eb8:	0001c72b 	.word	0x0001c72b
   13ebc:	00013e1d 	.word	0x00013e1d
   13ec0:	0001c13d 	.word	0x0001c13d

00013ec4 <writeMQTTString>:
	return len;
}


void writeMQTTString(unsigned char** pptr, MQTTString mqttstring)
{
   13ec4:	b580      	push	{r7, lr}
   13ec6:	b084      	sub	sp, #16
   13ec8:	af00      	add	r7, sp, #0
   13eca:	60f8      	str	r0, [r7, #12]
   13ecc:	0038      	movs	r0, r7
   13ece:	6001      	str	r1, [r0, #0]
   13ed0:	6042      	str	r2, [r0, #4]
   13ed2:	6083      	str	r3, [r0, #8]
	if (mqttstring.lenstring.len > 0)
   13ed4:	003b      	movs	r3, r7
   13ed6:	685b      	ldr	r3, [r3, #4]
   13ed8:	2b00      	cmp	r3, #0
   13eda:	dd17      	ble.n	13f0c <writeMQTTString+0x48>
	{
		writeInt(pptr, mqttstring.lenstring.len);
   13edc:	003b      	movs	r3, r7
   13ede:	685a      	ldr	r2, [r3, #4]
   13ee0:	68fb      	ldr	r3, [r7, #12]
   13ee2:	0011      	movs	r1, r2
   13ee4:	0018      	movs	r0, r3
   13ee6:	4b14      	ldr	r3, [pc, #80]	; (13f38 <writeMQTTString+0x74>)
   13ee8:	4798      	blx	r3
		memcpy(*pptr, mqttstring.lenstring.data, mqttstring.lenstring.len);
   13eea:	68fb      	ldr	r3, [r7, #12]
   13eec:	6818      	ldr	r0, [r3, #0]
   13eee:	003b      	movs	r3, r7
   13ef0:	6899      	ldr	r1, [r3, #8]
   13ef2:	003b      	movs	r3, r7
   13ef4:	685b      	ldr	r3, [r3, #4]
   13ef6:	001a      	movs	r2, r3
   13ef8:	4b10      	ldr	r3, [pc, #64]	; (13f3c <writeMQTTString+0x78>)
   13efa:	4798      	blx	r3
		*pptr += mqttstring.lenstring.len;
   13efc:	68fb      	ldr	r3, [r7, #12]
   13efe:	681a      	ldr	r2, [r3, #0]
   13f00:	003b      	movs	r3, r7
   13f02:	685b      	ldr	r3, [r3, #4]
   13f04:	18d2      	adds	r2, r2, r3
   13f06:	68fb      	ldr	r3, [r7, #12]
   13f08:	601a      	str	r2, [r3, #0]
	}
	else if (mqttstring.cstring)
		writeCString(pptr, mqttstring.cstring);
	else
		writeInt(pptr, 0);
}
   13f0a:	e010      	b.n	13f2e <writeMQTTString+0x6a>
	else if (mqttstring.cstring)
   13f0c:	003b      	movs	r3, r7
   13f0e:	681b      	ldr	r3, [r3, #0]
   13f10:	2b00      	cmp	r3, #0
   13f12:	d007      	beq.n	13f24 <writeMQTTString+0x60>
		writeCString(pptr, mqttstring.cstring);
   13f14:	003b      	movs	r3, r7
   13f16:	681a      	ldr	r2, [r3, #0]
   13f18:	68fb      	ldr	r3, [r7, #12]
   13f1a:	0011      	movs	r1, r2
   13f1c:	0018      	movs	r0, r3
   13f1e:	4b08      	ldr	r3, [pc, #32]	; (13f40 <writeMQTTString+0x7c>)
   13f20:	4798      	blx	r3
}
   13f22:	e004      	b.n	13f2e <writeMQTTString+0x6a>
		writeInt(pptr, 0);
   13f24:	68fb      	ldr	r3, [r7, #12]
   13f26:	2100      	movs	r1, #0
   13f28:	0018      	movs	r0, r3
   13f2a:	4b03      	ldr	r3, [pc, #12]	; (13f38 <writeMQTTString+0x74>)
   13f2c:	4798      	blx	r3
}
   13f2e:	46c0      	nop			; (mov r8, r8)
   13f30:	46bd      	mov	sp, r7
   13f32:	b004      	add	sp, #16
   13f34:	bd80      	pop	{r7, pc}
   13f36:	46c0      	nop			; (mov r8, r8)
   13f38:	00013e1d 	.word	0x00013e1d
   13f3c:	0001c13d 	.word	0x0001c13d
   13f40:	00013e75 	.word	0x00013e75

00013f44 <readMQTTLenString>:
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param enddata pointer to the end of the data: do not read beyond
 * @return 1 if successful, 0 if not
 */
int readMQTTLenString(MQTTString* mqttstring, unsigned char** pptr, unsigned char* enddata)
{
   13f44:	b580      	push	{r7, lr}
   13f46:	b086      	sub	sp, #24
   13f48:	af00      	add	r7, sp, #0
   13f4a:	60f8      	str	r0, [r7, #12]
   13f4c:	60b9      	str	r1, [r7, #8]
   13f4e:	607a      	str	r2, [r7, #4]
	int rc = 0;
   13f50:	2300      	movs	r3, #0
   13f52:	617b      	str	r3, [r7, #20]

	FUNC_ENTRY;
	/* the first two bytes are the length of the string */
	if (enddata - (*pptr) > 1) /* enough length to read the integer? */
   13f54:	687a      	ldr	r2, [r7, #4]
   13f56:	68bb      	ldr	r3, [r7, #8]
   13f58:	681b      	ldr	r3, [r3, #0]
   13f5a:	1ad3      	subs	r3, r2, r3
   13f5c:	2b01      	cmp	r3, #1
   13f5e:	dd1b      	ble.n	13f98 <readMQTTLenString+0x54>
	{
		mqttstring->lenstring.len = readInt(pptr); /* increments pptr to point past length */
   13f60:	68bb      	ldr	r3, [r7, #8]
   13f62:	0018      	movs	r0, r3
   13f64:	4b10      	ldr	r3, [pc, #64]	; (13fa8 <readMQTTLenString+0x64>)
   13f66:	4798      	blx	r3
   13f68:	0002      	movs	r2, r0
   13f6a:	68fb      	ldr	r3, [r7, #12]
   13f6c:	605a      	str	r2, [r3, #4]
		if (&(*pptr)[mqttstring->lenstring.len] <= enddata)
   13f6e:	68bb      	ldr	r3, [r7, #8]
   13f70:	681a      	ldr	r2, [r3, #0]
   13f72:	68fb      	ldr	r3, [r7, #12]
   13f74:	685b      	ldr	r3, [r3, #4]
   13f76:	18d2      	adds	r2, r2, r3
   13f78:	687b      	ldr	r3, [r7, #4]
   13f7a:	429a      	cmp	r2, r3
   13f7c:	d80c      	bhi.n	13f98 <readMQTTLenString+0x54>
		{
			mqttstring->lenstring.data = (char*)*pptr;
   13f7e:	68bb      	ldr	r3, [r7, #8]
   13f80:	681a      	ldr	r2, [r3, #0]
   13f82:	68fb      	ldr	r3, [r7, #12]
   13f84:	609a      	str	r2, [r3, #8]
			*pptr += mqttstring->lenstring.len;
   13f86:	68bb      	ldr	r3, [r7, #8]
   13f88:	681a      	ldr	r2, [r3, #0]
   13f8a:	68fb      	ldr	r3, [r7, #12]
   13f8c:	685b      	ldr	r3, [r3, #4]
   13f8e:	18d2      	adds	r2, r2, r3
   13f90:	68bb      	ldr	r3, [r7, #8]
   13f92:	601a      	str	r2, [r3, #0]
			rc = 1;
   13f94:	2301      	movs	r3, #1
   13f96:	617b      	str	r3, [r7, #20]
		}
	}
	mqttstring->cstring = NULL;
   13f98:	68fb      	ldr	r3, [r7, #12]
   13f9a:	2200      	movs	r2, #0
   13f9c:	601a      	str	r2, [r3, #0]
	FUNC_EXIT_RC(rc);
	return rc;
   13f9e:	697b      	ldr	r3, [r7, #20]
}
   13fa0:	0018      	movs	r0, r3
   13fa2:	46bd      	mov	sp, r7
   13fa4:	b006      	add	sp, #24
   13fa6:	bd80      	pop	{r7, pc}
   13fa8:	00013d95 	.word	0x00013d95

00013fac <MQTTstrlen>:
 * Return the length of the MQTTstring - C string if there is one, otherwise the length delimited string
 * @param mqttstring the string to return the length of
 * @return the length of the string
 */
int MQTTstrlen(MQTTString mqttstring)
{
   13fac:	b580      	push	{r7, lr}
   13fae:	b086      	sub	sp, #24
   13fb0:	af00      	add	r7, sp, #0
   13fb2:	1d3b      	adds	r3, r7, #4
   13fb4:	6018      	str	r0, [r3, #0]
   13fb6:	6059      	str	r1, [r3, #4]
   13fb8:	609a      	str	r2, [r3, #8]
	int rc = 0;
   13fba:	2300      	movs	r3, #0
   13fbc:	617b      	str	r3, [r7, #20]

	if (mqttstring.cstring)
   13fbe:	1d3b      	adds	r3, r7, #4
   13fc0:	681b      	ldr	r3, [r3, #0]
   13fc2:	2b00      	cmp	r3, #0
   13fc4:	d007      	beq.n	13fd6 <MQTTstrlen+0x2a>
		rc = strlen(mqttstring.cstring);
   13fc6:	1d3b      	adds	r3, r7, #4
   13fc8:	681b      	ldr	r3, [r3, #0]
   13fca:	0018      	movs	r0, r3
   13fcc:	4b06      	ldr	r3, [pc, #24]	; (13fe8 <MQTTstrlen+0x3c>)
   13fce:	4798      	blx	r3
   13fd0:	0003      	movs	r3, r0
   13fd2:	617b      	str	r3, [r7, #20]
   13fd4:	e002      	b.n	13fdc <MQTTstrlen+0x30>
	else
		rc = mqttstring.lenstring.len;
   13fd6:	1d3b      	adds	r3, r7, #4
   13fd8:	685b      	ldr	r3, [r3, #4]
   13fda:	617b      	str	r3, [r7, #20]
	return rc;
   13fdc:	697b      	ldr	r3, [r7, #20]
}
   13fde:	0018      	movs	r0, r3
   13fe0:	46bd      	mov	sp, r7
   13fe2:	b006      	add	sp, #24
   13fe4:	bd80      	pop	{r7, pc}
   13fe6:	46c0      	nop			; (mov r8, r8)
   13fe8:	0001c72b 	.word	0x0001c72b

00013fec <MQTTPacket_equals>:
 * @param a the MQTTString to compare
 * @param bptr the C string to compare
 * @return boolean - equal or not
 */
int MQTTPacket_equals(MQTTString* a, char* bptr)
{
   13fec:	b580      	push	{r7, lr}
   13fee:	b086      	sub	sp, #24
   13ff0:	af00      	add	r7, sp, #0
   13ff2:	6078      	str	r0, [r7, #4]
   13ff4:	6039      	str	r1, [r7, #0]
	int alen = 0,
   13ff6:	2300      	movs	r3, #0
   13ff8:	617b      	str	r3, [r7, #20]
		blen = 0;
   13ffa:	2300      	movs	r3, #0
   13ffc:	60fb      	str	r3, [r7, #12]
	char *aptr;
	
	if (a->cstring)
   13ffe:	687b      	ldr	r3, [r7, #4]
   14000:	681b      	ldr	r3, [r3, #0]
   14002:	2b00      	cmp	r3, #0
   14004:	d00a      	beq.n	1401c <MQTTPacket_equals+0x30>
	{
		aptr = a->cstring;
   14006:	687b      	ldr	r3, [r7, #4]
   14008:	681b      	ldr	r3, [r3, #0]
   1400a:	613b      	str	r3, [r7, #16]
		alen = strlen(a->cstring);
   1400c:	687b      	ldr	r3, [r7, #4]
   1400e:	681b      	ldr	r3, [r3, #0]
   14010:	0018      	movs	r0, r3
   14012:	4b12      	ldr	r3, [pc, #72]	; (1405c <MQTTPacket_equals+0x70>)
   14014:	4798      	blx	r3
   14016:	0003      	movs	r3, r0
   14018:	617b      	str	r3, [r7, #20]
   1401a:	e005      	b.n	14028 <MQTTPacket_equals+0x3c>
	}
	else
	{
		aptr = a->lenstring.data;
   1401c:	687b      	ldr	r3, [r7, #4]
   1401e:	689b      	ldr	r3, [r3, #8]
   14020:	613b      	str	r3, [r7, #16]
		alen = a->lenstring.len;
   14022:	687b      	ldr	r3, [r7, #4]
   14024:	685b      	ldr	r3, [r3, #4]
   14026:	617b      	str	r3, [r7, #20]
	}
	blen = strlen(bptr);
   14028:	683b      	ldr	r3, [r7, #0]
   1402a:	0018      	movs	r0, r3
   1402c:	4b0b      	ldr	r3, [pc, #44]	; (1405c <MQTTPacket_equals+0x70>)
   1402e:	4798      	blx	r3
   14030:	0003      	movs	r3, r0
   14032:	60fb      	str	r3, [r7, #12]
	
	return (alen == blen) && (strncmp(aptr, bptr, alen) == 0);
   14034:	697a      	ldr	r2, [r7, #20]
   14036:	68fb      	ldr	r3, [r7, #12]
   14038:	429a      	cmp	r2, r3
   1403a:	d109      	bne.n	14050 <MQTTPacket_equals+0x64>
   1403c:	697a      	ldr	r2, [r7, #20]
   1403e:	6839      	ldr	r1, [r7, #0]
   14040:	693b      	ldr	r3, [r7, #16]
   14042:	0018      	movs	r0, r3
   14044:	4b06      	ldr	r3, [pc, #24]	; (14060 <MQTTPacket_equals+0x74>)
   14046:	4798      	blx	r3
   14048:	1e03      	subs	r3, r0, #0
   1404a:	d101      	bne.n	14050 <MQTTPacket_equals+0x64>
   1404c:	2301      	movs	r3, #1
   1404e:	e000      	b.n	14052 <MQTTPacket_equals+0x66>
   14050:	2300      	movs	r3, #0
}
   14052:	0018      	movs	r0, r3
   14054:	46bd      	mov	sp, r7
   14056:	b006      	add	sp, #24
   14058:	bd80      	pop	{r7, pc}
   1405a:	46c0      	nop			; (mov r8, r8)
   1405c:	0001c72b 	.word	0x0001c72b
   14060:	0001c739 	.word	0x0001c739

00014064 <MQTTSerialize_publishLength>:
  * @param topicName the topic name to be used in the publish  
  * @param payloadlen the length of the payload to be sent
  * @return the length of buffer needed to contain the serialized version of the packet
  */
int MQTTSerialize_publishLength(int qos, MQTTString topicName, int payloadlen)
{
   14064:	b580      	push	{r7, lr}
   14066:	b086      	sub	sp, #24
   14068:	af00      	add	r7, sp, #0
   1406a:	60f8      	str	r0, [r7, #12]
   1406c:	0038      	movs	r0, r7
   1406e:	6001      	str	r1, [r0, #0]
   14070:	6042      	str	r2, [r0, #4]
   14072:	6083      	str	r3, [r0, #8]
	int len = 0;
   14074:	2300      	movs	r3, #0
   14076:	617b      	str	r3, [r7, #20]

	len += 2 + MQTTstrlen(topicName) + payloadlen;
   14078:	003b      	movs	r3, r7
   1407a:	6818      	ldr	r0, [r3, #0]
   1407c:	6859      	ldr	r1, [r3, #4]
   1407e:	689a      	ldr	r2, [r3, #8]
   14080:	4b09      	ldr	r3, [pc, #36]	; (140a8 <MQTTSerialize_publishLength+0x44>)
   14082:	4798      	blx	r3
   14084:	0003      	movs	r3, r0
   14086:	1c9a      	adds	r2, r3, #2
   14088:	6a3b      	ldr	r3, [r7, #32]
   1408a:	18d3      	adds	r3, r2, r3
   1408c:	697a      	ldr	r2, [r7, #20]
   1408e:	18d3      	adds	r3, r2, r3
   14090:	617b      	str	r3, [r7, #20]
	if (qos > 0)
   14092:	68fb      	ldr	r3, [r7, #12]
   14094:	2b00      	cmp	r3, #0
   14096:	dd02      	ble.n	1409e <MQTTSerialize_publishLength+0x3a>
		len += 2; /* packetid */
   14098:	697b      	ldr	r3, [r7, #20]
   1409a:	3302      	adds	r3, #2
   1409c:	617b      	str	r3, [r7, #20]
	return len;
   1409e:	697b      	ldr	r3, [r7, #20]
}
   140a0:	0018      	movs	r0, r3
   140a2:	46bd      	mov	sp, r7
   140a4:	b006      	add	sp, #24
   140a6:	bd80      	pop	{r7, pc}
   140a8:	00013fad 	.word	0x00013fad

000140ac <MQTTSerialize_publish>:
  * @param payloadlen integer - the length of the MQTT payload
  * @return the length of the serialized data.  <= 0 indicates error
  */
int MQTTSerialize_publish(unsigned char* buf, int buflen, unsigned char dup, int qos, unsigned char retained, unsigned short packetid,
		MQTTString topicName, unsigned char* payload, int payloadlen)
{
   140ac:	b590      	push	{r4, r7, lr}
   140ae:	b08b      	sub	sp, #44	; 0x2c
   140b0:	af02      	add	r7, sp, #8
   140b2:	60f8      	str	r0, [r7, #12]
   140b4:	60b9      	str	r1, [r7, #8]
   140b6:	603b      	str	r3, [r7, #0]
   140b8:	1dfb      	adds	r3, r7, #7
   140ba:	701a      	strb	r2, [r3, #0]
	unsigned char *ptr = buf;
   140bc:	68fb      	ldr	r3, [r7, #12]
   140be:	617b      	str	r3, [r7, #20]
	MQTTHeader header = {0};
   140c0:	2300      	movs	r3, #0
   140c2:	613b      	str	r3, [r7, #16]
	int rem_len = 0;
   140c4:	2300      	movs	r3, #0
   140c6:	61bb      	str	r3, [r7, #24]
	int rc = 0;
   140c8:	2300      	movs	r3, #0
   140ca:	61fb      	str	r3, [r7, #28]

	FUNC_ENTRY;
	if (MQTTPacket_len(rem_len = MQTTSerialize_publishLength(qos, topicName, payloadlen)) > buflen)
   140cc:	2308      	movs	r3, #8
   140ce:	2230      	movs	r2, #48	; 0x30
   140d0:	4694      	mov	ip, r2
   140d2:	44bc      	add	ip, r7
   140d4:	4463      	add	r3, ip
   140d6:	6838      	ldr	r0, [r7, #0]
   140d8:	6cba      	ldr	r2, [r7, #72]	; 0x48
   140da:	9200      	str	r2, [sp, #0]
   140dc:	6819      	ldr	r1, [r3, #0]
   140de:	685a      	ldr	r2, [r3, #4]
   140e0:	689b      	ldr	r3, [r3, #8]
   140e2:	4c46      	ldr	r4, [pc, #280]	; (141fc <MQTTSerialize_publish+0x150>)
   140e4:	47a0      	blx	r4
   140e6:	0003      	movs	r3, r0
   140e8:	61bb      	str	r3, [r7, #24]
   140ea:	69bb      	ldr	r3, [r7, #24]
   140ec:	0018      	movs	r0, r3
   140ee:	4b44      	ldr	r3, [pc, #272]	; (14200 <MQTTSerialize_publish+0x154>)
   140f0:	4798      	blx	r3
   140f2:	0002      	movs	r2, r0
   140f4:	68bb      	ldr	r3, [r7, #8]
   140f6:	429a      	cmp	r2, r3
   140f8:	dd03      	ble.n	14102 <MQTTSerialize_publish+0x56>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
   140fa:	2302      	movs	r3, #2
   140fc:	425b      	negs	r3, r3
   140fe:	61fb      	str	r3, [r7, #28]
		goto exit;
   14100:	e077      	b.n	141f2 <MQTTSerialize_publish+0x146>
	}

	header.bits.type = PUBLISH;
   14102:	2310      	movs	r3, #16
   14104:	18fb      	adds	r3, r7, r3
   14106:	781a      	ldrb	r2, [r3, #0]
   14108:	210f      	movs	r1, #15
   1410a:	400a      	ands	r2, r1
   1410c:	1c11      	adds	r1, r2, #0
   1410e:	2230      	movs	r2, #48	; 0x30
   14110:	430a      	orrs	r2, r1
   14112:	701a      	strb	r2, [r3, #0]
	header.bits.dup = dup;
   14114:	1dfb      	adds	r3, r7, #7
   14116:	781b      	ldrb	r3, [r3, #0]
   14118:	2201      	movs	r2, #1
   1411a:	4013      	ands	r3, r2
   1411c:	b2da      	uxtb	r2, r3
   1411e:	2310      	movs	r3, #16
   14120:	18fb      	adds	r3, r7, r3
   14122:	2101      	movs	r1, #1
   14124:	400a      	ands	r2, r1
   14126:	00d0      	lsls	r0, r2, #3
   14128:	781a      	ldrb	r2, [r3, #0]
   1412a:	2108      	movs	r1, #8
   1412c:	438a      	bics	r2, r1
   1412e:	1c11      	adds	r1, r2, #0
   14130:	1c02      	adds	r2, r0, #0
   14132:	430a      	orrs	r2, r1
   14134:	701a      	strb	r2, [r3, #0]
	header.bits.qos = qos;
   14136:	683b      	ldr	r3, [r7, #0]
   14138:	b2db      	uxtb	r3, r3
   1413a:	1c1a      	adds	r2, r3, #0
   1413c:	2303      	movs	r3, #3
   1413e:	4013      	ands	r3, r2
   14140:	b2da      	uxtb	r2, r3
   14142:	2310      	movs	r3, #16
   14144:	18fb      	adds	r3, r7, r3
   14146:	2103      	movs	r1, #3
   14148:	400a      	ands	r2, r1
   1414a:	1890      	adds	r0, r2, r2
   1414c:	781a      	ldrb	r2, [r3, #0]
   1414e:	2106      	movs	r1, #6
   14150:	438a      	bics	r2, r1
   14152:	1c11      	adds	r1, r2, #0
   14154:	1c02      	adds	r2, r0, #0
   14156:	430a      	orrs	r2, r1
   14158:	701a      	strb	r2, [r3, #0]
	header.bits.retain = retained;
   1415a:	2330      	movs	r3, #48	; 0x30
   1415c:	18fb      	adds	r3, r7, r3
   1415e:	781b      	ldrb	r3, [r3, #0]
   14160:	2201      	movs	r2, #1
   14162:	4013      	ands	r3, r2
   14164:	b2da      	uxtb	r2, r3
   14166:	2310      	movs	r3, #16
   14168:	18fb      	adds	r3, r7, r3
   1416a:	2101      	movs	r1, #1
   1416c:	400a      	ands	r2, r1
   1416e:	0010      	movs	r0, r2
   14170:	781a      	ldrb	r2, [r3, #0]
   14172:	2101      	movs	r1, #1
   14174:	438a      	bics	r2, r1
   14176:	1c11      	adds	r1, r2, #0
   14178:	1c02      	adds	r2, r0, #0
   1417a:	430a      	orrs	r2, r1
   1417c:	701a      	strb	r2, [r3, #0]
	writeChar(&ptr, header.byte); /* write header */
   1417e:	2310      	movs	r3, #16
   14180:	18fb      	adds	r3, r7, r3
   14182:	781a      	ldrb	r2, [r3, #0]
   14184:	2314      	movs	r3, #20
   14186:	18fb      	adds	r3, r7, r3
   14188:	0011      	movs	r1, r2
   1418a:	0018      	movs	r0, r3
   1418c:	4b1d      	ldr	r3, [pc, #116]	; (14204 <MQTTSerialize_publish+0x158>)
   1418e:	4798      	blx	r3

	ptr += MQTTPacket_encode(ptr, rem_len); /* write remaining length */;
   14190:	697b      	ldr	r3, [r7, #20]
   14192:	69ba      	ldr	r2, [r7, #24]
   14194:	0011      	movs	r1, r2
   14196:	0018      	movs	r0, r3
   14198:	4b1b      	ldr	r3, [pc, #108]	; (14208 <MQTTSerialize_publish+0x15c>)
   1419a:	4798      	blx	r3
   1419c:	0002      	movs	r2, r0
   1419e:	697b      	ldr	r3, [r7, #20]
   141a0:	189b      	adds	r3, r3, r2
   141a2:	617b      	str	r3, [r7, #20]

	writeMQTTString(&ptr, topicName);
   141a4:	2308      	movs	r3, #8
   141a6:	2230      	movs	r2, #48	; 0x30
   141a8:	4694      	mov	ip, r2
   141aa:	44bc      	add	ip, r7
   141ac:	4463      	add	r3, ip
   141ae:	2214      	movs	r2, #20
   141b0:	18b8      	adds	r0, r7, r2
   141b2:	6819      	ldr	r1, [r3, #0]
   141b4:	685a      	ldr	r2, [r3, #4]
   141b6:	689b      	ldr	r3, [r3, #8]
   141b8:	4c14      	ldr	r4, [pc, #80]	; (1420c <MQTTSerialize_publish+0x160>)
   141ba:	47a0      	blx	r4

	if (qos > 0)
   141bc:	683b      	ldr	r3, [r7, #0]
   141be:	2b00      	cmp	r3, #0
   141c0:	dd08      	ble.n	141d4 <MQTTSerialize_publish+0x128>
		writeInt(&ptr, packetid);
   141c2:	2334      	movs	r3, #52	; 0x34
   141c4:	18fb      	adds	r3, r7, r3
   141c6:	881a      	ldrh	r2, [r3, #0]
   141c8:	2314      	movs	r3, #20
   141ca:	18fb      	adds	r3, r7, r3
   141cc:	0011      	movs	r1, r2
   141ce:	0018      	movs	r0, r3
   141d0:	4b0f      	ldr	r3, [pc, #60]	; (14210 <MQTTSerialize_publish+0x164>)
   141d2:	4798      	blx	r3

	memcpy(ptr, payload, payloadlen);
   141d4:	697b      	ldr	r3, [r7, #20]
   141d6:	6cba      	ldr	r2, [r7, #72]	; 0x48
   141d8:	6c79      	ldr	r1, [r7, #68]	; 0x44
   141da:	0018      	movs	r0, r3
   141dc:	4b0d      	ldr	r3, [pc, #52]	; (14214 <MQTTSerialize_publish+0x168>)
   141de:	4798      	blx	r3
	ptr += payloadlen;
   141e0:	697a      	ldr	r2, [r7, #20]
   141e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   141e4:	18d3      	adds	r3, r2, r3
   141e6:	617b      	str	r3, [r7, #20]

	rc = ptr - buf;
   141e8:	697b      	ldr	r3, [r7, #20]
   141ea:	001a      	movs	r2, r3
   141ec:	68fb      	ldr	r3, [r7, #12]
   141ee:	1ad3      	subs	r3, r2, r3
   141f0:	61fb      	str	r3, [r7, #28]

exit:
	FUNC_EXIT_RC(rc);
	return rc;
   141f2:	69fb      	ldr	r3, [r7, #28]
}
   141f4:	0018      	movs	r0, r3
   141f6:	46bd      	mov	sp, r7
   141f8:	b009      	add	sp, #36	; 0x24
   141fa:	bd90      	pop	{r4, r7, pc}
   141fc:	00014065 	.word	0x00014065
   14200:	00013cd1 	.word	0x00013cd1
   14204:	00013df3 	.word	0x00013df3
   14208:	00013bd9 	.word	0x00013bd9
   1420c:	00013ec5 	.word	0x00013ec5
   14210:	00013e1d 	.word	0x00013e1d
   14214:	0001c13d 	.word	0x0001c13d

00014218 <MQTTSerialize_ack>:
  * @param dup the MQTT dup flag
  * @param packetid the MQTT packet identifier
  * @return serialized length, or error if 0
  */
int MQTTSerialize_ack(unsigned char* buf, int buflen, unsigned char packettype, unsigned char dup, unsigned short packetid)
{
   14218:	b580      	push	{r7, lr}
   1421a:	b088      	sub	sp, #32
   1421c:	af00      	add	r7, sp, #0
   1421e:	60f8      	str	r0, [r7, #12]
   14220:	60b9      	str	r1, [r7, #8]
   14222:	0019      	movs	r1, r3
   14224:	1dfb      	adds	r3, r7, #7
   14226:	701a      	strb	r2, [r3, #0]
   14228:	1dbb      	adds	r3, r7, #6
   1422a:	1c0a      	adds	r2, r1, #0
   1422c:	701a      	strb	r2, [r3, #0]
	MQTTHeader header = {0};
   1422e:	2300      	movs	r3, #0
   14230:	61bb      	str	r3, [r7, #24]
	int rc = 0;
   14232:	2300      	movs	r3, #0
   14234:	61fb      	str	r3, [r7, #28]
	unsigned char *ptr = buf;
   14236:	68fb      	ldr	r3, [r7, #12]
   14238:	617b      	str	r3, [r7, #20]

	FUNC_ENTRY;
	if (buflen < 4)
   1423a:	68bb      	ldr	r3, [r7, #8]
   1423c:	2b03      	cmp	r3, #3
   1423e:	dc03      	bgt.n	14248 <MQTTSerialize_ack+0x30>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
   14240:	2302      	movs	r3, #2
   14242:	425b      	negs	r3, r3
   14244:	61fb      	str	r3, [r7, #28]
		goto exit;
   14246:	e055      	b.n	142f4 <MQTTSerialize_ack+0xdc>
	}
	header.bits.type = packettype;
   14248:	1dfb      	adds	r3, r7, #7
   1424a:	781b      	ldrb	r3, [r3, #0]
   1424c:	220f      	movs	r2, #15
   1424e:	4013      	ands	r3, r2
   14250:	b2da      	uxtb	r2, r3
   14252:	2318      	movs	r3, #24
   14254:	18fb      	adds	r3, r7, r3
   14256:	0110      	lsls	r0, r2, #4
   14258:	781a      	ldrb	r2, [r3, #0]
   1425a:	210f      	movs	r1, #15
   1425c:	400a      	ands	r2, r1
   1425e:	1c11      	adds	r1, r2, #0
   14260:	1c02      	adds	r2, r0, #0
   14262:	430a      	orrs	r2, r1
   14264:	701a      	strb	r2, [r3, #0]
	header.bits.dup = dup;
   14266:	1dbb      	adds	r3, r7, #6
   14268:	781b      	ldrb	r3, [r3, #0]
   1426a:	2201      	movs	r2, #1
   1426c:	4013      	ands	r3, r2
   1426e:	b2da      	uxtb	r2, r3
   14270:	2318      	movs	r3, #24
   14272:	18fb      	adds	r3, r7, r3
   14274:	2101      	movs	r1, #1
   14276:	400a      	ands	r2, r1
   14278:	00d0      	lsls	r0, r2, #3
   1427a:	781a      	ldrb	r2, [r3, #0]
   1427c:	2108      	movs	r1, #8
   1427e:	438a      	bics	r2, r1
   14280:	1c11      	adds	r1, r2, #0
   14282:	1c02      	adds	r2, r0, #0
   14284:	430a      	orrs	r2, r1
   14286:	701a      	strb	r2, [r3, #0]
	header.bits.qos = (packettype == PUBREL) ? 1 : 0;
   14288:	1dfb      	adds	r3, r7, #7
   1428a:	781b      	ldrb	r3, [r3, #0]
   1428c:	3b06      	subs	r3, #6
   1428e:	425a      	negs	r2, r3
   14290:	4153      	adcs	r3, r2
   14292:	b2db      	uxtb	r3, r3
   14294:	1c1a      	adds	r2, r3, #0
   14296:	2303      	movs	r3, #3
   14298:	4013      	ands	r3, r2
   1429a:	b2da      	uxtb	r2, r3
   1429c:	2318      	movs	r3, #24
   1429e:	18fb      	adds	r3, r7, r3
   142a0:	2103      	movs	r1, #3
   142a2:	400a      	ands	r2, r1
   142a4:	1890      	adds	r0, r2, r2
   142a6:	781a      	ldrb	r2, [r3, #0]
   142a8:	2106      	movs	r1, #6
   142aa:	438a      	bics	r2, r1
   142ac:	1c11      	adds	r1, r2, #0
   142ae:	1c02      	adds	r2, r0, #0
   142b0:	430a      	orrs	r2, r1
   142b2:	701a      	strb	r2, [r3, #0]
	writeChar(&ptr, header.byte); /* write header */
   142b4:	2318      	movs	r3, #24
   142b6:	18fb      	adds	r3, r7, r3
   142b8:	781a      	ldrb	r2, [r3, #0]
   142ba:	2314      	movs	r3, #20
   142bc:	18fb      	adds	r3, r7, r3
   142be:	0011      	movs	r1, r2
   142c0:	0018      	movs	r0, r3
   142c2:	4b0f      	ldr	r3, [pc, #60]	; (14300 <MQTTSerialize_ack+0xe8>)
   142c4:	4798      	blx	r3

	ptr += MQTTPacket_encode(ptr, 2); /* write remaining length */
   142c6:	697b      	ldr	r3, [r7, #20]
   142c8:	2102      	movs	r1, #2
   142ca:	0018      	movs	r0, r3
   142cc:	4b0d      	ldr	r3, [pc, #52]	; (14304 <MQTTSerialize_ack+0xec>)
   142ce:	4798      	blx	r3
   142d0:	0002      	movs	r2, r0
   142d2:	697b      	ldr	r3, [r7, #20]
   142d4:	189b      	adds	r3, r3, r2
   142d6:	617b      	str	r3, [r7, #20]
	writeInt(&ptr, packetid);
   142d8:	2328      	movs	r3, #40	; 0x28
   142da:	18fb      	adds	r3, r7, r3
   142dc:	881a      	ldrh	r2, [r3, #0]
   142de:	2314      	movs	r3, #20
   142e0:	18fb      	adds	r3, r7, r3
   142e2:	0011      	movs	r1, r2
   142e4:	0018      	movs	r0, r3
   142e6:	4b08      	ldr	r3, [pc, #32]	; (14308 <MQTTSerialize_ack+0xf0>)
   142e8:	4798      	blx	r3
	rc = ptr - buf;
   142ea:	697b      	ldr	r3, [r7, #20]
   142ec:	001a      	movs	r2, r3
   142ee:	68fb      	ldr	r3, [r7, #12]
   142f0:	1ad3      	subs	r3, r2, r3
   142f2:	61fb      	str	r3, [r7, #28]
exit:
	FUNC_EXIT_RC(rc);
	return rc;
   142f4:	69fb      	ldr	r3, [r7, #28]
}
   142f6:	0018      	movs	r0, r3
   142f8:	46bd      	mov	sp, r7
   142fa:	b008      	add	sp, #32
   142fc:	bd80      	pop	{r7, pc}
   142fe:	46c0      	nop			; (mov r8, r8)
   14300:	00013df3 	.word	0x00013df3
   14304:	00013bd9 	.word	0x00013bd9
   14308:	00013e1d 	.word	0x00013e1d

0001430c <MQTTSerialize_subscribeLength>:
  * @param count the number of topic filter strings in topicFilters
  * @param topicFilters the array of topic filter strings to be used in the publish
  * @return the length of buffer needed to contain the serialized version of the packet
  */
int MQTTSerialize_subscribeLength(int count, MQTTString topicFilters[])
{
   1430c:	b580      	push	{r7, lr}
   1430e:	b084      	sub	sp, #16
   14310:	af00      	add	r7, sp, #0
   14312:	6078      	str	r0, [r7, #4]
   14314:	6039      	str	r1, [r7, #0]
	int i;
	int len = 2; /* packetid */
   14316:	2302      	movs	r3, #2
   14318:	60bb      	str	r3, [r7, #8]

	for (i = 0; i < count; ++i)
   1431a:	2300      	movs	r3, #0
   1431c:	60fb      	str	r3, [r7, #12]
   1431e:	e014      	b.n	1434a <MQTTSerialize_subscribeLength+0x3e>
		len += 2 + MQTTstrlen(topicFilters[i]) + 1; /* length + topic + req_qos */
   14320:	68fa      	ldr	r2, [r7, #12]
   14322:	0013      	movs	r3, r2
   14324:	005b      	lsls	r3, r3, #1
   14326:	189b      	adds	r3, r3, r2
   14328:	009b      	lsls	r3, r3, #2
   1432a:	001a      	movs	r2, r3
   1432c:	683b      	ldr	r3, [r7, #0]
   1432e:	189b      	adds	r3, r3, r2
   14330:	6818      	ldr	r0, [r3, #0]
   14332:	6859      	ldr	r1, [r3, #4]
   14334:	689a      	ldr	r2, [r3, #8]
   14336:	4b09      	ldr	r3, [pc, #36]	; (1435c <MQTTSerialize_subscribeLength+0x50>)
   14338:	4798      	blx	r3
   1433a:	0003      	movs	r3, r0
   1433c:	3303      	adds	r3, #3
   1433e:	68ba      	ldr	r2, [r7, #8]
   14340:	18d3      	adds	r3, r2, r3
   14342:	60bb      	str	r3, [r7, #8]
	for (i = 0; i < count; ++i)
   14344:	68fb      	ldr	r3, [r7, #12]
   14346:	3301      	adds	r3, #1
   14348:	60fb      	str	r3, [r7, #12]
   1434a:	68fa      	ldr	r2, [r7, #12]
   1434c:	687b      	ldr	r3, [r7, #4]
   1434e:	429a      	cmp	r2, r3
   14350:	dbe6      	blt.n	14320 <MQTTSerialize_subscribeLength+0x14>
	return len;
   14352:	68bb      	ldr	r3, [r7, #8]
}
   14354:	0018      	movs	r0, r3
   14356:	46bd      	mov	sp, r7
   14358:	b004      	add	sp, #16
   1435a:	bd80      	pop	{r7, pc}
   1435c:	00013fad 	.word	0x00013fad

00014360 <MQTTSerialize_subscribe>:
  * @param requestedQoSs - array of requested QoS
  * @return the length of the serialized data.  <= 0 indicates error
  */
int MQTTSerialize_subscribe(unsigned char* buf, int buflen, unsigned char dup, unsigned short packetid, int count,
		MQTTString topicFilters[], int requestedQoSs[])
{
   14360:	b590      	push	{r4, r7, lr}
   14362:	b08b      	sub	sp, #44	; 0x2c
   14364:	af00      	add	r7, sp, #0
   14366:	60f8      	str	r0, [r7, #12]
   14368:	60b9      	str	r1, [r7, #8]
   1436a:	0019      	movs	r1, r3
   1436c:	1dfb      	adds	r3, r7, #7
   1436e:	701a      	strb	r2, [r3, #0]
   14370:	1d3b      	adds	r3, r7, #4
   14372:	1c0a      	adds	r2, r1, #0
   14374:	801a      	strh	r2, [r3, #0]
	unsigned char *ptr = buf;
   14376:	68fb      	ldr	r3, [r7, #12]
   14378:	61bb      	str	r3, [r7, #24]
	MQTTHeader header = {0};
   1437a:	2300      	movs	r3, #0
   1437c:	617b      	str	r3, [r7, #20]
	int rem_len = 0;
   1437e:	2300      	movs	r3, #0
   14380:	61fb      	str	r3, [r7, #28]
	int rc = 0;
   14382:	2300      	movs	r3, #0
   14384:	627b      	str	r3, [r7, #36]	; 0x24
	int i = 0;
   14386:	2300      	movs	r3, #0
   14388:	623b      	str	r3, [r7, #32]

	FUNC_ENTRY;
	if (MQTTPacket_len(rem_len = MQTTSerialize_subscribeLength(count, topicFilters)) > buflen)
   1438a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   1438c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1438e:	0011      	movs	r1, r2
   14390:	0018      	movs	r0, r3
   14392:	4b41      	ldr	r3, [pc, #260]	; (14498 <MQTTSerialize_subscribe+0x138>)
   14394:	4798      	blx	r3
   14396:	0003      	movs	r3, r0
   14398:	61fb      	str	r3, [r7, #28]
   1439a:	69fb      	ldr	r3, [r7, #28]
   1439c:	0018      	movs	r0, r3
   1439e:	4b3f      	ldr	r3, [pc, #252]	; (1449c <MQTTSerialize_subscribe+0x13c>)
   143a0:	4798      	blx	r3
   143a2:	0002      	movs	r2, r0
   143a4:	68bb      	ldr	r3, [r7, #8]
   143a6:	429a      	cmp	r2, r3
   143a8:	dd03      	ble.n	143b2 <MQTTSerialize_subscribe+0x52>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
   143aa:	2302      	movs	r3, #2
   143ac:	425b      	negs	r3, r3
   143ae:	627b      	str	r3, [r7, #36]	; 0x24
		goto exit;
   143b0:	e06c      	b.n	1448c <MQTTSerialize_subscribe+0x12c>
	}

	header.byte = 0;
   143b2:	2314      	movs	r3, #20
   143b4:	18fb      	adds	r3, r7, r3
   143b6:	2200      	movs	r2, #0
   143b8:	701a      	strb	r2, [r3, #0]
	header.bits.type = SUBSCRIBE;
   143ba:	2314      	movs	r3, #20
   143bc:	18fb      	adds	r3, r7, r3
   143be:	781a      	ldrb	r2, [r3, #0]
   143c0:	210f      	movs	r1, #15
   143c2:	400a      	ands	r2, r1
   143c4:	1c11      	adds	r1, r2, #0
   143c6:	2280      	movs	r2, #128	; 0x80
   143c8:	4252      	negs	r2, r2
   143ca:	430a      	orrs	r2, r1
   143cc:	701a      	strb	r2, [r3, #0]
	header.bits.dup = dup;
   143ce:	1dfb      	adds	r3, r7, #7
   143d0:	781b      	ldrb	r3, [r3, #0]
   143d2:	2201      	movs	r2, #1
   143d4:	4013      	ands	r3, r2
   143d6:	b2da      	uxtb	r2, r3
   143d8:	2314      	movs	r3, #20
   143da:	18fb      	adds	r3, r7, r3
   143dc:	2101      	movs	r1, #1
   143de:	400a      	ands	r2, r1
   143e0:	00d0      	lsls	r0, r2, #3
   143e2:	781a      	ldrb	r2, [r3, #0]
   143e4:	2108      	movs	r1, #8
   143e6:	438a      	bics	r2, r1
   143e8:	1c11      	adds	r1, r2, #0
   143ea:	1c02      	adds	r2, r0, #0
   143ec:	430a      	orrs	r2, r1
   143ee:	701a      	strb	r2, [r3, #0]
	header.bits.qos = 1;
   143f0:	2314      	movs	r3, #20
   143f2:	18fb      	adds	r3, r7, r3
   143f4:	781a      	ldrb	r2, [r3, #0]
   143f6:	2106      	movs	r1, #6
   143f8:	438a      	bics	r2, r1
   143fa:	1c11      	adds	r1, r2, #0
   143fc:	2202      	movs	r2, #2
   143fe:	430a      	orrs	r2, r1
   14400:	701a      	strb	r2, [r3, #0]
	writeChar(&ptr, header.byte); /* write header */
   14402:	2314      	movs	r3, #20
   14404:	18fb      	adds	r3, r7, r3
   14406:	781a      	ldrb	r2, [r3, #0]
   14408:	2318      	movs	r3, #24
   1440a:	18fb      	adds	r3, r7, r3
   1440c:	0011      	movs	r1, r2
   1440e:	0018      	movs	r0, r3
   14410:	4b23      	ldr	r3, [pc, #140]	; (144a0 <MQTTSerialize_subscribe+0x140>)
   14412:	4798      	blx	r3

	ptr += MQTTPacket_encode(ptr, rem_len); /* write remaining length */;
   14414:	69bb      	ldr	r3, [r7, #24]
   14416:	69fa      	ldr	r2, [r7, #28]
   14418:	0011      	movs	r1, r2
   1441a:	0018      	movs	r0, r3
   1441c:	4b21      	ldr	r3, [pc, #132]	; (144a4 <MQTTSerialize_subscribe+0x144>)
   1441e:	4798      	blx	r3
   14420:	0002      	movs	r2, r0
   14422:	69bb      	ldr	r3, [r7, #24]
   14424:	189b      	adds	r3, r3, r2
   14426:	61bb      	str	r3, [r7, #24]

	writeInt(&ptr, packetid);
   14428:	1d3b      	adds	r3, r7, #4
   1442a:	881a      	ldrh	r2, [r3, #0]
   1442c:	2318      	movs	r3, #24
   1442e:	18fb      	adds	r3, r7, r3
   14430:	0011      	movs	r1, r2
   14432:	0018      	movs	r0, r3
   14434:	4b1c      	ldr	r3, [pc, #112]	; (144a8 <MQTTSerialize_subscribe+0x148>)
   14436:	4798      	blx	r3

	for (i = 0; i < count; ++i)
   14438:	2300      	movs	r3, #0
   1443a:	623b      	str	r3, [r7, #32]
   1443c:	e01d      	b.n	1447a <MQTTSerialize_subscribe+0x11a>
	{
		writeMQTTString(&ptr, topicFilters[i]);
   1443e:	6a3a      	ldr	r2, [r7, #32]
   14440:	0013      	movs	r3, r2
   14442:	005b      	lsls	r3, r3, #1
   14444:	189b      	adds	r3, r3, r2
   14446:	009b      	lsls	r3, r3, #2
   14448:	001a      	movs	r2, r3
   1444a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1444c:	189b      	adds	r3, r3, r2
   1444e:	2218      	movs	r2, #24
   14450:	18b8      	adds	r0, r7, r2
   14452:	6819      	ldr	r1, [r3, #0]
   14454:	685a      	ldr	r2, [r3, #4]
   14456:	689b      	ldr	r3, [r3, #8]
   14458:	4c14      	ldr	r4, [pc, #80]	; (144ac <MQTTSerialize_subscribe+0x14c>)
   1445a:	47a0      	blx	r4
		writeChar(&ptr, requestedQoSs[i]);
   1445c:	6a3b      	ldr	r3, [r7, #32]
   1445e:	009b      	lsls	r3, r3, #2
   14460:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   14462:	18d3      	adds	r3, r2, r3
   14464:	681b      	ldr	r3, [r3, #0]
   14466:	b2da      	uxtb	r2, r3
   14468:	2318      	movs	r3, #24
   1446a:	18fb      	adds	r3, r7, r3
   1446c:	0011      	movs	r1, r2
   1446e:	0018      	movs	r0, r3
   14470:	4b0b      	ldr	r3, [pc, #44]	; (144a0 <MQTTSerialize_subscribe+0x140>)
   14472:	4798      	blx	r3
	for (i = 0; i < count; ++i)
   14474:	6a3b      	ldr	r3, [r7, #32]
   14476:	3301      	adds	r3, #1
   14478:	623b      	str	r3, [r7, #32]
   1447a:	6a3a      	ldr	r2, [r7, #32]
   1447c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1447e:	429a      	cmp	r2, r3
   14480:	dbdd      	blt.n	1443e <MQTTSerialize_subscribe+0xde>
	}

	rc = ptr - buf;
   14482:	69bb      	ldr	r3, [r7, #24]
   14484:	001a      	movs	r2, r3
   14486:	68fb      	ldr	r3, [r7, #12]
   14488:	1ad3      	subs	r3, r2, r3
   1448a:	627b      	str	r3, [r7, #36]	; 0x24
exit:
	FUNC_EXIT_RC(rc);
	return rc;
   1448c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
   1448e:	0018      	movs	r0, r3
   14490:	46bd      	mov	sp, r7
   14492:	b00b      	add	sp, #44	; 0x2c
   14494:	bd90      	pop	{r4, r7, pc}
   14496:	46c0      	nop			; (mov r8, r8)
   14498:	0001430d 	.word	0x0001430d
   1449c:	00013cd1 	.word	0x00013cd1
   144a0:	00013df3 	.word	0x00013df3
   144a4:	00013bd9 	.word	0x00013bd9
   144a8:	00013e1d 	.word	0x00013e1d
   144ac:	00013ec5 	.word	0x00013ec5

000144b0 <MQTTDeserialize_suback>:
  * @param buf the raw buffer data, of the correct length determined by the remaining length field
  * @param buflen the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success, 0 is failure
  */
int MQTTDeserialize_suback(unsigned short* packetid, int maxcount, int* count, int grantedQoSs[], unsigned char* buf, int buflen)
{
   144b0:	b590      	push	{r4, r7, lr}
   144b2:	b08b      	sub	sp, #44	; 0x2c
   144b4:	af00      	add	r7, sp, #0
   144b6:	60f8      	str	r0, [r7, #12]
   144b8:	60b9      	str	r1, [r7, #8]
   144ba:	607a      	str	r2, [r7, #4]
   144bc:	603b      	str	r3, [r7, #0]
	MQTTHeader header = {0};
   144be:	2300      	movs	r3, #0
   144c0:	61fb      	str	r3, [r7, #28]
	unsigned char* curdata = buf;
   144c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   144c4:	61bb      	str	r3, [r7, #24]
	unsigned char* enddata = NULL;
   144c6:	2300      	movs	r3, #0
   144c8:	623b      	str	r3, [r7, #32]
	int rc = 0;
   144ca:	2300      	movs	r3, #0
   144cc:	627b      	str	r3, [r7, #36]	; 0x24
	int mylen;

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
   144ce:	2318      	movs	r3, #24
   144d0:	18fb      	adds	r3, r7, r3
   144d2:	0018      	movs	r0, r3
   144d4:	4b2c      	ldr	r3, [pc, #176]	; (14588 <MQTTDeserialize_suback+0xd8>)
   144d6:	4798      	blx	r3
   144d8:	0003      	movs	r3, r0
   144da:	001a      	movs	r2, r3
   144dc:	231c      	movs	r3, #28
   144de:	18fb      	adds	r3, r7, r3
   144e0:	701a      	strb	r2, [r3, #0]
	if (header.bits.type != SUBACK)
   144e2:	231c      	movs	r3, #28
   144e4:	18fb      	adds	r3, r7, r3
   144e6:	781b      	ldrb	r3, [r3, #0]
   144e8:	220f      	movs	r2, #15
   144ea:	4393      	bics	r3, r2
   144ec:	b2db      	uxtb	r3, r3
   144ee:	2b90      	cmp	r3, #144	; 0x90
   144f0:	d142      	bne.n	14578 <MQTTDeserialize_suback+0xc8>
		goto exit;

	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
   144f2:	69bb      	ldr	r3, [r7, #24]
   144f4:	2214      	movs	r2, #20
   144f6:	18ba      	adds	r2, r7, r2
   144f8:	0011      	movs	r1, r2
   144fa:	0018      	movs	r0, r3
   144fc:	4b23      	ldr	r3, [pc, #140]	; (1458c <MQTTDeserialize_suback+0xdc>)
   144fe:	4798      	blx	r3
   14500:	0003      	movs	r3, r0
   14502:	627b      	str	r3, [r7, #36]	; 0x24
   14504:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   14506:	69bb      	ldr	r3, [r7, #24]
   14508:	189b      	adds	r3, r3, r2
   1450a:	61bb      	str	r3, [r7, #24]
	enddata = curdata + mylen;
   1450c:	69bb      	ldr	r3, [r7, #24]
   1450e:	697a      	ldr	r2, [r7, #20]
   14510:	189b      	adds	r3, r3, r2
   14512:	623b      	str	r3, [r7, #32]
	if (enddata - curdata < 2)
   14514:	6a3b      	ldr	r3, [r7, #32]
   14516:	69ba      	ldr	r2, [r7, #24]
   14518:	1a9b      	subs	r3, r3, r2
   1451a:	2b01      	cmp	r3, #1
   1451c:	dd2e      	ble.n	1457c <MQTTDeserialize_suback+0xcc>
		goto exit;

	*packetid = readInt(&curdata);
   1451e:	2318      	movs	r3, #24
   14520:	18fb      	adds	r3, r7, r3
   14522:	0018      	movs	r0, r3
   14524:	4b1a      	ldr	r3, [pc, #104]	; (14590 <MQTTDeserialize_suback+0xe0>)
   14526:	4798      	blx	r3
   14528:	0003      	movs	r3, r0
   1452a:	b29a      	uxth	r2, r3
   1452c:	68fb      	ldr	r3, [r7, #12]
   1452e:	801a      	strh	r2, [r3, #0]

	*count = 0;
   14530:	687b      	ldr	r3, [r7, #4]
   14532:	2200      	movs	r2, #0
   14534:	601a      	str	r2, [r3, #0]
	while (curdata < enddata)
   14536:	e018      	b.n	1456a <MQTTDeserialize_suback+0xba>
	{
		if (*count > maxcount)
   14538:	687b      	ldr	r3, [r7, #4]
   1453a:	681a      	ldr	r2, [r3, #0]
   1453c:	68bb      	ldr	r3, [r7, #8]
   1453e:	429a      	cmp	r2, r3
   14540:	dd03      	ble.n	1454a <MQTTDeserialize_suback+0x9a>
		{
			rc = -1;
   14542:	2301      	movs	r3, #1
   14544:	425b      	negs	r3, r3
   14546:	627b      	str	r3, [r7, #36]	; 0x24
			goto exit;
   14548:	e019      	b.n	1457e <MQTTDeserialize_suback+0xce>
		}
		grantedQoSs[(*count)++] = readChar(&curdata);
   1454a:	687b      	ldr	r3, [r7, #4]
   1454c:	681a      	ldr	r2, [r3, #0]
   1454e:	1c51      	adds	r1, r2, #1
   14550:	687b      	ldr	r3, [r7, #4]
   14552:	6019      	str	r1, [r3, #0]
   14554:	0013      	movs	r3, r2
   14556:	009b      	lsls	r3, r3, #2
   14558:	683a      	ldr	r2, [r7, #0]
   1455a:	18d4      	adds	r4, r2, r3
   1455c:	2318      	movs	r3, #24
   1455e:	18fb      	adds	r3, r7, r3
   14560:	0018      	movs	r0, r3
   14562:	4b09      	ldr	r3, [pc, #36]	; (14588 <MQTTDeserialize_suback+0xd8>)
   14564:	4798      	blx	r3
   14566:	0003      	movs	r3, r0
   14568:	6023      	str	r3, [r4, #0]
	while (curdata < enddata)
   1456a:	69ba      	ldr	r2, [r7, #24]
   1456c:	6a3b      	ldr	r3, [r7, #32]
   1456e:	429a      	cmp	r2, r3
   14570:	d3e2      	bcc.n	14538 <MQTTDeserialize_suback+0x88>
	}

	rc = 1;
   14572:	2301      	movs	r3, #1
   14574:	627b      	str	r3, [r7, #36]	; 0x24
   14576:	e002      	b.n	1457e <MQTTDeserialize_suback+0xce>
		goto exit;
   14578:	46c0      	nop			; (mov r8, r8)
   1457a:	e000      	b.n	1457e <MQTTDeserialize_suback+0xce>
		goto exit;
   1457c:	46c0      	nop			; (mov r8, r8)
exit:
	FUNC_EXIT_RC(rc);
	return rc;
   1457e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
   14580:	0018      	movs	r0, r3
   14582:	46bd      	mov	sp, r7
   14584:	b00b      	add	sp, #44	; 0x2c
   14586:	bd90      	pop	{r4, r7, pc}
   14588:	00013dc7 	.word	0x00013dc7
   1458c:	00013d61 	.word	0x00013d61
   14590:	00013d95 	.word	0x00013d95

00014594 <mqtt_packet_read>:
 * \param timeout_ms[in]            The timeout
 *
 * \return    The MQTT status
 */
int mqtt_packet_read(Network *network, unsigned char *read_buffer, int length, int timeout_ms)
{
   14594:	b580      	push	{r7, lr}
   14596:	b084      	sub	sp, #16
   14598:	af00      	add	r7, sp, #0
   1459a:	60f8      	str	r0, [r7, #12]
   1459c:	60b9      	str	r1, [r7, #8]
   1459e:	607a      	str	r2, [r7, #4]
   145a0:	603b      	str	r3, [r7, #0]
    return wifi_read_data(read_buffer, length, timeout_ms);
   145a2:	6879      	ldr	r1, [r7, #4]
   145a4:	683a      	ldr	r2, [r7, #0]
   145a6:	68bb      	ldr	r3, [r7, #8]
   145a8:	0018      	movs	r0, r3
   145aa:	4b03      	ldr	r3, [pc, #12]	; (145b8 <mqtt_packet_read+0x24>)
   145ac:	4798      	blx	r3
   145ae:	0003      	movs	r3, r0
}
   145b0:	0018      	movs	r0, r3
   145b2:	46bd      	mov	sp, r7
   145b4:	b004      	add	sp, #16
   145b6:	bd80      	pop	{r7, pc}
   145b8:	000172bd 	.word	0x000172bd

000145bc <mqtt_packet_write>:
 * \param timeout_ms[in]            The timeout
 *
 * \return    The MQTT status
 */
int mqtt_packet_write(Network *network, unsigned char *send_buffer, int length, int timeout_ms)
{
   145bc:	b580      	push	{r7, lr}
   145be:	b084      	sub	sp, #16
   145c0:	af00      	add	r7, sp, #0
   145c2:	60f8      	str	r0, [r7, #12]
   145c4:	60b9      	str	r1, [r7, #8]
   145c6:	607a      	str	r2, [r7, #4]
   145c8:	603b      	str	r3, [r7, #0]
    return wifi_send_data(send_buffer, length, timeout_ms);
   145ca:	6879      	ldr	r1, [r7, #4]
   145cc:	683a      	ldr	r2, [r7, #0]
   145ce:	68bb      	ldr	r3, [r7, #8]
   145d0:	0018      	movs	r0, r3
   145d2:	4b03      	ldr	r3, [pc, #12]	; (145e0 <mqtt_packet_write+0x24>)
   145d4:	4798      	blx	r3
   145d6:	0003      	movs	r3, r0
}
   145d8:	0018      	movs	r0, r3
   145da:	46bd      	mov	sp, r7
   145dc:	b004      	add	sp, #16
   145de:	bd80      	pop	{r7, pc}
   145e0:	000173f1 	.word	0x000173f1

000145e4 <TimerCallback>:
/* Globals */
static uint32_t g_timer_val;

/** \brief Update the timer */
void TimerCallback(void)
{
   145e4:	b580      	push	{r7, lr}
   145e6:	af00      	add	r7, sp, #0
    g_timer_val += TIMER_UPDATE_PERIOD;
   145e8:	4b04      	ldr	r3, [pc, #16]	; (145fc <TimerCallback+0x18>)
   145ea:	681b      	ldr	r3, [r3, #0]
   145ec:	3364      	adds	r3, #100	; 0x64
   145ee:	001a      	movs	r2, r3
   145f0:	4b02      	ldr	r3, [pc, #8]	; (145fc <TimerCallback+0x18>)
   145f2:	601a      	str	r2, [r3, #0]
}
   145f4:	46c0      	nop			; (mov r8, r8)
   145f6:	46bd      	mov	sp, r7
   145f8:	bd80      	pop	{r7, pc}
   145fa:	46c0      	nop			; (mov r8, r8)
   145fc:	200005d0 	.word	0x200005d0

00014600 <get_time_of_day>:
 * \return  Whether the function was successful
 *            0  - The function was successful
 *            -1 - The function was not successful
 */
static int get_time_of_day(struct timeval *time)
{
   14600:	b580      	push	{r7, lr}
   14602:	b082      	sub	sp, #8
   14604:	af00      	add	r7, sp, #0
   14606:	6078      	str	r0, [r7, #4]
	if (time == NULL)
   14608:	687b      	ldr	r3, [r7, #4]
   1460a:	2b00      	cmp	r3, #0
   1460c:	d102      	bne.n	14614 <get_time_of_day+0x14>
    {
        return -1;
   1460e:	2301      	movs	r3, #1
   14610:	425b      	negs	r3, r3
   14612:	e018      	b.n	14646 <get_time_of_day+0x46>
    }
        
	time->tv_sec =  (g_timer_val / 1000);
   14614:	4b0e      	ldr	r3, [pc, #56]	; (14650 <get_time_of_day+0x50>)
   14616:	6818      	ldr	r0, [r3, #0]
   14618:	4b0e      	ldr	r3, [pc, #56]	; (14654 <get_time_of_day+0x54>)
   1461a:	22fa      	movs	r2, #250	; 0xfa
   1461c:	0091      	lsls	r1, r2, #2
   1461e:	4798      	blx	r3
   14620:	0003      	movs	r3, r0
   14622:	001a      	movs	r2, r3
   14624:	687b      	ldr	r3, [r7, #4]
   14626:	601a      	str	r2, [r3, #0]
	time->tv_usec = ((g_timer_val % 1000) * 1000);
   14628:	4b09      	ldr	r3, [pc, #36]	; (14650 <get_time_of_day+0x50>)
   1462a:	6818      	ldr	r0, [r3, #0]
   1462c:	4b0a      	ldr	r3, [pc, #40]	; (14658 <get_time_of_day+0x58>)
   1462e:	22fa      	movs	r2, #250	; 0xfa
   14630:	0091      	lsls	r1, r2, #2
   14632:	4798      	blx	r3
   14634:	000b      	movs	r3, r1
   14636:	001a      	movs	r2, r3
   14638:	23fa      	movs	r3, #250	; 0xfa
   1463a:	009b      	lsls	r3, r3, #2
   1463c:	4353      	muls	r3, r2
   1463e:	001a      	movs	r2, r3
   14640:	687b      	ldr	r3, [r7, #4]
   14642:	605a      	str	r2, [r3, #4]

	return 0;
   14644:	2300      	movs	r3, #0
}
   14646:	0018      	movs	r0, r3
   14648:	46bd      	mov	sp, r7
   1464a:	b002      	add	sp, #8
   1464c:	bd80      	pop	{r7, pc}
   1464e:	46c0      	nop			; (mov r8, r8)
   14650:	200005d0 	.word	0x200005d0
   14654:	00019cd9 	.word	0x00019cd9
   14658:	00019de5 	.word	0x00019de5

0001465c <TimerInit>:
 * \brief Initialize a timer
 *
 * \param[out] timer       The timer to be initialized
 */
void TimerInit(Timer *timer)
{
   1465c:	b580      	push	{r7, lr}
   1465e:	b082      	sub	sp, #8
   14660:	af00      	add	r7, sp, #0
   14662:	6078      	str	r0, [r7, #4]
    if (timer == NULL)
   14664:	687b      	ldr	r3, [r7, #4]
   14666:	2b00      	cmp	r3, #0
   14668:	d006      	beq.n	14678 <TimerInit+0x1c>
    {
        return;
    }
    
	timer->end_time.tv_sec  = 0;
   1466a:	687b      	ldr	r3, [r7, #4]
   1466c:	2200      	movs	r2, #0
   1466e:	601a      	str	r2, [r3, #0]
	timer->end_time.tv_usec = 0;
   14670:	687b      	ldr	r3, [r7, #4]
   14672:	2200      	movs	r2, #0
   14674:	605a      	str	r2, [r3, #4]
   14676:	e000      	b.n	1467a <TimerInit+0x1e>
        return;
   14678:	46c0      	nop			; (mov r8, r8)
}
   1467a:	46bd      	mov	sp, r7
   1467c:	b002      	add	sp, #8
   1467e:	bd80      	pop	{r7, pc}

00014680 <TimerIsExpired>:
 * \return  Whether the timer has expired
 *            True  - The timer has expired
 *            False - The timer has not expired
 */
char TimerIsExpired(Timer *timer)
{
   14680:	b580      	push	{r7, lr}
   14682:	b086      	sub	sp, #24
   14684:	af00      	add	r7, sp, #0
   14686:	6078      	str	r0, [r7, #4]
	struct timeval time_now;
	struct timeval time_result;

    if (timer == NULL)
   14688:	687b      	ldr	r3, [r7, #4]
   1468a:	2b00      	cmp	r3, #0
   1468c:	d101      	bne.n	14692 <TimerIsExpired+0x12>
    {
        return true;
   1468e:	2301      	movs	r3, #1
   14690:	e03d      	b.n	1470e <TimerIsExpired+0x8e>
    }

	get_time_of_day(&time_now);
   14692:	2310      	movs	r3, #16
   14694:	18fb      	adds	r3, r7, r3
   14696:	0018      	movs	r0, r3
   14698:	4b1f      	ldr	r3, [pc, #124]	; (14718 <TimerIsExpired+0x98>)
   1469a:	4798      	blx	r3
    
	timer_subtract(&timer->end_time, &time_now, &time_result);
   1469c:	687b      	ldr	r3, [r7, #4]
   1469e:	681a      	ldr	r2, [r3, #0]
   146a0:	2310      	movs	r3, #16
   146a2:	18fb      	adds	r3, r7, r3
   146a4:	681b      	ldr	r3, [r3, #0]
   146a6:	1ad2      	subs	r2, r2, r3
   146a8:	2308      	movs	r3, #8
   146aa:	18fb      	adds	r3, r7, r3
   146ac:	601a      	str	r2, [r3, #0]
   146ae:	687b      	ldr	r3, [r7, #4]
   146b0:	685a      	ldr	r2, [r3, #4]
   146b2:	2310      	movs	r3, #16
   146b4:	18fb      	adds	r3, r7, r3
   146b6:	685b      	ldr	r3, [r3, #4]
   146b8:	1ad2      	subs	r2, r2, r3
   146ba:	2308      	movs	r3, #8
   146bc:	18fb      	adds	r3, r7, r3
   146be:	605a      	str	r2, [r3, #4]
   146c0:	2308      	movs	r3, #8
   146c2:	18fb      	adds	r3, r7, r3
   146c4:	685b      	ldr	r3, [r3, #4]
   146c6:	2b00      	cmp	r3, #0
   146c8:	da0e      	bge.n	146e8 <TimerIsExpired+0x68>
   146ca:	2308      	movs	r3, #8
   146cc:	18fb      	adds	r3, r7, r3
   146ce:	681b      	ldr	r3, [r3, #0]
   146d0:	1e5a      	subs	r2, r3, #1
   146d2:	2308      	movs	r3, #8
   146d4:	18fb      	adds	r3, r7, r3
   146d6:	601a      	str	r2, [r3, #0]
   146d8:	2308      	movs	r3, #8
   146da:	18fb      	adds	r3, r7, r3
   146dc:	685b      	ldr	r3, [r3, #4]
   146de:	4a0f      	ldr	r2, [pc, #60]	; (1471c <TimerIsExpired+0x9c>)
   146e0:	189a      	adds	r2, r3, r2
   146e2:	2308      	movs	r3, #8
   146e4:	18fb      	adds	r3, r7, r3
   146e6:	605a      	str	r2, [r3, #4]

	return (time_result.tv_sec < 0 || (time_result.tv_sec == 0 && time_result.tv_usec <= 0));
   146e8:	2308      	movs	r3, #8
   146ea:	18fb      	adds	r3, r7, r3
   146ec:	681b      	ldr	r3, [r3, #0]
   146ee:	2b00      	cmp	r3, #0
   146f0:	db09      	blt.n	14706 <TimerIsExpired+0x86>
   146f2:	2308      	movs	r3, #8
   146f4:	18fb      	adds	r3, r7, r3
   146f6:	681b      	ldr	r3, [r3, #0]
   146f8:	2b00      	cmp	r3, #0
   146fa:	d106      	bne.n	1470a <TimerIsExpired+0x8a>
   146fc:	2308      	movs	r3, #8
   146fe:	18fb      	adds	r3, r7, r3
   14700:	685b      	ldr	r3, [r3, #4]
   14702:	2b00      	cmp	r3, #0
   14704:	dc01      	bgt.n	1470a <TimerIsExpired+0x8a>
   14706:	2301      	movs	r3, #1
   14708:	e000      	b.n	1470c <TimerIsExpired+0x8c>
   1470a:	2300      	movs	r3, #0
   1470c:	b2db      	uxtb	r3, r3
}
   1470e:	0018      	movs	r0, r3
   14710:	46bd      	mov	sp, r7
   14712:	b006      	add	sp, #24
   14714:	bd80      	pop	{r7, pc}
   14716:	46c0      	nop			; (mov r8, r8)
   14718:	00014601 	.word	0x00014601
   1471c:	000f4240 	.word	0x000f4240

00014720 <TimerCountdownMS>:
 * \param[out] timer       The timer set to expire in the specified number of
 *                         milliseconds
 * \param[in] timeout_ms   The timer expiration (in milliseconds)
 */
void TimerCountdownMS(Timer *timer, unsigned int timeout_ms)
{
   14720:	b580      	push	{r7, lr}
   14722:	b086      	sub	sp, #24
   14724:	af00      	add	r7, sp, #0
   14726:	6078      	str	r0, [r7, #4]
   14728:	6039      	str	r1, [r7, #0]
	struct timeval time_now;
    struct timeval time_interval = {timeout_ms / 1000, (int)((timeout_ms % 1000) * 1000)};
   1472a:	6838      	ldr	r0, [r7, #0]
   1472c:	4b22      	ldr	r3, [pc, #136]	; (147b8 <TimerCountdownMS+0x98>)
   1472e:	22fa      	movs	r2, #250	; 0xfa
   14730:	0091      	lsls	r1, r2, #2
   14732:	4798      	blx	r3
   14734:	0003      	movs	r3, r0
   14736:	001a      	movs	r2, r3
   14738:	2308      	movs	r3, #8
   1473a:	18fb      	adds	r3, r7, r3
   1473c:	601a      	str	r2, [r3, #0]
   1473e:	6838      	ldr	r0, [r7, #0]
   14740:	4b1e      	ldr	r3, [pc, #120]	; (147bc <TimerCountdownMS+0x9c>)
   14742:	22fa      	movs	r2, #250	; 0xfa
   14744:	0091      	lsls	r1, r2, #2
   14746:	4798      	blx	r3
   14748:	000b      	movs	r3, r1
   1474a:	001a      	movs	r2, r3
   1474c:	23fa      	movs	r3, #250	; 0xfa
   1474e:	009b      	lsls	r3, r3, #2
   14750:	4353      	muls	r3, r2
   14752:	001a      	movs	r2, r3
   14754:	2308      	movs	r3, #8
   14756:	18fb      	adds	r3, r7, r3
   14758:	605a      	str	r2, [r3, #4]

    if (timer == NULL)
   1475a:	687b      	ldr	r3, [r7, #4]
   1475c:	2b00      	cmp	r3, #0
   1475e:	d027      	beq.n	147b0 <TimerCountdownMS+0x90>
    {
        return;
    }

	get_time_of_day(&time_now);
   14760:	2310      	movs	r3, #16
   14762:	18fb      	adds	r3, r7, r3
   14764:	0018      	movs	r0, r3
   14766:	4b16      	ldr	r3, [pc, #88]	; (147c0 <TimerCountdownMS+0xa0>)
   14768:	4798      	blx	r3
    
	timer_add(&time_now, &time_interval, &timer->end_time);
   1476a:	2310      	movs	r3, #16
   1476c:	18fb      	adds	r3, r7, r3
   1476e:	681a      	ldr	r2, [r3, #0]
   14770:	2308      	movs	r3, #8
   14772:	18fb      	adds	r3, r7, r3
   14774:	681b      	ldr	r3, [r3, #0]
   14776:	18d2      	adds	r2, r2, r3
   14778:	687b      	ldr	r3, [r7, #4]
   1477a:	601a      	str	r2, [r3, #0]
   1477c:	2310      	movs	r3, #16
   1477e:	18fb      	adds	r3, r7, r3
   14780:	685a      	ldr	r2, [r3, #4]
   14782:	2308      	movs	r3, #8
   14784:	18fb      	adds	r3, r7, r3
   14786:	685b      	ldr	r3, [r3, #4]
   14788:	18d2      	adds	r2, r2, r3
   1478a:	687b      	ldr	r3, [r7, #4]
   1478c:	605a      	str	r2, [r3, #4]
   1478e:	687b      	ldr	r3, [r7, #4]
   14790:	685b      	ldr	r3, [r3, #4]
   14792:	4a0c      	ldr	r2, [pc, #48]	; (147c4 <TimerCountdownMS+0xa4>)
   14794:	4293      	cmp	r3, r2
   14796:	dd0c      	ble.n	147b2 <TimerCountdownMS+0x92>
   14798:	687b      	ldr	r3, [r7, #4]
   1479a:	681b      	ldr	r3, [r3, #0]
   1479c:	1c5a      	adds	r2, r3, #1
   1479e:	687b      	ldr	r3, [r7, #4]
   147a0:	601a      	str	r2, [r3, #0]
   147a2:	687b      	ldr	r3, [r7, #4]
   147a4:	685b      	ldr	r3, [r3, #4]
   147a6:	4a08      	ldr	r2, [pc, #32]	; (147c8 <TimerCountdownMS+0xa8>)
   147a8:	189a      	adds	r2, r3, r2
   147aa:	687b      	ldr	r3, [r7, #4]
   147ac:	605a      	str	r2, [r3, #4]
   147ae:	e000      	b.n	147b2 <TimerCountdownMS+0x92>
        return;
   147b0:	46c0      	nop			; (mov r8, r8)
}
   147b2:	46bd      	mov	sp, r7
   147b4:	b006      	add	sp, #24
   147b6:	bd80      	pop	{r7, pc}
   147b8:	00019cd9 	.word	0x00019cd9
   147bc:	00019de5 	.word	0x00019de5
   147c0:	00014601 	.word	0x00014601
   147c4:	000f423f 	.word	0x000f423f
   147c8:	fff0bdc0 	.word	0xfff0bdc0

000147cc <TimerCountdown>:
 * \param[out] timer       The timer set to expire in the specified number of
 *                         seconds
 * \param[in] timeout_ms   The timer expiration (in seconds)
 */
void TimerCountdown(Timer *timer, unsigned int timeout)
{
   147cc:	b580      	push	{r7, lr}
   147ce:	b086      	sub	sp, #24
   147d0:	af00      	add	r7, sp, #0
   147d2:	6078      	str	r0, [r7, #4]
   147d4:	6039      	str	r1, [r7, #0]
	struct timeval time_now;
	struct timeval time_interval = {timeout, 0};
   147d6:	683a      	ldr	r2, [r7, #0]
   147d8:	2308      	movs	r3, #8
   147da:	18fb      	adds	r3, r7, r3
   147dc:	601a      	str	r2, [r3, #0]
   147de:	2308      	movs	r3, #8
   147e0:	18fb      	adds	r3, r7, r3
   147e2:	2200      	movs	r2, #0
   147e4:	605a      	str	r2, [r3, #4]

    if (timer == NULL)
   147e6:	687b      	ldr	r3, [r7, #4]
   147e8:	2b00      	cmp	r3, #0
   147ea:	d027      	beq.n	1483c <TimerCountdown+0x70>
    {
        return;
    }

	get_time_of_day(&time_now);
   147ec:	2310      	movs	r3, #16
   147ee:	18fb      	adds	r3, r7, r3
   147f0:	0018      	movs	r0, r3
   147f2:	4b14      	ldr	r3, [pc, #80]	; (14844 <TimerCountdown+0x78>)
   147f4:	4798      	blx	r3

	timer_add(&time_now, &time_interval, &timer->end_time);
   147f6:	2310      	movs	r3, #16
   147f8:	18fb      	adds	r3, r7, r3
   147fa:	681a      	ldr	r2, [r3, #0]
   147fc:	2308      	movs	r3, #8
   147fe:	18fb      	adds	r3, r7, r3
   14800:	681b      	ldr	r3, [r3, #0]
   14802:	18d2      	adds	r2, r2, r3
   14804:	687b      	ldr	r3, [r7, #4]
   14806:	601a      	str	r2, [r3, #0]
   14808:	2310      	movs	r3, #16
   1480a:	18fb      	adds	r3, r7, r3
   1480c:	685a      	ldr	r2, [r3, #4]
   1480e:	2308      	movs	r3, #8
   14810:	18fb      	adds	r3, r7, r3
   14812:	685b      	ldr	r3, [r3, #4]
   14814:	18d2      	adds	r2, r2, r3
   14816:	687b      	ldr	r3, [r7, #4]
   14818:	605a      	str	r2, [r3, #4]
   1481a:	687b      	ldr	r3, [r7, #4]
   1481c:	685b      	ldr	r3, [r3, #4]
   1481e:	4a0a      	ldr	r2, [pc, #40]	; (14848 <TimerCountdown+0x7c>)
   14820:	4293      	cmp	r3, r2
   14822:	dd0c      	ble.n	1483e <TimerCountdown+0x72>
   14824:	687b      	ldr	r3, [r7, #4]
   14826:	681b      	ldr	r3, [r3, #0]
   14828:	1c5a      	adds	r2, r3, #1
   1482a:	687b      	ldr	r3, [r7, #4]
   1482c:	601a      	str	r2, [r3, #0]
   1482e:	687b      	ldr	r3, [r7, #4]
   14830:	685b      	ldr	r3, [r3, #4]
   14832:	4a06      	ldr	r2, [pc, #24]	; (1484c <TimerCountdown+0x80>)
   14834:	189a      	adds	r2, r3, r2
   14836:	687b      	ldr	r3, [r7, #4]
   14838:	605a      	str	r2, [r3, #4]
   1483a:	e000      	b.n	1483e <TimerCountdown+0x72>
        return;
   1483c:	46c0      	nop			; (mov r8, r8)
}
   1483e:	46bd      	mov	sp, r7
   14840:	b006      	add	sp, #24
   14842:	bd80      	pop	{r7, pc}
   14844:	00014601 	.word	0x00014601
   14848:	000f423f 	.word	0x000f423f
   1484c:	fff0bdc0 	.word	0xfff0bdc0

00014850 <TimerLeftMS>:
 * \param[out] timer       The timer to be set to checked
 *
 * \return  The number of milliseconds left on the countdown timer
 */
int TimerLeftMS(Timer *timer)
{
   14850:	b590      	push	{r4, r7, lr}
   14852:	b089      	sub	sp, #36	; 0x24
   14854:	af00      	add	r7, sp, #0
   14856:	6078      	str	r0, [r7, #4]
	int result_ms = 0;
   14858:	2300      	movs	r3, #0
   1485a:	61fb      	str	r3, [r7, #28]
	struct timeval time_now;
    struct timeval time_result;

    if (timer == NULL)
   1485c:	687b      	ldr	r3, [r7, #4]
   1485e:	2b00      	cmp	r3, #0
   14860:	d101      	bne.n	14866 <TimerLeftMS+0x16>
    {
        return 0;
   14862:	2300      	movs	r3, #0
   14864:	e041      	b.n	148ea <TimerLeftMS+0x9a>
    }

	get_time_of_day(&time_now);
   14866:	2314      	movs	r3, #20
   14868:	18fb      	adds	r3, r7, r3
   1486a:	0018      	movs	r0, r3
   1486c:	4b21      	ldr	r3, [pc, #132]	; (148f4 <TimerLeftMS+0xa4>)
   1486e:	4798      	blx	r3
    
	timer_subtract(&timer->end_time, &time_now, &time_result);
   14870:	687b      	ldr	r3, [r7, #4]
   14872:	681a      	ldr	r2, [r3, #0]
   14874:	2314      	movs	r3, #20
   14876:	18fb      	adds	r3, r7, r3
   14878:	681b      	ldr	r3, [r3, #0]
   1487a:	1ad2      	subs	r2, r2, r3
   1487c:	230c      	movs	r3, #12
   1487e:	18fb      	adds	r3, r7, r3
   14880:	601a      	str	r2, [r3, #0]
   14882:	687b      	ldr	r3, [r7, #4]
   14884:	685a      	ldr	r2, [r3, #4]
   14886:	2314      	movs	r3, #20
   14888:	18fb      	adds	r3, r7, r3
   1488a:	685b      	ldr	r3, [r3, #4]
   1488c:	1ad2      	subs	r2, r2, r3
   1488e:	230c      	movs	r3, #12
   14890:	18fb      	adds	r3, r7, r3
   14892:	605a      	str	r2, [r3, #4]
   14894:	230c      	movs	r3, #12
   14896:	18fb      	adds	r3, r7, r3
   14898:	685b      	ldr	r3, [r3, #4]
   1489a:	2b00      	cmp	r3, #0
   1489c:	da0e      	bge.n	148bc <TimerLeftMS+0x6c>
   1489e:	230c      	movs	r3, #12
   148a0:	18fb      	adds	r3, r7, r3
   148a2:	681b      	ldr	r3, [r3, #0]
   148a4:	1e5a      	subs	r2, r3, #1
   148a6:	230c      	movs	r3, #12
   148a8:	18fb      	adds	r3, r7, r3
   148aa:	601a      	str	r2, [r3, #0]
   148ac:	230c      	movs	r3, #12
   148ae:	18fb      	adds	r3, r7, r3
   148b0:	685b      	ldr	r3, [r3, #4]
   148b2:	4a11      	ldr	r2, [pc, #68]	; (148f8 <TimerLeftMS+0xa8>)
   148b4:	189a      	adds	r2, r3, r2
   148b6:	230c      	movs	r3, #12
   148b8:	18fb      	adds	r3, r7, r3
   148ba:	605a      	str	r2, [r3, #4]
	if(time_result.tv_sec >= 0)
   148bc:	230c      	movs	r3, #12
   148be:	18fb      	adds	r3, r7, r3
   148c0:	681b      	ldr	r3, [r3, #0]
   148c2:	2b00      	cmp	r3, #0
   148c4:	db10      	blt.n	148e8 <TimerLeftMS+0x98>
    {
		result_ms = (int)((time_result.tv_sec * 1000) + (time_result.tv_usec / 1000));
   148c6:	230c      	movs	r3, #12
   148c8:	18fb      	adds	r3, r7, r3
   148ca:	681b      	ldr	r3, [r3, #0]
   148cc:	22fa      	movs	r2, #250	; 0xfa
   148ce:	0092      	lsls	r2, r2, #2
   148d0:	435a      	muls	r2, r3
   148d2:	0014      	movs	r4, r2
   148d4:	230c      	movs	r3, #12
   148d6:	18fb      	adds	r3, r7, r3
   148d8:	6858      	ldr	r0, [r3, #4]
   148da:	4b08      	ldr	r3, [pc, #32]	; (148fc <TimerLeftMS+0xac>)
   148dc:	22fa      	movs	r2, #250	; 0xfa
   148de:	0091      	lsls	r1, r2, #2
   148e0:	4798      	blx	r3
   148e2:	0003      	movs	r3, r0
   148e4:	18e3      	adds	r3, r4, r3
   148e6:	61fb      	str	r3, [r7, #28]
	}

	return result_ms;
   148e8:	69fb      	ldr	r3, [r7, #28]
}
   148ea:	0018      	movs	r0, r3
   148ec:	46bd      	mov	sp, r7
   148ee:	b009      	add	sp, #36	; 0x24
   148f0:	bd90      	pop	{r4, r7, pc}
   148f2:	46c0      	nop			; (mov r8, r8)
   148f4:	00014601 	.word	0x00014601
   148f8:	000f4240 	.word	0x000f4240
   148fc:	00019ded 	.word	0x00019ded

00014900 <parson_strndup>:
static int    json_serialize_string(const char *string, char *buf);
static int    append_indent(char *buf, int level);
static int    append_string(char *buf, const char *string);

/* Various */
static char * parson_strndup(const char *string, size_t n) {
   14900:	b580      	push	{r7, lr}
   14902:	b084      	sub	sp, #16
   14904:	af00      	add	r7, sp, #0
   14906:	6078      	str	r0, [r7, #4]
   14908:	6039      	str	r1, [r7, #0]
    char *output_string = (char*)parson_malloc(n + 1);
   1490a:	4b0e      	ldr	r3, [pc, #56]	; (14944 <parson_strndup+0x44>)
   1490c:	681b      	ldr	r3, [r3, #0]
   1490e:	683a      	ldr	r2, [r7, #0]
   14910:	3201      	adds	r2, #1
   14912:	0010      	movs	r0, r2
   14914:	4798      	blx	r3
   14916:	0003      	movs	r3, r0
   14918:	60fb      	str	r3, [r7, #12]
    if (!output_string)
   1491a:	68fb      	ldr	r3, [r7, #12]
   1491c:	2b00      	cmp	r3, #0
   1491e:	d101      	bne.n	14924 <parson_strndup+0x24>
        return NULL;
   14920:	2300      	movs	r3, #0
   14922:	e00b      	b.n	1493c <parson_strndup+0x3c>
    output_string[n] = '\0';
   14924:	68fa      	ldr	r2, [r7, #12]
   14926:	683b      	ldr	r3, [r7, #0]
   14928:	18d3      	adds	r3, r2, r3
   1492a:	2200      	movs	r2, #0
   1492c:	701a      	strb	r2, [r3, #0]
    strncpy(output_string, string, n);
   1492e:	683a      	ldr	r2, [r7, #0]
   14930:	6879      	ldr	r1, [r7, #4]
   14932:	68fb      	ldr	r3, [r7, #12]
   14934:	0018      	movs	r0, r3
   14936:	4b04      	ldr	r3, [pc, #16]	; (14948 <parson_strndup+0x48>)
   14938:	4798      	blx	r3
    return output_string;
   1493a:	68fb      	ldr	r3, [r7, #12]
}
   1493c:	0018      	movs	r0, r3
   1493e:	46bd      	mov	sp, r7
   14940:	b004      	add	sp, #16
   14942:	bd80      	pop	{r7, pc}
   14944:	20000158 	.word	0x20000158
   14948:	0001c75b 	.word	0x0001c75b

0001494c <parson_strdup>:

static char * parson_strdup(const char *string) {
   1494c:	b580      	push	{r7, lr}
   1494e:	b082      	sub	sp, #8
   14950:	af00      	add	r7, sp, #0
   14952:	6078      	str	r0, [r7, #4]
    return parson_strndup(string, strlen(string));
   14954:	687b      	ldr	r3, [r7, #4]
   14956:	0018      	movs	r0, r3
   14958:	4b06      	ldr	r3, [pc, #24]	; (14974 <parson_strdup+0x28>)
   1495a:	4798      	blx	r3
   1495c:	0002      	movs	r2, r0
   1495e:	687b      	ldr	r3, [r7, #4]
   14960:	0011      	movs	r1, r2
   14962:	0018      	movs	r0, r3
   14964:	4b04      	ldr	r3, [pc, #16]	; (14978 <parson_strdup+0x2c>)
   14966:	4798      	blx	r3
   14968:	0003      	movs	r3, r0
}
   1496a:	0018      	movs	r0, r3
   1496c:	46bd      	mov	sp, r7
   1496e:	b002      	add	sp, #8
   14970:	bd80      	pop	{r7, pc}
   14972:	46c0      	nop			; (mov r8, r8)
   14974:	0001c72b 	.word	0x0001c72b
   14978:	00014901 	.word	0x00014901

0001497c <is_utf16_hex>:

static int is_utf16_hex(const unsigned char *s) {
   1497c:	b580      	push	{r7, lr}
   1497e:	b082      	sub	sp, #8
   14980:	af00      	add	r7, sp, #0
   14982:	6078      	str	r0, [r7, #4]
    return isxdigit(s[0]) && isxdigit(s[1]) && isxdigit(s[2]) && isxdigit(s[3]);
   14984:	4b1c      	ldr	r3, [pc, #112]	; (149f8 <is_utf16_hex+0x7c>)
   14986:	4798      	blx	r3
   14988:	0002      	movs	r2, r0
   1498a:	687b      	ldr	r3, [r7, #4]
   1498c:	781b      	ldrb	r3, [r3, #0]
   1498e:	3301      	adds	r3, #1
   14990:	18d3      	adds	r3, r2, r3
   14992:	781b      	ldrb	r3, [r3, #0]
   14994:	001a      	movs	r2, r3
   14996:	2344      	movs	r3, #68	; 0x44
   14998:	4013      	ands	r3, r2
   1499a:	d028      	beq.n	149ee <is_utf16_hex+0x72>
   1499c:	4b16      	ldr	r3, [pc, #88]	; (149f8 <is_utf16_hex+0x7c>)
   1499e:	4798      	blx	r3
   149a0:	0002      	movs	r2, r0
   149a2:	687b      	ldr	r3, [r7, #4]
   149a4:	3301      	adds	r3, #1
   149a6:	781b      	ldrb	r3, [r3, #0]
   149a8:	3301      	adds	r3, #1
   149aa:	18d3      	adds	r3, r2, r3
   149ac:	781b      	ldrb	r3, [r3, #0]
   149ae:	001a      	movs	r2, r3
   149b0:	2344      	movs	r3, #68	; 0x44
   149b2:	4013      	ands	r3, r2
   149b4:	d01b      	beq.n	149ee <is_utf16_hex+0x72>
   149b6:	4b10      	ldr	r3, [pc, #64]	; (149f8 <is_utf16_hex+0x7c>)
   149b8:	4798      	blx	r3
   149ba:	0002      	movs	r2, r0
   149bc:	687b      	ldr	r3, [r7, #4]
   149be:	3302      	adds	r3, #2
   149c0:	781b      	ldrb	r3, [r3, #0]
   149c2:	3301      	adds	r3, #1
   149c4:	18d3      	adds	r3, r2, r3
   149c6:	781b      	ldrb	r3, [r3, #0]
   149c8:	001a      	movs	r2, r3
   149ca:	2344      	movs	r3, #68	; 0x44
   149cc:	4013      	ands	r3, r2
   149ce:	d00e      	beq.n	149ee <is_utf16_hex+0x72>
   149d0:	4b09      	ldr	r3, [pc, #36]	; (149f8 <is_utf16_hex+0x7c>)
   149d2:	4798      	blx	r3
   149d4:	0002      	movs	r2, r0
   149d6:	687b      	ldr	r3, [r7, #4]
   149d8:	3303      	adds	r3, #3
   149da:	781b      	ldrb	r3, [r3, #0]
   149dc:	3301      	adds	r3, #1
   149de:	18d3      	adds	r3, r2, r3
   149e0:	781b      	ldrb	r3, [r3, #0]
   149e2:	001a      	movs	r2, r3
   149e4:	2344      	movs	r3, #68	; 0x44
   149e6:	4013      	ands	r3, r2
   149e8:	d001      	beq.n	149ee <is_utf16_hex+0x72>
   149ea:	2301      	movs	r3, #1
   149ec:	e000      	b.n	149f0 <is_utf16_hex+0x74>
   149ee:	2300      	movs	r3, #0
}
   149f0:	0018      	movs	r0, r3
   149f2:	46bd      	mov	sp, r7
   149f4:	b002      	add	sp, #8
   149f6:	bd80      	pop	{r7, pc}
   149f8:	0001bfc9 	.word	0x0001bfc9

000149fc <is_decimal>:
        string += len;
    }
    return 1;
}

static int is_decimal(const char *string, size_t length) {
   149fc:	b580      	push	{r7, lr}
   149fe:	b082      	sub	sp, #8
   14a00:	af00      	add	r7, sp, #0
   14a02:	6078      	str	r0, [r7, #4]
   14a04:	6039      	str	r1, [r7, #0]
    if (length > 1 && string[0] == '0' && string[1] != '.')
   14a06:	683b      	ldr	r3, [r7, #0]
   14a08:	2b01      	cmp	r3, #1
   14a0a:	d90a      	bls.n	14a22 <is_decimal+0x26>
   14a0c:	687b      	ldr	r3, [r7, #4]
   14a0e:	781b      	ldrb	r3, [r3, #0]
   14a10:	2b30      	cmp	r3, #48	; 0x30
   14a12:	d106      	bne.n	14a22 <is_decimal+0x26>
   14a14:	687b      	ldr	r3, [r7, #4]
   14a16:	3301      	adds	r3, #1
   14a18:	781b      	ldrb	r3, [r3, #0]
   14a1a:	2b2e      	cmp	r3, #46	; 0x2e
   14a1c:	d001      	beq.n	14a22 <is_decimal+0x26>
        return 0;
   14a1e:	2300      	movs	r3, #0
   14a20:	e025      	b.n	14a6e <is_decimal+0x72>
    if (length > 2 && !strncmp(string, "-0", 2) && string[2] != '.')
   14a22:	683b      	ldr	r3, [r7, #0]
   14a24:	2b02      	cmp	r3, #2
   14a26:	d91c      	bls.n	14a62 <is_decimal+0x66>
   14a28:	4913      	ldr	r1, [pc, #76]	; (14a78 <is_decimal+0x7c>)
   14a2a:	687b      	ldr	r3, [r7, #4]
   14a2c:	2202      	movs	r2, #2
   14a2e:	0018      	movs	r0, r3
   14a30:	4b12      	ldr	r3, [pc, #72]	; (14a7c <is_decimal+0x80>)
   14a32:	4798      	blx	r3
   14a34:	1e03      	subs	r3, r0, #0
   14a36:	d114      	bne.n	14a62 <is_decimal+0x66>
   14a38:	687b      	ldr	r3, [r7, #4]
   14a3a:	3302      	adds	r3, #2
   14a3c:	781b      	ldrb	r3, [r3, #0]
   14a3e:	2b2e      	cmp	r3, #46	; 0x2e
   14a40:	d00f      	beq.n	14a62 <is_decimal+0x66>
        return 0;
   14a42:	2300      	movs	r3, #0
   14a44:	e013      	b.n	14a6e <is_decimal+0x72>
    while (length--)
        if (strchr("xX", string[length]))
   14a46:	687a      	ldr	r2, [r7, #4]
   14a48:	683b      	ldr	r3, [r7, #0]
   14a4a:	18d3      	adds	r3, r2, r3
   14a4c:	781b      	ldrb	r3, [r3, #0]
   14a4e:	001a      	movs	r2, r3
   14a50:	4b0b      	ldr	r3, [pc, #44]	; (14a80 <is_decimal+0x84>)
   14a52:	0011      	movs	r1, r2
   14a54:	0018      	movs	r0, r3
   14a56:	4b0b      	ldr	r3, [pc, #44]	; (14a84 <is_decimal+0x88>)
   14a58:	4798      	blx	r3
   14a5a:	1e03      	subs	r3, r0, #0
   14a5c:	d001      	beq.n	14a62 <is_decimal+0x66>
            return 0;
   14a5e:	2300      	movs	r3, #0
   14a60:	e005      	b.n	14a6e <is_decimal+0x72>
    while (length--)
   14a62:	683b      	ldr	r3, [r7, #0]
   14a64:	1e5a      	subs	r2, r3, #1
   14a66:	603a      	str	r2, [r7, #0]
   14a68:	2b00      	cmp	r3, #0
   14a6a:	d1ec      	bne.n	14a46 <is_decimal+0x4a>
    return 1;
   14a6c:	2301      	movs	r3, #1
}
   14a6e:	0018      	movs	r0, r3
   14a70:	46bd      	mov	sp, r7
   14a72:	b002      	add	sp, #8
   14a74:	bd80      	pop	{r7, pc}
   14a76:	46c0      	nop			; (mov r8, r8)
   14a78:	00020fe8 	.word	0x00020fe8
   14a7c:	0001c739 	.word	0x0001c739
   14a80:	00020fec 	.word	0x00020fec
   14a84:	0001c6ff 	.word	0x0001c6ff

00014a88 <json_object_init>:
        string++;
    }
}

/* JSON Object */
static JSON_Object * json_object_init(void) {
   14a88:	b580      	push	{r7, lr}
   14a8a:	b082      	sub	sp, #8
   14a8c:	af00      	add	r7, sp, #0
    JSON_Object *new_obj = (JSON_Object*)parson_malloc(sizeof(JSON_Object));
   14a8e:	4b0e      	ldr	r3, [pc, #56]	; (14ac8 <json_object_init+0x40>)
   14a90:	681b      	ldr	r3, [r3, #0]
   14a92:	2010      	movs	r0, #16
   14a94:	4798      	blx	r3
   14a96:	0003      	movs	r3, r0
   14a98:	607b      	str	r3, [r7, #4]
    if (!new_obj)
   14a9a:	687b      	ldr	r3, [r7, #4]
   14a9c:	2b00      	cmp	r3, #0
   14a9e:	d101      	bne.n	14aa4 <json_object_init+0x1c>
        return NULL;
   14aa0:	2300      	movs	r3, #0
   14aa2:	e00c      	b.n	14abe <json_object_init+0x36>
    new_obj->names = (char**)NULL;
   14aa4:	687b      	ldr	r3, [r7, #4]
   14aa6:	2200      	movs	r2, #0
   14aa8:	601a      	str	r2, [r3, #0]
    new_obj->values = (JSON_Value**)NULL;
   14aaa:	687b      	ldr	r3, [r7, #4]
   14aac:	2200      	movs	r2, #0
   14aae:	605a      	str	r2, [r3, #4]
    new_obj->capacity = 0;
   14ab0:	687b      	ldr	r3, [r7, #4]
   14ab2:	2200      	movs	r2, #0
   14ab4:	60da      	str	r2, [r3, #12]
    new_obj->count = 0;
   14ab6:	687b      	ldr	r3, [r7, #4]
   14ab8:	2200      	movs	r2, #0
   14aba:	609a      	str	r2, [r3, #8]
    return new_obj;
   14abc:	687b      	ldr	r3, [r7, #4]
}
   14abe:	0018      	movs	r0, r3
   14ac0:	46bd      	mov	sp, r7
   14ac2:	b002      	add	sp, #8
   14ac4:	bd80      	pop	{r7, pc}
   14ac6:	46c0      	nop			; (mov r8, r8)
   14ac8:	20000158 	.word	0x20000158

00014acc <json_object_add>:

static JSON_Status json_object_add(JSON_Object *object, const char *name, JSON_Value *value) {
   14acc:	b590      	push	{r4, r7, lr}
   14ace:	b087      	sub	sp, #28
   14ad0:	af00      	add	r7, sp, #0
   14ad2:	60f8      	str	r0, [r7, #12]
   14ad4:	60b9      	str	r1, [r7, #8]
   14ad6:	607a      	str	r2, [r7, #4]
    size_t index = 0;
   14ad8:	2300      	movs	r3, #0
   14ada:	617b      	str	r3, [r7, #20]
    if (object == NULL || name == NULL || value == NULL) {
   14adc:	68fb      	ldr	r3, [r7, #12]
   14ade:	2b00      	cmp	r3, #0
   14ae0:	d005      	beq.n	14aee <json_object_add+0x22>
   14ae2:	68bb      	ldr	r3, [r7, #8]
   14ae4:	2b00      	cmp	r3, #0
   14ae6:	d002      	beq.n	14aee <json_object_add+0x22>
   14ae8:	687b      	ldr	r3, [r7, #4]
   14aea:	2b00      	cmp	r3, #0
   14aec:	d102      	bne.n	14af4 <json_object_add+0x28>
        return JSONFailure;
   14aee:	2301      	movs	r3, #1
   14af0:	425b      	negs	r3, r3
   14af2:	e051      	b.n	14b98 <json_object_add+0xcc>
    }
    if (object->count >= object->capacity) {
   14af4:	68fb      	ldr	r3, [r7, #12]
   14af6:	689a      	ldr	r2, [r3, #8]
   14af8:	68fb      	ldr	r3, [r7, #12]
   14afa:	68db      	ldr	r3, [r3, #12]
   14afc:	429a      	cmp	r2, r3
   14afe:	d31a      	bcc.n	14b36 <json_object_add+0x6a>
        size_t new_capacity = MAX(object->capacity * 2, STARTING_CAPACITY);
   14b00:	68fb      	ldr	r3, [r7, #12]
   14b02:	68db      	ldr	r3, [r3, #12]
   14b04:	005b      	lsls	r3, r3, #1
   14b06:	2b0f      	cmp	r3, #15
   14b08:	d200      	bcs.n	14b0c <json_object_add+0x40>
   14b0a:	230f      	movs	r3, #15
   14b0c:	613b      	str	r3, [r7, #16]
        if (new_capacity > OBJECT_MAX_CAPACITY)
   14b0e:	693a      	ldr	r2, [r7, #16]
   14b10:	23f0      	movs	r3, #240	; 0xf0
   14b12:	009b      	lsls	r3, r3, #2
   14b14:	429a      	cmp	r2, r3
   14b16:	d902      	bls.n	14b1e <json_object_add+0x52>
            return JSONFailure;
   14b18:	2301      	movs	r3, #1
   14b1a:	425b      	negs	r3, r3
   14b1c:	e03c      	b.n	14b98 <json_object_add+0xcc>
        if (json_object_resize(object, new_capacity) == JSONFailure)
   14b1e:	693a      	ldr	r2, [r7, #16]
   14b20:	68fb      	ldr	r3, [r7, #12]
   14b22:	0011      	movs	r1, r2
   14b24:	0018      	movs	r0, r3
   14b26:	4b1e      	ldr	r3, [pc, #120]	; (14ba0 <json_object_add+0xd4>)
   14b28:	4798      	blx	r3
   14b2a:	0003      	movs	r3, r0
   14b2c:	3301      	adds	r3, #1
   14b2e:	d102      	bne.n	14b36 <json_object_add+0x6a>
            return JSONFailure;
   14b30:	2301      	movs	r3, #1
   14b32:	425b      	negs	r3, r3
   14b34:	e030      	b.n	14b98 <json_object_add+0xcc>
    }
    if (json_object_get_value(object, name) != NULL)
   14b36:	68ba      	ldr	r2, [r7, #8]
   14b38:	68fb      	ldr	r3, [r7, #12]
   14b3a:	0011      	movs	r1, r2
   14b3c:	0018      	movs	r0, r3
   14b3e:	4b19      	ldr	r3, [pc, #100]	; (14ba4 <json_object_add+0xd8>)
   14b40:	4798      	blx	r3
   14b42:	1e03      	subs	r3, r0, #0
   14b44:	d002      	beq.n	14b4c <json_object_add+0x80>
        return JSONFailure;
   14b46:	2301      	movs	r3, #1
   14b48:	425b      	negs	r3, r3
   14b4a:	e025      	b.n	14b98 <json_object_add+0xcc>
    index = object->count;
   14b4c:	68fb      	ldr	r3, [r7, #12]
   14b4e:	689b      	ldr	r3, [r3, #8]
   14b50:	617b      	str	r3, [r7, #20]
    object->names[index] = parson_strdup(name);
   14b52:	68fb      	ldr	r3, [r7, #12]
   14b54:	681a      	ldr	r2, [r3, #0]
   14b56:	697b      	ldr	r3, [r7, #20]
   14b58:	009b      	lsls	r3, r3, #2
   14b5a:	18d4      	adds	r4, r2, r3
   14b5c:	68bb      	ldr	r3, [r7, #8]
   14b5e:	0018      	movs	r0, r3
   14b60:	4b11      	ldr	r3, [pc, #68]	; (14ba8 <json_object_add+0xdc>)
   14b62:	4798      	blx	r3
   14b64:	0003      	movs	r3, r0
   14b66:	6023      	str	r3, [r4, #0]
    if (object->names[index] == NULL)
   14b68:	68fb      	ldr	r3, [r7, #12]
   14b6a:	681a      	ldr	r2, [r3, #0]
   14b6c:	697b      	ldr	r3, [r7, #20]
   14b6e:	009b      	lsls	r3, r3, #2
   14b70:	18d3      	adds	r3, r2, r3
   14b72:	681b      	ldr	r3, [r3, #0]
   14b74:	2b00      	cmp	r3, #0
   14b76:	d102      	bne.n	14b7e <json_object_add+0xb2>
        return JSONFailure;
   14b78:	2301      	movs	r3, #1
   14b7a:	425b      	negs	r3, r3
   14b7c:	e00c      	b.n	14b98 <json_object_add+0xcc>
    object->values[index] = value;
   14b7e:	68fb      	ldr	r3, [r7, #12]
   14b80:	685a      	ldr	r2, [r3, #4]
   14b82:	697b      	ldr	r3, [r7, #20]
   14b84:	009b      	lsls	r3, r3, #2
   14b86:	18d3      	adds	r3, r2, r3
   14b88:	687a      	ldr	r2, [r7, #4]
   14b8a:	601a      	str	r2, [r3, #0]
    object->count++;
   14b8c:	68fb      	ldr	r3, [r7, #12]
   14b8e:	689b      	ldr	r3, [r3, #8]
   14b90:	1c5a      	adds	r2, r3, #1
   14b92:	68fb      	ldr	r3, [r7, #12]
   14b94:	609a      	str	r2, [r3, #8]
    return JSONSuccess;
   14b96:	2300      	movs	r3, #0
}
   14b98:	0018      	movs	r0, r3
   14b9a:	46bd      	mov	sp, r7
   14b9c:	b007      	add	sp, #28
   14b9e:	bd90      	pop	{r4, r7, pc}
   14ba0:	00014bad 	.word	0x00014bad
   14ba4:	00015a49 	.word	0x00015a49
   14ba8:	0001494d 	.word	0x0001494d

00014bac <json_object_resize>:

static JSON_Status json_object_resize(JSON_Object *object, size_t new_capacity) {
   14bac:	b580      	push	{r7, lr}
   14bae:	b084      	sub	sp, #16
   14bb0:	af00      	add	r7, sp, #0
   14bb2:	6078      	str	r0, [r7, #4]
   14bb4:	6039      	str	r1, [r7, #0]
    char **temp_names = NULL;
   14bb6:	2300      	movs	r3, #0
   14bb8:	60fb      	str	r3, [r7, #12]
    JSON_Value **temp_values = NULL;
   14bba:	2300      	movs	r3, #0
   14bbc:	60bb      	str	r3, [r7, #8]

    if ((object->names == NULL && object->values != NULL) ||
   14bbe:	687b      	ldr	r3, [r7, #4]
   14bc0:	681b      	ldr	r3, [r3, #0]
   14bc2:	2b00      	cmp	r3, #0
   14bc4:	d103      	bne.n	14bce <json_object_resize+0x22>
   14bc6:	687b      	ldr	r3, [r7, #4]
   14bc8:	685b      	ldr	r3, [r3, #4]
   14bca:	2b00      	cmp	r3, #0
   14bcc:	d10a      	bne.n	14be4 <json_object_resize+0x38>
        (object->names != NULL && object->values == NULL) ||
   14bce:	687b      	ldr	r3, [r7, #4]
   14bd0:	681b      	ldr	r3, [r3, #0]
    if ((object->names == NULL && object->values != NULL) ||
   14bd2:	2b00      	cmp	r3, #0
   14bd4:	d003      	beq.n	14bde <json_object_resize+0x32>
        (object->names != NULL && object->values == NULL) ||
   14bd6:	687b      	ldr	r3, [r7, #4]
   14bd8:	685b      	ldr	r3, [r3, #4]
   14bda:	2b00      	cmp	r3, #0
   14bdc:	d002      	beq.n	14be4 <json_object_resize+0x38>
   14bde:	683b      	ldr	r3, [r7, #0]
   14be0:	2b00      	cmp	r3, #0
   14be2:	d102      	bne.n	14bea <json_object_resize+0x3e>
        new_capacity == 0) {
            return JSONFailure; /* Shouldn't happen */
   14be4:	2301      	movs	r3, #1
   14be6:	425b      	negs	r3, r3
   14be8:	e054      	b.n	14c94 <json_object_resize+0xe8>
    }
    
    temp_names = (char**)parson_malloc(new_capacity * sizeof(char*));
   14bea:	4b2c      	ldr	r3, [pc, #176]	; (14c9c <json_object_resize+0xf0>)
   14bec:	681b      	ldr	r3, [r3, #0]
   14bee:	683a      	ldr	r2, [r7, #0]
   14bf0:	0092      	lsls	r2, r2, #2
   14bf2:	0010      	movs	r0, r2
   14bf4:	4798      	blx	r3
   14bf6:	0003      	movs	r3, r0
   14bf8:	60fb      	str	r3, [r7, #12]
    if (temp_names == NULL)
   14bfa:	68fb      	ldr	r3, [r7, #12]
   14bfc:	2b00      	cmp	r3, #0
   14bfe:	d102      	bne.n	14c06 <json_object_resize+0x5a>
        return JSONFailure;
   14c00:	2301      	movs	r3, #1
   14c02:	425b      	negs	r3, r3
   14c04:	e046      	b.n	14c94 <json_object_resize+0xe8>
    
    temp_values = (JSON_Value**)parson_malloc(new_capacity * sizeof(JSON_Value*));
   14c06:	4b25      	ldr	r3, [pc, #148]	; (14c9c <json_object_resize+0xf0>)
   14c08:	681b      	ldr	r3, [r3, #0]
   14c0a:	683a      	ldr	r2, [r7, #0]
   14c0c:	0092      	lsls	r2, r2, #2
   14c0e:	0010      	movs	r0, r2
   14c10:	4798      	blx	r3
   14c12:	0003      	movs	r3, r0
   14c14:	60bb      	str	r3, [r7, #8]
    if (temp_names == NULL) {
   14c16:	68fb      	ldr	r3, [r7, #12]
   14c18:	2b00      	cmp	r3, #0
   14c1a:	d107      	bne.n	14c2c <json_object_resize+0x80>
        parson_free(temp_names);
   14c1c:	4b20      	ldr	r3, [pc, #128]	; (14ca0 <json_object_resize+0xf4>)
   14c1e:	681b      	ldr	r3, [r3, #0]
   14c20:	68fa      	ldr	r2, [r7, #12]
   14c22:	0010      	movs	r0, r2
   14c24:	4798      	blx	r3
        return JSONFailure;
   14c26:	2301      	movs	r3, #1
   14c28:	425b      	negs	r3, r3
   14c2a:	e033      	b.n	14c94 <json_object_resize+0xe8>
    }
    
    if (object->names != NULL && object->values != NULL && object->count > 0) {
   14c2c:	687b      	ldr	r3, [r7, #4]
   14c2e:	681b      	ldr	r3, [r3, #0]
   14c30:	2b00      	cmp	r3, #0
   14c32:	d019      	beq.n	14c68 <json_object_resize+0xbc>
   14c34:	687b      	ldr	r3, [r7, #4]
   14c36:	685b      	ldr	r3, [r3, #4]
   14c38:	2b00      	cmp	r3, #0
   14c3a:	d015      	beq.n	14c68 <json_object_resize+0xbc>
   14c3c:	687b      	ldr	r3, [r7, #4]
   14c3e:	689b      	ldr	r3, [r3, #8]
   14c40:	2b00      	cmp	r3, #0
   14c42:	d011      	beq.n	14c68 <json_object_resize+0xbc>
        memcpy(temp_names, object->names, object->count * sizeof(char*));
   14c44:	687b      	ldr	r3, [r7, #4]
   14c46:	6819      	ldr	r1, [r3, #0]
   14c48:	687b      	ldr	r3, [r7, #4]
   14c4a:	689b      	ldr	r3, [r3, #8]
   14c4c:	009a      	lsls	r2, r3, #2
   14c4e:	68fb      	ldr	r3, [r7, #12]
   14c50:	0018      	movs	r0, r3
   14c52:	4b14      	ldr	r3, [pc, #80]	; (14ca4 <json_object_resize+0xf8>)
   14c54:	4798      	blx	r3
        memcpy(temp_values, object->values, object->count * sizeof(JSON_Value*));
   14c56:	687b      	ldr	r3, [r7, #4]
   14c58:	6859      	ldr	r1, [r3, #4]
   14c5a:	687b      	ldr	r3, [r7, #4]
   14c5c:	689b      	ldr	r3, [r3, #8]
   14c5e:	009a      	lsls	r2, r3, #2
   14c60:	68bb      	ldr	r3, [r7, #8]
   14c62:	0018      	movs	r0, r3
   14c64:	4b0f      	ldr	r3, [pc, #60]	; (14ca4 <json_object_resize+0xf8>)
   14c66:	4798      	blx	r3
    }
    parson_free(object->names);
   14c68:	4b0d      	ldr	r3, [pc, #52]	; (14ca0 <json_object_resize+0xf4>)
   14c6a:	681a      	ldr	r2, [r3, #0]
   14c6c:	687b      	ldr	r3, [r7, #4]
   14c6e:	681b      	ldr	r3, [r3, #0]
   14c70:	0018      	movs	r0, r3
   14c72:	4790      	blx	r2
    parson_free(object->values);
   14c74:	4b0a      	ldr	r3, [pc, #40]	; (14ca0 <json_object_resize+0xf4>)
   14c76:	681a      	ldr	r2, [r3, #0]
   14c78:	687b      	ldr	r3, [r7, #4]
   14c7a:	685b      	ldr	r3, [r3, #4]
   14c7c:	0018      	movs	r0, r3
   14c7e:	4790      	blx	r2
    object->names = temp_names;
   14c80:	687b      	ldr	r3, [r7, #4]
   14c82:	68fa      	ldr	r2, [r7, #12]
   14c84:	601a      	str	r2, [r3, #0]
    object->values = temp_values;
   14c86:	687b      	ldr	r3, [r7, #4]
   14c88:	68ba      	ldr	r2, [r7, #8]
   14c8a:	605a      	str	r2, [r3, #4]
    object->capacity = new_capacity;
   14c8c:	687b      	ldr	r3, [r7, #4]
   14c8e:	683a      	ldr	r2, [r7, #0]
   14c90:	60da      	str	r2, [r3, #12]
    return JSONSuccess;
   14c92:	2300      	movs	r3, #0
}
   14c94:	0018      	movs	r0, r3
   14c96:	46bd      	mov	sp, r7
   14c98:	b004      	add	sp, #16
   14c9a:	bd80      	pop	{r7, pc}
   14c9c:	20000158 	.word	0x20000158
   14ca0:	2000015c 	.word	0x2000015c
   14ca4:	0001c13d 	.word	0x0001c13d

00014ca8 <json_object_nget_value>:

static JSON_Value * json_object_nget_value(const JSON_Object *object, const char *name, size_t n) {
   14ca8:	b580      	push	{r7, lr}
   14caa:	b086      	sub	sp, #24
   14cac:	af00      	add	r7, sp, #0
   14cae:	60f8      	str	r0, [r7, #12]
   14cb0:	60b9      	str	r1, [r7, #8]
   14cb2:	607a      	str	r2, [r7, #4]
    size_t i, name_length;
    for (i = 0; i < json_object_get_count(object); i++) {
   14cb4:	2300      	movs	r3, #0
   14cb6:	617b      	str	r3, [r7, #20]
   14cb8:	e026      	b.n	14d08 <json_object_nget_value+0x60>
        name_length = strlen(object->names[i]);
   14cba:	68fb      	ldr	r3, [r7, #12]
   14cbc:	681a      	ldr	r2, [r3, #0]
   14cbe:	697b      	ldr	r3, [r7, #20]
   14cc0:	009b      	lsls	r3, r3, #2
   14cc2:	18d3      	adds	r3, r2, r3
   14cc4:	681b      	ldr	r3, [r3, #0]
   14cc6:	0018      	movs	r0, r3
   14cc8:	4b16      	ldr	r3, [pc, #88]	; (14d24 <json_object_nget_value+0x7c>)
   14cca:	4798      	blx	r3
   14ccc:	0003      	movs	r3, r0
   14cce:	613b      	str	r3, [r7, #16]
        if (name_length != n)
   14cd0:	693a      	ldr	r2, [r7, #16]
   14cd2:	687b      	ldr	r3, [r7, #4]
   14cd4:	429a      	cmp	r2, r3
   14cd6:	d113      	bne.n	14d00 <json_object_nget_value+0x58>
            continue;
        if (strncmp(object->names[i], name, n) == 0)
   14cd8:	68fb      	ldr	r3, [r7, #12]
   14cda:	681a      	ldr	r2, [r3, #0]
   14cdc:	697b      	ldr	r3, [r7, #20]
   14cde:	009b      	lsls	r3, r3, #2
   14ce0:	18d3      	adds	r3, r2, r3
   14ce2:	681b      	ldr	r3, [r3, #0]
   14ce4:	687a      	ldr	r2, [r7, #4]
   14ce6:	68b9      	ldr	r1, [r7, #8]
   14ce8:	0018      	movs	r0, r3
   14cea:	4b0f      	ldr	r3, [pc, #60]	; (14d28 <json_object_nget_value+0x80>)
   14cec:	4798      	blx	r3
   14cee:	1e03      	subs	r3, r0, #0
   14cf0:	d107      	bne.n	14d02 <json_object_nget_value+0x5a>
            return object->values[i];
   14cf2:	68fb      	ldr	r3, [r7, #12]
   14cf4:	685a      	ldr	r2, [r3, #4]
   14cf6:	697b      	ldr	r3, [r7, #20]
   14cf8:	009b      	lsls	r3, r3, #2
   14cfa:	18d3      	adds	r3, r2, r3
   14cfc:	681b      	ldr	r3, [r3, #0]
   14cfe:	e00c      	b.n	14d1a <json_object_nget_value+0x72>
            continue;
   14d00:	46c0      	nop			; (mov r8, r8)
    for (i = 0; i < json_object_get_count(object); i++) {
   14d02:	697b      	ldr	r3, [r7, #20]
   14d04:	3301      	adds	r3, #1
   14d06:	617b      	str	r3, [r7, #20]
   14d08:	68fb      	ldr	r3, [r7, #12]
   14d0a:	0018      	movs	r0, r3
   14d0c:	4b07      	ldr	r3, [pc, #28]	; (14d2c <json_object_nget_value+0x84>)
   14d0e:	4798      	blx	r3
   14d10:	0002      	movs	r2, r0
   14d12:	697b      	ldr	r3, [r7, #20]
   14d14:	429a      	cmp	r2, r3
   14d16:	d8d0      	bhi.n	14cba <json_object_nget_value+0x12>
    }
    return NULL;
   14d18:	2300      	movs	r3, #0
}
   14d1a:	0018      	movs	r0, r3
   14d1c:	46bd      	mov	sp, r7
   14d1e:	b006      	add	sp, #24
   14d20:	bd80      	pop	{r7, pc}
   14d22:	46c0      	nop			; (mov r8, r8)
   14d24:	0001c72b 	.word	0x0001c72b
   14d28:	0001c739 	.word	0x0001c739
   14d2c:	00015b1d 	.word	0x00015b1d

00014d30 <json_object_free>:

static void json_object_free(JSON_Object *object) {
   14d30:	b580      	push	{r7, lr}
   14d32:	b082      	sub	sp, #8
   14d34:	af00      	add	r7, sp, #0
   14d36:	6078      	str	r0, [r7, #4]
    while(object->count--) {
   14d38:	e014      	b.n	14d64 <json_object_free+0x34>
        parson_free(object->names[object->count]);
   14d3a:	4b18      	ldr	r3, [pc, #96]	; (14d9c <json_object_free+0x6c>)
   14d3c:	681a      	ldr	r2, [r3, #0]
   14d3e:	687b      	ldr	r3, [r7, #4]
   14d40:	6819      	ldr	r1, [r3, #0]
   14d42:	687b      	ldr	r3, [r7, #4]
   14d44:	689b      	ldr	r3, [r3, #8]
   14d46:	009b      	lsls	r3, r3, #2
   14d48:	18cb      	adds	r3, r1, r3
   14d4a:	681b      	ldr	r3, [r3, #0]
   14d4c:	0018      	movs	r0, r3
   14d4e:	4790      	blx	r2
        json_value_free(object->values[object->count]);
   14d50:	687b      	ldr	r3, [r7, #4]
   14d52:	685a      	ldr	r2, [r3, #4]
   14d54:	687b      	ldr	r3, [r7, #4]
   14d56:	689b      	ldr	r3, [r3, #8]
   14d58:	009b      	lsls	r3, r3, #2
   14d5a:	18d3      	adds	r3, r2, r3
   14d5c:	681b      	ldr	r3, [r3, #0]
   14d5e:	0018      	movs	r0, r3
   14d60:	4b0f      	ldr	r3, [pc, #60]	; (14da0 <json_object_free+0x70>)
   14d62:	4798      	blx	r3
    while(object->count--) {
   14d64:	687b      	ldr	r3, [r7, #4]
   14d66:	689b      	ldr	r3, [r3, #8]
   14d68:	1e59      	subs	r1, r3, #1
   14d6a:	687a      	ldr	r2, [r7, #4]
   14d6c:	6091      	str	r1, [r2, #8]
   14d6e:	2b00      	cmp	r3, #0
   14d70:	d1e3      	bne.n	14d3a <json_object_free+0xa>
    }
    parson_free(object->names);
   14d72:	4b0a      	ldr	r3, [pc, #40]	; (14d9c <json_object_free+0x6c>)
   14d74:	681a      	ldr	r2, [r3, #0]
   14d76:	687b      	ldr	r3, [r7, #4]
   14d78:	681b      	ldr	r3, [r3, #0]
   14d7a:	0018      	movs	r0, r3
   14d7c:	4790      	blx	r2
    parson_free(object->values);
   14d7e:	4b07      	ldr	r3, [pc, #28]	; (14d9c <json_object_free+0x6c>)
   14d80:	681a      	ldr	r2, [r3, #0]
   14d82:	687b      	ldr	r3, [r7, #4]
   14d84:	685b      	ldr	r3, [r3, #4]
   14d86:	0018      	movs	r0, r3
   14d88:	4790      	blx	r2
    parson_free(object);
   14d8a:	4b04      	ldr	r3, [pc, #16]	; (14d9c <json_object_free+0x6c>)
   14d8c:	681b      	ldr	r3, [r3, #0]
   14d8e:	687a      	ldr	r2, [r7, #4]
   14d90:	0010      	movs	r0, r2
   14d92:	4798      	blx	r3
}
   14d94:	46c0      	nop			; (mov r8, r8)
   14d96:	46bd      	mov	sp, r7
   14d98:	b002      	add	sp, #8
   14d9a:	bd80      	pop	{r7, pc}
   14d9c:	2000015c 	.word	0x2000015c
   14da0:	00015ca1 	.word	0x00015ca1

00014da4 <json_array_init>:

/* JSON Array */
static JSON_Array * json_array_init(void) {
   14da4:	b580      	push	{r7, lr}
   14da6:	b082      	sub	sp, #8
   14da8:	af00      	add	r7, sp, #0
    JSON_Array *new_array = (JSON_Array*)parson_malloc(sizeof(JSON_Array));
   14daa:	4b0c      	ldr	r3, [pc, #48]	; (14ddc <json_array_init+0x38>)
   14dac:	681b      	ldr	r3, [r3, #0]
   14dae:	200c      	movs	r0, #12
   14db0:	4798      	blx	r3
   14db2:	0003      	movs	r3, r0
   14db4:	607b      	str	r3, [r7, #4]
    if (!new_array)
   14db6:	687b      	ldr	r3, [r7, #4]
   14db8:	2b00      	cmp	r3, #0
   14dba:	d101      	bne.n	14dc0 <json_array_init+0x1c>
        return NULL;
   14dbc:	2300      	movs	r3, #0
   14dbe:	e009      	b.n	14dd4 <json_array_init+0x30>
    new_array->items = (JSON_Value**)NULL;
   14dc0:	687b      	ldr	r3, [r7, #4]
   14dc2:	2200      	movs	r2, #0
   14dc4:	601a      	str	r2, [r3, #0]
    new_array->capacity = 0;
   14dc6:	687b      	ldr	r3, [r7, #4]
   14dc8:	2200      	movs	r2, #0
   14dca:	609a      	str	r2, [r3, #8]
    new_array->count = 0;
   14dcc:	687b      	ldr	r3, [r7, #4]
   14dce:	2200      	movs	r2, #0
   14dd0:	605a      	str	r2, [r3, #4]
    return new_array;
   14dd2:	687b      	ldr	r3, [r7, #4]
}
   14dd4:	0018      	movs	r0, r3
   14dd6:	46bd      	mov	sp, r7
   14dd8:	b002      	add	sp, #8
   14dda:	bd80      	pop	{r7, pc}
   14ddc:	20000158 	.word	0x20000158

00014de0 <json_array_add>:

static JSON_Status json_array_add(JSON_Array *array, JSON_Value *value) {
   14de0:	b580      	push	{r7, lr}
   14de2:	b084      	sub	sp, #16
   14de4:	af00      	add	r7, sp, #0
   14de6:	6078      	str	r0, [r7, #4]
   14de8:	6039      	str	r1, [r7, #0]
    if (array->count >= array->capacity) {
   14dea:	687b      	ldr	r3, [r7, #4]
   14dec:	685a      	ldr	r2, [r3, #4]
   14dee:	687b      	ldr	r3, [r7, #4]
   14df0:	689b      	ldr	r3, [r3, #8]
   14df2:	429a      	cmp	r2, r3
   14df4:	d31a      	bcc.n	14e2c <json_array_add+0x4c>
        size_t new_capacity = MAX(array->capacity * 2, STARTING_CAPACITY);
   14df6:	687b      	ldr	r3, [r7, #4]
   14df8:	689b      	ldr	r3, [r3, #8]
   14dfa:	005b      	lsls	r3, r3, #1
   14dfc:	2b0f      	cmp	r3, #15
   14dfe:	d200      	bcs.n	14e02 <json_array_add+0x22>
   14e00:	230f      	movs	r3, #15
   14e02:	60fb      	str	r3, [r7, #12]
        if (new_capacity > ARRAY_MAX_CAPACITY)
   14e04:	68fa      	ldr	r2, [r7, #12]
   14e06:	23f0      	movs	r3, #240	; 0xf0
   14e08:	025b      	lsls	r3, r3, #9
   14e0a:	429a      	cmp	r2, r3
   14e0c:	d902      	bls.n	14e14 <json_array_add+0x34>
            return JSONFailure;
   14e0e:	2301      	movs	r3, #1
   14e10:	425b      	negs	r3, r3
   14e12:	e019      	b.n	14e48 <json_array_add+0x68>
        if (json_array_resize(array, new_capacity) == JSONFailure)
   14e14:	68fa      	ldr	r2, [r7, #12]
   14e16:	687b      	ldr	r3, [r7, #4]
   14e18:	0011      	movs	r1, r2
   14e1a:	0018      	movs	r0, r3
   14e1c:	4b0c      	ldr	r3, [pc, #48]	; (14e50 <json_array_add+0x70>)
   14e1e:	4798      	blx	r3
   14e20:	0003      	movs	r3, r0
   14e22:	3301      	adds	r3, #1
   14e24:	d102      	bne.n	14e2c <json_array_add+0x4c>
            return JSONFailure;
   14e26:	2301      	movs	r3, #1
   14e28:	425b      	negs	r3, r3
   14e2a:	e00d      	b.n	14e48 <json_array_add+0x68>
    }
    array->items[array->count] = value;
   14e2c:	687b      	ldr	r3, [r7, #4]
   14e2e:	681a      	ldr	r2, [r3, #0]
   14e30:	687b      	ldr	r3, [r7, #4]
   14e32:	685b      	ldr	r3, [r3, #4]
   14e34:	009b      	lsls	r3, r3, #2
   14e36:	18d3      	adds	r3, r2, r3
   14e38:	683a      	ldr	r2, [r7, #0]
   14e3a:	601a      	str	r2, [r3, #0]
    array->count++;
   14e3c:	687b      	ldr	r3, [r7, #4]
   14e3e:	685b      	ldr	r3, [r3, #4]
   14e40:	1c5a      	adds	r2, r3, #1
   14e42:	687b      	ldr	r3, [r7, #4]
   14e44:	605a      	str	r2, [r3, #4]
    return JSONSuccess;
   14e46:	2300      	movs	r3, #0
}
   14e48:	0018      	movs	r0, r3
   14e4a:	46bd      	mov	sp, r7
   14e4c:	b004      	add	sp, #16
   14e4e:	bd80      	pop	{r7, pc}
   14e50:	00014e55 	.word	0x00014e55

00014e54 <json_array_resize>:

static JSON_Status json_array_resize(JSON_Array *array, size_t new_capacity) {
   14e54:	b580      	push	{r7, lr}
   14e56:	b084      	sub	sp, #16
   14e58:	af00      	add	r7, sp, #0
   14e5a:	6078      	str	r0, [r7, #4]
   14e5c:	6039      	str	r1, [r7, #0]
    JSON_Value **new_items = NULL;
   14e5e:	2300      	movs	r3, #0
   14e60:	60fb      	str	r3, [r7, #12]
    if (new_capacity == 0) {
   14e62:	683b      	ldr	r3, [r7, #0]
   14e64:	2b00      	cmp	r3, #0
   14e66:	d102      	bne.n	14e6e <json_array_resize+0x1a>
        return JSONFailure;
   14e68:	2301      	movs	r3, #1
   14e6a:	425b      	negs	r3, r3
   14e6c:	e02b      	b.n	14ec6 <json_array_resize+0x72>
    }
    new_items = parson_malloc(new_capacity * sizeof(JSON_Value*));
   14e6e:	4b18      	ldr	r3, [pc, #96]	; (14ed0 <json_array_resize+0x7c>)
   14e70:	681b      	ldr	r3, [r3, #0]
   14e72:	683a      	ldr	r2, [r7, #0]
   14e74:	0092      	lsls	r2, r2, #2
   14e76:	0010      	movs	r0, r2
   14e78:	4798      	blx	r3
   14e7a:	0003      	movs	r3, r0
   14e7c:	60fb      	str	r3, [r7, #12]
    if (new_items == NULL) {
   14e7e:	68fb      	ldr	r3, [r7, #12]
   14e80:	2b00      	cmp	r3, #0
   14e82:	d102      	bne.n	14e8a <json_array_resize+0x36>
        return JSONFailure;
   14e84:	2301      	movs	r3, #1
   14e86:	425b      	negs	r3, r3
   14e88:	e01d      	b.n	14ec6 <json_array_resize+0x72>
    }
    if (array->items != NULL && array->count > 0) {
   14e8a:	687b      	ldr	r3, [r7, #4]
   14e8c:	681b      	ldr	r3, [r3, #0]
   14e8e:	2b00      	cmp	r3, #0
   14e90:	d00c      	beq.n	14eac <json_array_resize+0x58>
   14e92:	687b      	ldr	r3, [r7, #4]
   14e94:	685b      	ldr	r3, [r3, #4]
   14e96:	2b00      	cmp	r3, #0
   14e98:	d008      	beq.n	14eac <json_array_resize+0x58>
        memcpy(new_items, array->items, array->count * sizeof(JSON_Value*));
   14e9a:	687b      	ldr	r3, [r7, #4]
   14e9c:	6819      	ldr	r1, [r3, #0]
   14e9e:	687b      	ldr	r3, [r7, #4]
   14ea0:	685b      	ldr	r3, [r3, #4]
   14ea2:	009a      	lsls	r2, r3, #2
   14ea4:	68fb      	ldr	r3, [r7, #12]
   14ea6:	0018      	movs	r0, r3
   14ea8:	4b0a      	ldr	r3, [pc, #40]	; (14ed4 <json_array_resize+0x80>)
   14eaa:	4798      	blx	r3
    }
    parson_free(array->items);
   14eac:	4b0a      	ldr	r3, [pc, #40]	; (14ed8 <json_array_resize+0x84>)
   14eae:	681a      	ldr	r2, [r3, #0]
   14eb0:	687b      	ldr	r3, [r7, #4]
   14eb2:	681b      	ldr	r3, [r3, #0]
   14eb4:	0018      	movs	r0, r3
   14eb6:	4790      	blx	r2
    array->items = new_items;
   14eb8:	687b      	ldr	r3, [r7, #4]
   14eba:	68fa      	ldr	r2, [r7, #12]
   14ebc:	601a      	str	r2, [r3, #0]
    array->capacity = new_capacity;
   14ebe:	687b      	ldr	r3, [r7, #4]
   14ec0:	683a      	ldr	r2, [r7, #0]
   14ec2:	609a      	str	r2, [r3, #8]
    return JSONSuccess;
   14ec4:	2300      	movs	r3, #0
}
   14ec6:	0018      	movs	r0, r3
   14ec8:	46bd      	mov	sp, r7
   14eca:	b004      	add	sp, #16
   14ecc:	bd80      	pop	{r7, pc}
   14ece:	46c0      	nop			; (mov r8, r8)
   14ed0:	20000158 	.word	0x20000158
   14ed4:	0001c13d 	.word	0x0001c13d
   14ed8:	2000015c 	.word	0x2000015c

00014edc <json_array_free>:

static void json_array_free(JSON_Array *array) {
   14edc:	b580      	push	{r7, lr}
   14ede:	b082      	sub	sp, #8
   14ee0:	af00      	add	r7, sp, #0
   14ee2:	6078      	str	r0, [r7, #4]
    while (array->count--)
   14ee4:	e009      	b.n	14efa <json_array_free+0x1e>
        json_value_free(array->items[array->count]);
   14ee6:	687b      	ldr	r3, [r7, #4]
   14ee8:	681a      	ldr	r2, [r3, #0]
   14eea:	687b      	ldr	r3, [r7, #4]
   14eec:	685b      	ldr	r3, [r3, #4]
   14eee:	009b      	lsls	r3, r3, #2
   14ef0:	18d3      	adds	r3, r2, r3
   14ef2:	681b      	ldr	r3, [r3, #0]
   14ef4:	0018      	movs	r0, r3
   14ef6:	4b0c      	ldr	r3, [pc, #48]	; (14f28 <json_array_free+0x4c>)
   14ef8:	4798      	blx	r3
    while (array->count--)
   14efa:	687b      	ldr	r3, [r7, #4]
   14efc:	685b      	ldr	r3, [r3, #4]
   14efe:	1e59      	subs	r1, r3, #1
   14f00:	687a      	ldr	r2, [r7, #4]
   14f02:	6051      	str	r1, [r2, #4]
   14f04:	2b00      	cmp	r3, #0
   14f06:	d1ee      	bne.n	14ee6 <json_array_free+0xa>
    parson_free(array->items);
   14f08:	4b08      	ldr	r3, [pc, #32]	; (14f2c <json_array_free+0x50>)
   14f0a:	681a      	ldr	r2, [r3, #0]
   14f0c:	687b      	ldr	r3, [r7, #4]
   14f0e:	681b      	ldr	r3, [r3, #0]
   14f10:	0018      	movs	r0, r3
   14f12:	4790      	blx	r2
    parson_free(array);
   14f14:	4b05      	ldr	r3, [pc, #20]	; (14f2c <json_array_free+0x50>)
   14f16:	681b      	ldr	r3, [r3, #0]
   14f18:	687a      	ldr	r2, [r7, #4]
   14f1a:	0010      	movs	r0, r2
   14f1c:	4798      	blx	r3
}
   14f1e:	46c0      	nop			; (mov r8, r8)
   14f20:	46bd      	mov	sp, r7
   14f22:	b002      	add	sp, #8
   14f24:	bd80      	pop	{r7, pc}
   14f26:	46c0      	nop			; (mov r8, r8)
   14f28:	00015ca1 	.word	0x00015ca1
   14f2c:	2000015c 	.word	0x2000015c

00014f30 <json_value_init_string_no_copy>:

/* JSON Value */
static JSON_Value * json_value_init_string_no_copy(char *string) {
   14f30:	b580      	push	{r7, lr}
   14f32:	b084      	sub	sp, #16
   14f34:	af00      	add	r7, sp, #0
   14f36:	6078      	str	r0, [r7, #4]
    JSON_Value *new_value = (JSON_Value*)parson_malloc(sizeof(JSON_Value));
   14f38:	4b0a      	ldr	r3, [pc, #40]	; (14f64 <json_value_init_string_no_copy+0x34>)
   14f3a:	681b      	ldr	r3, [r3, #0]
   14f3c:	2010      	movs	r0, #16
   14f3e:	4798      	blx	r3
   14f40:	0003      	movs	r3, r0
   14f42:	60fb      	str	r3, [r7, #12]
    if (!new_value)
   14f44:	68fb      	ldr	r3, [r7, #12]
   14f46:	2b00      	cmp	r3, #0
   14f48:	d101      	bne.n	14f4e <json_value_init_string_no_copy+0x1e>
        return NULL;
   14f4a:	2300      	movs	r3, #0
   14f4c:	e006      	b.n	14f5c <json_value_init_string_no_copy+0x2c>
    new_value->type = JSONString;
   14f4e:	68fb      	ldr	r3, [r7, #12]
   14f50:	2202      	movs	r2, #2
   14f52:	601a      	str	r2, [r3, #0]
    new_value->value.string = string;
   14f54:	68fb      	ldr	r3, [r7, #12]
   14f56:	687a      	ldr	r2, [r7, #4]
   14f58:	609a      	str	r2, [r3, #8]
    return new_value;
   14f5a:	68fb      	ldr	r3, [r7, #12]
}
   14f5c:	0018      	movs	r0, r3
   14f5e:	46bd      	mov	sp, r7
   14f60:	b004      	add	sp, #16
   14f62:	bd80      	pop	{r7, pc}
   14f64:	20000158 	.word	0x20000158

00014f68 <skip_quotes>:

/* Parser */
static void skip_quotes(const char **string) {
   14f68:	b580      	push	{r7, lr}
   14f6a:	b082      	sub	sp, #8
   14f6c:	af00      	add	r7, sp, #0
   14f6e:	6078      	str	r0, [r7, #4]
    SKIP_CHAR(string);
   14f70:	687b      	ldr	r3, [r7, #4]
   14f72:	681b      	ldr	r3, [r3, #0]
   14f74:	1c5a      	adds	r2, r3, #1
   14f76:	687b      	ldr	r3, [r7, #4]
   14f78:	601a      	str	r2, [r3, #0]
    while (**string != '\"') {
   14f7a:	e018      	b.n	14fae <skip_quotes+0x46>
        if (**string == '\0')
   14f7c:	687b      	ldr	r3, [r7, #4]
   14f7e:	681b      	ldr	r3, [r3, #0]
   14f80:	781b      	ldrb	r3, [r3, #0]
   14f82:	2b00      	cmp	r3, #0
   14f84:	d01e      	beq.n	14fc4 <skip_quotes+0x5c>
            return;
        if (**string == '\\') {
   14f86:	687b      	ldr	r3, [r7, #4]
   14f88:	681b      	ldr	r3, [r3, #0]
   14f8a:	781b      	ldrb	r3, [r3, #0]
   14f8c:	2b5c      	cmp	r3, #92	; 0x5c
   14f8e:	d109      	bne.n	14fa4 <skip_quotes+0x3c>
            SKIP_CHAR(string);
   14f90:	687b      	ldr	r3, [r7, #4]
   14f92:	681b      	ldr	r3, [r3, #0]
   14f94:	1c5a      	adds	r2, r3, #1
   14f96:	687b      	ldr	r3, [r7, #4]
   14f98:	601a      	str	r2, [r3, #0]
            if (**string == '\0')
   14f9a:	687b      	ldr	r3, [r7, #4]
   14f9c:	681b      	ldr	r3, [r3, #0]
   14f9e:	781b      	ldrb	r3, [r3, #0]
   14fa0:	2b00      	cmp	r3, #0
   14fa2:	d011      	beq.n	14fc8 <skip_quotes+0x60>
                return;
        }
        SKIP_CHAR(string);
   14fa4:	687b      	ldr	r3, [r7, #4]
   14fa6:	681b      	ldr	r3, [r3, #0]
   14fa8:	1c5a      	adds	r2, r3, #1
   14faa:	687b      	ldr	r3, [r7, #4]
   14fac:	601a      	str	r2, [r3, #0]
    while (**string != '\"') {
   14fae:	687b      	ldr	r3, [r7, #4]
   14fb0:	681b      	ldr	r3, [r3, #0]
   14fb2:	781b      	ldrb	r3, [r3, #0]
   14fb4:	2b22      	cmp	r3, #34	; 0x22
   14fb6:	d1e1      	bne.n	14f7c <skip_quotes+0x14>
    }
    SKIP_CHAR(string);
   14fb8:	687b      	ldr	r3, [r7, #4]
   14fba:	681b      	ldr	r3, [r3, #0]
   14fbc:	1c5a      	adds	r2, r3, #1
   14fbe:	687b      	ldr	r3, [r7, #4]
   14fc0:	601a      	str	r2, [r3, #0]
   14fc2:	e002      	b.n	14fca <skip_quotes+0x62>
            return;
   14fc4:	46c0      	nop			; (mov r8, r8)
   14fc6:	e000      	b.n	14fca <skip_quotes+0x62>
                return;
   14fc8:	46c0      	nop			; (mov r8, r8)
}
   14fca:	46bd      	mov	sp, r7
   14fcc:	b002      	add	sp, #8
   14fce:	bd80      	pop	{r7, pc}

00014fd0 <parse_utf_16>:

static int parse_utf_16(const char **unprocessed, char **processed) {
   14fd0:	b580      	push	{r7, lr}
   14fd2:	b088      	sub	sp, #32
   14fd4:	af00      	add	r7, sp, #0
   14fd6:	6078      	str	r0, [r7, #4]
   14fd8:	6039      	str	r1, [r7, #0]
    unsigned int cp, lead, trail;
    char *processed_ptr = *processed;
   14fda:	683b      	ldr	r3, [r7, #0]
   14fdc:	681b      	ldr	r3, [r3, #0]
   14fde:	61fb      	str	r3, [r7, #28]
    const char *unprocessed_ptr = *unprocessed;
   14fe0:	687b      	ldr	r3, [r7, #4]
   14fe2:	681b      	ldr	r3, [r3, #0]
   14fe4:	61bb      	str	r3, [r7, #24]
    unprocessed_ptr++; /* skips u */
   14fe6:	69bb      	ldr	r3, [r7, #24]
   14fe8:	3301      	adds	r3, #1
   14fea:	61bb      	str	r3, [r7, #24]
    if (!is_utf16_hex((const unsigned char*)unprocessed_ptr) || sscanf(unprocessed_ptr, "%4x", &cp) == EOF)
   14fec:	69bb      	ldr	r3, [r7, #24]
   14fee:	0018      	movs	r0, r3
   14ff0:	4b77      	ldr	r3, [pc, #476]	; (151d0 <parse_utf_16+0x200>)
   14ff2:	4798      	blx	r3
   14ff4:	1e03      	subs	r3, r0, #0
   14ff6:	d009      	beq.n	1500c <parse_utf_16+0x3c>
   14ff8:	2310      	movs	r3, #16
   14ffa:	18fa      	adds	r2, r7, r3
   14ffc:	4975      	ldr	r1, [pc, #468]	; (151d4 <parse_utf_16+0x204>)
   14ffe:	69bb      	ldr	r3, [r7, #24]
   15000:	0018      	movs	r0, r3
   15002:	4b75      	ldr	r3, [pc, #468]	; (151d8 <parse_utf_16+0x208>)
   15004:	4798      	blx	r3
   15006:	0003      	movs	r3, r0
   15008:	3301      	adds	r3, #1
   1500a:	d102      	bne.n	15012 <parse_utf_16+0x42>
            return JSONFailure;
   1500c:	2301      	movs	r3, #1
   1500e:	425b      	negs	r3, r3
   15010:	e0da      	b.n	151c8 <parse_utf_16+0x1f8>
    if (cp < 0x80) {
   15012:	693b      	ldr	r3, [r7, #16]
   15014:	2b7f      	cmp	r3, #127	; 0x7f
   15016:	d804      	bhi.n	15022 <parse_utf_16+0x52>
        *processed_ptr = cp; /* 0xxxxxxx */
   15018:	693b      	ldr	r3, [r7, #16]
   1501a:	b2da      	uxtb	r2, r3
   1501c:	69fb      	ldr	r3, [r7, #28]
   1501e:	701a      	strb	r2, [r3, #0]
   15020:	e0c8      	b.n	151b4 <parse_utf_16+0x1e4>
    } else if (cp < 0x800) {
   15022:	693b      	ldr	r3, [r7, #16]
   15024:	4a6d      	ldr	r2, [pc, #436]	; (151dc <parse_utf_16+0x20c>)
   15026:	4293      	cmp	r3, r2
   15028:	d819      	bhi.n	1505e <parse_utf_16+0x8e>
        *processed_ptr++ = ((cp >> 6) & 0x1F) | 0xC0; /* 110xxxxx */
   1502a:	69fb      	ldr	r3, [r7, #28]
   1502c:	1c5a      	adds	r2, r3, #1
   1502e:	61fa      	str	r2, [r7, #28]
   15030:	693a      	ldr	r2, [r7, #16]
   15032:	0992      	lsrs	r2, r2, #6
   15034:	b2d2      	uxtb	r2, r2
   15036:	211f      	movs	r1, #31
   15038:	400a      	ands	r2, r1
   1503a:	b2d2      	uxtb	r2, r2
   1503c:	2140      	movs	r1, #64	; 0x40
   1503e:	4249      	negs	r1, r1
   15040:	430a      	orrs	r2, r1
   15042:	b2d2      	uxtb	r2, r2
   15044:	701a      	strb	r2, [r3, #0]
        *processed_ptr   = ((cp     ) & 0x3F) | 0x80; /* 10xxxxxx */
   15046:	693b      	ldr	r3, [r7, #16]
   15048:	b2db      	uxtb	r3, r3
   1504a:	223f      	movs	r2, #63	; 0x3f
   1504c:	4013      	ands	r3, r2
   1504e:	b2db      	uxtb	r3, r3
   15050:	2280      	movs	r2, #128	; 0x80
   15052:	4252      	negs	r2, r2
   15054:	4313      	orrs	r3, r2
   15056:	b2da      	uxtb	r2, r3
   15058:	69fb      	ldr	r3, [r7, #28]
   1505a:	701a      	strb	r2, [r3, #0]
   1505c:	e0aa      	b.n	151b4 <parse_utf_16+0x1e4>
    } else if (cp < 0xD800 || cp > 0xDFFF) {
   1505e:	693b      	ldr	r3, [r7, #16]
   15060:	4a5f      	ldr	r2, [pc, #380]	; (151e0 <parse_utf_16+0x210>)
   15062:	4293      	cmp	r3, r2
   15064:	d903      	bls.n	1506e <parse_utf_16+0x9e>
   15066:	693b      	ldr	r3, [r7, #16]
   15068:	4a5e      	ldr	r2, [pc, #376]	; (151e4 <parse_utf_16+0x214>)
   1506a:	4293      	cmp	r3, r2
   1506c:	d927      	bls.n	150be <parse_utf_16+0xee>
        *processed_ptr++ = ((cp >> 12) & 0x0F) | 0xE0; /* 1110xxxx */
   1506e:	69fb      	ldr	r3, [r7, #28]
   15070:	1c5a      	adds	r2, r3, #1
   15072:	61fa      	str	r2, [r7, #28]
   15074:	693a      	ldr	r2, [r7, #16]
   15076:	0b12      	lsrs	r2, r2, #12
   15078:	b2d2      	uxtb	r2, r2
   1507a:	210f      	movs	r1, #15
   1507c:	400a      	ands	r2, r1
   1507e:	b2d2      	uxtb	r2, r2
   15080:	2120      	movs	r1, #32
   15082:	4249      	negs	r1, r1
   15084:	430a      	orrs	r2, r1
   15086:	b2d2      	uxtb	r2, r2
   15088:	701a      	strb	r2, [r3, #0]
        *processed_ptr++ = ((cp >> 6)  & 0x3F) | 0x80; /* 10xxxxxx */
   1508a:	69fb      	ldr	r3, [r7, #28]
   1508c:	1c5a      	adds	r2, r3, #1
   1508e:	61fa      	str	r2, [r7, #28]
   15090:	693a      	ldr	r2, [r7, #16]
   15092:	0992      	lsrs	r2, r2, #6
   15094:	b2d2      	uxtb	r2, r2
   15096:	213f      	movs	r1, #63	; 0x3f
   15098:	400a      	ands	r2, r1
   1509a:	b2d2      	uxtb	r2, r2
   1509c:	2180      	movs	r1, #128	; 0x80
   1509e:	4249      	negs	r1, r1
   150a0:	430a      	orrs	r2, r1
   150a2:	b2d2      	uxtb	r2, r2
   150a4:	701a      	strb	r2, [r3, #0]
        *processed_ptr   = ((cp     )  & 0x3F) | 0x80; /* 10xxxxxx */
   150a6:	693b      	ldr	r3, [r7, #16]
   150a8:	b2db      	uxtb	r3, r3
   150aa:	223f      	movs	r2, #63	; 0x3f
   150ac:	4013      	ands	r3, r2
   150ae:	b2db      	uxtb	r3, r3
   150b0:	2280      	movs	r2, #128	; 0x80
   150b2:	4252      	negs	r2, r2
   150b4:	4313      	orrs	r3, r2
   150b6:	b2da      	uxtb	r2, r3
   150b8:	69fb      	ldr	r3, [r7, #28]
   150ba:	701a      	strb	r2, [r3, #0]
   150bc:	e07a      	b.n	151b4 <parse_utf_16+0x1e4>
    } else if (cp >= 0xD800 && cp <= 0xDBFF) { /* lead surrogate (0xD800..0xDBFF) */
   150be:	693b      	ldr	r3, [r7, #16]
   150c0:	4a47      	ldr	r2, [pc, #284]	; (151e0 <parse_utf_16+0x210>)
   150c2:	4293      	cmp	r3, r2
   150c4:	d800      	bhi.n	150c8 <parse_utf_16+0xf8>
   150c6:	e072      	b.n	151ae <parse_utf_16+0x1de>
   150c8:	693b      	ldr	r3, [r7, #16]
   150ca:	4a47      	ldr	r2, [pc, #284]	; (151e8 <parse_utf_16+0x218>)
   150cc:	4293      	cmp	r3, r2
   150ce:	d86e      	bhi.n	151ae <parse_utf_16+0x1de>
        lead = cp;
   150d0:	693b      	ldr	r3, [r7, #16]
   150d2:	617b      	str	r3, [r7, #20]
        unprocessed_ptr += 4; /* should always be within the buffer, otherwise previous sscanf would fail */
   150d4:	69bb      	ldr	r3, [r7, #24]
   150d6:	3304      	adds	r3, #4
   150d8:	61bb      	str	r3, [r7, #24]
        if (*unprocessed_ptr++ != '\\' || *unprocessed_ptr++ != 'u' || /* starts with \u? */
   150da:	69bb      	ldr	r3, [r7, #24]
   150dc:	1c5a      	adds	r2, r3, #1
   150de:	61ba      	str	r2, [r7, #24]
   150e0:	781b      	ldrb	r3, [r3, #0]
   150e2:	2b5c      	cmp	r3, #92	; 0x5c
   150e4:	d11d      	bne.n	15122 <parse_utf_16+0x152>
   150e6:	69bb      	ldr	r3, [r7, #24]
   150e8:	1c5a      	adds	r2, r3, #1
   150ea:	61ba      	str	r2, [r7, #24]
   150ec:	781b      	ldrb	r3, [r3, #0]
   150ee:	2b75      	cmp	r3, #117	; 0x75
   150f0:	d117      	bne.n	15122 <parse_utf_16+0x152>
            !is_utf16_hex((const unsigned char*)unprocessed_ptr)          ||
   150f2:	69bb      	ldr	r3, [r7, #24]
   150f4:	0018      	movs	r0, r3
   150f6:	4b36      	ldr	r3, [pc, #216]	; (151d0 <parse_utf_16+0x200>)
   150f8:	4798      	blx	r3
   150fa:	1e03      	subs	r3, r0, #0
        if (*unprocessed_ptr++ != '\\' || *unprocessed_ptr++ != 'u' || /* starts with \u? */
   150fc:	d011      	beq.n	15122 <parse_utf_16+0x152>
            sscanf(unprocessed_ptr, "%4x", &trail) == EOF           ||
   150fe:	230c      	movs	r3, #12
   15100:	18fa      	adds	r2, r7, r3
   15102:	4934      	ldr	r1, [pc, #208]	; (151d4 <parse_utf_16+0x204>)
   15104:	69bb      	ldr	r3, [r7, #24]
   15106:	0018      	movs	r0, r3
   15108:	4b33      	ldr	r3, [pc, #204]	; (151d8 <parse_utf_16+0x208>)
   1510a:	4798      	blx	r3
   1510c:	0003      	movs	r3, r0
            !is_utf16_hex((const unsigned char*)unprocessed_ptr)          ||
   1510e:	3301      	adds	r3, #1
   15110:	d007      	beq.n	15122 <parse_utf_16+0x152>
            trail < 0xDC00 || trail > 0xDFFF) { /* valid trail surrogate? (0xDC00..0xDFFF) */
   15112:	68fb      	ldr	r3, [r7, #12]
            sscanf(unprocessed_ptr, "%4x", &trail) == EOF           ||
   15114:	4a34      	ldr	r2, [pc, #208]	; (151e8 <parse_utf_16+0x218>)
   15116:	4293      	cmp	r3, r2
   15118:	d903      	bls.n	15122 <parse_utf_16+0x152>
            trail < 0xDC00 || trail > 0xDFFF) { /* valid trail surrogate? (0xDC00..0xDFFF) */
   1511a:	68fb      	ldr	r3, [r7, #12]
   1511c:	4a31      	ldr	r2, [pc, #196]	; (151e4 <parse_utf_16+0x214>)
   1511e:	4293      	cmp	r3, r2
   15120:	d902      	bls.n	15128 <parse_utf_16+0x158>
                return JSONFailure;
   15122:	2301      	movs	r3, #1
   15124:	425b      	negs	r3, r3
   15126:	e04f      	b.n	151c8 <parse_utf_16+0x1f8>
        }
        cp = ((((lead-0xD800)&0x3FF)<<10)|((trail-0xDC00)&0x3FF))+0x010000;
   15128:	697b      	ldr	r3, [r7, #20]
   1512a:	029b      	lsls	r3, r3, #10
   1512c:	4a2f      	ldr	r2, [pc, #188]	; (151ec <parse_utf_16+0x21c>)
   1512e:	401a      	ands	r2, r3
   15130:	68fb      	ldr	r3, [r7, #12]
   15132:	059b      	lsls	r3, r3, #22
   15134:	0d9b      	lsrs	r3, r3, #22
   15136:	4313      	orrs	r3, r2
   15138:	2280      	movs	r2, #128	; 0x80
   1513a:	0252      	lsls	r2, r2, #9
   1513c:	4694      	mov	ip, r2
   1513e:	4463      	add	r3, ip
   15140:	613b      	str	r3, [r7, #16]
        *processed_ptr++ = (((cp >> 18) & 0x07) | 0xF0); /* 11110xxx */
   15142:	69fb      	ldr	r3, [r7, #28]
   15144:	1c5a      	adds	r2, r3, #1
   15146:	61fa      	str	r2, [r7, #28]
   15148:	693a      	ldr	r2, [r7, #16]
   1514a:	0c92      	lsrs	r2, r2, #18
   1514c:	b2d2      	uxtb	r2, r2
   1514e:	2107      	movs	r1, #7
   15150:	400a      	ands	r2, r1
   15152:	b2d2      	uxtb	r2, r2
   15154:	2110      	movs	r1, #16
   15156:	4249      	negs	r1, r1
   15158:	430a      	orrs	r2, r1
   1515a:	b2d2      	uxtb	r2, r2
   1515c:	701a      	strb	r2, [r3, #0]
        *processed_ptr++ = (((cp >> 12) & 0x3F) | 0x80); /* 10xxxxxx */
   1515e:	69fb      	ldr	r3, [r7, #28]
   15160:	1c5a      	adds	r2, r3, #1
   15162:	61fa      	str	r2, [r7, #28]
   15164:	693a      	ldr	r2, [r7, #16]
   15166:	0b12      	lsrs	r2, r2, #12
   15168:	b2d2      	uxtb	r2, r2
   1516a:	213f      	movs	r1, #63	; 0x3f
   1516c:	400a      	ands	r2, r1
   1516e:	b2d2      	uxtb	r2, r2
   15170:	2180      	movs	r1, #128	; 0x80
   15172:	4249      	negs	r1, r1
   15174:	430a      	orrs	r2, r1
   15176:	b2d2      	uxtb	r2, r2
   15178:	701a      	strb	r2, [r3, #0]
        *processed_ptr++ = (((cp >> 6)  & 0x3F) | 0x80); /* 10xxxxxx */
   1517a:	69fb      	ldr	r3, [r7, #28]
   1517c:	1c5a      	adds	r2, r3, #1
   1517e:	61fa      	str	r2, [r7, #28]
   15180:	693a      	ldr	r2, [r7, #16]
   15182:	0992      	lsrs	r2, r2, #6
   15184:	b2d2      	uxtb	r2, r2
   15186:	213f      	movs	r1, #63	; 0x3f
   15188:	400a      	ands	r2, r1
   1518a:	b2d2      	uxtb	r2, r2
   1518c:	2180      	movs	r1, #128	; 0x80
   1518e:	4249      	negs	r1, r1
   15190:	430a      	orrs	r2, r1
   15192:	b2d2      	uxtb	r2, r2
   15194:	701a      	strb	r2, [r3, #0]
        *processed_ptr   = (((cp     )  & 0x3F) | 0x80); /* 10xxxxxx */
   15196:	693b      	ldr	r3, [r7, #16]
   15198:	b2db      	uxtb	r3, r3
   1519a:	223f      	movs	r2, #63	; 0x3f
   1519c:	4013      	ands	r3, r2
   1519e:	b2db      	uxtb	r3, r3
   151a0:	2280      	movs	r2, #128	; 0x80
   151a2:	4252      	negs	r2, r2
   151a4:	4313      	orrs	r3, r2
   151a6:	b2da      	uxtb	r2, r3
   151a8:	69fb      	ldr	r3, [r7, #28]
   151aa:	701a      	strb	r2, [r3, #0]
   151ac:	e002      	b.n	151b4 <parse_utf_16+0x1e4>
    } else { /* trail surrogate before lead surrogate */
        return JSONFailure;
   151ae:	2301      	movs	r3, #1
   151b0:	425b      	negs	r3, r3
   151b2:	e009      	b.n	151c8 <parse_utf_16+0x1f8>
    }
    unprocessed_ptr += 3;
   151b4:	69bb      	ldr	r3, [r7, #24]
   151b6:	3303      	adds	r3, #3
   151b8:	61bb      	str	r3, [r7, #24]
    *processed = processed_ptr;
   151ba:	683b      	ldr	r3, [r7, #0]
   151bc:	69fa      	ldr	r2, [r7, #28]
   151be:	601a      	str	r2, [r3, #0]
    *unprocessed = unprocessed_ptr;
   151c0:	687b      	ldr	r3, [r7, #4]
   151c2:	69ba      	ldr	r2, [r7, #24]
   151c4:	601a      	str	r2, [r3, #0]
    return JSONSuccess;
   151c6:	2300      	movs	r3, #0
}
   151c8:	0018      	movs	r0, r3
   151ca:	46bd      	mov	sp, r7
   151cc:	b008      	add	sp, #32
   151ce:	bd80      	pop	{r7, pc}
   151d0:	0001497d 	.word	0x0001497d
   151d4:	00020ff4 	.word	0x00020ff4
   151d8:	0001c5f9 	.word	0x0001c5f9
   151dc:	000007ff 	.word	0x000007ff
   151e0:	0000d7ff 	.word	0x0000d7ff
   151e4:	0000dfff 	.word	0x0000dfff
   151e8:	0000dbff 	.word	0x0000dbff
   151ec:	000ffc00 	.word	0x000ffc00

000151f0 <process_string>:


/* Copies and processes passed string up to supplied length.
Example: "\u006Corem ipsum" -> lorem ipsum */
static char* process_string(const char *input, size_t len) {
   151f0:	b580      	push	{r7, lr}
   151f2:	b088      	sub	sp, #32
   151f4:	af00      	add	r7, sp, #0
   151f6:	6078      	str	r0, [r7, #4]
   151f8:	6039      	str	r1, [r7, #0]
    const char *input_ptr = input;
   151fa:	687b      	ldr	r3, [r7, #4]
   151fc:	60fb      	str	r3, [r7, #12]
    size_t initial_size = (len + 1) * sizeof(char);
   151fe:	683b      	ldr	r3, [r7, #0]
   15200:	3301      	adds	r3, #1
   15202:	61fb      	str	r3, [r7, #28]
    size_t final_size = 0;
   15204:	2300      	movs	r3, #0
   15206:	61bb      	str	r3, [r7, #24]
    char *output = (char*)parson_malloc(initial_size);
   15208:	4b4a      	ldr	r3, [pc, #296]	; (15334 <process_string+0x144>)
   1520a:	681b      	ldr	r3, [r3, #0]
   1520c:	69fa      	ldr	r2, [r7, #28]
   1520e:	0010      	movs	r0, r2
   15210:	4798      	blx	r3
   15212:	0003      	movs	r3, r0
   15214:	617b      	str	r3, [r7, #20]
    char *output_ptr = output;
   15216:	697b      	ldr	r3, [r7, #20]
   15218:	60bb      	str	r3, [r7, #8]
    char *resized_output = NULL;
   1521a:	2300      	movs	r3, #0
   1521c:	613b      	str	r3, [r7, #16]
    while ((*input_ptr != '\0') && (size_t)(input_ptr - input) < len) {
   1521e:	e04d      	b.n	152bc <process_string+0xcc>
        if (*input_ptr == '\\') {
   15220:	68fb      	ldr	r3, [r7, #12]
   15222:	781b      	ldrb	r3, [r3, #0]
   15224:	2b5c      	cmp	r3, #92	; 0x5c
   15226:	d139      	bne.n	1529c <process_string+0xac>
            input_ptr++;
   15228:	68fb      	ldr	r3, [r7, #12]
   1522a:	3301      	adds	r3, #1
   1522c:	60fb      	str	r3, [r7, #12]
            switch (*input_ptr) {
   1522e:	68fb      	ldr	r3, [r7, #12]
   15230:	781b      	ldrb	r3, [r3, #0]
   15232:	3b22      	subs	r3, #34	; 0x22
   15234:	2b53      	cmp	r3, #83	; 0x53
   15236:	d900      	bls.n	1523a <process_string+0x4a>
   15238:	e06c      	b.n	15314 <process_string+0x124>
   1523a:	009a      	lsls	r2, r3, #2
   1523c:	4b3e      	ldr	r3, [pc, #248]	; (15338 <process_string+0x148>)
   1523e:	18d3      	adds	r3, r2, r3
   15240:	681b      	ldr	r3, [r3, #0]
   15242:	469f      	mov	pc, r3
                case '\"': *output_ptr = '\"'; break;
   15244:	68bb      	ldr	r3, [r7, #8]
   15246:	2222      	movs	r2, #34	; 0x22
   15248:	701a      	strb	r2, [r3, #0]
   1524a:	e031      	b.n	152b0 <process_string+0xc0>
                case '\\': *output_ptr = '\\'; break;
   1524c:	68bb      	ldr	r3, [r7, #8]
   1524e:	225c      	movs	r2, #92	; 0x5c
   15250:	701a      	strb	r2, [r3, #0]
   15252:	e02d      	b.n	152b0 <process_string+0xc0>
                case '/':  *output_ptr = '/';  break;
   15254:	68bb      	ldr	r3, [r7, #8]
   15256:	222f      	movs	r2, #47	; 0x2f
   15258:	701a      	strb	r2, [r3, #0]
   1525a:	e029      	b.n	152b0 <process_string+0xc0>
                case 'b':  *output_ptr = '\b'; break;
   1525c:	68bb      	ldr	r3, [r7, #8]
   1525e:	2208      	movs	r2, #8
   15260:	701a      	strb	r2, [r3, #0]
   15262:	e025      	b.n	152b0 <process_string+0xc0>
                case 'f':  *output_ptr = '\f'; break;
   15264:	68bb      	ldr	r3, [r7, #8]
   15266:	220c      	movs	r2, #12
   15268:	701a      	strb	r2, [r3, #0]
   1526a:	e021      	b.n	152b0 <process_string+0xc0>
                case 'n':  *output_ptr = '\n'; break;
   1526c:	68bb      	ldr	r3, [r7, #8]
   1526e:	220a      	movs	r2, #10
   15270:	701a      	strb	r2, [r3, #0]
   15272:	e01d      	b.n	152b0 <process_string+0xc0>
                case 'r':  *output_ptr = '\r'; break;
   15274:	68bb      	ldr	r3, [r7, #8]
   15276:	220d      	movs	r2, #13
   15278:	701a      	strb	r2, [r3, #0]
   1527a:	e019      	b.n	152b0 <process_string+0xc0>
                case 't':  *output_ptr = '\t'; break;
   1527c:	68bb      	ldr	r3, [r7, #8]
   1527e:	2209      	movs	r2, #9
   15280:	701a      	strb	r2, [r3, #0]
   15282:	e015      	b.n	152b0 <process_string+0xc0>
                case 'u':
                    if (parse_utf_16(&input_ptr, &output_ptr) == JSONFailure)
   15284:	2308      	movs	r3, #8
   15286:	18fa      	adds	r2, r7, r3
   15288:	230c      	movs	r3, #12
   1528a:	18fb      	adds	r3, r7, r3
   1528c:	0011      	movs	r1, r2
   1528e:	0018      	movs	r0, r3
   15290:	4b2a      	ldr	r3, [pc, #168]	; (1533c <process_string+0x14c>)
   15292:	4798      	blx	r3
   15294:	0003      	movs	r3, r0
   15296:	3301      	adds	r3, #1
   15298:	d109      	bne.n	152ae <process_string+0xbe>
                        goto error;
   1529a:	e040      	b.n	1531e <process_string+0x12e>
                    break;
                default:
                    goto error;
            }
        } else if ((unsigned char)*input_ptr < 0x20) {
   1529c:	68fb      	ldr	r3, [r7, #12]
   1529e:	781b      	ldrb	r3, [r3, #0]
   152a0:	2b1f      	cmp	r3, #31
   152a2:	d939      	bls.n	15318 <process_string+0x128>
            goto error; /* 0x00-0x19 are invalid characters for json string (http://www.ietf.org/rfc/rfc4627.txt) */
        } else {
            *output_ptr = *input_ptr;
   152a4:	68bb      	ldr	r3, [r7, #8]
   152a6:	68fa      	ldr	r2, [r7, #12]
   152a8:	7812      	ldrb	r2, [r2, #0]
   152aa:	701a      	strb	r2, [r3, #0]
   152ac:	e000      	b.n	152b0 <process_string+0xc0>
                    break;
   152ae:	46c0      	nop			; (mov r8, r8)
        }
        output_ptr++;
   152b0:	68bb      	ldr	r3, [r7, #8]
   152b2:	3301      	adds	r3, #1
   152b4:	60bb      	str	r3, [r7, #8]
        input_ptr++;
   152b6:	68fb      	ldr	r3, [r7, #12]
   152b8:	3301      	adds	r3, #1
   152ba:	60fb      	str	r3, [r7, #12]
    while ((*input_ptr != '\0') && (size_t)(input_ptr - input) < len) {
   152bc:	68fb      	ldr	r3, [r7, #12]
   152be:	781b      	ldrb	r3, [r3, #0]
   152c0:	2b00      	cmp	r3, #0
   152c2:	d007      	beq.n	152d4 <process_string+0xe4>
   152c4:	68fb      	ldr	r3, [r7, #12]
   152c6:	001a      	movs	r2, r3
   152c8:	687b      	ldr	r3, [r7, #4]
   152ca:	1ad3      	subs	r3, r2, r3
   152cc:	001a      	movs	r2, r3
   152ce:	683b      	ldr	r3, [r7, #0]
   152d0:	429a      	cmp	r2, r3
   152d2:	d3a5      	bcc.n	15220 <process_string+0x30>
    }
    *output_ptr = '\0';
   152d4:	68bb      	ldr	r3, [r7, #8]
   152d6:	2200      	movs	r2, #0
   152d8:	701a      	strb	r2, [r3, #0]
    /* resize to new length */
    final_size = (size_t)(output_ptr-output) + 1;
   152da:	68bb      	ldr	r3, [r7, #8]
   152dc:	001a      	movs	r2, r3
   152de:	697b      	ldr	r3, [r7, #20]
   152e0:	1ad3      	subs	r3, r2, r3
   152e2:	3301      	adds	r3, #1
   152e4:	61bb      	str	r3, [r7, #24]
    resized_output = (char*)parson_malloc(final_size);
   152e6:	4b13      	ldr	r3, [pc, #76]	; (15334 <process_string+0x144>)
   152e8:	681b      	ldr	r3, [r3, #0]
   152ea:	69ba      	ldr	r2, [r7, #24]
   152ec:	0010      	movs	r0, r2
   152ee:	4798      	blx	r3
   152f0:	0003      	movs	r3, r0
   152f2:	613b      	str	r3, [r7, #16]
    if (resized_output == NULL)
   152f4:	693b      	ldr	r3, [r7, #16]
   152f6:	2b00      	cmp	r3, #0
   152f8:	d010      	beq.n	1531c <process_string+0x12c>
        goto error;
    memcpy(resized_output, output, final_size);
   152fa:	69ba      	ldr	r2, [r7, #24]
   152fc:	6979      	ldr	r1, [r7, #20]
   152fe:	693b      	ldr	r3, [r7, #16]
   15300:	0018      	movs	r0, r3
   15302:	4b0f      	ldr	r3, [pc, #60]	; (15340 <process_string+0x150>)
   15304:	4798      	blx	r3
    parson_free(output);
   15306:	4b0f      	ldr	r3, [pc, #60]	; (15344 <process_string+0x154>)
   15308:	681b      	ldr	r3, [r3, #0]
   1530a:	697a      	ldr	r2, [r7, #20]
   1530c:	0010      	movs	r0, r2
   1530e:	4798      	blx	r3
    return resized_output;
   15310:	693b      	ldr	r3, [r7, #16]
   15312:	e00a      	b.n	1532a <process_string+0x13a>
                    goto error;
   15314:	46c0      	nop			; (mov r8, r8)
   15316:	e002      	b.n	1531e <process_string+0x12e>
            goto error; /* 0x00-0x19 are invalid characters for json string (http://www.ietf.org/rfc/rfc4627.txt) */
   15318:	46c0      	nop			; (mov r8, r8)
   1531a:	e000      	b.n	1531e <process_string+0x12e>
        goto error;
   1531c:	46c0      	nop			; (mov r8, r8)
error:
    parson_free(output);
   1531e:	4b09      	ldr	r3, [pc, #36]	; (15344 <process_string+0x154>)
   15320:	681b      	ldr	r3, [r3, #0]
   15322:	697a      	ldr	r2, [r7, #20]
   15324:	0010      	movs	r0, r2
   15326:	4798      	blx	r3
    return NULL;
   15328:	2300      	movs	r3, #0
}
   1532a:	0018      	movs	r0, r3
   1532c:	46bd      	mov	sp, r7
   1532e:	b008      	add	sp, #32
   15330:	bd80      	pop	{r7, pc}
   15332:	46c0      	nop			; (mov r8, r8)
   15334:	20000158 	.word	0x20000158
   15338:	00021074 	.word	0x00021074
   1533c:	00014fd1 	.word	0x00014fd1
   15340:	0001c13d 	.word	0x0001c13d
   15344:	2000015c 	.word	0x2000015c

00015348 <get_quoted_string>:

/* Return processed contents of a string between quotes and
   skips passed argument to a matching quote. */
static char * get_quoted_string(const char **string) {
   15348:	b580      	push	{r7, lr}
   1534a:	b084      	sub	sp, #16
   1534c:	af00      	add	r7, sp, #0
   1534e:	6078      	str	r0, [r7, #4]
    const char *string_start = *string;
   15350:	687b      	ldr	r3, [r7, #4]
   15352:	681b      	ldr	r3, [r3, #0]
   15354:	60fb      	str	r3, [r7, #12]
    size_t string_len = 0;
   15356:	2300      	movs	r3, #0
   15358:	60bb      	str	r3, [r7, #8]
    skip_quotes(string);
   1535a:	687b      	ldr	r3, [r7, #4]
   1535c:	0018      	movs	r0, r3
   1535e:	4b0e      	ldr	r3, [pc, #56]	; (15398 <get_quoted_string+0x50>)
   15360:	4798      	blx	r3
    if (**string == '\0')
   15362:	687b      	ldr	r3, [r7, #4]
   15364:	681b      	ldr	r3, [r3, #0]
   15366:	781b      	ldrb	r3, [r3, #0]
   15368:	2b00      	cmp	r3, #0
   1536a:	d101      	bne.n	15370 <get_quoted_string+0x28>
        return NULL;
   1536c:	2300      	movs	r3, #0
   1536e:	e00e      	b.n	1538e <get_quoted_string+0x46>
    string_len = *string - string_start - 2; /* length without quotes */
   15370:	687b      	ldr	r3, [r7, #4]
   15372:	681b      	ldr	r3, [r3, #0]
   15374:	001a      	movs	r2, r3
   15376:	68fb      	ldr	r3, [r7, #12]
   15378:	1ad3      	subs	r3, r2, r3
   1537a:	3b02      	subs	r3, #2
   1537c:	60bb      	str	r3, [r7, #8]
    return process_string(string_start + 1, string_len);
   1537e:	68fb      	ldr	r3, [r7, #12]
   15380:	3301      	adds	r3, #1
   15382:	68ba      	ldr	r2, [r7, #8]
   15384:	0011      	movs	r1, r2
   15386:	0018      	movs	r0, r3
   15388:	4b04      	ldr	r3, [pc, #16]	; (1539c <get_quoted_string+0x54>)
   1538a:	4798      	blx	r3
   1538c:	0003      	movs	r3, r0
}
   1538e:	0018      	movs	r0, r3
   15390:	46bd      	mov	sp, r7
   15392:	b004      	add	sp, #16
   15394:	bd80      	pop	{r7, pc}
   15396:	46c0      	nop			; (mov r8, r8)
   15398:	00014f69 	.word	0x00014f69
   1539c:	000151f1 	.word	0x000151f1

000153a0 <parse_value>:

static JSON_Value * parse_value(const char **string, size_t nesting) {
   153a0:	b580      	push	{r7, lr}
   153a2:	b082      	sub	sp, #8
   153a4:	af00      	add	r7, sp, #0
   153a6:	6078      	str	r0, [r7, #4]
   153a8:	6039      	str	r1, [r7, #0]
    if (nesting > MAX_NESTING)
   153aa:	683b      	ldr	r3, [r7, #0]
   153ac:	2b13      	cmp	r3, #19
   153ae:	d906      	bls.n	153be <parse_value+0x1e>
        return NULL;
   153b0:	2300      	movs	r3, #0
   153b2:	e047      	b.n	15444 <parse_value+0xa4>
    SKIP_WHITESPACES(string);
   153b4:	687b      	ldr	r3, [r7, #4]
   153b6:	681b      	ldr	r3, [r3, #0]
   153b8:	1c5a      	adds	r2, r3, #1
   153ba:	687b      	ldr	r3, [r7, #4]
   153bc:	601a      	str	r2, [r3, #0]
   153be:	4b23      	ldr	r3, [pc, #140]	; (1544c <parse_value+0xac>)
   153c0:	4798      	blx	r3
   153c2:	0002      	movs	r2, r0
   153c4:	687b      	ldr	r3, [r7, #4]
   153c6:	681b      	ldr	r3, [r3, #0]
   153c8:	781b      	ldrb	r3, [r3, #0]
   153ca:	3301      	adds	r3, #1
   153cc:	18d3      	adds	r3, r2, r3
   153ce:	781b      	ldrb	r3, [r3, #0]
   153d0:	001a      	movs	r2, r3
   153d2:	2308      	movs	r3, #8
   153d4:	4013      	ands	r3, r2
   153d6:	d1ed      	bne.n	153b4 <parse_value+0x14>
    switch (**string) {
   153d8:	687b      	ldr	r3, [r7, #4]
   153da:	681b      	ldr	r3, [r3, #0]
   153dc:	781b      	ldrb	r3, [r3, #0]
   153de:	3b22      	subs	r3, #34	; 0x22
   153e0:	2b59      	cmp	r3, #89	; 0x59
   153e2:	d82e      	bhi.n	15442 <parse_value+0xa2>
   153e4:	009a      	lsls	r2, r3, #2
   153e6:	4b1a      	ldr	r3, [pc, #104]	; (15450 <parse_value+0xb0>)
   153e8:	18d3      	adds	r3, r2, r3
   153ea:	681b      	ldr	r3, [r3, #0]
   153ec:	469f      	mov	pc, r3
        case '{':
            return parse_object_value(string, nesting + 1);
   153ee:	683b      	ldr	r3, [r7, #0]
   153f0:	1c5a      	adds	r2, r3, #1
   153f2:	687b      	ldr	r3, [r7, #4]
   153f4:	0011      	movs	r1, r2
   153f6:	0018      	movs	r0, r3
   153f8:	4b16      	ldr	r3, [pc, #88]	; (15454 <parse_value+0xb4>)
   153fa:	4798      	blx	r3
   153fc:	0003      	movs	r3, r0
   153fe:	e021      	b.n	15444 <parse_value+0xa4>
        case '[':
            return parse_array_value(string, nesting + 1);
   15400:	683b      	ldr	r3, [r7, #0]
   15402:	1c5a      	adds	r2, r3, #1
   15404:	687b      	ldr	r3, [r7, #4]
   15406:	0011      	movs	r1, r2
   15408:	0018      	movs	r0, r3
   1540a:	4b13      	ldr	r3, [pc, #76]	; (15458 <parse_value+0xb8>)
   1540c:	4798      	blx	r3
   1540e:	0003      	movs	r3, r0
   15410:	e018      	b.n	15444 <parse_value+0xa4>
        case '\"':
            return parse_string_value(string);
   15412:	687b      	ldr	r3, [r7, #4]
   15414:	0018      	movs	r0, r3
   15416:	4b11      	ldr	r3, [pc, #68]	; (1545c <parse_value+0xbc>)
   15418:	4798      	blx	r3
   1541a:	0003      	movs	r3, r0
   1541c:	e012      	b.n	15444 <parse_value+0xa4>
        case 'f': case 't':
            return parse_boolean_value(string);
   1541e:	687b      	ldr	r3, [r7, #4]
   15420:	0018      	movs	r0, r3
   15422:	4b0f      	ldr	r3, [pc, #60]	; (15460 <parse_value+0xc0>)
   15424:	4798      	blx	r3
   15426:	0003      	movs	r3, r0
   15428:	e00c      	b.n	15444 <parse_value+0xa4>
        case '-':
        case '0': case '1': case '2': case '3': case '4':
        case '5': case '6': case '7': case '8': case '9':
            return parse_number_value(string);
   1542a:	687b      	ldr	r3, [r7, #4]
   1542c:	0018      	movs	r0, r3
   1542e:	4b0d      	ldr	r3, [pc, #52]	; (15464 <parse_value+0xc4>)
   15430:	4798      	blx	r3
   15432:	0003      	movs	r3, r0
   15434:	e006      	b.n	15444 <parse_value+0xa4>
        case 'n':
            return parse_null_value(string);
   15436:	687b      	ldr	r3, [r7, #4]
   15438:	0018      	movs	r0, r3
   1543a:	4b0b      	ldr	r3, [pc, #44]	; (15468 <parse_value+0xc8>)
   1543c:	4798      	blx	r3
   1543e:	0003      	movs	r3, r0
   15440:	e000      	b.n	15444 <parse_value+0xa4>
        default:
            return NULL;
   15442:	2300      	movs	r3, #0
    }
}
   15444:	0018      	movs	r0, r3
   15446:	46bd      	mov	sp, r7
   15448:	b002      	add	sp, #8
   1544a:	bd80      	pop	{r7, pc}
   1544c:	0001bfc9 	.word	0x0001bfc9
   15450:	000211c4 	.word	0x000211c4
   15454:	0001546d 	.word	0x0001546d
   15458:	000156a9 	.word	0x000156a9
   1545c:	00015861 	.word	0x00015861
   15460:	000158b9 	.word	0x000158b9
   15464:	00015935 	.word	0x00015935
   15468:	000159a1 	.word	0x000159a1

0001546c <parse_object_value>:

static JSON_Value * parse_object_value(const char **string, size_t nesting) {
   1546c:	b580      	push	{r7, lr}
   1546e:	b086      	sub	sp, #24
   15470:	af00      	add	r7, sp, #0
   15472:	6078      	str	r0, [r7, #4]
   15474:	6039      	str	r1, [r7, #0]
    JSON_Value *output_value = json_value_init_object(), *new_value = NULL;
   15476:	4b82      	ldr	r3, [pc, #520]	; (15680 <parse_object_value+0x214>)
   15478:	4798      	blx	r3
   1547a:	0003      	movs	r3, r0
   1547c:	617b      	str	r3, [r7, #20]
   1547e:	2300      	movs	r3, #0
   15480:	613b      	str	r3, [r7, #16]
    JSON_Object *output_object = json_value_get_object(output_value);
   15482:	697b      	ldr	r3, [r7, #20]
   15484:	0018      	movs	r0, r3
   15486:	4b7f      	ldr	r3, [pc, #508]	; (15684 <parse_object_value+0x218>)
   15488:	4798      	blx	r3
   1548a:	0003      	movs	r3, r0
   1548c:	60fb      	str	r3, [r7, #12]
    char *new_key = NULL;
   1548e:	2300      	movs	r3, #0
   15490:	60bb      	str	r3, [r7, #8]
    if (output_value == NULL)
   15492:	697b      	ldr	r3, [r7, #20]
   15494:	2b00      	cmp	r3, #0
   15496:	d101      	bne.n	1549c <parse_object_value+0x30>
        return NULL;
   15498:	2300      	movs	r3, #0
   1549a:	e0ed      	b.n	15678 <parse_object_value+0x20c>
    SKIP_CHAR(string);
   1549c:	687b      	ldr	r3, [r7, #4]
   1549e:	681b      	ldr	r3, [r3, #0]
   154a0:	1c5a      	adds	r2, r3, #1
   154a2:	687b      	ldr	r3, [r7, #4]
   154a4:	601a      	str	r2, [r3, #0]
    SKIP_WHITESPACES(string);
   154a6:	e004      	b.n	154b2 <parse_object_value+0x46>
   154a8:	687b      	ldr	r3, [r7, #4]
   154aa:	681b      	ldr	r3, [r3, #0]
   154ac:	1c5a      	adds	r2, r3, #1
   154ae:	687b      	ldr	r3, [r7, #4]
   154b0:	601a      	str	r2, [r3, #0]
   154b2:	4b75      	ldr	r3, [pc, #468]	; (15688 <parse_object_value+0x21c>)
   154b4:	4798      	blx	r3
   154b6:	0002      	movs	r2, r0
   154b8:	687b      	ldr	r3, [r7, #4]
   154ba:	681b      	ldr	r3, [r3, #0]
   154bc:	781b      	ldrb	r3, [r3, #0]
   154be:	3301      	adds	r3, #1
   154c0:	18d3      	adds	r3, r2, r3
   154c2:	781b      	ldrb	r3, [r3, #0]
   154c4:	001a      	movs	r2, r3
   154c6:	2308      	movs	r3, #8
   154c8:	4013      	ands	r3, r2
   154ca:	d1ed      	bne.n	154a8 <parse_object_value+0x3c>
    if (**string == '}') { /* empty object */
   154cc:	687b      	ldr	r3, [r7, #4]
   154ce:	681b      	ldr	r3, [r3, #0]
   154d0:	781b      	ldrb	r3, [r3, #0]
   154d2:	2b7d      	cmp	r3, #125	; 0x7d
   154d4:	d000      	beq.n	154d8 <parse_object_value+0x6c>
   154d6:	e096      	b.n	15606 <parse_object_value+0x19a>
        SKIP_CHAR(string);
   154d8:	687b      	ldr	r3, [r7, #4]
   154da:	681b      	ldr	r3, [r3, #0]
   154dc:	1c5a      	adds	r2, r3, #1
   154de:	687b      	ldr	r3, [r7, #4]
   154e0:	601a      	str	r2, [r3, #0]
        return output_value;
   154e2:	697b      	ldr	r3, [r7, #20]
   154e4:	e0c8      	b.n	15678 <parse_object_value+0x20c>
    }
    while (**string != '\0') {
        new_key = get_quoted_string(string);
   154e6:	687b      	ldr	r3, [r7, #4]
   154e8:	0018      	movs	r0, r3
   154ea:	4b68      	ldr	r3, [pc, #416]	; (1568c <parse_object_value+0x220>)
   154ec:	4798      	blx	r3
   154ee:	0003      	movs	r3, r0
   154f0:	60bb      	str	r3, [r7, #8]
        SKIP_WHITESPACES(string);
   154f2:	e004      	b.n	154fe <parse_object_value+0x92>
   154f4:	687b      	ldr	r3, [r7, #4]
   154f6:	681b      	ldr	r3, [r3, #0]
   154f8:	1c5a      	adds	r2, r3, #1
   154fa:	687b      	ldr	r3, [r7, #4]
   154fc:	601a      	str	r2, [r3, #0]
   154fe:	4b62      	ldr	r3, [pc, #392]	; (15688 <parse_object_value+0x21c>)
   15500:	4798      	blx	r3
   15502:	0002      	movs	r2, r0
   15504:	687b      	ldr	r3, [r7, #4]
   15506:	681b      	ldr	r3, [r3, #0]
   15508:	781b      	ldrb	r3, [r3, #0]
   1550a:	3301      	adds	r3, #1
   1550c:	18d3      	adds	r3, r2, r3
   1550e:	781b      	ldrb	r3, [r3, #0]
   15510:	001a      	movs	r2, r3
   15512:	2308      	movs	r3, #8
   15514:	4013      	ands	r3, r2
   15516:	d1ed      	bne.n	154f4 <parse_object_value+0x88>
        if (new_key == NULL || **string != ':') {
   15518:	68bb      	ldr	r3, [r7, #8]
   1551a:	2b00      	cmp	r3, #0
   1551c:	d004      	beq.n	15528 <parse_object_value+0xbc>
   1551e:	687b      	ldr	r3, [r7, #4]
   15520:	681b      	ldr	r3, [r3, #0]
   15522:	781b      	ldrb	r3, [r3, #0]
   15524:	2b3a      	cmp	r3, #58	; 0x3a
   15526:	d005      	beq.n	15534 <parse_object_value+0xc8>
            json_value_free(output_value);
   15528:	697b      	ldr	r3, [r7, #20]
   1552a:	0018      	movs	r0, r3
   1552c:	4b58      	ldr	r3, [pc, #352]	; (15690 <parse_object_value+0x224>)
   1552e:	4798      	blx	r3
            return NULL;
   15530:	2300      	movs	r3, #0
   15532:	e0a1      	b.n	15678 <parse_object_value+0x20c>
        }
        SKIP_CHAR(string);
   15534:	687b      	ldr	r3, [r7, #4]
   15536:	681b      	ldr	r3, [r3, #0]
   15538:	1c5a      	adds	r2, r3, #1
   1553a:	687b      	ldr	r3, [r7, #4]
   1553c:	601a      	str	r2, [r3, #0]
        new_value = parse_value(string, nesting);
   1553e:	683a      	ldr	r2, [r7, #0]
   15540:	687b      	ldr	r3, [r7, #4]
   15542:	0011      	movs	r1, r2
   15544:	0018      	movs	r0, r3
   15546:	4b53      	ldr	r3, [pc, #332]	; (15694 <parse_object_value+0x228>)
   15548:	4798      	blx	r3
   1554a:	0003      	movs	r3, r0
   1554c:	613b      	str	r3, [r7, #16]
        if (new_value == NULL) {
   1554e:	693b      	ldr	r3, [r7, #16]
   15550:	2b00      	cmp	r3, #0
   15552:	d10a      	bne.n	1556a <parse_object_value+0xfe>
            parson_free(new_key);
   15554:	4b50      	ldr	r3, [pc, #320]	; (15698 <parse_object_value+0x22c>)
   15556:	681b      	ldr	r3, [r3, #0]
   15558:	68ba      	ldr	r2, [r7, #8]
   1555a:	0010      	movs	r0, r2
   1555c:	4798      	blx	r3
            json_value_free(output_value);
   1555e:	697b      	ldr	r3, [r7, #20]
   15560:	0018      	movs	r0, r3
   15562:	4b4b      	ldr	r3, [pc, #300]	; (15690 <parse_object_value+0x224>)
   15564:	4798      	blx	r3
            return NULL;
   15566:	2300      	movs	r3, #0
   15568:	e086      	b.n	15678 <parse_object_value+0x20c>
        }
        if(json_object_add(output_object, new_key, new_value) == JSONFailure) {
   1556a:	693a      	ldr	r2, [r7, #16]
   1556c:	68b9      	ldr	r1, [r7, #8]
   1556e:	68fb      	ldr	r3, [r7, #12]
   15570:	0018      	movs	r0, r3
   15572:	4b4a      	ldr	r3, [pc, #296]	; (1569c <parse_object_value+0x230>)
   15574:	4798      	blx	r3
   15576:	0003      	movs	r3, r0
   15578:	3301      	adds	r3, #1
   1557a:	d10f      	bne.n	1559c <parse_object_value+0x130>
            parson_free(new_key);
   1557c:	4b46      	ldr	r3, [pc, #280]	; (15698 <parse_object_value+0x22c>)
   1557e:	681b      	ldr	r3, [r3, #0]
   15580:	68ba      	ldr	r2, [r7, #8]
   15582:	0010      	movs	r0, r2
   15584:	4798      	blx	r3
            parson_free(new_value);
   15586:	4b44      	ldr	r3, [pc, #272]	; (15698 <parse_object_value+0x22c>)
   15588:	681b      	ldr	r3, [r3, #0]
   1558a:	693a      	ldr	r2, [r7, #16]
   1558c:	0010      	movs	r0, r2
   1558e:	4798      	blx	r3
            json_value_free(output_value);
   15590:	697b      	ldr	r3, [r7, #20]
   15592:	0018      	movs	r0, r3
   15594:	4b3e      	ldr	r3, [pc, #248]	; (15690 <parse_object_value+0x224>)
   15596:	4798      	blx	r3
            return NULL;
   15598:	2300      	movs	r3, #0
   1559a:	e06d      	b.n	15678 <parse_object_value+0x20c>
        }
        parson_free(new_key);
   1559c:	4b3e      	ldr	r3, [pc, #248]	; (15698 <parse_object_value+0x22c>)
   1559e:	681b      	ldr	r3, [r3, #0]
   155a0:	68ba      	ldr	r2, [r7, #8]
   155a2:	0010      	movs	r0, r2
   155a4:	4798      	blx	r3
        SKIP_WHITESPACES(string);
   155a6:	e004      	b.n	155b2 <parse_object_value+0x146>
   155a8:	687b      	ldr	r3, [r7, #4]
   155aa:	681b      	ldr	r3, [r3, #0]
   155ac:	1c5a      	adds	r2, r3, #1
   155ae:	687b      	ldr	r3, [r7, #4]
   155b0:	601a      	str	r2, [r3, #0]
   155b2:	4b35      	ldr	r3, [pc, #212]	; (15688 <parse_object_value+0x21c>)
   155b4:	4798      	blx	r3
   155b6:	0002      	movs	r2, r0
   155b8:	687b      	ldr	r3, [r7, #4]
   155ba:	681b      	ldr	r3, [r3, #0]
   155bc:	781b      	ldrb	r3, [r3, #0]
   155be:	3301      	adds	r3, #1
   155c0:	18d3      	adds	r3, r2, r3
   155c2:	781b      	ldrb	r3, [r3, #0]
   155c4:	001a      	movs	r2, r3
   155c6:	2308      	movs	r3, #8
   155c8:	4013      	ands	r3, r2
   155ca:	d1ed      	bne.n	155a8 <parse_object_value+0x13c>
        if (**string != ',')
   155cc:	687b      	ldr	r3, [r7, #4]
   155ce:	681b      	ldr	r3, [r3, #0]
   155d0:	781b      	ldrb	r3, [r3, #0]
   155d2:	2b2c      	cmp	r3, #44	; 0x2c
   155d4:	d11e      	bne.n	15614 <parse_object_value+0x1a8>
            break;
        SKIP_CHAR(string);
   155d6:	687b      	ldr	r3, [r7, #4]
   155d8:	681b      	ldr	r3, [r3, #0]
   155da:	1c5a      	adds	r2, r3, #1
   155dc:	687b      	ldr	r3, [r7, #4]
   155de:	601a      	str	r2, [r3, #0]
        SKIP_WHITESPACES(string);
   155e0:	e004      	b.n	155ec <parse_object_value+0x180>
   155e2:	687b      	ldr	r3, [r7, #4]
   155e4:	681b      	ldr	r3, [r3, #0]
   155e6:	1c5a      	adds	r2, r3, #1
   155e8:	687b      	ldr	r3, [r7, #4]
   155ea:	601a      	str	r2, [r3, #0]
   155ec:	4b26      	ldr	r3, [pc, #152]	; (15688 <parse_object_value+0x21c>)
   155ee:	4798      	blx	r3
   155f0:	0002      	movs	r2, r0
   155f2:	687b      	ldr	r3, [r7, #4]
   155f4:	681b      	ldr	r3, [r3, #0]
   155f6:	781b      	ldrb	r3, [r3, #0]
   155f8:	3301      	adds	r3, #1
   155fa:	18d3      	adds	r3, r2, r3
   155fc:	781b      	ldrb	r3, [r3, #0]
   155fe:	001a      	movs	r2, r3
   15600:	2308      	movs	r3, #8
   15602:	4013      	ands	r3, r2
   15604:	d1ed      	bne.n	155e2 <parse_object_value+0x176>
    while (**string != '\0') {
   15606:	687b      	ldr	r3, [r7, #4]
   15608:	681b      	ldr	r3, [r3, #0]
   1560a:	781b      	ldrb	r3, [r3, #0]
   1560c:	2b00      	cmp	r3, #0
   1560e:	d000      	beq.n	15612 <parse_object_value+0x1a6>
   15610:	e769      	b.n	154e6 <parse_object_value+0x7a>
   15612:	e006      	b.n	15622 <parse_object_value+0x1b6>
            break;
   15614:	46c0      	nop			; (mov r8, r8)
    }
    SKIP_WHITESPACES(string);
   15616:	e004      	b.n	15622 <parse_object_value+0x1b6>
   15618:	687b      	ldr	r3, [r7, #4]
   1561a:	681b      	ldr	r3, [r3, #0]
   1561c:	1c5a      	adds	r2, r3, #1
   1561e:	687b      	ldr	r3, [r7, #4]
   15620:	601a      	str	r2, [r3, #0]
   15622:	4b19      	ldr	r3, [pc, #100]	; (15688 <parse_object_value+0x21c>)
   15624:	4798      	blx	r3
   15626:	0002      	movs	r2, r0
   15628:	687b      	ldr	r3, [r7, #4]
   1562a:	681b      	ldr	r3, [r3, #0]
   1562c:	781b      	ldrb	r3, [r3, #0]
   1562e:	3301      	adds	r3, #1
   15630:	18d3      	adds	r3, r2, r3
   15632:	781b      	ldrb	r3, [r3, #0]
   15634:	001a      	movs	r2, r3
   15636:	2308      	movs	r3, #8
   15638:	4013      	ands	r3, r2
   1563a:	d1ed      	bne.n	15618 <parse_object_value+0x1ac>
    if (**string != '}' || /* Trim object after parsing is over */
   1563c:	687b      	ldr	r3, [r7, #4]
   1563e:	681b      	ldr	r3, [r3, #0]
   15640:	781b      	ldrb	r3, [r3, #0]
   15642:	2b7d      	cmp	r3, #125	; 0x7d
   15644:	d10c      	bne.n	15660 <parse_object_value+0x1f4>
        json_object_resize(output_object, json_object_get_count(output_object)) == JSONFailure) {
   15646:	68fb      	ldr	r3, [r7, #12]
   15648:	0018      	movs	r0, r3
   1564a:	4b15      	ldr	r3, [pc, #84]	; (156a0 <parse_object_value+0x234>)
   1564c:	4798      	blx	r3
   1564e:	0002      	movs	r2, r0
   15650:	68fb      	ldr	r3, [r7, #12]
   15652:	0011      	movs	r1, r2
   15654:	0018      	movs	r0, r3
   15656:	4b13      	ldr	r3, [pc, #76]	; (156a4 <parse_object_value+0x238>)
   15658:	4798      	blx	r3
   1565a:	0003      	movs	r3, r0
    if (**string != '}' || /* Trim object after parsing is over */
   1565c:	3301      	adds	r3, #1
   1565e:	d105      	bne.n	1566c <parse_object_value+0x200>
            json_value_free(output_value);
   15660:	697b      	ldr	r3, [r7, #20]
   15662:	0018      	movs	r0, r3
   15664:	4b0a      	ldr	r3, [pc, #40]	; (15690 <parse_object_value+0x224>)
   15666:	4798      	blx	r3
            return NULL;
   15668:	2300      	movs	r3, #0
   1566a:	e005      	b.n	15678 <parse_object_value+0x20c>
    }
    SKIP_CHAR(string);
   1566c:	687b      	ldr	r3, [r7, #4]
   1566e:	681b      	ldr	r3, [r3, #0]
   15670:	1c5a      	adds	r2, r3, #1
   15672:	687b      	ldr	r3, [r7, #4]
   15674:	601a      	str	r2, [r3, #0]
    return output_value;
   15676:	697b      	ldr	r3, [r7, #20]
}
   15678:	0018      	movs	r0, r3
   1567a:	46bd      	mov	sp, r7
   1567c:	b006      	add	sp, #24
   1567e:	bd80      	pop	{r7, pc}
   15680:	00015d15 	.word	0x00015d15
   15684:	00015c19 	.word	0x00015c19
   15688:	0001bfc9 	.word	0x0001bfc9
   1568c:	00015349 	.word	0x00015349
   15690:	00015ca1 	.word	0x00015ca1
   15694:	000153a1 	.word	0x000153a1
   15698:	2000015c 	.word	0x2000015c
   1569c:	00014acd 	.word	0x00014acd
   156a0:	00015b1d 	.word	0x00015b1d
   156a4:	00014bad 	.word	0x00014bad

000156a8 <parse_array_value>:

static JSON_Value * parse_array_value(const char **string, size_t nesting) {
   156a8:	b580      	push	{r7, lr}
   156aa:	b086      	sub	sp, #24
   156ac:	af00      	add	r7, sp, #0
   156ae:	6078      	str	r0, [r7, #4]
   156b0:	6039      	str	r1, [r7, #0]
    JSON_Value *output_value = json_value_init_array(), *new_array_value = NULL;
   156b2:	4b62      	ldr	r3, [pc, #392]	; (1583c <parse_array_value+0x194>)
   156b4:	4798      	blx	r3
   156b6:	0003      	movs	r3, r0
   156b8:	617b      	str	r3, [r7, #20]
   156ba:	2300      	movs	r3, #0
   156bc:	613b      	str	r3, [r7, #16]
    JSON_Array *output_array = json_value_get_array(output_value);
   156be:	697b      	ldr	r3, [r7, #20]
   156c0:	0018      	movs	r0, r3
   156c2:	4b5f      	ldr	r3, [pc, #380]	; (15840 <parse_array_value+0x198>)
   156c4:	4798      	blx	r3
   156c6:	0003      	movs	r3, r0
   156c8:	60fb      	str	r3, [r7, #12]
    if (!output_value)
   156ca:	697b      	ldr	r3, [r7, #20]
   156cc:	2b00      	cmp	r3, #0
   156ce:	d101      	bne.n	156d4 <parse_array_value+0x2c>
        return NULL;
   156d0:	2300      	movs	r3, #0
   156d2:	e0af      	b.n	15834 <parse_array_value+0x18c>
    SKIP_CHAR(string);
   156d4:	687b      	ldr	r3, [r7, #4]
   156d6:	681b      	ldr	r3, [r3, #0]
   156d8:	1c5a      	adds	r2, r3, #1
   156da:	687b      	ldr	r3, [r7, #4]
   156dc:	601a      	str	r2, [r3, #0]
    SKIP_WHITESPACES(string);
   156de:	e004      	b.n	156ea <parse_array_value+0x42>
   156e0:	687b      	ldr	r3, [r7, #4]
   156e2:	681b      	ldr	r3, [r3, #0]
   156e4:	1c5a      	adds	r2, r3, #1
   156e6:	687b      	ldr	r3, [r7, #4]
   156e8:	601a      	str	r2, [r3, #0]
   156ea:	4b56      	ldr	r3, [pc, #344]	; (15844 <parse_array_value+0x19c>)
   156ec:	4798      	blx	r3
   156ee:	0002      	movs	r2, r0
   156f0:	687b      	ldr	r3, [r7, #4]
   156f2:	681b      	ldr	r3, [r3, #0]
   156f4:	781b      	ldrb	r3, [r3, #0]
   156f6:	3301      	adds	r3, #1
   156f8:	18d3      	adds	r3, r2, r3
   156fa:	781b      	ldrb	r3, [r3, #0]
   156fc:	001a      	movs	r2, r3
   156fe:	2308      	movs	r3, #8
   15700:	4013      	ands	r3, r2
   15702:	d1ed      	bne.n	156e0 <parse_array_value+0x38>
    if (**string == ']') { /* empty array */
   15704:	687b      	ldr	r3, [r7, #4]
   15706:	681b      	ldr	r3, [r3, #0]
   15708:	781b      	ldrb	r3, [r3, #0]
   1570a:	2b5d      	cmp	r3, #93	; 0x5d
   1570c:	d15a      	bne.n	157c4 <parse_array_value+0x11c>
        SKIP_CHAR(string);
   1570e:	687b      	ldr	r3, [r7, #4]
   15710:	681b      	ldr	r3, [r3, #0]
   15712:	1c5a      	adds	r2, r3, #1
   15714:	687b      	ldr	r3, [r7, #4]
   15716:	601a      	str	r2, [r3, #0]
        return output_value;
   15718:	697b      	ldr	r3, [r7, #20]
   1571a:	e08b      	b.n	15834 <parse_array_value+0x18c>
    }
    while (**string != '\0') {
        new_array_value = parse_value(string, nesting);
   1571c:	683a      	ldr	r2, [r7, #0]
   1571e:	687b      	ldr	r3, [r7, #4]
   15720:	0011      	movs	r1, r2
   15722:	0018      	movs	r0, r3
   15724:	4b48      	ldr	r3, [pc, #288]	; (15848 <parse_array_value+0x1a0>)
   15726:	4798      	blx	r3
   15728:	0003      	movs	r3, r0
   1572a:	613b      	str	r3, [r7, #16]
        if (!new_array_value) {
   1572c:	693b      	ldr	r3, [r7, #16]
   1572e:	2b00      	cmp	r3, #0
   15730:	d105      	bne.n	1573e <parse_array_value+0x96>
            json_value_free(output_value);
   15732:	697b      	ldr	r3, [r7, #20]
   15734:	0018      	movs	r0, r3
   15736:	4b45      	ldr	r3, [pc, #276]	; (1584c <parse_array_value+0x1a4>)
   15738:	4798      	blx	r3
            return NULL;
   1573a:	2300      	movs	r3, #0
   1573c:	e07a      	b.n	15834 <parse_array_value+0x18c>
        }
        if(json_array_add(output_array, new_array_value) == JSONFailure) {
   1573e:	693a      	ldr	r2, [r7, #16]
   15740:	68fb      	ldr	r3, [r7, #12]
   15742:	0011      	movs	r1, r2
   15744:	0018      	movs	r0, r3
   15746:	4b42      	ldr	r3, [pc, #264]	; (15850 <parse_array_value+0x1a8>)
   15748:	4798      	blx	r3
   1574a:	0003      	movs	r3, r0
   1574c:	3301      	adds	r3, #1
   1574e:	d10f      	bne.n	15770 <parse_array_value+0xc8>
            parson_free(new_array_value);
   15750:	4b40      	ldr	r3, [pc, #256]	; (15854 <parse_array_value+0x1ac>)
   15752:	681b      	ldr	r3, [r3, #0]
   15754:	693a      	ldr	r2, [r7, #16]
   15756:	0010      	movs	r0, r2
   15758:	4798      	blx	r3
            json_value_free(output_value);
   1575a:	697b      	ldr	r3, [r7, #20]
   1575c:	0018      	movs	r0, r3
   1575e:	4b3b      	ldr	r3, [pc, #236]	; (1584c <parse_array_value+0x1a4>)
   15760:	4798      	blx	r3
            return NULL;
   15762:	2300      	movs	r3, #0
   15764:	e066      	b.n	15834 <parse_array_value+0x18c>
        }
        SKIP_WHITESPACES(string);
   15766:	687b      	ldr	r3, [r7, #4]
   15768:	681b      	ldr	r3, [r3, #0]
   1576a:	1c5a      	adds	r2, r3, #1
   1576c:	687b      	ldr	r3, [r7, #4]
   1576e:	601a      	str	r2, [r3, #0]
   15770:	4b34      	ldr	r3, [pc, #208]	; (15844 <parse_array_value+0x19c>)
   15772:	4798      	blx	r3
   15774:	0002      	movs	r2, r0
   15776:	687b      	ldr	r3, [r7, #4]
   15778:	681b      	ldr	r3, [r3, #0]
   1577a:	781b      	ldrb	r3, [r3, #0]
   1577c:	3301      	adds	r3, #1
   1577e:	18d3      	adds	r3, r2, r3
   15780:	781b      	ldrb	r3, [r3, #0]
   15782:	001a      	movs	r2, r3
   15784:	2308      	movs	r3, #8
   15786:	4013      	ands	r3, r2
   15788:	d1ed      	bne.n	15766 <parse_array_value+0xbe>
        if (**string != ',')
   1578a:	687b      	ldr	r3, [r7, #4]
   1578c:	681b      	ldr	r3, [r3, #0]
   1578e:	781b      	ldrb	r3, [r3, #0]
   15790:	2b2c      	cmp	r3, #44	; 0x2c
   15792:	d11d      	bne.n	157d0 <parse_array_value+0x128>
            break;
        SKIP_CHAR(string);
   15794:	687b      	ldr	r3, [r7, #4]
   15796:	681b      	ldr	r3, [r3, #0]
   15798:	1c5a      	adds	r2, r3, #1
   1579a:	687b      	ldr	r3, [r7, #4]
   1579c:	601a      	str	r2, [r3, #0]
        SKIP_WHITESPACES(string);
   1579e:	e004      	b.n	157aa <parse_array_value+0x102>
   157a0:	687b      	ldr	r3, [r7, #4]
   157a2:	681b      	ldr	r3, [r3, #0]
   157a4:	1c5a      	adds	r2, r3, #1
   157a6:	687b      	ldr	r3, [r7, #4]
   157a8:	601a      	str	r2, [r3, #0]
   157aa:	4b26      	ldr	r3, [pc, #152]	; (15844 <parse_array_value+0x19c>)
   157ac:	4798      	blx	r3
   157ae:	0002      	movs	r2, r0
   157b0:	687b      	ldr	r3, [r7, #4]
   157b2:	681b      	ldr	r3, [r3, #0]
   157b4:	781b      	ldrb	r3, [r3, #0]
   157b6:	3301      	adds	r3, #1
   157b8:	18d3      	adds	r3, r2, r3
   157ba:	781b      	ldrb	r3, [r3, #0]
   157bc:	001a      	movs	r2, r3
   157be:	2308      	movs	r3, #8
   157c0:	4013      	ands	r3, r2
   157c2:	d1ed      	bne.n	157a0 <parse_array_value+0xf8>
    while (**string != '\0') {
   157c4:	687b      	ldr	r3, [r7, #4]
   157c6:	681b      	ldr	r3, [r3, #0]
   157c8:	781b      	ldrb	r3, [r3, #0]
   157ca:	2b00      	cmp	r3, #0
   157cc:	d1a6      	bne.n	1571c <parse_array_value+0x74>
   157ce:	e006      	b.n	157de <parse_array_value+0x136>
            break;
   157d0:	46c0      	nop			; (mov r8, r8)
    }
    SKIP_WHITESPACES(string);
   157d2:	e004      	b.n	157de <parse_array_value+0x136>
   157d4:	687b      	ldr	r3, [r7, #4]
   157d6:	681b      	ldr	r3, [r3, #0]
   157d8:	1c5a      	adds	r2, r3, #1
   157da:	687b      	ldr	r3, [r7, #4]
   157dc:	601a      	str	r2, [r3, #0]
   157de:	4b19      	ldr	r3, [pc, #100]	; (15844 <parse_array_value+0x19c>)
   157e0:	4798      	blx	r3
   157e2:	0002      	movs	r2, r0
   157e4:	687b      	ldr	r3, [r7, #4]
   157e6:	681b      	ldr	r3, [r3, #0]
   157e8:	781b      	ldrb	r3, [r3, #0]
   157ea:	3301      	adds	r3, #1
   157ec:	18d3      	adds	r3, r2, r3
   157ee:	781b      	ldrb	r3, [r3, #0]
   157f0:	001a      	movs	r2, r3
   157f2:	2308      	movs	r3, #8
   157f4:	4013      	ands	r3, r2
   157f6:	d1ed      	bne.n	157d4 <parse_array_value+0x12c>
    if (**string != ']' || /* Trim array after parsing is over */
   157f8:	687b      	ldr	r3, [r7, #4]
   157fa:	681b      	ldr	r3, [r3, #0]
   157fc:	781b      	ldrb	r3, [r3, #0]
   157fe:	2b5d      	cmp	r3, #93	; 0x5d
   15800:	d10c      	bne.n	1581c <parse_array_value+0x174>
        json_array_resize(output_array, json_array_get_count(output_array)) == JSONFailure) {
   15802:	68fb      	ldr	r3, [r7, #12]
   15804:	0018      	movs	r0, r3
   15806:	4b14      	ldr	r3, [pc, #80]	; (15858 <parse_array_value+0x1b0>)
   15808:	4798      	blx	r3
   1580a:	0002      	movs	r2, r0
   1580c:	68fb      	ldr	r3, [r7, #12]
   1580e:	0011      	movs	r1, r2
   15810:	0018      	movs	r0, r3
   15812:	4b12      	ldr	r3, [pc, #72]	; (1585c <parse_array_value+0x1b4>)
   15814:	4798      	blx	r3
   15816:	0003      	movs	r3, r0
    if (**string != ']' || /* Trim array after parsing is over */
   15818:	3301      	adds	r3, #1
   1581a:	d105      	bne.n	15828 <parse_array_value+0x180>
            json_value_free(output_value);
   1581c:	697b      	ldr	r3, [r7, #20]
   1581e:	0018      	movs	r0, r3
   15820:	4b0a      	ldr	r3, [pc, #40]	; (1584c <parse_array_value+0x1a4>)
   15822:	4798      	blx	r3
            return NULL;
   15824:	2300      	movs	r3, #0
   15826:	e005      	b.n	15834 <parse_array_value+0x18c>
    }
    SKIP_CHAR(string);
   15828:	687b      	ldr	r3, [r7, #4]
   1582a:	681b      	ldr	r3, [r3, #0]
   1582c:	1c5a      	adds	r2, r3, #1
   1582e:	687b      	ldr	r3, [r7, #4]
   15830:	601a      	str	r2, [r3, #0]
    return output_value;
   15832:	697b      	ldr	r3, [r7, #20]
}
   15834:	0018      	movs	r0, r3
   15836:	46bd      	mov	sp, r7
   15838:	b006      	add	sp, #24
   1583a:	bd80      	pop	{r7, pc}
   1583c:	00015d6d 	.word	0x00015d6d
   15840:	00015c45 	.word	0x00015c45
   15844:	0001bfc9 	.word	0x0001bfc9
   15848:	000153a1 	.word	0x000153a1
   1584c:	00015ca1 	.word	0x00015ca1
   15850:	00014de1 	.word	0x00014de1
   15854:	2000015c 	.word	0x2000015c
   15858:	00015bd9 	.word	0x00015bd9
   1585c:	00014e55 	.word	0x00014e55

00015860 <parse_string_value>:

static JSON_Value * parse_string_value(const char **string) {
   15860:	b580      	push	{r7, lr}
   15862:	b084      	sub	sp, #16
   15864:	af00      	add	r7, sp, #0
   15866:	6078      	str	r0, [r7, #4]
    JSON_Value *value = NULL;
   15868:	2300      	movs	r3, #0
   1586a:	60fb      	str	r3, [r7, #12]
    char *new_string = get_quoted_string(string);
   1586c:	687b      	ldr	r3, [r7, #4]
   1586e:	0018      	movs	r0, r3
   15870:	4b0e      	ldr	r3, [pc, #56]	; (158ac <parse_string_value+0x4c>)
   15872:	4798      	blx	r3
   15874:	0003      	movs	r3, r0
   15876:	60bb      	str	r3, [r7, #8]
    if (new_string == NULL)
   15878:	68bb      	ldr	r3, [r7, #8]
   1587a:	2b00      	cmp	r3, #0
   1587c:	d101      	bne.n	15882 <parse_string_value+0x22>
        return NULL;
   1587e:	2300      	movs	r3, #0
   15880:	e010      	b.n	158a4 <parse_string_value+0x44>
    value = json_value_init_string_no_copy(new_string);
   15882:	68bb      	ldr	r3, [r7, #8]
   15884:	0018      	movs	r0, r3
   15886:	4b0a      	ldr	r3, [pc, #40]	; (158b0 <parse_string_value+0x50>)
   15888:	4798      	blx	r3
   1588a:	0003      	movs	r3, r0
   1588c:	60fb      	str	r3, [r7, #12]
    if (value == NULL) {
   1588e:	68fb      	ldr	r3, [r7, #12]
   15890:	2b00      	cmp	r3, #0
   15892:	d106      	bne.n	158a2 <parse_string_value+0x42>
        parson_free(new_string);
   15894:	4b07      	ldr	r3, [pc, #28]	; (158b4 <parse_string_value+0x54>)
   15896:	681b      	ldr	r3, [r3, #0]
   15898:	68ba      	ldr	r2, [r7, #8]
   1589a:	0010      	movs	r0, r2
   1589c:	4798      	blx	r3
        return NULL;
   1589e:	2300      	movs	r3, #0
   158a0:	e000      	b.n	158a4 <parse_string_value+0x44>
    }
    return value;
   158a2:	68fb      	ldr	r3, [r7, #12]
}
   158a4:	0018      	movs	r0, r3
   158a6:	46bd      	mov	sp, r7
   158a8:	b004      	add	sp, #16
   158aa:	bd80      	pop	{r7, pc}
   158ac:	00015349 	.word	0x00015349
   158b0:	00014f31 	.word	0x00014f31
   158b4:	2000015c 	.word	0x2000015c

000158b8 <parse_boolean_value>:

static JSON_Value * parse_boolean_value(const char **string) {
   158b8:	b580      	push	{r7, lr}
   158ba:	b084      	sub	sp, #16
   158bc:	af00      	add	r7, sp, #0
   158be:	6078      	str	r0, [r7, #4]
    size_t true_token_size = SIZEOF_TOKEN("true");
   158c0:	2304      	movs	r3, #4
   158c2:	60fb      	str	r3, [r7, #12]
    size_t false_token_size = SIZEOF_TOKEN("false");
   158c4:	2305      	movs	r3, #5
   158c6:	60bb      	str	r3, [r7, #8]
    if (strncmp("true", *string, true_token_size) == 0) {
   158c8:	687b      	ldr	r3, [r7, #4]
   158ca:	6819      	ldr	r1, [r3, #0]
   158cc:	68fa      	ldr	r2, [r7, #12]
   158ce:	4b15      	ldr	r3, [pc, #84]	; (15924 <parse_boolean_value+0x6c>)
   158d0:	0018      	movs	r0, r3
   158d2:	4b15      	ldr	r3, [pc, #84]	; (15928 <parse_boolean_value+0x70>)
   158d4:	4798      	blx	r3
   158d6:	1e03      	subs	r3, r0, #0
   158d8:	d10a      	bne.n	158f0 <parse_boolean_value+0x38>
        *string += true_token_size;
   158da:	687b      	ldr	r3, [r7, #4]
   158dc:	681a      	ldr	r2, [r3, #0]
   158de:	68fb      	ldr	r3, [r7, #12]
   158e0:	18d2      	adds	r2, r2, r3
   158e2:	687b      	ldr	r3, [r7, #4]
   158e4:	601a      	str	r2, [r3, #0]
        return json_value_init_boolean(1);
   158e6:	2001      	movs	r0, #1
   158e8:	4b10      	ldr	r3, [pc, #64]	; (1592c <parse_boolean_value+0x74>)
   158ea:	4798      	blx	r3
   158ec:	0003      	movs	r3, r0
   158ee:	e014      	b.n	1591a <parse_boolean_value+0x62>
    } else if (strncmp("false", *string, false_token_size) == 0) {
   158f0:	687b      	ldr	r3, [r7, #4]
   158f2:	6819      	ldr	r1, [r3, #0]
   158f4:	68ba      	ldr	r2, [r7, #8]
   158f6:	4b0e      	ldr	r3, [pc, #56]	; (15930 <parse_boolean_value+0x78>)
   158f8:	0018      	movs	r0, r3
   158fa:	4b0b      	ldr	r3, [pc, #44]	; (15928 <parse_boolean_value+0x70>)
   158fc:	4798      	blx	r3
   158fe:	1e03      	subs	r3, r0, #0
   15900:	d10a      	bne.n	15918 <parse_boolean_value+0x60>
        *string += false_token_size;
   15902:	687b      	ldr	r3, [r7, #4]
   15904:	681a      	ldr	r2, [r3, #0]
   15906:	68bb      	ldr	r3, [r7, #8]
   15908:	18d2      	adds	r2, r2, r3
   1590a:	687b      	ldr	r3, [r7, #4]
   1590c:	601a      	str	r2, [r3, #0]
        return json_value_init_boolean(0);
   1590e:	2000      	movs	r0, #0
   15910:	4b06      	ldr	r3, [pc, #24]	; (1592c <parse_boolean_value+0x74>)
   15912:	4798      	blx	r3
   15914:	0003      	movs	r3, r0
   15916:	e000      	b.n	1591a <parse_boolean_value+0x62>
    }
    return NULL;
   15918:	2300      	movs	r3, #0
}
   1591a:	0018      	movs	r0, r3
   1591c:	46bd      	mov	sp, r7
   1591e:	b004      	add	sp, #16
   15920:	bd80      	pop	{r7, pc}
   15922:	46c0      	nop			; (mov r8, r8)
   15924:	00020ff8 	.word	0x00020ff8
   15928:	0001c739 	.word	0x0001c739
   1592c:	00015e05 	.word	0x00015e05
   15930:	00021000 	.word	0x00021000

00015934 <parse_number_value>:

static JSON_Value * parse_number_value(const char **string) {
   15934:	b590      	push	{r4, r7, lr}
   15936:	b089      	sub	sp, #36	; 0x24
   15938:	af00      	add	r7, sp, #0
   1593a:	6078      	str	r0, [r7, #4]
    char *end;
    double number = strtod(*string, &end);
   1593c:	687b      	ldr	r3, [r7, #4]
   1593e:	681b      	ldr	r3, [r3, #0]
   15940:	220c      	movs	r2, #12
   15942:	18ba      	adds	r2, r7, r2
   15944:	0011      	movs	r1, r2
   15946:	0018      	movs	r0, r3
   15948:	4b12      	ldr	r3, [pc, #72]	; (15994 <parse_number_value+0x60>)
   1594a:	4798      	blx	r3
   1594c:	0003      	movs	r3, r0
   1594e:	000c      	movs	r4, r1
   15950:	613b      	str	r3, [r7, #16]
   15952:	617c      	str	r4, [r7, #20]
    JSON_Value *output_value;
    if (is_decimal(*string, end - *string)) {
   15954:	687b      	ldr	r3, [r7, #4]
   15956:	681a      	ldr	r2, [r3, #0]
   15958:	68fb      	ldr	r3, [r7, #12]
   1595a:	0019      	movs	r1, r3
   1595c:	687b      	ldr	r3, [r7, #4]
   1595e:	681b      	ldr	r3, [r3, #0]
   15960:	1acb      	subs	r3, r1, r3
   15962:	0019      	movs	r1, r3
   15964:	0010      	movs	r0, r2
   15966:	4b0c      	ldr	r3, [pc, #48]	; (15998 <parse_number_value+0x64>)
   15968:	4798      	blx	r3
   1596a:	1e03      	subs	r3, r0, #0
   1596c:	d00b      	beq.n	15986 <parse_number_value+0x52>
        *string = end;
   1596e:	68fa      	ldr	r2, [r7, #12]
   15970:	687b      	ldr	r3, [r7, #4]
   15972:	601a      	str	r2, [r3, #0]
        output_value = json_value_init_number(number);
   15974:	693b      	ldr	r3, [r7, #16]
   15976:	697c      	ldr	r4, [r7, #20]
   15978:	0018      	movs	r0, r3
   1597a:	0021      	movs	r1, r4
   1597c:	4b07      	ldr	r3, [pc, #28]	; (1599c <parse_number_value+0x68>)
   1597e:	4798      	blx	r3
   15980:	0003      	movs	r3, r0
   15982:	61fb      	str	r3, [r7, #28]
   15984:	e001      	b.n	1598a <parse_number_value+0x56>
    } else {
        output_value = NULL;
   15986:	2300      	movs	r3, #0
   15988:	61fb      	str	r3, [r7, #28]
    }
    return output_value;
   1598a:	69fb      	ldr	r3, [r7, #28]
}
   1598c:	0018      	movs	r0, r3
   1598e:	46bd      	mov	sp, r7
   15990:	b009      	add	sp, #36	; 0x24
   15992:	bd90      	pop	{r4, r7, pc}
   15994:	0001d3c5 	.word	0x0001d3c5
   15998:	000149fd 	.word	0x000149fd
   1599c:	00015dc5 	.word	0x00015dc5

000159a0 <parse_null_value>:

static JSON_Value * parse_null_value(const char **string) {
   159a0:	b580      	push	{r7, lr}
   159a2:	b084      	sub	sp, #16
   159a4:	af00      	add	r7, sp, #0
   159a6:	6078      	str	r0, [r7, #4]
    size_t token_size = SIZEOF_TOKEN("null");
   159a8:	2304      	movs	r3, #4
   159aa:	60fb      	str	r3, [r7, #12]
    if (strncmp("null", *string, token_size) == 0) {
   159ac:	687b      	ldr	r3, [r7, #4]
   159ae:	6819      	ldr	r1, [r3, #0]
   159b0:	68fa      	ldr	r2, [r7, #12]
   159b2:	4b0a      	ldr	r3, [pc, #40]	; (159dc <parse_null_value+0x3c>)
   159b4:	0018      	movs	r0, r3
   159b6:	4b0a      	ldr	r3, [pc, #40]	; (159e0 <parse_null_value+0x40>)
   159b8:	4798      	blx	r3
   159ba:	1e03      	subs	r3, r0, #0
   159bc:	d109      	bne.n	159d2 <parse_null_value+0x32>
        *string += token_size;
   159be:	687b      	ldr	r3, [r7, #4]
   159c0:	681a      	ldr	r2, [r3, #0]
   159c2:	68fb      	ldr	r3, [r7, #12]
   159c4:	18d2      	adds	r2, r2, r3
   159c6:	687b      	ldr	r3, [r7, #4]
   159c8:	601a      	str	r2, [r3, #0]
        return json_value_init_null();
   159ca:	4b06      	ldr	r3, [pc, #24]	; (159e4 <parse_null_value+0x44>)
   159cc:	4798      	blx	r3
   159ce:	0003      	movs	r3, r0
   159d0:	e000      	b.n	159d4 <parse_null_value+0x34>
    }
    return NULL;
   159d2:	2300      	movs	r3, #0
}
   159d4:	0018      	movs	r0, r3
   159d6:	46bd      	mov	sp, r7
   159d8:	b004      	add	sp, #16
   159da:	bd80      	pop	{r7, pc}
   159dc:	00021008 	.word	0x00021008
   159e0:	0001c739 	.word	0x0001c739
   159e4:	00015e45 	.word	0x00015e45

000159e8 <json_parse_string>:
    output_value = json_parse_string_with_comments(file_contents);
    parson_free(file_contents);
    return output_value;
}

JSON_Value * json_parse_string(const char *string) {
   159e8:	b580      	push	{r7, lr}
   159ea:	b082      	sub	sp, #8
   159ec:	af00      	add	r7, sp, #0
   159ee:	6078      	str	r0, [r7, #4]
    if (string == NULL)
   159f0:	687b      	ldr	r3, [r7, #4]
   159f2:	2b00      	cmp	r3, #0
   159f4:	d104      	bne.n	15a00 <json_parse_string+0x18>
        return NULL;
   159f6:	2300      	movs	r3, #0
   159f8:	e01e      	b.n	15a38 <json_parse_string+0x50>
    SKIP_WHITESPACES(&string);
   159fa:	687b      	ldr	r3, [r7, #4]
   159fc:	3301      	adds	r3, #1
   159fe:	607b      	str	r3, [r7, #4]
   15a00:	4b0f      	ldr	r3, [pc, #60]	; (15a40 <json_parse_string+0x58>)
   15a02:	4798      	blx	r3
   15a04:	0002      	movs	r2, r0
   15a06:	687b      	ldr	r3, [r7, #4]
   15a08:	781b      	ldrb	r3, [r3, #0]
   15a0a:	3301      	adds	r3, #1
   15a0c:	18d3      	adds	r3, r2, r3
   15a0e:	781b      	ldrb	r3, [r3, #0]
   15a10:	001a      	movs	r2, r3
   15a12:	2308      	movs	r3, #8
   15a14:	4013      	ands	r3, r2
   15a16:	d1f0      	bne.n	159fa <json_parse_string+0x12>
    if (*string != '{' && *string != '[')
   15a18:	687b      	ldr	r3, [r7, #4]
   15a1a:	781b      	ldrb	r3, [r3, #0]
   15a1c:	2b7b      	cmp	r3, #123	; 0x7b
   15a1e:	d005      	beq.n	15a2c <json_parse_string+0x44>
   15a20:	687b      	ldr	r3, [r7, #4]
   15a22:	781b      	ldrb	r3, [r3, #0]
   15a24:	2b5b      	cmp	r3, #91	; 0x5b
   15a26:	d001      	beq.n	15a2c <json_parse_string+0x44>
        return NULL;
   15a28:	2300      	movs	r3, #0
   15a2a:	e005      	b.n	15a38 <json_parse_string+0x50>
    return parse_value((const char**)&string, 0);
   15a2c:	1d3b      	adds	r3, r7, #4
   15a2e:	2100      	movs	r1, #0
   15a30:	0018      	movs	r0, r3
   15a32:	4b04      	ldr	r3, [pc, #16]	; (15a44 <json_parse_string+0x5c>)
   15a34:	4798      	blx	r3
   15a36:	0003      	movs	r3, r0
}
   15a38:	0018      	movs	r0, r3
   15a3a:	46bd      	mov	sp, r7
   15a3c:	b002      	add	sp, #8
   15a3e:	bd80      	pop	{r7, pc}
   15a40:	0001bfc9 	.word	0x0001bfc9
   15a44:	000153a1 	.word	0x000153a1

00015a48 <json_object_get_value>:
}


/* JSON Object API */

JSON_Value * json_object_get_value(const JSON_Object *object, const char *name) {
   15a48:	b580      	push	{r7, lr}
   15a4a:	b082      	sub	sp, #8
   15a4c:	af00      	add	r7, sp, #0
   15a4e:	6078      	str	r0, [r7, #4]
   15a50:	6039      	str	r1, [r7, #0]
    if (object == NULL || name == NULL)
   15a52:	687b      	ldr	r3, [r7, #4]
   15a54:	2b00      	cmp	r3, #0
   15a56:	d002      	beq.n	15a5e <json_object_get_value+0x16>
   15a58:	683b      	ldr	r3, [r7, #0]
   15a5a:	2b00      	cmp	r3, #0
   15a5c:	d101      	bne.n	15a62 <json_object_get_value+0x1a>
        return NULL;
   15a5e:	2300      	movs	r3, #0
   15a60:	e00a      	b.n	15a78 <json_object_get_value+0x30>
    return json_object_nget_value(object, name, strlen(name));
   15a62:	683b      	ldr	r3, [r7, #0]
   15a64:	0018      	movs	r0, r3
   15a66:	4b06      	ldr	r3, [pc, #24]	; (15a80 <json_object_get_value+0x38>)
   15a68:	4798      	blx	r3
   15a6a:	0002      	movs	r2, r0
   15a6c:	6839      	ldr	r1, [r7, #0]
   15a6e:	687b      	ldr	r3, [r7, #4]
   15a70:	0018      	movs	r0, r3
   15a72:	4b04      	ldr	r3, [pc, #16]	; (15a84 <json_object_get_value+0x3c>)
   15a74:	4798      	blx	r3
   15a76:	0003      	movs	r3, r0
}
   15a78:	0018      	movs	r0, r3
   15a7a:	46bd      	mov	sp, r7
   15a7c:	b002      	add	sp, #8
   15a7e:	bd80      	pop	{r7, pc}
   15a80:	0001c72b 	.word	0x0001c72b
   15a84:	00014ca9 	.word	0x00014ca9

00015a88 <json_object_get_number>:

const char * json_object_get_string(const JSON_Object *object, const char *name) {
    return json_value_get_string(json_object_get_value(object, name));
}

double json_object_get_number(const JSON_Object *object, const char *name) {
   15a88:	b590      	push	{r4, r7, lr}
   15a8a:	b083      	sub	sp, #12
   15a8c:	af00      	add	r7, sp, #0
   15a8e:	6078      	str	r0, [r7, #4]
   15a90:	6039      	str	r1, [r7, #0]
    return json_value_get_number(json_object_get_value(object, name));
   15a92:	683a      	ldr	r2, [r7, #0]
   15a94:	687b      	ldr	r3, [r7, #4]
   15a96:	0011      	movs	r1, r2
   15a98:	0018      	movs	r0, r3
   15a9a:	4b06      	ldr	r3, [pc, #24]	; (15ab4 <json_object_get_number+0x2c>)
   15a9c:	4798      	blx	r3
   15a9e:	0003      	movs	r3, r0
   15aa0:	0018      	movs	r0, r3
   15aa2:	4b05      	ldr	r3, [pc, #20]	; (15ab8 <json_object_get_number+0x30>)
   15aa4:	4798      	blx	r3
   15aa6:	0003      	movs	r3, r0
   15aa8:	000c      	movs	r4, r1
}
   15aaa:	0018      	movs	r0, r3
   15aac:	0021      	movs	r1, r4
   15aae:	46bd      	mov	sp, r7
   15ab0:	b003      	add	sp, #12
   15ab2:	bd90      	pop	{r4, r7, pc}
   15ab4:	00015a49 	.word	0x00015a49
   15ab8:	00015c71 	.word	0x00015c71

00015abc <json_object_get_object>:

JSON_Object * json_object_get_object(const JSON_Object *object, const char *name) {
   15abc:	b580      	push	{r7, lr}
   15abe:	b082      	sub	sp, #8
   15ac0:	af00      	add	r7, sp, #0
   15ac2:	6078      	str	r0, [r7, #4]
   15ac4:	6039      	str	r1, [r7, #0]
    return json_value_get_object(json_object_get_value(object, name));
   15ac6:	683a      	ldr	r2, [r7, #0]
   15ac8:	687b      	ldr	r3, [r7, #4]
   15aca:	0011      	movs	r1, r2
   15acc:	0018      	movs	r0, r3
   15ace:	4b05      	ldr	r3, [pc, #20]	; (15ae4 <json_object_get_object+0x28>)
   15ad0:	4798      	blx	r3
   15ad2:	0003      	movs	r3, r0
   15ad4:	0018      	movs	r0, r3
   15ad6:	4b04      	ldr	r3, [pc, #16]	; (15ae8 <json_object_get_object+0x2c>)
   15ad8:	4798      	blx	r3
   15ada:	0003      	movs	r3, r0
}
   15adc:	0018      	movs	r0, r3
   15ade:	46bd      	mov	sp, r7
   15ae0:	b002      	add	sp, #8
   15ae2:	bd80      	pop	{r7, pc}
   15ae4:	00015a49 	.word	0x00015a49
   15ae8:	00015c19 	.word	0x00015c19

00015aec <json_object_get_array>:

JSON_Array * json_object_get_array(const JSON_Object *object, const char *name) {
   15aec:	b580      	push	{r7, lr}
   15aee:	b082      	sub	sp, #8
   15af0:	af00      	add	r7, sp, #0
   15af2:	6078      	str	r0, [r7, #4]
   15af4:	6039      	str	r1, [r7, #0]
    return json_value_get_array(json_object_get_value(object, name));
   15af6:	683a      	ldr	r2, [r7, #0]
   15af8:	687b      	ldr	r3, [r7, #4]
   15afa:	0011      	movs	r1, r2
   15afc:	0018      	movs	r0, r3
   15afe:	4b05      	ldr	r3, [pc, #20]	; (15b14 <json_object_get_array+0x28>)
   15b00:	4798      	blx	r3
   15b02:	0003      	movs	r3, r0
   15b04:	0018      	movs	r0, r3
   15b06:	4b04      	ldr	r3, [pc, #16]	; (15b18 <json_object_get_array+0x2c>)
   15b08:	4798      	blx	r3
   15b0a:	0003      	movs	r3, r0
}
   15b0c:	0018      	movs	r0, r3
   15b0e:	46bd      	mov	sp, r7
   15b10:	b002      	add	sp, #8
   15b12:	bd80      	pop	{r7, pc}
   15b14:	00015a49 	.word	0x00015a49
   15b18:	00015c45 	.word	0x00015c45

00015b1c <json_object_get_count>:

int json_object_dotget_boolean(const JSON_Object *object, const char *name) {
    return json_value_get_boolean(json_object_dotget_value(object, name));
}

size_t json_object_get_count(const JSON_Object *object) {
   15b1c:	b580      	push	{r7, lr}
   15b1e:	b082      	sub	sp, #8
   15b20:	af00      	add	r7, sp, #0
   15b22:	6078      	str	r0, [r7, #4]
    return object ? object->count : 0;
   15b24:	687b      	ldr	r3, [r7, #4]
   15b26:	2b00      	cmp	r3, #0
   15b28:	d002      	beq.n	15b30 <json_object_get_count+0x14>
   15b2a:	687b      	ldr	r3, [r7, #4]
   15b2c:	689b      	ldr	r3, [r3, #8]
   15b2e:	e000      	b.n	15b32 <json_object_get_count+0x16>
   15b30:	2300      	movs	r3, #0
}
   15b32:	0018      	movs	r0, r3
   15b34:	46bd      	mov	sp, r7
   15b36:	b002      	add	sp, #8
   15b38:	bd80      	pop	{r7, pc}
	...

00015b3c <json_array_get_value>:
        return NULL;
    return object->names[index];
}

/* JSON Array API */
JSON_Value * json_array_get_value(const JSON_Array *array, size_t index) {
   15b3c:	b580      	push	{r7, lr}
   15b3e:	b082      	sub	sp, #8
   15b40:	af00      	add	r7, sp, #0
   15b42:	6078      	str	r0, [r7, #4]
   15b44:	6039      	str	r1, [r7, #0]
    if (index >= json_array_get_count(array))
   15b46:	687b      	ldr	r3, [r7, #4]
   15b48:	0018      	movs	r0, r3
   15b4a:	4b09      	ldr	r3, [pc, #36]	; (15b70 <json_array_get_value+0x34>)
   15b4c:	4798      	blx	r3
   15b4e:	0002      	movs	r2, r0
   15b50:	683b      	ldr	r3, [r7, #0]
   15b52:	429a      	cmp	r2, r3
   15b54:	d801      	bhi.n	15b5a <json_array_get_value+0x1e>
        return NULL;
   15b56:	2300      	movs	r3, #0
   15b58:	e005      	b.n	15b66 <json_array_get_value+0x2a>
    return array->items[index];
   15b5a:	687b      	ldr	r3, [r7, #4]
   15b5c:	681a      	ldr	r2, [r3, #0]
   15b5e:	683b      	ldr	r3, [r7, #0]
   15b60:	009b      	lsls	r3, r3, #2
   15b62:	18d3      	adds	r3, r2, r3
   15b64:	681b      	ldr	r3, [r3, #0]
}
   15b66:	0018      	movs	r0, r3
   15b68:	46bd      	mov	sp, r7
   15b6a:	b002      	add	sp, #8
   15b6c:	bd80      	pop	{r7, pc}
   15b6e:	46c0      	nop			; (mov r8, r8)
   15b70:	00015bd9 	.word	0x00015bd9

00015b74 <json_array_get_number>:

const char * json_array_get_string(const JSON_Array *array, size_t index) {
    return json_value_get_string(json_array_get_value(array, index));
}

double json_array_get_number(const JSON_Array *array, size_t index) {
   15b74:	b590      	push	{r4, r7, lr}
   15b76:	b083      	sub	sp, #12
   15b78:	af00      	add	r7, sp, #0
   15b7a:	6078      	str	r0, [r7, #4]
   15b7c:	6039      	str	r1, [r7, #0]
    return json_value_get_number(json_array_get_value(array, index));
   15b7e:	683a      	ldr	r2, [r7, #0]
   15b80:	687b      	ldr	r3, [r7, #4]
   15b82:	0011      	movs	r1, r2
   15b84:	0018      	movs	r0, r3
   15b86:	4b06      	ldr	r3, [pc, #24]	; (15ba0 <json_array_get_number+0x2c>)
   15b88:	4798      	blx	r3
   15b8a:	0003      	movs	r3, r0
   15b8c:	0018      	movs	r0, r3
   15b8e:	4b05      	ldr	r3, [pc, #20]	; (15ba4 <json_array_get_number+0x30>)
   15b90:	4798      	blx	r3
   15b92:	0003      	movs	r3, r0
   15b94:	000c      	movs	r4, r1
}
   15b96:	0018      	movs	r0, r3
   15b98:	0021      	movs	r1, r4
   15b9a:	46bd      	mov	sp, r7
   15b9c:	b003      	add	sp, #12
   15b9e:	bd90      	pop	{r4, r7, pc}
   15ba0:	00015b3d 	.word	0x00015b3d
   15ba4:	00015c71 	.word	0x00015c71

00015ba8 <json_array_get_array>:

JSON_Object * json_array_get_object(const JSON_Array *array, size_t index) {
    return json_value_get_object(json_array_get_value(array, index));
}

JSON_Array * json_array_get_array(const JSON_Array *array, size_t index) {
   15ba8:	b580      	push	{r7, lr}
   15baa:	b082      	sub	sp, #8
   15bac:	af00      	add	r7, sp, #0
   15bae:	6078      	str	r0, [r7, #4]
   15bb0:	6039      	str	r1, [r7, #0]
    return json_value_get_array(json_array_get_value(array, index));
   15bb2:	683a      	ldr	r2, [r7, #0]
   15bb4:	687b      	ldr	r3, [r7, #4]
   15bb6:	0011      	movs	r1, r2
   15bb8:	0018      	movs	r0, r3
   15bba:	4b05      	ldr	r3, [pc, #20]	; (15bd0 <json_array_get_array+0x28>)
   15bbc:	4798      	blx	r3
   15bbe:	0003      	movs	r3, r0
   15bc0:	0018      	movs	r0, r3
   15bc2:	4b04      	ldr	r3, [pc, #16]	; (15bd4 <json_array_get_array+0x2c>)
   15bc4:	4798      	blx	r3
   15bc6:	0003      	movs	r3, r0
}
   15bc8:	0018      	movs	r0, r3
   15bca:	46bd      	mov	sp, r7
   15bcc:	b002      	add	sp, #8
   15bce:	bd80      	pop	{r7, pc}
   15bd0:	00015b3d 	.word	0x00015b3d
   15bd4:	00015c45 	.word	0x00015c45

00015bd8 <json_array_get_count>:

int json_array_get_boolean(const JSON_Array *array, size_t index) {
    return json_value_get_boolean(json_array_get_value(array, index));
}

size_t json_array_get_count(const JSON_Array *array) {
   15bd8:	b580      	push	{r7, lr}
   15bda:	b082      	sub	sp, #8
   15bdc:	af00      	add	r7, sp, #0
   15bde:	6078      	str	r0, [r7, #4]
    return array ? array->count : 0;
   15be0:	687b      	ldr	r3, [r7, #4]
   15be2:	2b00      	cmp	r3, #0
   15be4:	d002      	beq.n	15bec <json_array_get_count+0x14>
   15be6:	687b      	ldr	r3, [r7, #4]
   15be8:	685b      	ldr	r3, [r3, #4]
   15bea:	e000      	b.n	15bee <json_array_get_count+0x16>
   15bec:	2300      	movs	r3, #0
}
   15bee:	0018      	movs	r0, r3
   15bf0:	46bd      	mov	sp, r7
   15bf2:	b002      	add	sp, #8
   15bf4:	bd80      	pop	{r7, pc}

00015bf6 <json_value_get_type>:

/* JSON Value API */
JSON_Value_Type json_value_get_type(const JSON_Value *value) {
   15bf6:	b580      	push	{r7, lr}
   15bf8:	b082      	sub	sp, #8
   15bfa:	af00      	add	r7, sp, #0
   15bfc:	6078      	str	r0, [r7, #4]
    return value ? value->type : JSONError;
   15bfe:	687b      	ldr	r3, [r7, #4]
   15c00:	2b00      	cmp	r3, #0
   15c02:	d002      	beq.n	15c0a <json_value_get_type+0x14>
   15c04:	687b      	ldr	r3, [r7, #4]
   15c06:	681b      	ldr	r3, [r3, #0]
   15c08:	e001      	b.n	15c0e <json_value_get_type+0x18>
   15c0a:	2301      	movs	r3, #1
   15c0c:	425b      	negs	r3, r3
}
   15c0e:	0018      	movs	r0, r3
   15c10:	46bd      	mov	sp, r7
   15c12:	b002      	add	sp, #8
   15c14:	bd80      	pop	{r7, pc}
	...

00015c18 <json_value_get_object>:

JSON_Object * json_value_get_object(const JSON_Value *value) {
   15c18:	b580      	push	{r7, lr}
   15c1a:	b082      	sub	sp, #8
   15c1c:	af00      	add	r7, sp, #0
   15c1e:	6078      	str	r0, [r7, #4]
    return json_value_get_type(value) == JSONObject ? value->value.object : NULL;
   15c20:	687b      	ldr	r3, [r7, #4]
   15c22:	0018      	movs	r0, r3
   15c24:	4b06      	ldr	r3, [pc, #24]	; (15c40 <json_value_get_object+0x28>)
   15c26:	4798      	blx	r3
   15c28:	0003      	movs	r3, r0
   15c2a:	2b04      	cmp	r3, #4
   15c2c:	d102      	bne.n	15c34 <json_value_get_object+0x1c>
   15c2e:	687b      	ldr	r3, [r7, #4]
   15c30:	689b      	ldr	r3, [r3, #8]
   15c32:	e000      	b.n	15c36 <json_value_get_object+0x1e>
   15c34:	2300      	movs	r3, #0
}
   15c36:	0018      	movs	r0, r3
   15c38:	46bd      	mov	sp, r7
   15c3a:	b002      	add	sp, #8
   15c3c:	bd80      	pop	{r7, pc}
   15c3e:	46c0      	nop			; (mov r8, r8)
   15c40:	00015bf7 	.word	0x00015bf7

00015c44 <json_value_get_array>:

JSON_Array * json_value_get_array(const JSON_Value *value) {
   15c44:	b580      	push	{r7, lr}
   15c46:	b082      	sub	sp, #8
   15c48:	af00      	add	r7, sp, #0
   15c4a:	6078      	str	r0, [r7, #4]
    return json_value_get_type(value) == JSONArray ? value->value.array : NULL;
   15c4c:	687b      	ldr	r3, [r7, #4]
   15c4e:	0018      	movs	r0, r3
   15c50:	4b06      	ldr	r3, [pc, #24]	; (15c6c <json_value_get_array+0x28>)
   15c52:	4798      	blx	r3
   15c54:	0003      	movs	r3, r0
   15c56:	2b05      	cmp	r3, #5
   15c58:	d102      	bne.n	15c60 <json_value_get_array+0x1c>
   15c5a:	687b      	ldr	r3, [r7, #4]
   15c5c:	689b      	ldr	r3, [r3, #8]
   15c5e:	e000      	b.n	15c62 <json_value_get_array+0x1e>
   15c60:	2300      	movs	r3, #0
}
   15c62:	0018      	movs	r0, r3
   15c64:	46bd      	mov	sp, r7
   15c66:	b002      	add	sp, #8
   15c68:	bd80      	pop	{r7, pc}
   15c6a:	46c0      	nop			; (mov r8, r8)
   15c6c:	00015bf7 	.word	0x00015bf7

00015c70 <json_value_get_number>:

const char * json_value_get_string(const JSON_Value *value) {
    return json_value_get_type(value) == JSONString ? value->value.string : NULL;
}

double json_value_get_number(const JSON_Value *value) {
   15c70:	b590      	push	{r4, r7, lr}
   15c72:	b083      	sub	sp, #12
   15c74:	af00      	add	r7, sp, #0
   15c76:	6078      	str	r0, [r7, #4]
    return json_value_get_type(value) == JSONNumber ? value->value.number : 0;
   15c78:	687b      	ldr	r3, [r7, #4]
   15c7a:	0018      	movs	r0, r3
   15c7c:	4b07      	ldr	r3, [pc, #28]	; (15c9c <json_value_get_number+0x2c>)
   15c7e:	4798      	blx	r3
   15c80:	0003      	movs	r3, r0
   15c82:	2b03      	cmp	r3, #3
   15c84:	d103      	bne.n	15c8e <json_value_get_number+0x1e>
   15c86:	687b      	ldr	r3, [r7, #4]
   15c88:	68dc      	ldr	r4, [r3, #12]
   15c8a:	689b      	ldr	r3, [r3, #8]
   15c8c:	e001      	b.n	15c92 <json_value_get_number+0x22>
   15c8e:	2300      	movs	r3, #0
   15c90:	2400      	movs	r4, #0
}
   15c92:	0018      	movs	r0, r3
   15c94:	0021      	movs	r1, r4
   15c96:	46bd      	mov	sp, r7
   15c98:	b003      	add	sp, #12
   15c9a:	bd90      	pop	{r4, r7, pc}
   15c9c:	00015bf7 	.word	0x00015bf7

00015ca0 <json_value_free>:

int json_value_get_boolean(const JSON_Value *value) {
    return json_value_get_type(value) == JSONBoolean ? value->value.boolean : -1;
}

void json_value_free(JSON_Value *value) {
   15ca0:	b580      	push	{r7, lr}
   15ca2:	b082      	sub	sp, #8
   15ca4:	af00      	add	r7, sp, #0
   15ca6:	6078      	str	r0, [r7, #4]
    switch (json_value_get_type(value)) {
   15ca8:	687b      	ldr	r3, [r7, #4]
   15caa:	0018      	movs	r0, r3
   15cac:	4b15      	ldr	r3, [pc, #84]	; (15d04 <json_value_free+0x64>)
   15cae:	4798      	blx	r3
   15cb0:	0003      	movs	r3, r0
   15cb2:	2b04      	cmp	r3, #4
   15cb4:	d004      	beq.n	15cc0 <json_value_free+0x20>
   15cb6:	2b05      	cmp	r3, #5
   15cb8:	d013      	beq.n	15ce2 <json_value_free+0x42>
   15cba:	2b02      	cmp	r3, #2
   15cbc:	d006      	beq.n	15ccc <json_value_free+0x2c>
            break;
        case JSONArray:
            json_array_free(value->value.array);
            break;
        default:
            break;
   15cbe:	e017      	b.n	15cf0 <json_value_free+0x50>
            json_object_free(value->value.object);
   15cc0:	687b      	ldr	r3, [r7, #4]
   15cc2:	689b      	ldr	r3, [r3, #8]
   15cc4:	0018      	movs	r0, r3
   15cc6:	4b10      	ldr	r3, [pc, #64]	; (15d08 <json_value_free+0x68>)
   15cc8:	4798      	blx	r3
            break;
   15cca:	e011      	b.n	15cf0 <json_value_free+0x50>
            if (value->value.string) { parson_free(value->value.string); }
   15ccc:	687b      	ldr	r3, [r7, #4]
   15cce:	689b      	ldr	r3, [r3, #8]
   15cd0:	2b00      	cmp	r3, #0
   15cd2:	d00c      	beq.n	15cee <json_value_free+0x4e>
   15cd4:	4b0d      	ldr	r3, [pc, #52]	; (15d0c <json_value_free+0x6c>)
   15cd6:	681a      	ldr	r2, [r3, #0]
   15cd8:	687b      	ldr	r3, [r7, #4]
   15cda:	689b      	ldr	r3, [r3, #8]
   15cdc:	0018      	movs	r0, r3
   15cde:	4790      	blx	r2
            break;
   15ce0:	e005      	b.n	15cee <json_value_free+0x4e>
            json_array_free(value->value.array);
   15ce2:	687b      	ldr	r3, [r7, #4]
   15ce4:	689b      	ldr	r3, [r3, #8]
   15ce6:	0018      	movs	r0, r3
   15ce8:	4b09      	ldr	r3, [pc, #36]	; (15d10 <json_value_free+0x70>)
   15cea:	4798      	blx	r3
            break;
   15cec:	e000      	b.n	15cf0 <json_value_free+0x50>
            break;
   15cee:	46c0      	nop			; (mov r8, r8)
    }
    parson_free(value);
   15cf0:	4b06      	ldr	r3, [pc, #24]	; (15d0c <json_value_free+0x6c>)
   15cf2:	681b      	ldr	r3, [r3, #0]
   15cf4:	687a      	ldr	r2, [r7, #4]
   15cf6:	0010      	movs	r0, r2
   15cf8:	4798      	blx	r3
}
   15cfa:	46c0      	nop			; (mov r8, r8)
   15cfc:	46bd      	mov	sp, r7
   15cfe:	b002      	add	sp, #8
   15d00:	bd80      	pop	{r7, pc}
   15d02:	46c0      	nop			; (mov r8, r8)
   15d04:	00015bf7 	.word	0x00015bf7
   15d08:	00014d31 	.word	0x00014d31
   15d0c:	2000015c 	.word	0x2000015c
   15d10:	00014edd 	.word	0x00014edd

00015d14 <json_value_init_object>:

JSON_Value * json_value_init_object(void) {
   15d14:	b580      	push	{r7, lr}
   15d16:	b082      	sub	sp, #8
   15d18:	af00      	add	r7, sp, #0
    JSON_Value *new_value = (JSON_Value*)parson_malloc(sizeof(JSON_Value));
   15d1a:	4b11      	ldr	r3, [pc, #68]	; (15d60 <json_value_init_object+0x4c>)
   15d1c:	681b      	ldr	r3, [r3, #0]
   15d1e:	2010      	movs	r0, #16
   15d20:	4798      	blx	r3
   15d22:	0003      	movs	r3, r0
   15d24:	607b      	str	r3, [r7, #4]
    if (!new_value)
   15d26:	687b      	ldr	r3, [r7, #4]
   15d28:	2b00      	cmp	r3, #0
   15d2a:	d101      	bne.n	15d30 <json_value_init_object+0x1c>
        return NULL;
   15d2c:	2300      	movs	r3, #0
   15d2e:	e013      	b.n	15d58 <json_value_init_object+0x44>
    new_value->type = JSONObject;
   15d30:	687b      	ldr	r3, [r7, #4]
   15d32:	2204      	movs	r2, #4
   15d34:	601a      	str	r2, [r3, #0]
    new_value->value.object = json_object_init();
   15d36:	4b0b      	ldr	r3, [pc, #44]	; (15d64 <json_value_init_object+0x50>)
   15d38:	4798      	blx	r3
   15d3a:	0002      	movs	r2, r0
   15d3c:	687b      	ldr	r3, [r7, #4]
   15d3e:	609a      	str	r2, [r3, #8]
    if (!new_value->value.object) {
   15d40:	687b      	ldr	r3, [r7, #4]
   15d42:	689b      	ldr	r3, [r3, #8]
   15d44:	2b00      	cmp	r3, #0
   15d46:	d106      	bne.n	15d56 <json_value_init_object+0x42>
        parson_free(new_value);
   15d48:	4b07      	ldr	r3, [pc, #28]	; (15d68 <json_value_init_object+0x54>)
   15d4a:	681b      	ldr	r3, [r3, #0]
   15d4c:	687a      	ldr	r2, [r7, #4]
   15d4e:	0010      	movs	r0, r2
   15d50:	4798      	blx	r3
        return NULL;
   15d52:	2300      	movs	r3, #0
   15d54:	e000      	b.n	15d58 <json_value_init_object+0x44>
    }
    return new_value;
   15d56:	687b      	ldr	r3, [r7, #4]
}
   15d58:	0018      	movs	r0, r3
   15d5a:	46bd      	mov	sp, r7
   15d5c:	b002      	add	sp, #8
   15d5e:	bd80      	pop	{r7, pc}
   15d60:	20000158 	.word	0x20000158
   15d64:	00014a89 	.word	0x00014a89
   15d68:	2000015c 	.word	0x2000015c

00015d6c <json_value_init_array>:

JSON_Value * json_value_init_array(void) {
   15d6c:	b580      	push	{r7, lr}
   15d6e:	b082      	sub	sp, #8
   15d70:	af00      	add	r7, sp, #0
    JSON_Value *new_value = (JSON_Value*)parson_malloc(sizeof(JSON_Value));
   15d72:	4b11      	ldr	r3, [pc, #68]	; (15db8 <json_value_init_array+0x4c>)
   15d74:	681b      	ldr	r3, [r3, #0]
   15d76:	2010      	movs	r0, #16
   15d78:	4798      	blx	r3
   15d7a:	0003      	movs	r3, r0
   15d7c:	607b      	str	r3, [r7, #4]
    if (!new_value)
   15d7e:	687b      	ldr	r3, [r7, #4]
   15d80:	2b00      	cmp	r3, #0
   15d82:	d101      	bne.n	15d88 <json_value_init_array+0x1c>
        return NULL;
   15d84:	2300      	movs	r3, #0
   15d86:	e013      	b.n	15db0 <json_value_init_array+0x44>
    new_value->type = JSONArray;
   15d88:	687b      	ldr	r3, [r7, #4]
   15d8a:	2205      	movs	r2, #5
   15d8c:	601a      	str	r2, [r3, #0]
    new_value->value.array = json_array_init();
   15d8e:	4b0b      	ldr	r3, [pc, #44]	; (15dbc <json_value_init_array+0x50>)
   15d90:	4798      	blx	r3
   15d92:	0002      	movs	r2, r0
   15d94:	687b      	ldr	r3, [r7, #4]
   15d96:	609a      	str	r2, [r3, #8]
    if (!new_value->value.array) {
   15d98:	687b      	ldr	r3, [r7, #4]
   15d9a:	689b      	ldr	r3, [r3, #8]
   15d9c:	2b00      	cmp	r3, #0
   15d9e:	d106      	bne.n	15dae <json_value_init_array+0x42>
        parson_free(new_value);
   15da0:	4b07      	ldr	r3, [pc, #28]	; (15dc0 <json_value_init_array+0x54>)
   15da2:	681b      	ldr	r3, [r3, #0]
   15da4:	687a      	ldr	r2, [r7, #4]
   15da6:	0010      	movs	r0, r2
   15da8:	4798      	blx	r3
        return NULL;
   15daa:	2300      	movs	r3, #0
   15dac:	e000      	b.n	15db0 <json_value_init_array+0x44>
    }
    return new_value;
   15dae:	687b      	ldr	r3, [r7, #4]
}
   15db0:	0018      	movs	r0, r3
   15db2:	46bd      	mov	sp, r7
   15db4:	b002      	add	sp, #8
   15db6:	bd80      	pop	{r7, pc}
   15db8:	20000158 	.word	0x20000158
   15dbc:	00014da5 	.word	0x00014da5
   15dc0:	2000015c 	.word	0x2000015c

00015dc4 <json_value_init_number>:
    if (value == NULL)
        parson_free(copy);
    return value;
}

JSON_Value * json_value_init_number(double number) {
   15dc4:	b590      	push	{r4, r7, lr}
   15dc6:	b085      	sub	sp, #20
   15dc8:	af00      	add	r7, sp, #0
   15dca:	6038      	str	r0, [r7, #0]
   15dcc:	6079      	str	r1, [r7, #4]
    JSON_Value *new_value = (JSON_Value*)parson_malloc(sizeof(JSON_Value));
   15dce:	4b0c      	ldr	r3, [pc, #48]	; (15e00 <json_value_init_number+0x3c>)
   15dd0:	681b      	ldr	r3, [r3, #0]
   15dd2:	2010      	movs	r0, #16
   15dd4:	4798      	blx	r3
   15dd6:	0003      	movs	r3, r0
   15dd8:	60fb      	str	r3, [r7, #12]
    if (!new_value)
   15dda:	68fb      	ldr	r3, [r7, #12]
   15ddc:	2b00      	cmp	r3, #0
   15dde:	d101      	bne.n	15de4 <json_value_init_number+0x20>
        return NULL;
   15de0:	2300      	movs	r3, #0
   15de2:	e008      	b.n	15df6 <json_value_init_number+0x32>
    new_value->type = JSONNumber;
   15de4:	68fb      	ldr	r3, [r7, #12]
   15de6:	2203      	movs	r2, #3
   15de8:	601a      	str	r2, [r3, #0]
    new_value->value.number = number;
   15dea:	68fa      	ldr	r2, [r7, #12]
   15dec:	683b      	ldr	r3, [r7, #0]
   15dee:	687c      	ldr	r4, [r7, #4]
   15df0:	6093      	str	r3, [r2, #8]
   15df2:	60d4      	str	r4, [r2, #12]
    return new_value;
   15df4:	68fb      	ldr	r3, [r7, #12]
}
   15df6:	0018      	movs	r0, r3
   15df8:	46bd      	mov	sp, r7
   15dfa:	b005      	add	sp, #20
   15dfc:	bd90      	pop	{r4, r7, pc}
   15dfe:	46c0      	nop			; (mov r8, r8)
   15e00:	20000158 	.word	0x20000158

00015e04 <json_value_init_boolean>:

JSON_Value * json_value_init_boolean(int boolean) {
   15e04:	b580      	push	{r7, lr}
   15e06:	b084      	sub	sp, #16
   15e08:	af00      	add	r7, sp, #0
   15e0a:	6078      	str	r0, [r7, #4]
    JSON_Value *new_value = (JSON_Value*)parson_malloc(sizeof(JSON_Value));
   15e0c:	4b0c      	ldr	r3, [pc, #48]	; (15e40 <json_value_init_boolean+0x3c>)
   15e0e:	681b      	ldr	r3, [r3, #0]
   15e10:	2010      	movs	r0, #16
   15e12:	4798      	blx	r3
   15e14:	0003      	movs	r3, r0
   15e16:	60fb      	str	r3, [r7, #12]
    if (!new_value)
   15e18:	68fb      	ldr	r3, [r7, #12]
   15e1a:	2b00      	cmp	r3, #0
   15e1c:	d101      	bne.n	15e22 <json_value_init_boolean+0x1e>
        return NULL;
   15e1e:	2300      	movs	r3, #0
   15e20:	e00a      	b.n	15e38 <json_value_init_boolean+0x34>
    new_value->type = JSONBoolean;
   15e22:	68fb      	ldr	r3, [r7, #12]
   15e24:	2206      	movs	r2, #6
   15e26:	601a      	str	r2, [r3, #0]
    new_value->value.boolean = boolean ? 1 : 0;
   15e28:	687b      	ldr	r3, [r7, #4]
   15e2a:	1e5a      	subs	r2, r3, #1
   15e2c:	4193      	sbcs	r3, r2
   15e2e:	b2db      	uxtb	r3, r3
   15e30:	001a      	movs	r2, r3
   15e32:	68fb      	ldr	r3, [r7, #12]
   15e34:	609a      	str	r2, [r3, #8]
    return new_value;
   15e36:	68fb      	ldr	r3, [r7, #12]
}
   15e38:	0018      	movs	r0, r3
   15e3a:	46bd      	mov	sp, r7
   15e3c:	b004      	add	sp, #16
   15e3e:	bd80      	pop	{r7, pc}
   15e40:	20000158 	.word	0x20000158

00015e44 <json_value_init_null>:

JSON_Value * json_value_init_null(void) {
   15e44:	b580      	push	{r7, lr}
   15e46:	b082      	sub	sp, #8
   15e48:	af00      	add	r7, sp, #0
    JSON_Value *new_value = (JSON_Value*)parson_malloc(sizeof(JSON_Value));
   15e4a:	4b09      	ldr	r3, [pc, #36]	; (15e70 <json_value_init_null+0x2c>)
   15e4c:	681b      	ldr	r3, [r3, #0]
   15e4e:	2010      	movs	r0, #16
   15e50:	4798      	blx	r3
   15e52:	0003      	movs	r3, r0
   15e54:	607b      	str	r3, [r7, #4]
    if (!new_value)
   15e56:	687b      	ldr	r3, [r7, #4]
   15e58:	2b00      	cmp	r3, #0
   15e5a:	d101      	bne.n	15e60 <json_value_init_null+0x1c>
        return NULL;
   15e5c:	2300      	movs	r3, #0
   15e5e:	e003      	b.n	15e68 <json_value_init_null+0x24>
    new_value->type = JSONNull;
   15e60:	687b      	ldr	r3, [r7, #4]
   15e62:	2201      	movs	r2, #1
   15e64:	601a      	str	r2, [r3, #0]
    return new_value;
   15e66:	687b      	ldr	r3, [r7, #4]
}
   15e68:	0018      	movs	r0, r3
   15e6a:	46bd      	mov	sp, r7
   15e6c:	b002      	add	sp, #8
   15e6e:	bd80      	pop	{r7, pc}
   15e70:	20000158 	.word	0x20000158

00015e74 <rtc_count_get_config_defaults>:
 *  \param[out] config  Configuration structure to be initialized to default
 *                      values
 */
static inline void rtc_count_get_config_defaults(
		struct rtc_count_config *const config)
{
   15e74:	b580      	push	{r7, lr}
   15e76:	b084      	sub	sp, #16
   15e78:	af00      	add	r7, sp, #0
   15e7a:	6078      	str	r0, [r7, #4]
	/* Sanity check argument */
	Assert(config);

	/* Set default into configuration structure */
	config->prescaler           = RTC_COUNT_PRESCALER_DIV_1024;
   15e7c:	687b      	ldr	r3, [r7, #4]
   15e7e:	22a0      	movs	r2, #160	; 0xa0
   15e80:	0112      	lsls	r2, r2, #4
   15e82:	801a      	strh	r2, [r3, #0]
	config->mode                = RTC_COUNT_MODE_32BIT;
   15e84:	687b      	ldr	r3, [r7, #4]
   15e86:	2201      	movs	r2, #1
   15e88:	709a      	strb	r2, [r3, #2]
	config->clear_on_match      = false;
   15e8a:	687b      	ldr	r3, [r7, #4]
   15e8c:	2200      	movs	r2, #0
   15e8e:	70da      	strb	r2, [r3, #3]

#ifdef FEATURE_RTC_CONTINUOUSLY_UPDATED
	config->continuously_update = false;
   15e90:	687b      	ldr	r3, [r7, #4]
   15e92:	2200      	movs	r2, #0
   15e94:	711a      	strb	r2, [r3, #4]
#endif
#if (SAML21XXXB) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30)
	config->enable_read_sync    = true;
#endif

	for (uint8_t i = 0; i < RTC_NUM_OF_COMP16; i++) {
   15e96:	230f      	movs	r3, #15
   15e98:	18fb      	adds	r3, r7, r3
   15e9a:	2200      	movs	r2, #0
   15e9c:	701a      	strb	r2, [r3, #0]
   15e9e:	e00e      	b.n	15ebe <rtc_count_get_config_defaults+0x4a>
		config->compare_values[i] = 0;
   15ea0:	230f      	movs	r3, #15
   15ea2:	18fb      	adds	r3, r7, r3
   15ea4:	781a      	ldrb	r2, [r3, #0]
   15ea6:	687b      	ldr	r3, [r7, #4]
   15ea8:	3202      	adds	r2, #2
   15eaa:	0092      	lsls	r2, r2, #2
   15eac:	2100      	movs	r1, #0
   15eae:	50d1      	str	r1, [r2, r3]
	for (uint8_t i = 0; i < RTC_NUM_OF_COMP16; i++) {
   15eb0:	230f      	movs	r3, #15
   15eb2:	18fb      	adds	r3, r7, r3
   15eb4:	781a      	ldrb	r2, [r3, #0]
   15eb6:	230f      	movs	r3, #15
   15eb8:	18fb      	adds	r3, r7, r3
   15eba:	3201      	adds	r2, #1
   15ebc:	701a      	strb	r2, [r3, #0]
   15ebe:	230f      	movs	r3, #15
   15ec0:	18fb      	adds	r3, r7, r3
   15ec2:	781b      	ldrb	r3, [r3, #0]
   15ec4:	2b01      	cmp	r3, #1
   15ec6:	d9eb      	bls.n	15ea0 <rtc_count_get_config_defaults+0x2c>
	}
}
   15ec8:	46c0      	nop			; (mov r8, r8)
   15eca:	46bd      	mov	sp, r7
   15ecc:	b004      	add	sp, #16
   15ece:	bd80      	pop	{r7, pc}

00015ed0 <system_interrupt_enable_global>:
{
   15ed0:	b580      	push	{r7, lr}
   15ed2:	af00      	add	r7, sp, #0
	cpu_irq_enable();
   15ed4:	4b04      	ldr	r3, [pc, #16]	; (15ee8 <system_interrupt_enable_global+0x18>)
   15ed6:	2201      	movs	r2, #1
   15ed8:	701a      	strb	r2, [r3, #0]
   15eda:	f3bf 8f5f 	dmb	sy
   15ede:	b662      	cpsie	i
}
   15ee0:	46c0      	nop			; (mov r8, r8)
   15ee2:	46bd      	mov	sp, r7
   15ee4:	bd80      	pop	{r7, pc}
   15ee6:	46c0      	nop			; (mov r8, r8)
   15ee8:	20000000 	.word	0x20000000

00015eec <system_interrupt_enable>:
{
   15eec:	b580      	push	{r7, lr}
   15eee:	b082      	sub	sp, #8
   15ef0:	af00      	add	r7, sp, #0
   15ef2:	0002      	movs	r2, r0
   15ef4:	1dfb      	adds	r3, r7, #7
   15ef6:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   15ef8:	4b06      	ldr	r3, [pc, #24]	; (15f14 <system_interrupt_enable+0x28>)
   15efa:	1dfa      	adds	r2, r7, #7
   15efc:	7812      	ldrb	r2, [r2, #0]
   15efe:	0011      	movs	r1, r2
   15f00:	221f      	movs	r2, #31
   15f02:	400a      	ands	r2, r1
   15f04:	2101      	movs	r1, #1
   15f06:	4091      	lsls	r1, r2
   15f08:	000a      	movs	r2, r1
   15f0a:	601a      	str	r2, [r3, #0]
}
   15f0c:	46c0      	nop			; (mov r8, r8)
   15f0e:	46bd      	mov	sp, r7
   15f10:	b002      	add	sp, #8
   15f12:	bd80      	pop	{r7, pc}
   15f14:	e000e100 	.word	0xe000e100

00015f18 <usart_is_syncing>:
{
   15f18:	b580      	push	{r7, lr}
   15f1a:	b084      	sub	sp, #16
   15f1c:	af00      	add	r7, sp, #0
   15f1e:	6078      	str	r0, [r7, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
   15f20:	687b      	ldr	r3, [r7, #4]
   15f22:	681b      	ldr	r3, [r3, #0]
   15f24:	60fb      	str	r3, [r7, #12]
	return (usart_hw->SYNCBUSY.reg);
   15f26:	68fb      	ldr	r3, [r7, #12]
   15f28:	69db      	ldr	r3, [r3, #28]
   15f2a:	1e5a      	subs	r2, r3, #1
   15f2c:	4193      	sbcs	r3, r2
   15f2e:	b2db      	uxtb	r3, r3
}
   15f30:	0018      	movs	r0, r3
   15f32:	46bd      	mov	sp, r7
   15f34:	b004      	add	sp, #16
   15f36:	bd80      	pop	{r7, pc}

00015f38 <_usart_wait_for_sync>:
{
   15f38:	b580      	push	{r7, lr}
   15f3a:	b082      	sub	sp, #8
   15f3c:	af00      	add	r7, sp, #0
   15f3e:	6078      	str	r0, [r7, #4]
	while (usart_is_syncing(module)) {
   15f40:	46c0      	nop			; (mov r8, r8)
   15f42:	687b      	ldr	r3, [r7, #4]
   15f44:	0018      	movs	r0, r3
   15f46:	4b04      	ldr	r3, [pc, #16]	; (15f58 <_usart_wait_for_sync+0x20>)
   15f48:	4798      	blx	r3
   15f4a:	1e03      	subs	r3, r0, #0
   15f4c:	d1f9      	bne.n	15f42 <_usart_wait_for_sync+0xa>
}
   15f4e:	46c0      	nop			; (mov r8, r8)
   15f50:	46bd      	mov	sp, r7
   15f52:	b002      	add	sp, #8
   15f54:	bd80      	pop	{r7, pc}
   15f56:	46c0      	nop			; (mov r8, r8)
   15f58:	00015f19 	.word	0x00015f19

00015f5c <usart_get_config_defaults>:
 *
 * \param[in,out] config  Pointer to configuration struct
 */
static inline void usart_get_config_defaults(
		struct usart_config *const config)
{
   15f5c:	b580      	push	{r7, lr}
   15f5e:	b082      	sub	sp, #8
   15f60:	af00      	add	r7, sp, #0
   15f62:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
   15f64:	687b      	ldr	r3, [r7, #4]
   15f66:	2280      	movs	r2, #128	; 0x80
   15f68:	05d2      	lsls	r2, r2, #23
   15f6a:	601a      	str	r2, [r3, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
   15f6c:	687b      	ldr	r3, [r7, #4]
   15f6e:	2200      	movs	r2, #0
   15f70:	605a      	str	r2, [r3, #4]
	config->parity           = USART_PARITY_NONE;
   15f72:	687b      	ldr	r3, [r7, #4]
   15f74:	22ff      	movs	r2, #255	; 0xff
   15f76:	811a      	strh	r2, [r3, #8]
	config->stopbits         = USART_STOPBITS_1;
   15f78:	687b      	ldr	r3, [r7, #4]
   15f7a:	2200      	movs	r2, #0
   15f7c:	729a      	strb	r2, [r3, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
   15f7e:	687b      	ldr	r3, [r7, #4]
   15f80:	2200      	movs	r2, #0
   15f82:	72da      	strb	r2, [r3, #11]
	config->baudrate         = 9600;
   15f84:	687b      	ldr	r3, [r7, #4]
   15f86:	2296      	movs	r2, #150	; 0x96
   15f88:	0192      	lsls	r2, r2, #6
   15f8a:	621a      	str	r2, [r3, #32]
	config->receiver_enable  = true;
   15f8c:	687b      	ldr	r3, [r7, #4]
   15f8e:	2224      	movs	r2, #36	; 0x24
   15f90:	2101      	movs	r1, #1
   15f92:	5499      	strb	r1, [r3, r2]
	config->transmitter_enable = true;
   15f94:	687b      	ldr	r3, [r7, #4]
   15f96:	2225      	movs	r2, #37	; 0x25
   15f98:	2101      	movs	r1, #1
   15f9a:	5499      	strb	r1, [r3, r2]
	config->clock_polarity_inverted = false;
   15f9c:	687b      	ldr	r3, [r7, #4]
   15f9e:	2226      	movs	r2, #38	; 0x26
   15fa0:	2100      	movs	r1, #0
   15fa2:	5499      	strb	r1, [r3, r2]
	config->use_external_clock = false;
   15fa4:	687b      	ldr	r3, [r7, #4]
   15fa6:	2227      	movs	r2, #39	; 0x27
   15fa8:	2100      	movs	r1, #0
   15faa:	5499      	strb	r1, [r3, r2]
	config->ext_clock_freq   = 0;
   15fac:	687b      	ldr	r3, [r7, #4]
   15fae:	2200      	movs	r2, #0
   15fb0:	629a      	str	r2, [r3, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
   15fb2:	687b      	ldr	r3, [r7, #4]
   15fb4:	2288      	movs	r2, #136	; 0x88
   15fb6:	0352      	lsls	r2, r2, #13
   15fb8:	60da      	str	r2, [r3, #12]
	config->run_in_standby   = false;
   15fba:	687b      	ldr	r3, [r7, #4]
   15fbc:	222c      	movs	r2, #44	; 0x2c
   15fbe:	2100      	movs	r1, #0
   15fc0:	5499      	strb	r1, [r3, r2]
	config->generator_source = GCLK_GENERATOR_0;
   15fc2:	687b      	ldr	r3, [r7, #4]
   15fc4:	222d      	movs	r2, #45	; 0x2d
   15fc6:	2100      	movs	r1, #0
   15fc8:	5499      	strb	r1, [r3, r2]
	config->pinmux_pad0      = PINMUX_DEFAULT;
   15fca:	687b      	ldr	r3, [r7, #4]
   15fcc:	2200      	movs	r2, #0
   15fce:	631a      	str	r2, [r3, #48]	; 0x30
	config->pinmux_pad1      = PINMUX_DEFAULT;
   15fd0:	687b      	ldr	r3, [r7, #4]
   15fd2:	2200      	movs	r2, #0
   15fd4:	635a      	str	r2, [r3, #52]	; 0x34
	config->pinmux_pad2      = PINMUX_DEFAULT;
   15fd6:	687b      	ldr	r3, [r7, #4]
   15fd8:	2200      	movs	r2, #0
   15fda:	639a      	str	r2, [r3, #56]	; 0x38
	config->pinmux_pad3      = PINMUX_DEFAULT;
   15fdc:	687b      	ldr	r3, [r7, #4]
   15fde:	2200      	movs	r2, #0
   15fe0:	63da      	str	r2, [r3, #60]	; 0x3c
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
   15fe2:	687b      	ldr	r3, [r7, #4]
   15fe4:	2200      	movs	r2, #0
   15fe6:	615a      	str	r2, [r3, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
   15fe8:	687b      	ldr	r3, [r7, #4]
   15fea:	2200      	movs	r2, #0
   15fec:	821a      	strh	r2, [r3, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
   15fee:	687b      	ldr	r3, [r7, #4]
   15ff0:	2200      	movs	r2, #0
   15ff2:	76da      	strb	r2, [r3, #27]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification  = false;
   15ff4:	687b      	ldr	r3, [r7, #4]
   15ff6:	2200      	movs	r2, #0
   15ff8:	761a      	strb	r2, [r3, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
   15ffa:	687b      	ldr	r3, [r7, #4]
   15ffc:	2200      	movs	r2, #0
   15ffe:	771a      	strb	r2, [r3, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
   16000:	687b      	ldr	r3, [r7, #4]
   16002:	2200      	movs	r2, #0
   16004:	765a      	strb	r2, [r3, #25]
	config->receive_pulse_length                    = 19;
   16006:	687b      	ldr	r3, [r7, #4]
   16008:	2213      	movs	r2, #19
   1600a:	769a      	strb	r2, [r3, #26]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
   1600c:	687b      	ldr	r3, [r7, #4]
   1600e:	2200      	movs	r2, #0
   16010:	775a      	strb	r2, [r3, #29]
#endif
#ifdef FEATURE_USART_RS485
	config->rs485_guard_time = RS485_GUARD_TIME_0_BIT;
#endif
}
   16012:	46c0      	nop			; (mov r8, r8)
   16014:	46bd      	mov	sp, r7
   16016:	b002      	add	sp, #8
   16018:	bd80      	pop	{r7, pc}
	...

0001601c <usart_enable>:
 *
 * \param[in]  module  Pointer to USART software instance struct
 */
static inline void usart_enable(
		const struct usart_module *const module)
{
   1601c:	b580      	push	{r7, lr}
   1601e:	b084      	sub	sp, #16
   16020:	af00      	add	r7, sp, #0
   16022:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
   16024:	687b      	ldr	r3, [r7, #4]
   16026:	681b      	ldr	r3, [r3, #0]
   16028:	60fb      	str	r3, [r7, #12]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
   1602a:	687b      	ldr	r3, [r7, #4]
   1602c:	681b      	ldr	r3, [r3, #0]
   1602e:	0018      	movs	r0, r3
   16030:	4b09      	ldr	r3, [pc, #36]	; (16058 <usart_enable+0x3c>)
   16032:	4798      	blx	r3
   16034:	0003      	movs	r3, r0
   16036:	0018      	movs	r0, r3
   16038:	4b08      	ldr	r3, [pc, #32]	; (1605c <usart_enable+0x40>)
   1603a:	4798      	blx	r3
#endif

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
   1603c:	687b      	ldr	r3, [r7, #4]
   1603e:	0018      	movs	r0, r3
   16040:	4b07      	ldr	r3, [pc, #28]	; (16060 <usart_enable+0x44>)
   16042:	4798      	blx	r3

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
   16044:	68fb      	ldr	r3, [r7, #12]
   16046:	681b      	ldr	r3, [r3, #0]
   16048:	2202      	movs	r2, #2
   1604a:	431a      	orrs	r2, r3
   1604c:	68fb      	ldr	r3, [r7, #12]
   1604e:	601a      	str	r2, [r3, #0]
}
   16050:	46c0      	nop			; (mov r8, r8)
   16052:	46bd      	mov	sp, r7
   16054:	b004      	add	sp, #16
   16056:	bd80      	pop	{r7, pc}
   16058:	0000cea5 	.word	0x0000cea5
   1605c:	00015eed 	.word	0x00015eed
   16060:	00015f39 	.word	0x00015f39

00016064 <usart_serial_init>:
 */
static inline bool usart_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
   16064:	b580      	push	{r7, lr}
   16066:	b084      	sub	sp, #16
   16068:	af00      	add	r7, sp, #0
   1606a:	60f8      	str	r0, [r7, #12]
   1606c:	60b9      	str	r1, [r7, #8]
   1606e:	607a      	str	r2, [r7, #4]
	if (usart_init(module, hw, config) == STATUS_OK) {
   16070:	687a      	ldr	r2, [r7, #4]
   16072:	68b9      	ldr	r1, [r7, #8]
   16074:	68fb      	ldr	r3, [r7, #12]
   16076:	0018      	movs	r0, r3
   16078:	4b05      	ldr	r3, [pc, #20]	; (16090 <usart_serial_init+0x2c>)
   1607a:	4798      	blx	r3
   1607c:	1e03      	subs	r3, r0, #0
   1607e:	d101      	bne.n	16084 <usart_serial_init+0x20>
		return true;
   16080:	2301      	movs	r3, #1
   16082:	e000      	b.n	16086 <usart_serial_init+0x22>
	}
	else {
		return false;
   16084:	2300      	movs	r3, #0
	}
}
   16086:	0018      	movs	r0, r3
   16088:	46bd      	mov	sp, r7
   1608a:	b004      	add	sp, #16
   1608c:	bd80      	pop	{r7, pc}
   1608e:	46c0      	nop			; (mov r8, r8)
   16090:	0000de71 	.word	0x0000de71

00016094 <usart_serial_putchar>:
 * \return Status code
 */
static inline enum status_code usart_serial_putchar(
		struct usart_module *const module,
		uint8_t c)
{
   16094:	b580      	push	{r7, lr}
   16096:	b082      	sub	sp, #8
   16098:	af00      	add	r7, sp, #0
   1609a:	6078      	str	r0, [r7, #4]
   1609c:	000a      	movs	r2, r1
   1609e:	1cfb      	adds	r3, r7, #3
   160a0:	701a      	strb	r2, [r3, #0]
	while(STATUS_OK !=usart_write_wait(module, c));
   160a2:	46c0      	nop			; (mov r8, r8)
   160a4:	1cfb      	adds	r3, r7, #3
   160a6:	781b      	ldrb	r3, [r3, #0]
   160a8:	b29a      	uxth	r2, r3
   160aa:	687b      	ldr	r3, [r7, #4]
   160ac:	0011      	movs	r1, r2
   160ae:	0018      	movs	r0, r3
   160b0:	4b04      	ldr	r3, [pc, #16]	; (160c4 <usart_serial_putchar+0x30>)
   160b2:	4798      	blx	r3
   160b4:	1e03      	subs	r3, r0, #0
   160b6:	d1f5      	bne.n	160a4 <usart_serial_putchar+0x10>

	return STATUS_OK;
   160b8:	2300      	movs	r3, #0
}
   160ba:	0018      	movs	r0, r3
   160bc:	46bd      	mov	sp, r7
   160be:	b002      	add	sp, #8
   160c0:	bd80      	pop	{r7, pc}
   160c2:	46c0      	nop			; (mov r8, r8)
   160c4:	0000e0e5 	.word	0x0000e0e5

000160c8 <usart_serial_getchar>:
 * \param[out]    c       Destination for the read character.
 */
static inline void usart_serial_getchar(
		struct usart_module *const module,
		uint8_t *c)
{
   160c8:	b580      	push	{r7, lr}
   160ca:	b084      	sub	sp, #16
   160cc:	af00      	add	r7, sp, #0
   160ce:	6078      	str	r0, [r7, #4]
   160d0:	6039      	str	r1, [r7, #0]
	uint16_t temp = 0;
   160d2:	230e      	movs	r3, #14
   160d4:	18fb      	adds	r3, r7, r3
   160d6:	2200      	movs	r2, #0
   160d8:	801a      	strh	r2, [r3, #0]

	while(STATUS_OK != usart_read_wait(module, &temp));
   160da:	46c0      	nop			; (mov r8, r8)
   160dc:	230e      	movs	r3, #14
   160de:	18fa      	adds	r2, r7, r3
   160e0:	687b      	ldr	r3, [r7, #4]
   160e2:	0011      	movs	r1, r2
   160e4:	0018      	movs	r0, r3
   160e6:	4b07      	ldr	r3, [pc, #28]	; (16104 <usart_serial_getchar+0x3c>)
   160e8:	4798      	blx	r3
   160ea:	1e03      	subs	r3, r0, #0
   160ec:	d1f6      	bne.n	160dc <usart_serial_getchar+0x14>

	*c = temp;
   160ee:	230e      	movs	r3, #14
   160f0:	18fb      	adds	r3, r7, r3
   160f2:	881b      	ldrh	r3, [r3, #0]
   160f4:	b2da      	uxtb	r2, r3
   160f6:	683b      	ldr	r3, [r7, #0]
   160f8:	701a      	strb	r2, [r3, #0]
}
   160fa:	46c0      	nop			; (mov r8, r8)
   160fc:	46bd      	mov	sp, r7
   160fe:	b004      	add	sp, #16
   16100:	bd80      	pop	{r7, pc}
   16102:	46c0      	nop			; (mov r8, r8)
   16104:	0000e149 	.word	0x0000e149

00016108 <stdio_serial_init>:
 */
static inline void stdio_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
   16108:	b580      	push	{r7, lr}
   1610a:	b084      	sub	sp, #16
   1610c:	af00      	add	r7, sp, #0
   1610e:	60f8      	str	r0, [r7, #12]
   16110:	60b9      	str	r1, [r7, #8]
   16112:	607a      	str	r2, [r7, #4]
	stdio_base = (void *)module;
   16114:	4b10      	ldr	r3, [pc, #64]	; (16158 <stdio_serial_init+0x50>)
   16116:	68fa      	ldr	r2, [r7, #12]
   16118:	601a      	str	r2, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
   1611a:	4b10      	ldr	r3, [pc, #64]	; (1615c <stdio_serial_init+0x54>)
   1611c:	4a10      	ldr	r2, [pc, #64]	; (16160 <stdio_serial_init+0x58>)
   1611e:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
   16120:	4b10      	ldr	r3, [pc, #64]	; (16164 <stdio_serial_init+0x5c>)
   16122:	4a11      	ldr	r2, [pc, #68]	; (16168 <stdio_serial_init+0x60>)
   16124:	601a      	str	r2, [r3, #0]

	usart_serial_init(module, hw, config);
   16126:	687a      	ldr	r2, [r7, #4]
   16128:	68b9      	ldr	r1, [r7, #8]
   1612a:	68fb      	ldr	r3, [r7, #12]
   1612c:	0018      	movs	r0, r3
   1612e:	4b0f      	ldr	r3, [pc, #60]	; (1616c <stdio_serial_init+0x64>)
   16130:	4798      	blx	r3
# if defined(__GNUC__)
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
   16132:	4b0f      	ldr	r3, [pc, #60]	; (16170 <stdio_serial_init+0x68>)
   16134:	681b      	ldr	r3, [r3, #0]
   16136:	689b      	ldr	r3, [r3, #8]
   16138:	2100      	movs	r1, #0
   1613a:	0018      	movs	r0, r3
   1613c:	4b0d      	ldr	r3, [pc, #52]	; (16174 <stdio_serial_init+0x6c>)
   1613e:	4798      	blx	r3
	setbuf(stdin, NULL);
   16140:	4b0b      	ldr	r3, [pc, #44]	; (16170 <stdio_serial_init+0x68>)
   16142:	681b      	ldr	r3, [r3, #0]
   16144:	685b      	ldr	r3, [r3, #4]
   16146:	2100      	movs	r1, #0
   16148:	0018      	movs	r0, r3
   1614a:	4b0a      	ldr	r3, [pc, #40]	; (16174 <stdio_serial_init+0x6c>)
   1614c:	4798      	blx	r3
	// Note: Already the case in IAR's Normal DLIB default configuration
	// and AVR GCC library:
	// - printf() emits one character at a time.
	// - getchar() requests only 1 byte to exit.
#  endif
}
   1614e:	46c0      	nop			; (mov r8, r8)
   16150:	46bd      	mov	sp, r7
   16152:	b004      	add	sp, #16
   16154:	bd80      	pop	{r7, pc}
   16156:	46c0      	nop			; (mov r8, r8)
   16158:	20002b80 	.word	0x20002b80
   1615c:	20002b7c 	.word	0x20002b7c
   16160:	00016095 	.word	0x00016095
   16164:	20002b78 	.word	0x20002b78
   16168:	000160c9 	.word	0x000160c9
   1616c:	00016065 	.word	0x00016065
   16170:	2000022c 	.word	0x2000022c
   16174:	0001c429 	.word	0x0001c429

00016178 <tc_is_syncing>:
{
   16178:	b580      	push	{r7, lr}
   1617a:	b084      	sub	sp, #16
   1617c:	af00      	add	r7, sp, #0
   1617e:	6078      	str	r0, [r7, #4]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
   16180:	687b      	ldr	r3, [r7, #4]
   16182:	681b      	ldr	r3, [r3, #0]
   16184:	60fb      	str	r3, [r7, #12]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
   16186:	68fb      	ldr	r3, [r7, #12]
   16188:	7bdb      	ldrb	r3, [r3, #15]
   1618a:	b2db      	uxtb	r3, r3
   1618c:	001a      	movs	r2, r3
   1618e:	2380      	movs	r3, #128	; 0x80
   16190:	4013      	ands	r3, r2
   16192:	1e5a      	subs	r2, r3, #1
   16194:	4193      	sbcs	r3, r2
   16196:	b2db      	uxtb	r3, r3
}
   16198:	0018      	movs	r0, r3
   1619a:	46bd      	mov	sp, r7
   1619c:	b004      	add	sp, #16
   1619e:	bd80      	pop	{r7, pc}

000161a0 <tc_get_config_defaults>:
 *
 * \param[out]  config  Pointer to a TC module configuration structure to set
 */
static inline void tc_get_config_defaults(
		struct tc_config *const config)
{
   161a0:	b580      	push	{r7, lr}
   161a2:	b082      	sub	sp, #8
   161a4:	af00      	add	r7, sp, #0
   161a6:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Write default config to config struct */
	config->clock_source               = GCLK_GENERATOR_0;
   161a8:	687b      	ldr	r3, [r7, #4]
   161aa:	2200      	movs	r2, #0
   161ac:	701a      	strb	r2, [r3, #0]
	config->counter_size               = TC_COUNTER_SIZE_16BIT;
   161ae:	687b      	ldr	r3, [r7, #4]
   161b0:	2200      	movs	r2, #0
   161b2:	709a      	strb	r2, [r3, #2]
	config->clock_prescaler            = TC_CLOCK_PRESCALER_DIV1;
   161b4:	687b      	ldr	r3, [r7, #4]
   161b6:	2200      	movs	r2, #0
   161b8:	809a      	strh	r2, [r3, #4]
	config->wave_generation            = TC_WAVE_GENERATION_NORMAL_FREQ;
   161ba:	687b      	ldr	r3, [r7, #4]
   161bc:	2200      	movs	r2, #0
   161be:	719a      	strb	r2, [r3, #6]
	config->reload_action              = TC_RELOAD_ACTION_GCLK;
   161c0:	687b      	ldr	r3, [r7, #4]
   161c2:	2200      	movs	r2, #0
   161c4:	811a      	strh	r2, [r3, #8]
	config->run_in_standby             = false;
   161c6:	687b      	ldr	r3, [r7, #4]
   161c8:	2200      	movs	r2, #0
   161ca:	705a      	strb	r2, [r3, #1]
#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30)
	config->on_demand                  = false;
#endif
	config->waveform_invert_output     = TC_WAVEFORM_INVERT_OUTPUT_NONE;
   161cc:	687b      	ldr	r3, [r7, #4]
   161ce:	2200      	movs	r2, #0
   161d0:	729a      	strb	r2, [r3, #10]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_0] = false;
   161d2:	687b      	ldr	r3, [r7, #4]
   161d4:	2200      	movs	r2, #0
   161d6:	72da      	strb	r2, [r3, #11]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_1] = false;
   161d8:	687b      	ldr	r3, [r7, #4]
   161da:	2200      	movs	r2, #0
   161dc:	731a      	strb	r2, [r3, #12]
#ifdef 	FEATURE_TC_IO_CAPTURE
	config->enable_capture_on_IO[TC_COMPARE_CAPTURE_CHANNEL_0] = false;
	config->enable_capture_on_IO[TC_COMPARE_CAPTURE_CHANNEL_1] = false;
#endif

	config->count_direction            = TC_COUNT_DIRECTION_UP;
   161de:	687b      	ldr	r3, [r7, #4]
   161e0:	2200      	movs	r2, #0
   161e2:	739a      	strb	r2, [r3, #14]
	config->oneshot                    = false;
   161e4:	687b      	ldr	r3, [r7, #4]
   161e6:	2200      	movs	r2, #0
   161e8:	735a      	strb	r2, [r3, #13]

	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].enabled = false;
   161ea:	687b      	ldr	r3, [r7, #4]
   161ec:	2200      	movs	r2, #0
   161ee:	741a      	strb	r2, [r3, #16]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_out = 0;
   161f0:	687b      	ldr	r3, [r7, #4]
   161f2:	2200      	movs	r2, #0
   161f4:	615a      	str	r2, [r3, #20]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_mux = 0;
   161f6:	687b      	ldr	r3, [r7, #4]
   161f8:	2200      	movs	r2, #0
   161fa:	619a      	str	r2, [r3, #24]

	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].enabled = false;
   161fc:	687b      	ldr	r3, [r7, #4]
   161fe:	2200      	movs	r2, #0
   16200:	771a      	strb	r2, [r3, #28]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_out = 0;
   16202:	687b      	ldr	r3, [r7, #4]
   16204:	2200      	movs	r2, #0
   16206:	621a      	str	r2, [r3, #32]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_mux = 0;
   16208:	687b      	ldr	r3, [r7, #4]
   1620a:	2200      	movs	r2, #0
   1620c:	625a      	str	r2, [r3, #36]	; 0x24

	config->counter_16_bit.value                   = 0x0000;
   1620e:	687b      	ldr	r3, [r7, #4]
   16210:	2200      	movs	r2, #0
   16212:	851a      	strh	r2, [r3, #40]	; 0x28
	config->counter_16_bit.compare_capture_channel\
		[TC_COMPARE_CAPTURE_CHANNEL_0]                        = 0x0000;
   16214:	687b      	ldr	r3, [r7, #4]
   16216:	2200      	movs	r2, #0
   16218:	855a      	strh	r2, [r3, #42]	; 0x2a
	config->counter_16_bit.compare_capture_channel\
		[TC_COMPARE_CAPTURE_CHANNEL_1]                        = 0x0000;
   1621a:	687b      	ldr	r3, [r7, #4]
   1621c:	2200      	movs	r2, #0
   1621e:	859a      	strh	r2, [r3, #44]	; 0x2c
#ifdef FEATURE_TC_DOUBLE_BUFFERED
	config->double_buffering_enabled = false;
#endif

}
   16220:	46c0      	nop			; (mov r8, r8)
   16222:	46bd      	mov	sp, r7
   16224:	b002      	add	sp, #8
   16226:	bd80      	pop	{r7, pc}

00016228 <tc_enable>:
 *
 * \param[in]  module_inst   Pointer to the software module instance struct
 */
static inline void tc_enable(
		const struct tc_module *const module_inst)
{
   16228:	b580      	push	{r7, lr}
   1622a:	b084      	sub	sp, #16
   1622c:	af00      	add	r7, sp, #0
   1622e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
   16230:	687b      	ldr	r3, [r7, #4]
   16232:	681b      	ldr	r3, [r3, #0]
   16234:	60fb      	str	r3, [r7, #12]

	while (tc_is_syncing(module_inst)) {
   16236:	46c0      	nop			; (mov r8, r8)
   16238:	687b      	ldr	r3, [r7, #4]
   1623a:	0018      	movs	r0, r3
   1623c:	4b07      	ldr	r3, [pc, #28]	; (1625c <tc_enable+0x34>)
   1623e:	4798      	blx	r3
   16240:	1e03      	subs	r3, r0, #0
   16242:	d1f9      	bne.n	16238 <tc_enable+0x10>
		/* Wait for sync */
	}

	/* Enable TC module */
	tc_module->CTRLA.reg |= TC_CTRLA_ENABLE;
   16244:	68fb      	ldr	r3, [r7, #12]
   16246:	881b      	ldrh	r3, [r3, #0]
   16248:	b29b      	uxth	r3, r3
   1624a:	2202      	movs	r2, #2
   1624c:	4313      	orrs	r3, r2
   1624e:	b29a      	uxth	r2, r3
   16250:	68fb      	ldr	r3, [r7, #12]
   16252:	801a      	strh	r2, [r3, #0]
}
   16254:	46c0      	nop			; (mov r8, r8)
   16256:	46bd      	mov	sp, r7
   16258:	b004      	add	sp, #16
   1625a:	bd80      	pop	{r7, pc}
   1625c:	00016179 	.word	0x00016179

00016260 <_tc_interrupt_get_interrupt_vector>:
 *
 * \return Interrupt vector for of the given TC module instance.
 */
static enum system_interrupt_vector _tc_interrupt_get_interrupt_vector(
		uint32_t inst_num)
{
   16260:	b580      	push	{r7, lr}
   16262:	b082      	sub	sp, #8
   16264:	af00      	add	r7, sp, #0
   16266:	6078      	str	r0, [r7, #4]
#else
			MRECURSION(TC_INST_NUM, _TC_INTERRUPT_VECT_NUM, TC_INST_MAX_ID)
#endif
		};

	return (enum system_interrupt_vector)tc_interrupt_vectors[inst_num];
   16268:	4a04      	ldr	r2, [pc, #16]	; (1627c <_tc_interrupt_get_interrupt_vector+0x1c>)
   1626a:	687b      	ldr	r3, [r7, #4]
   1626c:	18d3      	adds	r3, r2, r3
   1626e:	781b      	ldrb	r3, [r3, #0]
   16270:	b25b      	sxtb	r3, r3
}
   16272:	0018      	movs	r0, r3
   16274:	46bd      	mov	sp, r7
   16276:	b002      	add	sp, #8
   16278:	bd80      	pop	{r7, pc}
   1627a:	46c0      	nop			; (mov r8, r8)
   1627c:	20000160 	.word	0x20000160

00016280 <tc_enable_callback>:
 * \param[in]     callback_type Callback type given by an enum
 */
static inline void tc_enable_callback(
		struct tc_module *const module,
		const enum tc_callback callback_type)
{
   16280:	b580      	push	{r7, lr}
   16282:	b082      	sub	sp, #8
   16284:	af00      	add	r7, sp, #0
   16286:	6078      	str	r0, [r7, #4]
   16288:	000a      	movs	r2, r1
   1628a:	1cfb      	adds	r3, r7, #3
   1628c:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);


	/* Enable interrupts for this TC module */
	system_interrupt_enable(_tc_interrupt_get_interrupt_vector(_tc_get_inst_index(module->hw)));
   1628e:	687b      	ldr	r3, [r7, #4]
   16290:	681b      	ldr	r3, [r3, #0]
   16292:	0018      	movs	r0, r3
   16294:	4b22      	ldr	r3, [pc, #136]	; (16320 <tc_enable_callback+0xa0>)
   16296:	4798      	blx	r3
   16298:	0003      	movs	r3, r0
   1629a:	0018      	movs	r0, r3
   1629c:	4b21      	ldr	r3, [pc, #132]	; (16324 <tc_enable_callback+0xa4>)
   1629e:	4798      	blx	r3
   162a0:	0003      	movs	r3, r0
   162a2:	0018      	movs	r0, r3
   162a4:	4b20      	ldr	r3, [pc, #128]	; (16328 <tc_enable_callback+0xa8>)
   162a6:	4798      	blx	r3

	/* Enable callback */
	if (callback_type == TC_CALLBACK_CC_CHANNEL0) {
   162a8:	1cfb      	adds	r3, r7, #3
   162aa:	781b      	ldrb	r3, [r3, #0]
   162ac:	2b02      	cmp	r3, #2
   162ae:	d10b      	bne.n	162c8 <tc_enable_callback+0x48>
		module->enable_callback_mask |= TC_INTFLAG_MC(1);
   162b0:	687b      	ldr	r3, [r7, #4]
   162b2:	7e5b      	ldrb	r3, [r3, #25]
   162b4:	2210      	movs	r2, #16
   162b6:	4313      	orrs	r3, r2
   162b8:	b2da      	uxtb	r2, r3
   162ba:	687b      	ldr	r3, [r7, #4]
   162bc:	765a      	strb	r2, [r3, #25]
		module->hw->COUNT8.INTENSET.reg = TC_INTFLAG_MC(1);
   162be:	687b      	ldr	r3, [r7, #4]
   162c0:	681b      	ldr	r3, [r3, #0]
   162c2:	2210      	movs	r2, #16
   162c4:	735a      	strb	r2, [r3, #13]
	}
	else {
		module->enable_callback_mask |= (1 << callback_type);
		module->hw->COUNT8.INTENSET.reg = (1 << callback_type);
	}
}
   162c6:	e026      	b.n	16316 <tc_enable_callback+0x96>
	else if (callback_type == TC_CALLBACK_CC_CHANNEL1) {
   162c8:	1cfb      	adds	r3, r7, #3
   162ca:	781b      	ldrb	r3, [r3, #0]
   162cc:	2b03      	cmp	r3, #3
   162ce:	d10b      	bne.n	162e8 <tc_enable_callback+0x68>
		module->enable_callback_mask |= TC_INTFLAG_MC(2);
   162d0:	687b      	ldr	r3, [r7, #4]
   162d2:	7e5b      	ldrb	r3, [r3, #25]
   162d4:	2220      	movs	r2, #32
   162d6:	4313      	orrs	r3, r2
   162d8:	b2da      	uxtb	r2, r3
   162da:	687b      	ldr	r3, [r7, #4]
   162dc:	765a      	strb	r2, [r3, #25]
		module->hw->COUNT8.INTENSET.reg = TC_INTFLAG_MC(2);
   162de:	687b      	ldr	r3, [r7, #4]
   162e0:	681b      	ldr	r3, [r3, #0]
   162e2:	2220      	movs	r2, #32
   162e4:	735a      	strb	r2, [r3, #13]
}
   162e6:	e016      	b.n	16316 <tc_enable_callback+0x96>
		module->enable_callback_mask |= (1 << callback_type);
   162e8:	687b      	ldr	r3, [r7, #4]
   162ea:	7e5b      	ldrb	r3, [r3, #25]
   162ec:	b25a      	sxtb	r2, r3
   162ee:	1cfb      	adds	r3, r7, #3
   162f0:	781b      	ldrb	r3, [r3, #0]
   162f2:	2101      	movs	r1, #1
   162f4:	4099      	lsls	r1, r3
   162f6:	000b      	movs	r3, r1
   162f8:	b25b      	sxtb	r3, r3
   162fa:	4313      	orrs	r3, r2
   162fc:	b25b      	sxtb	r3, r3
   162fe:	b2da      	uxtb	r2, r3
   16300:	687b      	ldr	r3, [r7, #4]
   16302:	765a      	strb	r2, [r3, #25]
		module->hw->COUNT8.INTENSET.reg = (1 << callback_type);
   16304:	687b      	ldr	r3, [r7, #4]
   16306:	681b      	ldr	r3, [r3, #0]
   16308:	1cfa      	adds	r2, r7, #3
   1630a:	7812      	ldrb	r2, [r2, #0]
   1630c:	2101      	movs	r1, #1
   1630e:	4091      	lsls	r1, r2
   16310:	000a      	movs	r2, r1
   16312:	b2d2      	uxtb	r2, r2
   16314:	735a      	strb	r2, [r3, #13]
}
   16316:	46c0      	nop			; (mov r8, r8)
   16318:	46bd      	mov	sp, r7
   1631a:	b002      	add	sp, #8
   1631c:	bd80      	pop	{r7, pc}
   1631e:	46c0      	nop			; (mov r8, r8)
   16320:	000019f9 	.word	0x000019f9
   16324:	00016261 	.word	0x00016261
   16328:	00015eed 	.word	0x00015eed

0001632c <configure_console>:

/**
 * \brief Configure UART console.
 */
static void configure_console(void)
{
   1632c:	b580      	push	{r7, lr}
   1632e:	b090      	sub	sp, #64	; 0x40
   16330:	af00      	add	r7, sp, #0
#if SAM0
	struct usart_config usart_conf;

	usart_get_config_defaults(&usart_conf);
   16332:	003b      	movs	r3, r7
   16334:	0018      	movs	r0, r3
   16336:	4b13      	ldr	r3, [pc, #76]	; (16384 <configure_console+0x58>)
   16338:	4798      	blx	r3
	usart_conf.mux_setting = EDBG_CDC_SERCOM_MUX_SETTING;
   1633a:	003b      	movs	r3, r7
   1633c:	2280      	movs	r2, #128	; 0x80
   1633e:	0352      	lsls	r2, r2, #13
   16340:	60da      	str	r2, [r3, #12]
	usart_conf.pinmux_pad0 = EDBG_CDC_SERCOM_PINMUX_PAD0;
   16342:	003b      	movs	r3, r7
   16344:	4a10      	ldr	r2, [pc, #64]	; (16388 <configure_console+0x5c>)
   16346:	631a      	str	r2, [r3, #48]	; 0x30
	usart_conf.pinmux_pad1 = EDBG_CDC_SERCOM_PINMUX_PAD1;
   16348:	003b      	movs	r3, r7
   1634a:	4a10      	ldr	r2, [pc, #64]	; (1638c <configure_console+0x60>)
   1634c:	635a      	str	r2, [r3, #52]	; 0x34
	usart_conf.pinmux_pad2 = EDBG_CDC_SERCOM_PINMUX_PAD2;
   1634e:	003b      	movs	r3, r7
   16350:	2201      	movs	r2, #1
   16352:	4252      	negs	r2, r2
   16354:	639a      	str	r2, [r3, #56]	; 0x38
	usart_conf.pinmux_pad3 = EDBG_CDC_SERCOM_PINMUX_PAD3;
   16356:	003b      	movs	r3, r7
   16358:	2201      	movs	r2, #1
   1635a:	4252      	negs	r2, r2
   1635c:	63da      	str	r2, [r3, #60]	; 0x3c
	usart_conf.baudrate    = 115200;
   1635e:	003b      	movs	r3, r7
   16360:	22e1      	movs	r2, #225	; 0xe1
   16362:	0252      	lsls	r2, r2, #9
   16364:	621a      	str	r2, [r3, #32]

	stdio_serial_init(&cdc_uart_module, EDBG_CDC_MODULE, &usart_conf);
   16366:	003a      	movs	r2, r7
   16368:	4909      	ldr	r1, [pc, #36]	; (16390 <configure_console+0x64>)
   1636a:	4b0a      	ldr	r3, [pc, #40]	; (16394 <configure_console+0x68>)
   1636c:	0018      	movs	r0, r3
   1636e:	4b0a      	ldr	r3, [pc, #40]	; (16398 <configure_console+0x6c>)
   16370:	4798      	blx	r3
	usart_enable(&cdc_uart_module);
   16372:	4b08      	ldr	r3, [pc, #32]	; (16394 <configure_console+0x68>)
   16374:	0018      	movs	r0, r3
   16376:	4b09      	ldr	r3, [pc, #36]	; (1639c <configure_console+0x70>)
   16378:	4798      	blx	r3

	/* Configure UART console. */
	sysclk_enable_peripheral_clock(CONSOLE_UART_ID);
	stdio_serial_init(CONF_UART, &uart_serial_options);
#endif
}
   1637a:	46c0      	nop			; (mov r8, r8)
   1637c:	46bd      	mov	sp, r7
   1637e:	b010      	add	sp, #64	; 0x40
   16380:	bd80      	pop	{r7, pc}
   16382:	46c0      	nop			; (mov r8, r8)
   16384:	00015f5d 	.word	0x00015f5d
   16388:	00160002 	.word	0x00160002
   1638c:	00170002 	.word	0x00170002
   16390:	42001400 	.word	0x42001400
   16394:	20002ba4 	.word	0x20002ba4
   16398:	00016109 	.word	0x00016109
   1639c:	0001601d 	.word	0x0001601d

000163a0 <configure_rtc>:

/* Initialize an RTC (or 1 second timer) */
static void configure_rtc(void)
{
   163a0:	b580      	push	{r7, lr}
   163a2:	b084      	sub	sp, #16
   163a4:	af00      	add	r7, sp, #0
#if SAM0
    struct rtc_count_config config_rtc_count;
    rtc_count_get_config_defaults(&config_rtc_count);
   163a6:	003b      	movs	r3, r7
   163a8:	0018      	movs	r0, r3
   163aa:	4b09      	ldr	r3, [pc, #36]	; (163d0 <configure_rtc+0x30>)
   163ac:	4798      	blx	r3
    config_rtc_count.continuously_update = true;
   163ae:	003b      	movs	r3, r7
   163b0:	2201      	movs	r2, #1
   163b2:	711a      	strb	r2, [r3, #4]

    rtc_count_init(&rtc_instance, RTC, &config_rtc_count);
   163b4:	003a      	movs	r2, r7
   163b6:	4907      	ldr	r1, [pc, #28]	; (163d4 <configure_rtc+0x34>)
   163b8:	4b07      	ldr	r3, [pc, #28]	; (163d8 <configure_rtc+0x38>)
   163ba:	0018      	movs	r0, r3
   163bc:	4b07      	ldr	r3, [pc, #28]	; (163dc <configure_rtc+0x3c>)
   163be:	4798      	blx	r3

    rtc_count_enable(&rtc_instance);
   163c0:	4b05      	ldr	r3, [pc, #20]	; (163d8 <configure_rtc+0x38>)
   163c2:	0018      	movs	r0, r3
   163c4:	4b06      	ldr	r3, [pc, #24]	; (163e0 <configure_rtc+0x40>)
   163c6:	4798      	blx	r3

	while (!pmc_osc_is_ready_32kxtal());

    rtc_set_hour_mode(RTC, 0);
#endif
}
   163c8:	46c0      	nop			; (mov r8, r8)
   163ca:	46bd      	mov	sp, r7
   163cc:	b004      	add	sp, #16
   163ce:	bd80      	pop	{r7, pc}
   163d0:	00015e75 	.word	0x00015e75
   163d4:	40001400 	.word	0x40001400
   163d8:	20002b9c 	.word	0x20002b9c
   163dc:	00005481 	.word	0x00005481
   163e0:	00005291 	.word	0x00005291

000163e4 <update_timers>:

void update_timers(void)
{
   163e4:	b580      	push	{r7, lr}
   163e6:	af00      	add	r7, sp, #0
    wifi_timer_update();
   163e8:	4b05      	ldr	r3, [pc, #20]	; (16400 <update_timers+0x1c>)
   163ea:	4798      	blx	r3
    client_timer_update();
   163ec:	4b05      	ldr	r3, [pc, #20]	; (16404 <update_timers+0x20>)
   163ee:	4798      	blx	r3
    TimerCallback();
   163f0:	4b05      	ldr	r3, [pc, #20]	; (16408 <update_timers+0x24>)
   163f2:	4798      	blx	r3
    atca_kit_timer_update();
   163f4:	4b05      	ldr	r3, [pc, #20]	; (1640c <update_timers+0x28>)
   163f6:	4798      	blx	r3
}
   163f8:	46c0      	nop			; (mov r8, r8)
   163fa:	46bd      	mov	sp, r7
   163fc:	bd80      	pop	{r7, pc}
   163fe:	46c0      	nop			; (mov r8, r8)
   16400:	000168e1 	.word	0x000168e1
   16404:	00017b31 	.word	0x00017b31
   16408:	000145e5 	.word	0x000145e5
   1640c:	0001881d 	.word	0x0001881d

00016410 <periodic_timer_cb>:

/* Timer callback function */
#if SAM0
static void periodic_timer_cb(struct tc_module *const module)
{
   16410:	b580      	push	{r7, lr}
   16412:	b082      	sub	sp, #8
   16414:	af00      	add	r7, sp, #0
   16416:	6078      	str	r0, [r7, #4]
    update_timers();
   16418:	4b02      	ldr	r3, [pc, #8]	; (16424 <periodic_timer_cb+0x14>)
   1641a:	4798      	blx	r3
}
   1641c:	46c0      	nop			; (mov r8, r8)
   1641e:	46bd      	mov	sp, r7
   16420:	b002      	add	sp, #8
   16422:	bd80      	pop	{r7, pc}
   16424:	000163e5 	.word	0x000163e5

00016428 <configure_periodic_timer>:
}
#endif

/* Configure a periodic timer for driving various counters */
static void configure_periodic_timer(void)
{
   16428:	b580      	push	{r7, lr}
   1642a:	b08e      	sub	sp, #56	; 0x38
   1642c:	af00      	add	r7, sp, #0
    uint32_t counts;

#if SAM0
    struct tc_config config_tc;
    tc_get_config_defaults(&config_tc);
   1642e:	003b      	movs	r3, r7
   16430:	0018      	movs	r0, r3
   16432:	4b1a      	ldr	r3, [pc, #104]	; (1649c <configure_periodic_timer+0x74>)
   16434:	4798      	blx	r3

    /* For ease connect to the 32kHz source rather than the PLL */
    config_tc.clock_source = GCLK_GENERATOR_1;
   16436:	003b      	movs	r3, r7
   16438:	2201      	movs	r2, #1
   1643a:	701a      	strb	r2, [r3, #0]
    config_tc.wave_generation = TC_WAVE_GENERATION_MATCH_FREQ;
   1643c:	003b      	movs	r3, r7
   1643e:	2220      	movs	r2, #32
   16440:	719a      	strb	r2, [r3, #6]

    /* Calculate the match count required */
    counts = TIMER_UPDATE_PERIOD * system_gclk_gen_get_hz(config_tc.clock_source);
   16442:	003b      	movs	r3, r7
   16444:	781b      	ldrb	r3, [r3, #0]
   16446:	0018      	movs	r0, r3
   16448:	4b15      	ldr	r3, [pc, #84]	; (164a0 <configure_periodic_timer+0x78>)
   1644a:	4798      	blx	r3
   1644c:	0002      	movs	r2, r0
   1644e:	2364      	movs	r3, #100	; 0x64
   16450:	4353      	muls	r3, r2
   16452:	637b      	str	r3, [r7, #52]	; 0x34
    counts /= 1000;
   16454:	6b78      	ldr	r0, [r7, #52]	; 0x34
   16456:	4b13      	ldr	r3, [pc, #76]	; (164a4 <configure_periodic_timer+0x7c>)
   16458:	22fa      	movs	r2, #250	; 0xfa
   1645a:	0091      	lsls	r1, r2, #2
   1645c:	4798      	blx	r3
   1645e:	0003      	movs	r3, r0
   16460:	637b      	str	r3, [r7, #52]	; 0x34

    /* Set the match value that will trigger the interrupt */
    config_tc.counter_16_bit.compare_capture_channel[0] = counts;
   16462:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   16464:	b29a      	uxth	r2, r3
   16466:	003b      	movs	r3, r7
   16468:	855a      	strh	r2, [r3, #42]	; 0x2a

    /* Set up the module */
    tc_init(&tc3_inst, TC3, &config_tc);
   1646a:	003a      	movs	r2, r7
   1646c:	490e      	ldr	r1, [pc, #56]	; (164a8 <configure_periodic_timer+0x80>)
   1646e:	4b0f      	ldr	r3, [pc, #60]	; (164ac <configure_periodic_timer+0x84>)
   16470:	0018      	movs	r0, r3
   16472:	4b0f      	ldr	r3, [pc, #60]	; (164b0 <configure_periodic_timer+0x88>)
   16474:	4798      	blx	r3

    /* Set up the interrupt */
    tc_register_callback(&tc3_inst, periodic_timer_cb, TC_CALLBACK_OVERFLOW);
   16476:	490f      	ldr	r1, [pc, #60]	; (164b4 <configure_periodic_timer+0x8c>)
   16478:	4b0c      	ldr	r3, [pc, #48]	; (164ac <configure_periodic_timer+0x84>)
   1647a:	2200      	movs	r2, #0
   1647c:	0018      	movs	r0, r3
   1647e:	4b0e      	ldr	r3, [pc, #56]	; (164b8 <configure_periodic_timer+0x90>)
   16480:	4798      	blx	r3
    tc_enable_callback(&tc3_inst, TC_CALLBACK_OVERFLOW);
   16482:	4b0a      	ldr	r3, [pc, #40]	; (164ac <configure_periodic_timer+0x84>)
   16484:	2100      	movs	r1, #0
   16486:	0018      	movs	r0, r3
   16488:	4b0c      	ldr	r3, [pc, #48]	; (164bc <configure_periodic_timer+0x94>)
   1648a:	4798      	blx	r3

    /* Enable the timer */
    tc_enable(&tc3_inst);
   1648c:	4b07      	ldr	r3, [pc, #28]	; (164ac <configure_periodic_timer+0x84>)
   1648e:	0018      	movs	r0, r3
   16490:	4b0b      	ldr	r3, [pc, #44]	; (164c0 <configure_periodic_timer+0x98>)
   16492:	4798      	blx	r3
    tc_enable_interrupt(TC0, 0, TC_IER_CPCS);

    /* Start the timer */
    tc_start(TC0, 0);
#endif
}
   16494:	46c0      	nop			; (mov r8, r8)
   16496:	46bd      	mov	sp, r7
   16498:	b00e      	add	sp, #56	; 0x38
   1649a:	bd80      	pop	{r7, pc}
   1649c:	000161a1 	.word	0x000161a1
   164a0:	0000f165 	.word	0x0000f165
   164a4:	00019cd9 	.word	0x00019cd9
   164a8:	42002c00 	.word	0x42002c00
   164ac:	20002bd8 	.word	0x20002bd8
   164b0:	00001a45 	.word	0x00001a45
   164b4:	00016411 	.word	0x00016411
   164b8:	000017a5 	.word	0x000017a5
   164bc:	00016281 	.word	0x00016281
   164c0:	00016229 	.word	0x00016229

000164c4 <main>:
 * Application entry point.
 *
 * \return program return value.
 */
int main(void)
{
   164c4:	b580      	push	{r7, lr}
   164c6:	af00      	add	r7, sp, #0
    /* Initialize the board. */
#if SAM0
	system_init();
   164c8:	4b13      	ldr	r3, [pc, #76]	; (16518 <main+0x54>)
   164ca:	4798      	blx	r3
    sysclk_init();
	board_init();
#endif

    /* Enable basic drivers */
    delay_init();
   164cc:	4b13      	ldr	r3, [pc, #76]	; (1651c <main+0x58>)
   164ce:	4798      	blx	r3

#if SAM0
    /* Enable Interrupts for Cortex-M0 */
    system_interrupt_enable_global();
   164d0:	4b13      	ldr	r3, [pc, #76]	; (16520 <main+0x5c>)
   164d2:	4798      	blx	r3
    /* Enable the I2C interface on the EXT1 header */
    configure_ext3();
#endif

	/* Initialize the UART console. */
	configure_console();
   164d4:	4b13      	ldr	r3, [pc, #76]	; (16524 <main+0x60>)
   164d6:	4798      	blx	r3

    /* Initialize the RTC */
    configure_rtc();
   164d8:	4b13      	ldr	r3, [pc, #76]	; (16528 <main+0x64>)
   164da:	4798      	blx	r3

    /* Set the local configuration for the cryptographic device being used */
    config_crypto();
   164dc:	4b13      	ldr	r3, [pc, #76]	; (1652c <main+0x68>)
   164de:	4798      	blx	r3

    /* Initialize a periodic timer */
    configure_periodic_timer();
   164e0:	4b13      	ldr	r3, [pc, #76]	; (16530 <main+0x6c>)
   164e2:	4798      	blx	r3

    /* Initialize the USB HID interface */
    usb_hid_init();
   164e4:	4b13      	ldr	r3, [pc, #76]	; (16534 <main+0x70>)
   164e6:	4798      	blx	r3

    /* Print a diagnostic message to the console */
    DEBUG_PRINTF("Starting Example...\r\n");
   164e8:	4b13      	ldr	r3, [pc, #76]	; (16538 <main+0x74>)
   164ea:	0018      	movs	r0, r3
   164ec:	4b13      	ldr	r3, [pc, #76]	; (1653c <main+0x78>)
   164ee:	4798      	blx	r3

    config_print_public_key();
   164f0:	4b13      	ldr	r3, [pc, #76]	; (16540 <main+0x7c>)
   164f2:	4798      	blx	r3

    for(;;)
    {
        /* Handle WIFI state machine */
        wifi_task();
   164f4:	4b13      	ldr	r3, [pc, #76]	; (16544 <main+0x80>)
   164f6:	4798      	blx	r3

        /* Handle Data Interface */
        atca_kit_main_handler();
   164f8:	4b13      	ldr	r3, [pc, #76]	; (16548 <main+0x84>)
   164fa:	4798      	blx	r3

        /* Allows the kit protocol interface to have exclusive control
         of the I2C bus when it needs it */
        if(!atca_kit_lock())
   164fc:	4b13      	ldr	r3, [pc, #76]	; (1654c <main+0x88>)
   164fe:	4798      	blx	r3
   16500:	0003      	movs	r3, r0
   16502:	001a      	movs	r2, r3
   16504:	2301      	movs	r3, #1
   16506:	4053      	eors	r3, r2
   16508:	b2db      	uxtb	r3, r3
   1650a:	2b00      	cmp	r3, #0
   1650c:	d0f2      	beq.n	164f4 <main+0x30>
        {
            /* Handle Client State Machine */
            client_task();
   1650e:	4b10      	ldr	r3, [pc, #64]	; (16550 <main+0x8c>)
   16510:	4798      	blx	r3

            /* Handle Sensor State Machine */
            sensor_task();
   16512:	4b10      	ldr	r3, [pc, #64]	; (16554 <main+0x90>)
   16514:	4798      	blx	r3
        wifi_task();
   16516:	e7ed      	b.n	164f4 <main+0x30>
   16518:	0000f3c5 	.word	0x0000f3c5
   1651c:	000004b1 	.word	0x000004b1
   16520:	00015ed1 	.word	0x00015ed1
   16524:	0001632d 	.word	0x0001632d
   16528:	000163a1 	.word	0x000163a1
   1652c:	00018301 	.word	0x00018301
   16530:	00016429 	.word	0x00016429
   16534:	000176fd 	.word	0x000176fd
   16538:	0002132c 	.word	0x0002132c
   1653c:	0001c3f1 	.word	0x0001c3f1
   16540:	000186b9 	.word	0x000186b9
   16544:	00017091 	.word	0x00017091
   16548:	00019c71 	.word	0x00019c71
   1654c:	000187c5 	.word	0x000187c5
   16550:	000182c9 	.word	0x000182c9
   16554:	000176f1 	.word	0x000176f1

00016558 <time_utils_convert>:
#if SAM0
extern struct rtc_module    rtc_instance;
#endif

uint32_t time_utils_convert(uint32_t year, uint32_t month, uint32_t day, uint32_t hour, uint32_t minute, uint32_t second)
{
   16558:	b590      	push	{r4, r7, lr}
   1655a:	b087      	sub	sp, #28
   1655c:	af00      	add	r7, sp, #0
   1655e:	60f8      	str	r0, [r7, #12]
   16560:	60b9      	str	r1, [r7, #8]
   16562:	607a      	str	r2, [r7, #4]
   16564:	603b      	str	r3, [r7, #0]
    uint32_t ret = 0;
   16566:	2300      	movs	r3, #0
   16568:	617b      	str	r3, [r7, #20]

    //January and February are counted as months 13 and 14 of the previous year
    if(month <= 2)
   1656a:	68bb      	ldr	r3, [r7, #8]
   1656c:	2b02      	cmp	r3, #2
   1656e:	d805      	bhi.n	1657c <time_utils_convert+0x24>
    {
        month += 12;
   16570:	68bb      	ldr	r3, [r7, #8]
   16572:	330c      	adds	r3, #12
   16574:	60bb      	str	r3, [r7, #8]
        year -= 1;
   16576:	68fb      	ldr	r3, [r7, #12]
   16578:	3b01      	subs	r3, #1
   1657a:	60fb      	str	r3, [r7, #12]
    }
     
    //Convert years to days
    ret = (365 * year) + (year / 4) - (year / 100) + (year / 400);
   1657c:	68fb      	ldr	r3, [r7, #12]
   1657e:	226e      	movs	r2, #110	; 0x6e
   16580:	32ff      	adds	r2, #255	; 0xff
   16582:	435a      	muls	r2, r3
   16584:	68fb      	ldr	r3, [r7, #12]
   16586:	089b      	lsrs	r3, r3, #2
   16588:	18d4      	adds	r4, r2, r3
   1658a:	68fa      	ldr	r2, [r7, #12]
   1658c:	4b20      	ldr	r3, [pc, #128]	; (16610 <time_utils_convert+0xb8>)
   1658e:	2164      	movs	r1, #100	; 0x64
   16590:	0010      	movs	r0, r2
   16592:	4798      	blx	r3
   16594:	0003      	movs	r3, r0
   16596:	1ae4      	subs	r4, r4, r3
   16598:	68f8      	ldr	r0, [r7, #12]
   1659a:	4b1d      	ldr	r3, [pc, #116]	; (16610 <time_utils_convert+0xb8>)
   1659c:	22c8      	movs	r2, #200	; 0xc8
   1659e:	0051      	lsls	r1, r2, #1
   165a0:	4798      	blx	r3
   165a2:	0003      	movs	r3, r0
   165a4:	18e3      	adds	r3, r4, r3
   165a6:	617b      	str	r3, [r7, #20]
    //Convert months to days
    ret += (30 * month) + (3 * (month + 1) / 5) + day;
   165a8:	68ba      	ldr	r2, [r7, #8]
   165aa:	0013      	movs	r3, r2
   165ac:	011b      	lsls	r3, r3, #4
   165ae:	1a9b      	subs	r3, r3, r2
   165b0:	005b      	lsls	r3, r3, #1
   165b2:	001c      	movs	r4, r3
   165b4:	68bb      	ldr	r3, [r7, #8]
   165b6:	1c5a      	adds	r2, r3, #1
   165b8:	0013      	movs	r3, r2
   165ba:	005b      	lsls	r3, r3, #1
   165bc:	189a      	adds	r2, r3, r2
   165be:	4b14      	ldr	r3, [pc, #80]	; (16610 <time_utils_convert+0xb8>)
   165c0:	2105      	movs	r1, #5
   165c2:	0010      	movs	r0, r2
   165c4:	4798      	blx	r3
   165c6:	0003      	movs	r3, r0
   165c8:	18e2      	adds	r2, r4, r3
   165ca:	687b      	ldr	r3, [r7, #4]
   165cc:	18d3      	adds	r3, r2, r3
   165ce:	697a      	ldr	r2, [r7, #20]
   165d0:	18d3      	adds	r3, r2, r3
   165d2:	617b      	str	r3, [r7, #20]
    //Unix time starts on January 1st, 1970
    ret -= 719561;
   165d4:	697b      	ldr	r3, [r7, #20]
   165d6:	4a0f      	ldr	r2, [pc, #60]	; (16614 <time_utils_convert+0xbc>)
   165d8:	4694      	mov	ip, r2
   165da:	4463      	add	r3, ip
   165dc:	617b      	str	r3, [r7, #20]
    //Convert days to seconds
    ret *= 86400;
   165de:	697b      	ldr	r3, [r7, #20]
   165e0:	4a0d      	ldr	r2, [pc, #52]	; (16618 <time_utils_convert+0xc0>)
   165e2:	4353      	muls	r3, r2
   165e4:	617b      	str	r3, [r7, #20]
    //Add hours, minutes and seconds
    ret += (3600 * hour) + (60 * minute) + second;
   165e6:	683b      	ldr	r3, [r7, #0]
   165e8:	22e1      	movs	r2, #225	; 0xe1
   165ea:	0112      	lsls	r2, r2, #4
   165ec:	435a      	muls	r2, r3
   165ee:	0011      	movs	r1, r2
   165f0:	6aba      	ldr	r2, [r7, #40]	; 0x28
   165f2:	0013      	movs	r3, r2
   165f4:	011b      	lsls	r3, r3, #4
   165f6:	1a9b      	subs	r3, r3, r2
   165f8:	009b      	lsls	r3, r3, #2
   165fa:	18ca      	adds	r2, r1, r3
   165fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   165fe:	18d3      	adds	r3, r2, r3
   16600:	697a      	ldr	r2, [r7, #20]
   16602:	18d3      	adds	r3, r2, r3
   16604:	617b      	str	r3, [r7, #20]
     
    return ret;
   16606:	697b      	ldr	r3, [r7, #20]
}
   16608:	0018      	movs	r0, r3
   1660a:	46bd      	mov	sp, r7
   1660c:	b007      	add	sp, #28
   1660e:	bd90      	pop	{r4, r7, pc}
   16610:	00019cd9 	.word	0x00019cd9
   16614:	fff50537 	.word	0xfff50537
   16618:	00015180 	.word	0x00015180

0001661c <time_utils_get_utc>:

uint32_t time_utils_get_utc(void)
{
   1661c:	b580      	push	{r7, lr}
   1661e:	af00      	add	r7, sp, #0
    if(g_time_set)
   16620:	4b06      	ldr	r3, [pc, #24]	; (1663c <time_utils_get_utc+0x20>)
   16622:	781b      	ldrb	r3, [r3, #0]
   16624:	2b00      	cmp	r3, #0
   16626:	d005      	beq.n	16634 <time_utils_get_utc+0x18>
    {
#if SAM0
        return rtc_count_get_count(&rtc_instance);
   16628:	4b05      	ldr	r3, [pc, #20]	; (16640 <time_utils_get_utc+0x24>)
   1662a:	0018      	movs	r0, r3
   1662c:	4b05      	ldr	r3, [pc, #20]	; (16644 <time_utils_get_utc+0x28>)
   1662e:	4798      	blx	r3
   16630:	0003      	movs	r3, r0
   16632:	e000      	b.n	16636 <time_utils_get_utc+0x1a>
        return time_utils_convert(year, month, day, hour, minute, second);
#endif
    }
    else
    {
        return 0;
   16634:	2300      	movs	r3, #0
    }
}
   16636:	0018      	movs	r0, r3
   16638:	46bd      	mov	sp, r7
   1663a:	bd80      	pop	{r7, pc}
   1663c:	200005d4 	.word	0x200005d4
   16640:	20002b9c 	.word	0x20002b9c
   16644:	00005571 	.word	0x00005571

00016648 <time_utils_set>:

void time_utils_set(uint32_t year, uint32_t month, uint32_t day, uint32_t hour, uint32_t minute, uint32_t second)
{
   16648:	b590      	push	{r4, r7, lr}
   1664a:	b089      	sub	sp, #36	; 0x24
   1664c:	af02      	add	r7, sp, #8
   1664e:	60f8      	str	r0, [r7, #12]
   16650:	60b9      	str	r1, [r7, #8]
   16652:	607a      	str	r2, [r7, #4]
   16654:	603b      	str	r3, [r7, #0]
#if SAM0
    uint32_t ts = time_utils_convert(year, month, day, hour, minute, second);
   16656:	683c      	ldr	r4, [r7, #0]
   16658:	687a      	ldr	r2, [r7, #4]
   1665a:	68b9      	ldr	r1, [r7, #8]
   1665c:	68f8      	ldr	r0, [r7, #12]
   1665e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   16660:	9301      	str	r3, [sp, #4]
   16662:	6abb      	ldr	r3, [r7, #40]	; 0x28
   16664:	9300      	str	r3, [sp, #0]
   16666:	0023      	movs	r3, r4
   16668:	4c08      	ldr	r4, [pc, #32]	; (1668c <time_utils_set+0x44>)
   1666a:	47a0      	blx	r4
   1666c:	0003      	movs	r3, r0
   1666e:	617b      	str	r3, [r7, #20]
    rtc_count_set_count(&rtc_instance, ts);
   16670:	697a      	ldr	r2, [r7, #20]
   16672:	4b07      	ldr	r3, [pc, #28]	; (16690 <time_utils_set+0x48>)
   16674:	0011      	movs	r1, r2
   16676:	0018      	movs	r0, r3
   16678:	4b06      	ldr	r3, [pc, #24]	; (16694 <time_utils_set+0x4c>)
   1667a:	4798      	blx	r3
#elif SAM
    rtc_set_date(RTC, year, month, day, 1);
    rtc_set_time(RTC, hour, minute, second);
#endif

    g_time_set = true;
   1667c:	4b06      	ldr	r3, [pc, #24]	; (16698 <time_utils_set+0x50>)
   1667e:	2201      	movs	r2, #1
   16680:	701a      	strb	r2, [r3, #0]
}
   16682:	46c0      	nop			; (mov r8, r8)
   16684:	46bd      	mov	sp, r7
   16686:	b007      	add	sp, #28
   16688:	bd90      	pop	{r4, r7, pc}
   1668a:	46c0      	nop			; (mov r8, r8)
   1668c:	00016559 	.word	0x00016559
   16690:	20002b9c 	.word	0x20002b9c
   16694:	00005511 	.word	0x00005511
   16698:	200005d4 	.word	0x200005d4

0001669c <system_pinmux_get_group_from_gpio_pin>:
{
   1669c:	b580      	push	{r7, lr}
   1669e:	b084      	sub	sp, #16
   166a0:	af00      	add	r7, sp, #0
   166a2:	0002      	movs	r2, r0
   166a4:	1dfb      	adds	r3, r7, #7
   166a6:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
   166a8:	230f      	movs	r3, #15
   166aa:	18fb      	adds	r3, r7, r3
   166ac:	1dfa      	adds	r2, r7, #7
   166ae:	7812      	ldrb	r2, [r2, #0]
   166b0:	09d2      	lsrs	r2, r2, #7
   166b2:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
   166b4:	230e      	movs	r3, #14
   166b6:	18fb      	adds	r3, r7, r3
   166b8:	1dfa      	adds	r2, r7, #7
   166ba:	7812      	ldrb	r2, [r2, #0]
   166bc:	0952      	lsrs	r2, r2, #5
   166be:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
   166c0:	4b0d      	ldr	r3, [pc, #52]	; (166f8 <system_pinmux_get_group_from_gpio_pin+0x5c>)
   166c2:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
   166c4:	230f      	movs	r3, #15
   166c6:	18fb      	adds	r3, r7, r3
   166c8:	781b      	ldrb	r3, [r3, #0]
   166ca:	2b00      	cmp	r3, #0
   166cc:	d10f      	bne.n	166ee <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
   166ce:	230f      	movs	r3, #15
   166d0:	18fb      	adds	r3, r7, r3
   166d2:	781b      	ldrb	r3, [r3, #0]
   166d4:	009b      	lsls	r3, r3, #2
   166d6:	2210      	movs	r2, #16
   166d8:	4694      	mov	ip, r2
   166da:	44bc      	add	ip, r7
   166dc:	4463      	add	r3, ip
   166de:	3b08      	subs	r3, #8
   166e0:	681a      	ldr	r2, [r3, #0]
   166e2:	230e      	movs	r3, #14
   166e4:	18fb      	adds	r3, r7, r3
   166e6:	781b      	ldrb	r3, [r3, #0]
   166e8:	01db      	lsls	r3, r3, #7
   166ea:	18d3      	adds	r3, r2, r3
   166ec:	e000      	b.n	166f0 <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
   166ee:	2300      	movs	r3, #0
}
   166f0:	0018      	movs	r0, r3
   166f2:	46bd      	mov	sp, r7
   166f4:	b004      	add	sp, #16
   166f6:	bd80      	pop	{r7, pc}
   166f8:	41004400 	.word	0x41004400

000166fc <port_get_group_from_gpio_pin>:
{
   166fc:	b580      	push	{r7, lr}
   166fe:	b082      	sub	sp, #8
   16700:	af00      	add	r7, sp, #0
   16702:	0002      	movs	r2, r0
   16704:	1dfb      	adds	r3, r7, #7
   16706:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
   16708:	1dfb      	adds	r3, r7, #7
   1670a:	781b      	ldrb	r3, [r3, #0]
   1670c:	0018      	movs	r0, r3
   1670e:	4b03      	ldr	r3, [pc, #12]	; (1671c <port_get_group_from_gpio_pin+0x20>)
   16710:	4798      	blx	r3
   16712:	0003      	movs	r3, r0
}
   16714:	0018      	movs	r0, r3
   16716:	46bd      	mov	sp, r7
   16718:	b002      	add	sp, #8
   1671a:	bd80      	pop	{r7, pc}
   1671c:	0001669d 	.word	0x0001669d

00016720 <port_pin_set_output_level>:
{
   16720:	b580      	push	{r7, lr}
   16722:	b084      	sub	sp, #16
   16724:	af00      	add	r7, sp, #0
   16726:	0002      	movs	r2, r0
   16728:	1dfb      	adds	r3, r7, #7
   1672a:	701a      	strb	r2, [r3, #0]
   1672c:	1dbb      	adds	r3, r7, #6
   1672e:	1c0a      	adds	r2, r1, #0
   16730:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
   16732:	1dfb      	adds	r3, r7, #7
   16734:	781b      	ldrb	r3, [r3, #0]
   16736:	0018      	movs	r0, r3
   16738:	4b0d      	ldr	r3, [pc, #52]	; (16770 <port_pin_set_output_level+0x50>)
   1673a:	4798      	blx	r3
   1673c:	0003      	movs	r3, r0
   1673e:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   16740:	1dfb      	adds	r3, r7, #7
   16742:	781b      	ldrb	r3, [r3, #0]
   16744:	221f      	movs	r2, #31
   16746:	4013      	ands	r3, r2
   16748:	2201      	movs	r2, #1
   1674a:	409a      	lsls	r2, r3
   1674c:	0013      	movs	r3, r2
   1674e:	60bb      	str	r3, [r7, #8]
	if (level) {
   16750:	1dbb      	adds	r3, r7, #6
   16752:	781b      	ldrb	r3, [r3, #0]
   16754:	2b00      	cmp	r3, #0
   16756:	d003      	beq.n	16760 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
   16758:	68fb      	ldr	r3, [r7, #12]
   1675a:	68ba      	ldr	r2, [r7, #8]
   1675c:	619a      	str	r2, [r3, #24]
}
   1675e:	e002      	b.n	16766 <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
   16760:	68fb      	ldr	r3, [r7, #12]
   16762:	68ba      	ldr	r2, [r7, #8]
   16764:	615a      	str	r2, [r3, #20]
}
   16766:	46c0      	nop			; (mov r8, r8)
   16768:	46bd      	mov	sp, r7
   1676a:	b004      	add	sp, #16
   1676c:	bd80      	pop	{r7, pc}
   1676e:	46c0      	nop			; (mov r8, r8)
   16770:	000166fd 	.word	0x000166fd

00016774 <tiny_state_init>:
    tiny_state_def* states;
} tiny_state_ctx;

/* The most stripped down state machine driver you can create */
static void inline tiny_state_init(void* context, tiny_state_def *states, uint16_t count, uint16_t initial)
{
   16774:	b580      	push	{r7, lr}
   16776:	b084      	sub	sp, #16
   16778:	af00      	add	r7, sp, #0
   1677a:	60f8      	str	r0, [r7, #12]
   1677c:	60b9      	str	r1, [r7, #8]
   1677e:	0019      	movs	r1, r3
   16780:	1dbb      	adds	r3, r7, #6
   16782:	801a      	strh	r2, [r3, #0]
   16784:	1d3b      	adds	r3, r7, #4
   16786:	1c0a      	adds	r2, r1, #0
   16788:	801a      	strh	r2, [r3, #0]
    ((tiny_state_ctx*)context)->states = states;
   1678a:	68fb      	ldr	r3, [r7, #12]
   1678c:	68ba      	ldr	r2, [r7, #8]
   1678e:	605a      	str	r2, [r3, #4]
    ((tiny_state_ctx*)context)->count = count;
   16790:	68fb      	ldr	r3, [r7, #12]
   16792:	1dba      	adds	r2, r7, #6
   16794:	8812      	ldrh	r2, [r2, #0]
   16796:	805a      	strh	r2, [r3, #2]
    ((tiny_state_ctx*)context)->state = initial;
   16798:	68fb      	ldr	r3, [r7, #12]
   1679a:	1d3a      	adds	r2, r7, #4
   1679c:	8812      	ldrh	r2, [r2, #0]
   1679e:	801a      	strh	r2, [r3, #0]
}
   167a0:	46c0      	nop			; (mov r8, r8)
   167a2:	46bd      	mov	sp, r7
   167a4:	b004      	add	sp, #16
   167a6:	bd80      	pop	{r7, pc}

000167a8 <tiny_state_find>:

/* Search through a states list for the match */
static tiny_state_def * tiny_state_find(tiny_state_def *states, uint16_t count, uint16_t state)
{
   167a8:	b580      	push	{r7, lr}
   167aa:	b084      	sub	sp, #16
   167ac:	af00      	add	r7, sp, #0
   167ae:	6078      	str	r0, [r7, #4]
   167b0:	0008      	movs	r0, r1
   167b2:	0011      	movs	r1, r2
   167b4:	1cbb      	adds	r3, r7, #2
   167b6:	1c02      	adds	r2, r0, #0
   167b8:	801a      	strh	r2, [r3, #0]
   167ba:	003b      	movs	r3, r7
   167bc:	1c0a      	adds	r2, r1, #0
   167be:	801a      	strh	r2, [r3, #0]
    uint16_t i;
    for(i=0;i<count;i++)
   167c0:	230e      	movs	r3, #14
   167c2:	18fb      	adds	r3, r7, r3
   167c4:	2200      	movs	r2, #0
   167c6:	801a      	strh	r2, [r3, #0]
   167c8:	e020      	b.n	1680c <tiny_state_find+0x64>
    {
        if(states[i]._s == state)
   167ca:	230e      	movs	r3, #14
   167cc:	18fb      	adds	r3, r7, r3
   167ce:	881a      	ldrh	r2, [r3, #0]
   167d0:	0013      	movs	r3, r2
   167d2:	005b      	lsls	r3, r3, #1
   167d4:	189b      	adds	r3, r3, r2
   167d6:	009b      	lsls	r3, r3, #2
   167d8:	001a      	movs	r2, r3
   167da:	687b      	ldr	r3, [r7, #4]
   167dc:	189b      	adds	r3, r3, r2
   167de:	681a      	ldr	r2, [r3, #0]
   167e0:	003b      	movs	r3, r7
   167e2:	881b      	ldrh	r3, [r3, #0]
   167e4:	429a      	cmp	r2, r3
   167e6:	d10a      	bne.n	167fe <tiny_state_find+0x56>
        {
            return &states[i];
   167e8:	230e      	movs	r3, #14
   167ea:	18fb      	adds	r3, r7, r3
   167ec:	881a      	ldrh	r2, [r3, #0]
   167ee:	0013      	movs	r3, r2
   167f0:	005b      	lsls	r3, r3, #1
   167f2:	189b      	adds	r3, r3, r2
   167f4:	009b      	lsls	r3, r3, #2
   167f6:	001a      	movs	r2, r3
   167f8:	687b      	ldr	r3, [r7, #4]
   167fa:	189b      	adds	r3, r3, r2
   167fc:	e00e      	b.n	1681c <tiny_state_find+0x74>
    for(i=0;i<count;i++)
   167fe:	230e      	movs	r3, #14
   16800:	18fb      	adds	r3, r7, r3
   16802:	881a      	ldrh	r2, [r3, #0]
   16804:	230e      	movs	r3, #14
   16806:	18fb      	adds	r3, r7, r3
   16808:	3201      	adds	r2, #1
   1680a:	801a      	strh	r2, [r3, #0]
   1680c:	230e      	movs	r3, #14
   1680e:	18fa      	adds	r2, r7, r3
   16810:	1cbb      	adds	r3, r7, #2
   16812:	8812      	ldrh	r2, [r2, #0]
   16814:	881b      	ldrh	r3, [r3, #0]
   16816:	429a      	cmp	r2, r3
   16818:	d3d7      	bcc.n	167ca <tiny_state_find+0x22>
        }
    }
    return NULL;
   1681a:	2300      	movs	r3, #0
}
   1681c:	0018      	movs	r0, r3
   1681e:	46bd      	mov	sp, r7
   16820:	b004      	add	sp, #16
   16822:	bd80      	pop	{r7, pc}

00016824 <tiny_state_driver>:

/* Tiny state machine driver - doesn't require states to be ordered to be indexed */
static void inline tiny_state_driver(void* context)
{
   16824:	b580      	push	{r7, lr}
   16826:	b084      	sub	sp, #16
   16828:	af00      	add	r7, sp, #0
   1682a:	6078      	str	r0, [r7, #4]
    tiny_state_ctx * pCtx = (tiny_state_ctx*)context;
   1682c:	687b      	ldr	r3, [r7, #4]
   1682e:	60fb      	str	r3, [r7, #12]
    tiny_state_def * pState = tiny_state_find(pCtx->states, pCtx->count, pCtx->state);
   16830:	68fb      	ldr	r3, [r7, #12]
   16832:	6858      	ldr	r0, [r3, #4]
   16834:	68fb      	ldr	r3, [r7, #12]
   16836:	8859      	ldrh	r1, [r3, #2]
   16838:	68fb      	ldr	r3, [r7, #12]
   1683a:	881b      	ldrh	r3, [r3, #0]
   1683c:	001a      	movs	r2, r3
   1683e:	4b0a      	ldr	r3, [pc, #40]	; (16868 <tiny_state_driver+0x44>)
   16840:	4798      	blx	r3
   16842:	0003      	movs	r3, r0
   16844:	60bb      	str	r3, [r7, #8]
    if(pState && pState->_f)
   16846:	68bb      	ldr	r3, [r7, #8]
   16848:	2b00      	cmp	r3, #0
   1684a:	d008      	beq.n	1685e <tiny_state_driver+0x3a>
   1684c:	68bb      	ldr	r3, [r7, #8]
   1684e:	689b      	ldr	r3, [r3, #8]
   16850:	2b00      	cmp	r3, #0
   16852:	d004      	beq.n	1685e <tiny_state_driver+0x3a>
    {
        pState->_f(context);
   16854:	68bb      	ldr	r3, [r7, #8]
   16856:	689b      	ldr	r3, [r3, #8]
   16858:	687a      	ldr	r2, [r7, #4]
   1685a:	0010      	movs	r0, r2
   1685c:	4798      	blx	r3
    }
}
   1685e:	46c0      	nop			; (mov r8, r8)
   16860:	46bd      	mov	sp, r7
   16862:	b004      	add	sp, #16
   16864:	bd80      	pop	{r7, pc}
   16866:	46c0      	nop			; (mov r8, r8)
   16868:	000167a9 	.word	0x000167a9

0001686c <tiny_state_update>:

/* Update the next state */
static void inline tiny_state_update(void* context, uint32_t next)
{
   1686c:	b580      	push	{r7, lr}
   1686e:	b082      	sub	sp, #8
   16870:	af00      	add	r7, sp, #0
   16872:	6078      	str	r0, [r7, #4]
   16874:	6039      	str	r1, [r7, #0]
    ((tiny_state_ctx*)context)->state = next;
   16876:	683b      	ldr	r3, [r7, #0]
   16878:	b29a      	uxth	r2, r3
   1687a:	687b      	ldr	r3, [r7, #4]
   1687c:	801a      	strh	r2, [r3, #0]
}
   1687e:	46c0      	nop			; (mov r8, r8)
   16880:	46bd      	mov	sp, r7
   16882:	b002      	add	sp, #8
   16884:	bd80      	pop	{r7, pc}
	...

00016888 <wifi_counter_finished>:
    uint32_t            txlen;
} g_wifi_context;

/* Check if the timeout has elapsed */
static inline bool wifi_counter_finished(void)
{
   16888:	b580      	push	{r7, lr}
   1688a:	af00      	add	r7, sp, #0
    return (0 == g_wifi_context.holdoff);
   1688c:	4b03      	ldr	r3, [pc, #12]	; (1689c <wifi_counter_finished+0x14>)
   1688e:	689b      	ldr	r3, [r3, #8]
   16890:	425a      	negs	r2, r3
   16892:	4153      	adcs	r3, r2
   16894:	b2db      	uxtb	r3, r3
}
   16896:	0018      	movs	r0, r3
   16898:	46bd      	mov	sp, r7
   1689a:	bd80      	pop	{r7, pc}
   1689c:	200005d8 	.word	0x200005d8

000168a0 <wifi_counter_set>:

/* Set timeout in milliseconds */
static void wifi_counter_set(uint32_t val)
{
   168a0:	b580      	push	{r7, lr}
   168a2:	b082      	sub	sp, #8
   168a4:	af00      	add	r7, sp, #0
   168a6:	6078      	str	r0, [r7, #4]
    /* Convert to loop time*/
    g_wifi_context.holdoff = val / WIFI_UPDATE_PERIOD;
   168a8:	687a      	ldr	r2, [r7, #4]
   168aa:	4b0b      	ldr	r3, [pc, #44]	; (168d8 <wifi_counter_set+0x38>)
   168ac:	2164      	movs	r1, #100	; 0x64
   168ae:	0010      	movs	r0, r2
   168b0:	4798      	blx	r3
   168b2:	0003      	movs	r3, r0
   168b4:	001a      	movs	r2, r3
   168b6:	4b09      	ldr	r3, [pc, #36]	; (168dc <wifi_counter_set+0x3c>)
   168b8:	609a      	str	r2, [r3, #8]

    if(val && !g_wifi_context.holdoff)
   168ba:	687b      	ldr	r3, [r7, #4]
   168bc:	2b00      	cmp	r3, #0
   168be:	d006      	beq.n	168ce <wifi_counter_set+0x2e>
   168c0:	4b06      	ldr	r3, [pc, #24]	; (168dc <wifi_counter_set+0x3c>)
   168c2:	689b      	ldr	r3, [r3, #8]
   168c4:	2b00      	cmp	r3, #0
   168c6:	d102      	bne.n	168ce <wifi_counter_set+0x2e>
    {
        g_wifi_context.holdoff = 1;
   168c8:	4b04      	ldr	r3, [pc, #16]	; (168dc <wifi_counter_set+0x3c>)
   168ca:	2201      	movs	r2, #1
   168cc:	609a      	str	r2, [r3, #8]
    }
}
   168ce:	46c0      	nop			; (mov r8, r8)
   168d0:	46bd      	mov	sp, r7
   168d2:	b002      	add	sp, #8
   168d4:	bd80      	pop	{r7, pc}
   168d6:	46c0      	nop			; (mov r8, r8)
   168d8:	00019cd9 	.word	0x00019cd9
   168dc:	200005d8 	.word	0x200005d8

000168e0 <wifi_timer_update>:

/* Must be called on the WIFI_UPDATE_PERIOD */
void wifi_timer_update(void)
{
   168e0:	b580      	push	{r7, lr}
   168e2:	af00      	add	r7, sp, #0
    if(g_wifi_context.holdoff)
   168e4:	4b05      	ldr	r3, [pc, #20]	; (168fc <wifi_timer_update+0x1c>)
   168e6:	689b      	ldr	r3, [r3, #8]
   168e8:	2b00      	cmp	r3, #0
   168ea:	d004      	beq.n	168f6 <wifi_timer_update+0x16>
    {
        g_wifi_context.holdoff--;
   168ec:	4b03      	ldr	r3, [pc, #12]	; (168fc <wifi_timer_update+0x1c>)
   168ee:	689b      	ldr	r3, [r3, #8]
   168f0:	1e5a      	subs	r2, r3, #1
   168f2:	4b02      	ldr	r3, [pc, #8]	; (168fc <wifi_timer_update+0x1c>)
   168f4:	609a      	str	r2, [r3, #8]
    }
}
   168f6:	46c0      	nop			; (mov r8, r8)
   168f8:	46bd      	mov	sp, r7
   168fa:	bd80      	pop	{r7, pc}
   168fc:	200005d8 	.word	0x200005d8

00016900 <wifi_is_ready>:
    WIFI_STATE_TIMEOUT,
    WIFI_STATE_ERROR        /**< Error states can be anywhere but are recommended at the end */
} WIFI_STATES;

int wifi_is_ready(void)
{
   16900:	b580      	push	{r7, lr}
   16902:	af00      	add	r7, sp, #0
    return (WIFI_STATE_READY == g_wifi_context.state.state);
   16904:	4b04      	ldr	r3, [pc, #16]	; (16918 <wifi_is_ready+0x18>)
   16906:	881b      	ldrh	r3, [r3, #0]
   16908:	3b04      	subs	r3, #4
   1690a:	425a      	negs	r2, r3
   1690c:	4153      	adcs	r3, r2
   1690e:	b2db      	uxtb	r3, r3
}
   16910:	0018      	movs	r0, r3
   16912:	46bd      	mov	sp, r7
   16914:	bd80      	pop	{r7, pc}
   16916:	46c0      	nop			; (mov r8, r8)
   16918:	200005d8 	.word	0x200005d8

0001691c <wifi_is_busy>:

int wifi_is_busy(void)
{
   1691c:	b580      	push	{r7, lr}
   1691e:	af00      	add	r7, sp, #0
    return (WIFI_STATE_WAIT == g_wifi_context.state.state);
   16920:	4b04      	ldr	r3, [pc, #16]	; (16934 <wifi_is_busy+0x18>)
   16922:	881b      	ldrh	r3, [r3, #0]
   16924:	3b03      	subs	r3, #3
   16926:	425a      	negs	r2, r3
   16928:	4153      	adcs	r3, r2
   1692a:	b2db      	uxtb	r3, r3
}
   1692c:	0018      	movs	r0, r3
   1692e:	46bd      	mov	sp, r7
   16930:	bd80      	pop	{r7, pc}
   16932:	46c0      	nop			; (mov r8, r8)
   16934:	200005d8 	.word	0x200005d8

00016938 <wifi_has_error>:

int wifi_has_error(void)
{
   16938:	b580      	push	{r7, lr}
   1693a:	af00      	add	r7, sp, #0
    return (WIFI_STATE_ERROR == g_wifi_context.state.state);
   1693c:	4b04      	ldr	r3, [pc, #16]	; (16950 <wifi_has_error+0x18>)
   1693e:	881b      	ldrh	r3, [r3, #0]
   16940:	3b06      	subs	r3, #6
   16942:	425a      	negs	r2, r3
   16944:	4153      	adcs	r3, r2
   16946:	b2db      	uxtb	r3, r3
}
   16948:	0018      	movs	r0, r3
   1694a:	46bd      	mov	sp, r7
   1694c:	bd80      	pop	{r7, pc}
   1694e:	46c0      	nop			; (mov r8, r8)
   16950:	200005d8 	.word	0x200005d8

00016954 <wifi_state_update>:

static void wifi_state_update(void* ctx, uint32_t next, uint32_t wait)
{
   16954:	b580      	push	{r7, lr}
   16956:	b086      	sub	sp, #24
   16958:	af00      	add	r7, sp, #0
   1695a:	60f8      	str	r0, [r7, #12]
   1695c:	60b9      	str	r1, [r7, #8]
   1695e:	607a      	str	r2, [r7, #4]
    struct _g_wifi_context * pCtx = ctx;
   16960:	68fb      	ldr	r3, [r7, #12]
   16962:	617b      	str	r3, [r7, #20]

    //WIFI_PRINTF("%s(%u) -> %s(%u)\r\n", tiny_state_name(ctx, pCtx->state.state), 
    //    pCtx->state.state, tiny_state_name(ctx, next), next);

    /* Set the new state */
    tiny_state_update(ctx, next);
   16964:	68ba      	ldr	r2, [r7, #8]
   16966:	68fb      	ldr	r3, [r7, #12]
   16968:	0011      	movs	r1, r2
   1696a:	0018      	movs	r0, r3
   1696c:	4b04      	ldr	r3, [pc, #16]	; (16980 <wifi_state_update+0x2c>)
   1696e:	4798      	blx	r3

    /* Set the holdoff/wait */
    wifi_counter_set(wait);
   16970:	687b      	ldr	r3, [r7, #4]
   16972:	0018      	movs	r0, r3
   16974:	4b03      	ldr	r3, [pc, #12]	; (16984 <wifi_state_update+0x30>)
   16976:	4798      	blx	r3
}
   16978:	46c0      	nop			; (mov r8, r8)
   1697a:	46bd      	mov	sp, r7
   1697c:	b006      	add	sp, #24
   1697e:	bd80      	pop	{r7, pc}
   16980:	0001686d 	.word	0x0001686d
   16984:	000168a1 	.word	0x000168a1

00016988 <wifi_print_winc_version>:

static sint8 wifi_print_winc_version(void)
{
   16988:	b590      	push	{r4, r7, lr}
   1698a:	b08d      	sub	sp, #52	; 0x34
   1698c:	af00      	add	r7, sp, #0
    sint8       status;
    tstrM2mRev  wifi_version;

    // Get the WINC1500 WIFI module firmware version information
    status = m2m_wifi_get_firmware_version(&wifi_version);
   1698e:	232f      	movs	r3, #47	; 0x2f
   16990:	18fc      	adds	r4, r7, r3
   16992:	1d3b      	adds	r3, r7, #4
   16994:	0018      	movs	r0, r3
   16996:	4b1a      	ldr	r3, [pc, #104]	; (16a00 <wifi_print_winc_version+0x78>)
   16998:	4798      	blx	r3
   1699a:	0003      	movs	r3, r0
   1699c:	7023      	strb	r3, [r4, #0]
    if(M2M_SUCCESS == status)
   1699e:	232f      	movs	r3, #47	; 0x2f
   169a0:	18fb      	adds	r3, r7, r3
   169a2:	781b      	ldrb	r3, [r3, #0]
   169a4:	b25b      	sxtb	r3, r3
   169a6:	2b00      	cmp	r3, #0
   169a8:	d122      	bne.n	169f0 <wifi_print_winc_version+0x68>
    {
        WIFI_PRINTF("WINC1500: Chip ID: 0x%08lX\r\n", wifi_version.u32Chipid);
   169aa:	1d3b      	adds	r3, r7, #4
   169ac:	681a      	ldr	r2, [r3, #0]
   169ae:	4b15      	ldr	r3, [pc, #84]	; (16a04 <wifi_print_winc_version+0x7c>)
   169b0:	0011      	movs	r1, r2
   169b2:	0018      	movs	r0, r3
   169b4:	4b14      	ldr	r3, [pc, #80]	; (16a08 <wifi_print_winc_version+0x80>)
   169b6:	4798      	blx	r3
        WIFI_PRINTF("WINC1500: Firmware Version: %u.%u.%u\r\n",
   169b8:	1d3b      	adds	r3, r7, #4
   169ba:	791b      	ldrb	r3, [r3, #4]
   169bc:	0019      	movs	r1, r3
   169be:	1d3b      	adds	r3, r7, #4
   169c0:	795b      	ldrb	r3, [r3, #5]
   169c2:	001a      	movs	r2, r3
   169c4:	1d3b      	adds	r3, r7, #4
   169c6:	799b      	ldrb	r3, [r3, #6]
   169c8:	4810      	ldr	r0, [pc, #64]	; (16a0c <wifi_print_winc_version+0x84>)
   169ca:	4c0f      	ldr	r4, [pc, #60]	; (16a08 <wifi_print_winc_version+0x80>)
   169cc:	47a0      	blx	r4
            wifi_version.u8FirmwareMajor, wifi_version.u8FirmwareMinor,
            wifi_version.u8FirmwarePatch);
        WIFI_PRINTF("WINC1500: Firmware Min Driver Version: %u.%u.%u\r\n",
   169ce:	1d3b      	adds	r3, r7, #4
   169d0:	79db      	ldrb	r3, [r3, #7]
   169d2:	0019      	movs	r1, r3
   169d4:	1d3b      	adds	r3, r7, #4
   169d6:	7a1b      	ldrb	r3, [r3, #8]
   169d8:	001a      	movs	r2, r3
   169da:	1d3b      	adds	r3, r7, #4
   169dc:	7a5b      	ldrb	r3, [r3, #9]
   169de:	480c      	ldr	r0, [pc, #48]	; (16a10 <wifi_print_winc_version+0x88>)
   169e0:	4c09      	ldr	r4, [pc, #36]	; (16a08 <wifi_print_winc_version+0x80>)
   169e2:	47a0      	blx	r4
            wifi_version.u8DriverMajor, wifi_version.u8DriverMinor,
            wifi_version.u8DriverPatch);
        WIFI_PRINTF("WINC1500: Driver Version: %d.%d.%d\r\n",
   169e4:	480b      	ldr	r0, [pc, #44]	; (16a14 <wifi_print_winc_version+0x8c>)
   169e6:	2302      	movs	r3, #2
   169e8:	2205      	movs	r2, #5
   169ea:	2113      	movs	r1, #19
   169ec:	4c06      	ldr	r4, [pc, #24]	; (16a08 <wifi_print_winc_version+0x80>)
   169ee:	47a0      	blx	r4
            M2M_RELEASE_VERSION_MAJOR_NO, M2M_RELEASE_VERSION_MINOR_NO,
            M2M_RELEASE_VERSION_PATCH_NO);
    }
    return status;
   169f0:	232f      	movs	r3, #47	; 0x2f
   169f2:	18fb      	adds	r3, r7, r3
   169f4:	781b      	ldrb	r3, [r3, #0]
   169f6:	b25b      	sxtb	r3, r3
}
   169f8:	0018      	movs	r0, r3
   169fa:	46bd      	mov	sp, r7
   169fc:	b00d      	add	sp, #52	; 0x34
   169fe:	bd90      	pop	{r4, r7, pc}
   16a00:	00008775 	.word	0x00008775
   16a04:	00021348 	.word	0x00021348
   16a08:	0001c2d5 	.word	0x0001c2d5
   16a0c:	00021368 	.word	0x00021368
   16a10:	00021390 	.word	0x00021390
   16a14:	000213c4 	.word	0x000213c4

00016a18 <wifi_socket_handler_cb>:

static void wifi_socket_handler_cb(SOCKET sock, uint8 u8Msg, void * pvMsg)
{
   16a18:	b580      	push	{r7, lr}
   16a1a:	b086      	sub	sp, #24
   16a1c:	af00      	add	r7, sp, #0
   16a1e:	603a      	str	r2, [r7, #0]
   16a20:	1dfb      	adds	r3, r7, #7
   16a22:	1c02      	adds	r2, r0, #0
   16a24:	701a      	strb	r2, [r3, #0]
   16a26:	1dbb      	adds	r3, r7, #6
   16a28:	1c0a      	adds	r2, r1, #0
   16a2a:	701a      	strb	r2, [r3, #0]
    tstrSocketConnectMsg *socket_connect_message = NULL;
   16a2c:	2300      	movs	r3, #0
   16a2e:	617b      	str	r3, [r7, #20]
    tstrSocketRecvMsg *socket_receive_message = NULL;
   16a30:	2300      	movs	r3, #0
   16a32:	613b      	str	r3, [r7, #16]
    sint16 *bytes_sent = NULL;
   16a34:	2300      	movs	r3, #0
   16a36:	60fb      	str	r3, [r7, #12]
    
    // Check for the WINC1500 WIFI socket events
    switch (u8Msg)
   16a38:	1dbb      	adds	r3, r7, #6
   16a3a:	781b      	ldrb	r3, [r3, #0]
   16a3c:	2b06      	cmp	r3, #6
   16a3e:	d020      	beq.n	16a82 <wifi_socket_handler_cb+0x6a>
   16a40:	dc02      	bgt.n	16a48 <wifi_socket_handler_cb+0x30>
   16a42:	2b05      	cmp	r3, #5
   16a44:	d005      	beq.n	16a52 <wifi_socket_handler_cb+0x3a>
        }
        break;

        default:
        // Do nothing
        break;
   16a46:	e070      	b.n	16b2a <wifi_socket_handler_cb+0x112>
    switch (u8Msg)
   16a48:	2b07      	cmp	r3, #7
   16a4a:	d042      	beq.n	16ad2 <wifi_socket_handler_cb+0xba>
   16a4c:	2b09      	cmp	r3, #9
   16a4e:	d018      	beq.n	16a82 <wifi_socket_handler_cb+0x6a>
        break;
   16a50:	e06b      	b.n	16b2a <wifi_socket_handler_cb+0x112>
        socket_connect_message = (tstrSocketConnectMsg*)pvMsg;
   16a52:	683b      	ldr	r3, [r7, #0]
   16a54:	617b      	str	r3, [r7, #20]
        if (socket_connect_message != NULL)
   16a56:	697b      	ldr	r3, [r7, #20]
   16a58:	2b00      	cmp	r3, #0
   16a5a:	d061      	beq.n	16b20 <wifi_socket_handler_cb+0x108>
            if (socket_connect_message->s8Error != SOCK_ERR_NO_ERROR)
   16a5c:	697b      	ldr	r3, [r7, #20]
   16a5e:	785b      	ldrb	r3, [r3, #1]
   16a60:	b25b      	sxtb	r3, r3
   16a62:	2b00      	cmp	r3, #0
   16a64:	d006      	beq.n	16a74 <wifi_socket_handler_cb+0x5c>
                wifi_state_update(&g_wifi_context, WIFI_STATE_ERROR, WIFI_COUNTER_RECONNECT_WAIT);
   16a66:	4a33      	ldr	r2, [pc, #204]	; (16b34 <wifi_socket_handler_cb+0x11c>)
   16a68:	4b33      	ldr	r3, [pc, #204]	; (16b38 <wifi_socket_handler_cb+0x120>)
   16a6a:	2106      	movs	r1, #6
   16a6c:	0018      	movs	r0, r3
   16a6e:	4b33      	ldr	r3, [pc, #204]	; (16b3c <wifi_socket_handler_cb+0x124>)
   16a70:	4798      	blx	r3
        break;
   16a72:	e055      	b.n	16b20 <wifi_socket_handler_cb+0x108>
                wifi_state_update(&g_wifi_context, WIFI_STATE_READY, WIFI_COUNTER_NO_WAIT);
   16a74:	4b30      	ldr	r3, [pc, #192]	; (16b38 <wifi_socket_handler_cb+0x120>)
   16a76:	2200      	movs	r2, #0
   16a78:	2104      	movs	r1, #4
   16a7a:	0018      	movs	r0, r3
   16a7c:	4b2f      	ldr	r3, [pc, #188]	; (16b3c <wifi_socket_handler_cb+0x124>)
   16a7e:	4798      	blx	r3
        break;
   16a80:	e04e      	b.n	16b20 <wifi_socket_handler_cb+0x108>
        socket_receive_message = (tstrSocketRecvMsg*)pvMsg;
   16a82:	683b      	ldr	r3, [r7, #0]
   16a84:	613b      	str	r3, [r7, #16]
        if (socket_receive_message != NULL)
   16a86:	693b      	ldr	r3, [r7, #16]
   16a88:	2b00      	cmp	r3, #0
   16a8a:	d04b      	beq.n	16b24 <wifi_socket_handler_cb+0x10c>
            if (socket_receive_message->s16BufferSize >= 0)
   16a8c:	693b      	ldr	r3, [r7, #16]
   16a8e:	2204      	movs	r2, #4
   16a90:	5e9b      	ldrsh	r3, [r3, r2]
   16a92:	2b00      	cmp	r3, #0
   16a94:	db0a      	blt.n	16aac <wifi_socket_handler_cb+0x94>
                if (socket_receive_message->u16RemainingSize == 0)
   16a96:	693b      	ldr	r3, [r7, #16]
   16a98:	88db      	ldrh	r3, [r3, #6]
   16a9a:	2b00      	cmp	r3, #0
   16a9c:	d142      	bne.n	16b24 <wifi_socket_handler_cb+0x10c>
                    wifi_state_update(&g_wifi_context, WIFI_STATE_READY, WIFI_COUNTER_NO_WAIT);
   16a9e:	4b26      	ldr	r3, [pc, #152]	; (16b38 <wifi_socket_handler_cb+0x120>)
   16aa0:	2200      	movs	r2, #0
   16aa2:	2104      	movs	r1, #4
   16aa4:	0018      	movs	r0, r3
   16aa6:	4b25      	ldr	r3, [pc, #148]	; (16b3c <wifi_socket_handler_cb+0x124>)
   16aa8:	4798      	blx	r3
        break;
   16aaa:	e03b      	b.n	16b24 <wifi_socket_handler_cb+0x10c>
                if (socket_receive_message->s16BufferSize == SOCK_ERR_TIMEOUT)
   16aac:	693b      	ldr	r3, [r7, #16]
   16aae:	2204      	movs	r2, #4
   16ab0:	5e9b      	ldrsh	r3, [r3, r2]
   16ab2:	330d      	adds	r3, #13
   16ab4:	d106      	bne.n	16ac4 <wifi_socket_handler_cb+0xac>
                    wifi_state_update(&g_wifi_context, WIFI_STATE_TIMEOUT, WIFI_COUNTER_NO_WAIT);
   16ab6:	4b20      	ldr	r3, [pc, #128]	; (16b38 <wifi_socket_handler_cb+0x120>)
   16ab8:	2200      	movs	r2, #0
   16aba:	2105      	movs	r1, #5
   16abc:	0018      	movs	r0, r3
   16abe:	4b1f      	ldr	r3, [pc, #124]	; (16b3c <wifi_socket_handler_cb+0x124>)
   16ac0:	4798      	blx	r3
        break;
   16ac2:	e02f      	b.n	16b24 <wifi_socket_handler_cb+0x10c>
                    wifi_state_update(&g_wifi_context, WIFI_STATE_ERROR, WIFI_COUNTER_RECONNECT_WAIT);
   16ac4:	4a1b      	ldr	r2, [pc, #108]	; (16b34 <wifi_socket_handler_cb+0x11c>)
   16ac6:	4b1c      	ldr	r3, [pc, #112]	; (16b38 <wifi_socket_handler_cb+0x120>)
   16ac8:	2106      	movs	r1, #6
   16aca:	0018      	movs	r0, r3
   16acc:	4b1b      	ldr	r3, [pc, #108]	; (16b3c <wifi_socket_handler_cb+0x124>)
   16ace:	4798      	blx	r3
        break;
   16ad0:	e028      	b.n	16b24 <wifi_socket_handler_cb+0x10c>
        bytes_sent = (sint16*)pvMsg;
   16ad2:	683b      	ldr	r3, [r7, #0]
   16ad4:	60fb      	str	r3, [r7, #12]
        if (*bytes_sent <= 0 || *bytes_sent > (int32_t)g_wifi_context.txlen)
   16ad6:	68fb      	ldr	r3, [r7, #12]
   16ad8:	2200      	movs	r2, #0
   16ada:	5e9b      	ldrsh	r3, [r3, r2]
   16adc:	2b00      	cmp	r3, #0
   16ade:	dd08      	ble.n	16af2 <wifi_socket_handler_cb+0xda>
   16ae0:	68fb      	ldr	r3, [r7, #12]
   16ae2:	2200      	movs	r2, #0
   16ae4:	5e9b      	ldrsh	r3, [r3, r2]
   16ae6:	0019      	movs	r1, r3
   16ae8:	4b13      	ldr	r3, [pc, #76]	; (16b38 <wifi_socket_handler_cb+0x120>)
   16aea:	4a15      	ldr	r2, [pc, #84]	; (16b40 <wifi_socket_handler_cb+0x128>)
   16aec:	589b      	ldr	r3, [r3, r2]
   16aee:	4299      	cmp	r1, r3
   16af0:	dd06      	ble.n	16b00 <wifi_socket_handler_cb+0xe8>
            wifi_state_update(&g_wifi_context, WIFI_STATE_ERROR, WIFI_COUNTER_RECONNECT_WAIT);
   16af2:	4a10      	ldr	r2, [pc, #64]	; (16b34 <wifi_socket_handler_cb+0x11c>)
   16af4:	4b10      	ldr	r3, [pc, #64]	; (16b38 <wifi_socket_handler_cb+0x120>)
   16af6:	2106      	movs	r1, #6
   16af8:	0018      	movs	r0, r3
   16afa:	4b10      	ldr	r3, [pc, #64]	; (16b3c <wifi_socket_handler_cb+0x124>)
   16afc:	4798      	blx	r3
        break;
   16afe:	e013      	b.n	16b28 <wifi_socket_handler_cb+0x110>
        else if (*bytes_sent == g_wifi_context.txlen)
   16b00:	68fb      	ldr	r3, [r7, #12]
   16b02:	2200      	movs	r2, #0
   16b04:	5e9b      	ldrsh	r3, [r3, r2]
   16b06:	0019      	movs	r1, r3
   16b08:	4b0b      	ldr	r3, [pc, #44]	; (16b38 <wifi_socket_handler_cb+0x120>)
   16b0a:	4a0d      	ldr	r2, [pc, #52]	; (16b40 <wifi_socket_handler_cb+0x128>)
   16b0c:	589b      	ldr	r3, [r3, r2]
   16b0e:	4299      	cmp	r1, r3
   16b10:	d10a      	bne.n	16b28 <wifi_socket_handler_cb+0x110>
            wifi_state_update(&g_wifi_context, WIFI_STATE_READY, WIFI_COUNTER_NO_WAIT);
   16b12:	4b09      	ldr	r3, [pc, #36]	; (16b38 <wifi_socket_handler_cb+0x120>)
   16b14:	2200      	movs	r2, #0
   16b16:	2104      	movs	r1, #4
   16b18:	0018      	movs	r0, r3
   16b1a:	4b08      	ldr	r3, [pc, #32]	; (16b3c <wifi_socket_handler_cb+0x124>)
   16b1c:	4798      	blx	r3
        break;
   16b1e:	e003      	b.n	16b28 <wifi_socket_handler_cb+0x110>
        break;
   16b20:	46c0      	nop			; (mov r8, r8)
   16b22:	e002      	b.n	16b2a <wifi_socket_handler_cb+0x112>
        break;
   16b24:	46c0      	nop			; (mov r8, r8)
   16b26:	e000      	b.n	16b2a <wifi_socket_handler_cb+0x112>
        break;
   16b28:	46c0      	nop			; (mov r8, r8)
    }
}
   16b2a:	46c0      	nop			; (mov r8, r8)
   16b2c:	46bd      	mov	sp, r7
   16b2e:	b006      	add	sp, #24
   16b30:	bd80      	pop	{r7, pc}
   16b32:	46c0      	nop			; (mov r8, r8)
   16b34:	00007530 	.word	0x00007530
   16b38:	200005d8 	.word	0x200005d8
   16b3c:	00016955 	.word	0x00016955
   16b40:	000005f4 	.word	0x000005f4

00016b44 <wifi_resolve_handler_cb>:

static void wifi_resolve_handler_cb(uint8* pu8DomainName, uint32 u32ServerIP)
{
   16b44:	b580      	push	{r7, lr}
   16b46:	b082      	sub	sp, #8
   16b48:	af00      	add	r7, sp, #0
   16b4a:	6078      	str	r0, [r7, #4]
   16b4c:	6039      	str	r1, [r7, #0]
    if (u32ServerIP != 0)
   16b4e:	683b      	ldr	r3, [r7, #0]
   16b50:	2b00      	cmp	r3, #0
   16b52:	d009      	beq.n	16b68 <wifi_resolve_handler_cb+0x24>
    {
        g_wifi_context.host = u32ServerIP;
   16b54:	4b09      	ldr	r3, [pc, #36]	; (16b7c <wifi_resolve_handler_cb+0x38>)
   16b56:	683a      	ldr	r2, [r7, #0]
   16b58:	60da      	str	r2, [r3, #12]

        /* Return to ready state */
        wifi_state_update(&g_wifi_context, WIFI_STATE_READY, WIFI_COUNTER_NO_WAIT);
   16b5a:	4b08      	ldr	r3, [pc, #32]	; (16b7c <wifi_resolve_handler_cb+0x38>)
   16b5c:	2200      	movs	r2, #0
   16b5e:	2104      	movs	r1, #4
   16b60:	0018      	movs	r0, r3
   16b62:	4b07      	ldr	r3, [pc, #28]	; (16b80 <wifi_resolve_handler_cb+0x3c>)
   16b64:	4798      	blx	r3
    else
    {
        /* Failed to Resolve */
        wifi_state_update(&g_wifi_context, WIFI_STATE_ERROR, WIFI_COUNTER_RECONNECT_WAIT);
    }
}
   16b66:	e005      	b.n	16b74 <wifi_resolve_handler_cb+0x30>
        wifi_state_update(&g_wifi_context, WIFI_STATE_ERROR, WIFI_COUNTER_RECONNECT_WAIT);
   16b68:	4a06      	ldr	r2, [pc, #24]	; (16b84 <wifi_resolve_handler_cb+0x40>)
   16b6a:	4b04      	ldr	r3, [pc, #16]	; (16b7c <wifi_resolve_handler_cb+0x38>)
   16b6c:	2106      	movs	r1, #6
   16b6e:	0018      	movs	r0, r3
   16b70:	4b03      	ldr	r3, [pc, #12]	; (16b80 <wifi_resolve_handler_cb+0x3c>)
   16b72:	4798      	blx	r3
}
   16b74:	46c0      	nop			; (mov r8, r8)
   16b76:	46bd      	mov	sp, r7
   16b78:	b002      	add	sp, #8
   16b7a:	bd80      	pop	{r7, pc}
   16b7c:	200005d8 	.word	0x200005d8
   16b80:	00016955 	.word	0x00016955
   16b84:	00007530 	.word	0x00007530

00016b88 <wifi_tls_handler_cb>:

static void wifi_tls_handler_cb(uint8 u8MsgType, void * pvMsg)
{
   16b88:	b580      	push	{r7, lr}
   16b8a:	b082      	sub	sp, #8
   16b8c:	af00      	add	r7, sp, #0
   16b8e:	0002      	movs	r2, r0
   16b90:	6039      	str	r1, [r7, #0]
   16b92:	1dfb      	adds	r3, r7, #7
   16b94:	701a      	strb	r2, [r3, #0]

}
   16b96:	46c0      	nop			; (mov r8, r8)
   16b98:	46bd      	mov	sp, r7
   16b9a:	b002      	add	sp, #8
   16b9c:	bd80      	pop	{r7, pc}
	...

00016ba0 <wifi_app_cb_process_connection>:

static void wifi_app_cb_process_connection(void *pvMsg)
{
   16ba0:	b580      	push	{r7, lr}
   16ba2:	b084      	sub	sp, #16
   16ba4:	af00      	add	r7, sp, #0
   16ba6:	6078      	str	r0, [r7, #4]
    tstrM2mWifiStateChanged* msg = (tstrM2mWifiStateChanged*)pvMsg;
   16ba8:	687b      	ldr	r3, [r7, #4]
   16baa:	60fb      	str	r3, [r7, #12]
    
    if(M2M_WIFI_CONNECTED == msg->u8CurrState)
   16bac:	68fb      	ldr	r3, [r7, #12]
   16bae:	781b      	ldrb	r3, [r3, #0]
   16bb0:	2b01      	cmp	r3, #1
   16bb2:	d107      	bne.n	16bc4 <wifi_app_cb_process_connection+0x24>
    {
        m2m_wifi_enable_sntp(1);
   16bb4:	2001      	movs	r0, #1
   16bb6:	4b11      	ldr	r3, [pc, #68]	; (16bfc <wifi_app_cb_process_connection+0x5c>)
   16bb8:	4798      	blx	r3
        WIFI_PRINTF("WINC1500 WIFI: Connected to the WIFI access point\r\n");
   16bba:	4b11      	ldr	r3, [pc, #68]	; (16c00 <wifi_app_cb_process_connection+0x60>)
   16bbc:	0018      	movs	r0, r3
   16bbe:	4b11      	ldr	r3, [pc, #68]	; (16c04 <wifi_app_cb_process_connection+0x64>)
   16bc0:	4798      	blx	r3
    }
    else
    {
        WIFI_PRINTF("WINC1500 WIFI: Unknown connection status: %d\r\n", msg->u8ErrCode);
    }
}
   16bc2:	e016      	b.n	16bf2 <wifi_app_cb_process_connection+0x52>
    else if(M2M_WIFI_DISCONNECTED == msg->u8CurrState)
   16bc4:	68fb      	ldr	r3, [r7, #12]
   16bc6:	781b      	ldrb	r3, [r3, #0]
   16bc8:	2b00      	cmp	r3, #0
   16bca:	d10a      	bne.n	16be2 <wifi_app_cb_process_connection+0x42>
        WIFI_PRINTF("WINC1500 WIFI: Disconnected from the WIFI access point\r\n");
   16bcc:	4b0e      	ldr	r3, [pc, #56]	; (16c08 <wifi_app_cb_process_connection+0x68>)
   16bce:	0018      	movs	r0, r3
   16bd0:	4b0c      	ldr	r3, [pc, #48]	; (16c04 <wifi_app_cb_process_connection+0x64>)
   16bd2:	4798      	blx	r3
        wifi_state_update(&g_wifi_context, WIFI_STATE_ERROR, WIFI_COUNTER_RECONNECT_WAIT);
   16bd4:	4a0d      	ldr	r2, [pc, #52]	; (16c0c <wifi_app_cb_process_connection+0x6c>)
   16bd6:	4b0e      	ldr	r3, [pc, #56]	; (16c10 <wifi_app_cb_process_connection+0x70>)
   16bd8:	2106      	movs	r1, #6
   16bda:	0018      	movs	r0, r3
   16bdc:	4b0d      	ldr	r3, [pc, #52]	; (16c14 <wifi_app_cb_process_connection+0x74>)
   16bde:	4798      	blx	r3
}
   16be0:	e007      	b.n	16bf2 <wifi_app_cb_process_connection+0x52>
        WIFI_PRINTF("WINC1500 WIFI: Unknown connection status: %d\r\n", msg->u8ErrCode);
   16be2:	68fb      	ldr	r3, [r7, #12]
   16be4:	785b      	ldrb	r3, [r3, #1]
   16be6:	001a      	movs	r2, r3
   16be8:	4b0b      	ldr	r3, [pc, #44]	; (16c18 <wifi_app_cb_process_connection+0x78>)
   16bea:	0011      	movs	r1, r2
   16bec:	0018      	movs	r0, r3
   16bee:	4b0b      	ldr	r3, [pc, #44]	; (16c1c <wifi_app_cb_process_connection+0x7c>)
   16bf0:	4798      	blx	r3
}
   16bf2:	46c0      	nop			; (mov r8, r8)
   16bf4:	46bd      	mov	sp, r7
   16bf6:	b004      	add	sp, #16
   16bf8:	bd80      	pop	{r7, pc}
   16bfa:	46c0      	nop			; (mov r8, r8)
   16bfc:	000087f9 	.word	0x000087f9
   16c00:	000213ec 	.word	0x000213ec
   16c04:	0001c3f1 	.word	0x0001c3f1
   16c08:	00021420 	.word	0x00021420
   16c0c:	00007530 	.word	0x00007530
   16c10:	200005d8 	.word	0x200005d8
   16c14:	00016955 	.word	0x00016955
   16c18:	00021458 	.word	0x00021458
   16c1c:	0001c2d5 	.word	0x0001c2d5

00016c20 <wifi_app_cb_process_dhcp>:

static void wifi_app_cb_process_dhcp(void *pvMsg)
{
   16c20:	b590      	push	{r4, r7, lr}
   16c22:	b087      	sub	sp, #28
   16c24:	af02      	add	r7, sp, #8
   16c26:	6078      	str	r0, [r7, #4]
    tstrM2MIPConfig* ip_config = (tstrM2MIPConfig*)pvMsg;
   16c28:	687b      	ldr	r3, [r7, #4]
   16c2a:	60fb      	str	r3, [r7, #12]
    uint8_t * ip_address = (uint8_t*)&ip_config->u32StaticIP;
   16c2c:	68fb      	ldr	r3, [r7, #12]
   16c2e:	60bb      	str	r3, [r7, #8]
    
    WIFI_PRINTF("WINC1500 WIFI: Device IP Address: %u.%u.%u.%u\r\n",
   16c30:	68bb      	ldr	r3, [r7, #8]
   16c32:	781b      	ldrb	r3, [r3, #0]
   16c34:	0019      	movs	r1, r3
   16c36:	68bb      	ldr	r3, [r7, #8]
   16c38:	3301      	adds	r3, #1
   16c3a:	781b      	ldrb	r3, [r3, #0]
   16c3c:	001a      	movs	r2, r3
   16c3e:	68bb      	ldr	r3, [r7, #8]
   16c40:	3303      	adds	r3, #3
   16c42:	781b      	ldrb	r3, [r3, #0]
   16c44:	001c      	movs	r4, r3
   16c46:	68bb      	ldr	r3, [r7, #8]
   16c48:	3304      	adds	r3, #4
   16c4a:	781b      	ldrb	r3, [r3, #0]
   16c4c:	4807      	ldr	r0, [pc, #28]	; (16c6c <wifi_app_cb_process_dhcp+0x4c>)
   16c4e:	9300      	str	r3, [sp, #0]
   16c50:	0023      	movs	r3, r4
   16c52:	4c07      	ldr	r4, [pc, #28]	; (16c70 <wifi_app_cb_process_dhcp+0x50>)
   16c54:	47a0      	blx	r4
        ip_address[0], ip_address[1], ip_address[3], ip_address[4]);

    /* Transition to ready state */
    wifi_state_update(&g_wifi_context, WIFI_STATE_READY, WIFI_COUNTER_NO_WAIT);
   16c56:	4b07      	ldr	r3, [pc, #28]	; (16c74 <wifi_app_cb_process_dhcp+0x54>)
   16c58:	2200      	movs	r2, #0
   16c5a:	2104      	movs	r1, #4
   16c5c:	0018      	movs	r0, r3
   16c5e:	4b06      	ldr	r3, [pc, #24]	; (16c78 <wifi_app_cb_process_dhcp+0x58>)
   16c60:	4798      	blx	r3
}
   16c62:	46c0      	nop			; (mov r8, r8)
   16c64:	46bd      	mov	sp, r7
   16c66:	b005      	add	sp, #20
   16c68:	bd90      	pop	{r4, r7, pc}
   16c6a:	46c0      	nop			; (mov r8, r8)
   16c6c:	00021488 	.word	0x00021488
   16c70:	0001c2d5 	.word	0x0001c2d5
   16c74:	200005d8 	.word	0x200005d8
   16c78:	00016955 	.word	0x00016955

00016c7c <wifi_app_cb_process_time>:

static void wifi_app_cb_process_time(void *pvMsg)
{
   16c7c:	b5f0      	push	{r4, r5, r6, r7, lr}
   16c7e:	b089      	sub	sp, #36	; 0x24
   16c80:	af04      	add	r7, sp, #16
   16c82:	6078      	str	r0, [r7, #4]
    tstrSystemTime * msg = (tstrSystemTime *)pvMsg;
   16c84:	687b      	ldr	r3, [r7, #4]
   16c86:	60fb      	str	r3, [r7, #12]

    WIFI_PRINTF("WINC1500 WIFI: Device Time:       %02d/%02d/%02d %02d:%02d:%02d\r\n",
   16c88:	68fb      	ldr	r3, [r7, #12]
   16c8a:	881b      	ldrh	r3, [r3, #0]
   16c8c:	001c      	movs	r4, r3
   16c8e:	68fb      	ldr	r3, [r7, #12]
   16c90:	789b      	ldrb	r3, [r3, #2]
   16c92:	001d      	movs	r5, r3
   16c94:	68fb      	ldr	r3, [r7, #12]
   16c96:	78db      	ldrb	r3, [r3, #3]
   16c98:	001e      	movs	r6, r3
   16c9a:	68fb      	ldr	r3, [r7, #12]
   16c9c:	791b      	ldrb	r3, [r3, #4]
   16c9e:	001a      	movs	r2, r3
   16ca0:	68fb      	ldr	r3, [r7, #12]
   16ca2:	795b      	ldrb	r3, [r3, #5]
   16ca4:	0019      	movs	r1, r3
   16ca6:	68fb      	ldr	r3, [r7, #12]
   16ca8:	799b      	ldrb	r3, [r3, #6]
   16caa:	481d      	ldr	r0, [pc, #116]	; (16d20 <wifi_app_cb_process_time+0xa4>)
   16cac:	9302      	str	r3, [sp, #8]
   16cae:	9101      	str	r1, [sp, #4]
   16cb0:	9200      	str	r2, [sp, #0]
   16cb2:	0033      	movs	r3, r6
   16cb4:	002a      	movs	r2, r5
   16cb6:	0021      	movs	r1, r4
   16cb8:	4c1a      	ldr	r4, [pc, #104]	; (16d24 <wifi_app_cb_process_time+0xa8>)
   16cba:	47a0      	blx	r4
        msg->u16Year, msg->u8Month, msg->u8Day,
        msg->u8Hour, msg->u8Minute, msg->u8Second);

    if(msg->u16Year && msg->u8Month && msg->u8Day)
   16cbc:	68fb      	ldr	r3, [r7, #12]
   16cbe:	881b      	ldrh	r3, [r3, #0]
   16cc0:	2b00      	cmp	r3, #0
   16cc2:	d022      	beq.n	16d0a <wifi_app_cb_process_time+0x8e>
   16cc4:	68fb      	ldr	r3, [r7, #12]
   16cc6:	789b      	ldrb	r3, [r3, #2]
   16cc8:	2b00      	cmp	r3, #0
   16cca:	d01e      	beq.n	16d0a <wifi_app_cb_process_time+0x8e>
   16ccc:	68fb      	ldr	r3, [r7, #12]
   16cce:	78db      	ldrb	r3, [r3, #3]
   16cd0:	2b00      	cmp	r3, #0
   16cd2:	d01a      	beq.n	16d0a <wifi_app_cb_process_time+0x8e>
    {
        /* Check if it has already been set before */
        if(!time_utils_get_utc())
   16cd4:	4b14      	ldr	r3, [pc, #80]	; (16d28 <wifi_app_cb_process_time+0xac>)
   16cd6:	4798      	blx	r3
   16cd8:	1e03      	subs	r3, r0, #0
   16cda:	d116      	bne.n	16d0a <wifi_app_cb_process_time+0x8e>
        {
            time_utils_set(msg->u16Year, msg->u8Month, msg->u8Day,
   16cdc:	68fb      	ldr	r3, [r7, #12]
   16cde:	881b      	ldrh	r3, [r3, #0]
   16ce0:	0018      	movs	r0, r3
   16ce2:	68fb      	ldr	r3, [r7, #12]
   16ce4:	789b      	ldrb	r3, [r3, #2]
   16ce6:	0019      	movs	r1, r3
   16ce8:	68fb      	ldr	r3, [r7, #12]
   16cea:	78db      	ldrb	r3, [r3, #3]
   16cec:	001c      	movs	r4, r3
            msg->u8Hour, msg->u8Minute, msg->u8Second);
   16cee:	68fb      	ldr	r3, [r7, #12]
   16cf0:	791b      	ldrb	r3, [r3, #4]
            time_utils_set(msg->u16Year, msg->u8Month, msg->u8Day,
   16cf2:	001d      	movs	r5, r3
            msg->u8Hour, msg->u8Minute, msg->u8Second);
   16cf4:	68fb      	ldr	r3, [r7, #12]
   16cf6:	795b      	ldrb	r3, [r3, #5]
            time_utils_set(msg->u16Year, msg->u8Month, msg->u8Day,
   16cf8:	001a      	movs	r2, r3
            msg->u8Hour, msg->u8Minute, msg->u8Second);
   16cfa:	68fb      	ldr	r3, [r7, #12]
   16cfc:	799b      	ldrb	r3, [r3, #6]
            time_utils_set(msg->u16Year, msg->u8Month, msg->u8Day,
   16cfe:	9301      	str	r3, [sp, #4]
   16d00:	9200      	str	r2, [sp, #0]
   16d02:	002b      	movs	r3, r5
   16d04:	0022      	movs	r2, r4
   16d06:	4c09      	ldr	r4, [pc, #36]	; (16d2c <wifi_app_cb_process_time+0xb0>)
   16d08:	47a0      	blx	r4
        }
    }

    /* Return to ready state */
    wifi_state_update(&g_wifi_context, WIFI_STATE_READY, WIFI_COUNTER_NO_WAIT);
   16d0a:	4b09      	ldr	r3, [pc, #36]	; (16d30 <wifi_app_cb_process_time+0xb4>)
   16d0c:	2200      	movs	r2, #0
   16d0e:	2104      	movs	r1, #4
   16d10:	0018      	movs	r0, r3
   16d12:	4b08      	ldr	r3, [pc, #32]	; (16d34 <wifi_app_cb_process_time+0xb8>)
   16d14:	4798      	blx	r3
}
   16d16:	46c0      	nop			; (mov r8, r8)
   16d18:	46bd      	mov	sp, r7
   16d1a:	b005      	add	sp, #20
   16d1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   16d1e:	46c0      	nop			; (mov r8, r8)
   16d20:	000214b8 	.word	0x000214b8
   16d24:	0001c2d5 	.word	0x0001c2d5
   16d28:	0001661d 	.word	0x0001661d
   16d2c:	00016649 	.word	0x00016649
   16d30:	200005d8 	.word	0x200005d8
   16d34:	00016955 	.word	0x00016955

00016d38 <wifi_app_cb>:

/* WIFI's main callback function handler, for handling the M2M_WIFI events 
   received on the WIFI interface. Such notifications are received in response 
   to WIFI/P2P operations */
static void wifi_app_cb(uint8 u8MsgType, void * pvMsg)
{
   16d38:	b580      	push	{r7, lr}
   16d3a:	b084      	sub	sp, #16
   16d3c:	af00      	add	r7, sp, #0
   16d3e:	0002      	movs	r2, r0
   16d40:	6039      	str	r1, [r7, #0]
   16d42:	1dfb      	adds	r3, r7, #7
   16d44:	701a      	strb	r2, [r3, #0]
    uint8_t i;
    for(i=0; i<sizeof(wifi_app_cb_list)/sizeof(wifi_app_cb_list[0]); i++)
   16d46:	230f      	movs	r3, #15
   16d48:	18fb      	adds	r3, r7, r3
   16d4a:	2200      	movs	r2, #0
   16d4c:	701a      	strb	r2, [r3, #0]
   16d4e:	e026      	b.n	16d9e <wifi_app_cb+0x66>
    {
        if(u8MsgType == wifi_app_cb_list[i]._id)
   16d50:	230f      	movs	r3, #15
   16d52:	18fb      	adds	r3, r7, r3
   16d54:	781a      	ldrb	r2, [r3, #0]
   16d56:	4b17      	ldr	r3, [pc, #92]	; (16db4 <wifi_app_cb+0x7c>)
   16d58:	00d2      	lsls	r2, r2, #3
   16d5a:	5cd3      	ldrb	r3, [r2, r3]
   16d5c:	1dfa      	adds	r2, r7, #7
   16d5e:	7812      	ldrb	r2, [r2, #0]
   16d60:	429a      	cmp	r2, r3
   16d62:	d115      	bne.n	16d90 <wifi_app_cb+0x58>
        {
            if(wifi_app_cb_list[i]._func)
   16d64:	230f      	movs	r3, #15
   16d66:	18fb      	adds	r3, r7, r3
   16d68:	781b      	ldrb	r3, [r3, #0]
   16d6a:	4a12      	ldr	r2, [pc, #72]	; (16db4 <wifi_app_cb+0x7c>)
   16d6c:	00db      	lsls	r3, r3, #3
   16d6e:	18d3      	adds	r3, r2, r3
   16d70:	3304      	adds	r3, #4
   16d72:	681b      	ldr	r3, [r3, #0]
   16d74:	2b00      	cmp	r3, #0
   16d76:	d018      	beq.n	16daa <wifi_app_cb+0x72>
            {
                wifi_app_cb_list[i]._func(pvMsg);
   16d78:	230f      	movs	r3, #15
   16d7a:	18fb      	adds	r3, r7, r3
   16d7c:	781b      	ldrb	r3, [r3, #0]
   16d7e:	4a0d      	ldr	r2, [pc, #52]	; (16db4 <wifi_app_cb+0x7c>)
   16d80:	00db      	lsls	r3, r3, #3
   16d82:	18d3      	adds	r3, r2, r3
   16d84:	3304      	adds	r3, #4
   16d86:	681b      	ldr	r3, [r3, #0]
   16d88:	683a      	ldr	r2, [r7, #0]
   16d8a:	0010      	movs	r0, r2
   16d8c:	4798      	blx	r3
            }
            break;
   16d8e:	e00c      	b.n	16daa <wifi_app_cb+0x72>
    for(i=0; i<sizeof(wifi_app_cb_list)/sizeof(wifi_app_cb_list[0]); i++)
   16d90:	230f      	movs	r3, #15
   16d92:	18fb      	adds	r3, r7, r3
   16d94:	781a      	ldrb	r2, [r3, #0]
   16d96:	230f      	movs	r3, #15
   16d98:	18fb      	adds	r3, r7, r3
   16d9a:	3201      	adds	r2, #1
   16d9c:	701a      	strb	r2, [r3, #0]
   16d9e:	230f      	movs	r3, #15
   16da0:	18fb      	adds	r3, r7, r3
   16da2:	781b      	ldrb	r3, [r3, #0]
   16da4:	2b02      	cmp	r3, #2
   16da6:	d9d3      	bls.n	16d50 <wifi_app_cb+0x18>
        }
    }
}
   16da8:	e000      	b.n	16dac <wifi_app_cb+0x74>
            break;
   16daa:	46c0      	nop			; (mov r8, r8)
}
   16dac:	46c0      	nop			; (mov r8, r8)
   16dae:	46bd      	mov	sp, r7
   16db0:	b004      	add	sp, #16
   16db2:	bd80      	pop	{r7, pc}
   16db4:	20000168 	.word	0x20000168

00016db8 <wifi_state_init>:

/* Handle the WIFI initialization state */
static void wifi_state_init(void * ctx)
{
   16db8:	b580      	push	{r7, lr}
   16dba:	b088      	sub	sp, #32
   16dbc:	af00      	add	r7, sp, #0
   16dbe:	6078      	str	r0, [r7, #4]
    #if BOARD == SAMG55_XPLAINED_PRO
	ioport_set_pin_level(LED_0_PIN, IOPORT_PIN_LEVEL_LOW);
	#elif BOARD == SAMD21_XPLAINED_PRO
	port_pin_set_output_level(LED_0_PIN, false);
   16dc0:	2100      	movs	r1, #0
   16dc2:	203e      	movs	r0, #62	; 0x3e
   16dc4:	4b28      	ldr	r3, [pc, #160]	; (16e68 <wifi_state_init+0xb0>)
   16dc6:	4798      	blx	r3
	#endif
	
    tstrWifiInitParam wifi_paramaters;

    /* Wait until the device has been "provisioned" or is configured to run */
    if(!config_ready() || !wifi_counter_finished())
   16dc8:	4b28      	ldr	r3, [pc, #160]	; (16e6c <wifi_state_init+0xb4>)
   16dca:	4798      	blx	r3
   16dcc:	0003      	movs	r3, r0
   16dce:	001a      	movs	r2, r3
   16dd0:	2301      	movs	r3, #1
   16dd2:	4053      	eors	r3, r2
   16dd4:	b2db      	uxtb	r3, r3
   16dd6:	2b00      	cmp	r3, #0
   16dd8:	d142      	bne.n	16e60 <wifi_state_init+0xa8>
   16dda:	4b25      	ldr	r3, [pc, #148]	; (16e70 <wifi_state_init+0xb8>)
   16ddc:	4798      	blx	r3
   16dde:	0003      	movs	r3, r0
   16de0:	001a      	movs	r2, r3
   16de2:	2301      	movs	r3, #1
   16de4:	4053      	eors	r3, r2
   16de6:	b2db      	uxtb	r3, r3
   16de8:	2b00      	cmp	r3, #0
   16dea:	d139      	bne.n	16e60 <wifi_state_init+0xa8>
    {
        return;
    }

    /* Perform the BSP Initialization for the WIFI module */
    nm_bsp_init();
   16dec:	4b21      	ldr	r3, [pc, #132]	; (16e74 <wifi_state_init+0xbc>)
   16dee:	4798      	blx	r3

    /* Set the WIFI configuration attributes */
    m2m_memset((uint8*)&wifi_paramaters, 0, sizeof(wifi_paramaters));
   16df0:	2308      	movs	r3, #8
   16df2:	18fb      	adds	r3, r7, r3
   16df4:	2218      	movs	r2, #24
   16df6:	2100      	movs	r1, #0
   16df8:	0018      	movs	r0, r3
   16dfa:	4b1f      	ldr	r3, [pc, #124]	; (16e78 <wifi_state_init+0xc0>)
   16dfc:	4798      	blx	r3
    wifi_paramaters.pfAppWifiCb = wifi_app_cb;
   16dfe:	2308      	movs	r3, #8
   16e00:	18fb      	adds	r3, r7, r3
   16e02:	4a1e      	ldr	r2, [pc, #120]	; (16e7c <wifi_state_init+0xc4>)
   16e04:	601a      	str	r2, [r3, #0]

    /* Initialize the WINC1500 WIFI module */
    if(M2M_SUCCESS != m2m_wifi_init(&wifi_paramaters))
   16e06:	2308      	movs	r3, #8
   16e08:	18fb      	adds	r3, r7, r3
   16e0a:	0018      	movs	r0, r3
   16e0c:	4b1c      	ldr	r3, [pc, #112]	; (16e80 <wifi_state_init+0xc8>)
   16e0e:	4798      	blx	r3
   16e10:	1e03      	subs	r3, r0, #0
   16e12:	d008      	beq.n	16e26 <wifi_state_init+0x6e>
    {
        WIFI_PRINTF("m2m_wifi_init failed\r\n");
   16e14:	4b1b      	ldr	r3, [pc, #108]	; (16e84 <wifi_state_init+0xcc>)
   16e16:	0018      	movs	r0, r3
   16e18:	4b1b      	ldr	r3, [pc, #108]	; (16e88 <wifi_state_init+0xd0>)
   16e1a:	4798      	blx	r3
		wifi_counter_set(WIFI_COUNTER_CONNECT_WAIT);
   16e1c:	4b1b      	ldr	r3, [pc, #108]	; (16e8c <wifi_state_init+0xd4>)
   16e1e:	0018      	movs	r0, r3
   16e20:	4b1b      	ldr	r3, [pc, #108]	; (16e90 <wifi_state_init+0xd8>)
   16e22:	4798      	blx	r3
        return;
   16e24:	e01d      	b.n	16e62 <wifi_state_init+0xaa>
    }

    /* Configure the WIFI IO lines */
    m2m_periph_pullup_ctrl( M2M_PERIPH_PULLUP_DIS_HOST_WAKEUP |
   16e26:	4b1b      	ldr	r3, [pc, #108]	; (16e94 <wifi_state_init+0xdc>)
   16e28:	2100      	movs	r1, #0
   16e2a:	0018      	movs	r0, r3
   16e2c:	4b1a      	ldr	r3, [pc, #104]	; (16e98 <wifi_state_init+0xe0>)
   16e2e:	4798      	blx	r3
                            M2M_PERIPH_PULLUP_DIS_SD_CMD_SPI_SCK |
                            M2M_PERIPH_PULLUP_DIS_SD_DAT0_SPI_TXD, false);

    /* Initialize the WINC1500 WIFI socket handler */
    socketInit();
   16e30:	4b1a      	ldr	r3, [pc, #104]	; (16e9c <wifi_state_init+0xe4>)
   16e32:	4798      	blx	r3

    /* Register the WIFI socket callbacks */
    registerSocketCallback(wifi_socket_handler_cb, wifi_resolve_handler_cb);
   16e34:	4a1a      	ldr	r2, [pc, #104]	; (16ea0 <wifi_state_init+0xe8>)
   16e36:	4b1b      	ldr	r3, [pc, #108]	; (16ea4 <wifi_state_init+0xec>)
   16e38:	0011      	movs	r1, r2
   16e3a:	0018      	movs	r0, r3
   16e3c:	4b1a      	ldr	r3, [pc, #104]	; (16ea8 <wifi_state_init+0xf0>)
   16e3e:	4798      	blx	r3

    /* Print the current WINC software */
    if(M2M_SUCCESS != wifi_print_winc_version())
   16e40:	4b1a      	ldr	r3, [pc, #104]	; (16eac <wifi_state_init+0xf4>)
   16e42:	4798      	blx	r3
   16e44:	1e03      	subs	r3, r0, #0
   16e46:	d004      	beq.n	16e52 <wifi_state_init+0x9a>
    {
        WIFI_PRINTF("Failed to retrieve WINC firmware version\r\n");
   16e48:	4b19      	ldr	r3, [pc, #100]	; (16eb0 <wifi_state_init+0xf8>)
   16e4a:	0018      	movs	r0, r3
   16e4c:	4b0e      	ldr	r3, [pc, #56]	; (16e88 <wifi_state_init+0xd0>)
   16e4e:	4798      	blx	r3
        return;
   16e50:	e007      	b.n	16e62 <wifi_state_init+0xaa>
    }

    /* Move to the next state */
    wifi_state_update(ctx, WIFI_STATE_TLS_INIT, WIFI_COUNTER_NO_WAIT);
   16e52:	687b      	ldr	r3, [r7, #4]
   16e54:	2200      	movs	r2, #0
   16e56:	2101      	movs	r1, #1
   16e58:	0018      	movs	r0, r3
   16e5a:	4b16      	ldr	r3, [pc, #88]	; (16eb4 <wifi_state_init+0xfc>)
   16e5c:	4798      	blx	r3
   16e5e:	e000      	b.n	16e62 <wifi_state_init+0xaa>
        return;
   16e60:	46c0      	nop			; (mov r8, r8)
}
   16e62:	46bd      	mov	sp, r7
   16e64:	b008      	add	sp, #32
   16e66:	bd80      	pop	{r7, pc}
   16e68:	00016721 	.word	0x00016721
   16e6c:	0001831d 	.word	0x0001831d
   16e70:	00016889 	.word	0x00016889
   16e74:	000063dd 	.word	0x000063dd
   16e78:	00006d61 	.word	0x00006d61
   16e7c:	00016d39 	.word	0x00016d39
   16e80:	000080a5 	.word	0x000080a5
   16e84:	000214fc 	.word	0x000214fc
   16e88:	0001c3f1 	.word	0x0001c3f1
   16e8c:	00002710 	.word	0x00002710
   16e90:	000168a1 	.word	0x000168a1
   16e94:	00000c01 	.word	0x00000c01
   16e98:	00007af1 	.word	0x00007af1
   16e9c:	0000b465 	.word	0x0000b465
   16ea0:	00016b45 	.word	0x00016b45
   16ea4:	00016a19 	.word	0x00016a19
   16ea8:	0000b4b5 	.word	0x0000b4b5
   16eac:	00016989 	.word	0x00016989
   16eb0:	00021514 	.word	0x00021514
   16eb4:	00016955 	.word	0x00016955

00016eb8 <wifi_state_tls_init>:

/* Handle the TLS setup state */
static void wifi_state_tls_init(void * ctx)
{
   16eb8:	b580      	push	{r7, lr}
   16eba:	b082      	sub	sp, #8
   16ebc:	af00      	add	r7, sp, #0
   16ebe:	6078      	str	r0, [r7, #4]
    // Initialize the WINC1500 SSL module
    if(M2M_SUCCESS != m2m_ssl_init(wifi_tls_handler_cb))
   16ec0:	4b0e      	ldr	r3, [pc, #56]	; (16efc <wifi_state_tls_init+0x44>)
   16ec2:	0018      	movs	r0, r3
   16ec4:	4b0e      	ldr	r3, [pc, #56]	; (16f00 <wifi_state_tls_init+0x48>)
   16ec6:	4798      	blx	r3
   16ec8:	1e03      	subs	r3, r0, #0
   16eca:	d004      	beq.n	16ed6 <wifi_state_tls_init+0x1e>
    {
        WIFI_PRINTF("m2m_ssl_init failed\r\n");
   16ecc:	4b0d      	ldr	r3, [pc, #52]	; (16f04 <wifi_state_tls_init+0x4c>)
   16ece:	0018      	movs	r0, r3
   16ed0:	4b0d      	ldr	r3, [pc, #52]	; (16f08 <wifi_state_tls_init+0x50>)
   16ed2:	4798      	blx	r3
        return;
   16ed4:	e00f      	b.n	16ef6 <wifi_state_tls_init+0x3e>
    }

    // Set the active WINC1500 TLS cipher suites
    //         wifi_status = m2m_ssl_set_active_ciphersuites(SSL_ECC_ONLY_CIPHERS);
    if(M2M_SUCCESS != m2m_ssl_set_active_ciphersuites(SSL_ENABLE_ALL_SUITES))
   16ed6:	203f      	movs	r0, #63	; 0x3f
   16ed8:	4b0c      	ldr	r3, [pc, #48]	; (16f0c <wifi_state_tls_init+0x54>)
   16eda:	4798      	blx	r3
   16edc:	1e03      	subs	r3, r0, #0
   16ede:	d004      	beq.n	16eea <wifi_state_tls_init+0x32>
    {
        WIFI_PRINTF("m2m_ssl_set_active_ciphersuites failed\r\n");
   16ee0:	4b0b      	ldr	r3, [pc, #44]	; (16f10 <wifi_state_tls_init+0x58>)
   16ee2:	0018      	movs	r0, r3
   16ee4:	4b08      	ldr	r3, [pc, #32]	; (16f08 <wifi_state_tls_init+0x50>)
   16ee6:	4798      	blx	r3
        return;
   16ee8:	e005      	b.n	16ef6 <wifi_state_tls_init+0x3e>
    }

    /* Move to the next state */
    wifi_state_update(ctx, WIFI_STATE_CONNECT, WIFI_COUNTER_NO_WAIT);
   16eea:	687b      	ldr	r3, [r7, #4]
   16eec:	2200      	movs	r2, #0
   16eee:	2102      	movs	r1, #2
   16ef0:	0018      	movs	r0, r3
   16ef2:	4b08      	ldr	r3, [pc, #32]	; (16f14 <wifi_state_tls_init+0x5c>)
   16ef4:	4798      	blx	r3
}
   16ef6:	46bd      	mov	sp, r7
   16ef8:	b002      	add	sp, #8
   16efa:	bd80      	pop	{r7, pc}
   16efc:	00016b89 	.word	0x00016b89
   16f00:	00007c69 	.word	0x00007c69
   16f04:	00021540 	.word	0x00021540
   16f08:	0001c3f1 	.word	0x0001c3f1
   16f0c:	00007c1d 	.word	0x00007c1d
   16f10:	00021558 	.word	0x00021558
   16f14:	00016955 	.word	0x00016955

00016f18 <wifi_state_connect>:

/* Initialize the network connection */
static void wifi_state_connect(void * ctx)
{
   16f18:	b590      	push	{r4, r7, lr}
   16f1a:	b09f      	sub	sp, #124	; 0x7c
   16f1c:	af02      	add	r7, sp, #8
   16f1e:	6078      	str	r0, [r7, #4]
    int32_t status;

    do
    {
        /* Get the WIFI SSID */
        status = config_get_ssid(ssid, sizeof(ssid));
   16f20:	234c      	movs	r3, #76	; 0x4c
   16f22:	18fb      	adds	r3, r7, r3
   16f24:	2120      	movs	r1, #32
   16f26:	0018      	movs	r0, r3
   16f28:	4b2d      	ldr	r3, [pc, #180]	; (16fe0 <wifi_state_connect+0xc8>)
   16f2a:	4798      	blx	r3
   16f2c:	0003      	movs	r3, r0
   16f2e:	66fb      	str	r3, [r7, #108]	; 0x6c
        if(status)
   16f30:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   16f32:	2b00      	cmp	r3, #0
   16f34:	d006      	beq.n	16f44 <wifi_state_connect+0x2c>
        {
            WIFI_PRINTF("Failed to get SSID: %d\r\n", status);
   16f36:	6efa      	ldr	r2, [r7, #108]	; 0x6c
   16f38:	4b2a      	ldr	r3, [pc, #168]	; (16fe4 <wifi_state_connect+0xcc>)
   16f3a:	0011      	movs	r1, r2
   16f3c:	0018      	movs	r0, r3
   16f3e:	4b2a      	ldr	r3, [pc, #168]	; (16fe8 <wifi_state_connect+0xd0>)
   16f40:	4798      	blx	r3
            break;
   16f42:	e038      	b.n	16fb6 <wifi_state_connect+0x9e>
        }

        /* Get the WIFI Password */
        status = config_get_password(pass, sizeof(pass));
   16f44:	230c      	movs	r3, #12
   16f46:	18fb      	adds	r3, r7, r3
   16f48:	2140      	movs	r1, #64	; 0x40
   16f4a:	0018      	movs	r0, r3
   16f4c:	4b27      	ldr	r3, [pc, #156]	; (16fec <wifi_state_connect+0xd4>)
   16f4e:	4798      	blx	r3
   16f50:	0003      	movs	r3, r0
   16f52:	66fb      	str	r3, [r7, #108]	; 0x6c
        if(status)
   16f54:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   16f56:	2b00      	cmp	r3, #0
   16f58:	d12c      	bne.n	16fb4 <wifi_state_connect+0x9c>
        {
            break;
        }

        /* Check the password length returned. If it's non zero then use it - if not assume an open AP */
        if (strlen(pass) > 0)
   16f5a:	230c      	movs	r3, #12
   16f5c:	18fb      	adds	r3, r7, r3
   16f5e:	781b      	ldrb	r3, [r3, #0]
   16f60:	2b00      	cmp	r3, #0
   16f62:	d013      	beq.n	16f8c <wifi_state_connect+0x74>
        {
            status = m2m_wifi_connect(ssid, strlen(ssid), M2M_WIFI_SEC_WPA_PSK, pass, M2M_WIFI_CH_ALL);
   16f64:	234c      	movs	r3, #76	; 0x4c
   16f66:	18fb      	adds	r3, r7, r3
   16f68:	0018      	movs	r0, r3
   16f6a:	4b21      	ldr	r3, [pc, #132]	; (16ff0 <wifi_state_connect+0xd8>)
   16f6c:	4798      	blx	r3
   16f6e:	0003      	movs	r3, r0
   16f70:	b2d9      	uxtb	r1, r3
   16f72:	230c      	movs	r3, #12
   16f74:	18fa      	adds	r2, r7, r3
   16f76:	234c      	movs	r3, #76	; 0x4c
   16f78:	18f8      	adds	r0, r7, r3
   16f7a:	23ff      	movs	r3, #255	; 0xff
   16f7c:	9300      	str	r3, [sp, #0]
   16f7e:	0013      	movs	r3, r2
   16f80:	2202      	movs	r2, #2
   16f82:	4c1c      	ldr	r4, [pc, #112]	; (16ff4 <wifi_state_connect+0xdc>)
   16f84:	47a0      	blx	r4
   16f86:	0003      	movs	r3, r0
   16f88:	66fb      	str	r3, [r7, #108]	; 0x6c
   16f8a:	e014      	b.n	16fb6 <wifi_state_connect+0x9e>
        }
        else
        {
            status = m2m_wifi_connect(ssid, strlen(ssid), M2M_WIFI_SEC_OPEN, pass, M2M_WIFI_CH_ALL);
   16f8c:	234c      	movs	r3, #76	; 0x4c
   16f8e:	18fb      	adds	r3, r7, r3
   16f90:	0018      	movs	r0, r3
   16f92:	4b17      	ldr	r3, [pc, #92]	; (16ff0 <wifi_state_connect+0xd8>)
   16f94:	4798      	blx	r3
   16f96:	0003      	movs	r3, r0
   16f98:	b2d9      	uxtb	r1, r3
   16f9a:	230c      	movs	r3, #12
   16f9c:	18fa      	adds	r2, r7, r3
   16f9e:	234c      	movs	r3, #76	; 0x4c
   16fa0:	18f8      	adds	r0, r7, r3
   16fa2:	23ff      	movs	r3, #255	; 0xff
   16fa4:	9300      	str	r3, [sp, #0]
   16fa6:	0013      	movs	r3, r2
   16fa8:	2201      	movs	r2, #1
   16faa:	4c12      	ldr	r4, [pc, #72]	; (16ff4 <wifi_state_connect+0xdc>)
   16fac:	47a0      	blx	r4
   16fae:	0003      	movs	r3, r0
   16fb0:	66fb      	str	r3, [r7, #108]	; 0x6c
   16fb2:	e000      	b.n	16fb6 <wifi_state_connect+0x9e>
            break;
   16fb4:	46c0      	nop			; (mov r8, r8)
        }
    } while(false);

    if (M2M_SUCCESS == status)
   16fb6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   16fb8:	2b00      	cmp	r3, #0
   16fba:	d106      	bne.n	16fca <wifi_state_connect+0xb2>
    {
        /* Move to the next state */
        wifi_state_update(ctx, WIFI_STATE_WAIT, WIFI_COUNTER_CONNECT_WAIT);
   16fbc:	4a0e      	ldr	r2, [pc, #56]	; (16ff8 <wifi_state_connect+0xe0>)
   16fbe:	687b      	ldr	r3, [r7, #4]
   16fc0:	2103      	movs	r1, #3
   16fc2:	0018      	movs	r0, r3
   16fc4:	4b0d      	ldr	r3, [pc, #52]	; (16ffc <wifi_state_connect+0xe4>)
   16fc6:	4798      	blx	r3
    else
    {
        /* Go to the error state */
        wifi_state_update(ctx, WIFI_STATE_ERROR, WIFI_COUNTER_RECONNECT_WAIT);
    }
}
   16fc8:	e005      	b.n	16fd6 <wifi_state_connect+0xbe>
        wifi_state_update(ctx, WIFI_STATE_ERROR, WIFI_COUNTER_RECONNECT_WAIT);
   16fca:	4a0d      	ldr	r2, [pc, #52]	; (17000 <wifi_state_connect+0xe8>)
   16fcc:	687b      	ldr	r3, [r7, #4]
   16fce:	2106      	movs	r1, #6
   16fd0:	0018      	movs	r0, r3
   16fd2:	4b0a      	ldr	r3, [pc, #40]	; (16ffc <wifi_state_connect+0xe4>)
   16fd4:	4798      	blx	r3
}
   16fd6:	46c0      	nop			; (mov r8, r8)
   16fd8:	46bd      	mov	sp, r7
   16fda:	b01d      	add	sp, #116	; 0x74
   16fdc:	bd90      	pop	{r4, r7, pc}
   16fde:	46c0      	nop			; (mov r8, r8)
   16fe0:	00018329 	.word	0x00018329
   16fe4:	00021580 	.word	0x00021580
   16fe8:	0001c2d5 	.word	0x0001c2d5
   16fec:	00018371 	.word	0x00018371
   16ff0:	0001c72b 	.word	0x0001c72b
   16ff4:	000082ad 	.word	0x000082ad
   16ff8:	00002710 	.word	0x00002710
   16ffc:	00016955 	.word	0x00016955
   17000:	00007530 	.word	0x00007530

00017004 <wifi_state_wait>:

/* Wait last command to finish */
static void wifi_state_wait(void * ctx)
{
   17004:	b580      	push	{r7, lr}
   17006:	b082      	sub	sp, #8
   17008:	af00      	add	r7, sp, #0
   1700a:	6078      	str	r0, [r7, #4]
    if(wifi_counter_finished())
   1700c:	4b06      	ldr	r3, [pc, #24]	; (17028 <wifi_state_wait+0x24>)
   1700e:	4798      	blx	r3
   17010:	1e03      	subs	r3, r0, #0
   17012:	d005      	beq.n	17020 <wifi_state_wait+0x1c>
    {
        /* Command failed to finish in the given timeout */
        wifi_state_update(ctx, WIFI_STATE_ERROR, WIFI_COUNTER_RECONNECT_WAIT);
   17014:	4a05      	ldr	r2, [pc, #20]	; (1702c <wifi_state_wait+0x28>)
   17016:	687b      	ldr	r3, [r7, #4]
   17018:	2106      	movs	r1, #6
   1701a:	0018      	movs	r0, r3
   1701c:	4b04      	ldr	r3, [pc, #16]	; (17030 <wifi_state_wait+0x2c>)
   1701e:	4798      	blx	r3
    }
}
   17020:	46c0      	nop			; (mov r8, r8)
   17022:	46bd      	mov	sp, r7
   17024:	b002      	add	sp, #8
   17026:	bd80      	pop	{r7, pc}
   17028:	00016889 	.word	0x00016889
   1702c:	00007530 	.word	0x00007530
   17030:	00016955 	.word	0x00016955

00017034 <wifi_state_ready>:

/* Idle state - Run when no commands are pending  */
static void wifi_state_ready(void * ctx)
{
   17034:	b580      	push	{r7, lr}
   17036:	b082      	sub	sp, #8
   17038:	af00      	add	r7, sp, #0
   1703a:	6078      	str	r0, [r7, #4]
    /* Do Nothing */
}
   1703c:	46c0      	nop			; (mov r8, r8)
   1703e:	46bd      	mov	sp, r7
   17040:	b002      	add	sp, #8
   17042:	bd80      	pop	{r7, pc}

00017044 <wifi_state_timeout>:

/* Last command timed out */
static void wifi_state_timeout(void * ctx)
{
   17044:	b580      	push	{r7, lr}
   17046:	b082      	sub	sp, #8
   17048:	af00      	add	r7, sp, #0
   1704a:	6078      	str	r0, [r7, #4]
    /* Do Nothing */
}
   1704c:	46c0      	nop			; (mov r8, r8)
   1704e:	46bd      	mov	sp, r7
   17050:	b002      	add	sp, #8
   17052:	bd80      	pop	{r7, pc}

00017054 <wifi_state_error>:

/* Handle the generic error state */
static void wifi_state_error(void * ctx)
{
   17054:	b580      	push	{r7, lr}
   17056:	b082      	sub	sp, #8
   17058:	af00      	add	r7, sp, #0
   1705a:	6078      	str	r0, [r7, #4]
    if(wifi_counter_finished())
   1705c:	4b08      	ldr	r3, [pc, #32]	; (17080 <wifi_state_error+0x2c>)
   1705e:	4798      	blx	r3
   17060:	1e03      	subs	r3, r0, #0
   17062:	d009      	beq.n	17078 <wifi_state_error+0x24>
    {
        WIFI_PRINTF("Retrying Connection\r\n");
   17064:	4b07      	ldr	r3, [pc, #28]	; (17084 <wifi_state_error+0x30>)
   17066:	0018      	movs	r0, r3
   17068:	4b07      	ldr	r3, [pc, #28]	; (17088 <wifi_state_error+0x34>)
   1706a:	4798      	blx	r3
        wifi_state_update(ctx, WIFI_STATE_CONNECT, WIFI_COUNTER_NO_WAIT);
   1706c:	687b      	ldr	r3, [r7, #4]
   1706e:	2200      	movs	r2, #0
   17070:	2102      	movs	r1, #2
   17072:	0018      	movs	r0, r3
   17074:	4b05      	ldr	r3, [pc, #20]	; (1708c <wifi_state_error+0x38>)
   17076:	4798      	blx	r3
    }
}
   17078:	46c0      	nop			; (mov r8, r8)
   1707a:	46bd      	mov	sp, r7
   1707c:	b002      	add	sp, #8
   1707e:	bd80      	pop	{r7, pc}
   17080:	00016889 	.word	0x00016889
   17084:	0002159c 	.word	0x0002159c
   17088:	0001c3f1 	.word	0x0001c3f1
   1708c:	00016955 	.word	0x00016955

00017090 <wifi_task>:
    TINY_STATE_DEF(WIFI_STATE_ERROR,            &wifi_state_error)
};

/* WIFI State Controller */
void wifi_task(void)
{
   17090:	b5b0      	push	{r4, r5, r7, lr}
   17092:	af00      	add	r7, sp, #0
    if(!g_wifi_context.state.count)
   17094:	4b09      	ldr	r3, [pc, #36]	; (170bc <wifi_task+0x2c>)
   17096:	885b      	ldrh	r3, [r3, #2]
   17098:	2b00      	cmp	r3, #0
   1709a:	d105      	bne.n	170a8 <wifi_task+0x18>
    {
        /* Perform the Initialization */
        tiny_state_init(&g_wifi_context, g_wifi_states, sizeof(g_wifi_states)/sizeof(g_wifi_states[0]), WIFI_STATE_INIT);
   1709c:	4908      	ldr	r1, [pc, #32]	; (170c0 <wifi_task+0x30>)
   1709e:	4807      	ldr	r0, [pc, #28]	; (170bc <wifi_task+0x2c>)
   170a0:	2300      	movs	r3, #0
   170a2:	2207      	movs	r2, #7
   170a4:	4c07      	ldr	r4, [pc, #28]	; (170c4 <wifi_task+0x34>)
   170a6:	47a0      	blx	r4
    }

    /* Run the state machine*/
    tiny_state_driver(&g_wifi_context);
   170a8:	4b04      	ldr	r3, [pc, #16]	; (170bc <wifi_task+0x2c>)
   170aa:	0018      	movs	r0, r3
   170ac:	4b06      	ldr	r3, [pc, #24]	; (170c8 <wifi_task+0x38>)
   170ae:	4798      	blx	r3

    /* Handle WINC1500 pending events */
    m2m_wifi_handle_events(NULL);
   170b0:	2000      	movs	r0, #0
   170b2:	4b06      	ldr	r3, [pc, #24]	; (170cc <wifi_task+0x3c>)
   170b4:	4798      	blx	r3
}
   170b6:	46c0      	nop			; (mov r8, r8)
   170b8:	46bd      	mov	sp, r7
   170ba:	bdb0      	pop	{r4, r5, r7, pc}
   170bc:	200005d8 	.word	0x200005d8
   170c0:	20000180 	.word	0x20000180
   170c4:	00016775 	.word	0x00016775
   170c8:	00016825 	.word	0x00016825
   170cc:	00008291 	.word	0x00008291

000170d0 <wifi_task_block_until_done>:

/* Used internally for blocking calls */
static inline void wifi_task_block_until_done(void)
{
   170d0:	b580      	push	{r7, lr}
   170d2:	af00      	add	r7, sp, #0
    do
    {
        wifi_task();
   170d4:	4b04      	ldr	r3, [pc, #16]	; (170e8 <wifi_task_block_until_done+0x18>)
   170d6:	4798      	blx	r3
    } while (wifi_is_busy());
   170d8:	4b04      	ldr	r3, [pc, #16]	; (170ec <wifi_task_block_until_done+0x1c>)
   170da:	4798      	blx	r3
   170dc:	1e03      	subs	r3, r0, #0
   170de:	d1f9      	bne.n	170d4 <wifi_task_block_until_done+0x4>
}
   170e0:	46c0      	nop			; (mov r8, r8)
   170e2:	46bd      	mov	sp, r7
   170e4:	bd80      	pop	{r7, pc}
   170e6:	46c0      	nop			; (mov r8, r8)
   170e8:	00017091 	.word	0x00017091
   170ec:	0001691d 	.word	0x0001691d

000170f0 <wifi_request_time>:

/* Request Time from NTP servers and update clock */
void wifi_request_time(void)
{
   170f0:	b580      	push	{r7, lr}
   170f2:	af00      	add	r7, sp, #0
    if(wifi_is_ready())
   170f4:	4b07      	ldr	r3, [pc, #28]	; (17114 <wifi_request_time+0x24>)
   170f6:	4798      	blx	r3
   170f8:	1e03      	subs	r3, r0, #0
   170fa:	d007      	beq.n	1710c <wifi_request_time+0x1c>
    {
        m2m_wifi_get_sytem_time();
   170fc:	4b06      	ldr	r3, [pc, #24]	; (17118 <wifi_request_time+0x28>)
   170fe:	4798      	blx	r3
        wifi_state_update(&g_wifi_context, WIFI_STATE_WAIT, WIFI_COUNTER_GET_TIME_WAIT);
   17100:	4a06      	ldr	r2, [pc, #24]	; (1711c <wifi_request_time+0x2c>)
   17102:	4b07      	ldr	r3, [pc, #28]	; (17120 <wifi_request_time+0x30>)
   17104:	2103      	movs	r1, #3
   17106:	0018      	movs	r0, r3
   17108:	4b06      	ldr	r3, [pc, #24]	; (17124 <wifi_request_time+0x34>)
   1710a:	4798      	blx	r3
    }
}
   1710c:	46c0      	nop			; (mov r8, r8)
   1710e:	46bd      	mov	sp, r7
   17110:	bd80      	pop	{r7, pc}
   17112:	46c0      	nop			; (mov r8, r8)
   17114:	00016901 	.word	0x00016901
   17118:	000087cd 	.word	0x000087cd
   1711c:	00002710 	.word	0x00002710
   17120:	200005d8 	.word	0x200005d8
   17124:	00016955 	.word	0x00016955

00017128 <wifi_resolve_host>:

/* Request the winc to resolve a name */
static void wifi_resolve_host(char * host)
{
   17128:	b580      	push	{r7, lr}
   1712a:	b082      	sub	sp, #8
   1712c:	af00      	add	r7, sp, #0
   1712e:	6078      	str	r0, [r7, #4]
    g_wifi_context.host = 0;
   17130:	4b0c      	ldr	r3, [pc, #48]	; (17164 <wifi_resolve_host+0x3c>)
   17132:	2200      	movs	r2, #0
   17134:	60da      	str	r2, [r3, #12]

    if(MQTTCLIENT_SUCCESS == gethostbyname((uint8*)host))
   17136:	687b      	ldr	r3, [r7, #4]
   17138:	0018      	movs	r0, r3
   1713a:	4b0b      	ldr	r3, [pc, #44]	; (17168 <wifi_resolve_host+0x40>)
   1713c:	4798      	blx	r3
   1713e:	1e03      	subs	r3, r0, #0
   17140:	d106      	bne.n	17150 <wifi_resolve_host+0x28>
    {
        wifi_state_update(&g_wifi_context, WIFI_STATE_WAIT, WIFI_COUNTER_GET_TIME_WAIT);
   17142:	4a0a      	ldr	r2, [pc, #40]	; (1716c <wifi_resolve_host+0x44>)
   17144:	4b07      	ldr	r3, [pc, #28]	; (17164 <wifi_resolve_host+0x3c>)
   17146:	2103      	movs	r1, #3
   17148:	0018      	movs	r0, r3
   1714a:	4b09      	ldr	r3, [pc, #36]	; (17170 <wifi_resolve_host+0x48>)
   1714c:	4798      	blx	r3
    }
    else
    {
        wifi_state_update(&g_wifi_context, WIFI_STATE_ERROR, WIFI_COUNTER_RECONNECT_WAIT);
    }
}
   1714e:	e005      	b.n	1715c <wifi_resolve_host+0x34>
        wifi_state_update(&g_wifi_context, WIFI_STATE_ERROR, WIFI_COUNTER_RECONNECT_WAIT);
   17150:	4a08      	ldr	r2, [pc, #32]	; (17174 <wifi_resolve_host+0x4c>)
   17152:	4b04      	ldr	r3, [pc, #16]	; (17164 <wifi_resolve_host+0x3c>)
   17154:	2106      	movs	r1, #6
   17156:	0018      	movs	r0, r3
   17158:	4b05      	ldr	r3, [pc, #20]	; (17170 <wifi_resolve_host+0x48>)
   1715a:	4798      	blx	r3
}
   1715c:	46c0      	nop			; (mov r8, r8)
   1715e:	46bd      	mov	sp, r7
   17160:	b002      	add	sp, #8
   17162:	bd80      	pop	{r7, pc}
   17164:	200005d8 	.word	0x200005d8
   17168:	0000bc21 	.word	0x0000bc21
   1716c:	00002710 	.word	0x00002710
   17170:	00016955 	.word	0x00016955
   17174:	00007530 	.word	0x00007530

00017178 <wifi_connect>:

/* Connect to a host and create a socket - blocking call */
int wifi_connect(char * host, int port)
{
   17178:	b590      	push	{r4, r7, lr}
   1717a:	b08d      	sub	sp, #52	; 0x34
   1717c:	af02      	add	r7, sp, #8
   1717e:	6078      	str	r0, [r7, #4]
   17180:	6039      	str	r1, [r7, #0]
    int status = MQTTCLIENT_FAILURE;
   17182:	2301      	movs	r3, #1
   17184:	425b      	negs	r3, r3
   17186:	627b      	str	r3, [r7, #36]	; 0x24
    SOCKET new_socket = SOCK_ERR_INVALID;
   17188:	2323      	movs	r3, #35	; 0x23
   1718a:	18fb      	adds	r3, r7, r3
   1718c:	22f7      	movs	r2, #247	; 0xf7
   1718e:	701a      	strb	r2, [r3, #0]
    struct sockaddr_in socket_address;
    int optval;

    if(!wifi_is_ready())
   17190:	4b40      	ldr	r3, [pc, #256]	; (17294 <wifi_connect+0x11c>)
   17192:	4798      	blx	r3
   17194:	1e03      	subs	r3, r0, #0
   17196:	d101      	bne.n	1719c <wifi_connect+0x24>
    {
        return status;
   17198:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1719a:	e076      	b.n	1728a <wifi_connect+0x112>
    }

    /* Send the resolve command */
    wifi_resolve_host(host);
   1719c:	687b      	ldr	r3, [r7, #4]
   1719e:	0018      	movs	r0, r3
   171a0:	4b3d      	ldr	r3, [pc, #244]	; (17298 <wifi_connect+0x120>)
   171a2:	4798      	blx	r3

    /* Wait for the command to complete or timeout */
    wifi_task_block_until_done();
   171a4:	4b3d      	ldr	r3, [pc, #244]	; (1729c <wifi_connect+0x124>)
   171a6:	4798      	blx	r3

    /* Check for failures */
    if(!wifi_is_ready())
   171a8:	4b3a      	ldr	r3, [pc, #232]	; (17294 <wifi_connect+0x11c>)
   171aa:	4798      	blx	r3
   171ac:	1e03      	subs	r3, r0, #0
   171ae:	d101      	bne.n	171b4 <wifi_connect+0x3c>
    {
        return status;
   171b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   171b2:	e06a      	b.n	1728a <wifi_connect+0x112>
    }

    // Create the socket
    new_socket = socket(AF_INET, SOCK_STREAM, 1);
   171b4:	2323      	movs	r3, #35	; 0x23
   171b6:	18fc      	adds	r4, r7, r3
   171b8:	2201      	movs	r2, #1
   171ba:	2101      	movs	r1, #1
   171bc:	2002      	movs	r0, #2
   171be:	4b38      	ldr	r3, [pc, #224]	; (172a0 <wifi_connect+0x128>)
   171c0:	4798      	blx	r3
   171c2:	0003      	movs	r3, r0
   171c4:	7023      	strb	r3, [r4, #0]
    if (new_socket < 0)
   171c6:	2323      	movs	r3, #35	; 0x23
   171c8:	18fb      	adds	r3, r7, r3
   171ca:	781b      	ldrb	r3, [r3, #0]
   171cc:	2b7f      	cmp	r3, #127	; 0x7f
   171ce:	d901      	bls.n	171d4 <wifi_connect+0x5c>
    {
        /* Failed to create the socket */
        return status;
   171d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   171d2:	e05a      	b.n	1728a <wifi_connect+0x112>
    }
        
    /* Set the socket information */
    socket_address.sin_family      = AF_INET;
   171d4:	2310      	movs	r3, #16
   171d6:	18fb      	adds	r3, r7, r3
   171d8:	2202      	movs	r2, #2
   171da:	801a      	strh	r2, [r3, #0]
    socket_address.sin_addr.s_addr = g_wifi_context.host;
   171dc:	4b31      	ldr	r3, [pc, #196]	; (172a4 <wifi_connect+0x12c>)
   171de:	68da      	ldr	r2, [r3, #12]
   171e0:	2310      	movs	r3, #16
   171e2:	18fb      	adds	r3, r7, r3
   171e4:	605a      	str	r2, [r3, #4]
    socket_address.sin_port        = _htons(port);
   171e6:	683b      	ldr	r3, [r7, #0]
   171e8:	b29b      	uxth	r3, r3
   171ea:	021b      	lsls	r3, r3, #8
   171ec:	b21a      	sxth	r2, r3
   171ee:	683b      	ldr	r3, [r7, #0]
   171f0:	b29b      	uxth	r3, r3
   171f2:	0a1b      	lsrs	r3, r3, #8
   171f4:	b29b      	uxth	r3, r3
   171f6:	b21b      	sxth	r3, r3
   171f8:	4313      	orrs	r3, r2
   171fa:	b21b      	sxth	r3, r3
   171fc:	b29a      	uxth	r2, r3
   171fe:	2310      	movs	r3, #16
   17200:	18fb      	adds	r3, r7, r3
   17202:	805a      	strh	r2, [r3, #2]

    optval = 1;
   17204:	2301      	movs	r3, #1
   17206:	60fb      	str	r3, [r7, #12]
    setsockopt(new_socket, SOL_SSL_SOCKET, SO_SSL_ENABLE_SESSION_CACHING,
   17208:	230c      	movs	r3, #12
   1720a:	18fa      	adds	r2, r7, r3
   1720c:	2323      	movs	r3, #35	; 0x23
   1720e:	18fb      	adds	r3, r7, r3
   17210:	2000      	movs	r0, #0
   17212:	5618      	ldrsb	r0, [r3, r0]
   17214:	2304      	movs	r3, #4
   17216:	9300      	str	r3, [sp, #0]
   17218:	0013      	movs	r3, r2
   1721a:	2203      	movs	r2, #3
   1721c:	2102      	movs	r1, #2
   1721e:	4c22      	ldr	r4, [pc, #136]	; (172a8 <wifi_connect+0x130>)
   17220:	47a0      	blx	r4
    setsockopt(new_socket, SOL_SSL_SOCKET, SO_SSL_BYPASS_X509_VERIF,
        &optval, sizeof(optval));
#endif

    /* Connect to the specified host */
    status = connect(new_socket, (struct sockaddr*)&socket_address,
   17222:	2310      	movs	r3, #16
   17224:	18f9      	adds	r1, r7, r3
   17226:	2323      	movs	r3, #35	; 0x23
   17228:	18fb      	adds	r3, r7, r3
   1722a:	781b      	ldrb	r3, [r3, #0]
   1722c:	b25b      	sxtb	r3, r3
   1722e:	2210      	movs	r2, #16
   17230:	0018      	movs	r0, r3
   17232:	4b1e      	ldr	r3, [pc, #120]	; (172ac <wifi_connect+0x134>)
   17234:	4798      	blx	r3
   17236:	0003      	movs	r3, r0
   17238:	627b      	str	r3, [r7, #36]	; 0x24
        sizeof(socket_address));
    if (status != SOCK_ERR_NO_ERROR)
   1723a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1723c:	2b00      	cmp	r3, #0
   1723e:	d008      	beq.n	17252 <wifi_connect+0xda>
    {
        /* Close the socket */
        close(new_socket);
   17240:	2323      	movs	r3, #35	; 0x23
   17242:	18fb      	adds	r3, r7, r3
   17244:	781b      	ldrb	r3, [r3, #0]
   17246:	b25b      	sxtb	r3, r3
   17248:	0018      	movs	r0, r3
   1724a:	4b19      	ldr	r3, [pc, #100]	; (172b0 <wifi_connect+0x138>)
   1724c:	4798      	blx	r3
        return status;
   1724e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   17250:	e01b      	b.n	1728a <wifi_connect+0x112>
    }

    /* */
    wifi_state_update(&g_wifi_context, WIFI_STATE_WAIT, WIFI_COUNTER_CONNECT_WAIT);
   17252:	4a18      	ldr	r2, [pc, #96]	; (172b4 <wifi_connect+0x13c>)
   17254:	4b13      	ldr	r3, [pc, #76]	; (172a4 <wifi_connect+0x12c>)
   17256:	2103      	movs	r1, #3
   17258:	0018      	movs	r0, r3
   1725a:	4b17      	ldr	r3, [pc, #92]	; (172b8 <wifi_connect+0x140>)
   1725c:	4798      	blx	r3

    /* Wait for the command to complete or timeout */
    wifi_task_block_until_done();
   1725e:	4b0f      	ldr	r3, [pc, #60]	; (1729c <wifi_connect+0x124>)
   17260:	4798      	blx	r3

    /* Check for failures */
    if(!wifi_is_ready())
   17262:	4b0c      	ldr	r3, [pc, #48]	; (17294 <wifi_connect+0x11c>)
   17264:	4798      	blx	r3
   17266:	1e03      	subs	r3, r0, #0
   17268:	d109      	bne.n	1727e <wifi_connect+0x106>
    {
        /* Close the socket */
        close(new_socket);
   1726a:	2323      	movs	r3, #35	; 0x23
   1726c:	18fb      	adds	r3, r7, r3
   1726e:	781b      	ldrb	r3, [r3, #0]
   17270:	b25b      	sxtb	r3, r3
   17272:	0018      	movs	r0, r3
   17274:	4b0e      	ldr	r3, [pc, #56]	; (172b0 <wifi_connect+0x138>)
   17276:	4798      	blx	r3
        return MQTTCLIENT_FAILURE;
   17278:	2301      	movs	r3, #1
   1727a:	425b      	negs	r3, r3
   1727c:	e005      	b.n	1728a <wifi_connect+0x112>
    }

    /* Save the socket for use */
    g_wifi_context.sock = new_socket;
   1727e:	4b09      	ldr	r3, [pc, #36]	; (172a4 <wifi_connect+0x12c>)
   17280:	2223      	movs	r2, #35	; 0x23
   17282:	18ba      	adds	r2, r7, r2
   17284:	7812      	ldrb	r2, [r2, #0]
   17286:	741a      	strb	r2, [r3, #16]

    return MQTTCLIENT_SUCCESS;
   17288:	2300      	movs	r3, #0
}
   1728a:	0018      	movs	r0, r3
   1728c:	46bd      	mov	sp, r7
   1728e:	b00b      	add	sp, #44	; 0x2c
   17290:	bd90      	pop	{r4, r7, pc}
   17292:	46c0      	nop			; (mov r8, r8)
   17294:	00016901 	.word	0x00016901
   17298:	00017129 	.word	0x00017129
   1729c:	000170d1 	.word	0x000170d1
   172a0:	0000b4dd 	.word	0x0000b4dd
   172a4:	200005d8 	.word	0x200005d8
   172a8:	0000bf85 	.word	0x0000bf85
   172ac:	0000b6ed 	.word	0x0000b6ed
   172b0:	0000bae5 	.word	0x0000bae5
   172b4:	00002710 	.word	0x00002710
   172b8:	00016955 	.word	0x00016955

000172bc <wifi_read_data>:

/* Read data from a socket - blocking call */
int wifi_read_data(uint8_t *read_buffer, uint32_t read_length, uint32_t timeout_ms)
{
   172bc:	b590      	push	{r4, r7, lr}
   172be:	b087      	sub	sp, #28
   172c0:	af00      	add	r7, sp, #0
   172c2:	60f8      	str	r0, [r7, #12]
   172c4:	60b9      	str	r1, [r7, #8]
   172c6:	607a      	str	r2, [r7, #4]
    int status = MQTTCLIENT_FAILURE;
   172c8:	2301      	movs	r3, #1
   172ca:	425b      	negs	r3, r3
   172cc:	617b      	str	r3, [r7, #20]
    
    if(!wifi_is_ready())
   172ce:	4b3e      	ldr	r3, [pc, #248]	; (173c8 <wifi_read_data+0x10c>)
   172d0:	4798      	blx	r3
   172d2:	1e03      	subs	r3, r0, #0
   172d4:	d101      	bne.n	172da <wifi_read_data+0x1e>
    {
        return status;
   172d6:	697b      	ldr	r3, [r7, #20]
   172d8:	e071      	b.n	173be <wifi_read_data+0x102>
    }

    if ((WIFI_BUFFER_SIZE - g_wifi_context.rxloc) >= read_length)
   172da:	4a3c      	ldr	r2, [pc, #240]	; (173cc <wifi_read_data+0x110>)
   172dc:	23be      	movs	r3, #190	; 0xbe
   172de:	00db      	lsls	r3, r3, #3
   172e0:	58d3      	ldr	r3, [r2, r3]
   172e2:	4a3b      	ldr	r2, [pc, #236]	; (173d0 <wifi_read_data+0x114>)
   172e4:	1ad2      	subs	r2, r2, r3
   172e6:	68bb      	ldr	r3, [r7, #8]
   172e8:	429a      	cmp	r2, r3
   172ea:	d31a      	bcc.n	17322 <wifi_read_data+0x66>
    {
        status = MQTTCLIENT_SUCCESS;
   172ec:	2300      	movs	r3, #0
   172ee:	617b      	str	r3, [r7, #20]

        /* Get the data from the existing received buffer */
        memcpy(&read_buffer[0], &g_wifi_context.rxbuf[g_wifi_context.rxloc], read_length);
   172f0:	4a36      	ldr	r2, [pc, #216]	; (173cc <wifi_read_data+0x110>)
   172f2:	23be      	movs	r3, #190	; 0xbe
   172f4:	00db      	lsls	r3, r3, #3
   172f6:	58d3      	ldr	r3, [r2, r3]
   172f8:	3310      	adds	r3, #16
   172fa:	001a      	movs	r2, r3
   172fc:	4b33      	ldr	r3, [pc, #204]	; (173cc <wifi_read_data+0x110>)
   172fe:	18d3      	adds	r3, r2, r3
   17300:	1c59      	adds	r1, r3, #1
   17302:	68ba      	ldr	r2, [r7, #8]
   17304:	68fb      	ldr	r3, [r7, #12]
   17306:	0018      	movs	r0, r3
   17308:	4b32      	ldr	r3, [pc, #200]	; (173d4 <wifi_read_data+0x118>)
   1730a:	4798      	blx	r3

        g_wifi_context.rxloc += read_length;
   1730c:	4a2f      	ldr	r2, [pc, #188]	; (173cc <wifi_read_data+0x110>)
   1730e:	23be      	movs	r3, #190	; 0xbe
   17310:	00db      	lsls	r3, r3, #3
   17312:	58d2      	ldr	r2, [r2, r3]
   17314:	68bb      	ldr	r3, [r7, #8]
   17316:	18d1      	adds	r1, r2, r3
   17318:	4a2c      	ldr	r2, [pc, #176]	; (173cc <wifi_read_data+0x110>)
   1731a:	23be      	movs	r3, #190	; 0xbe
   1731c:	00db      	lsls	r3, r3, #3
   1731e:	50d1      	str	r1, [r2, r3]
   17320:	e047      	b.n	173b2 <wifi_read_data+0xf6>
    }
    else
    {
        g_wifi_context.rxloc = 0;
   17322:	4a2a      	ldr	r2, [pc, #168]	; (173cc <wifi_read_data+0x110>)
   17324:	23be      	movs	r3, #190	; 0xbe
   17326:	00db      	lsls	r3, r3, #3
   17328:	2100      	movs	r1, #0
   1732a:	50d1      	str	r1, [r2, r3]
        memset(&g_wifi_context.rxbuf[0], 0, WIFI_BUFFER_SIZE);
   1732c:	4a28      	ldr	r2, [pc, #160]	; (173d0 <wifi_read_data+0x114>)
   1732e:	4b2a      	ldr	r3, [pc, #168]	; (173d8 <wifi_read_data+0x11c>)
   17330:	2100      	movs	r1, #0
   17332:	0018      	movs	r0, r3
   17334:	4b29      	ldr	r3, [pc, #164]	; (173dc <wifi_read_data+0x120>)
   17336:	4798      	blx	r3

        /* Receive the incoming message */
        if(MQTTCLIENT_SUCCESS != (status = recv(g_wifi_context.sock, g_wifi_context.rxbuf, WIFI_BUFFER_SIZE, timeout_ms)))
   17338:	4b24      	ldr	r3, [pc, #144]	; (173cc <wifi_read_data+0x110>)
   1733a:	2010      	movs	r0, #16
   1733c:	5618      	ldrsb	r0, [r3, r0]
   1733e:	687b      	ldr	r3, [r7, #4]
   17340:	4a23      	ldr	r2, [pc, #140]	; (173d0 <wifi_read_data+0x114>)
   17342:	4925      	ldr	r1, [pc, #148]	; (173d8 <wifi_read_data+0x11c>)
   17344:	4c26      	ldr	r4, [pc, #152]	; (173e0 <wifi_read_data+0x124>)
   17346:	47a0      	blx	r4
   17348:	0003      	movs	r3, r0
   1734a:	617b      	str	r3, [r7, #20]
   1734c:	697b      	ldr	r3, [r7, #20]
   1734e:	2b00      	cmp	r3, #0
   17350:	d001      	beq.n	17356 <wifi_read_data+0x9a>
        {
            return status;
   17352:	697b      	ldr	r3, [r7, #20]
   17354:	e033      	b.n	173be <wifi_read_data+0x102>
        }

        wifi_state_update(&g_wifi_context, WIFI_STATE_WAIT, timeout_ms + WIFI_UPDATE_PERIOD);
   17356:	687b      	ldr	r3, [r7, #4]
   17358:	3364      	adds	r3, #100	; 0x64
   1735a:	001a      	movs	r2, r3
   1735c:	4b1b      	ldr	r3, [pc, #108]	; (173cc <wifi_read_data+0x110>)
   1735e:	2103      	movs	r1, #3
   17360:	0018      	movs	r0, r3
   17362:	4b20      	ldr	r3, [pc, #128]	; (173e4 <wifi_read_data+0x128>)
   17364:	4798      	blx	r3

        /* Wait for the command to complete or timeout */
        wifi_task_block_until_done();
   17366:	4b20      	ldr	r3, [pc, #128]	; (173e8 <wifi_read_data+0x12c>)
   17368:	4798      	blx	r3

        /* Check for failures */
        if(!wifi_is_ready())
   1736a:	4b17      	ldr	r3, [pc, #92]	; (173c8 <wifi_read_data+0x10c>)
   1736c:	4798      	blx	r3
   1736e:	1e03      	subs	r3, r0, #0
   17370:	d10d      	bne.n	1738e <wifi_read_data+0xd2>
        {
            status = MQTTCLIENT_FAILURE;
   17372:	2301      	movs	r3, #1
   17374:	425b      	negs	r3, r3
   17376:	617b      	str	r3, [r7, #20]
            if(!wifi_has_error())
   17378:	4b1c      	ldr	r3, [pc, #112]	; (173ec <wifi_read_data+0x130>)
   1737a:	4798      	blx	r3
   1737c:	1e03      	subs	r3, r0, #0
   1737e:	d118      	bne.n	173b2 <wifi_read_data+0xf6>
            {
                /* Timed out but we aren't going to retry */
                wifi_state_update(&g_wifi_context, WIFI_STATE_READY, WIFI_COUNTER_NO_WAIT);
   17380:	4b12      	ldr	r3, [pc, #72]	; (173cc <wifi_read_data+0x110>)
   17382:	2200      	movs	r2, #0
   17384:	2104      	movs	r1, #4
   17386:	0018      	movs	r0, r3
   17388:	4b16      	ldr	r3, [pc, #88]	; (173e4 <wifi_read_data+0x128>)
   1738a:	4798      	blx	r3
   1738c:	e011      	b.n	173b2 <wifi_read_data+0xf6>
            }
        }
        else
        {
            status = MQTTCLIENT_SUCCESS;
   1738e:	2300      	movs	r3, #0
   17390:	617b      	str	r3, [r7, #20]
            memcpy(&read_buffer[0], &g_wifi_context.rxbuf[0], read_length);
   17392:	68ba      	ldr	r2, [r7, #8]
   17394:	4910      	ldr	r1, [pc, #64]	; (173d8 <wifi_read_data+0x11c>)
   17396:	68fb      	ldr	r3, [r7, #12]
   17398:	0018      	movs	r0, r3
   1739a:	4b0e      	ldr	r3, [pc, #56]	; (173d4 <wifi_read_data+0x118>)
   1739c:	4798      	blx	r3
            g_wifi_context.rxloc += read_length;
   1739e:	4a0b      	ldr	r2, [pc, #44]	; (173cc <wifi_read_data+0x110>)
   173a0:	23be      	movs	r3, #190	; 0xbe
   173a2:	00db      	lsls	r3, r3, #3
   173a4:	58d2      	ldr	r2, [r2, r3]
   173a6:	68bb      	ldr	r3, [r7, #8]
   173a8:	18d1      	adds	r1, r2, r3
   173aa:	4a08      	ldr	r2, [pc, #32]	; (173cc <wifi_read_data+0x110>)
   173ac:	23be      	movs	r3, #190	; 0xbe
   173ae:	00db      	lsls	r3, r3, #3
   173b0:	50d1      	str	r1, [r2, r3]
        }
    }
    
    return ((status == MQTTCLIENT_SUCCESS) ? (int)read_length : status);
   173b2:	697b      	ldr	r3, [r7, #20]
   173b4:	2b00      	cmp	r3, #0
   173b6:	d101      	bne.n	173bc <wifi_read_data+0x100>
   173b8:	68bb      	ldr	r3, [r7, #8]
   173ba:	e000      	b.n	173be <wifi_read_data+0x102>
   173bc:	697b      	ldr	r3, [r7, #20]
}
   173be:	0018      	movs	r0, r3
   173c0:	46bd      	mov	sp, r7
   173c2:	b007      	add	sp, #28
   173c4:	bd90      	pop	{r4, r7, pc}
   173c6:	46c0      	nop			; (mov r8, r8)
   173c8:	00016901 	.word	0x00016901
   173cc:	200005d8 	.word	0x200005d8
   173d0:	000005dc 	.word	0x000005dc
   173d4:	0001c13d 	.word	0x0001c13d
   173d8:	200005e9 	.word	0x200005e9
   173dc:	0001c173 	.word	0x0001c173
   173e0:	0000b965 	.word	0x0000b965
   173e4:	00016955 	.word	0x00016955
   173e8:	000170d1 	.word	0x000170d1
   173ec:	00016939 	.word	0x00016939

000173f0 <wifi_send_data>:

/* Send data to a socket - blocking call */
int wifi_send_data(uint8_t *send_buffer, uint32_t send_length, uint32_t timeout_ms)
{
   173f0:	b590      	push	{r4, r7, lr}
   173f2:	b087      	sub	sp, #28
   173f4:	af00      	add	r7, sp, #0
   173f6:	60f8      	str	r0, [r7, #12]
   173f8:	60b9      	str	r1, [r7, #8]
   173fa:	607a      	str	r2, [r7, #4]
    int status = MQTTCLIENT_FAILURE;
   173fc:	2301      	movs	r3, #1
   173fe:	425b      	negs	r3, r3
   17400:	617b      	str	r3, [r7, #20]
    
    if(!wifi_is_ready())
   17402:	4b1c      	ldr	r3, [pc, #112]	; (17474 <wifi_send_data+0x84>)
   17404:	4798      	blx	r3
   17406:	1e03      	subs	r3, r0, #0
   17408:	d101      	bne.n	1740e <wifi_send_data+0x1e>
    {
        return status;
   1740a:	697b      	ldr	r3, [r7, #20]
   1740c:	e02d      	b.n	1746a <wifi_send_data+0x7a>
    }

    status = send(g_wifi_context.sock, send_buffer, send_length, 0);
   1740e:	4b1a      	ldr	r3, [pc, #104]	; (17478 <wifi_send_data+0x88>)
   17410:	2010      	movs	r0, #16
   17412:	5618      	ldrsb	r0, [r3, r0]
   17414:	68bb      	ldr	r3, [r7, #8]
   17416:	b29a      	uxth	r2, r3
   17418:	68f9      	ldr	r1, [r7, #12]
   1741a:	2300      	movs	r3, #0
   1741c:	4c17      	ldr	r4, [pc, #92]	; (1747c <wifi_send_data+0x8c>)
   1741e:	47a0      	blx	r4
   17420:	0003      	movs	r3, r0
   17422:	617b      	str	r3, [r7, #20]
    g_wifi_context.txlen = send_length;
   17424:	4b14      	ldr	r3, [pc, #80]	; (17478 <wifi_send_data+0x88>)
   17426:	4916      	ldr	r1, [pc, #88]	; (17480 <wifi_send_data+0x90>)
   17428:	68ba      	ldr	r2, [r7, #8]
   1742a:	505a      	str	r2, [r3, r1]

    wifi_state_update(&g_wifi_context, WIFI_STATE_WAIT, WIFI_COUNTER_GET_TIME_WAIT);
   1742c:	4a15      	ldr	r2, [pc, #84]	; (17484 <wifi_send_data+0x94>)
   1742e:	4b12      	ldr	r3, [pc, #72]	; (17478 <wifi_send_data+0x88>)
   17430:	2103      	movs	r1, #3
   17432:	0018      	movs	r0, r3
   17434:	4b14      	ldr	r3, [pc, #80]	; (17488 <wifi_send_data+0x98>)
   17436:	4798      	blx	r3

    /* Wait for the command to complete or timeout */
    wifi_task_block_until_done();
   17438:	4b14      	ldr	r3, [pc, #80]	; (1748c <wifi_send_data+0x9c>)
   1743a:	4798      	blx	r3

    /* Check for failures */
    if(!wifi_is_ready())
   1743c:	4b0d      	ldr	r3, [pc, #52]	; (17474 <wifi_send_data+0x84>)
   1743e:	4798      	blx	r3
   17440:	1e03      	subs	r3, r0, #0
   17442:	d10c      	bne.n	1745e <wifi_send_data+0x6e>
    {
        status = MQTTCLIENT_FAILURE;
   17444:	2301      	movs	r3, #1
   17446:	425b      	negs	r3, r3
   17448:	617b      	str	r3, [r7, #20]
        if(!wifi_has_error())
   1744a:	4b11      	ldr	r3, [pc, #68]	; (17490 <wifi_send_data+0xa0>)
   1744c:	4798      	blx	r3
   1744e:	1e03      	subs	r3, r0, #0
   17450:	d105      	bne.n	1745e <wifi_send_data+0x6e>
        {
            /* Timed out but we aren't going to retry */
            wifi_state_update(&g_wifi_context, WIFI_STATE_READY, WIFI_COUNTER_NO_WAIT);
   17452:	4b09      	ldr	r3, [pc, #36]	; (17478 <wifi_send_data+0x88>)
   17454:	2200      	movs	r2, #0
   17456:	2104      	movs	r1, #4
   17458:	0018      	movs	r0, r3
   1745a:	4b0b      	ldr	r3, [pc, #44]	; (17488 <wifi_send_data+0x98>)
   1745c:	4798      	blx	r3
        }
    }
    
    return ((status == MQTTCLIENT_SUCCESS) ? (int)send_length : status);
   1745e:	697b      	ldr	r3, [r7, #20]
   17460:	2b00      	cmp	r3, #0
   17462:	d101      	bne.n	17468 <wifi_send_data+0x78>
   17464:	68bb      	ldr	r3, [r7, #8]
   17466:	e000      	b.n	1746a <wifi_send_data+0x7a>
   17468:	697b      	ldr	r3, [r7, #20]
}
   1746a:	0018      	movs	r0, r3
   1746c:	46bd      	mov	sp, r7
   1746e:	b007      	add	sp, #28
   17470:	bd90      	pop	{r4, r7, pc}
   17472:	46c0      	nop			; (mov r8, r8)
   17474:	00016901 	.word	0x00016901
   17478:	200005d8 	.word	0x200005d8
   1747c:	0000b801 	.word	0x0000b801
   17480:	000005f4 	.word	0x000005f4
   17484:	00002710 	.word	0x00002710
   17488:	00016955 	.word	0x00016955
   1748c:	000170d1 	.word	0x000170d1
   17490:	00016939 	.word	0x00016939

00017494 <get_speed_from_map>:

static uint16_t override_speed;
static uint32_t override_end;

static uint16_t get_speed_from_map(uint16_t temp)
{
   17494:	b580      	push	{r7, lr}
   17496:	b084      	sub	sp, #16
   17498:	af00      	add	r7, sp, #0
   1749a:	0002      	movs	r2, r0
   1749c:	1dbb      	adds	r3, r7, #6
   1749e:	801a      	strh	r2, [r3, #0]
    uint16_t i;
    uint16_t target;
    for(i=0; i < sizeof(g_temp_speed_map)/sizeof(g_temp_speed_map[0]); i += 2 )
   174a0:	230e      	movs	r3, #14
   174a2:	18fb      	adds	r3, r7, r3
   174a4:	2200      	movs	r2, #0
   174a6:	801a      	strh	r2, [r3, #0]
   174a8:	e01a      	b.n	174e0 <get_speed_from_map+0x4c>
    {
        if(temp > g_temp_speed_map[i])
   174aa:	230e      	movs	r3, #14
   174ac:	18fb      	adds	r3, r7, r3
   174ae:	881a      	ldrh	r2, [r3, #0]
   174b0:	4b11      	ldr	r3, [pc, #68]	; (174f8 <get_speed_from_map+0x64>)
   174b2:	0052      	lsls	r2, r2, #1
   174b4:	5ad3      	ldrh	r3, [r2, r3]
   174b6:	1dba      	adds	r2, r7, #6
   174b8:	8812      	ldrh	r2, [r2, #0]
   174ba:	429a      	cmp	r2, r3
   174bc:	d909      	bls.n	174d2 <get_speed_from_map+0x3e>
        {
            target = g_temp_speed_map[i+1];
   174be:	230e      	movs	r3, #14
   174c0:	18fb      	adds	r3, r7, r3
   174c2:	881b      	ldrh	r3, [r3, #0]
   174c4:	1c59      	adds	r1, r3, #1
   174c6:	230c      	movs	r3, #12
   174c8:	18fb      	adds	r3, r7, r3
   174ca:	4a0b      	ldr	r2, [pc, #44]	; (174f8 <get_speed_from_map+0x64>)
   174cc:	0049      	lsls	r1, r1, #1
   174ce:	5a8a      	ldrh	r2, [r1, r2]
   174d0:	801a      	strh	r2, [r3, #0]
    for(i=0; i < sizeof(g_temp_speed_map)/sizeof(g_temp_speed_map[0]); i += 2 )
   174d2:	230e      	movs	r3, #14
   174d4:	18fb      	adds	r3, r7, r3
   174d6:	220e      	movs	r2, #14
   174d8:	18ba      	adds	r2, r7, r2
   174da:	8812      	ldrh	r2, [r2, #0]
   174dc:	3202      	adds	r2, #2
   174de:	801a      	strh	r2, [r3, #0]
   174e0:	230e      	movs	r3, #14
   174e2:	18fb      	adds	r3, r7, r3
   174e4:	881b      	ldrh	r3, [r3, #0]
   174e6:	2b0d      	cmp	r3, #13
   174e8:	d9df      	bls.n	174aa <get_speed_from_map+0x16>
        }
    }
    return target;
   174ea:	230c      	movs	r3, #12
   174ec:	18fb      	adds	r3, r7, r3
   174ee:	881b      	ldrh	r3, [r3, #0]
}
   174f0:	0018      	movs	r0, r3
   174f2:	46bd      	mov	sp, r7
   174f4:	b004      	add	sp, #16
   174f6:	bd80      	pop	{r7, pc}
   174f8:	200001d4 	.word	0x200001d4

000174fc <update_settings_from_json>:

#ifdef CONFIG_USE_JSON_LIB
bool update_settings_from_json(JSON_Array * json_map)
{
   174fc:	b590      	push	{r4, r7, lr}
   174fe:	b085      	sub	sp, #20
   17500:	af00      	add	r7, sp, #0
   17502:	6078      	str	r0, [r7, #4]
    JSON_Array * json_array_element = NULL;
   17504:	2300      	movs	r3, #0
   17506:	60bb      	str	r3, [r7, #8]
    uint8_t i;

    for(i=0; i< json_array_get_count(json_map); i++)
   17508:	230f      	movs	r3, #15
   1750a:	18fb      	adds	r3, r7, r3
   1750c:	2200      	movs	r2, #0
   1750e:	701a      	strb	r2, [r3, #0]
   17510:	e039      	b.n	17586 <update_settings_from_json+0x8a>
    {
        json_array_element = json_array_get_array(json_map,i);
   17512:	230f      	movs	r3, #15
   17514:	18fb      	adds	r3, r7, r3
   17516:	781a      	ldrb	r2, [r3, #0]
   17518:	687b      	ldr	r3, [r7, #4]
   1751a:	0011      	movs	r1, r2
   1751c:	0018      	movs	r0, r3
   1751e:	4b2f      	ldr	r3, [pc, #188]	; (175dc <update_settings_from_json+0xe0>)
   17520:	4798      	blx	r3
   17522:	0003      	movs	r3, r0
   17524:	60bb      	str	r3, [r7, #8]
        g_temp_speed_map[i*2] = json_array_get_number(json_array_element, 0);
   17526:	230f      	movs	r3, #15
   17528:	18fb      	adds	r3, r7, r3
   1752a:	781b      	ldrb	r3, [r3, #0]
   1752c:	005c      	lsls	r4, r3, #1
   1752e:	68bb      	ldr	r3, [r7, #8]
   17530:	2100      	movs	r1, #0
   17532:	0018      	movs	r0, r3
   17534:	4b2a      	ldr	r3, [pc, #168]	; (175e0 <update_settings_from_json+0xe4>)
   17536:	4798      	blx	r3
   17538:	000a      	movs	r2, r1
   1753a:	0001      	movs	r1, r0
   1753c:	4b29      	ldr	r3, [pc, #164]	; (175e4 <update_settings_from_json+0xe8>)
   1753e:	0008      	movs	r0, r1
   17540:	0011      	movs	r1, r2
   17542:	4798      	blx	r3
   17544:	0003      	movs	r3, r0
   17546:	b299      	uxth	r1, r3
   17548:	4b27      	ldr	r3, [pc, #156]	; (175e8 <update_settings_from_json+0xec>)
   1754a:	0062      	lsls	r2, r4, #1
   1754c:	52d1      	strh	r1, [r2, r3]
        g_temp_speed_map[i*2+1] = json_array_get_number(json_array_element, 1);
   1754e:	230f      	movs	r3, #15
   17550:	18fb      	adds	r3, r7, r3
   17552:	781b      	ldrb	r3, [r3, #0]
   17554:	005b      	lsls	r3, r3, #1
   17556:	1c5c      	adds	r4, r3, #1
   17558:	68bb      	ldr	r3, [r7, #8]
   1755a:	2101      	movs	r1, #1
   1755c:	0018      	movs	r0, r3
   1755e:	4b20      	ldr	r3, [pc, #128]	; (175e0 <update_settings_from_json+0xe4>)
   17560:	4798      	blx	r3
   17562:	000a      	movs	r2, r1
   17564:	0001      	movs	r1, r0
   17566:	4b1f      	ldr	r3, [pc, #124]	; (175e4 <update_settings_from_json+0xe8>)
   17568:	0008      	movs	r0, r1
   1756a:	0011      	movs	r1, r2
   1756c:	4798      	blx	r3
   1756e:	0003      	movs	r3, r0
   17570:	b299      	uxth	r1, r3
   17572:	4b1d      	ldr	r3, [pc, #116]	; (175e8 <update_settings_from_json+0xec>)
   17574:	0062      	lsls	r2, r4, #1
   17576:	52d1      	strh	r1, [r2, r3]
    for(i=0; i< json_array_get_count(json_map); i++)
   17578:	230f      	movs	r3, #15
   1757a:	18fb      	adds	r3, r7, r3
   1757c:	781a      	ldrb	r2, [r3, #0]
   1757e:	230f      	movs	r3, #15
   17580:	18fb      	adds	r3, r7, r3
   17582:	3201      	adds	r2, #1
   17584:	701a      	strb	r2, [r3, #0]
   17586:	230f      	movs	r3, #15
   17588:	18fb      	adds	r3, r7, r3
   1758a:	781c      	ldrb	r4, [r3, #0]
   1758c:	687b      	ldr	r3, [r7, #4]
   1758e:	0018      	movs	r0, r3
   17590:	4b16      	ldr	r3, [pc, #88]	; (175ec <update_settings_from_json+0xf0>)
   17592:	4798      	blx	r3
   17594:	0003      	movs	r3, r0
   17596:	429c      	cmp	r4, r3
   17598:	d3bb      	bcc.n	17512 <update_settings_from_json+0x16>
    }
    for(i=i*2;i < sizeof(g_temp_speed_map)/2; i+= 2)
   1759a:	230f      	movs	r3, #15
   1759c:	18fa      	adds	r2, r7, r3
   1759e:	230f      	movs	r3, #15
   175a0:	18fb      	adds	r3, r7, r3
   175a2:	781b      	ldrb	r3, [r3, #0]
   175a4:	18db      	adds	r3, r3, r3
   175a6:	7013      	strb	r3, [r2, #0]
   175a8:	e00e      	b.n	175c8 <update_settings_from_json+0xcc>
    {
        g_temp_speed_map[i] = UINT16_MAX;
   175aa:	230f      	movs	r3, #15
   175ac:	18fb      	adds	r3, r7, r3
   175ae:	781a      	ldrb	r2, [r3, #0]
   175b0:	4b0d      	ldr	r3, [pc, #52]	; (175e8 <update_settings_from_json+0xec>)
   175b2:	0052      	lsls	r2, r2, #1
   175b4:	2101      	movs	r1, #1
   175b6:	4249      	negs	r1, r1
   175b8:	52d1      	strh	r1, [r2, r3]
    for(i=i*2;i < sizeof(g_temp_speed_map)/2; i+= 2)
   175ba:	230f      	movs	r3, #15
   175bc:	18fb      	adds	r3, r7, r3
   175be:	220f      	movs	r2, #15
   175c0:	18ba      	adds	r2, r7, r2
   175c2:	7812      	ldrb	r2, [r2, #0]
   175c4:	3202      	adds	r2, #2
   175c6:	701a      	strb	r2, [r3, #0]
   175c8:	230f      	movs	r3, #15
   175ca:	18fb      	adds	r3, r7, r3
   175cc:	781b      	ldrb	r3, [r3, #0]
   175ce:	2b0d      	cmp	r3, #13
   175d0:	d9eb      	bls.n	175aa <update_settings_from_json+0xae>
    }
}
   175d2:	46c0      	nop			; (mov r8, r8)
   175d4:	0018      	movs	r0, r3
   175d6:	46bd      	mov	sp, r7
   175d8:	b005      	add	sp, #20
   175da:	bd90      	pop	{r4, r7, pc}
   175dc:	00015ba9 	.word	0x00015ba9
   175e0:	00015b75 	.word	0x00015b75
   175e4:	0001a111 	.word	0x0001a111
   175e8:	200001d4 	.word	0x200001d4
   175ec:	00015bd9 	.word	0x00015bd9

000175f0 <override_from_json>:

bool override_from_json(JSON_Object * json_override_object)
{
   175f0:	b5f0      	push	{r4, r5, r6, r7, lr}
   175f2:	b083      	sub	sp, #12
   175f4:	af00      	add	r7, sp, #0
   175f6:	6078      	str	r0, [r7, #4]

    override_speed = json_object_get_number(json_override_object, "fan-speed");
   175f8:	4a19      	ldr	r2, [pc, #100]	; (17660 <override_from_json+0x70>)
   175fa:	687b      	ldr	r3, [r7, #4]
   175fc:	0011      	movs	r1, r2
   175fe:	0018      	movs	r0, r3
   17600:	4b18      	ldr	r3, [pc, #96]	; (17664 <override_from_json+0x74>)
   17602:	4798      	blx	r3
   17604:	000a      	movs	r2, r1
   17606:	0001      	movs	r1, r0
   17608:	4b17      	ldr	r3, [pc, #92]	; (17668 <override_from_json+0x78>)
   1760a:	0008      	movs	r0, r1
   1760c:	0011      	movs	r1, r2
   1760e:	4798      	blx	r3
   17610:	0003      	movs	r3, r0
   17612:	b29a      	uxth	r2, r3
   17614:	4b15      	ldr	r3, [pc, #84]	; (1766c <override_from_json+0x7c>)
   17616:	801a      	strh	r2, [r3, #0]
    override_end = time_utils_get_utc() + json_object_get_number(json_override_object, "duration");
   17618:	4b15      	ldr	r3, [pc, #84]	; (17670 <override_from_json+0x80>)
   1761a:	4798      	blx	r3
   1761c:	0002      	movs	r2, r0
   1761e:	4b15      	ldr	r3, [pc, #84]	; (17674 <override_from_json+0x84>)
   17620:	0010      	movs	r0, r2
   17622:	4798      	blx	r3
   17624:	0005      	movs	r5, r0
   17626:	000e      	movs	r6, r1
   17628:	4a13      	ldr	r2, [pc, #76]	; (17678 <override_from_json+0x88>)
   1762a:	687b      	ldr	r3, [r7, #4]
   1762c:	0011      	movs	r1, r2
   1762e:	0018      	movs	r0, r3
   17630:	4b0c      	ldr	r3, [pc, #48]	; (17664 <override_from_json+0x74>)
   17632:	4798      	blx	r3
   17634:	0002      	movs	r2, r0
   17636:	000b      	movs	r3, r1
   17638:	4c10      	ldr	r4, [pc, #64]	; (1767c <override_from_json+0x8c>)
   1763a:	0028      	movs	r0, r5
   1763c:	0031      	movs	r1, r6
   1763e:	47a0      	blx	r4
   17640:	0003      	movs	r3, r0
   17642:	000c      	movs	r4, r1
   17644:	0019      	movs	r1, r3
   17646:	0022      	movs	r2, r4
   17648:	4b07      	ldr	r3, [pc, #28]	; (17668 <override_from_json+0x78>)
   1764a:	0008      	movs	r0, r1
   1764c:	0011      	movs	r1, r2
   1764e:	4798      	blx	r3
   17650:	0002      	movs	r2, r0
   17652:	4b0b      	ldr	r3, [pc, #44]	; (17680 <override_from_json+0x90>)
   17654:	601a      	str	r2, [r3, #0]
}
   17656:	46c0      	nop			; (mov r8, r8)
   17658:	0018      	movs	r0, r3
   1765a:	46bd      	mov	sp, r7
   1765c:	b003      	add	sp, #12
   1765e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   17660:	00021638 	.word	0x00021638
   17664:	00015a89 	.word	0x00015a89
   17668:	0001a111 	.word	0x0001a111
   1766c:	20000bd0 	.word	0x20000bd0
   17670:	0001661d 	.word	0x0001661d
   17674:	0001bbed 	.word	0x0001bbed
   17678:	00021644 	.word	0x00021644
   1767c:	0001a14d 	.word	0x0001a14d
   17680:	20000bd4 	.word	0x20000bd4

00017684 <sensor_get_temperature>:
        *buffer = ']';
    }
}

uint32_t sensor_get_temperature(void)
{
   17684:	b580      	push	{r7, lr}
   17686:	af00      	add	r7, sp, #0
#ifdef CONFIG_SENSOR_SIMULATOR
	if (24000 > g_temp_buffer[0] || 30000 < g_temp_buffer[0])
   17688:	4b0d      	ldr	r3, [pc, #52]	; (176c0 <sensor_get_temperature+0x3c>)
   1768a:	881b      	ldrh	r3, [r3, #0]
   1768c:	4a0d      	ldr	r2, [pc, #52]	; (176c4 <sensor_get_temperature+0x40>)
   1768e:	4293      	cmp	r3, r2
   17690:	d904      	bls.n	1769c <sensor_get_temperature+0x18>
   17692:	4b0b      	ldr	r3, [pc, #44]	; (176c0 <sensor_get_temperature+0x3c>)
   17694:	881b      	ldrh	r3, [r3, #0]
   17696:	4a0c      	ldr	r2, [pc, #48]	; (176c8 <sensor_get_temperature+0x44>)
   17698:	4293      	cmp	r3, r2
   1769a:	d903      	bls.n	176a4 <sensor_get_temperature+0x20>
	{
		g_temp_buffer[0] = 24000;
   1769c:	4b08      	ldr	r3, [pc, #32]	; (176c0 <sensor_get_temperature+0x3c>)
   1769e:	4a0b      	ldr	r2, [pc, #44]	; (176cc <sensor_get_temperature+0x48>)
   176a0:	801a      	strh	r2, [r3, #0]
   176a2:	e008      	b.n	176b6 <sensor_get_temperature+0x32>
	}
	else
	{
		g_temp_buffer[0] += 1000;
   176a4:	4b06      	ldr	r3, [pc, #24]	; (176c0 <sensor_get_temperature+0x3c>)
   176a6:	881b      	ldrh	r3, [r3, #0]
   176a8:	22fa      	movs	r2, #250	; 0xfa
   176aa:	0092      	lsls	r2, r2, #2
   176ac:	4694      	mov	ip, r2
   176ae:	4463      	add	r3, ip
   176b0:	b29a      	uxth	r2, r3
   176b2:	4b03      	ldr	r3, [pc, #12]	; (176c0 <sensor_get_temperature+0x3c>)
   176b4:	801a      	strh	r2, [r3, #0]
	}
	return g_temp_buffer[0];
   176b6:	4b02      	ldr	r3, [pc, #8]	; (176c0 <sensor_get_temperature+0x3c>)
   176b8:	881b      	ldrh	r3, [r3, #0]
#else
	return th5_read_sensor(0);
#endif
}
   176ba:	0018      	movs	r0, r3
   176bc:	46bd      	mov	sp, r7
   176be:	bd80      	pop	{r7, pc}
   176c0:	20000bd8 	.word	0x20000bd8
   176c4:	00005dbf 	.word	0x00005dbf
   176c8:	00007530 	.word	0x00007530
   176cc:	00005dc0 	.word	0x00005dc0

000176d0 <sensor_get_fan_speed>:

uint16_t sensor_get_fan_speed(void)
{
   176d0:	b580      	push	{r7, lr}
   176d2:	af00      	add	r7, sp, #0
#ifdef CONFIG_SENSOR_SIMULATOR
	return get_speed_from_map(g_temp_buffer[0]);
   176d4:	4b04      	ldr	r3, [pc, #16]	; (176e8 <sensor_get_fan_speed+0x18>)
   176d6:	881b      	ldrh	r3, [r3, #0]
   176d8:	0018      	movs	r0, r3
   176da:	4b04      	ldr	r3, [pc, #16]	; (176ec <sensor_get_fan_speed+0x1c>)
   176dc:	4798      	blx	r3
   176de:	0003      	movs	r3, r0
#else
	return fan_click_get_tach();
#endif
}
   176e0:	0018      	movs	r0, r3
   176e2:	46bd      	mov	sp, r7
   176e4:	bd80      	pop	{r7, pc}
   176e6:	46c0      	nop			; (mov r8, r8)
   176e8:	20000bd8 	.word	0x20000bd8
   176ec:	00017495 	.word	0x00017495

000176f0 <sensor_task>:

 void sensor_task(void)
{
   176f0:	b580      	push	{r7, lr}
   176f2:	af00      	add	r7, sp, #0
    }

    /* Set new target */
    fan_click_set_target_tach(speed);
#endif
   176f4:	46c0      	nop			; (mov r8, r8)
   176f6:	46bd      	mov	sp, r7
   176f8:	bd80      	pop	{r7, pc}
	...

000176fc <usb_hid_init>:

/**
 * \brief Initializes the USB HID interface.
 */
void usb_hid_init(void)
{
   176fc:	b580      	push	{r7, lr}
   176fe:	af00      	add	r7, sp, #0
    // Start the USB device stack
    udc_start();
   17700:	4b02      	ldr	r3, [pc, #8]	; (1770c <usb_hid_init+0x10>)
   17702:	4798      	blx	r3
}
   17704:	46c0      	nop			; (mov r8, r8)
   17706:	46bd      	mov	sp, r7
   17708:	bd80      	pop	{r7, pc}
   1770a:	46c0      	nop			; (mov r8, r8)
   1770c:	00000c75 	.word	0x00000c75

00017710 <usb_send_response_message>:

bool usb_send_response_message(uint8_t *response, uint16_t response_length)
{
   17710:	b590      	push	{r4, r7, lr}
   17712:	b095      	sub	sp, #84	; 0x54
   17714:	af00      	add	r7, sp, #0
   17716:	6078      	str	r0, [r7, #4]
   17718:	000a      	movs	r2, r1
   1771a:	1cbb      	adds	r3, r7, #2
   1771c:	801a      	strh	r2, [r3, #0]
    bool usb_report_sent = false;
   1771e:	234f      	movs	r3, #79	; 0x4f
   17720:	18fb      	adds	r3, r7, r3
   17722:	2200      	movs	r2, #0
   17724:	701a      	strb	r2, [r3, #0]
    uint16_t current_response_location = 0;
   17726:	234c      	movs	r3, #76	; 0x4c
   17728:	18fb      	adds	r3, r7, r3
   1772a:	2200      	movs	r2, #0
   1772c:	801a      	strh	r2, [r3, #0]
    uint8_t usb_report[UDI_HID_REPORT_OUT_SIZE];
    uint8_t usb_report_length = 0;
   1772e:	234a      	movs	r3, #74	; 0x4a
   17730:	18fb      	adds	r3, r7, r3
   17732:	2200      	movs	r2, #0
   17734:	701a      	strb	r2, [r3, #0]
    uint8_t send_retries = 5;
   17736:	234b      	movs	r3, #75	; 0x4b
   17738:	18fb      	adds	r3, r7, r3
   1773a:	2205      	movs	r2, #5
   1773c:	701a      	strb	r2, [r3, #0]
    
    if (response == NULL)
   1773e:	687b      	ldr	r3, [r7, #4]
   17740:	2b00      	cmp	r3, #0
   17742:	d166      	bne.n	17812 <usb_send_response_message+0x102>
    {
        return false;
   17744:	2300      	movs	r3, #0
   17746:	e06d      	b.n	17824 <usb_send_response_message+0x114>

    // Send the USB response message
    while (response_length > 0)
    {
        // Create the USB report
        usb_report_length = min(UDI_HID_REPORT_OUT_SIZE, response_length);
   17748:	1cbb      	adds	r3, r7, #2
   1774a:	881b      	ldrh	r3, [r3, #0]
   1774c:	2b40      	cmp	r3, #64	; 0x40
   1774e:	d803      	bhi.n	17758 <usb_send_response_message+0x48>
   17750:	1cbb      	adds	r3, r7, #2
   17752:	881b      	ldrh	r3, [r3, #0]
   17754:	b2da      	uxtb	r2, r3
   17756:	e000      	b.n	1775a <usb_send_response_message+0x4a>
   17758:	2240      	movs	r2, #64	; 0x40
   1775a:	234a      	movs	r3, #74	; 0x4a
   1775c:	18fb      	adds	r3, r7, r3
   1775e:	701a      	strb	r2, [r3, #0]
        
        memset(&usb_report[0], 0, sizeof(usb_report));
   17760:	2308      	movs	r3, #8
   17762:	18fb      	adds	r3, r7, r3
   17764:	2240      	movs	r2, #64	; 0x40
   17766:	2100      	movs	r1, #0
   17768:	0018      	movs	r0, r3
   1776a:	4b30      	ldr	r3, [pc, #192]	; (1782c <usb_send_response_message+0x11c>)
   1776c:	4798      	blx	r3
        memcpy(&usb_report[0], &response[current_response_location], 
   1776e:	234c      	movs	r3, #76	; 0x4c
   17770:	18fb      	adds	r3, r7, r3
   17772:	881b      	ldrh	r3, [r3, #0]
   17774:	687a      	ldr	r2, [r7, #4]
   17776:	18d1      	adds	r1, r2, r3
   17778:	234a      	movs	r3, #74	; 0x4a
   1777a:	18fb      	adds	r3, r7, r3
   1777c:	781a      	ldrb	r2, [r3, #0]
   1777e:	2308      	movs	r3, #8
   17780:	18fb      	adds	r3, r7, r3
   17782:	0018      	movs	r0, r3
   17784:	4b2a      	ldr	r3, [pc, #168]	; (17830 <usb_send_response_message+0x120>)
   17786:	4798      	blx	r3
               usb_report_length);
        
        usb_report_sent = udi_hid_generic_send_report_in(usb_report);
   17788:	234f      	movs	r3, #79	; 0x4f
   1778a:	18fc      	adds	r4, r7, r3
   1778c:	2308      	movs	r3, #8
   1778e:	18fb      	adds	r3, r7, r3
   17790:	0018      	movs	r0, r3
   17792:	4b28      	ldr	r3, [pc, #160]	; (17834 <usb_send_response_message+0x124>)
   17794:	4798      	blx	r3
   17796:	0003      	movs	r3, r0
   17798:	7023      	strb	r3, [r4, #0]
        if (usb_report_sent == true)
   1779a:	234f      	movs	r3, #79	; 0x4f
   1779c:	18fb      	adds	r3, r7, r3
   1779e:	781b      	ldrb	r3, [r3, #0]
   177a0:	2b00      	cmp	r3, #0
   177a2:	d01d      	beq.n	177e0 <usb_send_response_message+0xd0>
        {
            current_response_location += usb_report_length;
   177a4:	234a      	movs	r3, #74	; 0x4a
   177a6:	18fb      	adds	r3, r7, r3
   177a8:	781b      	ldrb	r3, [r3, #0]
   177aa:	b299      	uxth	r1, r3
   177ac:	234c      	movs	r3, #76	; 0x4c
   177ae:	18fb      	adds	r3, r7, r3
   177b0:	224c      	movs	r2, #76	; 0x4c
   177b2:	18ba      	adds	r2, r7, r2
   177b4:	8812      	ldrh	r2, [r2, #0]
   177b6:	188a      	adds	r2, r1, r2
   177b8:	801a      	strh	r2, [r3, #0]
            response_length -= usb_report_length;            
   177ba:	234a      	movs	r3, #74	; 0x4a
   177bc:	18fb      	adds	r3, r7, r3
   177be:	781b      	ldrb	r3, [r3, #0]
   177c0:	b29a      	uxth	r2, r3
   177c2:	1cbb      	adds	r3, r7, #2
   177c4:	1cb9      	adds	r1, r7, #2
   177c6:	8809      	ldrh	r1, [r1, #0]
   177c8:	1a8a      	subs	r2, r1, r2
   177ca:	801a      	strh	r2, [r3, #0]

            // Delay for 50ms
            delay_ms(USB_DELAY);
   177cc:	2032      	movs	r0, #50	; 0x32
   177ce:	4b1a      	ldr	r3, [pc, #104]	; (17838 <usb_send_response_message+0x128>)
   177d0:	4798      	blx	r3
   177d2:	234b      	movs	r3, #75	; 0x4b
   177d4:	18fb      	adds	r3, r7, r3
   177d6:	224b      	movs	r2, #75	; 0x4b
   177d8:	18ba      	adds	r2, r7, r2
   177da:	7812      	ldrb	r2, [r2, #0]
   177dc:	701a      	strb	r2, [r3, #0]
   177de:	e018      	b.n	17812 <usb_send_response_message+0x102>
        }
        else
        {
            if (send_retries > 0)
   177e0:	234b      	movs	r3, #75	; 0x4b
   177e2:	18fb      	adds	r3, r7, r3
   177e4:	781b      	ldrb	r3, [r3, #0]
   177e6:	2b00      	cmp	r3, #0
   177e8:	d018      	beq.n	1781c <usb_send_response_message+0x10c>
            {
                // Delay for 50ms
                delay_ms(USB_DELAY);
   177ea:	2032      	movs	r0, #50	; 0x32
   177ec:	4b12      	ldr	r3, [pc, #72]	; (17838 <usb_send_response_message+0x128>)
   177ee:	4798      	blx	r3
                
                // Decrement the send retries
                send_retries--; 
   177f0:	234b      	movs	r3, #75	; 0x4b
   177f2:	18fb      	adds	r3, r7, r3
   177f4:	781a      	ldrb	r2, [r3, #0]
   177f6:	234b      	movs	r3, #75	; 0x4b
   177f8:	18fb      	adds	r3, r7, r3
   177fa:	3a01      	subs	r2, #1
   177fc:	701a      	strb	r2, [r3, #0]
   177fe:	1cbb      	adds	r3, r7, #2
   17800:	1cba      	adds	r2, r7, #2
   17802:	8812      	ldrh	r2, [r2, #0]
   17804:	801a      	strh	r2, [r3, #0]
   17806:	234c      	movs	r3, #76	; 0x4c
   17808:	18fb      	adds	r3, r7, r3
   1780a:	224c      	movs	r2, #76	; 0x4c
   1780c:	18ba      	adds	r2, r7, r2
   1780e:	8812      	ldrh	r2, [r2, #0]
   17810:	801a      	strh	r2, [r3, #0]
    while (response_length > 0)
   17812:	1cbb      	adds	r3, r7, #2
   17814:	881b      	ldrh	r3, [r3, #0]
   17816:	2b00      	cmp	r3, #0
   17818:	d196      	bne.n	17748 <usb_send_response_message+0x38>
   1781a:	e000      	b.n	1781e <usb_send_response_message+0x10e>
            }
            else
            {
                // Break the while loop
                break;
   1781c:	46c0      	nop			; (mov r8, r8)
            }
        }  
    }
    
    return usb_report_sent;
   1781e:	234f      	movs	r3, #79	; 0x4f
   17820:	18fb      	adds	r3, r7, r3
   17822:	781b      	ldrb	r3, [r3, #0]
}
   17824:	0018      	movs	r0, r3
   17826:	46bd      	mov	sp, r7
   17828:	b015      	add	sp, #84	; 0x54
   1782a:	bd90      	pop	{r4, r7, pc}
   1782c:	0001c173 	.word	0x0001c173
   17830:	0001c13d 	.word	0x0001c13d
   17834:	000006c9 	.word	0x000006c9
   17838:	00000539 	.word	0x00000539

0001783c <usb_hid_enable_callback>:
 * \return    Whether the USB interface should be enabled
 *                TRUE  - The USB interface should be enabled
 *                FALSE - The USB interface should not be enabled
 */
bool usb_hid_enable_callback(void)
{
   1783c:	b580      	push	{r7, lr}
   1783e:	af00      	add	r7, sp, #0
    return true;
   17840:	2301      	movs	r3, #1
}
   17842:	0018      	movs	r0, r3
   17844:	46bd      	mov	sp, r7
   17846:	bd80      	pop	{r7, pc}

00017848 <usb_hid_disable_callback>:

/**
 * \brief Callback called when the USB host disables the USB interface.
 */
void usb_hid_disable_callback(void)
{
   17848:	b580      	push	{r7, lr}
   1784a:	af00      	add	r7, sp, #0
}
   1784c:	46c0      	nop			; (mov r8, r8)
   1784e:	46bd      	mov	sp, r7
   17850:	bd80      	pop	{r7, pc}

00017852 <usb_hid_wakeup_callback>:

/**
 * \brief Callback called when the USB endpoint wakeup event occurs.
 */
void usb_hid_wakeup_callback(void)
{
   17852:	b580      	push	{r7, lr}
   17854:	af00      	add	r7, sp, #0
}
   17856:	46c0      	nop			; (mov r8, r8)
   17858:	46bd      	mov	sp, r7
   1785a:	bd80      	pop	{r7, pc}

0001785c <usb_hid_report_out_callback>:
 * \brief Handles the incoming USB report.
 *
 * \param[in] report                The incoming USB report
 */
void usb_hid_report_out_callback(uint8_t *report)
{
   1785c:	b580      	push	{r7, lr}
   1785e:	b084      	sub	sp, #16
   17860:	af00      	add	r7, sp, #0
   17862:	6078      	str	r0, [r7, #4]
    // Handle incoming USB report
    uint8_t * pRxBuf = atca_kit_get_rx_buffer();
   17864:	4b19      	ldr	r3, [pc, #100]	; (178cc <usb_hid_report_out_callback+0x70>)
   17866:	4798      	blx	r3
   17868:	0003      	movs	r3, r0
   1786a:	60bb      	str	r3, [r7, #8]

    for (uint32_t index = 0; index < UDI_HID_REPORT_OUT_SIZE; index++)
   1786c:	2300      	movs	r3, #0
   1786e:	60fb      	str	r3, [r7, #12]
   17870:	e025      	b.n	178be <usb_hid_report_out_callback+0x62>
    {
        // Save the incoming USB packet
        pRxBuf[g_usb_buffer_length] = report[index];
   17872:	4b17      	ldr	r3, [pc, #92]	; (178d0 <usb_hid_report_out_callback+0x74>)
   17874:	881b      	ldrh	r3, [r3, #0]
   17876:	001a      	movs	r2, r3
   17878:	68bb      	ldr	r3, [r7, #8]
   1787a:	189b      	adds	r3, r3, r2
   1787c:	6879      	ldr	r1, [r7, #4]
   1787e:	68fa      	ldr	r2, [r7, #12]
   17880:	188a      	adds	r2, r1, r2
   17882:	7812      	ldrb	r2, [r2, #0]
   17884:	701a      	strb	r2, [r3, #0]
        g_usb_buffer_length++;
   17886:	4b12      	ldr	r3, [pc, #72]	; (178d0 <usb_hid_report_out_callback+0x74>)
   17888:	881b      	ldrh	r3, [r3, #0]
   1788a:	3301      	adds	r3, #1
   1788c:	b29a      	uxth	r2, r3
   1788e:	4b10      	ldr	r3, [pc, #64]	; (178d0 <usb_hid_report_out_callback+0x74>)
   17890:	801a      	strh	r2, [r3, #0]

        // Check if the USB message was received
        if (report[index] == USB_MESSAGE_DELIMITER)
   17892:	687a      	ldr	r2, [r7, #4]
   17894:	68fb      	ldr	r3, [r7, #12]
   17896:	18d3      	adds	r3, r2, r3
   17898:	781b      	ldrb	r3, [r3, #0]
   1789a:	2b0a      	cmp	r3, #10
   1789c:	d10c      	bne.n	178b8 <usb_hid_report_out_callback+0x5c>
        {
            pRxBuf[g_usb_buffer_length] = 0;
   1789e:	4b0c      	ldr	r3, [pc, #48]	; (178d0 <usb_hid_report_out_callback+0x74>)
   178a0:	881b      	ldrh	r3, [r3, #0]
   178a2:	001a      	movs	r2, r3
   178a4:	68bb      	ldr	r3, [r7, #8]
   178a6:	189b      	adds	r3, r3, r2
   178a8:	2200      	movs	r2, #0
   178aa:	701a      	strb	r2, [r3, #0]
            g_usb_message_received++;
   178ac:	4b09      	ldr	r3, [pc, #36]	; (178d4 <usb_hid_report_out_callback+0x78>)
   178ae:	681b      	ldr	r3, [r3, #0]
   178b0:	1c5a      	adds	r2, r3, #1
   178b2:	4b08      	ldr	r3, [pc, #32]	; (178d4 <usb_hid_report_out_callback+0x78>)
   178b4:	601a      	str	r2, [r3, #0]
            break;
   178b6:	e005      	b.n	178c4 <usb_hid_report_out_callback+0x68>
    for (uint32_t index = 0; index < UDI_HID_REPORT_OUT_SIZE; index++)
   178b8:	68fb      	ldr	r3, [r7, #12]
   178ba:	3301      	adds	r3, #1
   178bc:	60fb      	str	r3, [r7, #12]
   178be:	68fb      	ldr	r3, [r7, #12]
   178c0:	2b3f      	cmp	r3, #63	; 0x3f
   178c2:	d9d6      	bls.n	17872 <usb_hid_report_out_callback+0x16>
        }
    }
}
   178c4:	46c0      	nop			; (mov r8, r8)
   178c6:	46bd      	mov	sp, r7
   178c8:	b004      	add	sp, #16
   178ca:	bd80      	pop	{r7, pc}
   178cc:	000187a5 	.word	0x000187a5
   178d0:	20000be0 	.word	0x20000be0
   178d4:	20002bf4 	.word	0x20002bf4

000178d8 <usb_hid_set_feature_callback>:
 * \brief Handles the incoming USB feature request.
 *
 * \param[in] report                The incoming USB report
 */
void usb_hid_set_feature_callback(uint8_t *report)
{
   178d8:	b580      	push	{r7, lr}
   178da:	b082      	sub	sp, #8
   178dc:	af00      	add	r7, sp, #0
   178de:	6078      	str	r0, [r7, #4]
    // Do nothing with the incoming feature request
}
   178e0:	46c0      	nop			; (mov r8, r8)
   178e2:	46bd      	mov	sp, r7
   178e4:	b002      	add	sp, #8
   178e6:	bd80      	pop	{r7, pc}

000178e8 <system_pinmux_get_group_from_gpio_pin>:
{
   178e8:	b580      	push	{r7, lr}
   178ea:	b084      	sub	sp, #16
   178ec:	af00      	add	r7, sp, #0
   178ee:	0002      	movs	r2, r0
   178f0:	1dfb      	adds	r3, r7, #7
   178f2:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
   178f4:	230f      	movs	r3, #15
   178f6:	18fb      	adds	r3, r7, r3
   178f8:	1dfa      	adds	r2, r7, #7
   178fa:	7812      	ldrb	r2, [r2, #0]
   178fc:	09d2      	lsrs	r2, r2, #7
   178fe:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
   17900:	230e      	movs	r3, #14
   17902:	18fb      	adds	r3, r7, r3
   17904:	1dfa      	adds	r2, r7, #7
   17906:	7812      	ldrb	r2, [r2, #0]
   17908:	0952      	lsrs	r2, r2, #5
   1790a:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
   1790c:	4b0d      	ldr	r3, [pc, #52]	; (17944 <system_pinmux_get_group_from_gpio_pin+0x5c>)
   1790e:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
   17910:	230f      	movs	r3, #15
   17912:	18fb      	adds	r3, r7, r3
   17914:	781b      	ldrb	r3, [r3, #0]
   17916:	2b00      	cmp	r3, #0
   17918:	d10f      	bne.n	1793a <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
   1791a:	230f      	movs	r3, #15
   1791c:	18fb      	adds	r3, r7, r3
   1791e:	781b      	ldrb	r3, [r3, #0]
   17920:	009b      	lsls	r3, r3, #2
   17922:	2210      	movs	r2, #16
   17924:	4694      	mov	ip, r2
   17926:	44bc      	add	ip, r7
   17928:	4463      	add	r3, ip
   1792a:	3b08      	subs	r3, #8
   1792c:	681a      	ldr	r2, [r3, #0]
   1792e:	230e      	movs	r3, #14
   17930:	18fb      	adds	r3, r7, r3
   17932:	781b      	ldrb	r3, [r3, #0]
   17934:	01db      	lsls	r3, r3, #7
   17936:	18d3      	adds	r3, r2, r3
   17938:	e000      	b.n	1793c <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
   1793a:	2300      	movs	r3, #0
}
   1793c:	0018      	movs	r0, r3
   1793e:	46bd      	mov	sp, r7
   17940:	b004      	add	sp, #16
   17942:	bd80      	pop	{r7, pc}
   17944:	41004400 	.word	0x41004400

00017948 <port_get_group_from_gpio_pin>:
{
   17948:	b580      	push	{r7, lr}
   1794a:	b082      	sub	sp, #8
   1794c:	af00      	add	r7, sp, #0
   1794e:	0002      	movs	r2, r0
   17950:	1dfb      	adds	r3, r7, #7
   17952:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
   17954:	1dfb      	adds	r3, r7, #7
   17956:	781b      	ldrb	r3, [r3, #0]
   17958:	0018      	movs	r0, r3
   1795a:	4b03      	ldr	r3, [pc, #12]	; (17968 <port_get_group_from_gpio_pin+0x20>)
   1795c:	4798      	blx	r3
   1795e:	0003      	movs	r3, r0
}
   17960:	0018      	movs	r0, r3
   17962:	46bd      	mov	sp, r7
   17964:	b002      	add	sp, #8
   17966:	bd80      	pop	{r7, pc}
   17968:	000178e9 	.word	0x000178e9

0001796c <port_pin_set_output_level>:
{
   1796c:	b580      	push	{r7, lr}
   1796e:	b084      	sub	sp, #16
   17970:	af00      	add	r7, sp, #0
   17972:	0002      	movs	r2, r0
   17974:	1dfb      	adds	r3, r7, #7
   17976:	701a      	strb	r2, [r3, #0]
   17978:	1dbb      	adds	r3, r7, #6
   1797a:	1c0a      	adds	r2, r1, #0
   1797c:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
   1797e:	1dfb      	adds	r3, r7, #7
   17980:	781b      	ldrb	r3, [r3, #0]
   17982:	0018      	movs	r0, r3
   17984:	4b0d      	ldr	r3, [pc, #52]	; (179bc <port_pin_set_output_level+0x50>)
   17986:	4798      	blx	r3
   17988:	0003      	movs	r3, r0
   1798a:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   1798c:	1dfb      	adds	r3, r7, #7
   1798e:	781b      	ldrb	r3, [r3, #0]
   17990:	221f      	movs	r2, #31
   17992:	4013      	ands	r3, r2
   17994:	2201      	movs	r2, #1
   17996:	409a      	lsls	r2, r3
   17998:	0013      	movs	r3, r2
   1799a:	60bb      	str	r3, [r7, #8]
	if (level) {
   1799c:	1dbb      	adds	r3, r7, #6
   1799e:	781b      	ldrb	r3, [r3, #0]
   179a0:	2b00      	cmp	r3, #0
   179a2:	d003      	beq.n	179ac <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
   179a4:	68fb      	ldr	r3, [r7, #12]
   179a6:	68ba      	ldr	r2, [r7, #8]
   179a8:	619a      	str	r2, [r3, #24]
}
   179aa:	e002      	b.n	179b2 <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
   179ac:	68fb      	ldr	r3, [r7, #12]
   179ae:	68ba      	ldr	r2, [r7, #8]
   179b0:	615a      	str	r2, [r3, #20]
}
   179b2:	46c0      	nop			; (mov r8, r8)
   179b4:	46bd      	mov	sp, r7
   179b6:	b004      	add	sp, #16
   179b8:	bd80      	pop	{r7, pc}
   179ba:	46c0      	nop			; (mov r8, r8)
   179bc:	00017949 	.word	0x00017949

000179c0 <tiny_state_init>:
{
   179c0:	b580      	push	{r7, lr}
   179c2:	b084      	sub	sp, #16
   179c4:	af00      	add	r7, sp, #0
   179c6:	60f8      	str	r0, [r7, #12]
   179c8:	60b9      	str	r1, [r7, #8]
   179ca:	0019      	movs	r1, r3
   179cc:	1dbb      	adds	r3, r7, #6
   179ce:	801a      	strh	r2, [r3, #0]
   179d0:	1d3b      	adds	r3, r7, #4
   179d2:	1c0a      	adds	r2, r1, #0
   179d4:	801a      	strh	r2, [r3, #0]
    ((tiny_state_ctx*)context)->states = states;
   179d6:	68fb      	ldr	r3, [r7, #12]
   179d8:	68ba      	ldr	r2, [r7, #8]
   179da:	605a      	str	r2, [r3, #4]
    ((tiny_state_ctx*)context)->count = count;
   179dc:	68fb      	ldr	r3, [r7, #12]
   179de:	1dba      	adds	r2, r7, #6
   179e0:	8812      	ldrh	r2, [r2, #0]
   179e2:	805a      	strh	r2, [r3, #2]
    ((tiny_state_ctx*)context)->state = initial;
   179e4:	68fb      	ldr	r3, [r7, #12]
   179e6:	1d3a      	adds	r2, r7, #4
   179e8:	8812      	ldrh	r2, [r2, #0]
   179ea:	801a      	strh	r2, [r3, #0]
}
   179ec:	46c0      	nop			; (mov r8, r8)
   179ee:	46bd      	mov	sp, r7
   179f0:	b004      	add	sp, #16
   179f2:	bd80      	pop	{r7, pc}

000179f4 <tiny_state_find>:
{
   179f4:	b580      	push	{r7, lr}
   179f6:	b084      	sub	sp, #16
   179f8:	af00      	add	r7, sp, #0
   179fa:	6078      	str	r0, [r7, #4]
   179fc:	0008      	movs	r0, r1
   179fe:	0011      	movs	r1, r2
   17a00:	1cbb      	adds	r3, r7, #2
   17a02:	1c02      	adds	r2, r0, #0
   17a04:	801a      	strh	r2, [r3, #0]
   17a06:	003b      	movs	r3, r7
   17a08:	1c0a      	adds	r2, r1, #0
   17a0a:	801a      	strh	r2, [r3, #0]
    for(i=0;i<count;i++)
   17a0c:	230e      	movs	r3, #14
   17a0e:	18fb      	adds	r3, r7, r3
   17a10:	2200      	movs	r2, #0
   17a12:	801a      	strh	r2, [r3, #0]
   17a14:	e020      	b.n	17a58 <tiny_state_find+0x64>
        if(states[i]._s == state)
   17a16:	230e      	movs	r3, #14
   17a18:	18fb      	adds	r3, r7, r3
   17a1a:	881a      	ldrh	r2, [r3, #0]
   17a1c:	0013      	movs	r3, r2
   17a1e:	005b      	lsls	r3, r3, #1
   17a20:	189b      	adds	r3, r3, r2
   17a22:	009b      	lsls	r3, r3, #2
   17a24:	001a      	movs	r2, r3
   17a26:	687b      	ldr	r3, [r7, #4]
   17a28:	189b      	adds	r3, r3, r2
   17a2a:	681a      	ldr	r2, [r3, #0]
   17a2c:	003b      	movs	r3, r7
   17a2e:	881b      	ldrh	r3, [r3, #0]
   17a30:	429a      	cmp	r2, r3
   17a32:	d10a      	bne.n	17a4a <tiny_state_find+0x56>
            return &states[i];
   17a34:	230e      	movs	r3, #14
   17a36:	18fb      	adds	r3, r7, r3
   17a38:	881a      	ldrh	r2, [r3, #0]
   17a3a:	0013      	movs	r3, r2
   17a3c:	005b      	lsls	r3, r3, #1
   17a3e:	189b      	adds	r3, r3, r2
   17a40:	009b      	lsls	r3, r3, #2
   17a42:	001a      	movs	r2, r3
   17a44:	687b      	ldr	r3, [r7, #4]
   17a46:	189b      	adds	r3, r3, r2
   17a48:	e00e      	b.n	17a68 <tiny_state_find+0x74>
    for(i=0;i<count;i++)
   17a4a:	230e      	movs	r3, #14
   17a4c:	18fb      	adds	r3, r7, r3
   17a4e:	881a      	ldrh	r2, [r3, #0]
   17a50:	230e      	movs	r3, #14
   17a52:	18fb      	adds	r3, r7, r3
   17a54:	3201      	adds	r2, #1
   17a56:	801a      	strh	r2, [r3, #0]
   17a58:	230e      	movs	r3, #14
   17a5a:	18fa      	adds	r2, r7, r3
   17a5c:	1cbb      	adds	r3, r7, #2
   17a5e:	8812      	ldrh	r2, [r2, #0]
   17a60:	881b      	ldrh	r3, [r3, #0]
   17a62:	429a      	cmp	r2, r3
   17a64:	d3d7      	bcc.n	17a16 <tiny_state_find+0x22>
    return NULL;
   17a66:	2300      	movs	r3, #0
}
   17a68:	0018      	movs	r0, r3
   17a6a:	46bd      	mov	sp, r7
   17a6c:	b004      	add	sp, #16
   17a6e:	bd80      	pop	{r7, pc}

00017a70 <tiny_state_driver>:
{
   17a70:	b580      	push	{r7, lr}
   17a72:	b084      	sub	sp, #16
   17a74:	af00      	add	r7, sp, #0
   17a76:	6078      	str	r0, [r7, #4]
    tiny_state_ctx * pCtx = (tiny_state_ctx*)context;
   17a78:	687b      	ldr	r3, [r7, #4]
   17a7a:	60fb      	str	r3, [r7, #12]
    tiny_state_def * pState = tiny_state_find(pCtx->states, pCtx->count, pCtx->state);
   17a7c:	68fb      	ldr	r3, [r7, #12]
   17a7e:	6858      	ldr	r0, [r3, #4]
   17a80:	68fb      	ldr	r3, [r7, #12]
   17a82:	8859      	ldrh	r1, [r3, #2]
   17a84:	68fb      	ldr	r3, [r7, #12]
   17a86:	881b      	ldrh	r3, [r3, #0]
   17a88:	001a      	movs	r2, r3
   17a8a:	4b0a      	ldr	r3, [pc, #40]	; (17ab4 <tiny_state_driver+0x44>)
   17a8c:	4798      	blx	r3
   17a8e:	0003      	movs	r3, r0
   17a90:	60bb      	str	r3, [r7, #8]
    if(pState && pState->_f)
   17a92:	68bb      	ldr	r3, [r7, #8]
   17a94:	2b00      	cmp	r3, #0
   17a96:	d008      	beq.n	17aaa <tiny_state_driver+0x3a>
   17a98:	68bb      	ldr	r3, [r7, #8]
   17a9a:	689b      	ldr	r3, [r3, #8]
   17a9c:	2b00      	cmp	r3, #0
   17a9e:	d004      	beq.n	17aaa <tiny_state_driver+0x3a>
        pState->_f(context);
   17aa0:	68bb      	ldr	r3, [r7, #8]
   17aa2:	689b      	ldr	r3, [r3, #8]
   17aa4:	687a      	ldr	r2, [r7, #4]
   17aa6:	0010      	movs	r0, r2
   17aa8:	4798      	blx	r3
}
   17aaa:	46c0      	nop			; (mov r8, r8)
   17aac:	46bd      	mov	sp, r7
   17aae:	b004      	add	sp, #16
   17ab0:	bd80      	pop	{r7, pc}
   17ab2:	46c0      	nop			; (mov r8, r8)
   17ab4:	000179f5 	.word	0x000179f5

00017ab8 <tiny_state_update>:
{
   17ab8:	b580      	push	{r7, lr}
   17aba:	b082      	sub	sp, #8
   17abc:	af00      	add	r7, sp, #0
   17abe:	6078      	str	r0, [r7, #4]
   17ac0:	6039      	str	r1, [r7, #0]
    ((tiny_state_ctx*)context)->state = next;
   17ac2:	683b      	ldr	r3, [r7, #0]
   17ac4:	b29a      	uxth	r2, r3
   17ac6:	687b      	ldr	r3, [r7, #4]
   17ac8:	801a      	strh	r2, [r3, #0]
}
   17aca:	46c0      	nop			; (mov r8, r8)
   17acc:	46bd      	mov	sp, r7
   17ace:	b002      	add	sp, #8
   17ad0:	bd80      	pop	{r7, pc}

00017ad2 <client_counter_finished>:
    uint16_t            update_period;
} g_client_context;

/* Helper functions */
static bool client_counter_finished(void* pCtx)
{
   17ad2:	b580      	push	{r7, lr}
   17ad4:	b084      	sub	sp, #16
   17ad6:	af00      	add	r7, sp, #0
   17ad8:	6078      	str	r0, [r7, #4]
    struct _g_client_context* ctx = (struct _g_client_context*)pCtx;
   17ada:	687b      	ldr	r3, [r7, #4]
   17adc:	60fb      	str	r3, [r7, #12]

    return (0 == ctx->holdoff);
   17ade:	68fb      	ldr	r3, [r7, #12]
   17ae0:	689b      	ldr	r3, [r3, #8]
   17ae2:	425a      	negs	r2, r3
   17ae4:	4153      	adcs	r3, r2
   17ae6:	b2db      	uxtb	r3, r3
}
   17ae8:	0018      	movs	r0, r3
   17aea:	46bd      	mov	sp, r7
   17aec:	b004      	add	sp, #16
   17aee:	bd80      	pop	{r7, pc}

00017af0 <client_counter_set>:

static void client_counter_set(void* pCtx, uint32_t val)
{
   17af0:	b580      	push	{r7, lr}
   17af2:	b084      	sub	sp, #16
   17af4:	af00      	add	r7, sp, #0
   17af6:	6078      	str	r0, [r7, #4]
   17af8:	6039      	str	r1, [r7, #0]
    struct _g_client_context* ctx = (struct _g_client_context*)pCtx;
   17afa:	687b      	ldr	r3, [r7, #4]
   17afc:	60fb      	str	r3, [r7, #12]

    /* Convert to loop time*/
    ctx->holdoff = val / CLIENT_UPDATE_PERIOD;
   17afe:	683a      	ldr	r2, [r7, #0]
   17b00:	4b0a      	ldr	r3, [pc, #40]	; (17b2c <client_counter_set+0x3c>)
   17b02:	2164      	movs	r1, #100	; 0x64
   17b04:	0010      	movs	r0, r2
   17b06:	4798      	blx	r3
   17b08:	0003      	movs	r3, r0
   17b0a:	001a      	movs	r2, r3
   17b0c:	68fb      	ldr	r3, [r7, #12]
   17b0e:	609a      	str	r2, [r3, #8]

    if(val && !ctx->holdoff)
   17b10:	683b      	ldr	r3, [r7, #0]
   17b12:	2b00      	cmp	r3, #0
   17b14:	d006      	beq.n	17b24 <client_counter_set+0x34>
   17b16:	68fb      	ldr	r3, [r7, #12]
   17b18:	689b      	ldr	r3, [r3, #8]
   17b1a:	2b00      	cmp	r3, #0
   17b1c:	d102      	bne.n	17b24 <client_counter_set+0x34>
    {
        ctx->holdoff = 1;
   17b1e:	68fb      	ldr	r3, [r7, #12]
   17b20:	2201      	movs	r2, #1
   17b22:	609a      	str	r2, [r3, #8]
    }
}
   17b24:	46c0      	nop			; (mov r8, r8)
   17b26:	46bd      	mov	sp, r7
   17b28:	b004      	add	sp, #16
   17b2a:	bd80      	pop	{r7, pc}
   17b2c:	00019cd9 	.word	0x00019cd9

00017b30 <client_timer_update>:

/* Must be called on the CLIENT_UPDATE_PERIOD */
void client_timer_update(void)
{
   17b30:	b580      	push	{r7, lr}
   17b32:	af00      	add	r7, sp, #0
    if(g_client_context.holdoff)
   17b34:	4b05      	ldr	r3, [pc, #20]	; (17b4c <client_timer_update+0x1c>)
   17b36:	689b      	ldr	r3, [r3, #8]
   17b38:	2b00      	cmp	r3, #0
   17b3a:	d004      	beq.n	17b46 <client_timer_update+0x16>
    {
        g_client_context.holdoff--;
   17b3c:	4b03      	ldr	r3, [pc, #12]	; (17b4c <client_timer_update+0x1c>)
   17b3e:	689b      	ldr	r3, [r3, #8]
   17b40:	1e5a      	subs	r2, r3, #1
   17b42:	4b02      	ldr	r3, [pc, #8]	; (17b4c <client_timer_update+0x1c>)
   17b44:	609a      	str	r2, [r3, #8]
    }
}
   17b46:	46c0      	nop			; (mov r8, r8)
   17b48:	46bd      	mov	sp, r7
   17b4a:	bd80      	pop	{r7, pc}
   17b4c:	20000be4 	.word	0x20000be4

00017b50 <client_get_message_id>:

/** \brief Get a unique message id - Simply implemented as a counter */
static uint16_t client_get_message_id(void)
{
   17b50:	b580      	push	{r7, lr}
   17b52:	af00      	add	r7, sp, #0
    static uint16_t message_id = 0;

    message_id++;
   17b54:	4b09      	ldr	r3, [pc, #36]	; (17b7c <client_get_message_id+0x2c>)
   17b56:	881b      	ldrh	r3, [r3, #0]
   17b58:	3301      	adds	r3, #1
   17b5a:	b29a      	uxth	r2, r3
   17b5c:	4b07      	ldr	r3, [pc, #28]	; (17b7c <client_get_message_id+0x2c>)
   17b5e:	801a      	strh	r2, [r3, #0]
    
    if (message_id == (UINT16_MAX - 1))
   17b60:	4b06      	ldr	r3, [pc, #24]	; (17b7c <client_get_message_id+0x2c>)
   17b62:	881b      	ldrh	r3, [r3, #0]
   17b64:	4a06      	ldr	r2, [pc, #24]	; (17b80 <client_get_message_id+0x30>)
   17b66:	4293      	cmp	r3, r2
   17b68:	d102      	bne.n	17b70 <client_get_message_id+0x20>
    {
        message_id = 1;
   17b6a:	4b04      	ldr	r3, [pc, #16]	; (17b7c <client_get_message_id+0x2c>)
   17b6c:	2201      	movs	r2, #1
   17b6e:	801a      	strh	r2, [r3, #0]
    }

    return message_id;
   17b70:	4b02      	ldr	r3, [pc, #8]	; (17b7c <client_get_message_id+0x2c>)
   17b72:	881b      	ldrh	r3, [r3, #0]
}
   17b74:	0018      	movs	r0, r3
   17b76:	46bd      	mov	sp, r7
   17b78:	bd80      	pop	{r7, pc}
   17b7a:	46c0      	nop			; (mov r8, r8)
   17b7c:	200014bc 	.word	0x200014bc
   17b80:	0000fffe 	.word	0x0000fffe

00017b84 <client_publish_message>:

/** \brief Publish a telemetry event */
static void client_publish_message(MQTTClient* mqtt_client)
{
   17b84:	b5f0      	push	{r4, r5, r6, r7, lr}
   17b86:	b0e9      	sub	sp, #420	; 0x1a4
   17b88:	af04      	add	r7, sp, #16
   17b8a:	6078      	str	r0, [r7, #4]
    int status = MQTTCLIENT_FAILURE;
   17b8c:	2301      	movs	r3, #1
   17b8e:	425b      	negs	r3, r3
   17b90:	22c6      	movs	r2, #198	; 0xc6
   17b92:	0052      	lsls	r2, r2, #1
   17b94:	18ba      	adds	r2, r7, r2
   17b96:	6013      	str	r3, [r2, #0]
    MQTTMessage message;
    char json_message[256];
    uint32_t ts = time_utils_get_utc();
   17b98:	4b4b      	ldr	r3, [pc, #300]	; (17cc8 <client_publish_message+0x144>)
   17b9a:	4798      	blx	r3
   17b9c:	0003      	movs	r3, r0
   17b9e:	22c4      	movs	r2, #196	; 0xc4
   17ba0:	0052      	lsls	r2, r2, #1
   17ba2:	18ba      	adds	r2, r7, r2
   17ba4:	6013      	str	r3, [r2, #0]
    uint32_t temp = sensor_get_temperature();
   17ba6:	4b49      	ldr	r3, [pc, #292]	; (17ccc <client_publish_message+0x148>)
   17ba8:	4798      	blx	r3
   17baa:	0003      	movs	r3, r0
   17bac:	22c2      	movs	r2, #194	; 0xc2
   17bae:	0052      	lsls	r2, r2, #1
   17bb0:	18ba      	adds	r2, r7, r2
   17bb2:	6013      	str	r3, [r2, #0]
    uint32_t speed = sensor_get_fan_speed();
   17bb4:	4b46      	ldr	r3, [pc, #280]	; (17cd0 <client_publish_message+0x14c>)
   17bb6:	4798      	blx	r3
   17bb8:	0003      	movs	r3, r0
   17bba:	22c0      	movs	r2, #192	; 0xc0
   17bbc:	0052      	lsls	r2, r2, #1
   17bbe:	18ba      	adds	r2, r7, r2
   17bc0:	6013      	str	r3, [r2, #0]
    char topic[100];

    if(config_get_client_pub_topic(topic, sizeof(topic)))
   17bc2:	230c      	movs	r3, #12
   17bc4:	18fb      	adds	r3, r7, r3
   17bc6:	2164      	movs	r1, #100	; 0x64
   17bc8:	0018      	movs	r0, r3
   17bca:	4b42      	ldr	r3, [pc, #264]	; (17cd4 <client_publish_message+0x150>)
   17bcc:	4798      	blx	r3
   17bce:	1e03      	subs	r3, r0, #0
   17bd0:	d004      	beq.n	17bdc <client_publish_message+0x58>
    {
        CLIENT_PRINTF("Failed to get topic string");
   17bd2:	4b41      	ldr	r3, [pc, #260]	; (17cd8 <client_publish_message+0x154>)
   17bd4:	0018      	movs	r0, r3
   17bd6:	4b41      	ldr	r3, [pc, #260]	; (17cdc <client_publish_message+0x158>)
   17bd8:	4798      	blx	r3
   17bda:	e071      	b.n	17cc0 <client_publish_message+0x13c>
        return;
    }

    snprintf(json_message, sizeof(json_message), "{ \"timestamp\": %u, \"temperature\": %d.%02d, \"fan-speed\": %d }", ts, temp/1000, temp % 1000,  speed);
   17bdc:	23c2      	movs	r3, #194	; 0xc2
   17bde:	005b      	lsls	r3, r3, #1
   17be0:	18fb      	adds	r3, r7, r3
   17be2:	6818      	ldr	r0, [r3, #0]
   17be4:	4b3e      	ldr	r3, [pc, #248]	; (17ce0 <client_publish_message+0x15c>)
   17be6:	22fa      	movs	r2, #250	; 0xfa
   17be8:	0091      	lsls	r1, r2, #2
   17bea:	4798      	blx	r3
   17bec:	0003      	movs	r3, r0
   17bee:	001d      	movs	r5, r3
   17bf0:	23c2      	movs	r3, #194	; 0xc2
   17bf2:	005b      	lsls	r3, r3, #1
   17bf4:	18fb      	adds	r3, r7, r3
   17bf6:	6818      	ldr	r0, [r3, #0]
   17bf8:	4b3a      	ldr	r3, [pc, #232]	; (17ce4 <client_publish_message+0x160>)
   17bfa:	22fa      	movs	r2, #250	; 0xfa
   17bfc:	0091      	lsls	r1, r2, #2
   17bfe:	4798      	blx	r3
   17c00:	000b      	movs	r3, r1
   17c02:	001e      	movs	r6, r3
   17c04:	23c4      	movs	r3, #196	; 0xc4
   17c06:	005b      	lsls	r3, r3, #1
   17c08:	18fb      	adds	r3, r7, r3
   17c0a:	681c      	ldr	r4, [r3, #0]
   17c0c:	4a36      	ldr	r2, [pc, #216]	; (17ce8 <client_publish_message+0x164>)
   17c0e:	2380      	movs	r3, #128	; 0x80
   17c10:	0059      	lsls	r1, r3, #1
   17c12:	2370      	movs	r3, #112	; 0x70
   17c14:	18f8      	adds	r0, r7, r3
   17c16:	23c0      	movs	r3, #192	; 0xc0
   17c18:	005b      	lsls	r3, r3, #1
   17c1a:	18fb      	adds	r3, r7, r3
   17c1c:	681b      	ldr	r3, [r3, #0]
   17c1e:	9302      	str	r3, [sp, #8]
   17c20:	9601      	str	r6, [sp, #4]
   17c22:	9500      	str	r5, [sp, #0]
   17c24:	0023      	movs	r3, r4
   17c26:	4c31      	ldr	r4, [pc, #196]	; (17cec <client_publish_message+0x168>)
   17c28:	47a0      	blx	r4

    message.qos      = QOS1;
   17c2a:	23b8      	movs	r3, #184	; 0xb8
   17c2c:	005b      	lsls	r3, r3, #1
   17c2e:	18fb      	adds	r3, r7, r3
   17c30:	2201      	movs	r2, #1
   17c32:	701a      	strb	r2, [r3, #0]
    message.retained = 0;
   17c34:	23b8      	movs	r3, #184	; 0xb8
   17c36:	005b      	lsls	r3, r3, #1
   17c38:	18fb      	adds	r3, r7, r3
   17c3a:	2200      	movs	r2, #0
   17c3c:	705a      	strb	r2, [r3, #1]
    message.dup      = 0;
   17c3e:	23b8      	movs	r3, #184	; 0xb8
   17c40:	005b      	lsls	r3, r3, #1
   17c42:	18fb      	adds	r3, r7, r3
   17c44:	2200      	movs	r2, #0
   17c46:	709a      	strb	r2, [r3, #2]
    message.id       = client_get_message_id();
   17c48:	4b29      	ldr	r3, [pc, #164]	; (17cf0 <client_publish_message+0x16c>)
   17c4a:	4798      	blx	r3
   17c4c:	0003      	movs	r3, r0
   17c4e:	001a      	movs	r2, r3
   17c50:	23b8      	movs	r3, #184	; 0xb8
   17c52:	005b      	lsls	r3, r3, #1
   17c54:	18fb      	adds	r3, r7, r3
   17c56:	809a      	strh	r2, [r3, #4]
    
    message.payload = (void*)json_message;
   17c58:	23b8      	movs	r3, #184	; 0xb8
   17c5a:	005b      	lsls	r3, r3, #1
   17c5c:	18fb      	adds	r3, r7, r3
   17c5e:	2270      	movs	r2, #112	; 0x70
   17c60:	18ba      	adds	r2, r7, r2
   17c62:	609a      	str	r2, [r3, #8]
    message.payloadlen = strlen(json_message);
   17c64:	2370      	movs	r3, #112	; 0x70
   17c66:	18fb      	adds	r3, r7, r3
   17c68:	0018      	movs	r0, r3
   17c6a:	4b22      	ldr	r3, [pc, #136]	; (17cf4 <client_publish_message+0x170>)
   17c6c:	4798      	blx	r3
   17c6e:	0002      	movs	r2, r0
   17c70:	23b8      	movs	r3, #184	; 0xb8
   17c72:	005b      	lsls	r3, r3, #1
   17c74:	18fb      	adds	r3, r7, r3
   17c76:	60da      	str	r2, [r3, #12]

    CLIENT_PRINTF("Publishing MQTT Message %s\r\n", json_message);
   17c78:	2370      	movs	r3, #112	; 0x70
   17c7a:	18fa      	adds	r2, r7, r3
   17c7c:	4b1e      	ldr	r3, [pc, #120]	; (17cf8 <client_publish_message+0x174>)
   17c7e:	0011      	movs	r1, r2
   17c80:	0018      	movs	r0, r3
   17c82:	4b16      	ldr	r3, [pc, #88]	; (17cdc <client_publish_message+0x158>)
   17c84:	4798      	blx	r3

    status = MQTTPublish(mqtt_client, topic, &message);
   17c86:	23b8      	movs	r3, #184	; 0xb8
   17c88:	005b      	lsls	r3, r3, #1
   17c8a:	18fa      	adds	r2, r7, r3
   17c8c:	230c      	movs	r3, #12
   17c8e:	18f9      	adds	r1, r7, r3
   17c90:	687b      	ldr	r3, [r7, #4]
   17c92:	0018      	movs	r0, r3
   17c94:	4b19      	ldr	r3, [pc, #100]	; (17cfc <client_publish_message+0x178>)
   17c96:	4798      	blx	r3
   17c98:	0003      	movs	r3, r0
   17c9a:	22c6      	movs	r2, #198	; 0xc6
   17c9c:	0052      	lsls	r2, r2, #1
   17c9e:	18ba      	adds	r2, r7, r2
   17ca0:	6013      	str	r3, [r2, #0]
    if (status != MQTTCLIENT_SUCCESS)
   17ca2:	23c6      	movs	r3, #198	; 0xc6
   17ca4:	005b      	lsls	r3, r3, #1
   17ca6:	18fb      	adds	r3, r7, r3
   17ca8:	681b      	ldr	r3, [r3, #0]
   17caa:	2b00      	cmp	r3, #0
   17cac:	d008      	beq.n	17cc0 <client_publish_message+0x13c>
    {
        CLIENT_PRINTF("Failed to publish the MQTT message: %d\r\n", status);
   17cae:	23c6      	movs	r3, #198	; 0xc6
   17cb0:	005b      	lsls	r3, r3, #1
   17cb2:	18fb      	adds	r3, r7, r3
   17cb4:	681a      	ldr	r2, [r3, #0]
   17cb6:	4b12      	ldr	r3, [pc, #72]	; (17d00 <client_publish_message+0x17c>)
   17cb8:	0011      	movs	r1, r2
   17cba:	0018      	movs	r0, r3
   17cbc:	4b07      	ldr	r3, [pc, #28]	; (17cdc <client_publish_message+0x158>)
   17cbe:	4798      	blx	r3
    }
}
   17cc0:	46bd      	mov	sp, r7
   17cc2:	b065      	add	sp, #404	; 0x194
   17cc4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   17cc6:	46c0      	nop			; (mov r8, r8)
   17cc8:	0001661d 	.word	0x0001661d
   17ccc:	00017685 	.word	0x00017685
   17cd0:	000176d1 	.word	0x000176d1
   17cd4:	0001858d 	.word	0x0001858d
   17cd8:	00021660 	.word	0x00021660
   17cdc:	0001c2d5 	.word	0x0001c2d5
   17ce0:	00019cd9 	.word	0x00019cd9
   17ce4:	00019de5 	.word	0x00019de5
   17ce8:	0002167c 	.word	0x0002167c
   17cec:	0001c595 	.word	0x0001c595
   17cf0:	00017b51 	.word	0x00017b51
   17cf4:	0001c72b 	.word	0x0001c72b
   17cf8:	000216bc 	.word	0x000216bc
   17cfc:	000133a1 	.word	0x000133a1
   17d00:	000216dc 	.word	0x000216dc

00017d04 <client_process_message>:

/** \brief Receive and process a message from the host */
static void client_process_message(MessageData *data)
{
   17d04:	b580      	push	{r7, lr}
   17d06:	b088      	sub	sp, #32
   17d08:	af00      	add	r7, sp, #0
   17d0a:	6078      	str	r0, [r7, #4]
	printf("received config: %.*s\r\n",data->message->payloadlen,(char*)data->message->payload);
   17d0c:	687b      	ldr	r3, [r7, #4]
   17d0e:	681b      	ldr	r3, [r3, #0]
   17d10:	68d9      	ldr	r1, [r3, #12]
   17d12:	687b      	ldr	r3, [r7, #4]
   17d14:	681b      	ldr	r3, [r3, #0]
   17d16:	689a      	ldr	r2, [r3, #8]
   17d18:	4b3a      	ldr	r3, [pc, #232]	; (17e04 <client_process_message+0x100>)
   17d1a:	0018      	movs	r0, r3
   17d1c:	4b3a      	ldr	r3, [pc, #232]	; (17e08 <client_process_message+0x104>)
   17d1e:	4798      	blx	r3
	if(0==strncmp("LEDOn",(char*)data->message->payload,data->message->payloadlen)){
   17d20:	687b      	ldr	r3, [r7, #4]
   17d22:	681b      	ldr	r3, [r3, #0]
   17d24:	6899      	ldr	r1, [r3, #8]
   17d26:	687b      	ldr	r3, [r7, #4]
   17d28:	681b      	ldr	r3, [r3, #0]
   17d2a:	68da      	ldr	r2, [r3, #12]
   17d2c:	4b37      	ldr	r3, [pc, #220]	; (17e0c <client_process_message+0x108>)
   17d2e:	0018      	movs	r0, r3
   17d30:	4b37      	ldr	r3, [pc, #220]	; (17e10 <client_process_message+0x10c>)
   17d32:	4798      	blx	r3
   17d34:	1e03      	subs	r3, r0, #0
   17d36:	d104      	bne.n	17d42 <client_process_message+0x3e>
		#if BOARD == SAMG55_XPLAINED_PRO
		ioport_set_pin_level(LED_0_PIN, IOPORT_PIN_LEVEL_LOW);
		#elif BOARD == SAMD21_XPLAINED_PRO
		port_pin_set_output_level(LED_0_PIN, false);
   17d38:	2100      	movs	r1, #0
   17d3a:	203e      	movs	r0, #62	; 0x3e
   17d3c:	4b35      	ldr	r3, [pc, #212]	; (17e14 <client_process_message+0x110>)
   17d3e:	4798      	blx	r3
   17d40:	e00f      	b.n	17d62 <client_process_message+0x5e>
		#endif
	}
	else if(0==strncmp("LEDOff",(char*)data->message->payload,data->message->payloadlen)){
   17d42:	687b      	ldr	r3, [r7, #4]
   17d44:	681b      	ldr	r3, [r3, #0]
   17d46:	6899      	ldr	r1, [r3, #8]
   17d48:	687b      	ldr	r3, [r7, #4]
   17d4a:	681b      	ldr	r3, [r3, #0]
   17d4c:	68da      	ldr	r2, [r3, #12]
   17d4e:	4b32      	ldr	r3, [pc, #200]	; (17e18 <client_process_message+0x114>)
   17d50:	0018      	movs	r0, r3
   17d52:	4b2f      	ldr	r3, [pc, #188]	; (17e10 <client_process_message+0x10c>)
   17d54:	4798      	blx	r3
   17d56:	1e03      	subs	r3, r0, #0
   17d58:	d103      	bne.n	17d62 <client_process_message+0x5e>
		#if BOARD == SAMG55_XPLAINED_PRO
		ioport_set_pin_level(LED_0_PIN, IOPORT_PIN_LEVEL_HIGH);
		#elif BOARD == SAMD21_XPLAINED_PRO
		port_pin_set_output_level(LED_0_PIN, true);
   17d5a:	2101      	movs	r1, #1
   17d5c:	203e      	movs	r0, #62	; 0x3e
   17d5e:	4b2d      	ldr	r3, [pc, #180]	; (17e14 <client_process_message+0x110>)
   17d60:	4798      	blx	r3
		#endif
	}
#ifdef CONFIG_USE_JSON_LIB
    JSON_Value *json_message_value = NULL;
   17d62:	2300      	movs	r3, #0
   17d64:	61fb      	str	r3, [r7, #28]
    JSON_Object *json_message_object = NULL;
   17d66:	2300      	movs	r3, #0
   17d68:	61bb      	str	r3, [r7, #24]
    JSON_Object *json_override_object = NULL;
   17d6a:	2300      	movs	r3, #0
   17d6c:	617b      	str	r3, [r7, #20]
    JSON_Array * json_array_settings = NULL;
   17d6e:	2300      	movs	r3, #0
   17d70:	613b      	str	r3, [r7, #16]
    uint32_t update_rate;

    json_message_value   = json_parse_string((char*)data->message->payload);
   17d72:	687b      	ldr	r3, [r7, #4]
   17d74:	681b      	ldr	r3, [r3, #0]
   17d76:	689b      	ldr	r3, [r3, #8]
   17d78:	0018      	movs	r0, r3
   17d7a:	4b28      	ldr	r3, [pc, #160]	; (17e1c <client_process_message+0x118>)
   17d7c:	4798      	blx	r3
   17d7e:	0003      	movs	r3, r0
   17d80:	61fb      	str	r3, [r7, #28]
    json_message_object  = json_value_get_object(json_message_value);
   17d82:	69fb      	ldr	r3, [r7, #28]
   17d84:	0018      	movs	r0, r3
   17d86:	4b26      	ldr	r3, [pc, #152]	; (17e20 <client_process_message+0x11c>)
   17d88:	4798      	blx	r3
   17d8a:	0003      	movs	r3, r0
   17d8c:	61bb      	str	r3, [r7, #24]

    json_array_settings = json_object_get_array(json_message_object, "fan-speed-map");
   17d8e:	4a25      	ldr	r2, [pc, #148]	; (17e24 <client_process_message+0x120>)
   17d90:	69bb      	ldr	r3, [r7, #24]
   17d92:	0011      	movs	r1, r2
   17d94:	0018      	movs	r0, r3
   17d96:	4b24      	ldr	r3, [pc, #144]	; (17e28 <client_process_message+0x124>)
   17d98:	4798      	blx	r3
   17d9a:	0003      	movs	r3, r0
   17d9c:	613b      	str	r3, [r7, #16]

    if(json_array_settings)
   17d9e:	693b      	ldr	r3, [r7, #16]
   17da0:	2b00      	cmp	r3, #0
   17da2:	d003      	beq.n	17dac <client_process_message+0xa8>
    {
        update_settings_from_json(json_array_settings);
   17da4:	693b      	ldr	r3, [r7, #16]
   17da6:	0018      	movs	r0, r3
   17da8:	4b20      	ldr	r3, [pc, #128]	; (17e2c <client_process_message+0x128>)
   17daa:	4798      	blx	r3
    }

    json_override_object = json_object_get_object(json_message_object, "override");
   17dac:	4a20      	ldr	r2, [pc, #128]	; (17e30 <client_process_message+0x12c>)
   17dae:	69bb      	ldr	r3, [r7, #24]
   17db0:	0011      	movs	r1, r2
   17db2:	0018      	movs	r0, r3
   17db4:	4b1f      	ldr	r3, [pc, #124]	; (17e34 <client_process_message+0x130>)
   17db6:	4798      	blx	r3
   17db8:	0003      	movs	r3, r0
   17dba:	617b      	str	r3, [r7, #20]

    if(json_override_object)
   17dbc:	697b      	ldr	r3, [r7, #20]
   17dbe:	2b00      	cmp	r3, #0
   17dc0:	d003      	beq.n	17dca <client_process_message+0xc6>
    {
        override_from_json(json_override_object);
   17dc2:	697b      	ldr	r3, [r7, #20]
   17dc4:	0018      	movs	r0, r3
   17dc6:	4b1c      	ldr	r3, [pc, #112]	; (17e38 <client_process_message+0x134>)
   17dc8:	4798      	blx	r3
    }

    update_rate = json_object_get_number(json_message_object, "update-rate");
   17dca:	4a1c      	ldr	r2, [pc, #112]	; (17e3c <client_process_message+0x138>)
   17dcc:	69bb      	ldr	r3, [r7, #24]
   17dce:	0011      	movs	r1, r2
   17dd0:	0018      	movs	r0, r3
   17dd2:	4b1b      	ldr	r3, [pc, #108]	; (17e40 <client_process_message+0x13c>)
   17dd4:	4798      	blx	r3
   17dd6:	000a      	movs	r2, r1
   17dd8:	0001      	movs	r1, r0
   17dda:	4b1a      	ldr	r3, [pc, #104]	; (17e44 <client_process_message+0x140>)
   17ddc:	0008      	movs	r0, r1
   17dde:	0011      	movs	r1, r2
   17de0:	4798      	blx	r3
   17de2:	0003      	movs	r3, r0
   17de4:	60fb      	str	r3, [r7, #12]

    if(1000 < update_rate)
   17de6:	68fa      	ldr	r2, [r7, #12]
   17de8:	23fa      	movs	r3, #250	; 0xfa
   17dea:	009b      	lsls	r3, r3, #2
   17dec:	429a      	cmp	r2, r3
   17dee:	d904      	bls.n	17dfa <client_process_message+0xf6>
    {
        g_client_context.update_period = update_rate;
   17df0:	68fb      	ldr	r3, [r7, #12]
   17df2:	b299      	uxth	r1, r3
   17df4:	4b14      	ldr	r3, [pc, #80]	; (17e48 <client_process_message+0x144>)
   17df6:	4a15      	ldr	r2, [pc, #84]	; (17e4c <client_process_message+0x148>)
   17df8:	5299      	strh	r1, [r3, r2]
    }
#endif
}
   17dfa:	46c0      	nop			; (mov r8, r8)
   17dfc:	46bd      	mov	sp, r7
   17dfe:	b008      	add	sp, #32
   17e00:	bd80      	pop	{r7, pc}
   17e02:	46c0      	nop			; (mov r8, r8)
   17e04:	00021708 	.word	0x00021708
   17e08:	0001c2d5 	.word	0x0001c2d5
   17e0c:	00021720 	.word	0x00021720
   17e10:	0001c739 	.word	0x0001c739
   17e14:	0001796d 	.word	0x0001796d
   17e18:	00021728 	.word	0x00021728
   17e1c:	000159e9 	.word	0x000159e9
   17e20:	00015c19 	.word	0x00015c19
   17e24:	00021730 	.word	0x00021730
   17e28:	00015aed 	.word	0x00015aed
   17e2c:	000174fd 	.word	0x000174fd
   17e30:	00021740 	.word	0x00021740
   17e34:	00015abd 	.word	0x00015abd
   17e38:	000175f1 	.word	0x000175f1
   17e3c:	0002174c 	.word	0x0002174c
   17e40:	00015a89 	.word	0x00015a89
   17e44:	0001a111 	.word	0x0001a111
   17e48:	20000be4 	.word	0x20000be4
   17e4c:	000008d4 	.word	0x000008d4

00017e50 <client_state_update>:
    CLIENT_STATE_RUN,
    CLIENT_STATE_ERROR        /**< Error states can be anywhere but are recommended at the end */
} CLIENT_STATES;

static void client_state_update(void* pCtx, uint32_t next, uint32_t wait)
{
   17e50:	b580      	push	{r7, lr}
   17e52:	b086      	sub	sp, #24
   17e54:	af00      	add	r7, sp, #0
   17e56:	60f8      	str	r0, [r7, #12]
   17e58:	60b9      	str	r1, [r7, #8]
   17e5a:	607a      	str	r2, [r7, #4]
    struct _g_client_context* ctx = (struct _g_client_context*)pCtx;
   17e5c:	68fb      	ldr	r3, [r7, #12]
   17e5e:	617b      	str	r3, [r7, #20]

    //CLIENT_PRINTF("%s(%u) -> %s(%u)\r\n", tiny_state_name(ctx, ctx->state.state),
    //      ctx->state.state, tiny_state_name(ctx, next), next);

    /* Set the new state */
    tiny_state_update(ctx, next);
   17e60:	68ba      	ldr	r2, [r7, #8]
   17e62:	697b      	ldr	r3, [r7, #20]
   17e64:	0011      	movs	r1, r2
   17e66:	0018      	movs	r0, r3
   17e68:	4b05      	ldr	r3, [pc, #20]	; (17e80 <client_state_update+0x30>)
   17e6a:	4798      	blx	r3

    /* Set the holdoff/wait */
    client_counter_set(pCtx, wait);
   17e6c:	687a      	ldr	r2, [r7, #4]
   17e6e:	68fb      	ldr	r3, [r7, #12]
   17e70:	0011      	movs	r1, r2
   17e72:	0018      	movs	r0, r3
   17e74:	4b03      	ldr	r3, [pc, #12]	; (17e84 <client_state_update+0x34>)
   17e76:	4798      	blx	r3
}
   17e78:	46c0      	nop			; (mov r8, r8)
   17e7a:	46bd      	mov	sp, r7
   17e7c:	b006      	add	sp, #24
   17e7e:	bd80      	pop	{r7, pc}
   17e80:	00017ab9 	.word	0x00017ab9
   17e84:	00017af1 	.word	0x00017af1

00017e88 <client_state_init>:

/* Initialize the client */
static void client_state_init(void * pCtx)
{
   17e88:	b5b0      	push	{r4, r5, r7, lr}
   17e8a:	b088      	sub	sp, #32
   17e8c:	af04      	add	r7, sp, #16
   17e8e:	6078      	str	r0, [r7, #4]
    struct _g_client_context * ctx = (struct _g_client_context *)pCtx;
   17e90:	687b      	ldr	r3, [r7, #4]
   17e92:	60fb      	str	r3, [r7, #12]
    
    /* Initialize the Paho MQTT Network Structure */
    ctx->mqtt_net.mqttread  = &mqtt_packet_read;
   17e94:	68fb      	ldr	r3, [r7, #12]
   17e96:	4a16      	ldr	r2, [pc, #88]	; (17ef0 <client_state_init+0x68>)
   17e98:	60da      	str	r2, [r3, #12]
    ctx->mqtt_net.mqttwrite = &mqtt_packet_write;
   17e9a:	68fb      	ldr	r3, [r7, #12]
   17e9c:	4a15      	ldr	r2, [pc, #84]	; (17ef4 <client_state_init+0x6c>)
   17e9e:	611a      	str	r2, [r3, #16]

    /* Initialize the Paho MQTT Client Structure */
    MQTTClientInit(&ctx->mqtt_client, &ctx->mqtt_net, CLIENT_MQTT_TIMEOUT_MS,
   17ea0:	68fb      	ldr	r3, [r7, #12]
   17ea2:	3314      	adds	r3, #20
   17ea4:	0018      	movs	r0, r3
   17ea6:	68fb      	ldr	r3, [r7, #12]
   17ea8:	330c      	adds	r3, #12
   17eaa:	0019      	movs	r1, r3
        ctx->mqtt_tx_buf, CLIENT_MQTT_TX_BUF_SIZE,
   17eac:	68fb      	ldr	r3, [r7, #12]
   17eae:	228e      	movs	r2, #142	; 0x8e
   17eb0:	00d2      	lsls	r2, r2, #3
   17eb2:	189d      	adds	r5, r3, r2
        ctx->mqtt_rx_buf, CLIENT_MQTT_RX_BUF_SIZE);
   17eb4:	68fb      	ldr	r3, [r7, #12]
   17eb6:	3370      	adds	r3, #112	; 0x70
    MQTTClientInit(&ctx->mqtt_client, &ctx->mqtt_net, CLIENT_MQTT_TIMEOUT_MS,
   17eb8:	22fa      	movs	r2, #250	; 0xfa
   17eba:	00d4      	lsls	r4, r2, #3
   17ebc:	2280      	movs	r2, #128	; 0x80
   17ebe:	00d2      	lsls	r2, r2, #3
   17ec0:	9202      	str	r2, [sp, #8]
   17ec2:	9301      	str	r3, [sp, #4]
   17ec4:	2380      	movs	r3, #128	; 0x80
   17ec6:	00db      	lsls	r3, r3, #3
   17ec8:	9300      	str	r3, [sp, #0]
   17eca:	002b      	movs	r3, r5
   17ecc:	0022      	movs	r2, r4
   17ece:	4c0a      	ldr	r4, [pc, #40]	; (17ef8 <client_state_init+0x70>)
   17ed0:	47a0      	blx	r4

    ctx->update_period = CLIENT_REPORT_PERIOD_DEFAULT;
   17ed2:	68fb      	ldr	r3, [r7, #12]
   17ed4:	4a09      	ldr	r2, [pc, #36]	; (17efc <client_state_init+0x74>)
   17ed6:	490a      	ldr	r1, [pc, #40]	; (17f00 <client_state_init+0x78>)
   17ed8:	5299      	strh	r1, [r3, r2]

    /* Move to the next state */
    client_state_update(pCtx, CLIENT_STATE_GET_TIME, 0);
   17eda:	687b      	ldr	r3, [r7, #4]
   17edc:	2200      	movs	r2, #0
   17ede:	2101      	movs	r1, #1
   17ee0:	0018      	movs	r0, r3
   17ee2:	4b08      	ldr	r3, [pc, #32]	; (17f04 <client_state_init+0x7c>)
   17ee4:	4798      	blx	r3
}
   17ee6:	46c0      	nop			; (mov r8, r8)
   17ee8:	46bd      	mov	sp, r7
   17eea:	b004      	add	sp, #16
   17eec:	bdb0      	pop	{r4, r5, r7, pc}
   17eee:	46c0      	nop			; (mov r8, r8)
   17ef0:	00014595 	.word	0x00014595
   17ef4:	000145bd 	.word	0x000145bd
   17ef8:	000129c5 	.word	0x000129c5
   17efc:	000008d4 	.word	0x000008d4
   17f00:	00001388 	.word	0x00001388
   17f04:	00017e51 	.word	0x00017e51

00017f08 <client_state_get_time>:

/* Check/Get Time */
static void client_state_get_time(void* pCtx)
{
   17f08:	b580      	push	{r7, lr}
   17f0a:	b082      	sub	sp, #8
   17f0c:	af00      	add	r7, sp, #0
   17f0e:	6078      	str	r0, [r7, #4]
    if(client_counter_finished(pCtx))
   17f10:	687b      	ldr	r3, [r7, #4]
   17f12:	0018      	movs	r0, r3
   17f14:	4b0d      	ldr	r3, [pc, #52]	; (17f4c <client_state_get_time+0x44>)
   17f16:	4798      	blx	r3
   17f18:	1e03      	subs	r3, r0, #0
   17f1a:	d012      	beq.n	17f42 <client_state_get_time+0x3a>
    {
        if(!time_utils_get_utc())
   17f1c:	4b0c      	ldr	r3, [pc, #48]	; (17f50 <client_state_get_time+0x48>)
   17f1e:	4798      	blx	r3
   17f20:	1e03      	subs	r3, r0, #0
   17f22:	d108      	bne.n	17f36 <client_state_get_time+0x2e>
        {
            wifi_request_time();
   17f24:	4b0b      	ldr	r3, [pc, #44]	; (17f54 <client_state_get_time+0x4c>)
   17f26:	4798      	blx	r3
            client_counter_set(pCtx, WIFI_COUNTER_GET_TIME_WAIT);
   17f28:	4a0b      	ldr	r2, [pc, #44]	; (17f58 <client_state_get_time+0x50>)
   17f2a:	687b      	ldr	r3, [r7, #4]
   17f2c:	0011      	movs	r1, r2
   17f2e:	0018      	movs	r0, r3
   17f30:	4b0a      	ldr	r3, [pc, #40]	; (17f5c <client_state_get_time+0x54>)
   17f32:	4798      	blx	r3
        else
        {
            client_state_update(pCtx, CLIENT_STATE_CONNECT, 0);
        }
    }
}
   17f34:	e005      	b.n	17f42 <client_state_get_time+0x3a>
            client_state_update(pCtx, CLIENT_STATE_CONNECT, 0);
   17f36:	687b      	ldr	r3, [r7, #4]
   17f38:	2200      	movs	r2, #0
   17f3a:	2102      	movs	r1, #2
   17f3c:	0018      	movs	r0, r3
   17f3e:	4b08      	ldr	r3, [pc, #32]	; (17f60 <client_state_get_time+0x58>)
   17f40:	4798      	blx	r3
}
   17f42:	46c0      	nop			; (mov r8, r8)
   17f44:	46bd      	mov	sp, r7
   17f46:	b002      	add	sp, #8
   17f48:	bd80      	pop	{r7, pc}
   17f4a:	46c0      	nop			; (mov r8, r8)
   17f4c:	00017ad3 	.word	0x00017ad3
   17f50:	0001661d 	.word	0x0001661d
   17f54:	000170f1 	.word	0x000170f1
   17f58:	00002710 	.word	0x00002710
   17f5c:	00017af1 	.word	0x00017af1
   17f60:	00017e51 	.word	0x00017e51

00017f64 <client_connect_socket>:

static int client_connect_socket(void* pCtx)
{
   17f64:	b580      	push	{r7, lr}
   17f66:	b084      	sub	sp, #16
   17f68:	af00      	add	r7, sp, #0
   17f6a:	6078      	str	r0, [r7, #4]
    struct _g_client_context* ctx = (struct _g_client_context*)pCtx;
   17f6c:	687b      	ldr	r3, [r7, #4]
   17f6e:	60fb      	str	r3, [r7, #12]
    uint16_t port;

    if(config_get_host_info((char*)ctx->mqtt_rx_buf, CLIENT_MQTT_RX_BUF_SIZE, &port))
   17f70:	68fb      	ldr	r3, [r7, #12]
   17f72:	3370      	adds	r3, #112	; 0x70
   17f74:	0018      	movs	r0, r3
   17f76:	230a      	movs	r3, #10
   17f78:	18fa      	adds	r2, r7, r3
   17f7a:	2380      	movs	r3, #128	; 0x80
   17f7c:	00db      	lsls	r3, r3, #3
   17f7e:	0019      	movs	r1, r3
   17f80:	4b0d      	ldr	r3, [pc, #52]	; (17fb8 <client_connect_socket+0x54>)
   17f82:	4798      	blx	r3
   17f84:	1e03      	subs	r3, r0, #0
   17f86:	d002      	beq.n	17f8e <client_connect_socket+0x2a>
    {
        /* Failed */
        return -1;
   17f88:	2301      	movs	r3, #1
   17f8a:	425b      	negs	r3, r3
   17f8c:	e00f      	b.n	17fae <client_connect_socket+0x4a>
    }

    if(wifi_connect((char*)ctx->mqtt_rx_buf, port))
   17f8e:	68fb      	ldr	r3, [r7, #12]
   17f90:	3370      	adds	r3, #112	; 0x70
   17f92:	001a      	movs	r2, r3
   17f94:	230a      	movs	r3, #10
   17f96:	18fb      	adds	r3, r7, r3
   17f98:	881b      	ldrh	r3, [r3, #0]
   17f9a:	0019      	movs	r1, r3
   17f9c:	0010      	movs	r0, r2
   17f9e:	4b07      	ldr	r3, [pc, #28]	; (17fbc <client_connect_socket+0x58>)
   17fa0:	4798      	blx	r3
   17fa2:	1e03      	subs	r3, r0, #0
   17fa4:	d002      	beq.n	17fac <client_connect_socket+0x48>
    {
        /* Failed */
        return -1;
   17fa6:	2301      	movs	r3, #1
   17fa8:	425b      	negs	r3, r3
   17faa:	e000      	b.n	17fae <client_connect_socket+0x4a>
    }

    return 0;
   17fac:	2300      	movs	r3, #0
}
   17fae:	0018      	movs	r0, r3
   17fb0:	46bd      	mov	sp, r7
   17fb2:	b004      	add	sp, #16
   17fb4:	bd80      	pop	{r7, pc}
   17fb6:	46c0      	nop			; (mov r8, r8)
   17fb8:	00018645 	.word	0x00018645
   17fbc:	00017179 	.word	0x00017179

00017fc0 <client_connect>:

/* Connect the MQTT Client to the host */
static int client_connect(void* pCtx)
{
   17fc0:	b590      	push	{r4, r7, lr}
   17fc2:	b09b      	sub	sp, #108	; 0x6c
   17fc4:	af00      	add	r7, sp, #0
   17fc6:	6078      	str	r0, [r7, #4]
    MQTTPacket_connectData mqtt_options = MQTTPacket_connectData_initializer;
   17fc8:	2308      	movs	r3, #8
   17fca:	18fa      	adds	r2, r7, r3
   17fcc:	4b42      	ldr	r3, [pc, #264]	; (180d8 <client_connect+0x118>)
   17fce:	0010      	movs	r0, r2
   17fd0:	0019      	movs	r1, r3
   17fd2:	2358      	movs	r3, #88	; 0x58
   17fd4:	001a      	movs	r2, r3
   17fd6:	4b41      	ldr	r3, [pc, #260]	; (180dc <client_connect+0x11c>)
   17fd8:	4798      	blx	r3
    struct _g_client_context* ctx = (struct _g_client_context*)pCtx;
   17fda:	687b      	ldr	r3, [r7, #4]
   17fdc:	667b      	str	r3, [r7, #100]	; 0x64
    size_t buf_bytes_remaining = CLIENT_MQTT_RX_BUF_SIZE;
   17fde:	2380      	movs	r3, #128	; 0x80
   17fe0:	00db      	lsls	r3, r3, #3
   17fe2:	663b      	str	r3, [r7, #96]	; 0x60

    mqtt_options.keepAliveInterval = MQTT_KEEP_ALIVE_INTERVAL_S;
   17fe4:	2308      	movs	r3, #8
   17fe6:	18fb      	adds	r3, r7, r3
   17fe8:	22e1      	movs	r2, #225	; 0xe1
   17fea:	0092      	lsls	r2, r2, #2
   17fec:	831a      	strh	r2, [r3, #24]
    mqtt_options.cleansession = 1;
   17fee:	2308      	movs	r3, #8
   17ff0:	18fb      	adds	r3, r7, r3
   17ff2:	2201      	movs	r2, #1
   17ff4:	769a      	strb	r2, [r3, #26]

    /* Client ID String */
    mqtt_options.clientID.cstring = (char*)&ctx->mqtt_rx_buf[0];
   17ff6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   17ff8:	3370      	adds	r3, #112	; 0x70
   17ffa:	001a      	movs	r2, r3
   17ffc:	2308      	movs	r3, #8
   17ffe:	18fb      	adds	r3, r7, r3
   18000:	60da      	str	r2, [r3, #12]
    if(config_get_client_id(mqtt_options.clientID.cstring, buf_bytes_remaining))
   18002:	2308      	movs	r3, #8
   18004:	18fb      	adds	r3, r7, r3
   18006:	68db      	ldr	r3, [r3, #12]
   18008:	6e3a      	ldr	r2, [r7, #96]	; 0x60
   1800a:	0011      	movs	r1, r2
   1800c:	0018      	movs	r0, r3
   1800e:	4b34      	ldr	r3, [pc, #208]	; (180e0 <client_connect+0x120>)
   18010:	4798      	blx	r3
   18012:	1e03      	subs	r3, r0, #0
   18014:	d002      	beq.n	1801c <client_connect+0x5c>
    {
        return MQTTCLIENT_FAILURE;
   18016:	2301      	movs	r3, #1
   18018:	425b      	negs	r3, r3
   1801a:	e058      	b.n	180ce <client_connect+0x10e>
    }

    /* Username String */
    mqtt_options.username.cstring = mqtt_options.clientID.cstring + strlen(mqtt_options.clientID.cstring) + 1;
   1801c:	2308      	movs	r3, #8
   1801e:	18fb      	adds	r3, r7, r3
   18020:	68dc      	ldr	r4, [r3, #12]
   18022:	2308      	movs	r3, #8
   18024:	18fb      	adds	r3, r7, r3
   18026:	68db      	ldr	r3, [r3, #12]
   18028:	0018      	movs	r0, r3
   1802a:	4b2e      	ldr	r3, [pc, #184]	; (180e4 <client_connect+0x124>)
   1802c:	4798      	blx	r3
   1802e:	0003      	movs	r3, r0
   18030:	3301      	adds	r3, #1
   18032:	18e2      	adds	r2, r4, r3
   18034:	2308      	movs	r3, #8
   18036:	18fb      	adds	r3, r7, r3
   18038:	641a      	str	r2, [r3, #64]	; 0x40
    buf_bytes_remaining -= (mqtt_options.username.cstring - mqtt_options.clientID.cstring);
   1803a:	2308      	movs	r3, #8
   1803c:	18fb      	adds	r3, r7, r3
   1803e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   18040:	001a      	movs	r2, r3
   18042:	2308      	movs	r3, #8
   18044:	18fb      	adds	r3, r7, r3
   18046:	68db      	ldr	r3, [r3, #12]
   18048:	1ad3      	subs	r3, r2, r3
   1804a:	001a      	movs	r2, r3
   1804c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   1804e:	1a9b      	subs	r3, r3, r2
   18050:	663b      	str	r3, [r7, #96]	; 0x60
    if(config_get_client_username(mqtt_options.username.cstring, buf_bytes_remaining))
   18052:	2308      	movs	r3, #8
   18054:	18fb      	adds	r3, r7, r3
   18056:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   18058:	6e3a      	ldr	r2, [r7, #96]	; 0x60
   1805a:	0011      	movs	r1, r2
   1805c:	0018      	movs	r0, r3
   1805e:	4b22      	ldr	r3, [pc, #136]	; (180e8 <client_connect+0x128>)
   18060:	4798      	blx	r3
   18062:	1e03      	subs	r3, r0, #0
   18064:	d002      	beq.n	1806c <client_connect+0xac>
    {
        return MQTTCLIENT_FAILURE;
   18066:	2301      	movs	r3, #1
   18068:	425b      	negs	r3, r3
   1806a:	e030      	b.n	180ce <client_connect+0x10e>
    }

    /* Password String */
    mqtt_options.password.cstring = mqtt_options.username.cstring + strlen(mqtt_options.username.cstring) + 1;
   1806c:	2308      	movs	r3, #8
   1806e:	18fb      	adds	r3, r7, r3
   18070:	6c1c      	ldr	r4, [r3, #64]	; 0x40
   18072:	2308      	movs	r3, #8
   18074:	18fb      	adds	r3, r7, r3
   18076:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   18078:	0018      	movs	r0, r3
   1807a:	4b1a      	ldr	r3, [pc, #104]	; (180e4 <client_connect+0x124>)
   1807c:	4798      	blx	r3
   1807e:	0003      	movs	r3, r0
   18080:	3301      	adds	r3, #1
   18082:	18e2      	adds	r2, r4, r3
   18084:	2308      	movs	r3, #8
   18086:	18fb      	adds	r3, r7, r3
   18088:	64da      	str	r2, [r3, #76]	; 0x4c
    buf_bytes_remaining -= (mqtt_options.password.cstring - mqtt_options.username.cstring);
   1808a:	2308      	movs	r3, #8
   1808c:	18fb      	adds	r3, r7, r3
   1808e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   18090:	001a      	movs	r2, r3
   18092:	2308      	movs	r3, #8
   18094:	18fb      	adds	r3, r7, r3
   18096:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   18098:	1ad3      	subs	r3, r2, r3
   1809a:	001a      	movs	r2, r3
   1809c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   1809e:	1a9b      	subs	r3, r3, r2
   180a0:	663b      	str	r3, [r7, #96]	; 0x60
    if(config_get_client_password(mqtt_options.password.cstring, buf_bytes_remaining))
   180a2:	2308      	movs	r3, #8
   180a4:	18fb      	adds	r3, r7, r3
   180a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   180a8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
   180aa:	0011      	movs	r1, r2
   180ac:	0018      	movs	r0, r3
   180ae:	4b0f      	ldr	r3, [pc, #60]	; (180ec <client_connect+0x12c>)
   180b0:	4798      	blx	r3
   180b2:	1e03      	subs	r3, r0, #0
   180b4:	d002      	beq.n	180bc <client_connect+0xfc>
    {
        return MQTTCLIENT_FAILURE;
   180b6:	2301      	movs	r3, #1
   180b8:	425b      	negs	r3, r3
   180ba:	e008      	b.n	180ce <client_connect+0x10e>
    }

    return MQTTConnect(&ctx->mqtt_client, &mqtt_options);
   180bc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   180be:	3314      	adds	r3, #20
   180c0:	2208      	movs	r2, #8
   180c2:	18ba      	adds	r2, r7, r2
   180c4:	0011      	movs	r1, r2
   180c6:	0018      	movs	r0, r3
   180c8:	4b09      	ldr	r3, [pc, #36]	; (180f0 <client_connect+0x130>)
   180ca:	4798      	blx	r3
   180cc:	0003      	movs	r3, r0
}
   180ce:	0018      	movs	r0, r3
   180d0:	46bd      	mov	sp, r7
   180d2:	b01b      	add	sp, #108	; 0x6c
   180d4:	bd90      	pop	{r4, r7, pc}
   180d6:	46c0      	nop			; (mov r8, r8)
   180d8:	00021758 	.word	0x00021758
   180dc:	0001c13d 	.word	0x0001c13d
   180e0:	000183b9 	.word	0x000183b9
   180e4:	0001c72b 	.word	0x0001c72b
   180e8:	0001842d 	.word	0x0001842d
   180ec:	00018485 	.word	0x00018485
   180f0:	000130d5 	.word	0x000130d5

000180f4 <client_subscribe>:

/* Subscribe to a topic */
static int client_subscribe(void* pCtx)
{
   180f4:	b590      	push	{r4, r7, lr}
   180f6:	b085      	sub	sp, #20
   180f8:	af00      	add	r7, sp, #0
   180fa:	6078      	str	r0, [r7, #4]
    struct _g_client_context* ctx = (struct _g_client_context*)pCtx;
   180fc:	687b      	ldr	r3, [r7, #4]
   180fe:	60fb      	str	r3, [r7, #12]
    int status = MQTTCLIENT_FAILURE;
   18100:	2301      	movs	r3, #1
   18102:	425b      	negs	r3, r3
   18104:	60bb      	str	r3, [r7, #8]

    status = config_get_client_sub_topic((char*)ctx->sub_topic, sizeof(ctx->sub_topic));
   18106:	68fb      	ldr	r3, [r7, #12]
   18108:	2287      	movs	r2, #135	; 0x87
   1810a:	0112      	lsls	r2, r2, #4
   1810c:	4694      	mov	ip, r2
   1810e:	4463      	add	r3, ip
   18110:	2164      	movs	r1, #100	; 0x64
   18112:	0018      	movs	r0, r3
   18114:	4b13      	ldr	r3, [pc, #76]	; (18164 <client_subscribe+0x70>)
   18116:	4798      	blx	r3
   18118:	0003      	movs	r3, r0
   1811a:	60bb      	str	r3, [r7, #8]
    if (status != MQTTCLIENT_SUCCESS)
   1811c:	68bb      	ldr	r3, [r7, #8]
   1811e:	2b00      	cmp	r3, #0
   18120:	d005      	beq.n	1812e <client_subscribe+0x3a>
    {
        CLIENT_PRINTF("Failed to load the subscription topic name");
   18122:	4b11      	ldr	r3, [pc, #68]	; (18168 <client_subscribe+0x74>)
   18124:	0018      	movs	r0, r3
   18126:	4b11      	ldr	r3, [pc, #68]	; (1816c <client_subscribe+0x78>)
   18128:	4798      	blx	r3
        return status;
   1812a:	68bb      	ldr	r3, [r7, #8]
   1812c:	e016      	b.n	1815c <client_subscribe+0x68>
    }
	else{
		printf("subscribed to : %s\r\n",ctx->sub_topic);
   1812e:	68fb      	ldr	r3, [r7, #12]
   18130:	2287      	movs	r2, #135	; 0x87
   18132:	0112      	lsls	r2, r2, #4
   18134:	189a      	adds	r2, r3, r2
   18136:	4b0e      	ldr	r3, [pc, #56]	; (18170 <client_subscribe+0x7c>)
   18138:	0011      	movs	r1, r2
   1813a:	0018      	movs	r0, r3
   1813c:	4b0b      	ldr	r3, [pc, #44]	; (1816c <client_subscribe+0x78>)
   1813e:	4798      	blx	r3
	}

    status = MQTTSubscribe(&ctx->mqtt_client, ctx->sub_topic, QOS1, &client_process_message);
   18140:	68fb      	ldr	r3, [r7, #12]
   18142:	3314      	adds	r3, #20
   18144:	0018      	movs	r0, r3
   18146:	68fb      	ldr	r3, [r7, #12]
   18148:	2287      	movs	r2, #135	; 0x87
   1814a:	0112      	lsls	r2, r2, #4
   1814c:	1899      	adds	r1, r3, r2
   1814e:	4b09      	ldr	r3, [pc, #36]	; (18174 <client_subscribe+0x80>)
   18150:	2201      	movs	r2, #1
   18152:	4c09      	ldr	r4, [pc, #36]	; (18178 <client_subscribe+0x84>)
   18154:	47a0      	blx	r4
   18156:	0003      	movs	r3, r0
   18158:	60bb      	str	r3, [r7, #8]

    return status;
   1815a:	68bb      	ldr	r3, [r7, #8]
}
   1815c:	0018      	movs	r0, r3
   1815e:	46bd      	mov	sp, r7
   18160:	b005      	add	sp, #20
   18162:	bd90      	pop	{r4, r7, pc}
   18164:	000185e9 	.word	0x000185e9
   18168:	000217b0 	.word	0x000217b0
   1816c:	0001c2d5 	.word	0x0001c2d5
   18170:	000217dc 	.word	0x000217dc
   18174:	00017d05 	.word	0x00017d05
   18178:	00013215 	.word	0x00013215

0001817c <client_state_connect>:

/* Connect to the host */
static void client_state_connect(void* pCtx)
{
   1817c:	b580      	push	{r7, lr}
   1817e:	b084      	sub	sp, #16
   18180:	af00      	add	r7, sp, #0
   18182:	6078      	str	r0, [r7, #4]
    int status;
    if(client_counter_finished(pCtx))
   18184:	687b      	ldr	r3, [r7, #4]
   18186:	0018      	movs	r0, r3
   18188:	4b1d      	ldr	r3, [pc, #116]	; (18200 <client_state_connect+0x84>)
   1818a:	4798      	blx	r3
   1818c:	1e03      	subs	r3, r0, #0
   1818e:	d033      	beq.n	181f8 <client_state_connect+0x7c>
    {
        /* Update Hold-off */
        client_counter_set(pCtx, WIFI_COUNTER_GET_TIME_WAIT);
   18190:	4a1c      	ldr	r2, [pc, #112]	; (18204 <client_state_connect+0x88>)
   18192:	687b      	ldr	r3, [r7, #4]
   18194:	0011      	movs	r1, r2
   18196:	0018      	movs	r0, r3
   18198:	4b1b      	ldr	r3, [pc, #108]	; (18208 <client_state_connect+0x8c>)
   1819a:	4798      	blx	r3

        /* Resolve the host and connect the socket */
        if(client_connect_socket(pCtx))
   1819c:	687b      	ldr	r3, [r7, #4]
   1819e:	0018      	movs	r0, r3
   181a0:	4b1a      	ldr	r3, [pc, #104]	; (1820c <client_state_connect+0x90>)
   181a2:	4798      	blx	r3
   181a4:	1e03      	subs	r3, r0, #0
   181a6:	d126      	bne.n	181f6 <client_state_connect+0x7a>
        {
            return;
        }

        /* Connect the MQTT client */
        status = client_connect(pCtx);
   181a8:	687b      	ldr	r3, [r7, #4]
   181aa:	0018      	movs	r0, r3
   181ac:	4b18      	ldr	r3, [pc, #96]	; (18210 <client_state_connect+0x94>)
   181ae:	4798      	blx	r3
   181b0:	0003      	movs	r3, r0
   181b2:	60fb      	str	r3, [r7, #12]
        if(status)
   181b4:	68fb      	ldr	r3, [r7, #12]
   181b6:	2b00      	cmp	r3, #0
   181b8:	d006      	beq.n	181c8 <client_state_connect+0x4c>
        {
            CLIENT_PRINTF("MQTT Client Failed to Connect (%d)\r\n", status);
   181ba:	68fa      	ldr	r2, [r7, #12]
   181bc:	4b15      	ldr	r3, [pc, #84]	; (18214 <client_state_connect+0x98>)
   181be:	0011      	movs	r1, r2
   181c0:	0018      	movs	r0, r3
   181c2:	4b15      	ldr	r3, [pc, #84]	; (18218 <client_state_connect+0x9c>)
   181c4:	4798      	blx	r3
            return;
   181c6:	e017      	b.n	181f8 <client_state_connect+0x7c>
        }
                        
        /* Connect the MQTT client */
        status = client_subscribe(pCtx);
   181c8:	687b      	ldr	r3, [r7, #4]
   181ca:	0018      	movs	r0, r3
   181cc:	4b13      	ldr	r3, [pc, #76]	; (1821c <client_state_connect+0xa0>)
   181ce:	4798      	blx	r3
   181d0:	0003      	movs	r3, r0
   181d2:	60fb      	str	r3, [r7, #12]
        if(status)
   181d4:	68fb      	ldr	r3, [r7, #12]
   181d6:	2b00      	cmp	r3, #0
   181d8:	d006      	beq.n	181e8 <client_state_connect+0x6c>
        {
            CLIENT_PRINTF("MQTT Subscription Failed (%d)\r\n", status);
   181da:	68fa      	ldr	r2, [r7, #12]
   181dc:	4b10      	ldr	r3, [pc, #64]	; (18220 <client_state_connect+0xa4>)
   181de:	0011      	movs	r1, r2
   181e0:	0018      	movs	r0, r3
   181e2:	4b0d      	ldr	r3, [pc, #52]	; (18218 <client_state_connect+0x9c>)
   181e4:	4798      	blx	r3
            return;
   181e6:	e007      	b.n	181f8 <client_state_connect+0x7c>
        }

        /* Move to the next state */
        client_state_update(pCtx, CLIENT_STATE_RUN, 0);
   181e8:	687b      	ldr	r3, [r7, #4]
   181ea:	2200      	movs	r2, #0
   181ec:	2103      	movs	r1, #3
   181ee:	0018      	movs	r0, r3
   181f0:	4b0c      	ldr	r3, [pc, #48]	; (18224 <client_state_connect+0xa8>)
   181f2:	4798      	blx	r3
   181f4:	e000      	b.n	181f8 <client_state_connect+0x7c>
            return;
   181f6:	46c0      	nop			; (mov r8, r8)
    }
}
   181f8:	46bd      	mov	sp, r7
   181fa:	b004      	add	sp, #16
   181fc:	bd80      	pop	{r7, pc}
   181fe:	46c0      	nop			; (mov r8, r8)
   18200:	00017ad3 	.word	0x00017ad3
   18204:	00002710 	.word	0x00002710
   18208:	00017af1 	.word	0x00017af1
   1820c:	00017f65 	.word	0x00017f65
   18210:	00017fc1 	.word	0x00017fc1
   18214:	000217f4 	.word	0x000217f4
   18218:	0001c2d5 	.word	0x0001c2d5
   1821c:	000180f5 	.word	0x000180f5
   18220:	0002181c 	.word	0x0002181c
   18224:	00017e51 	.word	0x00017e51

00018228 <client_state_run>:

/* Client is connected */
static void client_state_run(void * pCtx)
{
   18228:	b580      	push	{r7, lr}
   1822a:	b084      	sub	sp, #16
   1822c:	af00      	add	r7, sp, #0
   1822e:	6078      	str	r0, [r7, #4]
    struct _g_client_context* ctx = (struct _g_client_context*)pCtx;
   18230:	687b      	ldr	r3, [r7, #4]
   18232:	60fb      	str	r3, [r7, #12]

    if(wifi_has_error())
   18234:	4b15      	ldr	r3, [pc, #84]	; (1828c <client_state_run+0x64>)
   18236:	4798      	blx	r3
   18238:	1e03      	subs	r3, r0, #0
   1823a:	d005      	beq.n	18248 <client_state_run+0x20>
    {
        client_state_update(pCtx, CLIENT_STATE_INIT, 0);
   1823c:	687b      	ldr	r3, [r7, #4]
   1823e:	2200      	movs	r2, #0
   18240:	2100      	movs	r1, #0
   18242:	0018      	movs	r0, r3
   18244:	4b12      	ldr	r3, [pc, #72]	; (18290 <client_state_run+0x68>)
   18246:	4798      	blx	r3
    }

    if(client_counter_finished(pCtx))
   18248:	687b      	ldr	r3, [r7, #4]
   1824a:	0018      	movs	r0, r3
   1824c:	4b11      	ldr	r3, [pc, #68]	; (18294 <client_state_run+0x6c>)
   1824e:	4798      	blx	r3
   18250:	1e03      	subs	r3, r0, #0
   18252:	d00e      	beq.n	18272 <client_state_run+0x4a>
    {
        client_counter_set(pCtx, ctx->update_period);
   18254:	68fb      	ldr	r3, [r7, #12]
   18256:	4a10      	ldr	r2, [pc, #64]	; (18298 <client_state_run+0x70>)
   18258:	5a9b      	ldrh	r3, [r3, r2]
   1825a:	001a      	movs	r2, r3
   1825c:	687b      	ldr	r3, [r7, #4]
   1825e:	0011      	movs	r1, r2
   18260:	0018      	movs	r0, r3
   18262:	4b0e      	ldr	r3, [pc, #56]	; (1829c <client_state_run+0x74>)
   18264:	4798      	blx	r3

        client_publish_message(&ctx->mqtt_client);
   18266:	68fb      	ldr	r3, [r7, #12]
   18268:	3314      	adds	r3, #20
   1826a:	0018      	movs	r0, r3
   1826c:	4b0c      	ldr	r3, [pc, #48]	; (182a0 <client_state_run+0x78>)
   1826e:	4798      	blx	r3
        if(MQTTYield(&ctx->mqtt_client, MQTT_YEILD_TIMEOUT_MS))
        {
            /* Failure */
        }
   }
}
   18270:	e008      	b.n	18284 <client_state_run+0x5c>
        if(MQTTYield(&ctx->mqtt_client, MQTT_YEILD_TIMEOUT_MS))
   18272:	68fb      	ldr	r3, [r7, #12]
   18274:	3314      	adds	r3, #20
   18276:	001a      	movs	r2, r3
   18278:	23fa      	movs	r3, #250	; 0xfa
   1827a:	005b      	lsls	r3, r3, #1
   1827c:	0019      	movs	r1, r3
   1827e:	0010      	movs	r0, r2
   18280:	4b08      	ldr	r3, [pc, #32]	; (182a4 <client_state_run+0x7c>)
   18282:	4798      	blx	r3
}
   18284:	46c0      	nop			; (mov r8, r8)
   18286:	46bd      	mov	sp, r7
   18288:	b004      	add	sp, #16
   1828a:	bd80      	pop	{r7, pc}
   1828c:	00016939 	.word	0x00016939
   18290:	00017e51 	.word	0x00017e51
   18294:	00017ad3 	.word	0x00017ad3
   18298:	000008d4 	.word	0x000008d4
   1829c:	00017af1 	.word	0x00017af1
   182a0:	00017b85 	.word	0x00017b85
   182a4:	0001301d 	.word	0x0001301d

000182a8 <client_state_error>:

/* Wait for the client to connect successfully */
static void client_state_error(void * pCtx)
{
   182a8:	b580      	push	{r7, lr}
   182aa:	b082      	sub	sp, #8
   182ac:	af00      	add	r7, sp, #0
   182ae:	6078      	str	r0, [r7, #4]

    /* Move to the next state */
    client_state_update(pCtx, CLIENT_STATE_INIT, 0);
   182b0:	687b      	ldr	r3, [r7, #4]
   182b2:	2200      	movs	r2, #0
   182b4:	2100      	movs	r1, #0
   182b6:	0018      	movs	r0, r3
   182b8:	4b02      	ldr	r3, [pc, #8]	; (182c4 <client_state_error+0x1c>)
   182ba:	4798      	blx	r3
}
   182bc:	46c0      	nop			; (mov r8, r8)
   182be:	46bd      	mov	sp, r7
   182c0:	b002      	add	sp, #8
   182c2:	bd80      	pop	{r7, pc}
   182c4:	00017e51 	.word	0x00017e51

000182c8 <client_task>:
    TINY_STATE_DEF(CLIENT_STATE_ERROR,      &client_state_error),
};

/* Assume a 100ms time basis */
void client_task(void)
{
   182c8:	b5b0      	push	{r4, r5, r7, lr}
   182ca:	af00      	add	r7, sp, #0
    if(!g_client_context.state.count)
   182cc:	4b08      	ldr	r3, [pc, #32]	; (182f0 <client_task+0x28>)
   182ce:	885b      	ldrh	r3, [r3, #2]
   182d0:	2b00      	cmp	r3, #0
   182d2:	d105      	bne.n	182e0 <client_task+0x18>
    {
	    /* Perform the Initialization */
	    tiny_state_init(&g_client_context, g_client_states, sizeof(g_client_states)/sizeof(g_client_states[0]), CLIENT_STATE_INIT);
   182d4:	4907      	ldr	r1, [pc, #28]	; (182f4 <client_task+0x2c>)
   182d6:	4806      	ldr	r0, [pc, #24]	; (182f0 <client_task+0x28>)
   182d8:	2300      	movs	r3, #0
   182da:	2205      	movs	r2, #5
   182dc:	4c06      	ldr	r4, [pc, #24]	; (182f8 <client_task+0x30>)
   182de:	47a0      	blx	r4
    }

    /* Run the state machine*/
    tiny_state_driver(&g_client_context);
   182e0:	4b03      	ldr	r3, [pc, #12]	; (182f0 <client_task+0x28>)
   182e2:	0018      	movs	r0, r3
   182e4:	4b05      	ldr	r3, [pc, #20]	; (182fc <client_task+0x34>)
   182e6:	4798      	blx	r3
}
   182e8:	46c0      	nop			; (mov r8, r8)
   182ea:	46bd      	mov	sp, r7
   182ec:	bdb0      	pop	{r4, r5, r7, pc}
   182ee:	46c0      	nop			; (mov r8, r8)
   182f0:	20000be4 	.word	0x20000be4
   182f4:	200001f0 	.word	0x200001f0
   182f8:	000179c1 	.word	0x000179c1
   182fc:	00017a71 	.word	0x00017a71

00018300 <config_crypto>:
const char config_gcp_thing_id[] = "GCPDevice1";

#endif /* CONFIG_USE_STATIC_CONFIG */

void config_crypto(void)
{
   18300:	b580      	push	{r7, lr}
   18302:	af00      	add	r7, sp, #0
	/* Configure the default I2C address of the device */
	cfg_ateccx08a_i2c_default.atcai2c.slave_address = 0xB0;
   18304:	4b03      	ldr	r3, [pc, #12]	; (18314 <config_crypto+0x14>)
   18306:	22b0      	movs	r2, #176	; 0xb0
   18308:	711a      	strb	r2, [r3, #4]
    /* For the ATSAMG55-XPRO Development board */
    cfg_ateccx08a_i2c_default.atcai2c.bus = 1;
#endif

	/* Detect devices */
	(void)atca_kit_detect_I2c_devices();
   1830a:	4b03      	ldr	r3, [pc, #12]	; (18318 <config_crypto+0x18>)
   1830c:	4798      	blx	r3
}
   1830e:	46c0      	nop			; (mov r8, r8)
   18310:	46bd      	mov	sp, r7
   18312:	bd80      	pop	{r7, pc}
   18314:	20000120 	.word	0x20000120
   18318:	000189e1 	.word	0x000189e1

0001831c <config_ready>:

bool config_ready(void)
{
   1831c:	b580      	push	{r7, lr}
   1831e:	af00      	add	r7, sp, #0
    return true;
   18320:	2301      	movs	r3, #1
}
   18322:	0018      	movs	r0, r3
   18324:	46bd      	mov	sp, r7
   18326:	bd80      	pop	{r7, pc}

00018328 <config_get_ssid>:

/** \brief Populate the buffer with the wifi access point ssid */
int config_get_ssid(char* buf, size_t buflen)
{
   18328:	b580      	push	{r7, lr}
   1832a:	b084      	sub	sp, #16
   1832c:	af00      	add	r7, sp, #0
   1832e:	6078      	str	r0, [r7, #4]
   18330:	6039      	str	r1, [r7, #0]
    int status = -1;
   18332:	2301      	movs	r3, #1
   18334:	425b      	negs	r3, r3
   18336:	60fb      	str	r3, [r7, #12]

    if(buf && buflen)
   18338:	687b      	ldr	r3, [r7, #4]
   1833a:	2b00      	cmp	r3, #0
   1833c:	d00f      	beq.n	1835e <config_get_ssid+0x36>
   1833e:	683b      	ldr	r3, [r7, #0]
   18340:	2b00      	cmp	r3, #0
   18342:	d00c      	beq.n	1835e <config_get_ssid+0x36>
    {
        /* Copy the demo ssid into the buffer */
        if(sizeof(config_demo_ssid) <= buflen)
   18344:	683b      	ldr	r3, [r7, #0]
   18346:	2b0e      	cmp	r3, #14
   18348:	d909      	bls.n	1835e <config_get_ssid+0x36>
        {
            memcpy(buf, config_demo_ssid, sizeof(config_demo_ssid));
   1834a:	687a      	ldr	r2, [r7, #4]
   1834c:	4b06      	ldr	r3, [pc, #24]	; (18368 <config_get_ssid+0x40>)
   1834e:	0010      	movs	r0, r2
   18350:	0019      	movs	r1, r3
   18352:	230f      	movs	r3, #15
   18354:	001a      	movs	r2, r3
   18356:	4b05      	ldr	r3, [pc, #20]	; (1836c <config_get_ssid+0x44>)
   18358:	4798      	blx	r3
            status = 0;
   1835a:	2300      	movs	r3, #0
   1835c:	60fb      	str	r3, [r7, #12]
        }
    }

    return status;
   1835e:	68fb      	ldr	r3, [r7, #12]
}
   18360:	0018      	movs	r0, r3
   18362:	46bd      	mov	sp, r7
   18364:	b004      	add	sp, #16
   18366:	bd80      	pop	{r7, pc}
   18368:	000218a8 	.word	0x000218a8
   1836c:	0001c13d 	.word	0x0001c13d

00018370 <config_get_password>:

/** \brief Populate the buffer with the wifi access point password */
int config_get_password(char* buf, size_t buflen)
{
   18370:	b580      	push	{r7, lr}
   18372:	b084      	sub	sp, #16
   18374:	af00      	add	r7, sp, #0
   18376:	6078      	str	r0, [r7, #4]
   18378:	6039      	str	r1, [r7, #0]
    int status = -1;
   1837a:	2301      	movs	r3, #1
   1837c:	425b      	negs	r3, r3
   1837e:	60fb      	str	r3, [r7, #12]

    if(buf && buflen)
   18380:	687b      	ldr	r3, [r7, #4]
   18382:	2b00      	cmp	r3, #0
   18384:	d00f      	beq.n	183a6 <config_get_password+0x36>
   18386:	683b      	ldr	r3, [r7, #0]
   18388:	2b00      	cmp	r3, #0
   1838a:	d00c      	beq.n	183a6 <config_get_password+0x36>
    {
        /* Copy the demo password into the buffer*/
        if(sizeof(config_demo_pass) <= buflen)
   1838c:	683b      	ldr	r3, [r7, #0]
   1838e:	2b0e      	cmp	r3, #14
   18390:	d909      	bls.n	183a6 <config_get_password+0x36>
        {
            memcpy(buf, config_demo_pass, sizeof(config_demo_pass));
   18392:	687a      	ldr	r2, [r7, #4]
   18394:	4b06      	ldr	r3, [pc, #24]	; (183b0 <config_get_password+0x40>)
   18396:	0010      	movs	r0, r2
   18398:	0019      	movs	r1, r3
   1839a:	230f      	movs	r3, #15
   1839c:	001a      	movs	r2, r3
   1839e:	4b05      	ldr	r3, [pc, #20]	; (183b4 <config_get_password+0x44>)
   183a0:	4798      	blx	r3
            status = 0;
   183a2:	2300      	movs	r3, #0
   183a4:	60fb      	str	r3, [r7, #12]
        }
    }

    return status;
   183a6:	68fb      	ldr	r3, [r7, #12]
}
   183a8:	0018      	movs	r0, r3
   183aa:	46bd      	mov	sp, r7
   183ac:	b004      	add	sp, #16
   183ae:	bd80      	pop	{r7, pc}
   183b0:	000218b8 	.word	0x000218b8
   183b4:	0001c13d 	.word	0x0001c13d

000183b8 <config_get_client_id>:

/** \brief Populate the buffer with the client id */
int config_get_client_id(char* buf, size_t buflen)
{
   183b8:	b590      	push	{r4, r7, lr}
   183ba:	b089      	sub	sp, #36	; 0x24
   183bc:	af04      	add	r7, sp, #16
   183be:	6078      	str	r0, [r7, #4]
   183c0:	6039      	str	r1, [r7, #0]
    if(buf && buflen)
   183c2:	687b      	ldr	r3, [r7, #4]
   183c4:	2b00      	cmp	r3, #0
   183c6:	d01f      	beq.n	18408 <config_get_client_id+0x50>
   183c8:	683b      	ldr	r3, [r7, #0]
   183ca:	2b00      	cmp	r3, #0
   183cc:	d01c      	beq.n	18408 <config_get_client_id+0x50>
    {
        int rv;

        rv = snprintf(buf, buflen, "projects/%s/locations/%s/registries/%s/devices/%s", 
   183ce:	4c11      	ldr	r4, [pc, #68]	; (18414 <config_get_client_id+0x5c>)
   183d0:	4a11      	ldr	r2, [pc, #68]	; (18418 <config_get_client_id+0x60>)
   183d2:	6839      	ldr	r1, [r7, #0]
   183d4:	6878      	ldr	r0, [r7, #4]
   183d6:	4b11      	ldr	r3, [pc, #68]	; (1841c <config_get_client_id+0x64>)
   183d8:	9302      	str	r3, [sp, #8]
   183da:	4b11      	ldr	r3, [pc, #68]	; (18420 <config_get_client_id+0x68>)
   183dc:	9301      	str	r3, [sp, #4]
   183de:	4b11      	ldr	r3, [pc, #68]	; (18424 <config_get_client_id+0x6c>)
   183e0:	9300      	str	r3, [sp, #0]
   183e2:	0023      	movs	r3, r4
   183e4:	4c10      	ldr	r4, [pc, #64]	; (18428 <config_get_client_id+0x70>)
   183e6:	47a0      	blx	r4
   183e8:	0003      	movs	r3, r0
   183ea:	60fb      	str	r3, [r7, #12]
            config_gcp_project_id, config_gcp_region_id, config_gcp_registry_id, config_gcp_thing_id);

        if(0 < rv && rv < buflen)
   183ec:	68fb      	ldr	r3, [r7, #12]
   183ee:	2b00      	cmp	r3, #0
   183f0:	dd0a      	ble.n	18408 <config_get_client_id+0x50>
   183f2:	68fa      	ldr	r2, [r7, #12]
   183f4:	683b      	ldr	r3, [r7, #0]
   183f6:	429a      	cmp	r2, r3
   183f8:	d206      	bcs.n	18408 <config_get_client_id+0x50>
        {
            buf[rv] = 0;
   183fa:	68fb      	ldr	r3, [r7, #12]
   183fc:	687a      	ldr	r2, [r7, #4]
   183fe:	18d3      	adds	r3, r2, r3
   18400:	2200      	movs	r2, #0
   18402:	701a      	strb	r2, [r3, #0]
            return 0;
   18404:	2300      	movs	r3, #0
   18406:	e001      	b.n	1840c <config_get_client_id+0x54>
        }
    }
    return -1;
   18408:	2301      	movs	r3, #1
   1840a:	425b      	negs	r3, r3
}
   1840c:	0018      	movs	r0, r3
   1840e:	46bd      	mov	sp, r7
   18410:	b005      	add	sp, #20
   18412:	bd90      	pop	{r4, r7, pc}
   18414:	000218dc 	.word	0x000218dc
   18418:	00021918 	.word	0x00021918
   1841c:	0002190c 	.word	0x0002190c
   18420:	000218fc 	.word	0x000218fc
   18424:	000218f0 	.word	0x000218f0
   18428:	0001c595 	.word	0x0001c595

0001842c <config_get_client_username>:

/* Populate the buffer with the username */
int config_get_client_username(char* buf, size_t buflen)
{
   1842c:	b580      	push	{r7, lr}
   1842e:	b084      	sub	sp, #16
   18430:	af00      	add	r7, sp, #0
   18432:	6078      	str	r0, [r7, #4]
   18434:	6039      	str	r1, [r7, #0]
    if(buf && buflen)
   18436:	687b      	ldr	r3, [r7, #4]
   18438:	2b00      	cmp	r3, #0
   1843a:	d018      	beq.n	1846e <config_get_client_username+0x42>
   1843c:	683b      	ldr	r3, [r7, #0]
   1843e:	2b00      	cmp	r3, #0
   18440:	d015      	beq.n	1846e <config_get_client_username+0x42>
    {
        int rv = snprintf(buf, buflen, "unused");
   18442:	4a0e      	ldr	r2, [pc, #56]	; (1847c <config_get_client_username+0x50>)
   18444:	6839      	ldr	r1, [r7, #0]
   18446:	687b      	ldr	r3, [r7, #4]
   18448:	0018      	movs	r0, r3
   1844a:	4b0d      	ldr	r3, [pc, #52]	; (18480 <config_get_client_username+0x54>)
   1844c:	4798      	blx	r3
   1844e:	0003      	movs	r3, r0
   18450:	60fb      	str	r3, [r7, #12]

        if(0 < rv && rv < buflen)
   18452:	68fb      	ldr	r3, [r7, #12]
   18454:	2b00      	cmp	r3, #0
   18456:	dd0a      	ble.n	1846e <config_get_client_username+0x42>
   18458:	68fa      	ldr	r2, [r7, #12]
   1845a:	683b      	ldr	r3, [r7, #0]
   1845c:	429a      	cmp	r2, r3
   1845e:	d206      	bcs.n	1846e <config_get_client_username+0x42>
        {
            buf[rv] = 0;
   18460:	68fb      	ldr	r3, [r7, #12]
   18462:	687a      	ldr	r2, [r7, #4]
   18464:	18d3      	adds	r3, r2, r3
   18466:	2200      	movs	r2, #0
   18468:	701a      	strb	r2, [r3, #0]
            return 0;
   1846a:	2300      	movs	r3, #0
   1846c:	e001      	b.n	18472 <config_get_client_username+0x46>
        }
    }
    return -1;
   1846e:	2301      	movs	r3, #1
   18470:	425b      	negs	r3, r3
}
   18472:	0018      	movs	r0, r3
   18474:	46bd      	mov	sp, r7
   18476:	b004      	add	sp, #16
   18478:	bd80      	pop	{r7, pc}
   1847a:	46c0      	nop			; (mov r8, r8)
   1847c:	0002194c 	.word	0x0002194c
   18480:	0001c595 	.word	0x0001c595

00018484 <config_get_client_password>:

/* Populate the buffer with the user's password */
int config_get_client_password(char* buf, size_t buflen)
{
   18484:	b580      	push	{r7, lr}
   18486:	b086      	sub	sp, #24
   18488:	af00      	add	r7, sp, #0
   1848a:	6078      	str	r0, [r7, #4]
   1848c:	6039      	str	r1, [r7, #0]
    int rv = -1;
   1848e:	2301      	movs	r3, #1
   18490:	425b      	negs	r3, r3
   18492:	617b      	str	r3, [r7, #20]

    if(buf && buflen)
   18494:	687b      	ldr	r3, [r7, #4]
   18496:	2b00      	cmp	r3, #0
   18498:	d058      	beq.n	1854c <config_get_client_password+0xc8>
   1849a:	683b      	ldr	r3, [r7, #0]
   1849c:	2b00      	cmp	r3, #0
   1849e:	d055      	beq.n	1854c <config_get_client_password+0xc8>
    {
        atca_jwt_t jwt;
        
        uint32_t ts = time_utils_get_utc();
   184a0:	4b2d      	ldr	r3, [pc, #180]	; (18558 <config_get_client_password+0xd4>)
   184a2:	4798      	blx	r3
   184a4:	0003      	movs	r3, r0
   184a6:	613b      	str	r3, [r7, #16]

        rv = atcab_init(&cfg_ateccx08a_i2c_default);
   184a8:	4b2c      	ldr	r3, [pc, #176]	; (1855c <config_get_client_password+0xd8>)
   184aa:	0018      	movs	r0, r3
   184ac:	4b2c      	ldr	r3, [pc, #176]	; (18560 <config_get_client_password+0xdc>)
   184ae:	4798      	blx	r3
   184b0:	0003      	movs	r3, r0
   184b2:	617b      	str	r3, [r7, #20]
        if(ATCA_SUCCESS != rv)
   184b4:	697b      	ldr	r3, [r7, #20]
   184b6:	2b00      	cmp	r3, #0
   184b8:	d001      	beq.n	184be <config_get_client_password+0x3a>
        {
            return rv;
   184ba:	697b      	ldr	r3, [r7, #20]
   184bc:	e047      	b.n	1854e <config_get_client_password+0xca>
        }

        /* Build the JWT */
        rv = atca_jwt_init(&jwt, buf, buflen);
   184be:	683b      	ldr	r3, [r7, #0]
   184c0:	b29a      	uxth	r2, r3
   184c2:	6879      	ldr	r1, [r7, #4]
   184c4:	2308      	movs	r3, #8
   184c6:	18fb      	adds	r3, r7, r3
   184c8:	0018      	movs	r0, r3
   184ca:	4b26      	ldr	r3, [pc, #152]	; (18564 <config_get_client_password+0xe0>)
   184cc:	4798      	blx	r3
   184ce:	0003      	movs	r3, r0
   184d0:	617b      	str	r3, [r7, #20]
        if(ATCA_SUCCESS != rv)
   184d2:	697b      	ldr	r3, [r7, #20]
   184d4:	2b00      	cmp	r3, #0
   184d6:	d001      	beq.n	184dc <config_get_client_password+0x58>
        {
            return rv;
   184d8:	697b      	ldr	r3, [r7, #20]
   184da:	e038      	b.n	1854e <config_get_client_password+0xca>
        }

        if(ATCA_SUCCESS != (rv = atca_jwt_add_claim_numeric(&jwt, "iat", ts)))
   184dc:	693a      	ldr	r2, [r7, #16]
   184de:	4922      	ldr	r1, [pc, #136]	; (18568 <config_get_client_password+0xe4>)
   184e0:	2308      	movs	r3, #8
   184e2:	18fb      	adds	r3, r7, r3
   184e4:	0018      	movs	r0, r3
   184e6:	4b21      	ldr	r3, [pc, #132]	; (1856c <config_get_client_password+0xe8>)
   184e8:	4798      	blx	r3
   184ea:	0003      	movs	r3, r0
   184ec:	617b      	str	r3, [r7, #20]
   184ee:	697b      	ldr	r3, [r7, #20]
   184f0:	2b00      	cmp	r3, #0
   184f2:	d001      	beq.n	184f8 <config_get_client_password+0x74>
        {
            return rv;
   184f4:	697b      	ldr	r3, [r7, #20]
   184f6:	e02a      	b.n	1854e <config_get_client_password+0xca>
        }

        if(ATCA_SUCCESS != (rv = atca_jwt_add_claim_numeric(&jwt, "exp", ts + 86400)))
   184f8:	693b      	ldr	r3, [r7, #16]
   184fa:	4a1d      	ldr	r2, [pc, #116]	; (18570 <config_get_client_password+0xec>)
   184fc:	4694      	mov	ip, r2
   184fe:	4463      	add	r3, ip
   18500:	001a      	movs	r2, r3
   18502:	491c      	ldr	r1, [pc, #112]	; (18574 <config_get_client_password+0xf0>)
   18504:	2308      	movs	r3, #8
   18506:	18fb      	adds	r3, r7, r3
   18508:	0018      	movs	r0, r3
   1850a:	4b18      	ldr	r3, [pc, #96]	; (1856c <config_get_client_password+0xe8>)
   1850c:	4798      	blx	r3
   1850e:	0003      	movs	r3, r0
   18510:	617b      	str	r3, [r7, #20]
   18512:	697b      	ldr	r3, [r7, #20]
   18514:	2b00      	cmp	r3, #0
   18516:	d001      	beq.n	1851c <config_get_client_password+0x98>
        {
            return rv;
   18518:	697b      	ldr	r3, [r7, #20]
   1851a:	e018      	b.n	1854e <config_get_client_password+0xca>
        }

        if(ATCA_SUCCESS != (rv = atca_jwt_add_claim_string(&jwt, "aud", config_gcp_project_id)))
   1851c:	4a16      	ldr	r2, [pc, #88]	; (18578 <config_get_client_password+0xf4>)
   1851e:	4917      	ldr	r1, [pc, #92]	; (1857c <config_get_client_password+0xf8>)
   18520:	2308      	movs	r3, #8
   18522:	18fb      	adds	r3, r7, r3
   18524:	0018      	movs	r0, r3
   18526:	4b16      	ldr	r3, [pc, #88]	; (18580 <config_get_client_password+0xfc>)
   18528:	4798      	blx	r3
   1852a:	0003      	movs	r3, r0
   1852c:	617b      	str	r3, [r7, #20]
   1852e:	697b      	ldr	r3, [r7, #20]
   18530:	2b00      	cmp	r3, #0
   18532:	d001      	beq.n	18538 <config_get_client_password+0xb4>
        {
            return rv;
   18534:	697b      	ldr	r3, [r7, #20]
   18536:	e00a      	b.n	1854e <config_get_client_password+0xca>
        }

        rv = atca_jwt_finalize(&jwt, 0);
   18538:	2308      	movs	r3, #8
   1853a:	18fb      	adds	r3, r7, r3
   1853c:	2100      	movs	r1, #0
   1853e:	0018      	movs	r0, r3
   18540:	4b10      	ldr	r3, [pc, #64]	; (18584 <config_get_client_password+0x100>)
   18542:	4798      	blx	r3
   18544:	0003      	movs	r3, r0
   18546:	617b      	str	r3, [r7, #20]

        atcab_release();
   18548:	4b0f      	ldr	r3, [pc, #60]	; (18588 <config_get_client_password+0x104>)
   1854a:	4798      	blx	r3
    }
    return rv;
   1854c:	697b      	ldr	r3, [r7, #20]
}
   1854e:	0018      	movs	r0, r3
   18550:	46bd      	mov	sp, r7
   18552:	b006      	add	sp, #24
   18554:	bd80      	pop	{r7, pc}
   18556:	46c0      	nop			; (mov r8, r8)
   18558:	0001661d 	.word	0x0001661d
   1855c:	20000120 	.word	0x20000120
   18560:	0000fe7d 	.word	0x0000fe7d
   18564:	00012435 	.word	0x00012435
   18568:	00021954 	.word	0x00021954
   1856c:	00012839 	.word	0x00012839
   18570:	00015180 	.word	0x00015180
   18574:	00021958 	.word	0x00021958
   18578:	000218dc 	.word	0x000218dc
   1857c:	0002195c 	.word	0x0002195c
   18580:	00012799 	.word	0x00012799
   18584:	000124fd 	.word	0x000124fd
   18588:	0000ff31 	.word	0x0000ff31

0001858c <config_get_client_pub_topic>:

/* Get the topic id  where the client will be publishing messages */
int config_get_client_pub_topic(char* buf, size_t buflen)
{
   1858c:	b590      	push	{r4, r7, lr}
   1858e:	b085      	sub	sp, #20
   18590:	af00      	add	r7, sp, #0
   18592:	6078      	str	r0, [r7, #4]
   18594:	6039      	str	r1, [r7, #0]
    if(buf && buflen)
   18596:	687b      	ldr	r3, [r7, #4]
   18598:	2b00      	cmp	r3, #0
   1859a:	d018      	beq.n	185ce <config_get_client_pub_topic+0x42>
   1859c:	683b      	ldr	r3, [r7, #0]
   1859e:	2b00      	cmp	r3, #0
   185a0:	d015      	beq.n	185ce <config_get_client_pub_topic+0x42>
    {
        int rv = snprintf(buf, buflen, "/devices/%s/events", config_gcp_thing_id);
   185a2:	4b0e      	ldr	r3, [pc, #56]	; (185dc <config_get_client_pub_topic+0x50>)
   185a4:	4a0e      	ldr	r2, [pc, #56]	; (185e0 <config_get_client_pub_topic+0x54>)
   185a6:	6839      	ldr	r1, [r7, #0]
   185a8:	6878      	ldr	r0, [r7, #4]
   185aa:	4c0e      	ldr	r4, [pc, #56]	; (185e4 <config_get_client_pub_topic+0x58>)
   185ac:	47a0      	blx	r4
   185ae:	0003      	movs	r3, r0
   185b0:	60fb      	str	r3, [r7, #12]

        if(0 < rv && rv < buflen)
   185b2:	68fb      	ldr	r3, [r7, #12]
   185b4:	2b00      	cmp	r3, #0
   185b6:	dd0a      	ble.n	185ce <config_get_client_pub_topic+0x42>
   185b8:	68fa      	ldr	r2, [r7, #12]
   185ba:	683b      	ldr	r3, [r7, #0]
   185bc:	429a      	cmp	r2, r3
   185be:	d206      	bcs.n	185ce <config_get_client_pub_topic+0x42>
        {
            buf[rv] = 0;
   185c0:	68fb      	ldr	r3, [r7, #12]
   185c2:	687a      	ldr	r2, [r7, #4]
   185c4:	18d3      	adds	r3, r2, r3
   185c6:	2200      	movs	r2, #0
   185c8:	701a      	strb	r2, [r3, #0]
            return 0;
   185ca:	2300      	movs	r3, #0
   185cc:	e001      	b.n	185d2 <config_get_client_pub_topic+0x46>
        }
    }
    return -1;
   185ce:	2301      	movs	r3, #1
   185d0:	425b      	negs	r3, r3
}
   185d2:	0018      	movs	r0, r3
   185d4:	46bd      	mov	sp, r7
   185d6:	b005      	add	sp, #20
   185d8:	bd90      	pop	{r4, r7, pc}
   185da:	46c0      	nop			; (mov r8, r8)
   185dc:	0002190c 	.word	0x0002190c
   185e0:	00021960 	.word	0x00021960
   185e4:	0001c595 	.word	0x0001c595

000185e8 <config_get_client_sub_topic>:

/* Get the topic id  where the client will be publishing messages */
int config_get_client_sub_topic(char* buf, size_t buflen)
{
   185e8:	b590      	push	{r4, r7, lr}
   185ea:	b085      	sub	sp, #20
   185ec:	af00      	add	r7, sp, #0
   185ee:	6078      	str	r0, [r7, #4]
   185f0:	6039      	str	r1, [r7, #0]
    if(buf && buflen)
   185f2:	687b      	ldr	r3, [r7, #4]
   185f4:	2b00      	cmp	r3, #0
   185f6:	d018      	beq.n	1862a <config_get_client_sub_topic+0x42>
   185f8:	683b      	ldr	r3, [r7, #0]
   185fa:	2b00      	cmp	r3, #0
   185fc:	d015      	beq.n	1862a <config_get_client_sub_topic+0x42>
    {
        int rv = snprintf(buf, buflen, "/devices/%s/config", config_gcp_thing_id);
   185fe:	4b0e      	ldr	r3, [pc, #56]	; (18638 <config_get_client_sub_topic+0x50>)
   18600:	4a0e      	ldr	r2, [pc, #56]	; (1863c <config_get_client_sub_topic+0x54>)
   18602:	6839      	ldr	r1, [r7, #0]
   18604:	6878      	ldr	r0, [r7, #4]
   18606:	4c0e      	ldr	r4, [pc, #56]	; (18640 <config_get_client_sub_topic+0x58>)
   18608:	47a0      	blx	r4
   1860a:	0003      	movs	r3, r0
   1860c:	60fb      	str	r3, [r7, #12]

        if(0 < rv && rv < buflen)
   1860e:	68fb      	ldr	r3, [r7, #12]
   18610:	2b00      	cmp	r3, #0
   18612:	dd0a      	ble.n	1862a <config_get_client_sub_topic+0x42>
   18614:	68fa      	ldr	r2, [r7, #12]
   18616:	683b      	ldr	r3, [r7, #0]
   18618:	429a      	cmp	r2, r3
   1861a:	d206      	bcs.n	1862a <config_get_client_sub_topic+0x42>
        {
            buf[rv] = 0;
   1861c:	68fb      	ldr	r3, [r7, #12]
   1861e:	687a      	ldr	r2, [r7, #4]
   18620:	18d3      	adds	r3, r2, r3
   18622:	2200      	movs	r2, #0
   18624:	701a      	strb	r2, [r3, #0]
            return 0;
   18626:	2300      	movs	r3, #0
   18628:	e001      	b.n	1862e <config_get_client_sub_topic+0x46>
        }
    }
    return -1;
   1862a:	2301      	movs	r3, #1
   1862c:	425b      	negs	r3, r3
}
   1862e:	0018      	movs	r0, r3
   18630:	46bd      	mov	sp, r7
   18632:	b005      	add	sp, #20
   18634:	bd90      	pop	{r4, r7, pc}
   18636:	46c0      	nop			; (mov r8, r8)
   18638:	0002190c 	.word	0x0002190c
   1863c:	00021974 	.word	0x00021974
   18640:	0001c595 	.word	0x0001c595

00018644 <config_get_host_info>:

/* Retrieve the host connection information */
int config_get_host_info(char* buf, size_t buflen, uint16_t * port)
{
   18644:	b590      	push	{r4, r7, lr}
   18646:	b087      	sub	sp, #28
   18648:	af00      	add	r7, sp, #0
   1864a:	60f8      	str	r0, [r7, #12]
   1864c:	60b9      	str	r1, [r7, #8]
   1864e:	607a      	str	r2, [r7, #4]
    int rv;

    if(!buf || !buflen || !port)
   18650:	68fb      	ldr	r3, [r7, #12]
   18652:	2b00      	cmp	r3, #0
   18654:	d005      	beq.n	18662 <config_get_host_info+0x1e>
   18656:	68bb      	ldr	r3, [r7, #8]
   18658:	2b00      	cmp	r3, #0
   1865a:	d002      	beq.n	18662 <config_get_host_info+0x1e>
   1865c:	687b      	ldr	r3, [r7, #4]
   1865e:	2b00      	cmp	r3, #0
   18660:	d102      	bne.n	18668 <config_get_host_info+0x24>
    {
        return -1;
   18662:	2301      	movs	r3, #1
   18664:	425b      	negs	r3, r3
   18666:	e01c      	b.n	186a2 <config_get_host_info+0x5e>
    }

    *port = config_gcp_mqtt_port;
   18668:	23bc      	movs	r3, #188	; 0xbc
   1866a:	33ff      	adds	r3, #255	; 0xff
   1866c:	b29a      	uxth	r2, r3
   1866e:	687b      	ldr	r3, [r7, #4]
   18670:	801a      	strh	r2, [r3, #0]

    rv = snprintf(buf, buflen, "%s", config_gcp_host_name);
   18672:	4b0e      	ldr	r3, [pc, #56]	; (186ac <config_get_host_info+0x68>)
   18674:	4a0e      	ldr	r2, [pc, #56]	; (186b0 <config_get_host_info+0x6c>)
   18676:	68b9      	ldr	r1, [r7, #8]
   18678:	68f8      	ldr	r0, [r7, #12]
   1867a:	4c0e      	ldr	r4, [pc, #56]	; (186b4 <config_get_host_info+0x70>)
   1867c:	47a0      	blx	r4
   1867e:	0003      	movs	r3, r0
   18680:	617b      	str	r3, [r7, #20]

    if(0 < rv && rv < buflen)
   18682:	697b      	ldr	r3, [r7, #20]
   18684:	2b00      	cmp	r3, #0
   18686:	dd0a      	ble.n	1869e <config_get_host_info+0x5a>
   18688:	697a      	ldr	r2, [r7, #20]
   1868a:	68bb      	ldr	r3, [r7, #8]
   1868c:	429a      	cmp	r2, r3
   1868e:	d206      	bcs.n	1869e <config_get_host_info+0x5a>
    {
        buf[rv] = 0;
   18690:	697b      	ldr	r3, [r7, #20]
   18692:	68fa      	ldr	r2, [r7, #12]
   18694:	18d3      	adds	r3, r2, r3
   18696:	2200      	movs	r2, #0
   18698:	701a      	strb	r2, [r3, #0]
        return 0;
   1869a:	2300      	movs	r3, #0
   1869c:	e001      	b.n	186a2 <config_get_host_info+0x5e>
    }
    else
    {
        /* Failed */
        return -1;
   1869e:	2301      	movs	r3, #1
   186a0:	425b      	negs	r3, r3
    }
}
   186a2:	0018      	movs	r0, r3
   186a4:	46bd      	mov	sp, r7
   186a6:	b007      	add	sp, #28
   186a8:	bd90      	pop	{r4, r7, pc}
   186aa:	46c0      	nop			; (mov r8, r8)
   186ac:	000218c8 	.word	0x000218c8
   186b0:	00021988 	.word	0x00021988
   186b4:	0001c595 	.word	0x0001c595

000186b8 <config_print_public_key>:
const uint8_t public_key_x509_header[] = { 0x30, 0x59, 0x30, 0x13, 0x06, 0x07, 0x2A, 0x86,
                                           0x48, 0xCE, 0x3D, 0x02, 0x01, 0x06, 0x08, 0x2A,
                                           0x86, 0x48, 0xCE, 0x3D, 0x03, 0x01, 0x07, 0x03, 
                                           0x42, 0x00, 0x04 };
int config_print_public_key(void)
{
   186b8:	b5b0      	push	{r4, r5, r7, lr}
   186ba:	b0a4      	sub	sp, #144	; 0x90
   186bc:	af00      	add	r7, sp, #0
    uint8_t buf[128];
    uint8_t * tmp;
    size_t buf_len = sizeof(buf);
   186be:	2380      	movs	r3, #128	; 0x80
   186c0:	607b      	str	r3, [r7, #4]
    int i;

    ATCA_STATUS rv = atcab_init(&cfg_ateccx08a_i2c_default);
   186c2:	238f      	movs	r3, #143	; 0x8f
   186c4:	18fc      	adds	r4, r7, r3
   186c6:	4b2e      	ldr	r3, [pc, #184]	; (18780 <config_print_public_key+0xc8>)
   186c8:	0018      	movs	r0, r3
   186ca:	4b2e      	ldr	r3, [pc, #184]	; (18784 <config_print_public_key+0xcc>)
   186cc:	4798      	blx	r3
   186ce:	0003      	movs	r3, r0
   186d0:	7023      	strb	r3, [r4, #0]
    if(ATCA_SUCCESS != rv)
   186d2:	238f      	movs	r3, #143	; 0x8f
   186d4:	18fb      	adds	r3, r7, r3
   186d6:	781b      	ldrb	r3, [r3, #0]
   186d8:	2b00      	cmp	r3, #0
   186da:	d003      	beq.n	186e4 <config_print_public_key+0x2c>
    {
        return rv;
   186dc:	238f      	movs	r3, #143	; 0x8f
   186de:	18fb      	adds	r3, r7, r3
   186e0:	781b      	ldrb	r3, [r3, #0]
   186e2:	e048      	b.n	18776 <config_print_public_key+0xbe>
    }

    /* Calculate where the raw data will fit into the buffer */
    tmp = buf + sizeof(buf) - ATCA_PUB_KEY_SIZE - sizeof(public_key_x509_header);
   186e4:	2308      	movs	r3, #8
   186e6:	18fb      	adds	r3, r7, r3
   186e8:	3325      	adds	r3, #37	; 0x25
   186ea:	2288      	movs	r2, #136	; 0x88
   186ec:	18ba      	adds	r2, r7, r2
   186ee:	6013      	str	r3, [r2, #0]

    /* Copy the header */
    memcpy(tmp, public_key_x509_header, sizeof(public_key_x509_header));
   186f0:	2388      	movs	r3, #136	; 0x88
   186f2:	18fb      	adds	r3, r7, r3
   186f4:	681a      	ldr	r2, [r3, #0]
   186f6:	4b24      	ldr	r3, [pc, #144]	; (18788 <config_print_public_key+0xd0>)
   186f8:	0010      	movs	r0, r2
   186fa:	0019      	movs	r1, r3
   186fc:	231b      	movs	r3, #27
   186fe:	001a      	movs	r2, r3
   18700:	4b22      	ldr	r3, [pc, #136]	; (1878c <config_print_public_key+0xd4>)
   18702:	4798      	blx	r3

    /* Get public key without private key generation */
    rv = atcab_get_pubkey(0, tmp + sizeof(public_key_x509_header));
   18704:	2388      	movs	r3, #136	; 0x88
   18706:	18fb      	adds	r3, r7, r3
   18708:	681b      	ldr	r3, [r3, #0]
   1870a:	331b      	adds	r3, #27
   1870c:	228f      	movs	r2, #143	; 0x8f
   1870e:	18bc      	adds	r4, r7, r2
   18710:	0019      	movs	r1, r3
   18712:	2000      	movs	r0, #0
   18714:	4b1e      	ldr	r3, [pc, #120]	; (18790 <config_print_public_key+0xd8>)
   18716:	4798      	blx	r3
   18718:	0003      	movs	r3, r0
   1871a:	7023      	strb	r3, [r4, #0]

    atcab_release();
   1871c:	4b1d      	ldr	r3, [pc, #116]	; (18794 <config_print_public_key+0xdc>)
   1871e:	4798      	blx	r3

    if (ATCA_SUCCESS != rv ) {
   18720:	238f      	movs	r3, #143	; 0x8f
   18722:	18fb      	adds	r3, r7, r3
   18724:	781b      	ldrb	r3, [r3, #0]
   18726:	2b00      	cmp	r3, #0
   18728:	d003      	beq.n	18732 <config_print_public_key+0x7a>
        return rv;
   1872a:	238f      	movs	r3, #143	; 0x8f
   1872c:	18fb      	adds	r3, r7, r3
   1872e:	781b      	ldrb	r3, [r3, #0]
   18730:	e021      	b.n	18776 <config_print_public_key+0xbe>
    }

    /* Convert to base 64 */
    rv = atcab_base64encode(tmp, ATCA_PUB_KEY_SIZE + sizeof(public_key_x509_header), buf, &buf_len);
   18732:	238f      	movs	r3, #143	; 0x8f
   18734:	18fc      	adds	r4, r7, r3
   18736:	1d3b      	adds	r3, r7, #4
   18738:	2208      	movs	r2, #8
   1873a:	18ba      	adds	r2, r7, r2
   1873c:	2188      	movs	r1, #136	; 0x88
   1873e:	1879      	adds	r1, r7, r1
   18740:	6808      	ldr	r0, [r1, #0]
   18742:	215b      	movs	r1, #91	; 0x5b
   18744:	4d14      	ldr	r5, [pc, #80]	; (18798 <config_print_public_key+0xe0>)
   18746:	47a8      	blx	r5
   18748:	0003      	movs	r3, r0
   1874a:	7023      	strb	r3, [r4, #0]

    if(ATCA_SUCCESS != rv)
   1874c:	238f      	movs	r3, #143	; 0x8f
   1874e:	18fb      	adds	r3, r7, r3
   18750:	781b      	ldrb	r3, [r3, #0]
   18752:	2b00      	cmp	r3, #0
   18754:	d003      	beq.n	1875e <config_print_public_key+0xa6>
    {
        return rv;
   18756:	238f      	movs	r3, #143	; 0x8f
   18758:	18fb      	adds	r3, r7, r3
   1875a:	781b      	ldrb	r3, [r3, #0]
   1875c:	e00b      	b.n	18776 <config_print_public_key+0xbe>
    }

    /* Add a null terminator */
    buf[buf_len] = 0;
   1875e:	687b      	ldr	r3, [r7, #4]
   18760:	2208      	movs	r2, #8
   18762:	18ba      	adds	r2, r7, r2
   18764:	2100      	movs	r1, #0
   18766:	54d1      	strb	r1, [r2, r3]

    /* Print out the key */
    DEBUG_PRINTF("-----BEGIN PUBLIC KEY-----\r\n%s\r\n-----END PUBLIC KEY-----\r\n", buf);
   18768:	2308      	movs	r3, #8
   1876a:	18fa      	adds	r2, r7, r3
   1876c:	4b0b      	ldr	r3, [pc, #44]	; (1879c <config_print_public_key+0xe4>)
   1876e:	0011      	movs	r1, r2
   18770:	0018      	movs	r0, r3
   18772:	4b0b      	ldr	r3, [pc, #44]	; (187a0 <config_print_public_key+0xe8>)
   18774:	4798      	blx	r3

   18776:	0018      	movs	r0, r3
   18778:	46bd      	mov	sp, r7
   1877a:	b024      	add	sp, #144	; 0x90
   1877c:	bdb0      	pop	{r4, r5, r7, pc}
   1877e:	46c0      	nop			; (mov r8, r8)
   18780:	20000120 	.word	0x20000120
   18784:	0000fe7d 	.word	0x0000fe7d
   18788:	000219c8 	.word	0x000219c8
   1878c:	0001c13d 	.word	0x0001c13d
   18790:	0001122d 	.word	0x0001122d
   18794:	0000ff31 	.word	0x0000ff31
   18798:	000106c1 	.word	0x000106c1
   1879c:	0002198c 	.word	0x0002198c
   187a0:	0001c2d5 	.word	0x0001c2d5

000187a4 <atca_kit_get_rx_buffer>:

/** \brief This function returns the rx buffer.
 *  \return pointer to the current rx buffer index
 */
uint8_t* atca_kit_get_rx_buffer(void)
{
   187a4:	b580      	push	{r7, lr}
   187a6:	af00      	add	r7, sp, #0
	return pucUsbRxBuffer;
   187a8:	4b01      	ldr	r3, [pc, #4]	; (187b0 <atca_kit_get_rx_buffer+0xc>)
}
   187aa:	0018      	movs	r0, r3
   187ac:	46bd      	mov	sp, r7
   187ae:	bd80      	pop	{r7, pc}
   187b0:	200014c0 	.word	0x200014c0

000187b4 <atca_kit_get_tx_buffer>:

uint8_t* atca_kit_get_tx_buffer(void)
{
   187b4:	b580      	push	{r7, lr}
   187b6:	af00      	add	r7, sp, #0
	return pucUsbTxBuffer;
   187b8:	4b01      	ldr	r3, [pc, #4]	; (187c0 <atca_kit_get_tx_buffer+0xc>)
}
   187ba:	0018      	movs	r0, r3
   187bc:	46bd      	mov	sp, r7
   187be:	bd80      	pop	{r7, pc}
   187c0:	20001dbc 	.word	0x20001dbc

000187c4 <atca_kit_lock>:

bool atca_kit_lock(void)
{
   187c4:	b580      	push	{r7, lr}
   187c6:	af00      	add	r7, sp, #0
    return atca_kit_holdoff;
   187c8:	4b03      	ldr	r3, [pc, #12]	; (187d8 <atca_kit_lock+0x14>)
   187ca:	681b      	ldr	r3, [r3, #0]
   187cc:	1e5a      	subs	r2, r3, #1
   187ce:	4193      	sbcs	r3, r2
   187d0:	b2db      	uxtb	r3, r3
}
   187d2:	0018      	movs	r0, r3
   187d4:	46bd      	mov	sp, r7
   187d6:	bd80      	pop	{r7, pc}
   187d8:	200026bc 	.word	0x200026bc

000187dc <atca_kit_counter_set>:

static void atca_kit_counter_set(uint32_t val)
{
   187dc:	b580      	push	{r7, lr}
   187de:	b082      	sub	sp, #8
   187e0:	af00      	add	r7, sp, #0
   187e2:	6078      	str	r0, [r7, #4]
    /* Convert to loop time*/
    atca_kit_holdoff = val / TIMER_UPDATE_PERIOD;
   187e4:	687a      	ldr	r2, [r7, #4]
   187e6:	4b0b      	ldr	r3, [pc, #44]	; (18814 <atca_kit_counter_set+0x38>)
   187e8:	2164      	movs	r1, #100	; 0x64
   187ea:	0010      	movs	r0, r2
   187ec:	4798      	blx	r3
   187ee:	0003      	movs	r3, r0
   187f0:	001a      	movs	r2, r3
   187f2:	4b09      	ldr	r3, [pc, #36]	; (18818 <atca_kit_counter_set+0x3c>)
   187f4:	601a      	str	r2, [r3, #0]

    if(val && !atca_kit_holdoff)
   187f6:	687b      	ldr	r3, [r7, #4]
   187f8:	2b00      	cmp	r3, #0
   187fa:	d006      	beq.n	1880a <atca_kit_counter_set+0x2e>
   187fc:	4b06      	ldr	r3, [pc, #24]	; (18818 <atca_kit_counter_set+0x3c>)
   187fe:	681b      	ldr	r3, [r3, #0]
   18800:	2b00      	cmp	r3, #0
   18802:	d102      	bne.n	1880a <atca_kit_counter_set+0x2e>
    {
        atca_kit_holdoff = 1;
   18804:	4b04      	ldr	r3, [pc, #16]	; (18818 <atca_kit_counter_set+0x3c>)
   18806:	2201      	movs	r2, #1
   18808:	601a      	str	r2, [r3, #0]
    }
}
   1880a:	46c0      	nop			; (mov r8, r8)
   1880c:	46bd      	mov	sp, r7
   1880e:	b002      	add	sp, #8
   18810:	bd80      	pop	{r7, pc}
   18812:	46c0      	nop			; (mov r8, r8)
   18814:	00019cd9 	.word	0x00019cd9
   18818:	200026bc 	.word	0x200026bc

0001881c <atca_kit_timer_update>:

/* Must be called on the TIMER_UPDATE_PERIOD */
void atca_kit_timer_update(void)
{
   1881c:	b580      	push	{r7, lr}
   1881e:	af00      	add	r7, sp, #0
    if(atca_kit_holdoff)
   18820:	4b05      	ldr	r3, [pc, #20]	; (18838 <atca_kit_timer_update+0x1c>)
   18822:	681b      	ldr	r3, [r3, #0]
   18824:	2b00      	cmp	r3, #0
   18826:	d004      	beq.n	18832 <atca_kit_timer_update+0x16>
    {
        atca_kit_holdoff--;
   18828:	4b03      	ldr	r3, [pc, #12]	; (18838 <atca_kit_timer_update+0x1c>)
   1882a:	681b      	ldr	r3, [r3, #0]
   1882c:	1e5a      	subs	r2, r3, #1
   1882e:	4b02      	ldr	r3, [pc, #8]	; (18838 <atca_kit_timer_update+0x1c>)
   18830:	601a      	str	r2, [r3, #0]
    }
}
   18832:	46c0      	nop			; (mov r8, r8)
   18834:	46bd      	mov	sp, r7
   18836:	bd80      	pop	{r7, pc}
   18838:	200026bc 	.word	0x200026bc

0001883c <atca_kit_convert_nibble_to_ascii>:
/** \brief This function converts a nibble to Hex-ASCII.
 * \param[in] nibble nibble value to be converted
 * \return ASCII value
**/
uint8_t atca_kit_convert_nibble_to_ascii(uint8_t nibble)
{
   1883c:	b580      	push	{r7, lr}
   1883e:	b082      	sub	sp, #8
   18840:	af00      	add	r7, sp, #0
   18842:	0002      	movs	r2, r0
   18844:	1dfb      	adds	r3, r7, #7
   18846:	701a      	strb	r2, [r3, #0]
    nibble &= 0x0F;
   18848:	1dfb      	adds	r3, r7, #7
   1884a:	1dfa      	adds	r2, r7, #7
   1884c:	7812      	ldrb	r2, [r2, #0]
   1884e:	210f      	movs	r1, #15
   18850:	400a      	ands	r2, r1
   18852:	701a      	strb	r2, [r3, #0]
    if (nibble <= 0x09 )
   18854:	1dfb      	adds	r3, r7, #7
   18856:	781b      	ldrb	r3, [r3, #0]
   18858:	2b09      	cmp	r3, #9
   1885a:	d805      	bhi.n	18868 <atca_kit_convert_nibble_to_ascii+0x2c>
        nibble += '0';
   1885c:	1dfb      	adds	r3, r7, #7
   1885e:	1dfa      	adds	r2, r7, #7
   18860:	7812      	ldrb	r2, [r2, #0]
   18862:	3230      	adds	r2, #48	; 0x30
   18864:	701a      	strb	r2, [r3, #0]
   18866:	e004      	b.n	18872 <atca_kit_convert_nibble_to_ascii+0x36>
    else
        nibble += ('A' - 10);
   18868:	1dfb      	adds	r3, r7, #7
   1886a:	1dfa      	adds	r2, r7, #7
   1886c:	7812      	ldrb	r2, [r2, #0]
   1886e:	3237      	adds	r2, #55	; 0x37
   18870:	701a      	strb	r2, [r3, #0]
    return nibble;
   18872:	1dfb      	adds	r3, r7, #7
   18874:	781b      	ldrb	r3, [r3, #0]
}
   18876:	0018      	movs	r0, r3
   18878:	46bd      	mov	sp, r7
   1887a:	b002      	add	sp, #8
   1887c:	bd80      	pop	{r7, pc}

0001887e <atca_kit_convert_ascii_to_nibble>:
/** \brief This function converts an ASCII character to a nibble.
 * \param[in] ascii ASCII value to be converted
 * \return nibble value
**/
uint8_t atca_kit_convert_ascii_to_nibble(uint8_t ascii)
{
   1887e:	b580      	push	{r7, lr}
   18880:	b082      	sub	sp, #8
   18882:	af00      	add	r7, sp, #0
   18884:	0002      	movs	r2, r0
   18886:	1dfb      	adds	r3, r7, #7
   18888:	701a      	strb	r2, [r3, #0]
    if ((ascii <= '9') && (ascii >= '0'))
   1888a:	1dfb      	adds	r3, r7, #7
   1888c:	781b      	ldrb	r3, [r3, #0]
   1888e:	2b39      	cmp	r3, #57	; 0x39
   18890:	d809      	bhi.n	188a6 <atca_kit_convert_ascii_to_nibble+0x28>
   18892:	1dfb      	adds	r3, r7, #7
   18894:	781b      	ldrb	r3, [r3, #0]
   18896:	2b2f      	cmp	r3, #47	; 0x2f
   18898:	d905      	bls.n	188a6 <atca_kit_convert_ascii_to_nibble+0x28>
        ascii -= '0';
   1889a:	1dfb      	adds	r3, r7, #7
   1889c:	1dfa      	adds	r2, r7, #7
   1889e:	7812      	ldrb	r2, [r2, #0]
   188a0:	3a30      	subs	r2, #48	; 0x30
   188a2:	701a      	strb	r2, [r3, #0]
   188a4:	e01e      	b.n	188e4 <atca_kit_convert_ascii_to_nibble+0x66>
    else if ((ascii <= 'F' ) && (ascii >= 'A'))
   188a6:	1dfb      	adds	r3, r7, #7
   188a8:	781b      	ldrb	r3, [r3, #0]
   188aa:	2b46      	cmp	r3, #70	; 0x46
   188ac:	d809      	bhi.n	188c2 <atca_kit_convert_ascii_to_nibble+0x44>
   188ae:	1dfb      	adds	r3, r7, #7
   188b0:	781b      	ldrb	r3, [r3, #0]
   188b2:	2b40      	cmp	r3, #64	; 0x40
   188b4:	d905      	bls.n	188c2 <atca_kit_convert_ascii_to_nibble+0x44>
        ascii -= ('A' - 10);
   188b6:	1dfb      	adds	r3, r7, #7
   188b8:	1dfa      	adds	r2, r7, #7
   188ba:	7812      	ldrb	r2, [r2, #0]
   188bc:	3a37      	subs	r2, #55	; 0x37
   188be:	701a      	strb	r2, [r3, #0]
   188c0:	e010      	b.n	188e4 <atca_kit_convert_ascii_to_nibble+0x66>
    else if ((ascii <= 'f') && (ascii >= 'a'))
   188c2:	1dfb      	adds	r3, r7, #7
   188c4:	781b      	ldrb	r3, [r3, #0]
   188c6:	2b66      	cmp	r3, #102	; 0x66
   188c8:	d809      	bhi.n	188de <atca_kit_convert_ascii_to_nibble+0x60>
   188ca:	1dfb      	adds	r3, r7, #7
   188cc:	781b      	ldrb	r3, [r3, #0]
   188ce:	2b60      	cmp	r3, #96	; 0x60
   188d0:	d905      	bls.n	188de <atca_kit_convert_ascii_to_nibble+0x60>
        ascii -= ('a' - 10);
   188d2:	1dfb      	adds	r3, r7, #7
   188d4:	1dfa      	adds	r2, r7, #7
   188d6:	7812      	ldrb	r2, [r2, #0]
   188d8:	3a57      	subs	r2, #87	; 0x57
   188da:	701a      	strb	r2, [r3, #0]
   188dc:	e002      	b.n	188e4 <atca_kit_convert_ascii_to_nibble+0x66>
    else
        ascii = 0;
   188de:	1dfb      	adds	r3, r7, #7
   188e0:	2200      	movs	r2, #0
   188e2:	701a      	strb	r2, [r3, #0]
    return ascii;
   188e4:	1dfb      	adds	r3, r7, #7
   188e6:	781b      	ldrb	r3, [r3, #0]
}
   188e8:	0018      	movs	r0, r3
   188ea:	46bd      	mov	sp, r7
   188ec:	b002      	add	sp, #8
   188ee:	bd80      	pop	{r7, pc}

000188f0 <atca_kit_convert_ascii_to_binary>:
 * \param[in] length number of bytes in buffer
 * \param[in, out] buffer pointer to buffer
 * \return number of bytes in buffer
 */
uint16_t atca_kit_convert_ascii_to_binary(uint16_t length, uint8_t *buffer)
{
   188f0:	b590      	push	{r4, r7, lr}
   188f2:	b085      	sub	sp, #20
   188f4:	af00      	add	r7, sp, #0
   188f6:	0002      	movs	r2, r0
   188f8:	6039      	str	r1, [r7, #0]
   188fa:	1dbb      	adds	r3, r7, #6
   188fc:	801a      	strh	r2, [r3, #0]
	if (length < 2)
   188fe:	1dbb      	adds	r3, r7, #6
   18900:	881b      	ldrh	r3, [r3, #0]
   18902:	2b01      	cmp	r3, #1
   18904:	d801      	bhi.n	1890a <atca_kit_convert_ascii_to_binary+0x1a>
		return 0;
   18906:	2300      	movs	r3, #0
   18908:	e048      	b.n	1899c <atca_kit_convert_ascii_to_binary+0xac>

	uint16_t i, binIndex;

	for (i = 0, binIndex = 0; i < length; i += 2)
   1890a:	230e      	movs	r3, #14
   1890c:	18fb      	adds	r3, r7, r3
   1890e:	2200      	movs	r2, #0
   18910:	801a      	strh	r2, [r3, #0]
   18912:	230c      	movs	r3, #12
   18914:	18fb      	adds	r3, r7, r3
   18916:	2200      	movs	r2, #0
   18918:	801a      	strh	r2, [r3, #0]
   1891a:	e035      	b.n	18988 <atca_kit_convert_ascii_to_binary+0x98>
	{
		buffer[binIndex] = atca_kit_convert_ascii_to_nibble(buffer[i]) << 4;
   1891c:	230c      	movs	r3, #12
   1891e:	18fb      	adds	r3, r7, r3
   18920:	881b      	ldrh	r3, [r3, #0]
   18922:	683a      	ldr	r2, [r7, #0]
   18924:	18d4      	adds	r4, r2, r3
   18926:	230e      	movs	r3, #14
   18928:	18fb      	adds	r3, r7, r3
   1892a:	881b      	ldrh	r3, [r3, #0]
   1892c:	683a      	ldr	r2, [r7, #0]
   1892e:	18d3      	adds	r3, r2, r3
   18930:	781b      	ldrb	r3, [r3, #0]
   18932:	0018      	movs	r0, r3
   18934:	4b1b      	ldr	r3, [pc, #108]	; (189a4 <atca_kit_convert_ascii_to_binary+0xb4>)
   18936:	4798      	blx	r3
   18938:	0003      	movs	r3, r0
   1893a:	011b      	lsls	r3, r3, #4
   1893c:	b2db      	uxtb	r3, r3
   1893e:	7023      	strb	r3, [r4, #0]
		buffer[binIndex++] |= atca_kit_convert_ascii_to_nibble(buffer[i + 1]);
   18940:	230e      	movs	r3, #14
   18942:	18fb      	adds	r3, r7, r3
   18944:	881b      	ldrh	r3, [r3, #0]
   18946:	3301      	adds	r3, #1
   18948:	683a      	ldr	r2, [r7, #0]
   1894a:	18d3      	adds	r3, r2, r3
   1894c:	781b      	ldrb	r3, [r3, #0]
   1894e:	0018      	movs	r0, r3
   18950:	4b14      	ldr	r3, [pc, #80]	; (189a4 <atca_kit_convert_ascii_to_binary+0xb4>)
   18952:	4798      	blx	r3
   18954:	0003      	movs	r3, r0
   18956:	0019      	movs	r1, r3
   18958:	230c      	movs	r3, #12
   1895a:	18fb      	adds	r3, r7, r3
   1895c:	881b      	ldrh	r3, [r3, #0]
   1895e:	220c      	movs	r2, #12
   18960:	18ba      	adds	r2, r7, r2
   18962:	1c58      	adds	r0, r3, #1
   18964:	8010      	strh	r0, [r2, #0]
   18966:	0018      	movs	r0, r3
   18968:	683a      	ldr	r2, [r7, #0]
   1896a:	1812      	adds	r2, r2, r0
   1896c:	0018      	movs	r0, r3
   1896e:	683b      	ldr	r3, [r7, #0]
   18970:	181b      	adds	r3, r3, r0
   18972:	781b      	ldrb	r3, [r3, #0]
   18974:	430b      	orrs	r3, r1
   18976:	b2db      	uxtb	r3, r3
   18978:	7013      	strb	r3, [r2, #0]
	for (i = 0, binIndex = 0; i < length; i += 2)
   1897a:	230e      	movs	r3, #14
   1897c:	18fb      	adds	r3, r7, r3
   1897e:	220e      	movs	r2, #14
   18980:	18ba      	adds	r2, r7, r2
   18982:	8812      	ldrh	r2, [r2, #0]
   18984:	3202      	adds	r2, #2
   18986:	801a      	strh	r2, [r3, #0]
   18988:	230e      	movs	r3, #14
   1898a:	18fa      	adds	r2, r7, r3
   1898c:	1dbb      	adds	r3, r7, #6
   1898e:	8812      	ldrh	r2, [r2, #0]
   18990:	881b      	ldrh	r3, [r3, #0]
   18992:	429a      	cmp	r2, r3
   18994:	d3c2      	bcc.n	1891c <atca_kit_convert_ascii_to_binary+0x2c>
	}

	return binIndex;
   18996:	230c      	movs	r3, #12
   18998:	18fb      	adds	r3, r7, r3
   1899a:	881b      	ldrh	r3, [r3, #0]
}
   1899c:	0018      	movs	r0, r3
   1899e:	46bd      	mov	sp, r7
   189a0:	b005      	add	sp, #20
   189a2:	bd90      	pop	{r4, r7, pc}
   189a4:	0001887f 	.word	0x0001887f

000189a8 <atca_kit_get_device_info>:

device_info_t* atca_kit_get_device_info(uint8_t index) 
{
   189a8:	b580      	push	{r7, lr}
   189aa:	b082      	sub	sp, #8
   189ac:	af00      	add	r7, sp, #0
   189ae:	0002      	movs	r2, r0
   189b0:	1dfb      	adds	r3, r7, #7
   189b2:	701a      	strb	r2, [r3, #0]
	if (index >= device_count)
   189b4:	4b08      	ldr	r3, [pc, #32]	; (189d8 <atca_kit_get_device_info+0x30>)
   189b6:	781b      	ldrb	r3, [r3, #0]
   189b8:	1dfa      	adds	r2, r7, #7
   189ba:	7812      	ldrb	r2, [r2, #0]
   189bc:	429a      	cmp	r2, r3
   189be:	d301      	bcc.n	189c4 <atca_kit_get_device_info+0x1c>
		return NULL;
   189c0:	2300      	movs	r3, #0
   189c2:	e004      	b.n	189ce <atca_kit_get_device_info+0x26>
	return &device_info[index];
   189c4:	1dfb      	adds	r3, r7, #7
   189c6:	781b      	ldrb	r3, [r3, #0]
   189c8:	00da      	lsls	r2, r3, #3
   189ca:	4b04      	ldr	r3, [pc, #16]	; (189dc <atca_kit_get_device_info+0x34>)
   189cc:	18d3      	adds	r3, r2, r3
}
   189ce:	0018      	movs	r0, r3
   189d0:	46bd      	mov	sp, r7
   189d2:	b002      	add	sp, #8
   189d4:	bd80      	pop	{r7, pc}
   189d6:	46c0      	nop			; (mov r8, r8)
   189d8:	200014be 	.word	0x200014be
   189dc:	20002bf8 	.word	0x20002bf8

000189e0 <atca_kit_detect_I2c_devices>:
		return DEVICE_TYPE_UNKNOWN;
	return device_info[index].device_type;
}

ATCA_STATUS atca_kit_detect_I2c_devices()
{
   189e0:	b590      	push	{r4, r7, lr}
   189e2:	b083      	sub	sp, #12
   189e4:	af00      	add	r7, sp, #0
	ATCA_STATUS status = ATCA_NO_DEVICES;
   189e6:	1dfb      	adds	r3, r7, #7
   189e8:	22f9      	movs	r2, #249	; 0xf9
   189ea:	701a      	strb	r2, [r3, #0]
	uint8_t revision[4];
	uint8_t i;

	status = atcab_init( &cfg_ateccx08a_i2c_default );
   189ec:	1dfc      	adds	r4, r7, #7
   189ee:	4b45      	ldr	r3, [pc, #276]	; (18b04 <atca_kit_detect_I2c_devices+0x124>)
   189f0:	0018      	movs	r0, r3
   189f2:	4b45      	ldr	r3, [pc, #276]	; (18b08 <atca_kit_detect_I2c_devices+0x128>)
   189f4:	4798      	blx	r3
   189f6:	0003      	movs	r3, r0
   189f8:	7023      	strb	r3, [r4, #0]
	for (i=0xB0; i<0xC8 && status; i+=2)
   189fa:	1dbb      	adds	r3, r7, #6
   189fc:	22b0      	movs	r2, #176	; 0xb0
   189fe:	701a      	strb	r2, [r3, #0]
   18a00:	e00f      	b.n	18a22 <atca_kit_detect_I2c_devices+0x42>
	{
		cfg_ateccx08a_i2c_default.atcai2c.slave_address = i;
   18a02:	4b40      	ldr	r3, [pc, #256]	; (18b04 <atca_kit_detect_I2c_devices+0x124>)
   18a04:	1dba      	adds	r2, r7, #6
   18a06:	7812      	ldrb	r2, [r2, #0]
   18a08:	711a      	strb	r2, [r3, #4]
		status = atcab_init( &cfg_ateccx08a_i2c_default );
   18a0a:	1dfc      	adds	r4, r7, #7
   18a0c:	4b3d      	ldr	r3, [pc, #244]	; (18b04 <atca_kit_detect_I2c_devices+0x124>)
   18a0e:	0018      	movs	r0, r3
   18a10:	4b3d      	ldr	r3, [pc, #244]	; (18b08 <atca_kit_detect_I2c_devices+0x128>)
   18a12:	4798      	blx	r3
   18a14:	0003      	movs	r3, r0
   18a16:	7023      	strb	r3, [r4, #0]
	for (i=0xB0; i<0xC8 && status; i+=2)
   18a18:	1dbb      	adds	r3, r7, #6
   18a1a:	1dba      	adds	r2, r7, #6
   18a1c:	7812      	ldrb	r2, [r2, #0]
   18a1e:	3202      	adds	r2, #2
   18a20:	701a      	strb	r2, [r3, #0]
   18a22:	1dbb      	adds	r3, r7, #6
   18a24:	781b      	ldrb	r3, [r3, #0]
   18a26:	2bc7      	cmp	r3, #199	; 0xc7
   18a28:	d803      	bhi.n	18a32 <atca_kit_detect_I2c_devices+0x52>
   18a2a:	1dfb      	adds	r3, r7, #7
   18a2c:	781b      	ldrb	r3, [r3, #0]
   18a2e:	2b00      	cmp	r3, #0
   18a30:	d1e7      	bne.n	18a02 <atca_kit_detect_I2c_devices+0x22>
	}

	/* If the loop terminated before finding a device */
	if (status != ATCA_SUCCESS)
   18a32:	1dfb      	adds	r3, r7, #7
   18a34:	781b      	ldrb	r3, [r3, #0]
   18a36:	2b00      	cmp	r3, #0
   18a38:	d002      	beq.n	18a40 <atca_kit_detect_I2c_devices+0x60>
	{
		return status;
   18a3a:	1dfb      	adds	r3, r7, #7
   18a3c:	781b      	ldrb	r3, [r3, #0]
   18a3e:	e05c      	b.n	18afa <atca_kit_detect_I2c_devices+0x11a>
	}

	/* Verify the device by retrieving the revision */
	status = atcab_info(revision);
   18a40:	1dfc      	adds	r4, r7, #7
   18a42:	003b      	movs	r3, r7
   18a44:	0018      	movs	r0, r3
   18a46:	4b31      	ldr	r3, [pc, #196]	; (18b0c <atca_kit_detect_I2c_devices+0x12c>)
   18a48:	4798      	blx	r3
   18a4a:	0003      	movs	r3, r0
   18a4c:	7023      	strb	r3, [r4, #0]
	if (status != ATCA_SUCCESS)
   18a4e:	1dfb      	adds	r3, r7, #7
   18a50:	781b      	ldrb	r3, [r3, #0]
   18a52:	2b00      	cmp	r3, #0
   18a54:	d002      	beq.n	18a5c <atca_kit_detect_I2c_devices+0x7c>
	{
		return status;
   18a56:	1dfb      	adds	r3, r7, #7
   18a58:	781b      	ldrb	r3, [r3, #0]
   18a5a:	e04e      	b.n	18afa <atca_kit_detect_I2c_devices+0x11a>
	}

	device_info[device_count].address = cfg_ateccx08a_i2c_default.atcai2c.slave_address;
   18a5c:	4b2c      	ldr	r3, [pc, #176]	; (18b10 <atca_kit_detect_I2c_devices+0x130>)
   18a5e:	781b      	ldrb	r3, [r3, #0]
   18a60:	0018      	movs	r0, r3
   18a62:	4b28      	ldr	r3, [pc, #160]	; (18b04 <atca_kit_detect_I2c_devices+0x124>)
   18a64:	7919      	ldrb	r1, [r3, #4]
   18a66:	4a2b      	ldr	r2, [pc, #172]	; (18b14 <atca_kit_detect_I2c_devices+0x134>)
   18a68:	00c3      	lsls	r3, r0, #3
   18a6a:	18d3      	adds	r3, r2, r3
   18a6c:	3302      	adds	r3, #2
   18a6e:	1c0a      	adds	r2, r1, #0
   18a70:	701a      	strb	r2, [r3, #0]
	device_info[device_count].bus_type = DEVKIT_IF_I2C;
   18a72:	4b27      	ldr	r3, [pc, #156]	; (18b10 <atca_kit_detect_I2c_devices+0x130>)
   18a74:	781b      	ldrb	r3, [r3, #0]
   18a76:	001a      	movs	r2, r3
   18a78:	4b26      	ldr	r3, [pc, #152]	; (18b14 <atca_kit_detect_I2c_devices+0x134>)
   18a7a:	00d2      	lsls	r2, r2, #3
   18a7c:	2102      	movs	r1, #2
   18a7e:	54d1      	strb	r1, [r2, r3]

	switch(revision[2])
   18a80:	003b      	movs	r3, r7
   18a82:	789b      	ldrb	r3, [r3, #2]
   18a84:	2b50      	cmp	r3, #80	; 0x50
   18a86:	d002      	beq.n	18a8e <atca_kit_detect_I2c_devices+0xae>
   18a88:	2b60      	cmp	r3, #96	; 0x60
   18a8a:	d00c      	beq.n	18aa6 <atca_kit_detect_I2c_devices+0xc6>
   18a8c:	e017      	b.n	18abe <atca_kit_detect_I2c_devices+0xde>
	{
		case 0x50:
			device_info[device_count].device_type = DEVICE_TYPE_ECC508A;
   18a8e:	4b20      	ldr	r3, [pc, #128]	; (18b10 <atca_kit_detect_I2c_devices+0x130>)
   18a90:	781b      	ldrb	r3, [r3, #0]
   18a92:	4a20      	ldr	r2, [pc, #128]	; (18b14 <atca_kit_detect_I2c_devices+0x134>)
   18a94:	00db      	lsls	r3, r3, #3
   18a96:	18d3      	adds	r3, r2, r3
   18a98:	3301      	adds	r3, #1
   18a9a:	220b      	movs	r2, #11
   18a9c:	701a      	strb	r2, [r3, #0]
			cfg_ateccx08a_i2c_default.devtype = ATECC508A;
   18a9e:	4b19      	ldr	r3, [pc, #100]	; (18b04 <atca_kit_detect_I2c_devices+0x124>)
   18aa0:	2202      	movs	r2, #2
   18aa2:	705a      	strb	r2, [r3, #1]
			break;
   18aa4:	e014      	b.n	18ad0 <atca_kit_detect_I2c_devices+0xf0>
		case 0x60:
			device_info[device_count].device_type = DEVICE_TYPE_ECC608A;
   18aa6:	4b1a      	ldr	r3, [pc, #104]	; (18b10 <atca_kit_detect_I2c_devices+0x130>)
   18aa8:	781b      	ldrb	r3, [r3, #0]
   18aaa:	4a1a      	ldr	r2, [pc, #104]	; (18b14 <atca_kit_detect_I2c_devices+0x134>)
   18aac:	00db      	lsls	r3, r3, #3
   18aae:	18d3      	adds	r3, r2, r3
   18ab0:	3301      	adds	r3, #1
   18ab2:	220c      	movs	r2, #12
   18ab4:	701a      	strb	r2, [r3, #0]
			cfg_ateccx08a_i2c_default.devtype = ATECC608A;
   18ab6:	4b13      	ldr	r3, [pc, #76]	; (18b04 <atca_kit_detect_I2c_devices+0x124>)
   18ab8:	2203      	movs	r2, #3
   18aba:	705a      	strb	r2, [r3, #1]
			break;
   18abc:	e008      	b.n	18ad0 <atca_kit_detect_I2c_devices+0xf0>
		default:
			device_info[device_count].device_type = DEVICE_TYPE_ECC108A;
   18abe:	4b14      	ldr	r3, [pc, #80]	; (18b10 <atca_kit_detect_I2c_devices+0x130>)
   18ac0:	781b      	ldrb	r3, [r3, #0]
   18ac2:	4a14      	ldr	r2, [pc, #80]	; (18b14 <atca_kit_detect_I2c_devices+0x134>)
   18ac4:	00db      	lsls	r3, r3, #3
   18ac6:	18d3      	adds	r3, r2, r3
   18ac8:	3301      	adds	r3, #1
   18aca:	220a      	movs	r2, #10
   18acc:	701a      	strb	r2, [r3, #0]
			break;
   18ace:	46c0      	nop			; (mov r8, r8)
	}
	
	memcpy(device_info[device_count].dev_rev, revision, sizeof(revision));
   18ad0:	4b0f      	ldr	r3, [pc, #60]	; (18b10 <atca_kit_detect_I2c_devices+0x130>)
   18ad2:	781b      	ldrb	r3, [r3, #0]
   18ad4:	00da      	lsls	r2, r3, #3
   18ad6:	4b0f      	ldr	r3, [pc, #60]	; (18b14 <atca_kit_detect_I2c_devices+0x134>)
   18ad8:	18d3      	adds	r3, r2, r3
   18ada:	1d1a      	adds	r2, r3, #4
   18adc:	003b      	movs	r3, r7
   18ade:	0010      	movs	r0, r2
   18ae0:	0019      	movs	r1, r3
   18ae2:	2304      	movs	r3, #4
   18ae4:	001a      	movs	r2, r3
   18ae6:	4b0c      	ldr	r3, [pc, #48]	; (18b18 <atca_kit_detect_I2c_devices+0x138>)
   18ae8:	4798      	blx	r3

	device_count++;
   18aea:	4b09      	ldr	r3, [pc, #36]	; (18b10 <atca_kit_detect_I2c_devices+0x130>)
   18aec:	781b      	ldrb	r3, [r3, #0]
   18aee:	3301      	adds	r3, #1
   18af0:	b2da      	uxtb	r2, r3
   18af2:	4b07      	ldr	r3, [pc, #28]	; (18b10 <atca_kit_detect_I2c_devices+0x130>)
   18af4:	701a      	strb	r2, [r3, #0]
	
	return status;
   18af6:	1dfb      	adds	r3, r7, #7
   18af8:	781b      	ldrb	r3, [r3, #0]
}
   18afa:	0018      	movs	r0, r3
   18afc:	46bd      	mov	sp, r7
   18afe:	b003      	add	sp, #12
   18b00:	bd90      	pop	{r4, r7, pc}
   18b02:	46c0      	nop			; (mov r8, r8)
   18b04:	20000120 	.word	0x20000120
   18b08:	0000fe7d 	.word	0x0000fe7d
   18b0c:	0001131d 	.word	0x0001131d
   18b10:	200014be 	.word	0x200014be
   18b14:	20002bf8 	.word	0x20002bf8
   18b18:	0001c13d 	.word	0x0001c13d

00018b1c <atca_kit_discover_devices>:
 *         SWI, I2C, and SPI. They in turn enter found
 *         devices into the #device_info array.
 * \return interface found
 */
interface_id_t atca_kit_discover_devices()
{
   18b1c:	b590      	push	{r4, r7, lr}
   18b1e:	b083      	sub	sp, #12
   18b20:	af00      	add	r7, sp, #0
	ATCA_STATUS status = ATCA_NO_DEVICES;
   18b22:	1dfb      	adds	r3, r7, #7
   18b24:	22f9      	movs	r2, #249	; 0xf9
   18b26:	701a      	strb	r2, [r3, #0]
	interface_id_t bus_type;

	device_count = 0;
   18b28:	4b10      	ldr	r3, [pc, #64]	; (18b6c <atca_kit_discover_devices+0x50>)
   18b2a:	2200      	movs	r2, #0
   18b2c:	701a      	strb	r2, [r3, #0]
	memset(device_info, 0, sizeof(device_info));
   18b2e:	4b10      	ldr	r3, [pc, #64]	; (18b70 <atca_kit_discover_devices+0x54>)
   18b30:	2208      	movs	r2, #8
   18b32:	2100      	movs	r1, #0
   18b34:	0018      	movs	r0, r3
   18b36:	4b0f      	ldr	r3, [pc, #60]	; (18b74 <atca_kit_discover_devices+0x58>)
   18b38:	4798      	blx	r3

	status = atca_kit_detect_I2c_devices();
   18b3a:	1dfc      	adds	r4, r7, #7
   18b3c:	4b0e      	ldr	r3, [pc, #56]	; (18b78 <atca_kit_discover_devices+0x5c>)
   18b3e:	4798      	blx	r3
   18b40:	0003      	movs	r3, r0
   18b42:	7023      	strb	r3, [r4, #0]

	if (device_count == 0 || status != ATCA_SUCCESS)
   18b44:	4b09      	ldr	r3, [pc, #36]	; (18b6c <atca_kit_discover_devices+0x50>)
   18b46:	781b      	ldrb	r3, [r3, #0]
   18b48:	2b00      	cmp	r3, #0
   18b4a:	d003      	beq.n	18b54 <atca_kit_discover_devices+0x38>
   18b4c:	1dfb      	adds	r3, r7, #7
   18b4e:	781b      	ldrb	r3, [r3, #0]
   18b50:	2b00      	cmp	r3, #0
   18b52:	d001      	beq.n	18b58 <atca_kit_discover_devices+0x3c>
		return DEVKIT_IF_UNKNOWN;
   18b54:	2300      	movs	r3, #0
   18b56:	e005      	b.n	18b64 <atca_kit_discover_devices+0x48>

	bus_type = device_info[0].bus_type;
   18b58:	1dbb      	adds	r3, r7, #6
   18b5a:	4a05      	ldr	r2, [pc, #20]	; (18b70 <atca_kit_discover_devices+0x54>)
   18b5c:	7812      	ldrb	r2, [r2, #0]
   18b5e:	701a      	strb	r2, [r3, #0]

	return bus_type;
   18b60:	1dbb      	adds	r3, r7, #6
   18b62:	781b      	ldrb	r3, [r3, #0]
}
   18b64:	0018      	movs	r0, r3
   18b66:	46bd      	mov	sp, r7
   18b68:	b003      	add	sp, #12
   18b6a:	bd90      	pop	{r4, r7, pc}
   18b6c:	200014be 	.word	0x200014be
   18b70:	20002bf8 	.word	0x20002bf8
   18b74:	0001c173 	.word	0x0001c173
   18b78:	000189e1 	.word	0x000189e1

00018b7c <atca_kit_process_board_app_command>:
    uint8_t second;
};
#pragma pack(pop)

static uint8_t atca_kit_process_board_app_command(uint8_t * rxbuf, uint16_t rxlen, uint8_t * txbuf, uint16_t * txlen)
{
   18b7c:	b5b0      	push	{r4, r5, r7, lr}
   18b7e:	b088      	sub	sp, #32
   18b80:	af02      	add	r7, sp, #8
   18b82:	60f8      	str	r0, [r7, #12]
   18b84:	607a      	str	r2, [r7, #4]
   18b86:	603b      	str	r3, [r7, #0]
   18b88:	230a      	movs	r3, #10
   18b8a:	18fb      	adds	r3, r7, r3
   18b8c:	1c0a      	adds	r2, r1, #0
   18b8e:	801a      	strh	r2, [r3, #0]
    ATCA_STATUS status = ATCA_PARSE_ERROR;
   18b90:	2317      	movs	r3, #23
   18b92:	18fb      	adds	r3, r7, r3
   18b94:	22d2      	movs	r2, #210	; 0xd2
   18b96:	701a      	strb	r2, [r3, #0]

    if(!rxbuf || !rxlen)
   18b98:	68fb      	ldr	r3, [r7, #12]
   18b9a:	2b00      	cmp	r3, #0
   18b9c:	d004      	beq.n	18ba8 <atca_kit_process_board_app_command+0x2c>
   18b9e:	230a      	movs	r3, #10
   18ba0:	18fb      	adds	r3, r7, r3
   18ba2:	881b      	ldrh	r3, [r3, #0]
   18ba4:	2b00      	cmp	r3, #0
   18ba6:	d101      	bne.n	18bac <atca_kit_process_board_app_command+0x30>
    {
        return ATCA_BAD_PARAM;
   18ba8:	23e2      	movs	r3, #226	; 0xe2
   18baa:	e02f      	b.n	18c0c <atca_kit_process_board_app_command+0x90>
    }

    switch(rxbuf[0])
   18bac:	68fb      	ldr	r3, [r7, #12]
   18bae:	781b      	ldrb	r3, [r3, #0]
   18bb0:	2b00      	cmp	r3, #0
   18bb2:	d000      	beq.n	18bb6 <atca_kit_process_board_app_command+0x3a>
                time_utils_set(datetime->year, datetime->month, datetime->day, datetime->hour, datetime->minute, datetime->minute);
                status = ATCA_SUCCESS;
            }
            break;
        default:
            break;
   18bb4:	e027      	b.n	18c06 <atca_kit_process_board_app_command+0x8a>
            if(sizeof(struct kit_app_datetime) < rxlen)
   18bb6:	230a      	movs	r3, #10
   18bb8:	18fb      	adds	r3, r7, r3
   18bba:	881b      	ldrh	r3, [r3, #0]
   18bbc:	2b07      	cmp	r3, #7
   18bbe:	d921      	bls.n	18c04 <atca_kit_process_board_app_command+0x88>
                struct kit_app_datetime * datetime = (struct kit_app_datetime *)&rxbuf[1];
   18bc0:	68fb      	ldr	r3, [r7, #12]
   18bc2:	3301      	adds	r3, #1
   18bc4:	613b      	str	r3, [r7, #16]
                time_utils_set(datetime->year, datetime->month, datetime->day, datetime->hour, datetime->minute, datetime->minute);
   18bc6:	693b      	ldr	r3, [r7, #16]
   18bc8:	781a      	ldrb	r2, [r3, #0]
   18bca:	785b      	ldrb	r3, [r3, #1]
   18bcc:	021b      	lsls	r3, r3, #8
   18bce:	4313      	orrs	r3, r2
   18bd0:	b29b      	uxth	r3, r3
   18bd2:	0018      	movs	r0, r3
   18bd4:	693b      	ldr	r3, [r7, #16]
   18bd6:	789b      	ldrb	r3, [r3, #2]
   18bd8:	0019      	movs	r1, r3
   18bda:	693b      	ldr	r3, [r7, #16]
   18bdc:	78db      	ldrb	r3, [r3, #3]
   18bde:	001c      	movs	r4, r3
   18be0:	693b      	ldr	r3, [r7, #16]
   18be2:	791b      	ldrb	r3, [r3, #4]
   18be4:	001d      	movs	r5, r3
   18be6:	693b      	ldr	r3, [r7, #16]
   18be8:	795b      	ldrb	r3, [r3, #5]
   18bea:	001a      	movs	r2, r3
   18bec:	693b      	ldr	r3, [r7, #16]
   18bee:	795b      	ldrb	r3, [r3, #5]
   18bf0:	9301      	str	r3, [sp, #4]
   18bf2:	9200      	str	r2, [sp, #0]
   18bf4:	002b      	movs	r3, r5
   18bf6:	0022      	movs	r2, r4
   18bf8:	4c06      	ldr	r4, [pc, #24]	; (18c14 <atca_kit_process_board_app_command+0x98>)
   18bfa:	47a0      	blx	r4
                status = ATCA_SUCCESS;
   18bfc:	2317      	movs	r3, #23
   18bfe:	18fb      	adds	r3, r7, r3
   18c00:	2200      	movs	r2, #0
   18c02:	701a      	strb	r2, [r3, #0]
            break;
   18c04:	46c0      	nop			; (mov r8, r8)
    }
    return status;
   18c06:	2317      	movs	r3, #23
   18c08:	18fb      	adds	r3, r7, r3
   18c0a:	781b      	ldrb	r3, [r3, #0]
}
   18c0c:	0018      	movs	r0, r3
   18c0e:	46bd      	mov	sp, r7
   18c10:	b006      	add	sp, #24
   18c12:	bdb0      	pop	{r4, r5, r7, pc}
   18c14:	00016649 	.word	0x00016649

00018c18 <atca_kit_parse_board_commands>:
 * \param[out] responseIsAscii pointer to response type
 * \return the status of the operation
 */
uint8_t atca_kit_parse_board_commands(uint16_t commandLength, uint8_t *command, 
										uint16_t *responseLength, uint8_t *response, uint8_t *responseIsAscii)
{
   18c18:	b5b0      	push	{r4, r5, r7, lr}
   18c1a:	b090      	sub	sp, #64	; 0x40
   18c1c:	af00      	add	r7, sp, #0
   18c1e:	60b9      	str	r1, [r7, #8]
   18c20:	607a      	str	r2, [r7, #4]
   18c22:	603b      	str	r3, [r7, #0]
   18c24:	230e      	movs	r3, #14
   18c26:	18fb      	adds	r3, r7, r3
   18c28:	1c02      	adds	r2, r0, #0
   18c2a:	801a      	strh	r2, [r3, #0]
	uint8_t status = KIT_STATUS_UNKNOWN_COMMAND;
   18c2c:	233f      	movs	r3, #63	; 0x3f
   18c2e:	18fb      	adds	r3, r7, r3
   18c30:	22c0      	movs	r2, #192	; 0xc0
   18c32:	701a      	strb	r2, [r3, #0]
	uint16_t responseIndex = 0;
   18c34:	233c      	movs	r3, #60	; 0x3c
   18c36:	18fb      	adds	r3, r7, r3
   18c38:	2200      	movs	r2, #0
   18c3a:	801a      	strh	r2, [r3, #0]
	uint16_t deviceIndex;
	uint16_t dataLength = 1;
   18c3c:	232a      	movs	r3, #42	; 0x2a
   18c3e:	18fb      	adds	r3, r7, r3
   18c40:	2201      	movs	r2, #1
   18c42:	801a      	strh	r2, [r3, #0]
	uint8_t *rxData[1];
	interface_id_t device_interface = DEVKIT_IF_UNKNOWN;
   18c44:	233b      	movs	r3, #59	; 0x3b
   18c46:	18fb      	adds	r3, r7, r3
   18c48:	2200      	movs	r2, #0
   18c4a:	701a      	strb	r2, [r3, #0]
	device_info_t* dev_info;
	const char *StringInterface[] = {"no_device ", "SPI ", "TWI ", "SWI "};
   18c4c:	2314      	movs	r3, #20
   18c4e:	18fb      	adds	r3, r7, r3
   18c50:	4acb      	ldr	r2, [pc, #812]	; (18f80 <atca_kit_parse_board_commands+0x368>)
   18c52:	ca13      	ldmia	r2!, {r0, r1, r4}
   18c54:	c313      	stmia	r3!, {r0, r1, r4}
   18c56:	6812      	ldr	r2, [r2, #0]
   18c58:	601a      	str	r2, [r3, #0]
	const char *pToken = strchr((char *) command, ':');
   18c5a:	68bb      	ldr	r3, [r7, #8]
   18c5c:	213a      	movs	r1, #58	; 0x3a
   18c5e:	0018      	movs	r0, r3
   18c60:	4bc8      	ldr	r3, [pc, #800]	; (18f84 <atca_kit_parse_board_commands+0x36c>)
   18c62:	4798      	blx	r3
   18c64:	0003      	movs	r3, r0
   18c66:	637b      	str	r3, [r7, #52]	; 0x34

	if (!pToken)
   18c68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   18c6a:	2b00      	cmp	r3, #0
   18c6c:	d103      	bne.n	18c76 <atca_kit_parse_board_commands+0x5e>
		return status;
   18c6e:	233f      	movs	r3, #63	; 0x3f
   18c70:	18fb      	adds	r3, r7, r3
   18c72:	781b      	ldrb	r3, [r3, #0]
   18c74:	e1cd      	b.n	19012 <atca_kit_parse_board_commands+0x3fa>

	*responseIsAscii = 1;
   18c76:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   18c78:	2201      	movs	r2, #1
   18c7a:	701a      	strb	r2, [r3, #0]

	switch(pToken[1]) {
   18c7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   18c7e:	3301      	adds	r3, #1
   18c80:	781b      	ldrb	r3, [r3, #0]
   18c82:	2b64      	cmp	r3, #100	; 0x64
   18c84:	d100      	bne.n	18c88 <atca_kit_parse_board_commands+0x70>
   18c86:	e0cd      	b.n	18e24 <atca_kit_parse_board_commands+0x20c>
   18c88:	dc02      	bgt.n	18c90 <atca_kit_parse_board_commands+0x78>
   18c8a:	2b61      	cmp	r3, #97	; 0x61
   18c8c:	d006      	beq.n	18c9c <atca_kit_parse_board_commands+0x84>
   18c8e:	e16b      	b.n	18f68 <atca_kit_parse_board_commands+0x350>
   18c90:	2b66      	cmp	r3, #102	; 0x66
   18c92:	d022      	beq.n	18cda <atca_kit_parse_board_commands+0xc2>
   18c94:	2b76      	cmp	r3, #118	; 0x76
   18c96:	d100      	bne.n	18c9a <atca_kit_parse_board_commands+0x82>
   18c98:	e16b      	b.n	18f72 <atca_kit_parse_board_commands+0x35a>
   18c9a:	e165      	b.n	18f68 <atca_kit_parse_board_commands+0x350>
        case 'a':
            /* Application commands */
			status = atca_kit_extract_data_load((const char*)pToken, &dataLength, rxData);
   18c9c:	233f      	movs	r3, #63	; 0x3f
   18c9e:	18fc      	adds	r4, r7, r3
   18ca0:	2324      	movs	r3, #36	; 0x24
   18ca2:	18fa      	adds	r2, r7, r3
   18ca4:	232a      	movs	r3, #42	; 0x2a
   18ca6:	18f9      	adds	r1, r7, r3
   18ca8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   18caa:	0018      	movs	r0, r3
   18cac:	4bb6      	ldr	r3, [pc, #728]	; (18f88 <atca_kit_parse_board_commands+0x370>)
   18cae:	4798      	blx	r3
   18cb0:	0003      	movs	r3, r0
   18cb2:	7023      	strb	r3, [r4, #0]
			if (status != KIT_STATUS_SUCCESS)
   18cb4:	233f      	movs	r3, #63	; 0x3f
   18cb6:	18fb      	adds	r3, r7, r3
   18cb8:	781b      	ldrb	r3, [r3, #0]
   18cba:	2b00      	cmp	r3, #0
   18cbc:	d000      	beq.n	18cc0 <atca_kit_parse_board_commands+0xa8>
   18cbe:	e15a      	b.n	18f76 <atca_kit_parse_board_commands+0x35e>
				break;

            status = atca_kit_process_board_app_command(rxData[0], dataLength, response, responseLength);
   18cc0:	6a78      	ldr	r0, [r7, #36]	; 0x24
   18cc2:	232a      	movs	r3, #42	; 0x2a
   18cc4:	18fb      	adds	r3, r7, r3
   18cc6:	8819      	ldrh	r1, [r3, #0]
   18cc8:	233f      	movs	r3, #63	; 0x3f
   18cca:	18fc      	adds	r4, r7, r3
   18ccc:	687b      	ldr	r3, [r7, #4]
   18cce:	683a      	ldr	r2, [r7, #0]
   18cd0:	4dae      	ldr	r5, [pc, #696]	; (18f8c <atca_kit_parse_board_commands+0x374>)
   18cd2:	47a8      	blx	r5
   18cd4:	0003      	movs	r3, r0
   18cd6:	7023      	strb	r3, [r4, #0]

            break;
   18cd8:	e17b      	b.n	18fd2 <atca_kit_parse_board_commands+0x3ba>
			// response (no device): <kit version>, "no_devices"<status>()
			// response (device found): <kit version>, <device type>, <interface><status>(<address>)			
			break;
		
		case 'f':
			status = atca_kit_extract_data_load((const char*)pToken, &dataLength, rxData);
   18cda:	233f      	movs	r3, #63	; 0x3f
   18cdc:	18fc      	adds	r4, r7, r3
   18cde:	2324      	movs	r3, #36	; 0x24
   18ce0:	18fa      	adds	r2, r7, r3
   18ce2:	232a      	movs	r3, #42	; 0x2a
   18ce4:	18f9      	adds	r1, r7, r3
   18ce6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   18ce8:	0018      	movs	r0, r3
   18cea:	4ba7      	ldr	r3, [pc, #668]	; (18f88 <atca_kit_parse_board_commands+0x370>)
   18cec:	4798      	blx	r3
   18cee:	0003      	movs	r3, r0
   18cf0:	7023      	strb	r3, [r4, #0]
			if (status != KIT_STATUS_SUCCESS)
   18cf2:	233f      	movs	r3, #63	; 0x3f
   18cf4:	18fb      	adds	r3, r7, r3
   18cf6:	781b      	ldrb	r3, [r3, #0]
   18cf8:	2b00      	cmp	r3, #0
   18cfa:	d000      	beq.n	18cfe <atca_kit_parse_board_commands+0xe6>
   18cfc:	e13d      	b.n	18f7a <atca_kit_parse_board_commands+0x362>
				break;

			dataLength = 4; // size of versions + status byte
   18cfe:	232a      	movs	r3, #42	; 0x2a
   18d00:	18fb      	adds	r3, r7, r3
   18d02:	2204      	movs	r2, #4
   18d04:	801a      	strh	r2, [r3, #0]

			switch (*rxData[0]) {
   18d06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   18d08:	781b      	ldrb	r3, [r3, #0]
   18d0a:	2b01      	cmp	r3, #1
   18d0c:	d027      	beq.n	18d5e <atca_kit_parse_board_commands+0x146>
   18d0e:	dc02      	bgt.n	18d16 <atca_kit_parse_board_commands+0xfe>
   18d10:	2b00      	cmp	r3, #0
   18d12:	d005      	beq.n	18d20 <atca_kit_parse_board_commands+0x108>
   18d14:	e080      	b.n	18e18 <atca_kit_parse_board_commands+0x200>
   18d16:	2b02      	cmp	r3, #2
   18d18:	d040      	beq.n	18d9c <atca_kit_parse_board_commands+0x184>
   18d1a:	2b03      	cmp	r3, #3
   18d1c:	d05d      	beq.n	18dda <atca_kit_parse_board_commands+0x1c2>
   18d1e:	e07b      	b.n	18e18 <atca_kit_parse_board_commands+0x200>
				case 0: // kit version
					strcpy((char *) response, StringKit);
   18d20:	683a      	ldr	r2, [r7, #0]
   18d22:	4b9b      	ldr	r3, [pc, #620]	; (18f90 <atca_kit_parse_board_commands+0x378>)
   18d24:	0010      	movs	r0, r2
   18d26:	0019      	movs	r1, r3
   18d28:	230e      	movs	r3, #14
   18d2a:	001a      	movs	r2, r3
   18d2c:	4b99      	ldr	r3, [pc, #612]	; (18f94 <atca_kit_parse_board_commands+0x37c>)
   18d2e:	4798      	blx	r3
					responseIndex = strlen((char *) response);
   18d30:	683b      	ldr	r3, [r7, #0]
   18d32:	0018      	movs	r0, r3
   18d34:	4b98      	ldr	r3, [pc, #608]	; (18f98 <atca_kit_parse_board_commands+0x380>)
   18d36:	4798      	blx	r3
   18d38:	0002      	movs	r2, r0
   18d3a:	233c      	movs	r3, #60	; 0x3c
   18d3c:	18fb      	adds	r3, r7, r3
   18d3e:	801a      	strh	r2, [r3, #0]
					memcpy((char *) (response + responseIndex + 1), VersionKit, dataLength);
   18d40:	233c      	movs	r3, #60	; 0x3c
   18d42:	18fb      	adds	r3, r7, r3
   18d44:	881b      	ldrh	r3, [r3, #0]
   18d46:	3301      	adds	r3, #1
   18d48:	683a      	ldr	r2, [r7, #0]
   18d4a:	18d0      	adds	r0, r2, r3
   18d4c:	232a      	movs	r3, #42	; 0x2a
   18d4e:	18fb      	adds	r3, r7, r3
   18d50:	881b      	ldrh	r3, [r3, #0]
   18d52:	001a      	movs	r2, r3
   18d54:	4b91      	ldr	r3, [pc, #580]	; (18f9c <atca_kit_parse_board_commands+0x384>)
   18d56:	0019      	movs	r1, r3
   18d58:	4b8e      	ldr	r3, [pc, #568]	; (18f94 <atca_kit_parse_board_commands+0x37c>)
   18d5a:	4798      	blx	r3
					break;
   18d5c:	e061      	b.n	18e22 <atca_kit_parse_board_commands+0x20a>

				case 1: // SHA204 library version
					strcpy((char *) response, StringSha204);
   18d5e:	683a      	ldr	r2, [r7, #0]
   18d60:	4b8f      	ldr	r3, [pc, #572]	; (18fa0 <atca_kit_parse_board_commands+0x388>)
   18d62:	0010      	movs	r0, r2
   18d64:	0019      	movs	r1, r3
   18d66:	2308      	movs	r3, #8
   18d68:	001a      	movs	r2, r3
   18d6a:	4b8a      	ldr	r3, [pc, #552]	; (18f94 <atca_kit_parse_board_commands+0x37c>)
   18d6c:	4798      	blx	r3
					responseIndex = strlen((char *) response);
   18d6e:	683b      	ldr	r3, [r7, #0]
   18d70:	0018      	movs	r0, r3
   18d72:	4b89      	ldr	r3, [pc, #548]	; (18f98 <atca_kit_parse_board_commands+0x380>)
   18d74:	4798      	blx	r3
   18d76:	0002      	movs	r2, r0
   18d78:	233c      	movs	r3, #60	; 0x3c
   18d7a:	18fb      	adds	r3, r7, r3
   18d7c:	801a      	strh	r2, [r3, #0]
					memcpy((char *) (response + responseIndex + 1), VersionSha204, dataLength);
   18d7e:	233c      	movs	r3, #60	; 0x3c
   18d80:	18fb      	adds	r3, r7, r3
   18d82:	881b      	ldrh	r3, [r3, #0]
   18d84:	3301      	adds	r3, #1
   18d86:	683a      	ldr	r2, [r7, #0]
   18d88:	18d0      	adds	r0, r2, r3
   18d8a:	232a      	movs	r3, #42	; 0x2a
   18d8c:	18fb      	adds	r3, r7, r3
   18d8e:	881b      	ldrh	r3, [r3, #0]
   18d90:	001a      	movs	r2, r3
   18d92:	4b84      	ldr	r3, [pc, #528]	; (18fa4 <atca_kit_parse_board_commands+0x38c>)
   18d94:	0019      	movs	r1, r3
   18d96:	4b7f      	ldr	r3, [pc, #508]	; (18f94 <atca_kit_parse_board_commands+0x37c>)
   18d98:	4798      	blx	r3
					break;
   18d9a:	e042      	b.n	18e22 <atca_kit_parse_board_commands+0x20a>

				case 2: // AES132 library version
					strcpy((char *) response, StringAes132);
   18d9c:	683a      	ldr	r2, [r7, #0]
   18d9e:	4b82      	ldr	r3, [pc, #520]	; (18fa8 <atca_kit_parse_board_commands+0x390>)
   18da0:	0010      	movs	r0, r2
   18da2:	0019      	movs	r1, r3
   18da4:	2308      	movs	r3, #8
   18da6:	001a      	movs	r2, r3
   18da8:	4b7a      	ldr	r3, [pc, #488]	; (18f94 <atca_kit_parse_board_commands+0x37c>)
   18daa:	4798      	blx	r3
					responseIndex = strlen((char *) response);
   18dac:	683b      	ldr	r3, [r7, #0]
   18dae:	0018      	movs	r0, r3
   18db0:	4b79      	ldr	r3, [pc, #484]	; (18f98 <atca_kit_parse_board_commands+0x380>)
   18db2:	4798      	blx	r3
   18db4:	0002      	movs	r2, r0
   18db6:	233c      	movs	r3, #60	; 0x3c
   18db8:	18fb      	adds	r3, r7, r3
   18dba:	801a      	strh	r2, [r3, #0]
					memcpy((char *) (response + responseIndex + 1), VersionAes132, dataLength);
   18dbc:	233c      	movs	r3, #60	; 0x3c
   18dbe:	18fb      	adds	r3, r7, r3
   18dc0:	881b      	ldrh	r3, [r3, #0]
   18dc2:	3301      	adds	r3, #1
   18dc4:	683a      	ldr	r2, [r7, #0]
   18dc6:	18d0      	adds	r0, r2, r3
   18dc8:	232a      	movs	r3, #42	; 0x2a
   18dca:	18fb      	adds	r3, r7, r3
   18dcc:	881b      	ldrh	r3, [r3, #0]
   18dce:	001a      	movs	r2, r3
   18dd0:	4b76      	ldr	r3, [pc, #472]	; (18fac <atca_kit_parse_board_commands+0x394>)
   18dd2:	0019      	movs	r1, r3
   18dd4:	4b6f      	ldr	r3, [pc, #444]	; (18f94 <atca_kit_parse_board_commands+0x37c>)
   18dd6:	4798      	blx	r3
					break;
   18dd8:	e023      	b.n	18e22 <atca_kit_parse_board_commands+0x20a>

				case 3: // ECC508 library version
					strcpy((char *) response, StringEcc508);
   18dda:	683a      	ldr	r2, [r7, #0]
   18ddc:	4b74      	ldr	r3, [pc, #464]	; (18fb0 <atca_kit_parse_board_commands+0x398>)
   18dde:	0010      	movs	r0, r2
   18de0:	0019      	movs	r1, r3
   18de2:	2308      	movs	r3, #8
   18de4:	001a      	movs	r2, r3
   18de6:	4b6b      	ldr	r3, [pc, #428]	; (18f94 <atca_kit_parse_board_commands+0x37c>)
   18de8:	4798      	blx	r3
					responseIndex = strlen((char *) response);
   18dea:	683b      	ldr	r3, [r7, #0]
   18dec:	0018      	movs	r0, r3
   18dee:	4b6a      	ldr	r3, [pc, #424]	; (18f98 <atca_kit_parse_board_commands+0x380>)
   18df0:	4798      	blx	r3
   18df2:	0002      	movs	r2, r0
   18df4:	233c      	movs	r3, #60	; 0x3c
   18df6:	18fb      	adds	r3, r7, r3
   18df8:	801a      	strh	r2, [r3, #0]
					memcpy((char *) (response + responseIndex + 1), VersionEcc508, dataLength);
   18dfa:	233c      	movs	r3, #60	; 0x3c
   18dfc:	18fb      	adds	r3, r7, r3
   18dfe:	881b      	ldrh	r3, [r3, #0]
   18e00:	3301      	adds	r3, #1
   18e02:	683a      	ldr	r2, [r7, #0]
   18e04:	18d0      	adds	r0, r2, r3
   18e06:	232a      	movs	r3, #42	; 0x2a
   18e08:	18fb      	adds	r3, r7, r3
   18e0a:	881b      	ldrh	r3, [r3, #0]
   18e0c:	001a      	movs	r2, r3
   18e0e:	4b69      	ldr	r3, [pc, #420]	; (18fb4 <atca_kit_parse_board_commands+0x39c>)
   18e10:	0019      	movs	r1, r3
   18e12:	4b60      	ldr	r3, [pc, #384]	; (18f94 <atca_kit_parse_board_commands+0x37c>)
   18e14:	4798      	blx	r3
					break;
   18e16:	e004      	b.n	18e22 <atca_kit_parse_board_commands+0x20a>

				default:
					status = KIT_STATUS_INVALID_PARAMS;
   18e18:	233f      	movs	r3, #63	; 0x3f
   18e1a:	18fb      	adds	r3, r7, r3
   18e1c:	22c3      	movs	r2, #195	; 0xc3
   18e1e:	701a      	strb	r2, [r3, #0]
					break;
   18e20:	46c0      	nop			; (mov r8, r8)
			}
			break;
   18e22:	e0d6      	b.n	18fd2 <atca_kit_parse_board_commands+0x3ba>

		case 'd':
			status = atca_kit_extract_data_load((const char*)pToken, &dataLength, rxData);
   18e24:	233f      	movs	r3, #63	; 0x3f
   18e26:	18fc      	adds	r4, r7, r3
   18e28:	2324      	movs	r3, #36	; 0x24
   18e2a:	18fa      	adds	r2, r7, r3
   18e2c:	232a      	movs	r3, #42	; 0x2a
   18e2e:	18f9      	adds	r1, r7, r3
   18e30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   18e32:	0018      	movs	r0, r3
   18e34:	4b54      	ldr	r3, [pc, #336]	; (18f88 <atca_kit_parse_board_commands+0x370>)
   18e36:	4798      	blx	r3
   18e38:	0003      	movs	r3, r0
   18e3a:	7023      	strb	r3, [r4, #0]
			if (status != KIT_STATUS_SUCCESS)
   18e3c:	233f      	movs	r3, #63	; 0x3f
   18e3e:	18fb      	adds	r3, r7, r3
   18e40:	781b      	ldrb	r3, [r3, #0]
   18e42:	2b00      	cmp	r3, #0
   18e44:	d000      	beq.n	18e48 <atca_kit_parse_board_commands+0x230>
   18e46:	e0c3      	b.n	18fd0 <atca_kit_parse_board_commands+0x3b8>
				break;

			device_interface = atca_kit_discover_devices();
   18e48:	233b      	movs	r3, #59	; 0x3b
   18e4a:	18fc      	adds	r4, r7, r3
   18e4c:	4b5a      	ldr	r3, [pc, #360]	; (18fb8 <atca_kit_parse_board_commands+0x3a0>)
   18e4e:	4798      	blx	r3
   18e50:	0003      	movs	r3, r0
   18e52:	7023      	strb	r3, [r4, #0]
			deviceIndex = *rxData[0];
   18e54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   18e56:	781a      	ldrb	r2, [r3, #0]
   18e58:	2332      	movs	r3, #50	; 0x32
   18e5a:	18fb      	adds	r3, r7, r3
   18e5c:	801a      	strh	r2, [r3, #0]
			dev_info = atca_kit_get_device_info(deviceIndex);
   18e5e:	2332      	movs	r3, #50	; 0x32
   18e60:	18fb      	adds	r3, r7, r3
   18e62:	881b      	ldrh	r3, [r3, #0]
   18e64:	b2db      	uxtb	r3, r3
   18e66:	0018      	movs	r0, r3
   18e68:	4b54      	ldr	r3, [pc, #336]	; (18fbc <atca_kit_parse_board_commands+0x3a4>)
   18e6a:	4798      	blx	r3
   18e6c:	0003      	movs	r3, r0
   18e6e:	62fb      	str	r3, [r7, #44]	; 0x2c
			if (!dev_info) {
   18e70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   18e72:	2b00      	cmp	r3, #0
   18e74:	d104      	bne.n	18e80 <atca_kit_parse_board_commands+0x268>
				status = KIT_STATUS_NO_DEVICE;
   18e76:	233f      	movs	r3, #63	; 0x3f
   18e78:	18fb      	adds	r3, r7, r3
   18e7a:	22c5      	movs	r2, #197	; 0xc5
   18e7c:	701a      	strb	r2, [r3, #0]
				break;
   18e7e:	e0a8      	b.n	18fd2 <atca_kit_parse_board_commands+0x3ba>
			}

			switch (dev_info->device_type) {
   18e80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   18e82:	785b      	ldrb	r3, [r3, #1]
   18e84:	2b0c      	cmp	r3, #12
   18e86:	d82c      	bhi.n	18ee2 <atca_kit_parse_board_commands+0x2ca>
   18e88:	009a      	lsls	r2, r3, #2
   18e8a:	4b4d      	ldr	r3, [pc, #308]	; (18fc0 <atca_kit_parse_board_commands+0x3a8>)
   18e8c:	18d3      	adds	r3, r2, r3
   18e8e:	681b      	ldr	r3, [r3, #0]
   18e90:	469f      	mov	pc, r3
				case DEVICE_TYPE_SHA204:
					strcpy((char *) response, StringSha204);
   18e92:	683a      	ldr	r2, [r7, #0]
   18e94:	4b42      	ldr	r3, [pc, #264]	; (18fa0 <atca_kit_parse_board_commands+0x388>)
   18e96:	0010      	movs	r0, r2
   18e98:	0019      	movs	r1, r3
   18e9a:	2308      	movs	r3, #8
   18e9c:	001a      	movs	r2, r3
   18e9e:	4b3d      	ldr	r3, [pc, #244]	; (18f94 <atca_kit_parse_board_commands+0x37c>)
   18ea0:	4798      	blx	r3
					break;
   18ea2:	e027      	b.n	18ef4 <atca_kit_parse_board_commands+0x2dc>

				case DEVICE_TYPE_AES132:
					strcpy((char *) response, StringAes132);
   18ea4:	683a      	ldr	r2, [r7, #0]
   18ea6:	4b40      	ldr	r3, [pc, #256]	; (18fa8 <atca_kit_parse_board_commands+0x390>)
   18ea8:	0010      	movs	r0, r2
   18eaa:	0019      	movs	r1, r3
   18eac:	2308      	movs	r3, #8
   18eae:	001a      	movs	r2, r3
   18eb0:	4b38      	ldr	r3, [pc, #224]	; (18f94 <atca_kit_parse_board_commands+0x37c>)
   18eb2:	4798      	blx	r3
					break;
   18eb4:	e01e      	b.n	18ef4 <atca_kit_parse_board_commands+0x2dc>

				case DEVICE_TYPE_ECC108:
                case DEVICE_TYPE_ECC508A:
                case DEVICE_TYPE_ECC608A:
					strcpy((char *) response, StringEcc508);
   18eb6:	683a      	ldr	r2, [r7, #0]
   18eb8:	4b3d      	ldr	r3, [pc, #244]	; (18fb0 <atca_kit_parse_board_commands+0x398>)
   18eba:	0010      	movs	r0, r2
   18ebc:	0019      	movs	r1, r3
   18ebe:	2308      	movs	r3, #8
   18ec0:	001a      	movs	r2, r3
   18ec2:	4b34      	ldr	r3, [pc, #208]	; (18f94 <atca_kit_parse_board_commands+0x37c>)
   18ec4:	4798      	blx	r3
					break;
   18ec6:	e015      	b.n	18ef4 <atca_kit_parse_board_commands+0x2dc>

				case DEVICE_TYPE_UNKNOWN:
					strcpy((char *) response, StringInterface[0]);
   18ec8:	2314      	movs	r3, #20
   18eca:	18fb      	adds	r3, r7, r3
   18ecc:	681a      	ldr	r2, [r3, #0]
   18ece:	683b      	ldr	r3, [r7, #0]
   18ed0:	0011      	movs	r1, r2
   18ed2:	0018      	movs	r0, r3
   18ed4:	4b3b      	ldr	r3, [pc, #236]	; (18fc4 <atca_kit_parse_board_commands+0x3ac>)
   18ed6:	4798      	blx	r3
					status = KIT_STATUS_NO_DEVICE;
   18ed8:	233f      	movs	r3, #63	; 0x3f
   18eda:	18fb      	adds	r3, r7, r3
   18edc:	22c5      	movs	r2, #197	; 0xc5
   18ede:	701a      	strb	r2, [r3, #0]
					break;
   18ee0:	e008      	b.n	18ef4 <atca_kit_parse_board_commands+0x2dc>

				default:
					strcpy((char *) response, "unknown_device");
   18ee2:	683a      	ldr	r2, [r7, #0]
   18ee4:	4b38      	ldr	r3, [pc, #224]	; (18fc8 <atca_kit_parse_board_commands+0x3b0>)
   18ee6:	0010      	movs	r0, r2
   18ee8:	0019      	movs	r1, r3
   18eea:	230f      	movs	r3, #15
   18eec:	001a      	movs	r2, r3
   18eee:	4b29      	ldr	r3, [pc, #164]	; (18f94 <atca_kit_parse_board_commands+0x37c>)
   18ef0:	4798      	blx	r3
					break;
   18ef2:	46c0      	nop			; (mov r8, r8)
			}


			if (dev_info->bus_type == DEVKIT_IF_UNKNOWN) {
   18ef4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   18ef6:	781b      	ldrb	r3, [r3, #0]
   18ef8:	2b00      	cmp	r3, #0
   18efa:	d108      	bne.n	18f0e <atca_kit_parse_board_commands+0x2f6>
				responseIndex = strlen((char *) response);
   18efc:	683b      	ldr	r3, [r7, #0]
   18efe:	0018      	movs	r0, r3
   18f00:	4b25      	ldr	r3, [pc, #148]	; (18f98 <atca_kit_parse_board_commands+0x380>)
   18f02:	4798      	blx	r3
   18f04:	0002      	movs	r2, r0
   18f06:	233c      	movs	r3, #60	; 0x3c
   18f08:	18fb      	adds	r3, r7, r3
   18f0a:	801a      	strh	r2, [r3, #0]
				break;
   18f0c:	e061      	b.n	18fd2 <atca_kit_parse_board_commands+0x3ba>
			}
			
			// Append interface type to response.
			strcat((char *) response, StringInterface[device_interface]);
   18f0e:	233b      	movs	r3, #59	; 0x3b
   18f10:	18fb      	adds	r3, r7, r3
   18f12:	781a      	ldrb	r2, [r3, #0]
   18f14:	2314      	movs	r3, #20
   18f16:	18fb      	adds	r3, r7, r3
   18f18:	0092      	lsls	r2, r2, #2
   18f1a:	58d2      	ldr	r2, [r2, r3]
   18f1c:	683b      	ldr	r3, [r7, #0]
   18f1e:	0011      	movs	r1, r2
   18f20:	0018      	movs	r0, r3
   18f22:	4b2a      	ldr	r3, [pc, #168]	; (18fcc <atca_kit_parse_board_commands+0x3b4>)
   18f24:	4798      	blx	r3
			responseIndex = strlen((char *) response);
   18f26:	683b      	ldr	r3, [r7, #0]
   18f28:	0018      	movs	r0, r3
   18f2a:	4b1b      	ldr	r3, [pc, #108]	; (18f98 <atca_kit_parse_board_commands+0x380>)
   18f2c:	4798      	blx	r3
   18f2e:	0002      	movs	r2, r0
   18f30:	233c      	movs	r3, #60	; 0x3c
   18f32:	18fb      	adds	r3, r7, r3
   18f34:	801a      	strh	r2, [r3, #0]

			// Append the address (TWI) / index (SWI) of the device.
			// Skip one byte for status.
			dataLength++;
   18f36:	232a      	movs	r3, #42	; 0x2a
   18f38:	18fb      	adds	r3, r7, r3
   18f3a:	881b      	ldrh	r3, [r3, #0]
   18f3c:	3301      	adds	r3, #1
   18f3e:	b29a      	uxth	r2, r3
   18f40:	232a      	movs	r3, #42	; 0x2a
   18f42:	18fb      	adds	r3, r7, r3
   18f44:	801a      	strh	r2, [r3, #0]
			response[responseIndex + 1] = dev_info->bus_type == DEVKIT_IF_I2C ? dev_info->address : dev_info->device_index;
   18f46:	233c      	movs	r3, #60	; 0x3c
   18f48:	18fb      	adds	r3, r7, r3
   18f4a:	881b      	ldrh	r3, [r3, #0]
   18f4c:	3301      	adds	r3, #1
   18f4e:	683a      	ldr	r2, [r7, #0]
   18f50:	18d2      	adds	r2, r2, r3
   18f52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   18f54:	781b      	ldrb	r3, [r3, #0]
   18f56:	2b02      	cmp	r3, #2
   18f58:	d102      	bne.n	18f60 <atca_kit_parse_board_commands+0x348>
   18f5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   18f5c:	789b      	ldrb	r3, [r3, #2]
   18f5e:	e001      	b.n	18f64 <atca_kit_parse_board_commands+0x34c>
   18f60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   18f62:	78db      	ldrb	r3, [r3, #3]
   18f64:	7013      	strb	r3, [r2, #0]
			break;
   18f66:	e034      	b.n	18fd2 <atca_kit_parse_board_commands+0x3ba>

		default:
			status = KIT_STATUS_UNKNOWN_COMMAND;
   18f68:	233f      	movs	r3, #63	; 0x3f
   18f6a:	18fb      	adds	r3, r7, r3
   18f6c:	22c0      	movs	r2, #192	; 0xc0
   18f6e:	701a      	strb	r2, [r3, #0]
			break;
   18f70:	e02f      	b.n	18fd2 <atca_kit_parse_board_commands+0x3ba>
			break;
   18f72:	46c0      	nop			; (mov r8, r8)
   18f74:	e02d      	b.n	18fd2 <atca_kit_parse_board_commands+0x3ba>
				break;
   18f76:	46c0      	nop			; (mov r8, r8)
   18f78:	e02b      	b.n	18fd2 <atca_kit_parse_board_commands+0x3ba>
				break;
   18f7a:	46c0      	nop			; (mov r8, r8)
   18f7c:	e029      	b.n	18fd2 <atca_kit_parse_board_commands+0x3ba>
   18f7e:	46c0      	nop			; (mov r8, r8)
   18f80:	00021a50 	.word	0x00021a50
   18f84:	0001c6ff 	.word	0x0001c6ff
   18f88:	00019825 	.word	0x00019825
   18f8c:	00018b7d 	.word	0x00018b7d
   18f90:	00021a0c 	.word	0x00021a0c
   18f94:	0001c13d 	.word	0x0001c13d
   18f98:	0001c72b 	.word	0x0001c72b
   18f9c:	000219e4 	.word	0x000219e4
   18fa0:	000219f4 	.word	0x000219f4
   18fa4:	000219e8 	.word	0x000219e8
   18fa8:	000219fc 	.word	0x000219fc
   18fac:	000219ec 	.word	0x000219ec
   18fb0:	00021a04 	.word	0x00021a04
   18fb4:	000219f0 	.word	0x000219f0
   18fb8:	00018b1d 	.word	0x00018b1d
   18fbc:	000189a9 	.word	0x000189a9
   18fc0:	00021a60 	.word	0x00021a60
   18fc4:	0001c71b 	.word	0x0001c71b
   18fc8:	00021a1c 	.word	0x00021a1c
   18fcc:	0001c6e5 	.word	0x0001c6e5
				break;
   18fd0:	46c0      	nop			; (mov r8, r8)
			
	}
	
	// Append <status>(<data>).
	response[responseIndex] = status;
   18fd2:	233c      	movs	r3, #60	; 0x3c
   18fd4:	18fb      	adds	r3, r7, r3
   18fd6:	881b      	ldrh	r3, [r3, #0]
   18fd8:	683a      	ldr	r2, [r7, #0]
   18fda:	18d3      	adds	r3, r2, r3
   18fdc:	223f      	movs	r2, #63	; 0x3f
   18fde:	18ba      	adds	r2, r7, r2
   18fe0:	7812      	ldrb	r2, [r2, #0]
   18fe2:	701a      	strb	r2, [r3, #0]
	*responseLength = atca_kit_create_usb_packet(dataLength, &response[responseIndex]) + responseIndex;
   18fe4:	232a      	movs	r3, #42	; 0x2a
   18fe6:	18fb      	adds	r3, r7, r3
   18fe8:	8818      	ldrh	r0, [r3, #0]
   18fea:	233c      	movs	r3, #60	; 0x3c
   18fec:	18fb      	adds	r3, r7, r3
   18fee:	881b      	ldrh	r3, [r3, #0]
   18ff0:	683a      	ldr	r2, [r7, #0]
   18ff2:	18d3      	adds	r3, r2, r3
   18ff4:	0019      	movs	r1, r3
   18ff6:	4b09      	ldr	r3, [pc, #36]	; (1901c <atca_kit_parse_board_commands+0x404>)
   18ff8:	4798      	blx	r3
   18ffa:	0003      	movs	r3, r0
   18ffc:	001a      	movs	r2, r3
   18ffe:	233c      	movs	r3, #60	; 0x3c
   19000:	18fb      	adds	r3, r7, r3
   19002:	881b      	ldrh	r3, [r3, #0]
   19004:	18d3      	adds	r3, r2, r3
   19006:	b29a      	uxth	r2, r3
   19008:	687b      	ldr	r3, [r7, #4]
   1900a:	801a      	strh	r2, [r3, #0]
	
	return status;
   1900c:	233f      	movs	r3, #63	; 0x3f
   1900e:	18fb      	adds	r3, r7, r3
   19010:	781b      	ldrb	r3, [r3, #0]
}
   19012:	0018      	movs	r0, r3
   19014:	46bd      	mov	sp, r7
   19016:	b010      	add	sp, #64	; 0x40
   19018:	bdb0      	pop	{r4, r5, r7, pc}
   1901a:	46c0      	nop			; (mov r8, r8)
   1901c:	000198e1 	.word	0x000198e1

00019020 <atca_kit_get_commands_info>:
 * \param[out] cmd_index is index corresponding to opcode
 * \param[out] rx_length is length of response to be came to device
 * \return ATCA_SUCCESS
 */
uint8_t atca_kit_get_commands_info(uint8_t *tx_buffer, uint8_t *cmd_index, uint16_t *rx_length)
{
   19020:	b580      	push	{r7, lr}
   19022:	b086      	sub	sp, #24
   19024:	af00      	add	r7, sp, #0
   19026:	60f8      	str	r0, [r7, #12]
   19028:	60b9      	str	r1, [r7, #8]
   1902a:	607a      	str	r2, [r7, #4]
	uint8_t status = ATCA_SUCCESS;
   1902c:	2317      	movs	r3, #23
   1902e:	18fb      	adds	r3, r7, r3
   19030:	2200      	movs	r2, #0
   19032:	701a      	strb	r2, [r3, #0]
	uint8_t opCode = tx_buffer[1];
   19034:	2316      	movs	r3, #22
   19036:	18fb      	adds	r3, r7, r3
   19038:	68fa      	ldr	r2, [r7, #12]
   1903a:	7852      	ldrb	r2, [r2, #1]
   1903c:	701a      	strb	r2, [r3, #0]
	uint8_t param1 = tx_buffer[2];
   1903e:	2315      	movs	r3, #21
   19040:	18fb      	adds	r3, r7, r3
   19042:	68fa      	ldr	r2, [r7, #12]
   19044:	7892      	ldrb	r2, [r2, #2]
   19046:	701a      	strb	r2, [r3, #0]
	
	switch (opCode) {
   19048:	2316      	movs	r3, #22
   1904a:	18fb      	adds	r3, r7, r3
   1904c:	781b      	ldrb	r3, [r3, #0]
   1904e:	2b47      	cmp	r3, #71	; 0x47
   19050:	d900      	bls.n	19054 <atca_kit_get_commands_info+0x34>
   19052:	e0ad      	b.n	191b0 <atca_kit_get_commands_info+0x190>
   19054:	009a      	lsls	r2, r3, #2
   19056:	4b5a      	ldr	r3, [pc, #360]	; (191c0 <atca_kit_get_commands_info+0x1a0>)
   19058:	18d3      	adds	r3, r2, r3
   1905a:	681b      	ldr	r3, [r3, #0]
   1905c:	469f      	mov	pc, r3
		
		case ATCA_CHECKMAC:
			*cmd_index = CMD_CHECKMAC;
   1905e:	68bb      	ldr	r3, [r7, #8]
   19060:	2201      	movs	r2, #1
   19062:	701a      	strb	r2, [r3, #0]
			*rx_length = CHECKMAC_RSP_SIZE;
   19064:	687b      	ldr	r3, [r7, #4]
   19066:	2204      	movs	r2, #4
   19068:	801a      	strh	r2, [r3, #0]
			break;
   1906a:	e0a2      	b.n	191b2 <atca_kit_get_commands_info+0x192>
		
		case ATCA_COUNTER:
			*cmd_index = CMD_COUNTER;
   1906c:	68bb      	ldr	r3, [r7, #8]
   1906e:	2202      	movs	r2, #2
   19070:	701a      	strb	r2, [r3, #0]
			*rx_length = COUNTER_RSP_SIZE;
   19072:	687b      	ldr	r3, [r7, #4]
   19074:	2207      	movs	r2, #7
   19076:	801a      	strh	r2, [r3, #0]
			break;
   19078:	e09b      	b.n	191b2 <atca_kit_get_commands_info+0x192>
		
		case ATCA_DERIVE_KEY:
			*cmd_index = CMD_DERIVEKEY;
   1907a:	68bb      	ldr	r3, [r7, #8]
   1907c:	2203      	movs	r2, #3
   1907e:	701a      	strb	r2, [r3, #0]
			*rx_length = DERIVE_KEY_RSP_SIZE;
   19080:	687b      	ldr	r3, [r7, #4]
   19082:	2204      	movs	r2, #4
   19084:	801a      	strh	r2, [r3, #0]
			break;
   19086:	e094      	b.n	191b2 <atca_kit_get_commands_info+0x192>
		
		case ATCA_ECDH:
			*cmd_index = CMD_ECDH;
   19088:	68bb      	ldr	r3, [r7, #8]
   1908a:	2204      	movs	r2, #4
   1908c:	701a      	strb	r2, [r3, #0]
			*rx_length = ECDH_RSP_SIZE;
   1908e:	687b      	ldr	r3, [r7, #4]
   19090:	2243      	movs	r2, #67	; 0x43
   19092:	801a      	strh	r2, [r3, #0]
			break;
   19094:	e08d      	b.n	191b2 <atca_kit_get_commands_info+0x192>
		
		case ATCA_GENDIG:
			*cmd_index = CMD_GENDIG;
   19096:	68bb      	ldr	r3, [r7, #8]
   19098:	2205      	movs	r2, #5
   1909a:	701a      	strb	r2, [r3, #0]
			*rx_length = GENDIG_RSP_SIZE;
   1909c:	687b      	ldr	r3, [r7, #4]
   1909e:	2204      	movs	r2, #4
   190a0:	801a      	strh	r2, [r3, #0]
			break;
   190a2:	e086      	b.n	191b2 <atca_kit_get_commands_info+0x192>
		
		case ATCA_GENKEY:
			*cmd_index = CMD_GENKEY;
   190a4:	68bb      	ldr	r3, [r7, #8]
   190a6:	2206      	movs	r2, #6
   190a8:	701a      	strb	r2, [r3, #0]
			*rx_length = (param1 == GENKEY_MODE_DIGEST)	? GENKEY_RSP_SIZE_SHORT : GENKEY_RSP_SIZE_LONG;
   190aa:	2315      	movs	r3, #21
   190ac:	18fb      	adds	r3, r7, r3
   190ae:	781b      	ldrb	r3, [r3, #0]
   190b0:	2b08      	cmp	r3, #8
   190b2:	d101      	bne.n	190b8 <atca_kit_get_commands_info+0x98>
   190b4:	2204      	movs	r2, #4
   190b6:	e000      	b.n	190ba <atca_kit_get_commands_info+0x9a>
   190b8:	224b      	movs	r2, #75	; 0x4b
   190ba:	687b      	ldr	r3, [r7, #4]
   190bc:	801a      	strh	r2, [r3, #0]
			break;
   190be:	e078      	b.n	191b2 <atca_kit_get_commands_info+0x192>
		
		case ATCA_HMAC:
			*cmd_index = CMD_HMAC;
   190c0:	68bb      	ldr	r3, [r7, #8]
   190c2:	2207      	movs	r2, #7
   190c4:	701a      	strb	r2, [r3, #0]
			*rx_length = HMAC_RSP_SIZE;
   190c6:	687b      	ldr	r3, [r7, #4]
   190c8:	2223      	movs	r2, #35	; 0x23
   190ca:	801a      	strh	r2, [r3, #0]
			break;
   190cc:	e071      	b.n	191b2 <atca_kit_get_commands_info+0x192>
		
		case ATCA_INFO:
			*cmd_index = CMD_INFO;
   190ce:	68bb      	ldr	r3, [r7, #8]
   190d0:	2208      	movs	r2, #8
   190d2:	701a      	strb	r2, [r3, #0]
			*rx_length = INFO_RSP_SIZE;
   190d4:	687b      	ldr	r3, [r7, #4]
   190d6:	2207      	movs	r2, #7
   190d8:	801a      	strh	r2, [r3, #0]
			break;
   190da:	e06a      	b.n	191b2 <atca_kit_get_commands_info+0x192>

		case ATCA_LOCK:
			*cmd_index = CMD_LOCK;
   190dc:	68bb      	ldr	r3, [r7, #8]
   190de:	2209      	movs	r2, #9
   190e0:	701a      	strb	r2, [r3, #0]
			*rx_length = LOCK_RSP_SIZE;
   190e2:	687b      	ldr	r3, [r7, #4]
   190e4:	2204      	movs	r2, #4
   190e6:	801a      	strh	r2, [r3, #0]
			break;
   190e8:	e063      	b.n	191b2 <atca_kit_get_commands_info+0x192>
		
		case ATCA_MAC:
			*cmd_index = CMD_MAC;
   190ea:	68bb      	ldr	r3, [r7, #8]
   190ec:	220a      	movs	r2, #10
   190ee:	701a      	strb	r2, [r3, #0]
			*rx_length = MAC_RSP_SIZE;
   190f0:	687b      	ldr	r3, [r7, #4]
   190f2:	2223      	movs	r2, #35	; 0x23
   190f4:	801a      	strh	r2, [r3, #0]
			break;
   190f6:	e05c      	b.n	191b2 <atca_kit_get_commands_info+0x192>
		
		case ATCA_NONCE:
			*cmd_index = CMD_NONCE;
   190f8:	68bb      	ldr	r3, [r7, #8]
   190fa:	220b      	movs	r2, #11
   190fc:	701a      	strb	r2, [r3, #0]
			*rx_length = (param1 == NONCE_MODE_PASSTHROUGH)	? NONCE_RSP_SIZE_SHORT : NONCE_RSP_SIZE_LONG;
   190fe:	2315      	movs	r3, #21
   19100:	18fb      	adds	r3, r7, r3
   19102:	781b      	ldrb	r3, [r3, #0]
   19104:	2b03      	cmp	r3, #3
   19106:	d101      	bne.n	1910c <atca_kit_get_commands_info+0xec>
   19108:	2204      	movs	r2, #4
   1910a:	e000      	b.n	1910e <atca_kit_get_commands_info+0xee>
   1910c:	2223      	movs	r2, #35	; 0x23
   1910e:	687b      	ldr	r3, [r7, #4]
   19110:	801a      	strh	r2, [r3, #0]
			break;
   19112:	e04e      	b.n	191b2 <atca_kit_get_commands_info+0x192>
		
		case ATCA_PAUSE:
			*cmd_index = CMD_PAUSE;
   19114:	68bb      	ldr	r3, [r7, #8]
   19116:	220c      	movs	r2, #12
   19118:	701a      	strb	r2, [r3, #0]
			*rx_length = PAUSE_RSP_SIZE;
   1911a:	687b      	ldr	r3, [r7, #4]
   1911c:	2204      	movs	r2, #4
   1911e:	801a      	strh	r2, [r3, #0]
			break;
   19120:	e047      	b.n	191b2 <atca_kit_get_commands_info+0x192>
		
		case ATCA_PRIVWRITE:
			*cmd_index = CMD_PRIVWRITE;
   19122:	68bb      	ldr	r3, [r7, #8]
   19124:	220d      	movs	r2, #13
   19126:	701a      	strb	r2, [r3, #0]
			*rx_length = PRIVWRITE_RSP_SIZE;
   19128:	687b      	ldr	r3, [r7, #4]
   1912a:	2204      	movs	r2, #4
   1912c:	801a      	strh	r2, [r3, #0]
			break;
   1912e:	e040      	b.n	191b2 <atca_kit_get_commands_info+0x192>
		
		case ATCA_RANDOM:
			*cmd_index = CMD_RANDOM;
   19130:	68bb      	ldr	r3, [r7, #8]
   19132:	220e      	movs	r2, #14
   19134:	701a      	strb	r2, [r3, #0]
			*rx_length = RANDOM_RSP_SIZE;
   19136:	687b      	ldr	r3, [r7, #4]
   19138:	2223      	movs	r2, #35	; 0x23
   1913a:	801a      	strh	r2, [r3, #0]
			break;
   1913c:	e039      	b.n	191b2 <atca_kit_get_commands_info+0x192>
		
		case ATCA_READ:
			*cmd_index = CMD_READMEM;
   1913e:	68bb      	ldr	r3, [r7, #8]
   19140:	220f      	movs	r2, #15
   19142:	701a      	strb	r2, [r3, #0]
			*rx_length = (param1 & 0x80)	? READ_32_RSP_SIZE : READ_4_RSP_SIZE;
   19144:	2315      	movs	r3, #21
   19146:	18fb      	adds	r3, r7, r3
   19148:	781b      	ldrb	r3, [r3, #0]
   1914a:	b25b      	sxtb	r3, r3
   1914c:	2b00      	cmp	r3, #0
   1914e:	da01      	bge.n	19154 <atca_kit_get_commands_info+0x134>
   19150:	2223      	movs	r2, #35	; 0x23
   19152:	e000      	b.n	19156 <atca_kit_get_commands_info+0x136>
   19154:	2207      	movs	r2, #7
   19156:	687b      	ldr	r3, [r7, #4]
   19158:	801a      	strh	r2, [r3, #0]
			break;
   1915a:	e02a      	b.n	191b2 <atca_kit_get_commands_info+0x192>
		
		case ATCA_SHA:
			*cmd_index = CMD_SHA;
   1915c:	68bb      	ldr	r3, [r7, #8]
   1915e:	2210      	movs	r2, #16
   19160:	701a      	strb	r2, [r3, #0]
			*rx_length = (param1 == SHA_MODE_SHA256_END) ? ATCA_RSP_SIZE_32 : ATCA_RSP_SIZE_4;
   19162:	2315      	movs	r3, #21
   19164:	18fb      	adds	r3, r7, r3
   19166:	781b      	ldrb	r3, [r3, #0]
   19168:	2b02      	cmp	r3, #2
   1916a:	d101      	bne.n	19170 <atca_kit_get_commands_info+0x150>
   1916c:	2223      	movs	r2, #35	; 0x23
   1916e:	e000      	b.n	19172 <atca_kit_get_commands_info+0x152>
   19170:	2207      	movs	r2, #7
   19172:	687b      	ldr	r3, [r7, #4]
   19174:	801a      	strh	r2, [r3, #0]
			break;
   19176:	e01c      	b.n	191b2 <atca_kit_get_commands_info+0x192>

		case ATCA_SIGN:
			*cmd_index = CMD_SIGN;
   19178:	68bb      	ldr	r3, [r7, #8]
   1917a:	2211      	movs	r2, #17
   1917c:	701a      	strb	r2, [r3, #0]
			*rx_length = SIGN_RSP_SIZE;
   1917e:	687b      	ldr	r3, [r7, #4]
   19180:	224b      	movs	r2, #75	; 0x4b
   19182:	801a      	strh	r2, [r3, #0]
			break;
   19184:	e015      	b.n	191b2 <atca_kit_get_commands_info+0x192>
		
		case ATCA_UPDATE_EXTRA:
			*cmd_index = CMD_UPDATEEXTRA;
   19186:	68bb      	ldr	r3, [r7, #8]
   19188:	2212      	movs	r2, #18
   1918a:	701a      	strb	r2, [r3, #0]
			*rx_length = UPDATE_RSP_SIZE;
   1918c:	687b      	ldr	r3, [r7, #4]
   1918e:	2204      	movs	r2, #4
   19190:	801a      	strh	r2, [r3, #0]
			break;
   19192:	e00e      	b.n	191b2 <atca_kit_get_commands_info+0x192>
		
		case ATCA_VERIFY:
			*cmd_index = CMD_VERIFY;
   19194:	68bb      	ldr	r3, [r7, #8]
   19196:	2213      	movs	r2, #19
   19198:	701a      	strb	r2, [r3, #0]
			*rx_length = VERIFY_RSP_SIZE;
   1919a:	687b      	ldr	r3, [r7, #4]
   1919c:	2204      	movs	r2, #4
   1919e:	801a      	strh	r2, [r3, #0]
			break;
   191a0:	e007      	b.n	191b2 <atca_kit_get_commands_info+0x192>
		
		case ATCA_WRITE:
			*cmd_index = CMD_WRITEMEM;
   191a2:	68bb      	ldr	r3, [r7, #8]
   191a4:	2214      	movs	r2, #20
   191a6:	701a      	strb	r2, [r3, #0]
			*rx_length = WRITE_RSP_SIZE;
   191a8:	687b      	ldr	r3, [r7, #4]
   191aa:	2204      	movs	r2, #4
   191ac:	801a      	strh	r2, [r3, #0]
			break;
   191ae:	e000      	b.n	191b2 <atca_kit_get_commands_info+0x192>
		
		default:
			break;
   191b0:	46c0      	nop			; (mov r8, r8)
		
	}

	return status;
   191b2:	2317      	movs	r3, #23
   191b4:	18fb      	adds	r3, r7, r3
   191b6:	781b      	ldrb	r3, [r3, #0]
}
   191b8:	0018      	movs	r0, r3
   191ba:	46bd      	mov	sp, r7
   191bc:	b006      	add	sp, #24
   191be:	bd80      	pop	{r7, pc}
   191c0:	00021a94 	.word	0x00021a94

000191c4 <atca_kit_send_and_receive>:
 * \param[in] tx_buffer is buffer to be sent
 * \param[in] rx_buffer is buffer to be received
 * \return ATCA_STATUS
 */
uint8_t atca_kit_send_and_receive(uint8_t *tx_buffer, uint8_t *rx_buffer)
{
   191c4:	b590      	push	{r4, r7, lr}
   191c6:	b089      	sub	sp, #36	; 0x24
   191c8:	af00      	add	r7, sp, #0
   191ca:	6078      	str	r0, [r7, #4]
   191cc:	6039      	str	r1, [r7, #0]
	uint8_t status = ATCA_SUCCESS;
   191ce:	231f      	movs	r3, #31
   191d0:	18fb      	adds	r3, r7, r3
   191d2:	2200      	movs	r2, #0
   191d4:	701a      	strb	r2, [r3, #0]
	uint8_t cmd_index;
	uint16_t rx_length;
	uint8_t *cmd_buffer;
	ATCADevice  _Device = NULL;
   191d6:	2300      	movs	r3, #0
   191d8:	61bb      	str	r3, [r7, #24]
	ATCACommand _CommandObj = NULL;
   191da:	2300      	movs	r3, #0
   191dc:	617b      	str	r3, [r7, #20]
	ATCAIface   _Iface = NULL;
   191de:	2300      	movs	r3, #0
   191e0:	613b      	str	r3, [r7, #16]

	do {

		if ( tx_buffer == NULL || rx_buffer == NULL )
   191e2:	687b      	ldr	r3, [r7, #4]
   191e4:	2b00      	cmp	r3, #0
   191e6:	d100      	bne.n	191ea <atca_kit_send_and_receive+0x26>
   191e8:	e085      	b.n	192f6 <atca_kit_send_and_receive+0x132>
   191ea:	683b      	ldr	r3, [r7, #0]
   191ec:	2b00      	cmp	r3, #0
   191ee:	d100      	bne.n	191f2 <atca_kit_send_and_receive+0x2e>
   191f0:	e081      	b.n	192f6 <atca_kit_send_and_receive+0x132>
			break;

		if ( atca_kit_get_commands_info( tx_buffer, &cmd_index, &rx_length ) != ATCA_SUCCESS )
   191f2:	2308      	movs	r3, #8
   191f4:	18fa      	adds	r2, r7, r3
   191f6:	230b      	movs	r3, #11
   191f8:	18f9      	adds	r1, r7, r3
   191fa:	687b      	ldr	r3, [r7, #4]
   191fc:	0018      	movs	r0, r3
   191fe:	4b41      	ldr	r3, [pc, #260]	; (19304 <atca_kit_send_and_receive+0x140>)
   19200:	4798      	blx	r3
   19202:	1e03      	subs	r3, r0, #0
   19204:	d16e      	bne.n	192e4 <atca_kit_send_and_receive+0x120>
			break;

		cmd_buffer = (uint8_t *)malloc(tx_buffer[0] + 1);
   19206:	687b      	ldr	r3, [r7, #4]
   19208:	781b      	ldrb	r3, [r3, #0]
   1920a:	3301      	adds	r3, #1
   1920c:	0018      	movs	r0, r3
   1920e:	4b3e      	ldr	r3, [pc, #248]	; (19308 <atca_kit_send_and_receive+0x144>)
   19210:	4798      	blx	r3
   19212:	0003      	movs	r3, r0
   19214:	60fb      	str	r3, [r7, #12]
		memcpy(&cmd_buffer[1], tx_buffer, tx_buffer[0]);
   19216:	68fb      	ldr	r3, [r7, #12]
   19218:	1c58      	adds	r0, r3, #1
   1921a:	687b      	ldr	r3, [r7, #4]
   1921c:	781b      	ldrb	r3, [r3, #0]
   1921e:	001a      	movs	r2, r3
   19220:	687b      	ldr	r3, [r7, #4]
   19222:	0019      	movs	r1, r3
   19224:	4b39      	ldr	r3, [pc, #228]	; (1930c <atca_kit_send_and_receive+0x148>)
   19226:	4798      	blx	r3
		
		_Device= atcab_get_device();
   19228:	4b39      	ldr	r3, [pc, #228]	; (19310 <atca_kit_send_and_receive+0x14c>)
   1922a:	4798      	blx	r3
   1922c:	0003      	movs	r3, r0
   1922e:	61bb      	str	r3, [r7, #24]
		_CommandObj = atGetCommands(_gDevice);
   19230:	4b38      	ldr	r3, [pc, #224]	; (19314 <atca_kit_send_and_receive+0x150>)
   19232:	681b      	ldr	r3, [r3, #0]
   19234:	0018      	movs	r0, r3
   19236:	4b38      	ldr	r3, [pc, #224]	; (19318 <atca_kit_send_and_receive+0x154>)
   19238:	4798      	blx	r3
   1923a:	0003      	movs	r3, r0
   1923c:	617b      	str	r3, [r7, #20]

        if ((status = atGetExecTime(tx_buffer[1], _CommandObj)) != ATCA_SUCCESS)
   1923e:	687b      	ldr	r3, [r7, #4]
   19240:	3301      	adds	r3, #1
   19242:	781b      	ldrb	r3, [r3, #0]
   19244:	221f      	movs	r2, #31
   19246:	18bc      	adds	r4, r7, r2
   19248:	697a      	ldr	r2, [r7, #20]
   1924a:	0011      	movs	r1, r2
   1924c:	0018      	movs	r0, r3
   1924e:	4b33      	ldr	r3, [pc, #204]	; (1931c <atca_kit_send_and_receive+0x158>)
   19250:	4798      	blx	r3
   19252:	0003      	movs	r3, r0
   19254:	7023      	strb	r3, [r4, #0]
   19256:	231f      	movs	r3, #31
   19258:	18fb      	adds	r3, r7, r3
   1925a:	781b      	ldrb	r3, [r3, #0]
   1925c:	2b00      	cmp	r3, #0
   1925e:	d143      	bne.n	192e8 <atca_kit_send_and_receive+0x124>
        {
            break;
        }

		if ( (status = atcab_wakeup()) != ATCA_SUCCESS )
   19260:	231f      	movs	r3, #31
   19262:	18fc      	adds	r4, r7, r3
   19264:	4b2e      	ldr	r3, [pc, #184]	; (19320 <atca_kit_send_and_receive+0x15c>)
   19266:	4798      	blx	r3
   19268:	0003      	movs	r3, r0
   1926a:	7023      	strb	r3, [r4, #0]
   1926c:	231f      	movs	r3, #31
   1926e:	18fb      	adds	r3, r7, r3
   19270:	781b      	ldrb	r3, [r3, #0]
   19272:	2b00      	cmp	r3, #0
   19274:	d13a      	bne.n	192ec <atca_kit_send_and_receive+0x128>
			break;

		_Device= atcab_get_device();
   19276:	4b26      	ldr	r3, [pc, #152]	; (19310 <atca_kit_send_and_receive+0x14c>)
   19278:	4798      	blx	r3
   1927a:	0003      	movs	r3, r0
   1927c:	61bb      	str	r3, [r7, #24]
		_Iface = atGetIFace(_Device);
   1927e:	69bb      	ldr	r3, [r7, #24]
   19280:	0018      	movs	r0, r3
   19282:	4b28      	ldr	r3, [pc, #160]	; (19324 <atca_kit_send_and_receive+0x160>)
   19284:	4798      	blx	r3
   19286:	0003      	movs	r3, r0
   19288:	613b      	str	r3, [r7, #16]
		
		// send the command
		if ((status = atsend( _Iface, (uint8_t *)cmd_buffer, tx_buffer[0])) != ATCA_SUCCESS )
   1928a:	687b      	ldr	r3, [r7, #4]
   1928c:	781b      	ldrb	r3, [r3, #0]
   1928e:	001a      	movs	r2, r3
   19290:	231f      	movs	r3, #31
   19292:	18fc      	adds	r4, r7, r3
   19294:	68f9      	ldr	r1, [r7, #12]
   19296:	693b      	ldr	r3, [r7, #16]
   19298:	0018      	movs	r0, r3
   1929a:	4b23      	ldr	r3, [pc, #140]	; (19328 <atca_kit_send_and_receive+0x164>)
   1929c:	4798      	blx	r3
   1929e:	0003      	movs	r3, r0
   192a0:	7023      	strb	r3, [r4, #0]
   192a2:	231f      	movs	r3, #31
   192a4:	18fb      	adds	r3, r7, r3
   192a6:	781b      	ldrb	r3, [r3, #0]
   192a8:	2b00      	cmp	r3, #0
   192aa:	d121      	bne.n	192f0 <atca_kit_send_and_receive+0x12c>
			break;

		// delay the appropriate amount of time for command to execute
		atca_delay_ms(_CommandObj->execution_time_msec);
   192ac:	697b      	ldr	r3, [r7, #20]
   192ae:	885b      	ldrh	r3, [r3, #2]
   192b0:	0018      	movs	r0, r3
   192b2:	4b1e      	ldr	r3, [pc, #120]	; (1932c <atca_kit_send_and_receive+0x168>)
   192b4:	4798      	blx	r3

		// receive the response
		if ((status = atreceive( _Iface, rx_buffer, &rx_length)) != ATCA_SUCCESS )
   192b6:	231f      	movs	r3, #31
   192b8:	18fc      	adds	r4, r7, r3
   192ba:	2308      	movs	r3, #8
   192bc:	18fa      	adds	r2, r7, r3
   192be:	6839      	ldr	r1, [r7, #0]
   192c0:	693b      	ldr	r3, [r7, #16]
   192c2:	0018      	movs	r0, r3
   192c4:	4b1a      	ldr	r3, [pc, #104]	; (19330 <atca_kit_send_and_receive+0x16c>)
   192c6:	4798      	blx	r3
   192c8:	0003      	movs	r3, r0
   192ca:	7023      	strb	r3, [r4, #0]
   192cc:	231f      	movs	r3, #31
   192ce:	18fb      	adds	r3, r7, r3
   192d0:	781b      	ldrb	r3, [r3, #0]
   192d2:	2b00      	cmp	r3, #0
   192d4:	d10e      	bne.n	192f4 <atca_kit_send_and_receive+0x130>
			break;

		atcab_idle();
   192d6:	4b17      	ldr	r3, [pc, #92]	; (19334 <atca_kit_send_and_receive+0x170>)
   192d8:	4798      	blx	r3

		free((void *)cmd_buffer);
   192da:	68fb      	ldr	r3, [r7, #12]
   192dc:	0018      	movs	r0, r3
   192de:	4b16      	ldr	r3, [pc, #88]	; (19338 <atca_kit_send_and_receive+0x174>)
   192e0:	4798      	blx	r3
   192e2:	e008      	b.n	192f6 <atca_kit_send_and_receive+0x132>
			break;
   192e4:	46c0      	nop			; (mov r8, r8)
   192e6:	e006      	b.n	192f6 <atca_kit_send_and_receive+0x132>
            break;
   192e8:	46c0      	nop			; (mov r8, r8)
   192ea:	e004      	b.n	192f6 <atca_kit_send_and_receive+0x132>
			break;
   192ec:	46c0      	nop			; (mov r8, r8)
   192ee:	e002      	b.n	192f6 <atca_kit_send_and_receive+0x132>
			break;
   192f0:	46c0      	nop			; (mov r8, r8)
   192f2:	e000      	b.n	192f6 <atca_kit_send_and_receive+0x132>
			break;
   192f4:	46c0      	nop			; (mov r8, r8)

	} while(0);
	
	return status;
   192f6:	231f      	movs	r3, #31
   192f8:	18fb      	adds	r3, r7, r3
   192fa:	781b      	ldrb	r3, [r3, #0]
	
}
   192fc:	0018      	movs	r0, r3
   192fe:	46bd      	mov	sp, r7
   19300:	b009      	add	sp, #36	; 0x24
   19302:	bd90      	pop	{r4, r7, pc}
   19304:	00019021 	.word	0x00019021
   19308:	0001c0bd 	.word	0x0001c0bd
   1930c:	0001c13d 	.word	0x0001c13d
   19310:	0000ff4d 	.word	0x0000ff4d
   19314:	20000590 	.word	0x20000590
   19318:	0000fbc1 	.word	0x0000fbc1
   1931c:	0000f7f9 	.word	0x0000f7f9
   19320:	0000ff61 	.word	0x0000ff61
   19324:	0000fbd5 	.word	0x0000fbd5
   19328:	0000fcf5 	.word	0x0000fcf5
   1932c:	00012379 	.word	0x00012379
   19330:	0000fd17 	.word	0x0000fd17
   19334:	0000ff8d 	.word	0x0000ff8d
   19338:	0001c0d1 	.word	0x0001c0d1

0001933c <atca_kit_send_command>:
/** \brief Only send a command array.
 * \param[in] tx_buffer is buffer to be sent
 * \return ATCA_STATUS
 */
uint8_t atca_kit_send_command(uint8_t *tx_buffer)
{
   1933c:	b590      	push	{r4, r7, lr}
   1933e:	b089      	sub	sp, #36	; 0x24
   19340:	af00      	add	r7, sp, #0
   19342:	6078      	str	r0, [r7, #4]
	uint8_t status = ATCA_SUCCESS;
   19344:	231f      	movs	r3, #31
   19346:	18fb      	adds	r3, r7, r3
   19348:	2200      	movs	r2, #0
   1934a:	701a      	strb	r2, [r3, #0]
	uint8_t cmd_index;
	uint16_t rx_length;
	uint8_t *cmd_buffer;
	ATCADevice  _Device = NULL;
   1934c:	2300      	movs	r3, #0
   1934e:	61bb      	str	r3, [r7, #24]
	ATCACommand _CommandObj = NULL;
   19350:	2300      	movs	r3, #0
   19352:	617b      	str	r3, [r7, #20]
	ATCAIface   _Iface = NULL;
   19354:	2300      	movs	r3, #0
   19356:	613b      	str	r3, [r7, #16]

	do {

		if ( tx_buffer == NULL )
   19358:	687b      	ldr	r3, [r7, #4]
   1935a:	2b00      	cmp	r3, #0
   1935c:	d067      	beq.n	1942e <atca_kit_send_command+0xf2>
			break;

		if ( atca_kit_get_commands_info( tx_buffer, &cmd_index, &rx_length ) != ATCA_SUCCESS )
   1935e:	2308      	movs	r3, #8
   19360:	18fa      	adds	r2, r7, r3
   19362:	230b      	movs	r3, #11
   19364:	18f9      	adds	r1, r7, r3
   19366:	687b      	ldr	r3, [r7, #4]
   19368:	0018      	movs	r0, r3
   1936a:	4b39      	ldr	r3, [pc, #228]	; (19450 <atca_kit_send_command+0x114>)
   1936c:	4798      	blx	r3
   1936e:	1e03      	subs	r3, r0, #0
   19370:	d15f      	bne.n	19432 <atca_kit_send_command+0xf6>
			break;

		cmd_buffer = (uint8_t *)malloc(tx_buffer[0] + 1);
   19372:	687b      	ldr	r3, [r7, #4]
   19374:	781b      	ldrb	r3, [r3, #0]
   19376:	3301      	adds	r3, #1
   19378:	0018      	movs	r0, r3
   1937a:	4b36      	ldr	r3, [pc, #216]	; (19454 <atca_kit_send_command+0x118>)
   1937c:	4798      	blx	r3
   1937e:	0003      	movs	r3, r0
   19380:	60fb      	str	r3, [r7, #12]
		memcpy(&cmd_buffer[1], tx_buffer, tx_buffer[0]);
   19382:	68fb      	ldr	r3, [r7, #12]
   19384:	1c58      	adds	r0, r3, #1
   19386:	687b      	ldr	r3, [r7, #4]
   19388:	781b      	ldrb	r3, [r3, #0]
   1938a:	001a      	movs	r2, r3
   1938c:	687b      	ldr	r3, [r7, #4]
   1938e:	0019      	movs	r1, r3
   19390:	4b31      	ldr	r3, [pc, #196]	; (19458 <atca_kit_send_command+0x11c>)
   19392:	4798      	blx	r3

		_Device= atcab_get_device();
   19394:	4b31      	ldr	r3, [pc, #196]	; (1945c <atca_kit_send_command+0x120>)
   19396:	4798      	blx	r3
   19398:	0003      	movs	r3, r0
   1939a:	61bb      	str	r3, [r7, #24]
		_CommandObj = atGetCommands(_Device);
   1939c:	69bb      	ldr	r3, [r7, #24]
   1939e:	0018      	movs	r0, r3
   193a0:	4b2f      	ldr	r3, [pc, #188]	; (19460 <atca_kit_send_command+0x124>)
   193a2:	4798      	blx	r3
   193a4:	0003      	movs	r3, r0
   193a6:	617b      	str	r3, [r7, #20]
		
        if ((status = atGetExecTime(tx_buffer[1], _CommandObj)) != ATCA_SUCCESS)
   193a8:	687b      	ldr	r3, [r7, #4]
   193aa:	3301      	adds	r3, #1
   193ac:	781b      	ldrb	r3, [r3, #0]
   193ae:	221f      	movs	r2, #31
   193b0:	18bc      	adds	r4, r7, r2
   193b2:	697a      	ldr	r2, [r7, #20]
   193b4:	0011      	movs	r1, r2
   193b6:	0018      	movs	r0, r3
   193b8:	4b2a      	ldr	r3, [pc, #168]	; (19464 <atca_kit_send_command+0x128>)
   193ba:	4798      	blx	r3
   193bc:	0003      	movs	r3, r0
   193be:	7023      	strb	r3, [r4, #0]
   193c0:	231f      	movs	r3, #31
   193c2:	18fb      	adds	r3, r7, r3
   193c4:	781b      	ldrb	r3, [r3, #0]
   193c6:	2b00      	cmp	r3, #0
   193c8:	d135      	bne.n	19436 <atca_kit_send_command+0xfa>
        {
            break;
        }

		if ( (status = atcab_wakeup()) != ATCA_SUCCESS )
   193ca:	231f      	movs	r3, #31
   193cc:	18fc      	adds	r4, r7, r3
   193ce:	4b26      	ldr	r3, [pc, #152]	; (19468 <atca_kit_send_command+0x12c>)
   193d0:	4798      	blx	r3
   193d2:	0003      	movs	r3, r0
   193d4:	7023      	strb	r3, [r4, #0]
   193d6:	231f      	movs	r3, #31
   193d8:	18fb      	adds	r3, r7, r3
   193da:	781b      	ldrb	r3, [r3, #0]
   193dc:	2b00      	cmp	r3, #0
   193de:	d12c      	bne.n	1943a <atca_kit_send_command+0xfe>
			break;

		_Device= atcab_get_device();
   193e0:	4b1e      	ldr	r3, [pc, #120]	; (1945c <atca_kit_send_command+0x120>)
   193e2:	4798      	blx	r3
   193e4:	0003      	movs	r3, r0
   193e6:	61bb      	str	r3, [r7, #24]
		_Iface = atGetIFace(_Device);
   193e8:	69bb      	ldr	r3, [r7, #24]
   193ea:	0018      	movs	r0, r3
   193ec:	4b1f      	ldr	r3, [pc, #124]	; (1946c <atca_kit_send_command+0x130>)
   193ee:	4798      	blx	r3
   193f0:	0003      	movs	r3, r0
   193f2:	613b      	str	r3, [r7, #16]
		
		// send the command
		if ( (status = atsend( _Iface, (uint8_t *)cmd_buffer, tx_buffer[0])) != ATCA_SUCCESS )
   193f4:	687b      	ldr	r3, [r7, #4]
   193f6:	781b      	ldrb	r3, [r3, #0]
   193f8:	001a      	movs	r2, r3
   193fa:	231f      	movs	r3, #31
   193fc:	18fc      	adds	r4, r7, r3
   193fe:	68f9      	ldr	r1, [r7, #12]
   19400:	693b      	ldr	r3, [r7, #16]
   19402:	0018      	movs	r0, r3
   19404:	4b1a      	ldr	r3, [pc, #104]	; (19470 <atca_kit_send_command+0x134>)
   19406:	4798      	blx	r3
   19408:	0003      	movs	r3, r0
   1940a:	7023      	strb	r3, [r4, #0]
   1940c:	231f      	movs	r3, #31
   1940e:	18fb      	adds	r3, r7, r3
   19410:	781b      	ldrb	r3, [r3, #0]
   19412:	2b00      	cmp	r3, #0
   19414:	d113      	bne.n	1943e <atca_kit_send_command+0x102>
			break;

		// delay the appropriate amount of time for command to execute
		atca_delay_ms(_CommandObj->execution_time_msec);
   19416:	697b      	ldr	r3, [r7, #20]
   19418:	885b      	ldrh	r3, [r3, #2]
   1941a:	0018      	movs	r0, r3
   1941c:	4b15      	ldr	r3, [pc, #84]	; (19474 <atca_kit_send_command+0x138>)
   1941e:	4798      	blx	r3

		atcab_idle();
   19420:	4b15      	ldr	r3, [pc, #84]	; (19478 <atca_kit_send_command+0x13c>)
   19422:	4798      	blx	r3

		free((void *)cmd_buffer);
   19424:	68fb      	ldr	r3, [r7, #12]
   19426:	0018      	movs	r0, r3
   19428:	4b14      	ldr	r3, [pc, #80]	; (1947c <atca_kit_send_command+0x140>)
   1942a:	4798      	blx	r3
   1942c:	e008      	b.n	19440 <atca_kit_send_command+0x104>
			break;
   1942e:	46c0      	nop			; (mov r8, r8)
   19430:	e006      	b.n	19440 <atca_kit_send_command+0x104>
			break;
   19432:	46c0      	nop			; (mov r8, r8)
   19434:	e004      	b.n	19440 <atca_kit_send_command+0x104>
            break;
   19436:	46c0      	nop			; (mov r8, r8)
   19438:	e002      	b.n	19440 <atca_kit_send_command+0x104>
			break;
   1943a:	46c0      	nop			; (mov r8, r8)
   1943c:	e000      	b.n	19440 <atca_kit_send_command+0x104>
			break;
   1943e:	46c0      	nop			; (mov r8, r8)

	} while(0);
	
	return status;
   19440:	231f      	movs	r3, #31
   19442:	18fb      	adds	r3, r7, r3
   19444:	781b      	ldrb	r3, [r3, #0]
	
}
   19446:	0018      	movs	r0, r3
   19448:	46bd      	mov	sp, r7
   1944a:	b009      	add	sp, #36	; 0x24
   1944c:	bd90      	pop	{r4, r7, pc}
   1944e:	46c0      	nop			; (mov r8, r8)
   19450:	00019021 	.word	0x00019021
   19454:	0001c0bd 	.word	0x0001c0bd
   19458:	0001c13d 	.word	0x0001c13d
   1945c:	0000ff4d 	.word	0x0000ff4d
   19460:	0000fbc1 	.word	0x0000fbc1
   19464:	0000f7f9 	.word	0x0000f7f9
   19468:	0000ff61 	.word	0x0000ff61
   1946c:	0000fbd5 	.word	0x0000fbd5
   19470:	0000fcf5 	.word	0x0000fcf5
   19474:	00012379 	.word	0x00012379
   19478:	0000ff8d 	.word	0x0000ff8d
   1947c:	0001c0d1 	.word	0x0001c0d1

00019480 <atca_kit_receive_response>:
 * \param[in] size is size to be received
 * \param[out] rx_buffer is buffer that includes data to be received from a device 
 * \return ATCA_STATUS
 */
uint8_t atca_kit_receive_response(uint8_t size, uint8_t *rx_buffer)
{
   19480:	b590      	push	{r4, r7, lr}
   19482:	b087      	sub	sp, #28
   19484:	af00      	add	r7, sp, #0
   19486:	0002      	movs	r2, r0
   19488:	6039      	str	r1, [r7, #0]
   1948a:	1dfb      	adds	r3, r7, #7
   1948c:	701a      	strb	r2, [r3, #0]
	uint8_t status = ATCA_SUCCESS;
   1948e:	2317      	movs	r3, #23
   19490:	18fb      	adds	r3, r7, r3
   19492:	2200      	movs	r2, #0
   19494:	701a      	strb	r2, [r3, #0]
	uint16_t rxlength = size;	
   19496:	1dfb      	adds	r3, r7, #7
   19498:	781b      	ldrb	r3, [r3, #0]
   1949a:	b29a      	uxth	r2, r3
   1949c:	230a      	movs	r3, #10
   1949e:	18fb      	adds	r3, r7, r3
   194a0:	801a      	strh	r2, [r3, #0]
	ATCADevice  _Device = NULL;
   194a2:	2300      	movs	r3, #0
   194a4:	613b      	str	r3, [r7, #16]
	ATCAIface   _Iface = NULL;
   194a6:	2300      	movs	r3, #0
   194a8:	60fb      	str	r3, [r7, #12]

	do {

		if ( rx_buffer == NULL )
   194aa:	683b      	ldr	r3, [r7, #0]
   194ac:	2b00      	cmp	r3, #0
   194ae:	d02b      	beq.n	19508 <atca_kit_receive_response+0x88>
			break;

		_Device= atcab_get_device();
   194b0:	4b1b      	ldr	r3, [pc, #108]	; (19520 <atca_kit_receive_response+0xa0>)
   194b2:	4798      	blx	r3
   194b4:	0003      	movs	r3, r0
   194b6:	613b      	str	r3, [r7, #16]
		
		if ( (status = atcab_wakeup()) != ATCA_SUCCESS )
   194b8:	2317      	movs	r3, #23
   194ba:	18fc      	adds	r4, r7, r3
   194bc:	4b19      	ldr	r3, [pc, #100]	; (19524 <atca_kit_receive_response+0xa4>)
   194be:	4798      	blx	r3
   194c0:	0003      	movs	r3, r0
   194c2:	7023      	strb	r3, [r4, #0]
   194c4:	2317      	movs	r3, #23
   194c6:	18fb      	adds	r3, r7, r3
   194c8:	781b      	ldrb	r3, [r3, #0]
   194ca:	2b00      	cmp	r3, #0
   194cc:	d11e      	bne.n	1950c <atca_kit_receive_response+0x8c>
			break;

		_Device= atcab_get_device();
   194ce:	4b14      	ldr	r3, [pc, #80]	; (19520 <atca_kit_receive_response+0xa0>)
   194d0:	4798      	blx	r3
   194d2:	0003      	movs	r3, r0
   194d4:	613b      	str	r3, [r7, #16]
		_Iface = atGetIFace(_Device);
   194d6:	693b      	ldr	r3, [r7, #16]
   194d8:	0018      	movs	r0, r3
   194da:	4b13      	ldr	r3, [pc, #76]	; (19528 <atca_kit_receive_response+0xa8>)
   194dc:	4798      	blx	r3
   194de:	0003      	movs	r3, r0
   194e0:	60fb      	str	r3, [r7, #12]

		// receive the response
		if ( (status = atreceive( _Iface, rx_buffer, &rxlength)) != ATCA_SUCCESS )
   194e2:	2317      	movs	r3, #23
   194e4:	18fc      	adds	r4, r7, r3
   194e6:	230a      	movs	r3, #10
   194e8:	18fa      	adds	r2, r7, r3
   194ea:	6839      	ldr	r1, [r7, #0]
   194ec:	68fb      	ldr	r3, [r7, #12]
   194ee:	0018      	movs	r0, r3
   194f0:	4b0e      	ldr	r3, [pc, #56]	; (1952c <atca_kit_receive_response+0xac>)
   194f2:	4798      	blx	r3
   194f4:	0003      	movs	r3, r0
   194f6:	7023      	strb	r3, [r4, #0]
   194f8:	2317      	movs	r3, #23
   194fa:	18fb      	adds	r3, r7, r3
   194fc:	781b      	ldrb	r3, [r3, #0]
   194fe:	2b00      	cmp	r3, #0
   19500:	d106      	bne.n	19510 <atca_kit_receive_response+0x90>
			break;

		atcab_idle();
   19502:	4b0b      	ldr	r3, [pc, #44]	; (19530 <atca_kit_receive_response+0xb0>)
   19504:	4798      	blx	r3
   19506:	e004      	b.n	19512 <atca_kit_receive_response+0x92>
			break;
   19508:	46c0      	nop			; (mov r8, r8)
   1950a:	e002      	b.n	19512 <atca_kit_receive_response+0x92>
			break;
   1950c:	46c0      	nop			; (mov r8, r8)
   1950e:	e000      	b.n	19512 <atca_kit_receive_response+0x92>
			break;
   19510:	46c0      	nop			; (mov r8, r8)

	} while(0);
	
	return status;
   19512:	2317      	movs	r3, #23
   19514:	18fb      	adds	r3, r7, r3
   19516:	781b      	ldrb	r3, [r3, #0]
	
}
   19518:	0018      	movs	r0, r3
   1951a:	46bd      	mov	sp, r7
   1951c:	b007      	add	sp, #28
   1951e:	bd90      	pop	{r4, r7, pc}
   19520:	0000ff4d 	.word	0x0000ff4d
   19524:	0000ff61 	.word	0x0000ff61
   19528:	0000fbd5 	.word	0x0000fbd5
   1952c:	0000fd17 	.word	0x0000fd17
   19530:	0000ff8d 	.word	0x0000ff8d

00019534 <atca_kit_parse_ecc_commands>:
 * \param[out] responseLength pointer to number of bytes in response buffer
 * \param[out] response pointer to binary response buffer
 * \return the status of the operation
 */
uint8_t atca_kit_parse_ecc_commands(uint16_t commandLength, uint8_t *command, uint16_t *responseLength, uint8_t *response)
{
   19534:	b590      	push	{r4, r7, lr}
   19536:	b08b      	sub	sp, #44	; 0x2c
   19538:	af00      	add	r7, sp, #0
   1953a:	60b9      	str	r1, [r7, #8]
   1953c:	607a      	str	r2, [r7, #4]
   1953e:	603b      	str	r3, [r7, #0]
   19540:	230e      	movs	r3, #14
   19542:	18fb      	adds	r3, r7, r3
   19544:	1c02      	adds	r2, r0, #0
   19546:	801a      	strh	r2, [r3, #0]
	uint8_t status = KIT_STATUS_SUCCESS;
   19548:	2327      	movs	r3, #39	; 0x27
   1954a:	18fb      	adds	r3, r7, r3
   1954c:	2200      	movs	r2, #0
   1954e:	701a      	strb	r2, [r3, #0]
	uint16_t dataLength;
	uint8_t *data_load[1];
	uint8_t *dataLoad;
	char *pToken = strchr((char *) command, ':');
   19550:	68bb      	ldr	r3, [r7, #8]
   19552:	213a      	movs	r1, #58	; 0x3a
   19554:	0018      	movs	r0, r3
   19556:	4baa      	ldr	r3, [pc, #680]	; (19800 <atca_kit_parse_ecc_commands+0x2cc>)
   19558:	4798      	blx	r3
   1955a:	0003      	movs	r3, r0
   1955c:	623b      	str	r3, [r7, #32]

	*responseLength = 0;
   1955e:	687b      	ldr	r3, [r7, #4]
   19560:	2200      	movs	r2, #0
   19562:	801a      	strh	r2, [r3, #0]

	if (!pToken)
   19564:	6a3b      	ldr	r3, [r7, #32]
   19566:	2b00      	cmp	r3, #0
   19568:	d103      	bne.n	19572 <atca_kit_parse_ecc_commands+0x3e>
		return status;
   1956a:	2327      	movs	r3, #39	; 0x27
   1956c:	18fb      	adds	r3, r7, r3
   1956e:	781b      	ldrb	r3, [r3, #0]
   19570:	e141      	b.n	197f6 <atca_kit_parse_ecc_commands+0x2c2>

	switch (pToken[1]) {
   19572:	6a3b      	ldr	r3, [r7, #32]
   19574:	3301      	adds	r3, #1
   19576:	781b      	ldrb	r3, [r3, #0]
   19578:	3b61      	subs	r3, #97	; 0x61
   1957a:	2b16      	cmp	r3, #22
   1957c:	d900      	bls.n	19580 <atca_kit_parse_ecc_commands+0x4c>
   1957e:	e12b      	b.n	197d8 <atca_kit_parse_ecc_commands+0x2a4>
   19580:	009a      	lsls	r2, r3, #2
   19582:	4ba0      	ldr	r3, [pc, #640]	; (19804 <atca_kit_parse_ecc_commands+0x2d0>)
   19584:	18d3      	adds	r3, r2, r3
   19586:	681b      	ldr	r3, [r3, #0]
   19588:	469f      	mov	pc, r3
		// Talk (send command and receive response)		
		case 't':
			status = atca_kit_extract_data_load((const char*)pToken + 2, &dataLength, data_load);
   1958a:	6a3b      	ldr	r3, [r7, #32]
   1958c:	3302      	adds	r3, #2
   1958e:	2227      	movs	r2, #39	; 0x27
   19590:	18bc      	adds	r4, r7, r2
   19592:	2214      	movs	r2, #20
   19594:	18ba      	adds	r2, r7, r2
   19596:	211a      	movs	r1, #26
   19598:	1879      	adds	r1, r7, r1
   1959a:	0018      	movs	r0, r3
   1959c:	4b9a      	ldr	r3, [pc, #616]	; (19808 <atca_kit_parse_ecc_commands+0x2d4>)
   1959e:	4798      	blx	r3
   195a0:	0003      	movs	r3, r0
   195a2:	7023      	strb	r3, [r4, #0]
			if (status != KIT_STATUS_SUCCESS)
   195a4:	2327      	movs	r3, #39	; 0x27
   195a6:	18fb      	adds	r3, r7, r3
   195a8:	781b      	ldrb	r3, [r3, #0]
   195aa:	2b00      	cmp	r3, #0
   195ac:	d003      	beq.n	195b6 <atca_kit_parse_ecc_commands+0x82>
				return status;
   195ae:	2327      	movs	r3, #39	; 0x27
   195b0:	18fb      	adds	r3, r7, r3
   195b2:	781b      	ldrb	r3, [r3, #0]
   195b4:	e11f      	b.n	197f6 <atca_kit_parse_ecc_commands+0x2c2>

			response[SHA204_BUFFER_POS_COUNT] = 0;
   195b6:	683b      	ldr	r3, [r7, #0]
   195b8:	2200      	movs	r2, #0
   195ba:	701a      	strb	r2, [r3, #0]
			status = atca_kit_send_and_receive(data_load[0], &response[0]);
   195bc:	697b      	ldr	r3, [r7, #20]
   195be:	2227      	movs	r2, #39	; 0x27
   195c0:	18bc      	adds	r4, r7, r2
   195c2:	683a      	ldr	r2, [r7, #0]
   195c4:	0011      	movs	r1, r2
   195c6:	0018      	movs	r0, r3
   195c8:	4b90      	ldr	r3, [pc, #576]	; (1980c <atca_kit_parse_ecc_commands+0x2d8>)
   195ca:	4798      	blx	r3
   195cc:	0003      	movs	r3, r0
   195ce:	7023      	strb	r3, [r4, #0]
			if (status != KIT_STATUS_SUCCESS)
   195d0:	2327      	movs	r3, #39	; 0x27
   195d2:	18fb      	adds	r3, r7, r3
   195d4:	781b      	ldrb	r3, [r3, #0]
   195d6:	2b00      	cmp	r3, #0
   195d8:	d003      	beq.n	195e2 <atca_kit_parse_ecc_commands+0xae>
				return status;
   195da:	2327      	movs	r3, #39	; 0x27
   195dc:	18fb      	adds	r3, r7, r3
   195de:	781b      	ldrb	r3, [r3, #0]
   195e0:	e109      	b.n	197f6 <atca_kit_parse_ecc_commands+0x2c2>

			*responseLength = response[SHA204_BUFFER_POS_COUNT];
   195e2:	683b      	ldr	r3, [r7, #0]
   195e4:	781b      	ldrb	r3, [r3, #0]
   195e6:	b29a      	uxth	r2, r3
   195e8:	687b      	ldr	r3, [r7, #4]
   195ea:	801a      	strh	r2, [r3, #0]
			break;
   195ec:	e100      	b.n	197f0 <atca_kit_parse_ecc_commands+0x2bc>

		// Wakeup
		case 'w':
			status = atcab_wakeup();
   195ee:	2327      	movs	r3, #39	; 0x27
   195f0:	18fc      	adds	r4, r7, r3
   195f2:	4b87      	ldr	r3, [pc, #540]	; (19810 <atca_kit_parse_ecc_commands+0x2dc>)
   195f4:	4798      	blx	r3
   195f6:	0003      	movs	r3, r0
   195f8:	7023      	strb	r3, [r4, #0]
			if (status != KIT_STATUS_SUCCESS)
   195fa:	2327      	movs	r3, #39	; 0x27
   195fc:	18fb      	adds	r3, r7, r3
   195fe:	781b      	ldrb	r3, [r3, #0]
   19600:	2b00      	cmp	r3, #0
   19602:	d100      	bne.n	19606 <atca_kit_parse_ecc_commands+0xd2>
   19604:	e0ed      	b.n	197e2 <atca_kit_parse_ecc_commands+0x2ae>
				return status;
   19606:	2327      	movs	r3, #39	; 0x27
   19608:	18fb      	adds	r3, r7, r3
   1960a:	781b      	ldrb	r3, [r3, #0]
   1960c:	e0f3      	b.n	197f6 <atca_kit_parse_ecc_commands+0x2c2>
			break;

		// Sleep
		case 's':
			status = atcab_sleep();
   1960e:	2327      	movs	r3, #39	; 0x27
   19610:	18fc      	adds	r4, r7, r3
   19612:	4b80      	ldr	r3, [pc, #512]	; (19814 <atca_kit_parse_ecc_commands+0x2e0>)
   19614:	4798      	blx	r3
   19616:	0003      	movs	r3, r0
   19618:	7023      	strb	r3, [r4, #0]
			if (status != KIT_STATUS_SUCCESS)
   1961a:	2327      	movs	r3, #39	; 0x27
   1961c:	18fb      	adds	r3, r7, r3
   1961e:	781b      	ldrb	r3, [r3, #0]
   19620:	2b00      	cmp	r3, #0
   19622:	d100      	bne.n	19626 <atca_kit_parse_ecc_commands+0xf2>
   19624:	e0df      	b.n	197e6 <atca_kit_parse_ecc_commands+0x2b2>
				return status;
   19626:	2327      	movs	r3, #39	; 0x27
   19628:	18fb      	adds	r3, r7, r3
   1962a:	781b      	ldrb	r3, [r3, #0]
   1962c:	e0e3      	b.n	197f6 <atca_kit_parse_ecc_commands+0x2c2>
			break;

		// Idle
		case 'i':
			status = atcab_idle();
   1962e:	2327      	movs	r3, #39	; 0x27
   19630:	18fc      	adds	r4, r7, r3
   19632:	4b79      	ldr	r3, [pc, #484]	; (19818 <atca_kit_parse_ecc_commands+0x2e4>)
   19634:	4798      	blx	r3
   19636:	0003      	movs	r3, r0
   19638:	7023      	strb	r3, [r4, #0]
			if (status != KIT_STATUS_SUCCESS)
   1963a:	2327      	movs	r3, #39	; 0x27
   1963c:	18fb      	adds	r3, r7, r3
   1963e:	781b      	ldrb	r3, [r3, #0]
   19640:	2b00      	cmp	r3, #0
   19642:	d100      	bne.n	19646 <atca_kit_parse_ecc_commands+0x112>
   19644:	e0d1      	b.n	197ea <atca_kit_parse_ecc_commands+0x2b6>
				return status;			
   19646:	2327      	movs	r3, #39	; 0x27
   19648:	18fb      	adds	r3, r7, r3
   1964a:	781b      	ldrb	r3, [r3, #0]
   1964c:	e0d3      	b.n	197f6 <atca_kit_parse_ecc_commands+0x2c2>
			break;
		
		// Switch whether to wrap a Wakeup / Idle around a "talk" message.
		case 'a':
			status = atca_kit_extract_data_load((const char*)pToken + 2, &dataLength, data_load);
   1964e:	6a3b      	ldr	r3, [r7, #32]
   19650:	3302      	adds	r3, #2
   19652:	2227      	movs	r2, #39	; 0x27
   19654:	18bc      	adds	r4, r7, r2
   19656:	2214      	movs	r2, #20
   19658:	18ba      	adds	r2, r7, r2
   1965a:	211a      	movs	r1, #26
   1965c:	1879      	adds	r1, r7, r1
   1965e:	0018      	movs	r0, r3
   19660:	4b69      	ldr	r3, [pc, #420]	; (19808 <atca_kit_parse_ecc_commands+0x2d4>)
   19662:	4798      	blx	r3
   19664:	0003      	movs	r3, r0
   19666:	7023      	strb	r3, [r4, #0]
			if (status != KIT_STATUS_SUCCESS)
   19668:	2327      	movs	r3, #39	; 0x27
   1966a:	18fb      	adds	r3, r7, r3
   1966c:	781b      	ldrb	r3, [r3, #0]
   1966e:	2b00      	cmp	r3, #0
   19670:	d100      	bne.n	19674 <atca_kit_parse_ecc_commands+0x140>
   19672:	e0bc      	b.n	197ee <atca_kit_parse_ecc_commands+0x2ba>
				return status;
   19674:	2327      	movs	r3, #39	; 0x27
   19676:	18fb      	adds	r3, r7, r3
   19678:	781b      	ldrb	r3, [r3, #0]
   1967a:	e0bc      	b.n	197f6 <atca_kit_parse_ecc_commands+0x2c2>
			break;

		// --------- calls functions in sha204_i2c.c and sha204_swi.c  ------------------
		case 'p':
			// ----------------------- "s[ha204]:p[hysical]:" ---------------------------
			pToken = strchr(&pToken[1], ':');
   1967c:	6a3b      	ldr	r3, [r7, #32]
   1967e:	3301      	adds	r3, #1
   19680:	213a      	movs	r1, #58	; 0x3a
   19682:	0018      	movs	r0, r3
   19684:	4b5e      	ldr	r3, [pc, #376]	; (19800 <atca_kit_parse_ecc_commands+0x2cc>)
   19686:	4798      	blx	r3
   19688:	0003      	movs	r3, r0
   1968a:	623b      	str	r3, [r7, #32]
			if (!pToken)
   1968c:	6a3b      	ldr	r3, [r7, #32]
   1968e:	2b00      	cmp	r3, #0
   19690:	d103      	bne.n	1969a <atca_kit_parse_ecc_commands+0x166>
				return status;
   19692:	2327      	movs	r3, #39	; 0x27
   19694:	18fb      	adds	r3, r7, r3
   19696:	781b      	ldrb	r3, [r3, #0]
   19698:	e0ad      	b.n	197f6 <atca_kit_parse_ecc_commands+0x2c2>

			switch (pToken[1]) {
   1969a:	6a3b      	ldr	r3, [r7, #32]
   1969c:	3301      	adds	r3, #1
   1969e:	781b      	ldrb	r3, [r3, #0]
   196a0:	2b72      	cmp	r3, #114	; 0x72
   196a2:	d039      	beq.n	19718 <atca_kit_parse_ecc_commands+0x1e4>
   196a4:	dc02      	bgt.n	196ac <atca_kit_parse_ecc_commands+0x178>
   196a6:	2b63      	cmp	r3, #99	; 0x63
   196a8:	d015      	beq.n	196d6 <atca_kit_parse_ecc_commands+0x1a2>
   196aa:	e08c      	b.n	197c6 <atca_kit_parse_ecc_commands+0x292>
   196ac:	2b73      	cmp	r3, #115	; 0x73
   196ae:	d066      	beq.n	1977e <atca_kit_parse_ecc_commands+0x24a>
   196b0:	2b77      	cmp	r3, #119	; 0x77
   196b2:	d000      	beq.n	196b6 <atca_kit_parse_ecc_commands+0x182>
   196b4:	e087      	b.n	197c6 <atca_kit_parse_ecc_commands+0x292>
				// Wake-up without receive.
				case 'w':
					status = atcab_wakeup();
   196b6:	2327      	movs	r3, #39	; 0x27
   196b8:	18fc      	adds	r4, r7, r3
   196ba:	4b55      	ldr	r3, [pc, #340]	; (19810 <atca_kit_parse_ecc_commands+0x2dc>)
   196bc:	4798      	blx	r3
   196be:	0003      	movs	r3, r0
   196c0:	7023      	strb	r3, [r4, #0]
					if (status != KIT_STATUS_SUCCESS)
   196c2:	2327      	movs	r3, #39	; 0x27
   196c4:	18fb      	adds	r3, r7, r3
   196c6:	781b      	ldrb	r3, [r3, #0]
   196c8:	2b00      	cmp	r3, #0
   196ca:	d100      	bne.n	196ce <atca_kit_parse_ecc_commands+0x19a>
   196cc:	e080      	b.n	197d0 <atca_kit_parse_ecc_commands+0x29c>
						return status;					
   196ce:	2327      	movs	r3, #39	; 0x27
   196d0:	18fb      	adds	r3, r7, r3
   196d2:	781b      	ldrb	r3, [r3, #0]
   196d4:	e08f      	b.n	197f6 <atca_kit_parse_ecc_commands+0x2c2>
					break;

				case 'c':
					// Send command.
					status = atca_kit_extract_data_load((const char*)pToken + 2, &dataLength, data_load);
   196d6:	6a3b      	ldr	r3, [r7, #32]
   196d8:	3302      	adds	r3, #2
   196da:	2227      	movs	r2, #39	; 0x27
   196dc:	18bc      	adds	r4, r7, r2
   196de:	2214      	movs	r2, #20
   196e0:	18ba      	adds	r2, r7, r2
   196e2:	211a      	movs	r1, #26
   196e4:	1879      	adds	r1, r7, r1
   196e6:	0018      	movs	r0, r3
   196e8:	4b47      	ldr	r3, [pc, #284]	; (19808 <atca_kit_parse_ecc_commands+0x2d4>)
   196ea:	4798      	blx	r3
   196ec:	0003      	movs	r3, r0
   196ee:	7023      	strb	r3, [r4, #0]
					if (status != KIT_STATUS_SUCCESS)
   196f0:	2327      	movs	r3, #39	; 0x27
   196f2:	18fb      	adds	r3, r7, r3
   196f4:	781b      	ldrb	r3, [r3, #0]
   196f6:	2b00      	cmp	r3, #0
   196f8:	d003      	beq.n	19702 <atca_kit_parse_ecc_commands+0x1ce>
						return status;
   196fa:	2327      	movs	r3, #39	; 0x27
   196fc:	18fb      	adds	r3, r7, r3
   196fe:	781b      	ldrb	r3, [r3, #0]
   19700:	e079      	b.n	197f6 <atca_kit_parse_ecc_commands+0x2c2>
					dataLoad = data_load[0];
   19702:	697b      	ldr	r3, [r7, #20]
   19704:	61fb      	str	r3, [r7, #28]
					status = atca_kit_send_command(dataLoad);				
   19706:	2327      	movs	r3, #39	; 0x27
   19708:	18fc      	adds	r4, r7, r3
   1970a:	69fb      	ldr	r3, [r7, #28]
   1970c:	0018      	movs	r0, r3
   1970e:	4b43      	ldr	r3, [pc, #268]	; (1981c <atca_kit_parse_ecc_commands+0x2e8>)
   19710:	4798      	blx	r3
   19712:	0003      	movs	r3, r0
   19714:	7023      	strb	r3, [r4, #0]
					break;
   19716:	e05e      	b.n	197d6 <atca_kit_parse_ecc_commands+0x2a2>

				// Receive response.
				case 'r':
					status = atca_kit_extract_data_load((const char*)pToken + 2, &dataLength, data_load);
   19718:	6a3b      	ldr	r3, [r7, #32]
   1971a:	3302      	adds	r3, #2
   1971c:	2227      	movs	r2, #39	; 0x27
   1971e:	18bc      	adds	r4, r7, r2
   19720:	2214      	movs	r2, #20
   19722:	18ba      	adds	r2, r7, r2
   19724:	211a      	movs	r1, #26
   19726:	1879      	adds	r1, r7, r1
   19728:	0018      	movs	r0, r3
   1972a:	4b37      	ldr	r3, [pc, #220]	; (19808 <atca_kit_parse_ecc_commands+0x2d4>)
   1972c:	4798      	blx	r3
   1972e:	0003      	movs	r3, r0
   19730:	7023      	strb	r3, [r4, #0]
					if (status != KIT_STATUS_SUCCESS)
   19732:	2327      	movs	r3, #39	; 0x27
   19734:	18fb      	adds	r3, r7, r3
   19736:	781b      	ldrb	r3, [r3, #0]
   19738:	2b00      	cmp	r3, #0
   1973a:	d003      	beq.n	19744 <atca_kit_parse_ecc_commands+0x210>
						return status;
   1973c:	2327      	movs	r3, #39	; 0x27
   1973e:	18fb      	adds	r3, r7, r3
   19740:	781b      	ldrb	r3, [r3, #0]
   19742:	e058      	b.n	197f6 <atca_kit_parse_ecc_commands+0x2c2>
					// Reset count byte.
					response[SHA204_BUFFER_POS_COUNT] = 0;
   19744:	683b      	ldr	r3, [r7, #0]
   19746:	2200      	movs	r2, #0
   19748:	701a      	strb	r2, [r3, #0]
					status = atca_kit_receive_response(*data_load[0], response);
   1974a:	697b      	ldr	r3, [r7, #20]
   1974c:	781b      	ldrb	r3, [r3, #0]
   1974e:	2227      	movs	r2, #39	; 0x27
   19750:	18bc      	adds	r4, r7, r2
   19752:	683a      	ldr	r2, [r7, #0]
   19754:	0011      	movs	r1, r2
   19756:	0018      	movs	r0, r3
   19758:	4b31      	ldr	r3, [pc, #196]	; (19820 <atca_kit_parse_ecc_commands+0x2ec>)
   1975a:	4798      	blx	r3
   1975c:	0003      	movs	r3, r0
   1975e:	7023      	strb	r3, [r4, #0]
					if (status != KIT_STATUS_SUCCESS)
   19760:	2327      	movs	r3, #39	; 0x27
   19762:	18fb      	adds	r3, r7, r3
   19764:	781b      	ldrb	r3, [r3, #0]
   19766:	2b00      	cmp	r3, #0
   19768:	d003      	beq.n	19772 <atca_kit_parse_ecc_commands+0x23e>
						return status;					
   1976a:	2327      	movs	r3, #39	; 0x27
   1976c:	18fb      	adds	r3, r7, r3
   1976e:	781b      	ldrb	r3, [r3, #0]
   19770:	e041      	b.n	197f6 <atca_kit_parse_ecc_commands+0x2c2>
					*responseLength = response[SHA204_BUFFER_POS_COUNT];
   19772:	683b      	ldr	r3, [r7, #0]
   19774:	781b      	ldrb	r3, [r3, #0]
   19776:	b29a      	uxth	r2, r3
   19778:	687b      	ldr	r3, [r7, #4]
   1977a:	801a      	strh	r2, [r3, #0]
					break;
   1977c:	e02b      	b.n	197d6 <atca_kit_parse_ecc_commands+0x2a2>

				case 's':
					// -- "s[elect](device index | TWI address)" or "s[leep]" ----------------
					status = atca_kit_extract_data_load((const char*)pToken + 2, &dataLength, data_load);
   1977e:	6a3b      	ldr	r3, [r7, #32]
   19780:	3302      	adds	r3, #2
   19782:	2227      	movs	r2, #39	; 0x27
   19784:	18bc      	adds	r4, r7, r2
   19786:	2214      	movs	r2, #20
   19788:	18ba      	adds	r2, r7, r2
   1978a:	211a      	movs	r1, #26
   1978c:	1879      	adds	r1, r7, r1
   1978e:	0018      	movs	r0, r3
   19790:	4b1d      	ldr	r3, [pc, #116]	; (19808 <atca_kit_parse_ecc_commands+0x2d4>)
   19792:	4798      	blx	r3
   19794:	0003      	movs	r3, r0
   19796:	7023      	strb	r3, [r4, #0]
					if (status == KIT_STATUS_SUCCESS) {
   19798:	2327      	movs	r3, #39	; 0x27
   1979a:	18fb      	adds	r3, r7, r3
   1979c:	781b      	ldrb	r3, [r3, #0]
   1979e:	2b00      	cmp	r3, #0
   197a0:	d102      	bne.n	197a8 <atca_kit_parse_ecc_commands+0x274>
						// Select device (I2C: address; SWI: index into GPIO array).
						dataLoad = data_load[0];
   197a2:	697b      	ldr	r3, [r7, #20]
   197a4:	61fb      	str	r3, [r7, #28]
						// Sleep command
						status = atcab_idle();
						if (status != KIT_STATUS_SUCCESS)
							return status;						
					}
					break;
   197a6:	e015      	b.n	197d4 <atca_kit_parse_ecc_commands+0x2a0>
						status = atcab_idle();
   197a8:	2327      	movs	r3, #39	; 0x27
   197aa:	18fc      	adds	r4, r7, r3
   197ac:	4b1a      	ldr	r3, [pc, #104]	; (19818 <atca_kit_parse_ecc_commands+0x2e4>)
   197ae:	4798      	blx	r3
   197b0:	0003      	movs	r3, r0
   197b2:	7023      	strb	r3, [r4, #0]
						if (status != KIT_STATUS_SUCCESS)
   197b4:	2327      	movs	r3, #39	; 0x27
   197b6:	18fb      	adds	r3, r7, r3
   197b8:	781b      	ldrb	r3, [r3, #0]
   197ba:	2b00      	cmp	r3, #0
   197bc:	d00a      	beq.n	197d4 <atca_kit_parse_ecc_commands+0x2a0>
							return status;						
   197be:	2327      	movs	r3, #39	; 0x27
   197c0:	18fb      	adds	r3, r7, r3
   197c2:	781b      	ldrb	r3, [r3, #0]
   197c4:	e017      	b.n	197f6 <atca_kit_parse_ecc_commands+0x2c2>

				default:
					status = KIT_STATUS_UNKNOWN_COMMAND;
   197c6:	2327      	movs	r3, #39	; 0x27
   197c8:	18fb      	adds	r3, r7, r3
   197ca:	22c0      	movs	r2, #192	; 0xc0
   197cc:	701a      	strb	r2, [r3, #0]
					break;
   197ce:	e002      	b.n	197d6 <atca_kit_parse_ecc_commands+0x2a2>
					break;
   197d0:	46c0      	nop			; (mov r8, r8)
   197d2:	e00d      	b.n	197f0 <atca_kit_parse_ecc_commands+0x2bc>
					break;
   197d4:	46c0      	nop			; (mov r8, r8)
					
				} // end physical			
			break;
   197d6:	e00b      	b.n	197f0 <atca_kit_parse_ecc_commands+0x2bc>
			
		default:
			status = KIT_STATUS_UNKNOWN_COMMAND;
   197d8:	2327      	movs	r3, #39	; 0x27
   197da:	18fb      	adds	r3, r7, r3
   197dc:	22c0      	movs	r2, #192	; 0xc0
   197de:	701a      	strb	r2, [r3, #0]
			break;
   197e0:	e006      	b.n	197f0 <atca_kit_parse_ecc_commands+0x2bc>
			break;
   197e2:	46c0      	nop			; (mov r8, r8)
   197e4:	e004      	b.n	197f0 <atca_kit_parse_ecc_commands+0x2bc>
			break;
   197e6:	46c0      	nop			; (mov r8, r8)
   197e8:	e002      	b.n	197f0 <atca_kit_parse_ecc_commands+0x2bc>
			break;
   197ea:	46c0      	nop			; (mov r8, r8)
   197ec:	e000      	b.n	197f0 <atca_kit_parse_ecc_commands+0x2bc>
			break;
   197ee:	46c0      	nop			; (mov r8, r8)
	}
	
	return status;
   197f0:	2327      	movs	r3, #39	; 0x27
   197f2:	18fb      	adds	r3, r7, r3
   197f4:	781b      	ldrb	r3, [r3, #0]
}
   197f6:	0018      	movs	r0, r3
   197f8:	46bd      	mov	sp, r7
   197fa:	b00b      	add	sp, #44	; 0x2c
   197fc:	bd90      	pop	{r4, r7, pc}
   197fe:	46c0      	nop			; (mov r8, r8)
   19800:	0001c6ff 	.word	0x0001c6ff
   19804:	00021bb4 	.word	0x00021bb4
   19808:	00019825 	.word	0x00019825
   1980c:	000191c5 	.word	0x000191c5
   19810:	0000ff61 	.word	0x0000ff61
   19814:	0000ffb9 	.word	0x0000ffb9
   19818:	0000ff8d 	.word	0x0000ff8d
   1981c:	0001933d 	.word	0x0001933d
   19820:	00019481 	.word	0x00019481

00019824 <atca_kit_extract_data_load>:
 * \param[out] dataLength number of bytes extracted
 * \param[out] data pointer to pointer to binary data
 * \return status: invalid parameters or success
 */
uint8_t atca_kit_extract_data_load(const char* command, uint16_t* dataLength, uint8_t** data)
{
   19824:	b580      	push	{r7, lr}
   19826:	b088      	sub	sp, #32
   19828:	af00      	add	r7, sp, #0
   1982a:	60f8      	str	r0, [r7, #12]
   1982c:	60b9      	str	r1, [r7, #8]
   1982e:	607a      	str	r2, [r7, #4]
	uint8_t status = KIT_STATUS_INVALID_PARAMS;
   19830:	231b      	movs	r3, #27
   19832:	18fb      	adds	r3, r7, r3
   19834:	22c3      	movs	r2, #195	; 0xc3
   19836:	701a      	strb	r2, [r3, #0]
	if (!command || !dataLength || !data)
   19838:	68fb      	ldr	r3, [r7, #12]
   1983a:	2b00      	cmp	r3, #0
   1983c:	d005      	beq.n	1984a <atca_kit_extract_data_load+0x26>
   1983e:	68bb      	ldr	r3, [r7, #8]
   19840:	2b00      	cmp	r3, #0
   19842:	d002      	beq.n	1984a <atca_kit_extract_data_load+0x26>
   19844:	687b      	ldr	r3, [r7, #4]
   19846:	2b00      	cmp	r3, #0
   19848:	d103      	bne.n	19852 <atca_kit_extract_data_load+0x2e>
		return status;
   1984a:	231b      	movs	r3, #27
   1984c:	18fb      	adds	r3, r7, r3
   1984e:	781b      	ldrb	r3, [r3, #0]
   19850:	e03b      	b.n	198ca <atca_kit_extract_data_load+0xa6>

	char* pToken = strchr(command, '(');
   19852:	68fb      	ldr	r3, [r7, #12]
   19854:	2128      	movs	r1, #40	; 0x28
   19856:	0018      	movs	r0, r3
   19858:	4b1e      	ldr	r3, [pc, #120]	; (198d4 <atca_kit_extract_data_load+0xb0>)
   1985a:	4798      	blx	r3
   1985c:	0003      	movs	r3, r0
   1985e:	617b      	str	r3, [r7, #20]
	if (!pToken)
   19860:	697b      	ldr	r3, [r7, #20]
   19862:	2b00      	cmp	r3, #0
   19864:	d103      	bne.n	1986e <atca_kit_extract_data_load+0x4a>
		return status;
   19866:	231b      	movs	r3, #27
   19868:	18fb      	adds	r3, r7, r3
   1986a:	781b      	ldrb	r3, [r3, #0]
   1986c:	e02d      	b.n	198ca <atca_kit_extract_data_load+0xa6>

	char* dataEnd = strchr(pToken, ')');
   1986e:	697b      	ldr	r3, [r7, #20]
   19870:	2129      	movs	r1, #41	; 0x29
   19872:	0018      	movs	r0, r3
   19874:	4b17      	ldr	r3, [pc, #92]	; (198d4 <atca_kit_extract_data_load+0xb0>)
   19876:	4798      	blx	r3
   19878:	0003      	movs	r3, r0
   1987a:	61fb      	str	r3, [r7, #28]
	if (!dataEnd)
   1987c:	69fb      	ldr	r3, [r7, #28]
   1987e:	2b00      	cmp	r3, #0
   19880:	d108      	bne.n	19894 <atca_kit_extract_data_load+0x70>
		// Allow a missing closing parenthesis.
		dataEnd = (char *) command + strlen(command);
   19882:	68fb      	ldr	r3, [r7, #12]
   19884:	0018      	movs	r0, r3
   19886:	4b14      	ldr	r3, [pc, #80]	; (198d8 <atca_kit_extract_data_load+0xb4>)
   19888:	4798      	blx	r3
   1988a:	0002      	movs	r2, r0
   1988c:	68fb      	ldr	r3, [r7, #12]
   1988e:	189b      	adds	r3, r3, r2
   19890:	61fb      	str	r3, [r7, #28]
   19892:	e002      	b.n	1989a <atca_kit_extract_data_load+0x76>
	else
		dataEnd--;
   19894:	69fb      	ldr	r3, [r7, #28]
   19896:	3b01      	subs	r3, #1
   19898:	61fb      	str	r3, [r7, #28]

	uint16_t asciiLength = (uint16_t) (dataEnd - pToken);
   1989a:	69fa      	ldr	r2, [r7, #28]
   1989c:	697b      	ldr	r3, [r7, #20]
   1989e:	1ad2      	subs	r2, r2, r3
   198a0:	2312      	movs	r3, #18
   198a2:	18fb      	adds	r3, r7, r3
   198a4:	801a      	strh	r2, [r3, #0]
	*data = (uint8_t *) pToken + 1;
   198a6:	697b      	ldr	r3, [r7, #20]
   198a8:	1c5a      	adds	r2, r3, #1
   198aa:	687b      	ldr	r3, [r7, #4]
   198ac:	601a      	str	r2, [r3, #0]
	*dataLength = atca_kit_convert_ascii_to_binary(asciiLength, *data);
   198ae:	687b      	ldr	r3, [r7, #4]
   198b0:	681a      	ldr	r2, [r3, #0]
   198b2:	2312      	movs	r3, #18
   198b4:	18fb      	adds	r3, r7, r3
   198b6:	881b      	ldrh	r3, [r3, #0]
   198b8:	0011      	movs	r1, r2
   198ba:	0018      	movs	r0, r3
   198bc:	4b07      	ldr	r3, [pc, #28]	; (198dc <atca_kit_extract_data_load+0xb8>)
   198be:	4798      	blx	r3
   198c0:	0003      	movs	r3, r0
   198c2:	001a      	movs	r2, r3
   198c4:	68bb      	ldr	r3, [r7, #8]
   198c6:	801a      	strh	r2, [r3, #0]

	return KIT_STATUS_SUCCESS;
   198c8:	2300      	movs	r3, #0
}
   198ca:	0018      	movs	r0, r3
   198cc:	46bd      	mov	sp, r7
   198ce:	b008      	add	sp, #32
   198d0:	bd80      	pop	{r7, pc}
   198d2:	46c0      	nop			; (mov r8, r8)
   198d4:	0001c6ff 	.word	0x0001c6ff
   198d8:	0001c72b 	.word	0x0001c72b
   198dc:	000188f1 	.word	0x000188f1

000198e0 <atca_kit_create_usb_packet>:
    \param[in] length number of bytes in data load plus one status byte
    \param[in] buffer pointer to data
    \return length of ASCII data
*/
uint16_t atca_kit_create_usb_packet(uint16_t length, uint8_t *buffer)
{
   198e0:	b590      	push	{r4, r7, lr}
   198e2:	b085      	sub	sp, #20
   198e4:	af00      	add	r7, sp, #0
   198e6:	0002      	movs	r2, r0
   198e8:	6039      	str	r1, [r7, #0]
   198ea:	1dbb      	adds	r3, r7, #6
   198ec:	801a      	strh	r2, [r3, #0]
	uint16_t binBufferIndex = length - 1;
   198ee:	230e      	movs	r3, #14
   198f0:	18fb      	adds	r3, r7, r3
   198f2:	1dba      	adds	r2, r7, #6
   198f4:	8812      	ldrh	r2, [r2, #0]
   198f6:	3a01      	subs	r2, #1
   198f8:	801a      	strh	r2, [r3, #0]
	// Size of data load is length minus status byte.
	uint16_t asciiLength = 2 * (length - 1) + 5; // + 5: 2 status byte characters + '(' + ")\n"
   198fa:	1dbb      	adds	r3, r7, #6
   198fc:	881b      	ldrh	r3, [r3, #0]
   198fe:	3b01      	subs	r3, #1
   19900:	b29b      	uxth	r3, r3
   19902:	18db      	adds	r3, r3, r3
   19904:	b29a      	uxth	r2, r3
   19906:	230a      	movs	r3, #10
   19908:	18fb      	adds	r3, r7, r3
   1990a:	3205      	adds	r2, #5
   1990c:	801a      	strh	r2, [r3, #0]
	uint16_t asciiBufferIndex = asciiLength - 1;
   1990e:	230c      	movs	r3, #12
   19910:	18fb      	adds	r3, r7, r3
   19912:	220a      	movs	r2, #10
   19914:	18ba      	adds	r2, r7, r2
   19916:	8812      	ldrh	r2, [r2, #0]
   19918:	3a01      	subs	r2, #1
   1991a:	801a      	strh	r2, [r3, #0]
	uint8_t byteValue;

	// Terminate ASCII packet.
	buffer[asciiBufferIndex--] = KIT_EOP;
   1991c:	230c      	movs	r3, #12
   1991e:	18fb      	adds	r3, r7, r3
   19920:	881b      	ldrh	r3, [r3, #0]
   19922:	220c      	movs	r2, #12
   19924:	18ba      	adds	r2, r7, r2
   19926:	1e59      	subs	r1, r3, #1
   19928:	8011      	strh	r1, [r2, #0]
   1992a:	001a      	movs	r2, r3
   1992c:	683b      	ldr	r3, [r7, #0]
   1992e:	189b      	adds	r3, r3, r2
   19930:	220a      	movs	r2, #10
   19932:	701a      	strb	r2, [r3, #0]

	// Append ')'.
	buffer[asciiBufferIndex--] = ')';
   19934:	230c      	movs	r3, #12
   19936:	18fb      	adds	r3, r7, r3
   19938:	881b      	ldrh	r3, [r3, #0]
   1993a:	220c      	movs	r2, #12
   1993c:	18ba      	adds	r2, r7, r2
   1993e:	1e59      	subs	r1, r3, #1
   19940:	8011      	strh	r1, [r2, #0]
   19942:	001a      	movs	r2, r3
   19944:	683b      	ldr	r3, [r7, #0]
   19946:	189b      	adds	r3, r3, r2
   19948:	2229      	movs	r2, #41	; 0x29
   1994a:	701a      	strb	r2, [r3, #0]

	// Convert binary data to hex-ascii starting with the last byte of data.
	while (binBufferIndex)
   1994c:	e033      	b.n	199b6 <atca_kit_create_usb_packet+0xd6>
	{
		byteValue = buffer[binBufferIndex--];
   1994e:	230e      	movs	r3, #14
   19950:	18fb      	adds	r3, r7, r3
   19952:	881b      	ldrh	r3, [r3, #0]
   19954:	220e      	movs	r2, #14
   19956:	18ba      	adds	r2, r7, r2
   19958:	1e59      	subs	r1, r3, #1
   1995a:	8011      	strh	r1, [r2, #0]
   1995c:	001a      	movs	r2, r3
   1995e:	683b      	ldr	r3, [r7, #0]
   19960:	189a      	adds	r2, r3, r2
   19962:	2309      	movs	r3, #9
   19964:	18fb      	adds	r3, r7, r3
   19966:	7812      	ldrb	r2, [r2, #0]
   19968:	701a      	strb	r2, [r3, #0]
		buffer[asciiBufferIndex--] = atca_kit_convert_nibble_to_ascii(byteValue);
   1996a:	230c      	movs	r3, #12
   1996c:	18fb      	adds	r3, r7, r3
   1996e:	881b      	ldrh	r3, [r3, #0]
   19970:	220c      	movs	r2, #12
   19972:	18ba      	adds	r2, r7, r2
   19974:	1e59      	subs	r1, r3, #1
   19976:	8011      	strh	r1, [r2, #0]
   19978:	001a      	movs	r2, r3
   1997a:	683b      	ldr	r3, [r7, #0]
   1997c:	189c      	adds	r4, r3, r2
   1997e:	2309      	movs	r3, #9
   19980:	18fb      	adds	r3, r7, r3
   19982:	781b      	ldrb	r3, [r3, #0]
   19984:	0018      	movs	r0, r3
   19986:	4b2b      	ldr	r3, [pc, #172]	; (19a34 <atca_kit_create_usb_packet+0x154>)
   19988:	4798      	blx	r3
   1998a:	0003      	movs	r3, r0
   1998c:	7023      	strb	r3, [r4, #0]
		buffer[asciiBufferIndex--] = atca_kit_convert_nibble_to_ascii(byteValue >> 4);
   1998e:	230c      	movs	r3, #12
   19990:	18fb      	adds	r3, r7, r3
   19992:	881b      	ldrh	r3, [r3, #0]
   19994:	220c      	movs	r2, #12
   19996:	18ba      	adds	r2, r7, r2
   19998:	1e59      	subs	r1, r3, #1
   1999a:	8011      	strh	r1, [r2, #0]
   1999c:	001a      	movs	r2, r3
   1999e:	683b      	ldr	r3, [r7, #0]
   199a0:	189c      	adds	r4, r3, r2
   199a2:	2309      	movs	r3, #9
   199a4:	18fb      	adds	r3, r7, r3
   199a6:	781b      	ldrb	r3, [r3, #0]
   199a8:	091b      	lsrs	r3, r3, #4
   199aa:	b2db      	uxtb	r3, r3
   199ac:	0018      	movs	r0, r3
   199ae:	4b21      	ldr	r3, [pc, #132]	; (19a34 <atca_kit_create_usb_packet+0x154>)
   199b0:	4798      	blx	r3
   199b2:	0003      	movs	r3, r0
   199b4:	7023      	strb	r3, [r4, #0]
	while (binBufferIndex)
   199b6:	230e      	movs	r3, #14
   199b8:	18fb      	adds	r3, r7, r3
   199ba:	881b      	ldrh	r3, [r3, #0]
   199bc:	2b00      	cmp	r3, #0
   199be:	d1c6      	bne.n	1994e <atca_kit_create_usb_packet+0x6e>
	}

	// Start data load with open parenthesis.
	buffer[asciiBufferIndex--] = '(';
   199c0:	230c      	movs	r3, #12
   199c2:	18fb      	adds	r3, r7, r3
   199c4:	881b      	ldrh	r3, [r3, #0]
   199c6:	220c      	movs	r2, #12
   199c8:	18ba      	adds	r2, r7, r2
   199ca:	1e59      	subs	r1, r3, #1
   199cc:	8011      	strh	r1, [r2, #0]
   199ce:	001a      	movs	r2, r3
   199d0:	683b      	ldr	r3, [r7, #0]
   199d2:	189b      	adds	r3, r3, r2
   199d4:	2228      	movs	r2, #40	; 0x28
   199d6:	701a      	strb	r2, [r3, #0]

	// Convert first byte (function return value) to hex-ascii.
	byteValue = buffer[0];
   199d8:	2309      	movs	r3, #9
   199da:	18fb      	adds	r3, r7, r3
   199dc:	683a      	ldr	r2, [r7, #0]
   199de:	7812      	ldrb	r2, [r2, #0]
   199e0:	701a      	strb	r2, [r3, #0]
	buffer[asciiBufferIndex--] = atca_kit_convert_nibble_to_ascii(byteValue);
   199e2:	230c      	movs	r3, #12
   199e4:	18fb      	adds	r3, r7, r3
   199e6:	881b      	ldrh	r3, [r3, #0]
   199e8:	220c      	movs	r2, #12
   199ea:	18ba      	adds	r2, r7, r2
   199ec:	1e59      	subs	r1, r3, #1
   199ee:	8011      	strh	r1, [r2, #0]
   199f0:	001a      	movs	r2, r3
   199f2:	683b      	ldr	r3, [r7, #0]
   199f4:	189c      	adds	r4, r3, r2
   199f6:	2309      	movs	r3, #9
   199f8:	18fb      	adds	r3, r7, r3
   199fa:	781b      	ldrb	r3, [r3, #0]
   199fc:	0018      	movs	r0, r3
   199fe:	4b0d      	ldr	r3, [pc, #52]	; (19a34 <atca_kit_create_usb_packet+0x154>)
   19a00:	4798      	blx	r3
   19a02:	0003      	movs	r3, r0
   19a04:	7023      	strb	r3, [r4, #0]
	buffer[asciiBufferIndex] = atca_kit_convert_nibble_to_ascii(byteValue >> 4);
   19a06:	230c      	movs	r3, #12
   19a08:	18fb      	adds	r3, r7, r3
   19a0a:	881b      	ldrh	r3, [r3, #0]
   19a0c:	683a      	ldr	r2, [r7, #0]
   19a0e:	18d4      	adds	r4, r2, r3
   19a10:	2309      	movs	r3, #9
   19a12:	18fb      	adds	r3, r7, r3
   19a14:	781b      	ldrb	r3, [r3, #0]
   19a16:	091b      	lsrs	r3, r3, #4
   19a18:	b2db      	uxtb	r3, r3
   19a1a:	0018      	movs	r0, r3
   19a1c:	4b05      	ldr	r3, [pc, #20]	; (19a34 <atca_kit_create_usb_packet+0x154>)
   19a1e:	4798      	blx	r3
   19a20:	0003      	movs	r3, r0
   19a22:	7023      	strb	r3, [r4, #0]

	return asciiLength;
   19a24:	230a      	movs	r3, #10
   19a26:	18fb      	adds	r3, r7, r3
   19a28:	881b      	ldrh	r3, [r3, #0]
}
   19a2a:	0018      	movs	r0, r3
   19a2c:	46bd      	mov	sp, r7
   19a2e:	b005      	add	sp, #20
   19a30:	bd90      	pop	{r4, r7, pc}
   19a32:	46c0      	nop			; (mov r8, r8)
   19a34:	0001883d 	.word	0x0001883d

00019a38 <atca_kit_convert_data>:
 * \param[in] length number of bytes to send
 * \param[in] buffer pointer to tx buffer
 * \return new length of data
 */
uint16_t atca_kit_convert_data(uint16_t length, uint8_t *buffer)
{
   19a38:	b580      	push	{r7, lr}
   19a3a:	b082      	sub	sp, #8
   19a3c:	af00      	add	r7, sp, #0
   19a3e:	0002      	movs	r2, r0
   19a40:	6039      	str	r1, [r7, #0]
   19a42:	1dbb      	adds	r3, r7, #6
   19a44:	801a      	strh	r2, [r3, #0]
	if (length > DEVICE_BUFFER_SIZE_MAX_RX) {
   19a46:	1dbb      	adds	r3, r7, #6
   19a48:	881b      	ldrh	r3, [r3, #0]
   19a4a:	2b7b      	cmp	r3, #123	; 0x7b
   19a4c:	d905      	bls.n	19a5a <atca_kit_convert_data+0x22>
		buffer[0] = KIT_STATUS_USB_TX_OVERFLOW;
   19a4e:	683b      	ldr	r3, [r7, #0]
   19a50:	22c2      	movs	r2, #194	; 0xc2
   19a52:	701a      	strb	r2, [r3, #0]
		length = DEVICE_BUFFER_SIZE_MAX_RX;
   19a54:	1dbb      	adds	r3, r7, #6
   19a56:	227b      	movs	r2, #123	; 0x7b
   19a58:	801a      	strh	r2, [r3, #0]
	}
	return atca_kit_create_usb_packet(length, buffer);
   19a5a:	683a      	ldr	r2, [r7, #0]
   19a5c:	1dbb      	adds	r3, r7, #6
   19a5e:	881b      	ldrh	r3, [r3, #0]
   19a60:	0011      	movs	r1, r2
   19a62:	0018      	movs	r0, r3
   19a64:	4b03      	ldr	r3, [pc, #12]	; (19a74 <atca_kit_convert_data+0x3c>)
   19a66:	4798      	blx	r3
   19a68:	0003      	movs	r3, r0
}
   19a6a:	0018      	movs	r0, r3
   19a6c:	46bd      	mov	sp, r7
   19a6e:	b002      	add	sp, #8
   19a70:	bd80      	pop	{r7, pc}
   19a72:	46c0      	nop			; (mov r8, r8)
   19a74:	000198e1 	.word	0x000198e1

00019a78 <atca_kit_process_usb_packet>:
 * \param[in] rx_length is length of received packet 
 * \param[in] txLength is Tx length to be sent to Host
 * returns pointer of buffer to be sent
 */
uint8_t* atca_kit_process_usb_packet(uint16_t rx_length, uint16_t *txLength)
{
   19a78:	b5b0      	push	{r4, r5, r7, lr}
   19a7a:	b08a      	sub	sp, #40	; 0x28
   19a7c:	af02      	add	r7, sp, #8
   19a7e:	0002      	movs	r2, r0
   19a80:	6039      	str	r1, [r7, #0]
   19a82:	1dbb      	adds	r3, r7, #6
   19a84:	801a      	strh	r2, [r3, #0]
	uint8_t status = KIT_STATUS_SUCCESS;
   19a86:	231f      	movs	r3, #31
   19a88:	18fb      	adds	r3, r7, r3
   19a8a:	2200      	movs	r2, #0
   19a8c:	701a      	strb	r2, [r3, #0]
	uint8_t responseIsAscii = 0;
   19a8e:	230e      	movs	r3, #14
   19a90:	18fb      	adds	r3, r7, r3
   19a92:	2200      	movs	r2, #0
   19a94:	701a      	strb	r2, [r3, #0]
	uint16_t rxLength = rx_length - 1;	// except for a line feed character
   19a96:	2314      	movs	r3, #20
   19a98:	18fb      	adds	r3, r7, r3
   19a9a:	1dba      	adds	r2, r7, #6
   19a9c:	8812      	ldrh	r2, [r2, #0]
   19a9e:	3a01      	subs	r2, #1
   19aa0:	801a      	strh	r2, [r3, #0]
	uint8_t* txBuffer = atca_kit_get_tx_buffer();
   19aa2:	4b66      	ldr	r3, [pc, #408]	; (19c3c <atca_kit_process_usb_packet+0x1c4>)
   19aa4:	4798      	blx	r3
   19aa6:	0003      	movs	r3, r0
   19aa8:	613b      	str	r3, [r7, #16]
	uint8_t* pRxBuffer = atca_kit_get_rx_buffer();
   19aaa:	4b65      	ldr	r3, [pc, #404]	; (19c40 <atca_kit_process_usb_packet+0x1c8>)
   19aac:	4798      	blx	r3
   19aae:	0003      	movs	r3, r0
   19ab0:	61bb      	str	r3, [r7, #24]

	if (rxPacketStatus != KIT_STATUS_SUCCESS) {
   19ab2:	4b64      	ldr	r3, [pc, #400]	; (19c44 <atca_kit_process_usb_packet+0x1cc>)
   19ab4:	781b      	ldrb	r3, [r3, #0]
   19ab6:	2b00      	cmp	r3, #0
   19ab8:	d011      	beq.n	19ade <atca_kit_process_usb_packet+0x66>
		pucUsbTxBuffer[0] = rxPacketStatus;
   19aba:	4b62      	ldr	r3, [pc, #392]	; (19c44 <atca_kit_process_usb_packet+0x1cc>)
   19abc:	781a      	ldrb	r2, [r3, #0]
   19abe:	4b62      	ldr	r3, [pc, #392]	; (19c48 <atca_kit_process_usb_packet+0x1d0>)
   19ac0:	701a      	strb	r2, [r3, #0]
		*txLength = 1;
   19ac2:	683b      	ldr	r3, [r7, #0]
   19ac4:	2201      	movs	r2, #1
   19ac6:	801a      	strh	r2, [r3, #0]
		*txLength = atca_kit_convert_data(*txLength, pucUsbTxBuffer);
   19ac8:	683b      	ldr	r3, [r7, #0]
   19aca:	881b      	ldrh	r3, [r3, #0]
   19acc:	4a5e      	ldr	r2, [pc, #376]	; (19c48 <atca_kit_process_usb_packet+0x1d0>)
   19ace:	0011      	movs	r1, r2
   19ad0:	0018      	movs	r0, r3
   19ad2:	4b5e      	ldr	r3, [pc, #376]	; (19c4c <atca_kit_process_usb_packet+0x1d4>)
   19ad4:	4798      	blx	r3
   19ad6:	0003      	movs	r3, r0
   19ad8:	001a      	movs	r2, r3
   19ada:	683b      	ldr	r3, [r7, #0]
   19adc:	801a      	strh	r2, [r3, #0]
	}

	memset(pucUsbTxBuffer, 0, sizeof(pucUsbTxBuffer));
   19ade:	4a5c      	ldr	r2, [pc, #368]	; (19c50 <atca_kit_process_usb_packet+0x1d8>)
   19ae0:	4b59      	ldr	r3, [pc, #356]	; (19c48 <atca_kit_process_usb_packet+0x1d0>)
   19ae2:	2100      	movs	r1, #0
   19ae4:	0018      	movs	r0, r3
   19ae6:	4b5b      	ldr	r3, [pc, #364]	; (19c54 <atca_kit_process_usb_packet+0x1dc>)
   19ae8:	4798      	blx	r3

	// Process packet.
	for (uint16_t i = 0; i < rxLength; i++)
   19aea:	2316      	movs	r3, #22
   19aec:	18fb      	adds	r3, r7, r3
   19aee:	2200      	movs	r2, #0
   19af0:	801a      	strh	r2, [r3, #0]
   19af2:	e02c      	b.n	19b4e <atca_kit_process_usb_packet+0xd6>
		pRxBuffer[i] = tolower(pRxBuffer[i]);
   19af4:	2316      	movs	r3, #22
   19af6:	18fb      	adds	r3, r7, r3
   19af8:	881b      	ldrh	r3, [r3, #0]
   19afa:	69ba      	ldr	r2, [r7, #24]
   19afc:	18d4      	adds	r4, r2, r3
   19afe:	2316      	movs	r3, #22
   19b00:	18fb      	adds	r3, r7, r3
   19b02:	881b      	ldrh	r3, [r3, #0]
   19b04:	69ba      	ldr	r2, [r7, #24]
   19b06:	18d2      	adds	r2, r2, r3
   19b08:	230f      	movs	r3, #15
   19b0a:	18fb      	adds	r3, r7, r3
   19b0c:	7812      	ldrb	r2, [r2, #0]
   19b0e:	701a      	strb	r2, [r3, #0]
   19b10:	4b51      	ldr	r3, [pc, #324]	; (19c58 <atca_kit_process_usb_packet+0x1e0>)
   19b12:	4798      	blx	r3
   19b14:	0002      	movs	r2, r0
   19b16:	230f      	movs	r3, #15
   19b18:	18fb      	adds	r3, r7, r3
   19b1a:	781b      	ldrb	r3, [r3, #0]
   19b1c:	3301      	adds	r3, #1
   19b1e:	18d3      	adds	r3, r2, r3
   19b20:	781b      	ldrb	r3, [r3, #0]
   19b22:	001a      	movs	r2, r3
   19b24:	2303      	movs	r3, #3
   19b26:	4013      	ands	r3, r2
   19b28:	2b01      	cmp	r3, #1
   19b2a:	d104      	bne.n	19b36 <atca_kit_process_usb_packet+0xbe>
   19b2c:	230f      	movs	r3, #15
   19b2e:	18fb      	adds	r3, r7, r3
   19b30:	781b      	ldrb	r3, [r3, #0]
   19b32:	3320      	adds	r3, #32
   19b34:	e002      	b.n	19b3c <atca_kit_process_usb_packet+0xc4>
   19b36:	230f      	movs	r3, #15
   19b38:	18fb      	adds	r3, r7, r3
   19b3a:	781b      	ldrb	r3, [r3, #0]
   19b3c:	b2db      	uxtb	r3, r3
   19b3e:	7023      	strb	r3, [r4, #0]
	for (uint16_t i = 0; i < rxLength; i++)
   19b40:	2316      	movs	r3, #22
   19b42:	18fb      	adds	r3, r7, r3
   19b44:	881a      	ldrh	r2, [r3, #0]
   19b46:	2316      	movs	r3, #22
   19b48:	18fb      	adds	r3, r7, r3
   19b4a:	3201      	adds	r2, #1
   19b4c:	801a      	strh	r2, [r3, #0]
   19b4e:	2316      	movs	r3, #22
   19b50:	18fa      	adds	r2, r7, r3
   19b52:	2314      	movs	r3, #20
   19b54:	18fb      	adds	r3, r7, r3
   19b56:	8812      	ldrh	r2, [r2, #0]
   19b58:	881b      	ldrh	r3, [r3, #0]
   19b5a:	429a      	cmp	r2, r3
   19b5c:	d3ca      	bcc.n	19af4 <atca_kit_process_usb_packet+0x7c>

	if (pRxBuffer[0] == 'l') {	// lib
   19b5e:	69bb      	ldr	r3, [r7, #24]
   19b60:	781b      	ldrb	r3, [r3, #0]
   19b62:	2b6c      	cmp	r3, #108	; 0x6c
   19b64:	d114      	bne.n	19b90 <atca_kit_process_usb_packet+0x118>
		// "lib" as the first field is optional. Move rx pointer to the next field.
		pRxBuffer = memchr(pRxBuffer, ':', rxBufferIndex);
   19b66:	4b3d      	ldr	r3, [pc, #244]	; (19c5c <atca_kit_process_usb_packet+0x1e4>)
   19b68:	881b      	ldrh	r3, [r3, #0]
   19b6a:	001a      	movs	r2, r3
   19b6c:	69bb      	ldr	r3, [r7, #24]
   19b6e:	213a      	movs	r1, #58	; 0x3a
   19b70:	0018      	movs	r0, r3
   19b72:	4b3b      	ldr	r3, [pc, #236]	; (19c60 <atca_kit_process_usb_packet+0x1e8>)
   19b74:	4798      	blx	r3
   19b76:	0003      	movs	r3, r0
   19b78:	61bb      	str	r3, [r7, #24]
		if (!pRxBuffer)
   19b7a:	69bb      	ldr	r3, [r7, #24]
   19b7c:	2b00      	cmp	r3, #0
   19b7e:	d104      	bne.n	19b8a <atca_kit_process_usb_packet+0x112>
			status = KIT_STATUS_UNKNOWN_COMMAND;
   19b80:	231f      	movs	r3, #31
   19b82:	18fb      	adds	r3, r7, r3
   19b84:	22c0      	movs	r2, #192	; 0xc0
   19b86:	701a      	strb	r2, [r3, #0]
   19b88:	e002      	b.n	19b90 <atca_kit_process_usb_packet+0x118>
		else
			pRxBuffer++;
   19b8a:	69bb      	ldr	r3, [r7, #24]
   19b8c:	3301      	adds	r3, #1
   19b8e:	61bb      	str	r3, [r7, #24]
	}

	switch (pRxBuffer[0]) {
   19b90:	69bb      	ldr	r3, [r7, #24]
   19b92:	781b      	ldrb	r3, [r3, #0]
   19b94:	2b65      	cmp	r3, #101	; 0x65
   19b96:	d004      	beq.n	19ba2 <atca_kit_process_usb_packet+0x12a>
   19b98:	2b73      	cmp	r3, #115	; 0x73
   19b9a:	d002      	beq.n	19ba2 <atca_kit_process_usb_packet+0x12a>
   19b9c:	2b62      	cmp	r3, #98	; 0x62
   19b9e:	d00e      	beq.n	19bbe <atca_kit_process_usb_packet+0x146>
   19ba0:	e020      	b.n	19be4 <atca_kit_process_usb_packet+0x16c>

		case 's':
		case 'e':			
			status = atca_kit_parse_ecc_commands(rxLength, (uint8_t *)pRxBuffer, txLength, pucUsbTxBuffer + 1);
   19ba2:	4d30      	ldr	r5, [pc, #192]	; (19c64 <atca_kit_process_usb_packet+0x1ec>)
   19ba4:	231f      	movs	r3, #31
   19ba6:	18fc      	adds	r4, r7, r3
   19ba8:	683a      	ldr	r2, [r7, #0]
   19baa:	69b9      	ldr	r1, [r7, #24]
   19bac:	2314      	movs	r3, #20
   19bae:	18fb      	adds	r3, r7, r3
   19bb0:	8818      	ldrh	r0, [r3, #0]
   19bb2:	002b      	movs	r3, r5
   19bb4:	4d2c      	ldr	r5, [pc, #176]	; (19c68 <atca_kit_process_usb_packet+0x1f0>)
   19bb6:	47a8      	blx	r5
   19bb8:	0003      	movs	r3, r0
   19bba:	7023      	strb	r3, [r4, #0]
			break;
   19bbc:	e01a      	b.n	19bf4 <atca_kit_process_usb_packet+0x17c>

		case 'b':
			// board level commands ("b[oard]")
			status = atca_kit_parse_board_commands((uint8_t) rxLength, (uint8_t *)pRxBuffer, txLength, txBuffer, &responseIsAscii);
   19bbe:	2314      	movs	r3, #20
   19bc0:	18fb      	adds	r3, r7, r3
   19bc2:	881b      	ldrh	r3, [r3, #0]
   19bc4:	b2db      	uxtb	r3, r3
   19bc6:	b298      	uxth	r0, r3
   19bc8:	231f      	movs	r3, #31
   19bca:	18fc      	adds	r4, r7, r3
   19bcc:	693d      	ldr	r5, [r7, #16]
   19bce:	683a      	ldr	r2, [r7, #0]
   19bd0:	69b9      	ldr	r1, [r7, #24]
   19bd2:	230e      	movs	r3, #14
   19bd4:	18fb      	adds	r3, r7, r3
   19bd6:	9300      	str	r3, [sp, #0]
   19bd8:	002b      	movs	r3, r5
   19bda:	4d24      	ldr	r5, [pc, #144]	; (19c6c <atca_kit_process_usb_packet+0x1f4>)
   19bdc:	47a8      	blx	r5
   19bde:	0003      	movs	r3, r0
   19be0:	7023      	strb	r3, [r4, #0]
			break;
   19be2:	e007      	b.n	19bf4 <atca_kit_process_usb_packet+0x17c>

		default :
			status = KIT_STATUS_UNKNOWN_COMMAND;
   19be4:	231f      	movs	r3, #31
   19be6:	18fb      	adds	r3, r7, r3
   19be8:	22c0      	movs	r2, #192	; 0xc0
   19bea:	701a      	strb	r2, [r3, #0]
			*txLength = 1;			
   19bec:	683b      	ldr	r3, [r7, #0]
   19bee:	2201      	movs	r2, #1
   19bf0:	801a      	strh	r2, [r3, #0]
			break;
   19bf2:	46c0      	nop			; (mov r8, r8)
	}

	if (!responseIsAscii) {
   19bf4:	230e      	movs	r3, #14
   19bf6:	18fb      	adds	r3, r7, r3
   19bf8:	781b      	ldrb	r3, [r3, #0]
   19bfa:	2b00      	cmp	r3, #0
   19bfc:	d119      	bne.n	19c32 <atca_kit_process_usb_packet+0x1ba>
		// Copy leading function return byte.
		pucUsbTxBuffer[0] = status;
   19bfe:	4b12      	ldr	r3, [pc, #72]	; (19c48 <atca_kit_process_usb_packet+0x1d0>)
   19c00:	221f      	movs	r2, #31
   19c02:	18ba      	adds	r2, r7, r2
   19c04:	7812      	ldrb	r2, [r2, #0]
   19c06:	701a      	strb	r2, [r3, #0]
		// Tell atca_kit_convert_data the correct txLength.
		if (*txLength < DEVICE_BUFFER_SIZE_MAX_RX)
   19c08:	683b      	ldr	r3, [r7, #0]
   19c0a:	881b      	ldrh	r3, [r3, #0]
   19c0c:	2b7a      	cmp	r3, #122	; 0x7a
   19c0e:	d805      	bhi.n	19c1c <atca_kit_process_usb_packet+0x1a4>
			(*txLength)++;
   19c10:	683b      	ldr	r3, [r7, #0]
   19c12:	881b      	ldrh	r3, [r3, #0]
   19c14:	3301      	adds	r3, #1
   19c16:	b29a      	uxth	r2, r3
   19c18:	683b      	ldr	r3, [r7, #0]
   19c1a:	801a      	strh	r2, [r3, #0]
		*txLength = atca_kit_convert_data(*txLength, pucUsbTxBuffer);
   19c1c:	683b      	ldr	r3, [r7, #0]
   19c1e:	881b      	ldrh	r3, [r3, #0]
   19c20:	4a09      	ldr	r2, [pc, #36]	; (19c48 <atca_kit_process_usb_packet+0x1d0>)
   19c22:	0011      	movs	r1, r2
   19c24:	0018      	movs	r0, r3
   19c26:	4b09      	ldr	r3, [pc, #36]	; (19c4c <atca_kit_process_usb_packet+0x1d4>)
   19c28:	4798      	blx	r3
   19c2a:	0003      	movs	r3, r0
   19c2c:	001a      	movs	r2, r3
   19c2e:	683b      	ldr	r3, [r7, #0]
   19c30:	801a      	strh	r2, [r3, #0]
	}

	return txBuffer;
   19c32:	693b      	ldr	r3, [r7, #16]
}
   19c34:	0018      	movs	r0, r3
   19c36:	46bd      	mov	sp, r7
   19c38:	b008      	add	sp, #32
   19c3a:	bdb0      	pop	{r4, r5, r7, pc}
   19c3c:	000187b5 	.word	0x000187b5
   19c40:	000187a5 	.word	0x000187a5
   19c44:	200026b8 	.word	0x200026b8
   19c48:	20001dbc 	.word	0x20001dbc
   19c4c:	00019a39 	.word	0x00019a39
   19c50:	000008fc 	.word	0x000008fc
   19c54:	0001c173 	.word	0x0001c173
   19c58:	0001bfc9 	.word	0x0001bfc9
   19c5c:	200026ba 	.word	0x200026ba
   19c60:	0001c109 	.word	0x0001c109
   19c64:	20001dbd 	.word	0x20001dbd
   19c68:	00019535 	.word	0x00019535
   19c6c:	00018c19 	.word	0x00018c19

00019c70 <atca_kit_main_handler>:

/** \brief This handler is to receive and send USB packets with Host over the HID interface.
 */
void atca_kit_main_handler(void)
{
   19c70:	b580      	push	{r7, lr}
   19c72:	b082      	sub	sp, #8
   19c74:	af00      	add	r7, sp, #0
    uint16_t txlen;

    if(g_usb_message_received)
   19c76:	4b11      	ldr	r3, [pc, #68]	; (19cbc <atca_kit_main_handler+0x4c>)
   19c78:	681b      	ldr	r3, [r3, #0]
   19c7a:	2b00      	cmp	r3, #0
   19c7c:	d019      	beq.n	19cb2 <atca_kit_main_handler+0x42>
    {
        atca_kit_counter_set(5000);
   19c7e:	4b10      	ldr	r3, [pc, #64]	; (19cc0 <atca_kit_main_handler+0x50>)
   19c80:	0018      	movs	r0, r3
   19c82:	4b10      	ldr	r3, [pc, #64]	; (19cc4 <atca_kit_main_handler+0x54>)
   19c84:	4798      	blx	r3

        //DEBUG_PRINTF("Kit RX: %d, %s\r\n", g_usb_buffer_length, pucUsbRxBuffer);

        atca_kit_process_usb_packet(g_usb_buffer_length, &txlen);
   19c86:	4b10      	ldr	r3, [pc, #64]	; (19cc8 <atca_kit_main_handler+0x58>)
   19c88:	881b      	ldrh	r3, [r3, #0]
   19c8a:	1dba      	adds	r2, r7, #6
   19c8c:	0011      	movs	r1, r2
   19c8e:	0018      	movs	r0, r3
   19c90:	4b0e      	ldr	r3, [pc, #56]	; (19ccc <atca_kit_main_handler+0x5c>)
   19c92:	4798      	blx	r3
        g_usb_buffer_length = 0;
   19c94:	4b0c      	ldr	r3, [pc, #48]	; (19cc8 <atca_kit_main_handler+0x58>)
   19c96:	2200      	movs	r2, #0
   19c98:	801a      	strh	r2, [r3, #0]
        
        //DEBUG_PRINTF("Kit TX: %d, %s\r\n", txlen, pucUsbTxBuffer);
        usb_send_response_message(pucUsbTxBuffer, txlen);
   19c9a:	1dbb      	adds	r3, r7, #6
   19c9c:	881a      	ldrh	r2, [r3, #0]
   19c9e:	4b0c      	ldr	r3, [pc, #48]	; (19cd0 <atca_kit_main_handler+0x60>)
   19ca0:	0011      	movs	r1, r2
   19ca2:	0018      	movs	r0, r3
   19ca4:	4b0b      	ldr	r3, [pc, #44]	; (19cd4 <atca_kit_main_handler+0x64>)
   19ca6:	4798      	blx	r3

        g_usb_message_received--;
   19ca8:	4b04      	ldr	r3, [pc, #16]	; (19cbc <atca_kit_main_handler+0x4c>)
   19caa:	681b      	ldr	r3, [r3, #0]
   19cac:	1e5a      	subs	r2, r3, #1
   19cae:	4b03      	ldr	r3, [pc, #12]	; (19cbc <atca_kit_main_handler+0x4c>)
   19cb0:	601a      	str	r2, [r3, #0]
    }
}
   19cb2:	46c0      	nop			; (mov r8, r8)
   19cb4:	46bd      	mov	sp, r7
   19cb6:	b002      	add	sp, #8
   19cb8:	bd80      	pop	{r7, pc}
   19cba:	46c0      	nop			; (mov r8, r8)
   19cbc:	20002bf4 	.word	0x20002bf4
   19cc0:	00001388 	.word	0x00001388
   19cc4:	000187dd 	.word	0x000187dd
   19cc8:	20000be0 	.word	0x20000be0
   19ccc:	00019a79 	.word	0x00019a79
   19cd0:	20001dbc 	.word	0x20001dbc
   19cd4:	00017711 	.word	0x00017711

00019cd8 <__udivsi3>:
   19cd8:	2200      	movs	r2, #0
   19cda:	0843      	lsrs	r3, r0, #1
   19cdc:	428b      	cmp	r3, r1
   19cde:	d374      	bcc.n	19dca <__udivsi3+0xf2>
   19ce0:	0903      	lsrs	r3, r0, #4
   19ce2:	428b      	cmp	r3, r1
   19ce4:	d35f      	bcc.n	19da6 <__udivsi3+0xce>
   19ce6:	0a03      	lsrs	r3, r0, #8
   19ce8:	428b      	cmp	r3, r1
   19cea:	d344      	bcc.n	19d76 <__udivsi3+0x9e>
   19cec:	0b03      	lsrs	r3, r0, #12
   19cee:	428b      	cmp	r3, r1
   19cf0:	d328      	bcc.n	19d44 <__udivsi3+0x6c>
   19cf2:	0c03      	lsrs	r3, r0, #16
   19cf4:	428b      	cmp	r3, r1
   19cf6:	d30d      	bcc.n	19d14 <__udivsi3+0x3c>
   19cf8:	22ff      	movs	r2, #255	; 0xff
   19cfa:	0209      	lsls	r1, r1, #8
   19cfc:	ba12      	rev	r2, r2
   19cfe:	0c03      	lsrs	r3, r0, #16
   19d00:	428b      	cmp	r3, r1
   19d02:	d302      	bcc.n	19d0a <__udivsi3+0x32>
   19d04:	1212      	asrs	r2, r2, #8
   19d06:	0209      	lsls	r1, r1, #8
   19d08:	d065      	beq.n	19dd6 <__udivsi3+0xfe>
   19d0a:	0b03      	lsrs	r3, r0, #12
   19d0c:	428b      	cmp	r3, r1
   19d0e:	d319      	bcc.n	19d44 <__udivsi3+0x6c>
   19d10:	e000      	b.n	19d14 <__udivsi3+0x3c>
   19d12:	0a09      	lsrs	r1, r1, #8
   19d14:	0bc3      	lsrs	r3, r0, #15
   19d16:	428b      	cmp	r3, r1
   19d18:	d301      	bcc.n	19d1e <__udivsi3+0x46>
   19d1a:	03cb      	lsls	r3, r1, #15
   19d1c:	1ac0      	subs	r0, r0, r3
   19d1e:	4152      	adcs	r2, r2
   19d20:	0b83      	lsrs	r3, r0, #14
   19d22:	428b      	cmp	r3, r1
   19d24:	d301      	bcc.n	19d2a <__udivsi3+0x52>
   19d26:	038b      	lsls	r3, r1, #14
   19d28:	1ac0      	subs	r0, r0, r3
   19d2a:	4152      	adcs	r2, r2
   19d2c:	0b43      	lsrs	r3, r0, #13
   19d2e:	428b      	cmp	r3, r1
   19d30:	d301      	bcc.n	19d36 <__udivsi3+0x5e>
   19d32:	034b      	lsls	r3, r1, #13
   19d34:	1ac0      	subs	r0, r0, r3
   19d36:	4152      	adcs	r2, r2
   19d38:	0b03      	lsrs	r3, r0, #12
   19d3a:	428b      	cmp	r3, r1
   19d3c:	d301      	bcc.n	19d42 <__udivsi3+0x6a>
   19d3e:	030b      	lsls	r3, r1, #12
   19d40:	1ac0      	subs	r0, r0, r3
   19d42:	4152      	adcs	r2, r2
   19d44:	0ac3      	lsrs	r3, r0, #11
   19d46:	428b      	cmp	r3, r1
   19d48:	d301      	bcc.n	19d4e <__udivsi3+0x76>
   19d4a:	02cb      	lsls	r3, r1, #11
   19d4c:	1ac0      	subs	r0, r0, r3
   19d4e:	4152      	adcs	r2, r2
   19d50:	0a83      	lsrs	r3, r0, #10
   19d52:	428b      	cmp	r3, r1
   19d54:	d301      	bcc.n	19d5a <__udivsi3+0x82>
   19d56:	028b      	lsls	r3, r1, #10
   19d58:	1ac0      	subs	r0, r0, r3
   19d5a:	4152      	adcs	r2, r2
   19d5c:	0a43      	lsrs	r3, r0, #9
   19d5e:	428b      	cmp	r3, r1
   19d60:	d301      	bcc.n	19d66 <__udivsi3+0x8e>
   19d62:	024b      	lsls	r3, r1, #9
   19d64:	1ac0      	subs	r0, r0, r3
   19d66:	4152      	adcs	r2, r2
   19d68:	0a03      	lsrs	r3, r0, #8
   19d6a:	428b      	cmp	r3, r1
   19d6c:	d301      	bcc.n	19d72 <__udivsi3+0x9a>
   19d6e:	020b      	lsls	r3, r1, #8
   19d70:	1ac0      	subs	r0, r0, r3
   19d72:	4152      	adcs	r2, r2
   19d74:	d2cd      	bcs.n	19d12 <__udivsi3+0x3a>
   19d76:	09c3      	lsrs	r3, r0, #7
   19d78:	428b      	cmp	r3, r1
   19d7a:	d301      	bcc.n	19d80 <__udivsi3+0xa8>
   19d7c:	01cb      	lsls	r3, r1, #7
   19d7e:	1ac0      	subs	r0, r0, r3
   19d80:	4152      	adcs	r2, r2
   19d82:	0983      	lsrs	r3, r0, #6
   19d84:	428b      	cmp	r3, r1
   19d86:	d301      	bcc.n	19d8c <__udivsi3+0xb4>
   19d88:	018b      	lsls	r3, r1, #6
   19d8a:	1ac0      	subs	r0, r0, r3
   19d8c:	4152      	adcs	r2, r2
   19d8e:	0943      	lsrs	r3, r0, #5
   19d90:	428b      	cmp	r3, r1
   19d92:	d301      	bcc.n	19d98 <__udivsi3+0xc0>
   19d94:	014b      	lsls	r3, r1, #5
   19d96:	1ac0      	subs	r0, r0, r3
   19d98:	4152      	adcs	r2, r2
   19d9a:	0903      	lsrs	r3, r0, #4
   19d9c:	428b      	cmp	r3, r1
   19d9e:	d301      	bcc.n	19da4 <__udivsi3+0xcc>
   19da0:	010b      	lsls	r3, r1, #4
   19da2:	1ac0      	subs	r0, r0, r3
   19da4:	4152      	adcs	r2, r2
   19da6:	08c3      	lsrs	r3, r0, #3
   19da8:	428b      	cmp	r3, r1
   19daa:	d301      	bcc.n	19db0 <__udivsi3+0xd8>
   19dac:	00cb      	lsls	r3, r1, #3
   19dae:	1ac0      	subs	r0, r0, r3
   19db0:	4152      	adcs	r2, r2
   19db2:	0883      	lsrs	r3, r0, #2
   19db4:	428b      	cmp	r3, r1
   19db6:	d301      	bcc.n	19dbc <__udivsi3+0xe4>
   19db8:	008b      	lsls	r3, r1, #2
   19dba:	1ac0      	subs	r0, r0, r3
   19dbc:	4152      	adcs	r2, r2
   19dbe:	0843      	lsrs	r3, r0, #1
   19dc0:	428b      	cmp	r3, r1
   19dc2:	d301      	bcc.n	19dc8 <__udivsi3+0xf0>
   19dc4:	004b      	lsls	r3, r1, #1
   19dc6:	1ac0      	subs	r0, r0, r3
   19dc8:	4152      	adcs	r2, r2
   19dca:	1a41      	subs	r1, r0, r1
   19dcc:	d200      	bcs.n	19dd0 <__udivsi3+0xf8>
   19dce:	4601      	mov	r1, r0
   19dd0:	4152      	adcs	r2, r2
   19dd2:	4610      	mov	r0, r2
   19dd4:	4770      	bx	lr
   19dd6:	e7ff      	b.n	19dd8 <__udivsi3+0x100>
   19dd8:	b501      	push	{r0, lr}
   19dda:	2000      	movs	r0, #0
   19ddc:	f000 f8f0 	bl	19fc0 <__aeabi_idiv0>
   19de0:	bd02      	pop	{r1, pc}
   19de2:	46c0      	nop			; (mov r8, r8)

00019de4 <__aeabi_uidivmod>:
   19de4:	2900      	cmp	r1, #0
   19de6:	d0f7      	beq.n	19dd8 <__udivsi3+0x100>
   19de8:	e776      	b.n	19cd8 <__udivsi3>
   19dea:	4770      	bx	lr

00019dec <__divsi3>:
   19dec:	4603      	mov	r3, r0
   19dee:	430b      	orrs	r3, r1
   19df0:	d47f      	bmi.n	19ef2 <__divsi3+0x106>
   19df2:	2200      	movs	r2, #0
   19df4:	0843      	lsrs	r3, r0, #1
   19df6:	428b      	cmp	r3, r1
   19df8:	d374      	bcc.n	19ee4 <__divsi3+0xf8>
   19dfa:	0903      	lsrs	r3, r0, #4
   19dfc:	428b      	cmp	r3, r1
   19dfe:	d35f      	bcc.n	19ec0 <__divsi3+0xd4>
   19e00:	0a03      	lsrs	r3, r0, #8
   19e02:	428b      	cmp	r3, r1
   19e04:	d344      	bcc.n	19e90 <__divsi3+0xa4>
   19e06:	0b03      	lsrs	r3, r0, #12
   19e08:	428b      	cmp	r3, r1
   19e0a:	d328      	bcc.n	19e5e <__divsi3+0x72>
   19e0c:	0c03      	lsrs	r3, r0, #16
   19e0e:	428b      	cmp	r3, r1
   19e10:	d30d      	bcc.n	19e2e <__divsi3+0x42>
   19e12:	22ff      	movs	r2, #255	; 0xff
   19e14:	0209      	lsls	r1, r1, #8
   19e16:	ba12      	rev	r2, r2
   19e18:	0c03      	lsrs	r3, r0, #16
   19e1a:	428b      	cmp	r3, r1
   19e1c:	d302      	bcc.n	19e24 <__divsi3+0x38>
   19e1e:	1212      	asrs	r2, r2, #8
   19e20:	0209      	lsls	r1, r1, #8
   19e22:	d065      	beq.n	19ef0 <__divsi3+0x104>
   19e24:	0b03      	lsrs	r3, r0, #12
   19e26:	428b      	cmp	r3, r1
   19e28:	d319      	bcc.n	19e5e <__divsi3+0x72>
   19e2a:	e000      	b.n	19e2e <__divsi3+0x42>
   19e2c:	0a09      	lsrs	r1, r1, #8
   19e2e:	0bc3      	lsrs	r3, r0, #15
   19e30:	428b      	cmp	r3, r1
   19e32:	d301      	bcc.n	19e38 <__divsi3+0x4c>
   19e34:	03cb      	lsls	r3, r1, #15
   19e36:	1ac0      	subs	r0, r0, r3
   19e38:	4152      	adcs	r2, r2
   19e3a:	0b83      	lsrs	r3, r0, #14
   19e3c:	428b      	cmp	r3, r1
   19e3e:	d301      	bcc.n	19e44 <__divsi3+0x58>
   19e40:	038b      	lsls	r3, r1, #14
   19e42:	1ac0      	subs	r0, r0, r3
   19e44:	4152      	adcs	r2, r2
   19e46:	0b43      	lsrs	r3, r0, #13
   19e48:	428b      	cmp	r3, r1
   19e4a:	d301      	bcc.n	19e50 <__divsi3+0x64>
   19e4c:	034b      	lsls	r3, r1, #13
   19e4e:	1ac0      	subs	r0, r0, r3
   19e50:	4152      	adcs	r2, r2
   19e52:	0b03      	lsrs	r3, r0, #12
   19e54:	428b      	cmp	r3, r1
   19e56:	d301      	bcc.n	19e5c <__divsi3+0x70>
   19e58:	030b      	lsls	r3, r1, #12
   19e5a:	1ac0      	subs	r0, r0, r3
   19e5c:	4152      	adcs	r2, r2
   19e5e:	0ac3      	lsrs	r3, r0, #11
   19e60:	428b      	cmp	r3, r1
   19e62:	d301      	bcc.n	19e68 <__divsi3+0x7c>
   19e64:	02cb      	lsls	r3, r1, #11
   19e66:	1ac0      	subs	r0, r0, r3
   19e68:	4152      	adcs	r2, r2
   19e6a:	0a83      	lsrs	r3, r0, #10
   19e6c:	428b      	cmp	r3, r1
   19e6e:	d301      	bcc.n	19e74 <__divsi3+0x88>
   19e70:	028b      	lsls	r3, r1, #10
   19e72:	1ac0      	subs	r0, r0, r3
   19e74:	4152      	adcs	r2, r2
   19e76:	0a43      	lsrs	r3, r0, #9
   19e78:	428b      	cmp	r3, r1
   19e7a:	d301      	bcc.n	19e80 <__divsi3+0x94>
   19e7c:	024b      	lsls	r3, r1, #9
   19e7e:	1ac0      	subs	r0, r0, r3
   19e80:	4152      	adcs	r2, r2
   19e82:	0a03      	lsrs	r3, r0, #8
   19e84:	428b      	cmp	r3, r1
   19e86:	d301      	bcc.n	19e8c <__divsi3+0xa0>
   19e88:	020b      	lsls	r3, r1, #8
   19e8a:	1ac0      	subs	r0, r0, r3
   19e8c:	4152      	adcs	r2, r2
   19e8e:	d2cd      	bcs.n	19e2c <__divsi3+0x40>
   19e90:	09c3      	lsrs	r3, r0, #7
   19e92:	428b      	cmp	r3, r1
   19e94:	d301      	bcc.n	19e9a <__divsi3+0xae>
   19e96:	01cb      	lsls	r3, r1, #7
   19e98:	1ac0      	subs	r0, r0, r3
   19e9a:	4152      	adcs	r2, r2
   19e9c:	0983      	lsrs	r3, r0, #6
   19e9e:	428b      	cmp	r3, r1
   19ea0:	d301      	bcc.n	19ea6 <__divsi3+0xba>
   19ea2:	018b      	lsls	r3, r1, #6
   19ea4:	1ac0      	subs	r0, r0, r3
   19ea6:	4152      	adcs	r2, r2
   19ea8:	0943      	lsrs	r3, r0, #5
   19eaa:	428b      	cmp	r3, r1
   19eac:	d301      	bcc.n	19eb2 <__divsi3+0xc6>
   19eae:	014b      	lsls	r3, r1, #5
   19eb0:	1ac0      	subs	r0, r0, r3
   19eb2:	4152      	adcs	r2, r2
   19eb4:	0903      	lsrs	r3, r0, #4
   19eb6:	428b      	cmp	r3, r1
   19eb8:	d301      	bcc.n	19ebe <__divsi3+0xd2>
   19eba:	010b      	lsls	r3, r1, #4
   19ebc:	1ac0      	subs	r0, r0, r3
   19ebe:	4152      	adcs	r2, r2
   19ec0:	08c3      	lsrs	r3, r0, #3
   19ec2:	428b      	cmp	r3, r1
   19ec4:	d301      	bcc.n	19eca <__divsi3+0xde>
   19ec6:	00cb      	lsls	r3, r1, #3
   19ec8:	1ac0      	subs	r0, r0, r3
   19eca:	4152      	adcs	r2, r2
   19ecc:	0883      	lsrs	r3, r0, #2
   19ece:	428b      	cmp	r3, r1
   19ed0:	d301      	bcc.n	19ed6 <__divsi3+0xea>
   19ed2:	008b      	lsls	r3, r1, #2
   19ed4:	1ac0      	subs	r0, r0, r3
   19ed6:	4152      	adcs	r2, r2
   19ed8:	0843      	lsrs	r3, r0, #1
   19eda:	428b      	cmp	r3, r1
   19edc:	d301      	bcc.n	19ee2 <__divsi3+0xf6>
   19ede:	004b      	lsls	r3, r1, #1
   19ee0:	1ac0      	subs	r0, r0, r3
   19ee2:	4152      	adcs	r2, r2
   19ee4:	1a41      	subs	r1, r0, r1
   19ee6:	d200      	bcs.n	19eea <__divsi3+0xfe>
   19ee8:	4601      	mov	r1, r0
   19eea:	4152      	adcs	r2, r2
   19eec:	4610      	mov	r0, r2
   19eee:	4770      	bx	lr
   19ef0:	e05d      	b.n	19fae <__divsi3+0x1c2>
   19ef2:	0fca      	lsrs	r2, r1, #31
   19ef4:	d000      	beq.n	19ef8 <__divsi3+0x10c>
   19ef6:	4249      	negs	r1, r1
   19ef8:	1003      	asrs	r3, r0, #32
   19efa:	d300      	bcc.n	19efe <__divsi3+0x112>
   19efc:	4240      	negs	r0, r0
   19efe:	4053      	eors	r3, r2
   19f00:	2200      	movs	r2, #0
   19f02:	469c      	mov	ip, r3
   19f04:	0903      	lsrs	r3, r0, #4
   19f06:	428b      	cmp	r3, r1
   19f08:	d32d      	bcc.n	19f66 <__divsi3+0x17a>
   19f0a:	0a03      	lsrs	r3, r0, #8
   19f0c:	428b      	cmp	r3, r1
   19f0e:	d312      	bcc.n	19f36 <__divsi3+0x14a>
   19f10:	22fc      	movs	r2, #252	; 0xfc
   19f12:	0189      	lsls	r1, r1, #6
   19f14:	ba12      	rev	r2, r2
   19f16:	0a03      	lsrs	r3, r0, #8
   19f18:	428b      	cmp	r3, r1
   19f1a:	d30c      	bcc.n	19f36 <__divsi3+0x14a>
   19f1c:	0189      	lsls	r1, r1, #6
   19f1e:	1192      	asrs	r2, r2, #6
   19f20:	428b      	cmp	r3, r1
   19f22:	d308      	bcc.n	19f36 <__divsi3+0x14a>
   19f24:	0189      	lsls	r1, r1, #6
   19f26:	1192      	asrs	r2, r2, #6
   19f28:	428b      	cmp	r3, r1
   19f2a:	d304      	bcc.n	19f36 <__divsi3+0x14a>
   19f2c:	0189      	lsls	r1, r1, #6
   19f2e:	d03a      	beq.n	19fa6 <__divsi3+0x1ba>
   19f30:	1192      	asrs	r2, r2, #6
   19f32:	e000      	b.n	19f36 <__divsi3+0x14a>
   19f34:	0989      	lsrs	r1, r1, #6
   19f36:	09c3      	lsrs	r3, r0, #7
   19f38:	428b      	cmp	r3, r1
   19f3a:	d301      	bcc.n	19f40 <__divsi3+0x154>
   19f3c:	01cb      	lsls	r3, r1, #7
   19f3e:	1ac0      	subs	r0, r0, r3
   19f40:	4152      	adcs	r2, r2
   19f42:	0983      	lsrs	r3, r0, #6
   19f44:	428b      	cmp	r3, r1
   19f46:	d301      	bcc.n	19f4c <__divsi3+0x160>
   19f48:	018b      	lsls	r3, r1, #6
   19f4a:	1ac0      	subs	r0, r0, r3
   19f4c:	4152      	adcs	r2, r2
   19f4e:	0943      	lsrs	r3, r0, #5
   19f50:	428b      	cmp	r3, r1
   19f52:	d301      	bcc.n	19f58 <__divsi3+0x16c>
   19f54:	014b      	lsls	r3, r1, #5
   19f56:	1ac0      	subs	r0, r0, r3
   19f58:	4152      	adcs	r2, r2
   19f5a:	0903      	lsrs	r3, r0, #4
   19f5c:	428b      	cmp	r3, r1
   19f5e:	d301      	bcc.n	19f64 <__divsi3+0x178>
   19f60:	010b      	lsls	r3, r1, #4
   19f62:	1ac0      	subs	r0, r0, r3
   19f64:	4152      	adcs	r2, r2
   19f66:	08c3      	lsrs	r3, r0, #3
   19f68:	428b      	cmp	r3, r1
   19f6a:	d301      	bcc.n	19f70 <__divsi3+0x184>
   19f6c:	00cb      	lsls	r3, r1, #3
   19f6e:	1ac0      	subs	r0, r0, r3
   19f70:	4152      	adcs	r2, r2
   19f72:	0883      	lsrs	r3, r0, #2
   19f74:	428b      	cmp	r3, r1
   19f76:	d301      	bcc.n	19f7c <__divsi3+0x190>
   19f78:	008b      	lsls	r3, r1, #2
   19f7a:	1ac0      	subs	r0, r0, r3
   19f7c:	4152      	adcs	r2, r2
   19f7e:	d2d9      	bcs.n	19f34 <__divsi3+0x148>
   19f80:	0843      	lsrs	r3, r0, #1
   19f82:	428b      	cmp	r3, r1
   19f84:	d301      	bcc.n	19f8a <__divsi3+0x19e>
   19f86:	004b      	lsls	r3, r1, #1
   19f88:	1ac0      	subs	r0, r0, r3
   19f8a:	4152      	adcs	r2, r2
   19f8c:	1a41      	subs	r1, r0, r1
   19f8e:	d200      	bcs.n	19f92 <__divsi3+0x1a6>
   19f90:	4601      	mov	r1, r0
   19f92:	4663      	mov	r3, ip
   19f94:	4152      	adcs	r2, r2
   19f96:	105b      	asrs	r3, r3, #1
   19f98:	4610      	mov	r0, r2
   19f9a:	d301      	bcc.n	19fa0 <__divsi3+0x1b4>
   19f9c:	4240      	negs	r0, r0
   19f9e:	2b00      	cmp	r3, #0
   19fa0:	d500      	bpl.n	19fa4 <__divsi3+0x1b8>
   19fa2:	4249      	negs	r1, r1
   19fa4:	4770      	bx	lr
   19fa6:	4663      	mov	r3, ip
   19fa8:	105b      	asrs	r3, r3, #1
   19faa:	d300      	bcc.n	19fae <__divsi3+0x1c2>
   19fac:	4240      	negs	r0, r0
   19fae:	b501      	push	{r0, lr}
   19fb0:	2000      	movs	r0, #0
   19fb2:	f000 f805 	bl	19fc0 <__aeabi_idiv0>
   19fb6:	bd02      	pop	{r1, pc}

00019fb8 <__aeabi_idivmod>:
   19fb8:	2900      	cmp	r1, #0
   19fba:	d0f8      	beq.n	19fae <__divsi3+0x1c2>
   19fbc:	e716      	b.n	19dec <__divsi3>
   19fbe:	4770      	bx	lr

00019fc0 <__aeabi_idiv0>:
   19fc0:	4770      	bx	lr
   19fc2:	46c0      	nop			; (mov r8, r8)

00019fc4 <__aeabi_cdrcmple>:
   19fc4:	4684      	mov	ip, r0
   19fc6:	1c10      	adds	r0, r2, #0
   19fc8:	4662      	mov	r2, ip
   19fca:	468c      	mov	ip, r1
   19fcc:	1c19      	adds	r1, r3, #0
   19fce:	4663      	mov	r3, ip
   19fd0:	e000      	b.n	19fd4 <__aeabi_cdcmpeq>
   19fd2:	46c0      	nop			; (mov r8, r8)

00019fd4 <__aeabi_cdcmpeq>:
   19fd4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   19fd6:	f000 ff9b 	bl	1af10 <__ledf2>
   19fda:	2800      	cmp	r0, #0
   19fdc:	d401      	bmi.n	19fe2 <__aeabi_cdcmpeq+0xe>
   19fde:	2100      	movs	r1, #0
   19fe0:	42c8      	cmn	r0, r1
   19fe2:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

00019fe4 <__aeabi_dcmpeq>:
   19fe4:	b510      	push	{r4, lr}
   19fe6:	f000 fef5 	bl	1add4 <__eqdf2>
   19fea:	4240      	negs	r0, r0
   19fec:	3001      	adds	r0, #1
   19fee:	bd10      	pop	{r4, pc}

00019ff0 <__aeabi_dcmplt>:
   19ff0:	b510      	push	{r4, lr}
   19ff2:	f000 ff8d 	bl	1af10 <__ledf2>
   19ff6:	2800      	cmp	r0, #0
   19ff8:	db01      	blt.n	19ffe <__aeabi_dcmplt+0xe>
   19ffa:	2000      	movs	r0, #0
   19ffc:	bd10      	pop	{r4, pc}
   19ffe:	2001      	movs	r0, #1
   1a000:	bd10      	pop	{r4, pc}
   1a002:	46c0      	nop			; (mov r8, r8)

0001a004 <__aeabi_dcmple>:
   1a004:	b510      	push	{r4, lr}
   1a006:	f000 ff83 	bl	1af10 <__ledf2>
   1a00a:	2800      	cmp	r0, #0
   1a00c:	dd01      	ble.n	1a012 <__aeabi_dcmple+0xe>
   1a00e:	2000      	movs	r0, #0
   1a010:	bd10      	pop	{r4, pc}
   1a012:	2001      	movs	r0, #1
   1a014:	bd10      	pop	{r4, pc}
   1a016:	46c0      	nop			; (mov r8, r8)

0001a018 <__aeabi_dcmpgt>:
   1a018:	b510      	push	{r4, lr}
   1a01a:	f000 ff15 	bl	1ae48 <__gedf2>
   1a01e:	2800      	cmp	r0, #0
   1a020:	dc01      	bgt.n	1a026 <__aeabi_dcmpgt+0xe>
   1a022:	2000      	movs	r0, #0
   1a024:	bd10      	pop	{r4, pc}
   1a026:	2001      	movs	r0, #1
   1a028:	bd10      	pop	{r4, pc}
   1a02a:	46c0      	nop			; (mov r8, r8)

0001a02c <__aeabi_dcmpge>:
   1a02c:	b510      	push	{r4, lr}
   1a02e:	f000 ff0b 	bl	1ae48 <__gedf2>
   1a032:	2800      	cmp	r0, #0
   1a034:	da01      	bge.n	1a03a <__aeabi_dcmpge+0xe>
   1a036:	2000      	movs	r0, #0
   1a038:	bd10      	pop	{r4, pc}
   1a03a:	2001      	movs	r0, #1
   1a03c:	bd10      	pop	{r4, pc}
   1a03e:	46c0      	nop			; (mov r8, r8)

0001a040 <__clzsi2>:
   1a040:	211c      	movs	r1, #28
   1a042:	2301      	movs	r3, #1
   1a044:	041b      	lsls	r3, r3, #16
   1a046:	4298      	cmp	r0, r3
   1a048:	d301      	bcc.n	1a04e <__clzsi2+0xe>
   1a04a:	0c00      	lsrs	r0, r0, #16
   1a04c:	3910      	subs	r1, #16
   1a04e:	0a1b      	lsrs	r3, r3, #8
   1a050:	4298      	cmp	r0, r3
   1a052:	d301      	bcc.n	1a058 <__clzsi2+0x18>
   1a054:	0a00      	lsrs	r0, r0, #8
   1a056:	3908      	subs	r1, #8
   1a058:	091b      	lsrs	r3, r3, #4
   1a05a:	4298      	cmp	r0, r3
   1a05c:	d301      	bcc.n	1a062 <__clzsi2+0x22>
   1a05e:	0900      	lsrs	r0, r0, #4
   1a060:	3904      	subs	r1, #4
   1a062:	a202      	add	r2, pc, #8	; (adr r2, 1a06c <__clzsi2+0x2c>)
   1a064:	5c10      	ldrb	r0, [r2, r0]
   1a066:	1840      	adds	r0, r0, r1
   1a068:	4770      	bx	lr
   1a06a:	46c0      	nop			; (mov r8, r8)
   1a06c:	02020304 	.word	0x02020304
   1a070:	01010101 	.word	0x01010101
	...

0001a07c <__ctzsi2>:
   1a07c:	4241      	negs	r1, r0
   1a07e:	4008      	ands	r0, r1
   1a080:	211c      	movs	r1, #28
   1a082:	2301      	movs	r3, #1
   1a084:	041b      	lsls	r3, r3, #16
   1a086:	4298      	cmp	r0, r3
   1a088:	d301      	bcc.n	1a08e <__ctzsi2+0x12>
   1a08a:	0c00      	lsrs	r0, r0, #16
   1a08c:	3910      	subs	r1, #16
   1a08e:	0a1b      	lsrs	r3, r3, #8
   1a090:	4298      	cmp	r0, r3
   1a092:	d301      	bcc.n	1a098 <__ctzsi2+0x1c>
   1a094:	0a00      	lsrs	r0, r0, #8
   1a096:	3908      	subs	r1, #8
   1a098:	091b      	lsrs	r3, r3, #4
   1a09a:	4298      	cmp	r0, r3
   1a09c:	d301      	bcc.n	1a0a2 <__ctzsi2+0x26>
   1a09e:	0900      	lsrs	r0, r0, #4
   1a0a0:	3904      	subs	r1, #4
   1a0a2:	a202      	add	r2, pc, #8	; (adr r2, 1a0ac <__ctzsi2+0x30>)
   1a0a4:	5c10      	ldrb	r0, [r2, r0]
   1a0a6:	1a40      	subs	r0, r0, r1
   1a0a8:	4770      	bx	lr
   1a0aa:	46c0      	nop			; (mov r8, r8)
   1a0ac:	1d1d1c1b 	.word	0x1d1d1c1b
   1a0b0:	1e1e1e1e 	.word	0x1e1e1e1e
   1a0b4:	1f1f1f1f 	.word	0x1f1f1f1f
   1a0b8:	1f1f1f1f 	.word	0x1f1f1f1f

0001a0bc <__aeabi_lmul>:
   1a0bc:	b5f0      	push	{r4, r5, r6, r7, lr}
   1a0be:	46ce      	mov	lr, r9
   1a0c0:	4647      	mov	r7, r8
   1a0c2:	0415      	lsls	r5, r2, #16
   1a0c4:	0c2d      	lsrs	r5, r5, #16
   1a0c6:	002e      	movs	r6, r5
   1a0c8:	b580      	push	{r7, lr}
   1a0ca:	0407      	lsls	r7, r0, #16
   1a0cc:	0c14      	lsrs	r4, r2, #16
   1a0ce:	0c3f      	lsrs	r7, r7, #16
   1a0d0:	4699      	mov	r9, r3
   1a0d2:	0c03      	lsrs	r3, r0, #16
   1a0d4:	437e      	muls	r6, r7
   1a0d6:	435d      	muls	r5, r3
   1a0d8:	4367      	muls	r7, r4
   1a0da:	4363      	muls	r3, r4
   1a0dc:	197f      	adds	r7, r7, r5
   1a0de:	0c34      	lsrs	r4, r6, #16
   1a0e0:	19e4      	adds	r4, r4, r7
   1a0e2:	469c      	mov	ip, r3
   1a0e4:	42a5      	cmp	r5, r4
   1a0e6:	d903      	bls.n	1a0f0 <__aeabi_lmul+0x34>
   1a0e8:	2380      	movs	r3, #128	; 0x80
   1a0ea:	025b      	lsls	r3, r3, #9
   1a0ec:	4698      	mov	r8, r3
   1a0ee:	44c4      	add	ip, r8
   1a0f0:	464b      	mov	r3, r9
   1a0f2:	4351      	muls	r1, r2
   1a0f4:	4343      	muls	r3, r0
   1a0f6:	0436      	lsls	r6, r6, #16
   1a0f8:	0c36      	lsrs	r6, r6, #16
   1a0fa:	0c25      	lsrs	r5, r4, #16
   1a0fc:	0424      	lsls	r4, r4, #16
   1a0fe:	4465      	add	r5, ip
   1a100:	19a4      	adds	r4, r4, r6
   1a102:	1859      	adds	r1, r3, r1
   1a104:	1949      	adds	r1, r1, r5
   1a106:	0020      	movs	r0, r4
   1a108:	bc0c      	pop	{r2, r3}
   1a10a:	4690      	mov	r8, r2
   1a10c:	4699      	mov	r9, r3
   1a10e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0001a110 <__aeabi_d2uiz>:
   1a110:	b570      	push	{r4, r5, r6, lr}
   1a112:	2200      	movs	r2, #0
   1a114:	4b0c      	ldr	r3, [pc, #48]	; (1a148 <__aeabi_d2uiz+0x38>)
   1a116:	0004      	movs	r4, r0
   1a118:	000d      	movs	r5, r1
   1a11a:	f7ff ff87 	bl	1a02c <__aeabi_dcmpge>
   1a11e:	2800      	cmp	r0, #0
   1a120:	d104      	bne.n	1a12c <__aeabi_d2uiz+0x1c>
   1a122:	0020      	movs	r0, r4
   1a124:	0029      	movs	r1, r5
   1a126:	f001 fceb 	bl	1bb00 <__aeabi_d2iz>
   1a12a:	bd70      	pop	{r4, r5, r6, pc}
   1a12c:	4b06      	ldr	r3, [pc, #24]	; (1a148 <__aeabi_d2uiz+0x38>)
   1a12e:	2200      	movs	r2, #0
   1a130:	0020      	movs	r0, r4
   1a132:	0029      	movs	r1, r5
   1a134:	f001 f9ce 	bl	1b4d4 <__aeabi_dsub>
   1a138:	f001 fce2 	bl	1bb00 <__aeabi_d2iz>
   1a13c:	2380      	movs	r3, #128	; 0x80
   1a13e:	061b      	lsls	r3, r3, #24
   1a140:	469c      	mov	ip, r3
   1a142:	4460      	add	r0, ip
   1a144:	e7f1      	b.n	1a12a <__aeabi_d2uiz+0x1a>
   1a146:	46c0      	nop			; (mov r8, r8)
   1a148:	41e00000 	.word	0x41e00000

0001a14c <__aeabi_dadd>:
   1a14c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1a14e:	4645      	mov	r5, r8
   1a150:	46de      	mov	lr, fp
   1a152:	4657      	mov	r7, sl
   1a154:	464e      	mov	r6, r9
   1a156:	030c      	lsls	r4, r1, #12
   1a158:	b5e0      	push	{r5, r6, r7, lr}
   1a15a:	004e      	lsls	r6, r1, #1
   1a15c:	0fc9      	lsrs	r1, r1, #31
   1a15e:	4688      	mov	r8, r1
   1a160:	000d      	movs	r5, r1
   1a162:	0a61      	lsrs	r1, r4, #9
   1a164:	0f44      	lsrs	r4, r0, #29
   1a166:	430c      	orrs	r4, r1
   1a168:	00c7      	lsls	r7, r0, #3
   1a16a:	0319      	lsls	r1, r3, #12
   1a16c:	0058      	lsls	r0, r3, #1
   1a16e:	0fdb      	lsrs	r3, r3, #31
   1a170:	469b      	mov	fp, r3
   1a172:	0a4b      	lsrs	r3, r1, #9
   1a174:	0f51      	lsrs	r1, r2, #29
   1a176:	430b      	orrs	r3, r1
   1a178:	0d76      	lsrs	r6, r6, #21
   1a17a:	0d40      	lsrs	r0, r0, #21
   1a17c:	0019      	movs	r1, r3
   1a17e:	00d2      	lsls	r2, r2, #3
   1a180:	45d8      	cmp	r8, fp
   1a182:	d100      	bne.n	1a186 <__aeabi_dadd+0x3a>
   1a184:	e0ae      	b.n	1a2e4 <__aeabi_dadd+0x198>
   1a186:	1a35      	subs	r5, r6, r0
   1a188:	2d00      	cmp	r5, #0
   1a18a:	dc00      	bgt.n	1a18e <__aeabi_dadd+0x42>
   1a18c:	e0f6      	b.n	1a37c <__aeabi_dadd+0x230>
   1a18e:	2800      	cmp	r0, #0
   1a190:	d10f      	bne.n	1a1b2 <__aeabi_dadd+0x66>
   1a192:	4313      	orrs	r3, r2
   1a194:	d100      	bne.n	1a198 <__aeabi_dadd+0x4c>
   1a196:	e0db      	b.n	1a350 <__aeabi_dadd+0x204>
   1a198:	1e6b      	subs	r3, r5, #1
   1a19a:	2b00      	cmp	r3, #0
   1a19c:	d000      	beq.n	1a1a0 <__aeabi_dadd+0x54>
   1a19e:	e137      	b.n	1a410 <__aeabi_dadd+0x2c4>
   1a1a0:	1aba      	subs	r2, r7, r2
   1a1a2:	4297      	cmp	r7, r2
   1a1a4:	41bf      	sbcs	r7, r7
   1a1a6:	1a64      	subs	r4, r4, r1
   1a1a8:	427f      	negs	r7, r7
   1a1aa:	1be4      	subs	r4, r4, r7
   1a1ac:	2601      	movs	r6, #1
   1a1ae:	0017      	movs	r7, r2
   1a1b0:	e024      	b.n	1a1fc <__aeabi_dadd+0xb0>
   1a1b2:	4bc6      	ldr	r3, [pc, #792]	; (1a4cc <__aeabi_dadd+0x380>)
   1a1b4:	429e      	cmp	r6, r3
   1a1b6:	d04d      	beq.n	1a254 <__aeabi_dadd+0x108>
   1a1b8:	2380      	movs	r3, #128	; 0x80
   1a1ba:	041b      	lsls	r3, r3, #16
   1a1bc:	4319      	orrs	r1, r3
   1a1be:	2d38      	cmp	r5, #56	; 0x38
   1a1c0:	dd00      	ble.n	1a1c4 <__aeabi_dadd+0x78>
   1a1c2:	e107      	b.n	1a3d4 <__aeabi_dadd+0x288>
   1a1c4:	2d1f      	cmp	r5, #31
   1a1c6:	dd00      	ble.n	1a1ca <__aeabi_dadd+0x7e>
   1a1c8:	e138      	b.n	1a43c <__aeabi_dadd+0x2f0>
   1a1ca:	2020      	movs	r0, #32
   1a1cc:	1b43      	subs	r3, r0, r5
   1a1ce:	469a      	mov	sl, r3
   1a1d0:	000b      	movs	r3, r1
   1a1d2:	4650      	mov	r0, sl
   1a1d4:	4083      	lsls	r3, r0
   1a1d6:	4699      	mov	r9, r3
   1a1d8:	0013      	movs	r3, r2
   1a1da:	4648      	mov	r0, r9
   1a1dc:	40eb      	lsrs	r3, r5
   1a1de:	4318      	orrs	r0, r3
   1a1e0:	0003      	movs	r3, r0
   1a1e2:	4650      	mov	r0, sl
   1a1e4:	4082      	lsls	r2, r0
   1a1e6:	1e50      	subs	r0, r2, #1
   1a1e8:	4182      	sbcs	r2, r0
   1a1ea:	40e9      	lsrs	r1, r5
   1a1ec:	431a      	orrs	r2, r3
   1a1ee:	1aba      	subs	r2, r7, r2
   1a1f0:	1a61      	subs	r1, r4, r1
   1a1f2:	4297      	cmp	r7, r2
   1a1f4:	41a4      	sbcs	r4, r4
   1a1f6:	0017      	movs	r7, r2
   1a1f8:	4264      	negs	r4, r4
   1a1fa:	1b0c      	subs	r4, r1, r4
   1a1fc:	0223      	lsls	r3, r4, #8
   1a1fe:	d562      	bpl.n	1a2c6 <__aeabi_dadd+0x17a>
   1a200:	0264      	lsls	r4, r4, #9
   1a202:	0a65      	lsrs	r5, r4, #9
   1a204:	2d00      	cmp	r5, #0
   1a206:	d100      	bne.n	1a20a <__aeabi_dadd+0xbe>
   1a208:	e0df      	b.n	1a3ca <__aeabi_dadd+0x27e>
   1a20a:	0028      	movs	r0, r5
   1a20c:	f7ff ff18 	bl	1a040 <__clzsi2>
   1a210:	0003      	movs	r3, r0
   1a212:	3b08      	subs	r3, #8
   1a214:	2b1f      	cmp	r3, #31
   1a216:	dd00      	ble.n	1a21a <__aeabi_dadd+0xce>
   1a218:	e0d2      	b.n	1a3c0 <__aeabi_dadd+0x274>
   1a21a:	2220      	movs	r2, #32
   1a21c:	003c      	movs	r4, r7
   1a21e:	1ad2      	subs	r2, r2, r3
   1a220:	409d      	lsls	r5, r3
   1a222:	40d4      	lsrs	r4, r2
   1a224:	409f      	lsls	r7, r3
   1a226:	4325      	orrs	r5, r4
   1a228:	429e      	cmp	r6, r3
   1a22a:	dd00      	ble.n	1a22e <__aeabi_dadd+0xe2>
   1a22c:	e0c4      	b.n	1a3b8 <__aeabi_dadd+0x26c>
   1a22e:	1b9e      	subs	r6, r3, r6
   1a230:	1c73      	adds	r3, r6, #1
   1a232:	2b1f      	cmp	r3, #31
   1a234:	dd00      	ble.n	1a238 <__aeabi_dadd+0xec>
   1a236:	e0f1      	b.n	1a41c <__aeabi_dadd+0x2d0>
   1a238:	2220      	movs	r2, #32
   1a23a:	0038      	movs	r0, r7
   1a23c:	0029      	movs	r1, r5
   1a23e:	1ad2      	subs	r2, r2, r3
   1a240:	40d8      	lsrs	r0, r3
   1a242:	4091      	lsls	r1, r2
   1a244:	4097      	lsls	r7, r2
   1a246:	002c      	movs	r4, r5
   1a248:	4301      	orrs	r1, r0
   1a24a:	1e78      	subs	r0, r7, #1
   1a24c:	4187      	sbcs	r7, r0
   1a24e:	40dc      	lsrs	r4, r3
   1a250:	2600      	movs	r6, #0
   1a252:	430f      	orrs	r7, r1
   1a254:	077b      	lsls	r3, r7, #29
   1a256:	d009      	beq.n	1a26c <__aeabi_dadd+0x120>
   1a258:	230f      	movs	r3, #15
   1a25a:	403b      	ands	r3, r7
   1a25c:	2b04      	cmp	r3, #4
   1a25e:	d005      	beq.n	1a26c <__aeabi_dadd+0x120>
   1a260:	1d3b      	adds	r3, r7, #4
   1a262:	42bb      	cmp	r3, r7
   1a264:	41bf      	sbcs	r7, r7
   1a266:	427f      	negs	r7, r7
   1a268:	19e4      	adds	r4, r4, r7
   1a26a:	001f      	movs	r7, r3
   1a26c:	0223      	lsls	r3, r4, #8
   1a26e:	d52c      	bpl.n	1a2ca <__aeabi_dadd+0x17e>
   1a270:	4b96      	ldr	r3, [pc, #600]	; (1a4cc <__aeabi_dadd+0x380>)
   1a272:	3601      	adds	r6, #1
   1a274:	429e      	cmp	r6, r3
   1a276:	d100      	bne.n	1a27a <__aeabi_dadd+0x12e>
   1a278:	e09a      	b.n	1a3b0 <__aeabi_dadd+0x264>
   1a27a:	4645      	mov	r5, r8
   1a27c:	4b94      	ldr	r3, [pc, #592]	; (1a4d0 <__aeabi_dadd+0x384>)
   1a27e:	08ff      	lsrs	r7, r7, #3
   1a280:	401c      	ands	r4, r3
   1a282:	0760      	lsls	r0, r4, #29
   1a284:	0576      	lsls	r6, r6, #21
   1a286:	0264      	lsls	r4, r4, #9
   1a288:	4307      	orrs	r7, r0
   1a28a:	0b24      	lsrs	r4, r4, #12
   1a28c:	0d76      	lsrs	r6, r6, #21
   1a28e:	2100      	movs	r1, #0
   1a290:	0324      	lsls	r4, r4, #12
   1a292:	0b23      	lsrs	r3, r4, #12
   1a294:	0d0c      	lsrs	r4, r1, #20
   1a296:	4a8f      	ldr	r2, [pc, #572]	; (1a4d4 <__aeabi_dadd+0x388>)
   1a298:	0524      	lsls	r4, r4, #20
   1a29a:	431c      	orrs	r4, r3
   1a29c:	4014      	ands	r4, r2
   1a29e:	0533      	lsls	r3, r6, #20
   1a2a0:	4323      	orrs	r3, r4
   1a2a2:	005b      	lsls	r3, r3, #1
   1a2a4:	07ed      	lsls	r5, r5, #31
   1a2a6:	085b      	lsrs	r3, r3, #1
   1a2a8:	432b      	orrs	r3, r5
   1a2aa:	0038      	movs	r0, r7
   1a2ac:	0019      	movs	r1, r3
   1a2ae:	bc3c      	pop	{r2, r3, r4, r5}
   1a2b0:	4690      	mov	r8, r2
   1a2b2:	4699      	mov	r9, r3
   1a2b4:	46a2      	mov	sl, r4
   1a2b6:	46ab      	mov	fp, r5
   1a2b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1a2ba:	4664      	mov	r4, ip
   1a2bc:	4304      	orrs	r4, r0
   1a2be:	d100      	bne.n	1a2c2 <__aeabi_dadd+0x176>
   1a2c0:	e211      	b.n	1a6e6 <__aeabi_dadd+0x59a>
   1a2c2:	0004      	movs	r4, r0
   1a2c4:	4667      	mov	r7, ip
   1a2c6:	077b      	lsls	r3, r7, #29
   1a2c8:	d1c6      	bne.n	1a258 <__aeabi_dadd+0x10c>
   1a2ca:	4645      	mov	r5, r8
   1a2cc:	0760      	lsls	r0, r4, #29
   1a2ce:	08ff      	lsrs	r7, r7, #3
   1a2d0:	4307      	orrs	r7, r0
   1a2d2:	08e4      	lsrs	r4, r4, #3
   1a2d4:	4b7d      	ldr	r3, [pc, #500]	; (1a4cc <__aeabi_dadd+0x380>)
   1a2d6:	429e      	cmp	r6, r3
   1a2d8:	d030      	beq.n	1a33c <__aeabi_dadd+0x1f0>
   1a2da:	0324      	lsls	r4, r4, #12
   1a2dc:	0576      	lsls	r6, r6, #21
   1a2de:	0b24      	lsrs	r4, r4, #12
   1a2e0:	0d76      	lsrs	r6, r6, #21
   1a2e2:	e7d4      	b.n	1a28e <__aeabi_dadd+0x142>
   1a2e4:	1a33      	subs	r3, r6, r0
   1a2e6:	469a      	mov	sl, r3
   1a2e8:	2b00      	cmp	r3, #0
   1a2ea:	dd78      	ble.n	1a3de <__aeabi_dadd+0x292>
   1a2ec:	2800      	cmp	r0, #0
   1a2ee:	d031      	beq.n	1a354 <__aeabi_dadd+0x208>
   1a2f0:	4876      	ldr	r0, [pc, #472]	; (1a4cc <__aeabi_dadd+0x380>)
   1a2f2:	4286      	cmp	r6, r0
   1a2f4:	d0ae      	beq.n	1a254 <__aeabi_dadd+0x108>
   1a2f6:	2080      	movs	r0, #128	; 0x80
   1a2f8:	0400      	lsls	r0, r0, #16
   1a2fa:	4301      	orrs	r1, r0
   1a2fc:	4653      	mov	r3, sl
   1a2fe:	2b38      	cmp	r3, #56	; 0x38
   1a300:	dc00      	bgt.n	1a304 <__aeabi_dadd+0x1b8>
   1a302:	e0e9      	b.n	1a4d8 <__aeabi_dadd+0x38c>
   1a304:	430a      	orrs	r2, r1
   1a306:	1e51      	subs	r1, r2, #1
   1a308:	418a      	sbcs	r2, r1
   1a30a:	2100      	movs	r1, #0
   1a30c:	19d2      	adds	r2, r2, r7
   1a30e:	42ba      	cmp	r2, r7
   1a310:	41bf      	sbcs	r7, r7
   1a312:	1909      	adds	r1, r1, r4
   1a314:	427c      	negs	r4, r7
   1a316:	0017      	movs	r7, r2
   1a318:	190c      	adds	r4, r1, r4
   1a31a:	0223      	lsls	r3, r4, #8
   1a31c:	d5d3      	bpl.n	1a2c6 <__aeabi_dadd+0x17a>
   1a31e:	4b6b      	ldr	r3, [pc, #428]	; (1a4cc <__aeabi_dadd+0x380>)
   1a320:	3601      	adds	r6, #1
   1a322:	429e      	cmp	r6, r3
   1a324:	d100      	bne.n	1a328 <__aeabi_dadd+0x1dc>
   1a326:	e13a      	b.n	1a59e <__aeabi_dadd+0x452>
   1a328:	2001      	movs	r0, #1
   1a32a:	4b69      	ldr	r3, [pc, #420]	; (1a4d0 <__aeabi_dadd+0x384>)
   1a32c:	401c      	ands	r4, r3
   1a32e:	087b      	lsrs	r3, r7, #1
   1a330:	4007      	ands	r7, r0
   1a332:	431f      	orrs	r7, r3
   1a334:	07e0      	lsls	r0, r4, #31
   1a336:	4307      	orrs	r7, r0
   1a338:	0864      	lsrs	r4, r4, #1
   1a33a:	e78b      	b.n	1a254 <__aeabi_dadd+0x108>
   1a33c:	0023      	movs	r3, r4
   1a33e:	433b      	orrs	r3, r7
   1a340:	d100      	bne.n	1a344 <__aeabi_dadd+0x1f8>
   1a342:	e1cb      	b.n	1a6dc <__aeabi_dadd+0x590>
   1a344:	2280      	movs	r2, #128	; 0x80
   1a346:	0312      	lsls	r2, r2, #12
   1a348:	4314      	orrs	r4, r2
   1a34a:	0324      	lsls	r4, r4, #12
   1a34c:	0b24      	lsrs	r4, r4, #12
   1a34e:	e79e      	b.n	1a28e <__aeabi_dadd+0x142>
   1a350:	002e      	movs	r6, r5
   1a352:	e77f      	b.n	1a254 <__aeabi_dadd+0x108>
   1a354:	0008      	movs	r0, r1
   1a356:	4310      	orrs	r0, r2
   1a358:	d100      	bne.n	1a35c <__aeabi_dadd+0x210>
   1a35a:	e0b4      	b.n	1a4c6 <__aeabi_dadd+0x37a>
   1a35c:	1e58      	subs	r0, r3, #1
   1a35e:	2800      	cmp	r0, #0
   1a360:	d000      	beq.n	1a364 <__aeabi_dadd+0x218>
   1a362:	e0de      	b.n	1a522 <__aeabi_dadd+0x3d6>
   1a364:	18ba      	adds	r2, r7, r2
   1a366:	42ba      	cmp	r2, r7
   1a368:	419b      	sbcs	r3, r3
   1a36a:	1864      	adds	r4, r4, r1
   1a36c:	425b      	negs	r3, r3
   1a36e:	18e4      	adds	r4, r4, r3
   1a370:	0017      	movs	r7, r2
   1a372:	2601      	movs	r6, #1
   1a374:	0223      	lsls	r3, r4, #8
   1a376:	d5a6      	bpl.n	1a2c6 <__aeabi_dadd+0x17a>
   1a378:	2602      	movs	r6, #2
   1a37a:	e7d5      	b.n	1a328 <__aeabi_dadd+0x1dc>
   1a37c:	2d00      	cmp	r5, #0
   1a37e:	d16e      	bne.n	1a45e <__aeabi_dadd+0x312>
   1a380:	1c70      	adds	r0, r6, #1
   1a382:	0540      	lsls	r0, r0, #21
   1a384:	0d40      	lsrs	r0, r0, #21
   1a386:	2801      	cmp	r0, #1
   1a388:	dc00      	bgt.n	1a38c <__aeabi_dadd+0x240>
   1a38a:	e0f9      	b.n	1a580 <__aeabi_dadd+0x434>
   1a38c:	1ab8      	subs	r0, r7, r2
   1a38e:	4684      	mov	ip, r0
   1a390:	4287      	cmp	r7, r0
   1a392:	4180      	sbcs	r0, r0
   1a394:	1ae5      	subs	r5, r4, r3
   1a396:	4240      	negs	r0, r0
   1a398:	1a2d      	subs	r5, r5, r0
   1a39a:	0228      	lsls	r0, r5, #8
   1a39c:	d400      	bmi.n	1a3a0 <__aeabi_dadd+0x254>
   1a39e:	e089      	b.n	1a4b4 <__aeabi_dadd+0x368>
   1a3a0:	1bd7      	subs	r7, r2, r7
   1a3a2:	42ba      	cmp	r2, r7
   1a3a4:	4192      	sbcs	r2, r2
   1a3a6:	1b1c      	subs	r4, r3, r4
   1a3a8:	4252      	negs	r2, r2
   1a3aa:	1aa5      	subs	r5, r4, r2
   1a3ac:	46d8      	mov	r8, fp
   1a3ae:	e729      	b.n	1a204 <__aeabi_dadd+0xb8>
   1a3b0:	4645      	mov	r5, r8
   1a3b2:	2400      	movs	r4, #0
   1a3b4:	2700      	movs	r7, #0
   1a3b6:	e76a      	b.n	1a28e <__aeabi_dadd+0x142>
   1a3b8:	4c45      	ldr	r4, [pc, #276]	; (1a4d0 <__aeabi_dadd+0x384>)
   1a3ba:	1af6      	subs	r6, r6, r3
   1a3bc:	402c      	ands	r4, r5
   1a3be:	e749      	b.n	1a254 <__aeabi_dadd+0x108>
   1a3c0:	003d      	movs	r5, r7
   1a3c2:	3828      	subs	r0, #40	; 0x28
   1a3c4:	4085      	lsls	r5, r0
   1a3c6:	2700      	movs	r7, #0
   1a3c8:	e72e      	b.n	1a228 <__aeabi_dadd+0xdc>
   1a3ca:	0038      	movs	r0, r7
   1a3cc:	f7ff fe38 	bl	1a040 <__clzsi2>
   1a3d0:	3020      	adds	r0, #32
   1a3d2:	e71d      	b.n	1a210 <__aeabi_dadd+0xc4>
   1a3d4:	430a      	orrs	r2, r1
   1a3d6:	1e51      	subs	r1, r2, #1
   1a3d8:	418a      	sbcs	r2, r1
   1a3da:	2100      	movs	r1, #0
   1a3dc:	e707      	b.n	1a1ee <__aeabi_dadd+0xa2>
   1a3de:	2b00      	cmp	r3, #0
   1a3e0:	d000      	beq.n	1a3e4 <__aeabi_dadd+0x298>
   1a3e2:	e0f3      	b.n	1a5cc <__aeabi_dadd+0x480>
   1a3e4:	1c70      	adds	r0, r6, #1
   1a3e6:	0543      	lsls	r3, r0, #21
   1a3e8:	0d5b      	lsrs	r3, r3, #21
   1a3ea:	2b01      	cmp	r3, #1
   1a3ec:	dc00      	bgt.n	1a3f0 <__aeabi_dadd+0x2a4>
   1a3ee:	e0ad      	b.n	1a54c <__aeabi_dadd+0x400>
   1a3f0:	4b36      	ldr	r3, [pc, #216]	; (1a4cc <__aeabi_dadd+0x380>)
   1a3f2:	4298      	cmp	r0, r3
   1a3f4:	d100      	bne.n	1a3f8 <__aeabi_dadd+0x2ac>
   1a3f6:	e0d1      	b.n	1a59c <__aeabi_dadd+0x450>
   1a3f8:	18ba      	adds	r2, r7, r2
   1a3fa:	42ba      	cmp	r2, r7
   1a3fc:	41bf      	sbcs	r7, r7
   1a3fe:	1864      	adds	r4, r4, r1
   1a400:	427f      	negs	r7, r7
   1a402:	19e4      	adds	r4, r4, r7
   1a404:	07e7      	lsls	r7, r4, #31
   1a406:	0852      	lsrs	r2, r2, #1
   1a408:	4317      	orrs	r7, r2
   1a40a:	0864      	lsrs	r4, r4, #1
   1a40c:	0006      	movs	r6, r0
   1a40e:	e721      	b.n	1a254 <__aeabi_dadd+0x108>
   1a410:	482e      	ldr	r0, [pc, #184]	; (1a4cc <__aeabi_dadd+0x380>)
   1a412:	4285      	cmp	r5, r0
   1a414:	d100      	bne.n	1a418 <__aeabi_dadd+0x2cc>
   1a416:	e093      	b.n	1a540 <__aeabi_dadd+0x3f4>
   1a418:	001d      	movs	r5, r3
   1a41a:	e6d0      	b.n	1a1be <__aeabi_dadd+0x72>
   1a41c:	0029      	movs	r1, r5
   1a41e:	3e1f      	subs	r6, #31
   1a420:	40f1      	lsrs	r1, r6
   1a422:	2b20      	cmp	r3, #32
   1a424:	d100      	bne.n	1a428 <__aeabi_dadd+0x2dc>
   1a426:	e08d      	b.n	1a544 <__aeabi_dadd+0x3f8>
   1a428:	2240      	movs	r2, #64	; 0x40
   1a42a:	1ad3      	subs	r3, r2, r3
   1a42c:	409d      	lsls	r5, r3
   1a42e:	432f      	orrs	r7, r5
   1a430:	1e7d      	subs	r5, r7, #1
   1a432:	41af      	sbcs	r7, r5
   1a434:	2400      	movs	r4, #0
   1a436:	430f      	orrs	r7, r1
   1a438:	2600      	movs	r6, #0
   1a43a:	e744      	b.n	1a2c6 <__aeabi_dadd+0x17a>
   1a43c:	002b      	movs	r3, r5
   1a43e:	0008      	movs	r0, r1
   1a440:	3b20      	subs	r3, #32
   1a442:	40d8      	lsrs	r0, r3
   1a444:	0003      	movs	r3, r0
   1a446:	2d20      	cmp	r5, #32
   1a448:	d100      	bne.n	1a44c <__aeabi_dadd+0x300>
   1a44a:	e07d      	b.n	1a548 <__aeabi_dadd+0x3fc>
   1a44c:	2040      	movs	r0, #64	; 0x40
   1a44e:	1b45      	subs	r5, r0, r5
   1a450:	40a9      	lsls	r1, r5
   1a452:	430a      	orrs	r2, r1
   1a454:	1e51      	subs	r1, r2, #1
   1a456:	418a      	sbcs	r2, r1
   1a458:	2100      	movs	r1, #0
   1a45a:	431a      	orrs	r2, r3
   1a45c:	e6c7      	b.n	1a1ee <__aeabi_dadd+0xa2>
   1a45e:	2e00      	cmp	r6, #0
   1a460:	d050      	beq.n	1a504 <__aeabi_dadd+0x3b8>
   1a462:	4e1a      	ldr	r6, [pc, #104]	; (1a4cc <__aeabi_dadd+0x380>)
   1a464:	42b0      	cmp	r0, r6
   1a466:	d057      	beq.n	1a518 <__aeabi_dadd+0x3cc>
   1a468:	2680      	movs	r6, #128	; 0x80
   1a46a:	426b      	negs	r3, r5
   1a46c:	4699      	mov	r9, r3
   1a46e:	0436      	lsls	r6, r6, #16
   1a470:	4334      	orrs	r4, r6
   1a472:	464b      	mov	r3, r9
   1a474:	2b38      	cmp	r3, #56	; 0x38
   1a476:	dd00      	ble.n	1a47a <__aeabi_dadd+0x32e>
   1a478:	e0d6      	b.n	1a628 <__aeabi_dadd+0x4dc>
   1a47a:	2b1f      	cmp	r3, #31
   1a47c:	dd00      	ble.n	1a480 <__aeabi_dadd+0x334>
   1a47e:	e135      	b.n	1a6ec <__aeabi_dadd+0x5a0>
   1a480:	2620      	movs	r6, #32
   1a482:	1af5      	subs	r5, r6, r3
   1a484:	0026      	movs	r6, r4
   1a486:	40ae      	lsls	r6, r5
   1a488:	46b2      	mov	sl, r6
   1a48a:	003e      	movs	r6, r7
   1a48c:	40de      	lsrs	r6, r3
   1a48e:	46ac      	mov	ip, r5
   1a490:	0035      	movs	r5, r6
   1a492:	4656      	mov	r6, sl
   1a494:	432e      	orrs	r6, r5
   1a496:	4665      	mov	r5, ip
   1a498:	40af      	lsls	r7, r5
   1a49a:	1e7d      	subs	r5, r7, #1
   1a49c:	41af      	sbcs	r7, r5
   1a49e:	40dc      	lsrs	r4, r3
   1a4a0:	4337      	orrs	r7, r6
   1a4a2:	1bd7      	subs	r7, r2, r7
   1a4a4:	42ba      	cmp	r2, r7
   1a4a6:	4192      	sbcs	r2, r2
   1a4a8:	1b0c      	subs	r4, r1, r4
   1a4aa:	4252      	negs	r2, r2
   1a4ac:	1aa4      	subs	r4, r4, r2
   1a4ae:	0006      	movs	r6, r0
   1a4b0:	46d8      	mov	r8, fp
   1a4b2:	e6a3      	b.n	1a1fc <__aeabi_dadd+0xb0>
   1a4b4:	4664      	mov	r4, ip
   1a4b6:	4667      	mov	r7, ip
   1a4b8:	432c      	orrs	r4, r5
   1a4ba:	d000      	beq.n	1a4be <__aeabi_dadd+0x372>
   1a4bc:	e6a2      	b.n	1a204 <__aeabi_dadd+0xb8>
   1a4be:	2500      	movs	r5, #0
   1a4c0:	2600      	movs	r6, #0
   1a4c2:	2700      	movs	r7, #0
   1a4c4:	e706      	b.n	1a2d4 <__aeabi_dadd+0x188>
   1a4c6:	001e      	movs	r6, r3
   1a4c8:	e6c4      	b.n	1a254 <__aeabi_dadd+0x108>
   1a4ca:	46c0      	nop			; (mov r8, r8)
   1a4cc:	000007ff 	.word	0x000007ff
   1a4d0:	ff7fffff 	.word	0xff7fffff
   1a4d4:	800fffff 	.word	0x800fffff
   1a4d8:	2b1f      	cmp	r3, #31
   1a4da:	dc63      	bgt.n	1a5a4 <__aeabi_dadd+0x458>
   1a4dc:	2020      	movs	r0, #32
   1a4de:	1ac3      	subs	r3, r0, r3
   1a4e0:	0008      	movs	r0, r1
   1a4e2:	4098      	lsls	r0, r3
   1a4e4:	469c      	mov	ip, r3
   1a4e6:	4683      	mov	fp, r0
   1a4e8:	4653      	mov	r3, sl
   1a4ea:	0010      	movs	r0, r2
   1a4ec:	40d8      	lsrs	r0, r3
   1a4ee:	0003      	movs	r3, r0
   1a4f0:	4658      	mov	r0, fp
   1a4f2:	4318      	orrs	r0, r3
   1a4f4:	4663      	mov	r3, ip
   1a4f6:	409a      	lsls	r2, r3
   1a4f8:	1e53      	subs	r3, r2, #1
   1a4fa:	419a      	sbcs	r2, r3
   1a4fc:	4653      	mov	r3, sl
   1a4fe:	4302      	orrs	r2, r0
   1a500:	40d9      	lsrs	r1, r3
   1a502:	e703      	b.n	1a30c <__aeabi_dadd+0x1c0>
   1a504:	0026      	movs	r6, r4
   1a506:	433e      	orrs	r6, r7
   1a508:	d006      	beq.n	1a518 <__aeabi_dadd+0x3cc>
   1a50a:	43eb      	mvns	r3, r5
   1a50c:	4699      	mov	r9, r3
   1a50e:	2b00      	cmp	r3, #0
   1a510:	d0c7      	beq.n	1a4a2 <__aeabi_dadd+0x356>
   1a512:	4e94      	ldr	r6, [pc, #592]	; (1a764 <__aeabi_dadd+0x618>)
   1a514:	42b0      	cmp	r0, r6
   1a516:	d1ac      	bne.n	1a472 <__aeabi_dadd+0x326>
   1a518:	000c      	movs	r4, r1
   1a51a:	0017      	movs	r7, r2
   1a51c:	0006      	movs	r6, r0
   1a51e:	46d8      	mov	r8, fp
   1a520:	e698      	b.n	1a254 <__aeabi_dadd+0x108>
   1a522:	4b90      	ldr	r3, [pc, #576]	; (1a764 <__aeabi_dadd+0x618>)
   1a524:	459a      	cmp	sl, r3
   1a526:	d00b      	beq.n	1a540 <__aeabi_dadd+0x3f4>
   1a528:	4682      	mov	sl, r0
   1a52a:	e6e7      	b.n	1a2fc <__aeabi_dadd+0x1b0>
   1a52c:	2800      	cmp	r0, #0
   1a52e:	d000      	beq.n	1a532 <__aeabi_dadd+0x3e6>
   1a530:	e09e      	b.n	1a670 <__aeabi_dadd+0x524>
   1a532:	0018      	movs	r0, r3
   1a534:	4310      	orrs	r0, r2
   1a536:	d100      	bne.n	1a53a <__aeabi_dadd+0x3ee>
   1a538:	e0e9      	b.n	1a70e <__aeabi_dadd+0x5c2>
   1a53a:	001c      	movs	r4, r3
   1a53c:	0017      	movs	r7, r2
   1a53e:	46d8      	mov	r8, fp
   1a540:	4e88      	ldr	r6, [pc, #544]	; (1a764 <__aeabi_dadd+0x618>)
   1a542:	e687      	b.n	1a254 <__aeabi_dadd+0x108>
   1a544:	2500      	movs	r5, #0
   1a546:	e772      	b.n	1a42e <__aeabi_dadd+0x2e2>
   1a548:	2100      	movs	r1, #0
   1a54a:	e782      	b.n	1a452 <__aeabi_dadd+0x306>
   1a54c:	0023      	movs	r3, r4
   1a54e:	433b      	orrs	r3, r7
   1a550:	2e00      	cmp	r6, #0
   1a552:	d000      	beq.n	1a556 <__aeabi_dadd+0x40a>
   1a554:	e0ab      	b.n	1a6ae <__aeabi_dadd+0x562>
   1a556:	2b00      	cmp	r3, #0
   1a558:	d100      	bne.n	1a55c <__aeabi_dadd+0x410>
   1a55a:	e0e7      	b.n	1a72c <__aeabi_dadd+0x5e0>
   1a55c:	000b      	movs	r3, r1
   1a55e:	4313      	orrs	r3, r2
   1a560:	d100      	bne.n	1a564 <__aeabi_dadd+0x418>
   1a562:	e677      	b.n	1a254 <__aeabi_dadd+0x108>
   1a564:	18ba      	adds	r2, r7, r2
   1a566:	42ba      	cmp	r2, r7
   1a568:	41bf      	sbcs	r7, r7
   1a56a:	1864      	adds	r4, r4, r1
   1a56c:	427f      	negs	r7, r7
   1a56e:	19e4      	adds	r4, r4, r7
   1a570:	0223      	lsls	r3, r4, #8
   1a572:	d400      	bmi.n	1a576 <__aeabi_dadd+0x42a>
   1a574:	e0f2      	b.n	1a75c <__aeabi_dadd+0x610>
   1a576:	4b7c      	ldr	r3, [pc, #496]	; (1a768 <__aeabi_dadd+0x61c>)
   1a578:	0017      	movs	r7, r2
   1a57a:	401c      	ands	r4, r3
   1a57c:	0006      	movs	r6, r0
   1a57e:	e669      	b.n	1a254 <__aeabi_dadd+0x108>
   1a580:	0020      	movs	r0, r4
   1a582:	4338      	orrs	r0, r7
   1a584:	2e00      	cmp	r6, #0
   1a586:	d1d1      	bne.n	1a52c <__aeabi_dadd+0x3e0>
   1a588:	2800      	cmp	r0, #0
   1a58a:	d15b      	bne.n	1a644 <__aeabi_dadd+0x4f8>
   1a58c:	001c      	movs	r4, r3
   1a58e:	4314      	orrs	r4, r2
   1a590:	d100      	bne.n	1a594 <__aeabi_dadd+0x448>
   1a592:	e0a8      	b.n	1a6e6 <__aeabi_dadd+0x59a>
   1a594:	001c      	movs	r4, r3
   1a596:	0017      	movs	r7, r2
   1a598:	46d8      	mov	r8, fp
   1a59a:	e65b      	b.n	1a254 <__aeabi_dadd+0x108>
   1a59c:	0006      	movs	r6, r0
   1a59e:	2400      	movs	r4, #0
   1a5a0:	2700      	movs	r7, #0
   1a5a2:	e697      	b.n	1a2d4 <__aeabi_dadd+0x188>
   1a5a4:	4650      	mov	r0, sl
   1a5a6:	000b      	movs	r3, r1
   1a5a8:	3820      	subs	r0, #32
   1a5aa:	40c3      	lsrs	r3, r0
   1a5ac:	4699      	mov	r9, r3
   1a5ae:	4653      	mov	r3, sl
   1a5b0:	2b20      	cmp	r3, #32
   1a5b2:	d100      	bne.n	1a5b6 <__aeabi_dadd+0x46a>
   1a5b4:	e095      	b.n	1a6e2 <__aeabi_dadd+0x596>
   1a5b6:	2340      	movs	r3, #64	; 0x40
   1a5b8:	4650      	mov	r0, sl
   1a5ba:	1a1b      	subs	r3, r3, r0
   1a5bc:	4099      	lsls	r1, r3
   1a5be:	430a      	orrs	r2, r1
   1a5c0:	1e51      	subs	r1, r2, #1
   1a5c2:	418a      	sbcs	r2, r1
   1a5c4:	464b      	mov	r3, r9
   1a5c6:	2100      	movs	r1, #0
   1a5c8:	431a      	orrs	r2, r3
   1a5ca:	e69f      	b.n	1a30c <__aeabi_dadd+0x1c0>
   1a5cc:	2e00      	cmp	r6, #0
   1a5ce:	d130      	bne.n	1a632 <__aeabi_dadd+0x4e6>
   1a5d0:	0026      	movs	r6, r4
   1a5d2:	433e      	orrs	r6, r7
   1a5d4:	d067      	beq.n	1a6a6 <__aeabi_dadd+0x55a>
   1a5d6:	43db      	mvns	r3, r3
   1a5d8:	469a      	mov	sl, r3
   1a5da:	2b00      	cmp	r3, #0
   1a5dc:	d01c      	beq.n	1a618 <__aeabi_dadd+0x4cc>
   1a5de:	4e61      	ldr	r6, [pc, #388]	; (1a764 <__aeabi_dadd+0x618>)
   1a5e0:	42b0      	cmp	r0, r6
   1a5e2:	d060      	beq.n	1a6a6 <__aeabi_dadd+0x55a>
   1a5e4:	4653      	mov	r3, sl
   1a5e6:	2b38      	cmp	r3, #56	; 0x38
   1a5e8:	dd00      	ble.n	1a5ec <__aeabi_dadd+0x4a0>
   1a5ea:	e096      	b.n	1a71a <__aeabi_dadd+0x5ce>
   1a5ec:	2b1f      	cmp	r3, #31
   1a5ee:	dd00      	ble.n	1a5f2 <__aeabi_dadd+0x4a6>
   1a5f0:	e09f      	b.n	1a732 <__aeabi_dadd+0x5e6>
   1a5f2:	2620      	movs	r6, #32
   1a5f4:	1af3      	subs	r3, r6, r3
   1a5f6:	0026      	movs	r6, r4
   1a5f8:	409e      	lsls	r6, r3
   1a5fa:	469c      	mov	ip, r3
   1a5fc:	46b3      	mov	fp, r6
   1a5fe:	4653      	mov	r3, sl
   1a600:	003e      	movs	r6, r7
   1a602:	40de      	lsrs	r6, r3
   1a604:	0033      	movs	r3, r6
   1a606:	465e      	mov	r6, fp
   1a608:	431e      	orrs	r6, r3
   1a60a:	4663      	mov	r3, ip
   1a60c:	409f      	lsls	r7, r3
   1a60e:	1e7b      	subs	r3, r7, #1
   1a610:	419f      	sbcs	r7, r3
   1a612:	4653      	mov	r3, sl
   1a614:	40dc      	lsrs	r4, r3
   1a616:	4337      	orrs	r7, r6
   1a618:	18bf      	adds	r7, r7, r2
   1a61a:	4297      	cmp	r7, r2
   1a61c:	4192      	sbcs	r2, r2
   1a61e:	1864      	adds	r4, r4, r1
   1a620:	4252      	negs	r2, r2
   1a622:	18a4      	adds	r4, r4, r2
   1a624:	0006      	movs	r6, r0
   1a626:	e678      	b.n	1a31a <__aeabi_dadd+0x1ce>
   1a628:	4327      	orrs	r7, r4
   1a62a:	1e7c      	subs	r4, r7, #1
   1a62c:	41a7      	sbcs	r7, r4
   1a62e:	2400      	movs	r4, #0
   1a630:	e737      	b.n	1a4a2 <__aeabi_dadd+0x356>
   1a632:	4e4c      	ldr	r6, [pc, #304]	; (1a764 <__aeabi_dadd+0x618>)
   1a634:	42b0      	cmp	r0, r6
   1a636:	d036      	beq.n	1a6a6 <__aeabi_dadd+0x55a>
   1a638:	2680      	movs	r6, #128	; 0x80
   1a63a:	425b      	negs	r3, r3
   1a63c:	0436      	lsls	r6, r6, #16
   1a63e:	469a      	mov	sl, r3
   1a640:	4334      	orrs	r4, r6
   1a642:	e7cf      	b.n	1a5e4 <__aeabi_dadd+0x498>
   1a644:	0018      	movs	r0, r3
   1a646:	4310      	orrs	r0, r2
   1a648:	d100      	bne.n	1a64c <__aeabi_dadd+0x500>
   1a64a:	e603      	b.n	1a254 <__aeabi_dadd+0x108>
   1a64c:	1ab8      	subs	r0, r7, r2
   1a64e:	4684      	mov	ip, r0
   1a650:	4567      	cmp	r7, ip
   1a652:	41ad      	sbcs	r5, r5
   1a654:	1ae0      	subs	r0, r4, r3
   1a656:	426d      	negs	r5, r5
   1a658:	1b40      	subs	r0, r0, r5
   1a65a:	0205      	lsls	r5, r0, #8
   1a65c:	d400      	bmi.n	1a660 <__aeabi_dadd+0x514>
   1a65e:	e62c      	b.n	1a2ba <__aeabi_dadd+0x16e>
   1a660:	1bd7      	subs	r7, r2, r7
   1a662:	42ba      	cmp	r2, r7
   1a664:	4192      	sbcs	r2, r2
   1a666:	1b1c      	subs	r4, r3, r4
   1a668:	4252      	negs	r2, r2
   1a66a:	1aa4      	subs	r4, r4, r2
   1a66c:	46d8      	mov	r8, fp
   1a66e:	e5f1      	b.n	1a254 <__aeabi_dadd+0x108>
   1a670:	0018      	movs	r0, r3
   1a672:	4310      	orrs	r0, r2
   1a674:	d100      	bne.n	1a678 <__aeabi_dadd+0x52c>
   1a676:	e763      	b.n	1a540 <__aeabi_dadd+0x3f4>
   1a678:	08f8      	lsrs	r0, r7, #3
   1a67a:	0767      	lsls	r7, r4, #29
   1a67c:	4307      	orrs	r7, r0
   1a67e:	2080      	movs	r0, #128	; 0x80
   1a680:	08e4      	lsrs	r4, r4, #3
   1a682:	0300      	lsls	r0, r0, #12
   1a684:	4204      	tst	r4, r0
   1a686:	d008      	beq.n	1a69a <__aeabi_dadd+0x54e>
   1a688:	08dd      	lsrs	r5, r3, #3
   1a68a:	4205      	tst	r5, r0
   1a68c:	d105      	bne.n	1a69a <__aeabi_dadd+0x54e>
   1a68e:	08d2      	lsrs	r2, r2, #3
   1a690:	0759      	lsls	r1, r3, #29
   1a692:	4311      	orrs	r1, r2
   1a694:	000f      	movs	r7, r1
   1a696:	002c      	movs	r4, r5
   1a698:	46d8      	mov	r8, fp
   1a69a:	0f7b      	lsrs	r3, r7, #29
   1a69c:	00e4      	lsls	r4, r4, #3
   1a69e:	431c      	orrs	r4, r3
   1a6a0:	00ff      	lsls	r7, r7, #3
   1a6a2:	4e30      	ldr	r6, [pc, #192]	; (1a764 <__aeabi_dadd+0x618>)
   1a6a4:	e5d6      	b.n	1a254 <__aeabi_dadd+0x108>
   1a6a6:	000c      	movs	r4, r1
   1a6a8:	0017      	movs	r7, r2
   1a6aa:	0006      	movs	r6, r0
   1a6ac:	e5d2      	b.n	1a254 <__aeabi_dadd+0x108>
   1a6ae:	2b00      	cmp	r3, #0
   1a6b0:	d038      	beq.n	1a724 <__aeabi_dadd+0x5d8>
   1a6b2:	000b      	movs	r3, r1
   1a6b4:	4313      	orrs	r3, r2
   1a6b6:	d100      	bne.n	1a6ba <__aeabi_dadd+0x56e>
   1a6b8:	e742      	b.n	1a540 <__aeabi_dadd+0x3f4>
   1a6ba:	08f8      	lsrs	r0, r7, #3
   1a6bc:	0767      	lsls	r7, r4, #29
   1a6be:	4307      	orrs	r7, r0
   1a6c0:	2080      	movs	r0, #128	; 0x80
   1a6c2:	08e4      	lsrs	r4, r4, #3
   1a6c4:	0300      	lsls	r0, r0, #12
   1a6c6:	4204      	tst	r4, r0
   1a6c8:	d0e7      	beq.n	1a69a <__aeabi_dadd+0x54e>
   1a6ca:	08cb      	lsrs	r3, r1, #3
   1a6cc:	4203      	tst	r3, r0
   1a6ce:	d1e4      	bne.n	1a69a <__aeabi_dadd+0x54e>
   1a6d0:	08d2      	lsrs	r2, r2, #3
   1a6d2:	0749      	lsls	r1, r1, #29
   1a6d4:	4311      	orrs	r1, r2
   1a6d6:	000f      	movs	r7, r1
   1a6d8:	001c      	movs	r4, r3
   1a6da:	e7de      	b.n	1a69a <__aeabi_dadd+0x54e>
   1a6dc:	2700      	movs	r7, #0
   1a6de:	2400      	movs	r4, #0
   1a6e0:	e5d5      	b.n	1a28e <__aeabi_dadd+0x142>
   1a6e2:	2100      	movs	r1, #0
   1a6e4:	e76b      	b.n	1a5be <__aeabi_dadd+0x472>
   1a6e6:	2500      	movs	r5, #0
   1a6e8:	2700      	movs	r7, #0
   1a6ea:	e5f3      	b.n	1a2d4 <__aeabi_dadd+0x188>
   1a6ec:	464e      	mov	r6, r9
   1a6ee:	0025      	movs	r5, r4
   1a6f0:	3e20      	subs	r6, #32
   1a6f2:	40f5      	lsrs	r5, r6
   1a6f4:	464b      	mov	r3, r9
   1a6f6:	002e      	movs	r6, r5
   1a6f8:	2b20      	cmp	r3, #32
   1a6fa:	d02d      	beq.n	1a758 <__aeabi_dadd+0x60c>
   1a6fc:	2540      	movs	r5, #64	; 0x40
   1a6fe:	1aed      	subs	r5, r5, r3
   1a700:	40ac      	lsls	r4, r5
   1a702:	4327      	orrs	r7, r4
   1a704:	1e7c      	subs	r4, r7, #1
   1a706:	41a7      	sbcs	r7, r4
   1a708:	2400      	movs	r4, #0
   1a70a:	4337      	orrs	r7, r6
   1a70c:	e6c9      	b.n	1a4a2 <__aeabi_dadd+0x356>
   1a70e:	2480      	movs	r4, #128	; 0x80
   1a710:	2500      	movs	r5, #0
   1a712:	0324      	lsls	r4, r4, #12
   1a714:	4e13      	ldr	r6, [pc, #76]	; (1a764 <__aeabi_dadd+0x618>)
   1a716:	2700      	movs	r7, #0
   1a718:	e5dc      	b.n	1a2d4 <__aeabi_dadd+0x188>
   1a71a:	4327      	orrs	r7, r4
   1a71c:	1e7c      	subs	r4, r7, #1
   1a71e:	41a7      	sbcs	r7, r4
   1a720:	2400      	movs	r4, #0
   1a722:	e779      	b.n	1a618 <__aeabi_dadd+0x4cc>
   1a724:	000c      	movs	r4, r1
   1a726:	0017      	movs	r7, r2
   1a728:	4e0e      	ldr	r6, [pc, #56]	; (1a764 <__aeabi_dadd+0x618>)
   1a72a:	e593      	b.n	1a254 <__aeabi_dadd+0x108>
   1a72c:	000c      	movs	r4, r1
   1a72e:	0017      	movs	r7, r2
   1a730:	e590      	b.n	1a254 <__aeabi_dadd+0x108>
   1a732:	4656      	mov	r6, sl
   1a734:	0023      	movs	r3, r4
   1a736:	3e20      	subs	r6, #32
   1a738:	40f3      	lsrs	r3, r6
   1a73a:	4699      	mov	r9, r3
   1a73c:	4653      	mov	r3, sl
   1a73e:	2b20      	cmp	r3, #32
   1a740:	d00e      	beq.n	1a760 <__aeabi_dadd+0x614>
   1a742:	2340      	movs	r3, #64	; 0x40
   1a744:	4656      	mov	r6, sl
   1a746:	1b9b      	subs	r3, r3, r6
   1a748:	409c      	lsls	r4, r3
   1a74a:	4327      	orrs	r7, r4
   1a74c:	1e7c      	subs	r4, r7, #1
   1a74e:	41a7      	sbcs	r7, r4
   1a750:	464b      	mov	r3, r9
   1a752:	2400      	movs	r4, #0
   1a754:	431f      	orrs	r7, r3
   1a756:	e75f      	b.n	1a618 <__aeabi_dadd+0x4cc>
   1a758:	2400      	movs	r4, #0
   1a75a:	e7d2      	b.n	1a702 <__aeabi_dadd+0x5b6>
   1a75c:	0017      	movs	r7, r2
   1a75e:	e5b2      	b.n	1a2c6 <__aeabi_dadd+0x17a>
   1a760:	2400      	movs	r4, #0
   1a762:	e7f2      	b.n	1a74a <__aeabi_dadd+0x5fe>
   1a764:	000007ff 	.word	0x000007ff
   1a768:	ff7fffff 	.word	0xff7fffff

0001a76c <__aeabi_ddiv>:
   1a76c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1a76e:	4657      	mov	r7, sl
   1a770:	4645      	mov	r5, r8
   1a772:	46de      	mov	lr, fp
   1a774:	464e      	mov	r6, r9
   1a776:	b5e0      	push	{r5, r6, r7, lr}
   1a778:	004c      	lsls	r4, r1, #1
   1a77a:	030e      	lsls	r6, r1, #12
   1a77c:	b087      	sub	sp, #28
   1a77e:	4683      	mov	fp, r0
   1a780:	4692      	mov	sl, r2
   1a782:	001d      	movs	r5, r3
   1a784:	4680      	mov	r8, r0
   1a786:	0b36      	lsrs	r6, r6, #12
   1a788:	0d64      	lsrs	r4, r4, #21
   1a78a:	0fcf      	lsrs	r7, r1, #31
   1a78c:	2c00      	cmp	r4, #0
   1a78e:	d04f      	beq.n	1a830 <__aeabi_ddiv+0xc4>
   1a790:	4b6f      	ldr	r3, [pc, #444]	; (1a950 <__aeabi_ddiv+0x1e4>)
   1a792:	429c      	cmp	r4, r3
   1a794:	d035      	beq.n	1a802 <__aeabi_ddiv+0x96>
   1a796:	2380      	movs	r3, #128	; 0x80
   1a798:	0f42      	lsrs	r2, r0, #29
   1a79a:	041b      	lsls	r3, r3, #16
   1a79c:	00f6      	lsls	r6, r6, #3
   1a79e:	4313      	orrs	r3, r2
   1a7a0:	4333      	orrs	r3, r6
   1a7a2:	4699      	mov	r9, r3
   1a7a4:	00c3      	lsls	r3, r0, #3
   1a7a6:	4698      	mov	r8, r3
   1a7a8:	4b6a      	ldr	r3, [pc, #424]	; (1a954 <__aeabi_ddiv+0x1e8>)
   1a7aa:	2600      	movs	r6, #0
   1a7ac:	469c      	mov	ip, r3
   1a7ae:	2300      	movs	r3, #0
   1a7b0:	4464      	add	r4, ip
   1a7b2:	9303      	str	r3, [sp, #12]
   1a7b4:	032b      	lsls	r3, r5, #12
   1a7b6:	0b1b      	lsrs	r3, r3, #12
   1a7b8:	469b      	mov	fp, r3
   1a7ba:	006b      	lsls	r3, r5, #1
   1a7bc:	0fed      	lsrs	r5, r5, #31
   1a7be:	4650      	mov	r0, sl
   1a7c0:	0d5b      	lsrs	r3, r3, #21
   1a7c2:	9501      	str	r5, [sp, #4]
   1a7c4:	d05e      	beq.n	1a884 <__aeabi_ddiv+0x118>
   1a7c6:	4a62      	ldr	r2, [pc, #392]	; (1a950 <__aeabi_ddiv+0x1e4>)
   1a7c8:	4293      	cmp	r3, r2
   1a7ca:	d053      	beq.n	1a874 <__aeabi_ddiv+0x108>
   1a7cc:	465a      	mov	r2, fp
   1a7ce:	00d1      	lsls	r1, r2, #3
   1a7d0:	2280      	movs	r2, #128	; 0x80
   1a7d2:	0f40      	lsrs	r0, r0, #29
   1a7d4:	0412      	lsls	r2, r2, #16
   1a7d6:	4302      	orrs	r2, r0
   1a7d8:	430a      	orrs	r2, r1
   1a7da:	4693      	mov	fp, r2
   1a7dc:	4652      	mov	r2, sl
   1a7de:	00d1      	lsls	r1, r2, #3
   1a7e0:	4a5c      	ldr	r2, [pc, #368]	; (1a954 <__aeabi_ddiv+0x1e8>)
   1a7e2:	4694      	mov	ip, r2
   1a7e4:	2200      	movs	r2, #0
   1a7e6:	4463      	add	r3, ip
   1a7e8:	0038      	movs	r0, r7
   1a7ea:	4068      	eors	r0, r5
   1a7ec:	4684      	mov	ip, r0
   1a7ee:	9002      	str	r0, [sp, #8]
   1a7f0:	1ae4      	subs	r4, r4, r3
   1a7f2:	4316      	orrs	r6, r2
   1a7f4:	2e0f      	cmp	r6, #15
   1a7f6:	d900      	bls.n	1a7fa <__aeabi_ddiv+0x8e>
   1a7f8:	e0b4      	b.n	1a964 <__aeabi_ddiv+0x1f8>
   1a7fa:	4b57      	ldr	r3, [pc, #348]	; (1a958 <__aeabi_ddiv+0x1ec>)
   1a7fc:	00b6      	lsls	r6, r6, #2
   1a7fe:	599b      	ldr	r3, [r3, r6]
   1a800:	469f      	mov	pc, r3
   1a802:	0003      	movs	r3, r0
   1a804:	4333      	orrs	r3, r6
   1a806:	4699      	mov	r9, r3
   1a808:	d16c      	bne.n	1a8e4 <__aeabi_ddiv+0x178>
   1a80a:	2300      	movs	r3, #0
   1a80c:	4698      	mov	r8, r3
   1a80e:	3302      	adds	r3, #2
   1a810:	2608      	movs	r6, #8
   1a812:	9303      	str	r3, [sp, #12]
   1a814:	e7ce      	b.n	1a7b4 <__aeabi_ddiv+0x48>
   1a816:	46cb      	mov	fp, r9
   1a818:	4641      	mov	r1, r8
   1a81a:	9a03      	ldr	r2, [sp, #12]
   1a81c:	9701      	str	r7, [sp, #4]
   1a81e:	2a02      	cmp	r2, #2
   1a820:	d165      	bne.n	1a8ee <__aeabi_ddiv+0x182>
   1a822:	9b01      	ldr	r3, [sp, #4]
   1a824:	4c4a      	ldr	r4, [pc, #296]	; (1a950 <__aeabi_ddiv+0x1e4>)
   1a826:	469c      	mov	ip, r3
   1a828:	2300      	movs	r3, #0
   1a82a:	2200      	movs	r2, #0
   1a82c:	4698      	mov	r8, r3
   1a82e:	e06b      	b.n	1a908 <__aeabi_ddiv+0x19c>
   1a830:	0003      	movs	r3, r0
   1a832:	4333      	orrs	r3, r6
   1a834:	4699      	mov	r9, r3
   1a836:	d04e      	beq.n	1a8d6 <__aeabi_ddiv+0x16a>
   1a838:	2e00      	cmp	r6, #0
   1a83a:	d100      	bne.n	1a83e <__aeabi_ddiv+0xd2>
   1a83c:	e1bc      	b.n	1abb8 <__aeabi_ddiv+0x44c>
   1a83e:	0030      	movs	r0, r6
   1a840:	f7ff fbfe 	bl	1a040 <__clzsi2>
   1a844:	0003      	movs	r3, r0
   1a846:	3b0b      	subs	r3, #11
   1a848:	2b1c      	cmp	r3, #28
   1a84a:	dd00      	ble.n	1a84e <__aeabi_ddiv+0xe2>
   1a84c:	e1ac      	b.n	1aba8 <__aeabi_ddiv+0x43c>
   1a84e:	221d      	movs	r2, #29
   1a850:	1ad3      	subs	r3, r2, r3
   1a852:	465a      	mov	r2, fp
   1a854:	0001      	movs	r1, r0
   1a856:	40da      	lsrs	r2, r3
   1a858:	3908      	subs	r1, #8
   1a85a:	408e      	lsls	r6, r1
   1a85c:	0013      	movs	r3, r2
   1a85e:	4333      	orrs	r3, r6
   1a860:	4699      	mov	r9, r3
   1a862:	465b      	mov	r3, fp
   1a864:	408b      	lsls	r3, r1
   1a866:	4698      	mov	r8, r3
   1a868:	2300      	movs	r3, #0
   1a86a:	4c3c      	ldr	r4, [pc, #240]	; (1a95c <__aeabi_ddiv+0x1f0>)
   1a86c:	2600      	movs	r6, #0
   1a86e:	1a24      	subs	r4, r4, r0
   1a870:	9303      	str	r3, [sp, #12]
   1a872:	e79f      	b.n	1a7b4 <__aeabi_ddiv+0x48>
   1a874:	4651      	mov	r1, sl
   1a876:	465a      	mov	r2, fp
   1a878:	4311      	orrs	r1, r2
   1a87a:	d129      	bne.n	1a8d0 <__aeabi_ddiv+0x164>
   1a87c:	2200      	movs	r2, #0
   1a87e:	4693      	mov	fp, r2
   1a880:	3202      	adds	r2, #2
   1a882:	e7b1      	b.n	1a7e8 <__aeabi_ddiv+0x7c>
   1a884:	4659      	mov	r1, fp
   1a886:	4301      	orrs	r1, r0
   1a888:	d01e      	beq.n	1a8c8 <__aeabi_ddiv+0x15c>
   1a88a:	465b      	mov	r3, fp
   1a88c:	2b00      	cmp	r3, #0
   1a88e:	d100      	bne.n	1a892 <__aeabi_ddiv+0x126>
   1a890:	e19e      	b.n	1abd0 <__aeabi_ddiv+0x464>
   1a892:	4658      	mov	r0, fp
   1a894:	f7ff fbd4 	bl	1a040 <__clzsi2>
   1a898:	0003      	movs	r3, r0
   1a89a:	3b0b      	subs	r3, #11
   1a89c:	2b1c      	cmp	r3, #28
   1a89e:	dd00      	ble.n	1a8a2 <__aeabi_ddiv+0x136>
   1a8a0:	e18f      	b.n	1abc2 <__aeabi_ddiv+0x456>
   1a8a2:	0002      	movs	r2, r0
   1a8a4:	4659      	mov	r1, fp
   1a8a6:	3a08      	subs	r2, #8
   1a8a8:	4091      	lsls	r1, r2
   1a8aa:	468b      	mov	fp, r1
   1a8ac:	211d      	movs	r1, #29
   1a8ae:	1acb      	subs	r3, r1, r3
   1a8b0:	4651      	mov	r1, sl
   1a8b2:	40d9      	lsrs	r1, r3
   1a8b4:	000b      	movs	r3, r1
   1a8b6:	4659      	mov	r1, fp
   1a8b8:	430b      	orrs	r3, r1
   1a8ba:	4651      	mov	r1, sl
   1a8bc:	469b      	mov	fp, r3
   1a8be:	4091      	lsls	r1, r2
   1a8c0:	4b26      	ldr	r3, [pc, #152]	; (1a95c <__aeabi_ddiv+0x1f0>)
   1a8c2:	2200      	movs	r2, #0
   1a8c4:	1a1b      	subs	r3, r3, r0
   1a8c6:	e78f      	b.n	1a7e8 <__aeabi_ddiv+0x7c>
   1a8c8:	2300      	movs	r3, #0
   1a8ca:	2201      	movs	r2, #1
   1a8cc:	469b      	mov	fp, r3
   1a8ce:	e78b      	b.n	1a7e8 <__aeabi_ddiv+0x7c>
   1a8d0:	4651      	mov	r1, sl
   1a8d2:	2203      	movs	r2, #3
   1a8d4:	e788      	b.n	1a7e8 <__aeabi_ddiv+0x7c>
   1a8d6:	2300      	movs	r3, #0
   1a8d8:	4698      	mov	r8, r3
   1a8da:	3301      	adds	r3, #1
   1a8dc:	2604      	movs	r6, #4
   1a8de:	2400      	movs	r4, #0
   1a8e0:	9303      	str	r3, [sp, #12]
   1a8e2:	e767      	b.n	1a7b4 <__aeabi_ddiv+0x48>
   1a8e4:	2303      	movs	r3, #3
   1a8e6:	46b1      	mov	r9, r6
   1a8e8:	9303      	str	r3, [sp, #12]
   1a8ea:	260c      	movs	r6, #12
   1a8ec:	e762      	b.n	1a7b4 <__aeabi_ddiv+0x48>
   1a8ee:	2a03      	cmp	r2, #3
   1a8f0:	d100      	bne.n	1a8f4 <__aeabi_ddiv+0x188>
   1a8f2:	e25c      	b.n	1adae <__aeabi_ddiv+0x642>
   1a8f4:	9b01      	ldr	r3, [sp, #4]
   1a8f6:	2a01      	cmp	r2, #1
   1a8f8:	d000      	beq.n	1a8fc <__aeabi_ddiv+0x190>
   1a8fa:	e1e4      	b.n	1acc6 <__aeabi_ddiv+0x55a>
   1a8fc:	4013      	ands	r3, r2
   1a8fe:	469c      	mov	ip, r3
   1a900:	2300      	movs	r3, #0
   1a902:	2400      	movs	r4, #0
   1a904:	2200      	movs	r2, #0
   1a906:	4698      	mov	r8, r3
   1a908:	2100      	movs	r1, #0
   1a90a:	0312      	lsls	r2, r2, #12
   1a90c:	0b13      	lsrs	r3, r2, #12
   1a90e:	0d0a      	lsrs	r2, r1, #20
   1a910:	0512      	lsls	r2, r2, #20
   1a912:	431a      	orrs	r2, r3
   1a914:	0523      	lsls	r3, r4, #20
   1a916:	4c12      	ldr	r4, [pc, #72]	; (1a960 <__aeabi_ddiv+0x1f4>)
   1a918:	4640      	mov	r0, r8
   1a91a:	4022      	ands	r2, r4
   1a91c:	4313      	orrs	r3, r2
   1a91e:	4662      	mov	r2, ip
   1a920:	005b      	lsls	r3, r3, #1
   1a922:	07d2      	lsls	r2, r2, #31
   1a924:	085b      	lsrs	r3, r3, #1
   1a926:	4313      	orrs	r3, r2
   1a928:	0019      	movs	r1, r3
   1a92a:	b007      	add	sp, #28
   1a92c:	bc3c      	pop	{r2, r3, r4, r5}
   1a92e:	4690      	mov	r8, r2
   1a930:	4699      	mov	r9, r3
   1a932:	46a2      	mov	sl, r4
   1a934:	46ab      	mov	fp, r5
   1a936:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1a938:	2300      	movs	r3, #0
   1a93a:	2280      	movs	r2, #128	; 0x80
   1a93c:	469c      	mov	ip, r3
   1a93e:	0312      	lsls	r2, r2, #12
   1a940:	4698      	mov	r8, r3
   1a942:	4c03      	ldr	r4, [pc, #12]	; (1a950 <__aeabi_ddiv+0x1e4>)
   1a944:	e7e0      	b.n	1a908 <__aeabi_ddiv+0x19c>
   1a946:	2300      	movs	r3, #0
   1a948:	4c01      	ldr	r4, [pc, #4]	; (1a950 <__aeabi_ddiv+0x1e4>)
   1a94a:	2200      	movs	r2, #0
   1a94c:	4698      	mov	r8, r3
   1a94e:	e7db      	b.n	1a908 <__aeabi_ddiv+0x19c>
   1a950:	000007ff 	.word	0x000007ff
   1a954:	fffffc01 	.word	0xfffffc01
   1a958:	00021c10 	.word	0x00021c10
   1a95c:	fffffc0d 	.word	0xfffffc0d
   1a960:	800fffff 	.word	0x800fffff
   1a964:	45d9      	cmp	r9, fp
   1a966:	d900      	bls.n	1a96a <__aeabi_ddiv+0x1fe>
   1a968:	e139      	b.n	1abde <__aeabi_ddiv+0x472>
   1a96a:	d100      	bne.n	1a96e <__aeabi_ddiv+0x202>
   1a96c:	e134      	b.n	1abd8 <__aeabi_ddiv+0x46c>
   1a96e:	2300      	movs	r3, #0
   1a970:	4646      	mov	r6, r8
   1a972:	464d      	mov	r5, r9
   1a974:	469a      	mov	sl, r3
   1a976:	3c01      	subs	r4, #1
   1a978:	465b      	mov	r3, fp
   1a97a:	0e0a      	lsrs	r2, r1, #24
   1a97c:	021b      	lsls	r3, r3, #8
   1a97e:	431a      	orrs	r2, r3
   1a980:	020b      	lsls	r3, r1, #8
   1a982:	0c17      	lsrs	r7, r2, #16
   1a984:	9303      	str	r3, [sp, #12]
   1a986:	0413      	lsls	r3, r2, #16
   1a988:	0c1b      	lsrs	r3, r3, #16
   1a98a:	0039      	movs	r1, r7
   1a98c:	0028      	movs	r0, r5
   1a98e:	4690      	mov	r8, r2
   1a990:	9301      	str	r3, [sp, #4]
   1a992:	f7ff f9a1 	bl	19cd8 <__udivsi3>
   1a996:	0002      	movs	r2, r0
   1a998:	9b01      	ldr	r3, [sp, #4]
   1a99a:	4683      	mov	fp, r0
   1a99c:	435a      	muls	r2, r3
   1a99e:	0028      	movs	r0, r5
   1a9a0:	0039      	movs	r1, r7
   1a9a2:	4691      	mov	r9, r2
   1a9a4:	f7ff fa1e 	bl	19de4 <__aeabi_uidivmod>
   1a9a8:	0c35      	lsrs	r5, r6, #16
   1a9aa:	0409      	lsls	r1, r1, #16
   1a9ac:	430d      	orrs	r5, r1
   1a9ae:	45a9      	cmp	r9, r5
   1a9b0:	d90d      	bls.n	1a9ce <__aeabi_ddiv+0x262>
   1a9b2:	465b      	mov	r3, fp
   1a9b4:	4445      	add	r5, r8
   1a9b6:	3b01      	subs	r3, #1
   1a9b8:	45a8      	cmp	r8, r5
   1a9ba:	d900      	bls.n	1a9be <__aeabi_ddiv+0x252>
   1a9bc:	e13a      	b.n	1ac34 <__aeabi_ddiv+0x4c8>
   1a9be:	45a9      	cmp	r9, r5
   1a9c0:	d800      	bhi.n	1a9c4 <__aeabi_ddiv+0x258>
   1a9c2:	e137      	b.n	1ac34 <__aeabi_ddiv+0x4c8>
   1a9c4:	2302      	movs	r3, #2
   1a9c6:	425b      	negs	r3, r3
   1a9c8:	469c      	mov	ip, r3
   1a9ca:	4445      	add	r5, r8
   1a9cc:	44e3      	add	fp, ip
   1a9ce:	464b      	mov	r3, r9
   1a9d0:	1aeb      	subs	r3, r5, r3
   1a9d2:	0039      	movs	r1, r7
   1a9d4:	0018      	movs	r0, r3
   1a9d6:	9304      	str	r3, [sp, #16]
   1a9d8:	f7ff f97e 	bl	19cd8 <__udivsi3>
   1a9dc:	9b01      	ldr	r3, [sp, #4]
   1a9de:	0005      	movs	r5, r0
   1a9e0:	4343      	muls	r3, r0
   1a9e2:	0039      	movs	r1, r7
   1a9e4:	9804      	ldr	r0, [sp, #16]
   1a9e6:	4699      	mov	r9, r3
   1a9e8:	f7ff f9fc 	bl	19de4 <__aeabi_uidivmod>
   1a9ec:	0433      	lsls	r3, r6, #16
   1a9ee:	0409      	lsls	r1, r1, #16
   1a9f0:	0c1b      	lsrs	r3, r3, #16
   1a9f2:	430b      	orrs	r3, r1
   1a9f4:	4599      	cmp	r9, r3
   1a9f6:	d909      	bls.n	1aa0c <__aeabi_ddiv+0x2a0>
   1a9f8:	4443      	add	r3, r8
   1a9fa:	1e6a      	subs	r2, r5, #1
   1a9fc:	4598      	cmp	r8, r3
   1a9fe:	d900      	bls.n	1aa02 <__aeabi_ddiv+0x296>
   1aa00:	e11a      	b.n	1ac38 <__aeabi_ddiv+0x4cc>
   1aa02:	4599      	cmp	r9, r3
   1aa04:	d800      	bhi.n	1aa08 <__aeabi_ddiv+0x29c>
   1aa06:	e117      	b.n	1ac38 <__aeabi_ddiv+0x4cc>
   1aa08:	3d02      	subs	r5, #2
   1aa0a:	4443      	add	r3, r8
   1aa0c:	464a      	mov	r2, r9
   1aa0e:	1a9b      	subs	r3, r3, r2
   1aa10:	465a      	mov	r2, fp
   1aa12:	0412      	lsls	r2, r2, #16
   1aa14:	432a      	orrs	r2, r5
   1aa16:	9903      	ldr	r1, [sp, #12]
   1aa18:	4693      	mov	fp, r2
   1aa1a:	0c10      	lsrs	r0, r2, #16
   1aa1c:	0c0a      	lsrs	r2, r1, #16
   1aa1e:	4691      	mov	r9, r2
   1aa20:	0409      	lsls	r1, r1, #16
   1aa22:	465a      	mov	r2, fp
   1aa24:	0c09      	lsrs	r1, r1, #16
   1aa26:	464e      	mov	r6, r9
   1aa28:	000d      	movs	r5, r1
   1aa2a:	0412      	lsls	r2, r2, #16
   1aa2c:	0c12      	lsrs	r2, r2, #16
   1aa2e:	4345      	muls	r5, r0
   1aa30:	9105      	str	r1, [sp, #20]
   1aa32:	4351      	muls	r1, r2
   1aa34:	4372      	muls	r2, r6
   1aa36:	4370      	muls	r0, r6
   1aa38:	1952      	adds	r2, r2, r5
   1aa3a:	0c0e      	lsrs	r6, r1, #16
   1aa3c:	18b2      	adds	r2, r6, r2
   1aa3e:	4295      	cmp	r5, r2
   1aa40:	d903      	bls.n	1aa4a <__aeabi_ddiv+0x2de>
   1aa42:	2580      	movs	r5, #128	; 0x80
   1aa44:	026d      	lsls	r5, r5, #9
   1aa46:	46ac      	mov	ip, r5
   1aa48:	4460      	add	r0, ip
   1aa4a:	0c15      	lsrs	r5, r2, #16
   1aa4c:	0409      	lsls	r1, r1, #16
   1aa4e:	0412      	lsls	r2, r2, #16
   1aa50:	0c09      	lsrs	r1, r1, #16
   1aa52:	1828      	adds	r0, r5, r0
   1aa54:	1852      	adds	r2, r2, r1
   1aa56:	4283      	cmp	r3, r0
   1aa58:	d200      	bcs.n	1aa5c <__aeabi_ddiv+0x2f0>
   1aa5a:	e0ce      	b.n	1abfa <__aeabi_ddiv+0x48e>
   1aa5c:	d100      	bne.n	1aa60 <__aeabi_ddiv+0x2f4>
   1aa5e:	e0c8      	b.n	1abf2 <__aeabi_ddiv+0x486>
   1aa60:	1a1d      	subs	r5, r3, r0
   1aa62:	4653      	mov	r3, sl
   1aa64:	1a9e      	subs	r6, r3, r2
   1aa66:	45b2      	cmp	sl, r6
   1aa68:	4192      	sbcs	r2, r2
   1aa6a:	4252      	negs	r2, r2
   1aa6c:	1aab      	subs	r3, r5, r2
   1aa6e:	469a      	mov	sl, r3
   1aa70:	4598      	cmp	r8, r3
   1aa72:	d100      	bne.n	1aa76 <__aeabi_ddiv+0x30a>
   1aa74:	e117      	b.n	1aca6 <__aeabi_ddiv+0x53a>
   1aa76:	0039      	movs	r1, r7
   1aa78:	0018      	movs	r0, r3
   1aa7a:	f7ff f92d 	bl	19cd8 <__udivsi3>
   1aa7e:	9b01      	ldr	r3, [sp, #4]
   1aa80:	0005      	movs	r5, r0
   1aa82:	4343      	muls	r3, r0
   1aa84:	0039      	movs	r1, r7
   1aa86:	4650      	mov	r0, sl
   1aa88:	9304      	str	r3, [sp, #16]
   1aa8a:	f7ff f9ab 	bl	19de4 <__aeabi_uidivmod>
   1aa8e:	9804      	ldr	r0, [sp, #16]
   1aa90:	040b      	lsls	r3, r1, #16
   1aa92:	0c31      	lsrs	r1, r6, #16
   1aa94:	4319      	orrs	r1, r3
   1aa96:	4288      	cmp	r0, r1
   1aa98:	d909      	bls.n	1aaae <__aeabi_ddiv+0x342>
   1aa9a:	4441      	add	r1, r8
   1aa9c:	1e6b      	subs	r3, r5, #1
   1aa9e:	4588      	cmp	r8, r1
   1aaa0:	d900      	bls.n	1aaa4 <__aeabi_ddiv+0x338>
   1aaa2:	e107      	b.n	1acb4 <__aeabi_ddiv+0x548>
   1aaa4:	4288      	cmp	r0, r1
   1aaa6:	d800      	bhi.n	1aaaa <__aeabi_ddiv+0x33e>
   1aaa8:	e104      	b.n	1acb4 <__aeabi_ddiv+0x548>
   1aaaa:	3d02      	subs	r5, #2
   1aaac:	4441      	add	r1, r8
   1aaae:	9b04      	ldr	r3, [sp, #16]
   1aab0:	1acb      	subs	r3, r1, r3
   1aab2:	0018      	movs	r0, r3
   1aab4:	0039      	movs	r1, r7
   1aab6:	9304      	str	r3, [sp, #16]
   1aab8:	f7ff f90e 	bl	19cd8 <__udivsi3>
   1aabc:	9b01      	ldr	r3, [sp, #4]
   1aabe:	4682      	mov	sl, r0
   1aac0:	4343      	muls	r3, r0
   1aac2:	0039      	movs	r1, r7
   1aac4:	9804      	ldr	r0, [sp, #16]
   1aac6:	9301      	str	r3, [sp, #4]
   1aac8:	f7ff f98c 	bl	19de4 <__aeabi_uidivmod>
   1aacc:	9801      	ldr	r0, [sp, #4]
   1aace:	040b      	lsls	r3, r1, #16
   1aad0:	0431      	lsls	r1, r6, #16
   1aad2:	0c09      	lsrs	r1, r1, #16
   1aad4:	4319      	orrs	r1, r3
   1aad6:	4288      	cmp	r0, r1
   1aad8:	d90d      	bls.n	1aaf6 <__aeabi_ddiv+0x38a>
   1aada:	4653      	mov	r3, sl
   1aadc:	4441      	add	r1, r8
   1aade:	3b01      	subs	r3, #1
   1aae0:	4588      	cmp	r8, r1
   1aae2:	d900      	bls.n	1aae6 <__aeabi_ddiv+0x37a>
   1aae4:	e0e8      	b.n	1acb8 <__aeabi_ddiv+0x54c>
   1aae6:	4288      	cmp	r0, r1
   1aae8:	d800      	bhi.n	1aaec <__aeabi_ddiv+0x380>
   1aaea:	e0e5      	b.n	1acb8 <__aeabi_ddiv+0x54c>
   1aaec:	2302      	movs	r3, #2
   1aaee:	425b      	negs	r3, r3
   1aaf0:	469c      	mov	ip, r3
   1aaf2:	4441      	add	r1, r8
   1aaf4:	44e2      	add	sl, ip
   1aaf6:	9b01      	ldr	r3, [sp, #4]
   1aaf8:	042d      	lsls	r5, r5, #16
   1aafa:	1ace      	subs	r6, r1, r3
   1aafc:	4651      	mov	r1, sl
   1aafe:	4329      	orrs	r1, r5
   1ab00:	9d05      	ldr	r5, [sp, #20]
   1ab02:	464f      	mov	r7, r9
   1ab04:	002a      	movs	r2, r5
   1ab06:	040b      	lsls	r3, r1, #16
   1ab08:	0c08      	lsrs	r0, r1, #16
   1ab0a:	0c1b      	lsrs	r3, r3, #16
   1ab0c:	435a      	muls	r2, r3
   1ab0e:	4345      	muls	r5, r0
   1ab10:	437b      	muls	r3, r7
   1ab12:	4378      	muls	r0, r7
   1ab14:	195b      	adds	r3, r3, r5
   1ab16:	0c17      	lsrs	r7, r2, #16
   1ab18:	18fb      	adds	r3, r7, r3
   1ab1a:	429d      	cmp	r5, r3
   1ab1c:	d903      	bls.n	1ab26 <__aeabi_ddiv+0x3ba>
   1ab1e:	2580      	movs	r5, #128	; 0x80
   1ab20:	026d      	lsls	r5, r5, #9
   1ab22:	46ac      	mov	ip, r5
   1ab24:	4460      	add	r0, ip
   1ab26:	0c1d      	lsrs	r5, r3, #16
   1ab28:	0412      	lsls	r2, r2, #16
   1ab2a:	041b      	lsls	r3, r3, #16
   1ab2c:	0c12      	lsrs	r2, r2, #16
   1ab2e:	1828      	adds	r0, r5, r0
   1ab30:	189b      	adds	r3, r3, r2
   1ab32:	4286      	cmp	r6, r0
   1ab34:	d200      	bcs.n	1ab38 <__aeabi_ddiv+0x3cc>
   1ab36:	e093      	b.n	1ac60 <__aeabi_ddiv+0x4f4>
   1ab38:	d100      	bne.n	1ab3c <__aeabi_ddiv+0x3d0>
   1ab3a:	e08e      	b.n	1ac5a <__aeabi_ddiv+0x4ee>
   1ab3c:	2301      	movs	r3, #1
   1ab3e:	4319      	orrs	r1, r3
   1ab40:	4ba0      	ldr	r3, [pc, #640]	; (1adc4 <__aeabi_ddiv+0x658>)
   1ab42:	18e3      	adds	r3, r4, r3
   1ab44:	2b00      	cmp	r3, #0
   1ab46:	dc00      	bgt.n	1ab4a <__aeabi_ddiv+0x3de>
   1ab48:	e099      	b.n	1ac7e <__aeabi_ddiv+0x512>
   1ab4a:	074a      	lsls	r2, r1, #29
   1ab4c:	d000      	beq.n	1ab50 <__aeabi_ddiv+0x3e4>
   1ab4e:	e09e      	b.n	1ac8e <__aeabi_ddiv+0x522>
   1ab50:	465a      	mov	r2, fp
   1ab52:	01d2      	lsls	r2, r2, #7
   1ab54:	d506      	bpl.n	1ab64 <__aeabi_ddiv+0x3f8>
   1ab56:	465a      	mov	r2, fp
   1ab58:	4b9b      	ldr	r3, [pc, #620]	; (1adc8 <__aeabi_ddiv+0x65c>)
   1ab5a:	401a      	ands	r2, r3
   1ab5c:	2380      	movs	r3, #128	; 0x80
   1ab5e:	4693      	mov	fp, r2
   1ab60:	00db      	lsls	r3, r3, #3
   1ab62:	18e3      	adds	r3, r4, r3
   1ab64:	4a99      	ldr	r2, [pc, #612]	; (1adcc <__aeabi_ddiv+0x660>)
   1ab66:	4293      	cmp	r3, r2
   1ab68:	dd68      	ble.n	1ac3c <__aeabi_ddiv+0x4d0>
   1ab6a:	2301      	movs	r3, #1
   1ab6c:	9a02      	ldr	r2, [sp, #8]
   1ab6e:	4c98      	ldr	r4, [pc, #608]	; (1add0 <__aeabi_ddiv+0x664>)
   1ab70:	401a      	ands	r2, r3
   1ab72:	2300      	movs	r3, #0
   1ab74:	4694      	mov	ip, r2
   1ab76:	4698      	mov	r8, r3
   1ab78:	2200      	movs	r2, #0
   1ab7a:	e6c5      	b.n	1a908 <__aeabi_ddiv+0x19c>
   1ab7c:	2280      	movs	r2, #128	; 0x80
   1ab7e:	464b      	mov	r3, r9
   1ab80:	0312      	lsls	r2, r2, #12
   1ab82:	4213      	tst	r3, r2
   1ab84:	d00a      	beq.n	1ab9c <__aeabi_ddiv+0x430>
   1ab86:	465b      	mov	r3, fp
   1ab88:	4213      	tst	r3, r2
   1ab8a:	d106      	bne.n	1ab9a <__aeabi_ddiv+0x42e>
   1ab8c:	431a      	orrs	r2, r3
   1ab8e:	0312      	lsls	r2, r2, #12
   1ab90:	0b12      	lsrs	r2, r2, #12
   1ab92:	46ac      	mov	ip, r5
   1ab94:	4688      	mov	r8, r1
   1ab96:	4c8e      	ldr	r4, [pc, #568]	; (1add0 <__aeabi_ddiv+0x664>)
   1ab98:	e6b6      	b.n	1a908 <__aeabi_ddiv+0x19c>
   1ab9a:	464b      	mov	r3, r9
   1ab9c:	431a      	orrs	r2, r3
   1ab9e:	0312      	lsls	r2, r2, #12
   1aba0:	0b12      	lsrs	r2, r2, #12
   1aba2:	46bc      	mov	ip, r7
   1aba4:	4c8a      	ldr	r4, [pc, #552]	; (1add0 <__aeabi_ddiv+0x664>)
   1aba6:	e6af      	b.n	1a908 <__aeabi_ddiv+0x19c>
   1aba8:	0003      	movs	r3, r0
   1abaa:	465a      	mov	r2, fp
   1abac:	3b28      	subs	r3, #40	; 0x28
   1abae:	409a      	lsls	r2, r3
   1abb0:	2300      	movs	r3, #0
   1abb2:	4691      	mov	r9, r2
   1abb4:	4698      	mov	r8, r3
   1abb6:	e657      	b.n	1a868 <__aeabi_ddiv+0xfc>
   1abb8:	4658      	mov	r0, fp
   1abba:	f7ff fa41 	bl	1a040 <__clzsi2>
   1abbe:	3020      	adds	r0, #32
   1abc0:	e640      	b.n	1a844 <__aeabi_ddiv+0xd8>
   1abc2:	0003      	movs	r3, r0
   1abc4:	4652      	mov	r2, sl
   1abc6:	3b28      	subs	r3, #40	; 0x28
   1abc8:	409a      	lsls	r2, r3
   1abca:	2100      	movs	r1, #0
   1abcc:	4693      	mov	fp, r2
   1abce:	e677      	b.n	1a8c0 <__aeabi_ddiv+0x154>
   1abd0:	f7ff fa36 	bl	1a040 <__clzsi2>
   1abd4:	3020      	adds	r0, #32
   1abd6:	e65f      	b.n	1a898 <__aeabi_ddiv+0x12c>
   1abd8:	4588      	cmp	r8, r1
   1abda:	d200      	bcs.n	1abde <__aeabi_ddiv+0x472>
   1abdc:	e6c7      	b.n	1a96e <__aeabi_ddiv+0x202>
   1abde:	464b      	mov	r3, r9
   1abe0:	07de      	lsls	r6, r3, #31
   1abe2:	085d      	lsrs	r5, r3, #1
   1abe4:	4643      	mov	r3, r8
   1abe6:	085b      	lsrs	r3, r3, #1
   1abe8:	431e      	orrs	r6, r3
   1abea:	4643      	mov	r3, r8
   1abec:	07db      	lsls	r3, r3, #31
   1abee:	469a      	mov	sl, r3
   1abf0:	e6c2      	b.n	1a978 <__aeabi_ddiv+0x20c>
   1abf2:	2500      	movs	r5, #0
   1abf4:	4592      	cmp	sl, r2
   1abf6:	d300      	bcc.n	1abfa <__aeabi_ddiv+0x48e>
   1abf8:	e733      	b.n	1aa62 <__aeabi_ddiv+0x2f6>
   1abfa:	9e03      	ldr	r6, [sp, #12]
   1abfc:	4659      	mov	r1, fp
   1abfe:	46b4      	mov	ip, r6
   1ac00:	44e2      	add	sl, ip
   1ac02:	45b2      	cmp	sl, r6
   1ac04:	41ad      	sbcs	r5, r5
   1ac06:	426d      	negs	r5, r5
   1ac08:	4445      	add	r5, r8
   1ac0a:	18eb      	adds	r3, r5, r3
   1ac0c:	3901      	subs	r1, #1
   1ac0e:	4598      	cmp	r8, r3
   1ac10:	d207      	bcs.n	1ac22 <__aeabi_ddiv+0x4b6>
   1ac12:	4298      	cmp	r0, r3
   1ac14:	d900      	bls.n	1ac18 <__aeabi_ddiv+0x4ac>
   1ac16:	e07f      	b.n	1ad18 <__aeabi_ddiv+0x5ac>
   1ac18:	d100      	bne.n	1ac1c <__aeabi_ddiv+0x4b0>
   1ac1a:	e0bc      	b.n	1ad96 <__aeabi_ddiv+0x62a>
   1ac1c:	1a1d      	subs	r5, r3, r0
   1ac1e:	468b      	mov	fp, r1
   1ac20:	e71f      	b.n	1aa62 <__aeabi_ddiv+0x2f6>
   1ac22:	4598      	cmp	r8, r3
   1ac24:	d1fa      	bne.n	1ac1c <__aeabi_ddiv+0x4b0>
   1ac26:	9d03      	ldr	r5, [sp, #12]
   1ac28:	4555      	cmp	r5, sl
   1ac2a:	d9f2      	bls.n	1ac12 <__aeabi_ddiv+0x4a6>
   1ac2c:	4643      	mov	r3, r8
   1ac2e:	468b      	mov	fp, r1
   1ac30:	1a1d      	subs	r5, r3, r0
   1ac32:	e716      	b.n	1aa62 <__aeabi_ddiv+0x2f6>
   1ac34:	469b      	mov	fp, r3
   1ac36:	e6ca      	b.n	1a9ce <__aeabi_ddiv+0x262>
   1ac38:	0015      	movs	r5, r2
   1ac3a:	e6e7      	b.n	1aa0c <__aeabi_ddiv+0x2a0>
   1ac3c:	465a      	mov	r2, fp
   1ac3e:	08c9      	lsrs	r1, r1, #3
   1ac40:	0752      	lsls	r2, r2, #29
   1ac42:	430a      	orrs	r2, r1
   1ac44:	055b      	lsls	r3, r3, #21
   1ac46:	4690      	mov	r8, r2
   1ac48:	0d5c      	lsrs	r4, r3, #21
   1ac4a:	465a      	mov	r2, fp
   1ac4c:	2301      	movs	r3, #1
   1ac4e:	9902      	ldr	r1, [sp, #8]
   1ac50:	0252      	lsls	r2, r2, #9
   1ac52:	4019      	ands	r1, r3
   1ac54:	0b12      	lsrs	r2, r2, #12
   1ac56:	468c      	mov	ip, r1
   1ac58:	e656      	b.n	1a908 <__aeabi_ddiv+0x19c>
   1ac5a:	2b00      	cmp	r3, #0
   1ac5c:	d100      	bne.n	1ac60 <__aeabi_ddiv+0x4f4>
   1ac5e:	e76f      	b.n	1ab40 <__aeabi_ddiv+0x3d4>
   1ac60:	4446      	add	r6, r8
   1ac62:	1e4a      	subs	r2, r1, #1
   1ac64:	45b0      	cmp	r8, r6
   1ac66:	d929      	bls.n	1acbc <__aeabi_ddiv+0x550>
   1ac68:	0011      	movs	r1, r2
   1ac6a:	4286      	cmp	r6, r0
   1ac6c:	d000      	beq.n	1ac70 <__aeabi_ddiv+0x504>
   1ac6e:	e765      	b.n	1ab3c <__aeabi_ddiv+0x3d0>
   1ac70:	9a03      	ldr	r2, [sp, #12]
   1ac72:	4293      	cmp	r3, r2
   1ac74:	d000      	beq.n	1ac78 <__aeabi_ddiv+0x50c>
   1ac76:	e761      	b.n	1ab3c <__aeabi_ddiv+0x3d0>
   1ac78:	e762      	b.n	1ab40 <__aeabi_ddiv+0x3d4>
   1ac7a:	2101      	movs	r1, #1
   1ac7c:	4249      	negs	r1, r1
   1ac7e:	2001      	movs	r0, #1
   1ac80:	1ac2      	subs	r2, r0, r3
   1ac82:	2a38      	cmp	r2, #56	; 0x38
   1ac84:	dd21      	ble.n	1acca <__aeabi_ddiv+0x55e>
   1ac86:	9b02      	ldr	r3, [sp, #8]
   1ac88:	4003      	ands	r3, r0
   1ac8a:	469c      	mov	ip, r3
   1ac8c:	e638      	b.n	1a900 <__aeabi_ddiv+0x194>
   1ac8e:	220f      	movs	r2, #15
   1ac90:	400a      	ands	r2, r1
   1ac92:	2a04      	cmp	r2, #4
   1ac94:	d100      	bne.n	1ac98 <__aeabi_ddiv+0x52c>
   1ac96:	e75b      	b.n	1ab50 <__aeabi_ddiv+0x3e4>
   1ac98:	000a      	movs	r2, r1
   1ac9a:	1d11      	adds	r1, r2, #4
   1ac9c:	4291      	cmp	r1, r2
   1ac9e:	4192      	sbcs	r2, r2
   1aca0:	4252      	negs	r2, r2
   1aca2:	4493      	add	fp, r2
   1aca4:	e754      	b.n	1ab50 <__aeabi_ddiv+0x3e4>
   1aca6:	4b47      	ldr	r3, [pc, #284]	; (1adc4 <__aeabi_ddiv+0x658>)
   1aca8:	18e3      	adds	r3, r4, r3
   1acaa:	2b00      	cmp	r3, #0
   1acac:	dde5      	ble.n	1ac7a <__aeabi_ddiv+0x50e>
   1acae:	2201      	movs	r2, #1
   1acb0:	4252      	negs	r2, r2
   1acb2:	e7f2      	b.n	1ac9a <__aeabi_ddiv+0x52e>
   1acb4:	001d      	movs	r5, r3
   1acb6:	e6fa      	b.n	1aaae <__aeabi_ddiv+0x342>
   1acb8:	469a      	mov	sl, r3
   1acba:	e71c      	b.n	1aaf6 <__aeabi_ddiv+0x38a>
   1acbc:	42b0      	cmp	r0, r6
   1acbe:	d839      	bhi.n	1ad34 <__aeabi_ddiv+0x5c8>
   1acc0:	d06e      	beq.n	1ada0 <__aeabi_ddiv+0x634>
   1acc2:	0011      	movs	r1, r2
   1acc4:	e73a      	b.n	1ab3c <__aeabi_ddiv+0x3d0>
   1acc6:	9302      	str	r3, [sp, #8]
   1acc8:	e73a      	b.n	1ab40 <__aeabi_ddiv+0x3d4>
   1acca:	2a1f      	cmp	r2, #31
   1accc:	dc3c      	bgt.n	1ad48 <__aeabi_ddiv+0x5dc>
   1acce:	2320      	movs	r3, #32
   1acd0:	1a9b      	subs	r3, r3, r2
   1acd2:	000c      	movs	r4, r1
   1acd4:	4658      	mov	r0, fp
   1acd6:	4099      	lsls	r1, r3
   1acd8:	4098      	lsls	r0, r3
   1acda:	1e4b      	subs	r3, r1, #1
   1acdc:	4199      	sbcs	r1, r3
   1acde:	465b      	mov	r3, fp
   1ace0:	40d4      	lsrs	r4, r2
   1ace2:	40d3      	lsrs	r3, r2
   1ace4:	4320      	orrs	r0, r4
   1ace6:	4308      	orrs	r0, r1
   1ace8:	001a      	movs	r2, r3
   1acea:	0743      	lsls	r3, r0, #29
   1acec:	d009      	beq.n	1ad02 <__aeabi_ddiv+0x596>
   1acee:	230f      	movs	r3, #15
   1acf0:	4003      	ands	r3, r0
   1acf2:	2b04      	cmp	r3, #4
   1acf4:	d005      	beq.n	1ad02 <__aeabi_ddiv+0x596>
   1acf6:	0001      	movs	r1, r0
   1acf8:	1d08      	adds	r0, r1, #4
   1acfa:	4288      	cmp	r0, r1
   1acfc:	419b      	sbcs	r3, r3
   1acfe:	425b      	negs	r3, r3
   1ad00:	18d2      	adds	r2, r2, r3
   1ad02:	0213      	lsls	r3, r2, #8
   1ad04:	d53a      	bpl.n	1ad7c <__aeabi_ddiv+0x610>
   1ad06:	2301      	movs	r3, #1
   1ad08:	9a02      	ldr	r2, [sp, #8]
   1ad0a:	2401      	movs	r4, #1
   1ad0c:	401a      	ands	r2, r3
   1ad0e:	2300      	movs	r3, #0
   1ad10:	4694      	mov	ip, r2
   1ad12:	4698      	mov	r8, r3
   1ad14:	2200      	movs	r2, #0
   1ad16:	e5f7      	b.n	1a908 <__aeabi_ddiv+0x19c>
   1ad18:	2102      	movs	r1, #2
   1ad1a:	4249      	negs	r1, r1
   1ad1c:	468c      	mov	ip, r1
   1ad1e:	9d03      	ldr	r5, [sp, #12]
   1ad20:	44e3      	add	fp, ip
   1ad22:	46ac      	mov	ip, r5
   1ad24:	44e2      	add	sl, ip
   1ad26:	45aa      	cmp	sl, r5
   1ad28:	41ad      	sbcs	r5, r5
   1ad2a:	426d      	negs	r5, r5
   1ad2c:	4445      	add	r5, r8
   1ad2e:	18ed      	adds	r5, r5, r3
   1ad30:	1a2d      	subs	r5, r5, r0
   1ad32:	e696      	b.n	1aa62 <__aeabi_ddiv+0x2f6>
   1ad34:	1e8a      	subs	r2, r1, #2
   1ad36:	9903      	ldr	r1, [sp, #12]
   1ad38:	004d      	lsls	r5, r1, #1
   1ad3a:	428d      	cmp	r5, r1
   1ad3c:	4189      	sbcs	r1, r1
   1ad3e:	4249      	negs	r1, r1
   1ad40:	4441      	add	r1, r8
   1ad42:	1876      	adds	r6, r6, r1
   1ad44:	9503      	str	r5, [sp, #12]
   1ad46:	e78f      	b.n	1ac68 <__aeabi_ddiv+0x4fc>
   1ad48:	201f      	movs	r0, #31
   1ad4a:	4240      	negs	r0, r0
   1ad4c:	1ac3      	subs	r3, r0, r3
   1ad4e:	4658      	mov	r0, fp
   1ad50:	40d8      	lsrs	r0, r3
   1ad52:	0003      	movs	r3, r0
   1ad54:	2a20      	cmp	r2, #32
   1ad56:	d028      	beq.n	1adaa <__aeabi_ddiv+0x63e>
   1ad58:	2040      	movs	r0, #64	; 0x40
   1ad5a:	465d      	mov	r5, fp
   1ad5c:	1a82      	subs	r2, r0, r2
   1ad5e:	4095      	lsls	r5, r2
   1ad60:	4329      	orrs	r1, r5
   1ad62:	1e4a      	subs	r2, r1, #1
   1ad64:	4191      	sbcs	r1, r2
   1ad66:	4319      	orrs	r1, r3
   1ad68:	2307      	movs	r3, #7
   1ad6a:	2200      	movs	r2, #0
   1ad6c:	400b      	ands	r3, r1
   1ad6e:	d009      	beq.n	1ad84 <__aeabi_ddiv+0x618>
   1ad70:	230f      	movs	r3, #15
   1ad72:	2200      	movs	r2, #0
   1ad74:	400b      	ands	r3, r1
   1ad76:	0008      	movs	r0, r1
   1ad78:	2b04      	cmp	r3, #4
   1ad7a:	d1bd      	bne.n	1acf8 <__aeabi_ddiv+0x58c>
   1ad7c:	0001      	movs	r1, r0
   1ad7e:	0753      	lsls	r3, r2, #29
   1ad80:	0252      	lsls	r2, r2, #9
   1ad82:	0b12      	lsrs	r2, r2, #12
   1ad84:	08c9      	lsrs	r1, r1, #3
   1ad86:	4319      	orrs	r1, r3
   1ad88:	2301      	movs	r3, #1
   1ad8a:	4688      	mov	r8, r1
   1ad8c:	9902      	ldr	r1, [sp, #8]
   1ad8e:	2400      	movs	r4, #0
   1ad90:	4019      	ands	r1, r3
   1ad92:	468c      	mov	ip, r1
   1ad94:	e5b8      	b.n	1a908 <__aeabi_ddiv+0x19c>
   1ad96:	4552      	cmp	r2, sl
   1ad98:	d8be      	bhi.n	1ad18 <__aeabi_ddiv+0x5ac>
   1ad9a:	468b      	mov	fp, r1
   1ad9c:	2500      	movs	r5, #0
   1ad9e:	e660      	b.n	1aa62 <__aeabi_ddiv+0x2f6>
   1ada0:	9d03      	ldr	r5, [sp, #12]
   1ada2:	429d      	cmp	r5, r3
   1ada4:	d3c6      	bcc.n	1ad34 <__aeabi_ddiv+0x5c8>
   1ada6:	0011      	movs	r1, r2
   1ada8:	e762      	b.n	1ac70 <__aeabi_ddiv+0x504>
   1adaa:	2500      	movs	r5, #0
   1adac:	e7d8      	b.n	1ad60 <__aeabi_ddiv+0x5f4>
   1adae:	2280      	movs	r2, #128	; 0x80
   1adb0:	465b      	mov	r3, fp
   1adb2:	0312      	lsls	r2, r2, #12
   1adb4:	431a      	orrs	r2, r3
   1adb6:	9b01      	ldr	r3, [sp, #4]
   1adb8:	0312      	lsls	r2, r2, #12
   1adba:	0b12      	lsrs	r2, r2, #12
   1adbc:	469c      	mov	ip, r3
   1adbe:	4688      	mov	r8, r1
   1adc0:	4c03      	ldr	r4, [pc, #12]	; (1add0 <__aeabi_ddiv+0x664>)
   1adc2:	e5a1      	b.n	1a908 <__aeabi_ddiv+0x19c>
   1adc4:	000003ff 	.word	0x000003ff
   1adc8:	feffffff 	.word	0xfeffffff
   1adcc:	000007fe 	.word	0x000007fe
   1add0:	000007ff 	.word	0x000007ff

0001add4 <__eqdf2>:
   1add4:	b5f0      	push	{r4, r5, r6, r7, lr}
   1add6:	464f      	mov	r7, r9
   1add8:	4646      	mov	r6, r8
   1adda:	46d6      	mov	lr, sl
   1addc:	005c      	lsls	r4, r3, #1
   1adde:	b5c0      	push	{r6, r7, lr}
   1ade0:	031f      	lsls	r7, r3, #12
   1ade2:	0fdb      	lsrs	r3, r3, #31
   1ade4:	469a      	mov	sl, r3
   1ade6:	4b17      	ldr	r3, [pc, #92]	; (1ae44 <__eqdf2+0x70>)
   1ade8:	030e      	lsls	r6, r1, #12
   1adea:	004d      	lsls	r5, r1, #1
   1adec:	4684      	mov	ip, r0
   1adee:	4680      	mov	r8, r0
   1adf0:	0b36      	lsrs	r6, r6, #12
   1adf2:	0d6d      	lsrs	r5, r5, #21
   1adf4:	0fc9      	lsrs	r1, r1, #31
   1adf6:	4691      	mov	r9, r2
   1adf8:	0b3f      	lsrs	r7, r7, #12
   1adfa:	0d64      	lsrs	r4, r4, #21
   1adfc:	2001      	movs	r0, #1
   1adfe:	429d      	cmp	r5, r3
   1ae00:	d008      	beq.n	1ae14 <__eqdf2+0x40>
   1ae02:	429c      	cmp	r4, r3
   1ae04:	d001      	beq.n	1ae0a <__eqdf2+0x36>
   1ae06:	42a5      	cmp	r5, r4
   1ae08:	d00b      	beq.n	1ae22 <__eqdf2+0x4e>
   1ae0a:	bc1c      	pop	{r2, r3, r4}
   1ae0c:	4690      	mov	r8, r2
   1ae0e:	4699      	mov	r9, r3
   1ae10:	46a2      	mov	sl, r4
   1ae12:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1ae14:	4663      	mov	r3, ip
   1ae16:	4333      	orrs	r3, r6
   1ae18:	d1f7      	bne.n	1ae0a <__eqdf2+0x36>
   1ae1a:	42ac      	cmp	r4, r5
   1ae1c:	d1f5      	bne.n	1ae0a <__eqdf2+0x36>
   1ae1e:	433a      	orrs	r2, r7
   1ae20:	d1f3      	bne.n	1ae0a <__eqdf2+0x36>
   1ae22:	2001      	movs	r0, #1
   1ae24:	42be      	cmp	r6, r7
   1ae26:	d1f0      	bne.n	1ae0a <__eqdf2+0x36>
   1ae28:	45c8      	cmp	r8, r9
   1ae2a:	d1ee      	bne.n	1ae0a <__eqdf2+0x36>
   1ae2c:	4551      	cmp	r1, sl
   1ae2e:	d007      	beq.n	1ae40 <__eqdf2+0x6c>
   1ae30:	2d00      	cmp	r5, #0
   1ae32:	d1ea      	bne.n	1ae0a <__eqdf2+0x36>
   1ae34:	4663      	mov	r3, ip
   1ae36:	431e      	orrs	r6, r3
   1ae38:	0030      	movs	r0, r6
   1ae3a:	1e46      	subs	r6, r0, #1
   1ae3c:	41b0      	sbcs	r0, r6
   1ae3e:	e7e4      	b.n	1ae0a <__eqdf2+0x36>
   1ae40:	2000      	movs	r0, #0
   1ae42:	e7e2      	b.n	1ae0a <__eqdf2+0x36>
   1ae44:	000007ff 	.word	0x000007ff

0001ae48 <__gedf2>:
   1ae48:	b5f0      	push	{r4, r5, r6, r7, lr}
   1ae4a:	4645      	mov	r5, r8
   1ae4c:	46de      	mov	lr, fp
   1ae4e:	4657      	mov	r7, sl
   1ae50:	464e      	mov	r6, r9
   1ae52:	b5e0      	push	{r5, r6, r7, lr}
   1ae54:	031f      	lsls	r7, r3, #12
   1ae56:	0b3d      	lsrs	r5, r7, #12
   1ae58:	4f2c      	ldr	r7, [pc, #176]	; (1af0c <__gedf2+0xc4>)
   1ae5a:	030e      	lsls	r6, r1, #12
   1ae5c:	004c      	lsls	r4, r1, #1
   1ae5e:	46ab      	mov	fp, r5
   1ae60:	005d      	lsls	r5, r3, #1
   1ae62:	4684      	mov	ip, r0
   1ae64:	0b36      	lsrs	r6, r6, #12
   1ae66:	0d64      	lsrs	r4, r4, #21
   1ae68:	0fc9      	lsrs	r1, r1, #31
   1ae6a:	4690      	mov	r8, r2
   1ae6c:	0d6d      	lsrs	r5, r5, #21
   1ae6e:	0fdb      	lsrs	r3, r3, #31
   1ae70:	42bc      	cmp	r4, r7
   1ae72:	d02a      	beq.n	1aeca <__gedf2+0x82>
   1ae74:	4f25      	ldr	r7, [pc, #148]	; (1af0c <__gedf2+0xc4>)
   1ae76:	42bd      	cmp	r5, r7
   1ae78:	d02d      	beq.n	1aed6 <__gedf2+0x8e>
   1ae7a:	2c00      	cmp	r4, #0
   1ae7c:	d10f      	bne.n	1ae9e <__gedf2+0x56>
   1ae7e:	4330      	orrs	r0, r6
   1ae80:	0007      	movs	r7, r0
   1ae82:	4681      	mov	r9, r0
   1ae84:	4278      	negs	r0, r7
   1ae86:	4178      	adcs	r0, r7
   1ae88:	b2c0      	uxtb	r0, r0
   1ae8a:	2d00      	cmp	r5, #0
   1ae8c:	d117      	bne.n	1aebe <__gedf2+0x76>
   1ae8e:	465f      	mov	r7, fp
   1ae90:	433a      	orrs	r2, r7
   1ae92:	d114      	bne.n	1aebe <__gedf2+0x76>
   1ae94:	464b      	mov	r3, r9
   1ae96:	2000      	movs	r0, #0
   1ae98:	2b00      	cmp	r3, #0
   1ae9a:	d00a      	beq.n	1aeb2 <__gedf2+0x6a>
   1ae9c:	e006      	b.n	1aeac <__gedf2+0x64>
   1ae9e:	2d00      	cmp	r5, #0
   1aea0:	d102      	bne.n	1aea8 <__gedf2+0x60>
   1aea2:	4658      	mov	r0, fp
   1aea4:	4302      	orrs	r2, r0
   1aea6:	d001      	beq.n	1aeac <__gedf2+0x64>
   1aea8:	4299      	cmp	r1, r3
   1aeaa:	d018      	beq.n	1aede <__gedf2+0x96>
   1aeac:	4248      	negs	r0, r1
   1aeae:	2101      	movs	r1, #1
   1aeb0:	4308      	orrs	r0, r1
   1aeb2:	bc3c      	pop	{r2, r3, r4, r5}
   1aeb4:	4690      	mov	r8, r2
   1aeb6:	4699      	mov	r9, r3
   1aeb8:	46a2      	mov	sl, r4
   1aeba:	46ab      	mov	fp, r5
   1aebc:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1aebe:	2800      	cmp	r0, #0
   1aec0:	d0f2      	beq.n	1aea8 <__gedf2+0x60>
   1aec2:	2001      	movs	r0, #1
   1aec4:	3b01      	subs	r3, #1
   1aec6:	4318      	orrs	r0, r3
   1aec8:	e7f3      	b.n	1aeb2 <__gedf2+0x6a>
   1aeca:	0037      	movs	r7, r6
   1aecc:	4307      	orrs	r7, r0
   1aece:	d0d1      	beq.n	1ae74 <__gedf2+0x2c>
   1aed0:	2002      	movs	r0, #2
   1aed2:	4240      	negs	r0, r0
   1aed4:	e7ed      	b.n	1aeb2 <__gedf2+0x6a>
   1aed6:	465f      	mov	r7, fp
   1aed8:	4317      	orrs	r7, r2
   1aeda:	d0ce      	beq.n	1ae7a <__gedf2+0x32>
   1aedc:	e7f8      	b.n	1aed0 <__gedf2+0x88>
   1aede:	42ac      	cmp	r4, r5
   1aee0:	dce4      	bgt.n	1aeac <__gedf2+0x64>
   1aee2:	da03      	bge.n	1aeec <__gedf2+0xa4>
   1aee4:	1e48      	subs	r0, r1, #1
   1aee6:	2101      	movs	r1, #1
   1aee8:	4308      	orrs	r0, r1
   1aeea:	e7e2      	b.n	1aeb2 <__gedf2+0x6a>
   1aeec:	455e      	cmp	r6, fp
   1aeee:	d8dd      	bhi.n	1aeac <__gedf2+0x64>
   1aef0:	d006      	beq.n	1af00 <__gedf2+0xb8>
   1aef2:	2000      	movs	r0, #0
   1aef4:	455e      	cmp	r6, fp
   1aef6:	d2dc      	bcs.n	1aeb2 <__gedf2+0x6a>
   1aef8:	2301      	movs	r3, #1
   1aefa:	1e48      	subs	r0, r1, #1
   1aefc:	4318      	orrs	r0, r3
   1aefe:	e7d8      	b.n	1aeb2 <__gedf2+0x6a>
   1af00:	45c4      	cmp	ip, r8
   1af02:	d8d3      	bhi.n	1aeac <__gedf2+0x64>
   1af04:	2000      	movs	r0, #0
   1af06:	45c4      	cmp	ip, r8
   1af08:	d3f6      	bcc.n	1aef8 <__gedf2+0xb0>
   1af0a:	e7d2      	b.n	1aeb2 <__gedf2+0x6a>
   1af0c:	000007ff 	.word	0x000007ff

0001af10 <__ledf2>:
   1af10:	b5f0      	push	{r4, r5, r6, r7, lr}
   1af12:	464e      	mov	r6, r9
   1af14:	4645      	mov	r5, r8
   1af16:	46de      	mov	lr, fp
   1af18:	4657      	mov	r7, sl
   1af1a:	005c      	lsls	r4, r3, #1
   1af1c:	b5e0      	push	{r5, r6, r7, lr}
   1af1e:	031f      	lsls	r7, r3, #12
   1af20:	0fdb      	lsrs	r3, r3, #31
   1af22:	4699      	mov	r9, r3
   1af24:	4b2a      	ldr	r3, [pc, #168]	; (1afd0 <__ledf2+0xc0>)
   1af26:	030e      	lsls	r6, r1, #12
   1af28:	004d      	lsls	r5, r1, #1
   1af2a:	0fc9      	lsrs	r1, r1, #31
   1af2c:	4684      	mov	ip, r0
   1af2e:	0b36      	lsrs	r6, r6, #12
   1af30:	0d6d      	lsrs	r5, r5, #21
   1af32:	468b      	mov	fp, r1
   1af34:	4690      	mov	r8, r2
   1af36:	0b3f      	lsrs	r7, r7, #12
   1af38:	0d64      	lsrs	r4, r4, #21
   1af3a:	429d      	cmp	r5, r3
   1af3c:	d020      	beq.n	1af80 <__ledf2+0x70>
   1af3e:	4b24      	ldr	r3, [pc, #144]	; (1afd0 <__ledf2+0xc0>)
   1af40:	429c      	cmp	r4, r3
   1af42:	d022      	beq.n	1af8a <__ledf2+0x7a>
   1af44:	2d00      	cmp	r5, #0
   1af46:	d112      	bne.n	1af6e <__ledf2+0x5e>
   1af48:	4330      	orrs	r0, r6
   1af4a:	4243      	negs	r3, r0
   1af4c:	4143      	adcs	r3, r0
   1af4e:	b2db      	uxtb	r3, r3
   1af50:	2c00      	cmp	r4, #0
   1af52:	d01f      	beq.n	1af94 <__ledf2+0x84>
   1af54:	2b00      	cmp	r3, #0
   1af56:	d00c      	beq.n	1af72 <__ledf2+0x62>
   1af58:	464b      	mov	r3, r9
   1af5a:	2001      	movs	r0, #1
   1af5c:	3b01      	subs	r3, #1
   1af5e:	4303      	orrs	r3, r0
   1af60:	0018      	movs	r0, r3
   1af62:	bc3c      	pop	{r2, r3, r4, r5}
   1af64:	4690      	mov	r8, r2
   1af66:	4699      	mov	r9, r3
   1af68:	46a2      	mov	sl, r4
   1af6a:	46ab      	mov	fp, r5
   1af6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1af6e:	2c00      	cmp	r4, #0
   1af70:	d016      	beq.n	1afa0 <__ledf2+0x90>
   1af72:	45cb      	cmp	fp, r9
   1af74:	d017      	beq.n	1afa6 <__ledf2+0x96>
   1af76:	465b      	mov	r3, fp
   1af78:	4259      	negs	r1, r3
   1af7a:	2301      	movs	r3, #1
   1af7c:	430b      	orrs	r3, r1
   1af7e:	e7ef      	b.n	1af60 <__ledf2+0x50>
   1af80:	0031      	movs	r1, r6
   1af82:	2302      	movs	r3, #2
   1af84:	4301      	orrs	r1, r0
   1af86:	d1eb      	bne.n	1af60 <__ledf2+0x50>
   1af88:	e7d9      	b.n	1af3e <__ledf2+0x2e>
   1af8a:	0039      	movs	r1, r7
   1af8c:	2302      	movs	r3, #2
   1af8e:	4311      	orrs	r1, r2
   1af90:	d1e6      	bne.n	1af60 <__ledf2+0x50>
   1af92:	e7d7      	b.n	1af44 <__ledf2+0x34>
   1af94:	433a      	orrs	r2, r7
   1af96:	d1dd      	bne.n	1af54 <__ledf2+0x44>
   1af98:	2300      	movs	r3, #0
   1af9a:	2800      	cmp	r0, #0
   1af9c:	d0e0      	beq.n	1af60 <__ledf2+0x50>
   1af9e:	e7ea      	b.n	1af76 <__ledf2+0x66>
   1afa0:	433a      	orrs	r2, r7
   1afa2:	d1e6      	bne.n	1af72 <__ledf2+0x62>
   1afa4:	e7e7      	b.n	1af76 <__ledf2+0x66>
   1afa6:	42a5      	cmp	r5, r4
   1afa8:	dce5      	bgt.n	1af76 <__ledf2+0x66>
   1afaa:	db05      	blt.n	1afb8 <__ledf2+0xa8>
   1afac:	42be      	cmp	r6, r7
   1afae:	d8e2      	bhi.n	1af76 <__ledf2+0x66>
   1afb0:	d007      	beq.n	1afc2 <__ledf2+0xb2>
   1afb2:	2300      	movs	r3, #0
   1afb4:	42be      	cmp	r6, r7
   1afb6:	d2d3      	bcs.n	1af60 <__ledf2+0x50>
   1afb8:	4659      	mov	r1, fp
   1afba:	2301      	movs	r3, #1
   1afbc:	3901      	subs	r1, #1
   1afbe:	430b      	orrs	r3, r1
   1afc0:	e7ce      	b.n	1af60 <__ledf2+0x50>
   1afc2:	45c4      	cmp	ip, r8
   1afc4:	d8d7      	bhi.n	1af76 <__ledf2+0x66>
   1afc6:	2300      	movs	r3, #0
   1afc8:	45c4      	cmp	ip, r8
   1afca:	d3f5      	bcc.n	1afb8 <__ledf2+0xa8>
   1afcc:	e7c8      	b.n	1af60 <__ledf2+0x50>
   1afce:	46c0      	nop			; (mov r8, r8)
   1afd0:	000007ff 	.word	0x000007ff

0001afd4 <__aeabi_dmul>:
   1afd4:	b5f0      	push	{r4, r5, r6, r7, lr}
   1afd6:	4657      	mov	r7, sl
   1afd8:	4645      	mov	r5, r8
   1afda:	46de      	mov	lr, fp
   1afdc:	464e      	mov	r6, r9
   1afde:	b5e0      	push	{r5, r6, r7, lr}
   1afe0:	030c      	lsls	r4, r1, #12
   1afe2:	4698      	mov	r8, r3
   1afe4:	004e      	lsls	r6, r1, #1
   1afe6:	0b23      	lsrs	r3, r4, #12
   1afe8:	b087      	sub	sp, #28
   1afea:	0007      	movs	r7, r0
   1afec:	4692      	mov	sl, r2
   1afee:	469b      	mov	fp, r3
   1aff0:	0d76      	lsrs	r6, r6, #21
   1aff2:	0fcd      	lsrs	r5, r1, #31
   1aff4:	2e00      	cmp	r6, #0
   1aff6:	d06b      	beq.n	1b0d0 <__aeabi_dmul+0xfc>
   1aff8:	4b6d      	ldr	r3, [pc, #436]	; (1b1b0 <__aeabi_dmul+0x1dc>)
   1affa:	429e      	cmp	r6, r3
   1affc:	d035      	beq.n	1b06a <__aeabi_dmul+0x96>
   1affe:	2480      	movs	r4, #128	; 0x80
   1b000:	465b      	mov	r3, fp
   1b002:	0f42      	lsrs	r2, r0, #29
   1b004:	0424      	lsls	r4, r4, #16
   1b006:	00db      	lsls	r3, r3, #3
   1b008:	4314      	orrs	r4, r2
   1b00a:	431c      	orrs	r4, r3
   1b00c:	00c3      	lsls	r3, r0, #3
   1b00e:	4699      	mov	r9, r3
   1b010:	4b68      	ldr	r3, [pc, #416]	; (1b1b4 <__aeabi_dmul+0x1e0>)
   1b012:	46a3      	mov	fp, r4
   1b014:	469c      	mov	ip, r3
   1b016:	2300      	movs	r3, #0
   1b018:	2700      	movs	r7, #0
   1b01a:	4466      	add	r6, ip
   1b01c:	9302      	str	r3, [sp, #8]
   1b01e:	4643      	mov	r3, r8
   1b020:	031c      	lsls	r4, r3, #12
   1b022:	005a      	lsls	r2, r3, #1
   1b024:	0fdb      	lsrs	r3, r3, #31
   1b026:	4650      	mov	r0, sl
   1b028:	0b24      	lsrs	r4, r4, #12
   1b02a:	0d52      	lsrs	r2, r2, #21
   1b02c:	4698      	mov	r8, r3
   1b02e:	d100      	bne.n	1b032 <__aeabi_dmul+0x5e>
   1b030:	e076      	b.n	1b120 <__aeabi_dmul+0x14c>
   1b032:	4b5f      	ldr	r3, [pc, #380]	; (1b1b0 <__aeabi_dmul+0x1dc>)
   1b034:	429a      	cmp	r2, r3
   1b036:	d06d      	beq.n	1b114 <__aeabi_dmul+0x140>
   1b038:	2380      	movs	r3, #128	; 0x80
   1b03a:	0f41      	lsrs	r1, r0, #29
   1b03c:	041b      	lsls	r3, r3, #16
   1b03e:	430b      	orrs	r3, r1
   1b040:	495c      	ldr	r1, [pc, #368]	; (1b1b4 <__aeabi_dmul+0x1e0>)
   1b042:	00e4      	lsls	r4, r4, #3
   1b044:	468c      	mov	ip, r1
   1b046:	431c      	orrs	r4, r3
   1b048:	00c3      	lsls	r3, r0, #3
   1b04a:	2000      	movs	r0, #0
   1b04c:	4462      	add	r2, ip
   1b04e:	4641      	mov	r1, r8
   1b050:	18b6      	adds	r6, r6, r2
   1b052:	4069      	eors	r1, r5
   1b054:	1c72      	adds	r2, r6, #1
   1b056:	9101      	str	r1, [sp, #4]
   1b058:	4694      	mov	ip, r2
   1b05a:	4307      	orrs	r7, r0
   1b05c:	2f0f      	cmp	r7, #15
   1b05e:	d900      	bls.n	1b062 <__aeabi_dmul+0x8e>
   1b060:	e0b0      	b.n	1b1c4 <__aeabi_dmul+0x1f0>
   1b062:	4a55      	ldr	r2, [pc, #340]	; (1b1b8 <__aeabi_dmul+0x1e4>)
   1b064:	00bf      	lsls	r7, r7, #2
   1b066:	59d2      	ldr	r2, [r2, r7]
   1b068:	4697      	mov	pc, r2
   1b06a:	465b      	mov	r3, fp
   1b06c:	4303      	orrs	r3, r0
   1b06e:	4699      	mov	r9, r3
   1b070:	d000      	beq.n	1b074 <__aeabi_dmul+0xa0>
   1b072:	e087      	b.n	1b184 <__aeabi_dmul+0x1b0>
   1b074:	2300      	movs	r3, #0
   1b076:	469b      	mov	fp, r3
   1b078:	3302      	adds	r3, #2
   1b07a:	2708      	movs	r7, #8
   1b07c:	9302      	str	r3, [sp, #8]
   1b07e:	e7ce      	b.n	1b01e <__aeabi_dmul+0x4a>
   1b080:	4642      	mov	r2, r8
   1b082:	9201      	str	r2, [sp, #4]
   1b084:	2802      	cmp	r0, #2
   1b086:	d067      	beq.n	1b158 <__aeabi_dmul+0x184>
   1b088:	2803      	cmp	r0, #3
   1b08a:	d100      	bne.n	1b08e <__aeabi_dmul+0xba>
   1b08c:	e20e      	b.n	1b4ac <__aeabi_dmul+0x4d8>
   1b08e:	2801      	cmp	r0, #1
   1b090:	d000      	beq.n	1b094 <__aeabi_dmul+0xc0>
   1b092:	e162      	b.n	1b35a <__aeabi_dmul+0x386>
   1b094:	2300      	movs	r3, #0
   1b096:	2400      	movs	r4, #0
   1b098:	2200      	movs	r2, #0
   1b09a:	4699      	mov	r9, r3
   1b09c:	9901      	ldr	r1, [sp, #4]
   1b09e:	4001      	ands	r1, r0
   1b0a0:	b2cd      	uxtb	r5, r1
   1b0a2:	2100      	movs	r1, #0
   1b0a4:	0312      	lsls	r2, r2, #12
   1b0a6:	0d0b      	lsrs	r3, r1, #20
   1b0a8:	0b12      	lsrs	r2, r2, #12
   1b0aa:	051b      	lsls	r3, r3, #20
   1b0ac:	4313      	orrs	r3, r2
   1b0ae:	4a43      	ldr	r2, [pc, #268]	; (1b1bc <__aeabi_dmul+0x1e8>)
   1b0b0:	0524      	lsls	r4, r4, #20
   1b0b2:	4013      	ands	r3, r2
   1b0b4:	431c      	orrs	r4, r3
   1b0b6:	0064      	lsls	r4, r4, #1
   1b0b8:	07ed      	lsls	r5, r5, #31
   1b0ba:	0864      	lsrs	r4, r4, #1
   1b0bc:	432c      	orrs	r4, r5
   1b0be:	4648      	mov	r0, r9
   1b0c0:	0021      	movs	r1, r4
   1b0c2:	b007      	add	sp, #28
   1b0c4:	bc3c      	pop	{r2, r3, r4, r5}
   1b0c6:	4690      	mov	r8, r2
   1b0c8:	4699      	mov	r9, r3
   1b0ca:	46a2      	mov	sl, r4
   1b0cc:	46ab      	mov	fp, r5
   1b0ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1b0d0:	4303      	orrs	r3, r0
   1b0d2:	4699      	mov	r9, r3
   1b0d4:	d04f      	beq.n	1b176 <__aeabi_dmul+0x1a2>
   1b0d6:	465b      	mov	r3, fp
   1b0d8:	2b00      	cmp	r3, #0
   1b0da:	d100      	bne.n	1b0de <__aeabi_dmul+0x10a>
   1b0dc:	e189      	b.n	1b3f2 <__aeabi_dmul+0x41e>
   1b0de:	4658      	mov	r0, fp
   1b0e0:	f7fe ffae 	bl	1a040 <__clzsi2>
   1b0e4:	0003      	movs	r3, r0
   1b0e6:	3b0b      	subs	r3, #11
   1b0e8:	2b1c      	cmp	r3, #28
   1b0ea:	dd00      	ble.n	1b0ee <__aeabi_dmul+0x11a>
   1b0ec:	e17a      	b.n	1b3e4 <__aeabi_dmul+0x410>
   1b0ee:	221d      	movs	r2, #29
   1b0f0:	1ad3      	subs	r3, r2, r3
   1b0f2:	003a      	movs	r2, r7
   1b0f4:	0001      	movs	r1, r0
   1b0f6:	465c      	mov	r4, fp
   1b0f8:	40da      	lsrs	r2, r3
   1b0fa:	3908      	subs	r1, #8
   1b0fc:	408c      	lsls	r4, r1
   1b0fe:	0013      	movs	r3, r2
   1b100:	408f      	lsls	r7, r1
   1b102:	4323      	orrs	r3, r4
   1b104:	469b      	mov	fp, r3
   1b106:	46b9      	mov	r9, r7
   1b108:	2300      	movs	r3, #0
   1b10a:	4e2d      	ldr	r6, [pc, #180]	; (1b1c0 <__aeabi_dmul+0x1ec>)
   1b10c:	2700      	movs	r7, #0
   1b10e:	1a36      	subs	r6, r6, r0
   1b110:	9302      	str	r3, [sp, #8]
   1b112:	e784      	b.n	1b01e <__aeabi_dmul+0x4a>
   1b114:	4653      	mov	r3, sl
   1b116:	4323      	orrs	r3, r4
   1b118:	d12a      	bne.n	1b170 <__aeabi_dmul+0x19c>
   1b11a:	2400      	movs	r4, #0
   1b11c:	2002      	movs	r0, #2
   1b11e:	e796      	b.n	1b04e <__aeabi_dmul+0x7a>
   1b120:	4653      	mov	r3, sl
   1b122:	4323      	orrs	r3, r4
   1b124:	d020      	beq.n	1b168 <__aeabi_dmul+0x194>
   1b126:	2c00      	cmp	r4, #0
   1b128:	d100      	bne.n	1b12c <__aeabi_dmul+0x158>
   1b12a:	e157      	b.n	1b3dc <__aeabi_dmul+0x408>
   1b12c:	0020      	movs	r0, r4
   1b12e:	f7fe ff87 	bl	1a040 <__clzsi2>
   1b132:	0003      	movs	r3, r0
   1b134:	3b0b      	subs	r3, #11
   1b136:	2b1c      	cmp	r3, #28
   1b138:	dd00      	ble.n	1b13c <__aeabi_dmul+0x168>
   1b13a:	e149      	b.n	1b3d0 <__aeabi_dmul+0x3fc>
   1b13c:	211d      	movs	r1, #29
   1b13e:	1acb      	subs	r3, r1, r3
   1b140:	4651      	mov	r1, sl
   1b142:	0002      	movs	r2, r0
   1b144:	40d9      	lsrs	r1, r3
   1b146:	4653      	mov	r3, sl
   1b148:	3a08      	subs	r2, #8
   1b14a:	4094      	lsls	r4, r2
   1b14c:	4093      	lsls	r3, r2
   1b14e:	430c      	orrs	r4, r1
   1b150:	4a1b      	ldr	r2, [pc, #108]	; (1b1c0 <__aeabi_dmul+0x1ec>)
   1b152:	1a12      	subs	r2, r2, r0
   1b154:	2000      	movs	r0, #0
   1b156:	e77a      	b.n	1b04e <__aeabi_dmul+0x7a>
   1b158:	2501      	movs	r5, #1
   1b15a:	9b01      	ldr	r3, [sp, #4]
   1b15c:	4c14      	ldr	r4, [pc, #80]	; (1b1b0 <__aeabi_dmul+0x1dc>)
   1b15e:	401d      	ands	r5, r3
   1b160:	2300      	movs	r3, #0
   1b162:	2200      	movs	r2, #0
   1b164:	4699      	mov	r9, r3
   1b166:	e79c      	b.n	1b0a2 <__aeabi_dmul+0xce>
   1b168:	2400      	movs	r4, #0
   1b16a:	2200      	movs	r2, #0
   1b16c:	2001      	movs	r0, #1
   1b16e:	e76e      	b.n	1b04e <__aeabi_dmul+0x7a>
   1b170:	4653      	mov	r3, sl
   1b172:	2003      	movs	r0, #3
   1b174:	e76b      	b.n	1b04e <__aeabi_dmul+0x7a>
   1b176:	2300      	movs	r3, #0
   1b178:	469b      	mov	fp, r3
   1b17a:	3301      	adds	r3, #1
   1b17c:	2704      	movs	r7, #4
   1b17e:	2600      	movs	r6, #0
   1b180:	9302      	str	r3, [sp, #8]
   1b182:	e74c      	b.n	1b01e <__aeabi_dmul+0x4a>
   1b184:	2303      	movs	r3, #3
   1b186:	4681      	mov	r9, r0
   1b188:	270c      	movs	r7, #12
   1b18a:	9302      	str	r3, [sp, #8]
   1b18c:	e747      	b.n	1b01e <__aeabi_dmul+0x4a>
   1b18e:	2280      	movs	r2, #128	; 0x80
   1b190:	2300      	movs	r3, #0
   1b192:	2500      	movs	r5, #0
   1b194:	0312      	lsls	r2, r2, #12
   1b196:	4699      	mov	r9, r3
   1b198:	4c05      	ldr	r4, [pc, #20]	; (1b1b0 <__aeabi_dmul+0x1dc>)
   1b19a:	e782      	b.n	1b0a2 <__aeabi_dmul+0xce>
   1b19c:	465c      	mov	r4, fp
   1b19e:	464b      	mov	r3, r9
   1b1a0:	9802      	ldr	r0, [sp, #8]
   1b1a2:	e76f      	b.n	1b084 <__aeabi_dmul+0xb0>
   1b1a4:	465c      	mov	r4, fp
   1b1a6:	464b      	mov	r3, r9
   1b1a8:	9501      	str	r5, [sp, #4]
   1b1aa:	9802      	ldr	r0, [sp, #8]
   1b1ac:	e76a      	b.n	1b084 <__aeabi_dmul+0xb0>
   1b1ae:	46c0      	nop			; (mov r8, r8)
   1b1b0:	000007ff 	.word	0x000007ff
   1b1b4:	fffffc01 	.word	0xfffffc01
   1b1b8:	00021c50 	.word	0x00021c50
   1b1bc:	800fffff 	.word	0x800fffff
   1b1c0:	fffffc0d 	.word	0xfffffc0d
   1b1c4:	464a      	mov	r2, r9
   1b1c6:	4649      	mov	r1, r9
   1b1c8:	0c17      	lsrs	r7, r2, #16
   1b1ca:	0c1a      	lsrs	r2, r3, #16
   1b1cc:	041b      	lsls	r3, r3, #16
   1b1ce:	0c1b      	lsrs	r3, r3, #16
   1b1d0:	0408      	lsls	r0, r1, #16
   1b1d2:	0019      	movs	r1, r3
   1b1d4:	0c00      	lsrs	r0, r0, #16
   1b1d6:	4341      	muls	r1, r0
   1b1d8:	0015      	movs	r5, r2
   1b1da:	4688      	mov	r8, r1
   1b1dc:	0019      	movs	r1, r3
   1b1de:	437d      	muls	r5, r7
   1b1e0:	4379      	muls	r1, r7
   1b1e2:	9503      	str	r5, [sp, #12]
   1b1e4:	4689      	mov	r9, r1
   1b1e6:	0029      	movs	r1, r5
   1b1e8:	0015      	movs	r5, r2
   1b1ea:	4345      	muls	r5, r0
   1b1ec:	444d      	add	r5, r9
   1b1ee:	9502      	str	r5, [sp, #8]
   1b1f0:	4645      	mov	r5, r8
   1b1f2:	0c2d      	lsrs	r5, r5, #16
   1b1f4:	46aa      	mov	sl, r5
   1b1f6:	9d02      	ldr	r5, [sp, #8]
   1b1f8:	4455      	add	r5, sl
   1b1fa:	45a9      	cmp	r9, r5
   1b1fc:	d906      	bls.n	1b20c <__aeabi_dmul+0x238>
   1b1fe:	468a      	mov	sl, r1
   1b200:	2180      	movs	r1, #128	; 0x80
   1b202:	0249      	lsls	r1, r1, #9
   1b204:	4689      	mov	r9, r1
   1b206:	44ca      	add	sl, r9
   1b208:	4651      	mov	r1, sl
   1b20a:	9103      	str	r1, [sp, #12]
   1b20c:	0c29      	lsrs	r1, r5, #16
   1b20e:	9104      	str	r1, [sp, #16]
   1b210:	4641      	mov	r1, r8
   1b212:	0409      	lsls	r1, r1, #16
   1b214:	042d      	lsls	r5, r5, #16
   1b216:	0c09      	lsrs	r1, r1, #16
   1b218:	4688      	mov	r8, r1
   1b21a:	0029      	movs	r1, r5
   1b21c:	0c25      	lsrs	r5, r4, #16
   1b21e:	0424      	lsls	r4, r4, #16
   1b220:	4441      	add	r1, r8
   1b222:	0c24      	lsrs	r4, r4, #16
   1b224:	9105      	str	r1, [sp, #20]
   1b226:	0021      	movs	r1, r4
   1b228:	4341      	muls	r1, r0
   1b22a:	4688      	mov	r8, r1
   1b22c:	0021      	movs	r1, r4
   1b22e:	4379      	muls	r1, r7
   1b230:	468a      	mov	sl, r1
   1b232:	4368      	muls	r0, r5
   1b234:	4641      	mov	r1, r8
   1b236:	4450      	add	r0, sl
   1b238:	4681      	mov	r9, r0
   1b23a:	0c08      	lsrs	r0, r1, #16
   1b23c:	4448      	add	r0, r9
   1b23e:	436f      	muls	r7, r5
   1b240:	4582      	cmp	sl, r0
   1b242:	d903      	bls.n	1b24c <__aeabi_dmul+0x278>
   1b244:	2180      	movs	r1, #128	; 0x80
   1b246:	0249      	lsls	r1, r1, #9
   1b248:	4689      	mov	r9, r1
   1b24a:	444f      	add	r7, r9
   1b24c:	0c01      	lsrs	r1, r0, #16
   1b24e:	4689      	mov	r9, r1
   1b250:	0039      	movs	r1, r7
   1b252:	4449      	add	r1, r9
   1b254:	9102      	str	r1, [sp, #8]
   1b256:	4641      	mov	r1, r8
   1b258:	040f      	lsls	r7, r1, #16
   1b25a:	9904      	ldr	r1, [sp, #16]
   1b25c:	0c3f      	lsrs	r7, r7, #16
   1b25e:	4688      	mov	r8, r1
   1b260:	0400      	lsls	r0, r0, #16
   1b262:	19c0      	adds	r0, r0, r7
   1b264:	4480      	add	r8, r0
   1b266:	4641      	mov	r1, r8
   1b268:	9104      	str	r1, [sp, #16]
   1b26a:	4659      	mov	r1, fp
   1b26c:	0c0f      	lsrs	r7, r1, #16
   1b26e:	0409      	lsls	r1, r1, #16
   1b270:	0c09      	lsrs	r1, r1, #16
   1b272:	4688      	mov	r8, r1
   1b274:	4359      	muls	r1, r3
   1b276:	468a      	mov	sl, r1
   1b278:	0039      	movs	r1, r7
   1b27a:	4351      	muls	r1, r2
   1b27c:	4689      	mov	r9, r1
   1b27e:	4641      	mov	r1, r8
   1b280:	434a      	muls	r2, r1
   1b282:	4651      	mov	r1, sl
   1b284:	0c09      	lsrs	r1, r1, #16
   1b286:	468b      	mov	fp, r1
   1b288:	437b      	muls	r3, r7
   1b28a:	18d2      	adds	r2, r2, r3
   1b28c:	445a      	add	r2, fp
   1b28e:	4293      	cmp	r3, r2
   1b290:	d903      	bls.n	1b29a <__aeabi_dmul+0x2c6>
   1b292:	2380      	movs	r3, #128	; 0x80
   1b294:	025b      	lsls	r3, r3, #9
   1b296:	469b      	mov	fp, r3
   1b298:	44d9      	add	r9, fp
   1b29a:	4651      	mov	r1, sl
   1b29c:	0409      	lsls	r1, r1, #16
   1b29e:	0c09      	lsrs	r1, r1, #16
   1b2a0:	468a      	mov	sl, r1
   1b2a2:	4641      	mov	r1, r8
   1b2a4:	4361      	muls	r1, r4
   1b2a6:	437c      	muls	r4, r7
   1b2a8:	0c13      	lsrs	r3, r2, #16
   1b2aa:	0412      	lsls	r2, r2, #16
   1b2ac:	444b      	add	r3, r9
   1b2ae:	4452      	add	r2, sl
   1b2b0:	46a1      	mov	r9, r4
   1b2b2:	468a      	mov	sl, r1
   1b2b4:	003c      	movs	r4, r7
   1b2b6:	4641      	mov	r1, r8
   1b2b8:	436c      	muls	r4, r5
   1b2ba:	434d      	muls	r5, r1
   1b2bc:	4651      	mov	r1, sl
   1b2be:	444d      	add	r5, r9
   1b2c0:	0c0f      	lsrs	r7, r1, #16
   1b2c2:	197d      	adds	r5, r7, r5
   1b2c4:	45a9      	cmp	r9, r5
   1b2c6:	d903      	bls.n	1b2d0 <__aeabi_dmul+0x2fc>
   1b2c8:	2180      	movs	r1, #128	; 0x80
   1b2ca:	0249      	lsls	r1, r1, #9
   1b2cc:	4688      	mov	r8, r1
   1b2ce:	4444      	add	r4, r8
   1b2d0:	9f04      	ldr	r7, [sp, #16]
   1b2d2:	9903      	ldr	r1, [sp, #12]
   1b2d4:	46b8      	mov	r8, r7
   1b2d6:	4441      	add	r1, r8
   1b2d8:	468b      	mov	fp, r1
   1b2da:	4583      	cmp	fp, r0
   1b2dc:	4180      	sbcs	r0, r0
   1b2de:	4241      	negs	r1, r0
   1b2e0:	4688      	mov	r8, r1
   1b2e2:	4651      	mov	r1, sl
   1b2e4:	0408      	lsls	r0, r1, #16
   1b2e6:	042f      	lsls	r7, r5, #16
   1b2e8:	0c00      	lsrs	r0, r0, #16
   1b2ea:	183f      	adds	r7, r7, r0
   1b2ec:	4658      	mov	r0, fp
   1b2ee:	9902      	ldr	r1, [sp, #8]
   1b2f0:	1810      	adds	r0, r2, r0
   1b2f2:	4689      	mov	r9, r1
   1b2f4:	4290      	cmp	r0, r2
   1b2f6:	4192      	sbcs	r2, r2
   1b2f8:	444f      	add	r7, r9
   1b2fa:	46ba      	mov	sl, r7
   1b2fc:	4252      	negs	r2, r2
   1b2fe:	4699      	mov	r9, r3
   1b300:	4693      	mov	fp, r2
   1b302:	44c2      	add	sl, r8
   1b304:	44d1      	add	r9, sl
   1b306:	44cb      	add	fp, r9
   1b308:	428f      	cmp	r7, r1
   1b30a:	41bf      	sbcs	r7, r7
   1b30c:	45c2      	cmp	sl, r8
   1b30e:	4189      	sbcs	r1, r1
   1b310:	4599      	cmp	r9, r3
   1b312:	419b      	sbcs	r3, r3
   1b314:	4593      	cmp	fp, r2
   1b316:	4192      	sbcs	r2, r2
   1b318:	427f      	negs	r7, r7
   1b31a:	4249      	negs	r1, r1
   1b31c:	0c2d      	lsrs	r5, r5, #16
   1b31e:	4252      	negs	r2, r2
   1b320:	430f      	orrs	r7, r1
   1b322:	425b      	negs	r3, r3
   1b324:	4313      	orrs	r3, r2
   1b326:	197f      	adds	r7, r7, r5
   1b328:	18ff      	adds	r7, r7, r3
   1b32a:	465b      	mov	r3, fp
   1b32c:	193c      	adds	r4, r7, r4
   1b32e:	0ddb      	lsrs	r3, r3, #23
   1b330:	9a05      	ldr	r2, [sp, #20]
   1b332:	0264      	lsls	r4, r4, #9
   1b334:	431c      	orrs	r4, r3
   1b336:	0243      	lsls	r3, r0, #9
   1b338:	4313      	orrs	r3, r2
   1b33a:	1e5d      	subs	r5, r3, #1
   1b33c:	41ab      	sbcs	r3, r5
   1b33e:	465a      	mov	r2, fp
   1b340:	0dc0      	lsrs	r0, r0, #23
   1b342:	4303      	orrs	r3, r0
   1b344:	0252      	lsls	r2, r2, #9
   1b346:	4313      	orrs	r3, r2
   1b348:	01e2      	lsls	r2, r4, #7
   1b34a:	d556      	bpl.n	1b3fa <__aeabi_dmul+0x426>
   1b34c:	2001      	movs	r0, #1
   1b34e:	085a      	lsrs	r2, r3, #1
   1b350:	4003      	ands	r3, r0
   1b352:	4313      	orrs	r3, r2
   1b354:	07e2      	lsls	r2, r4, #31
   1b356:	4313      	orrs	r3, r2
   1b358:	0864      	lsrs	r4, r4, #1
   1b35a:	485a      	ldr	r0, [pc, #360]	; (1b4c4 <__aeabi_dmul+0x4f0>)
   1b35c:	4460      	add	r0, ip
   1b35e:	2800      	cmp	r0, #0
   1b360:	dd4d      	ble.n	1b3fe <__aeabi_dmul+0x42a>
   1b362:	075a      	lsls	r2, r3, #29
   1b364:	d009      	beq.n	1b37a <__aeabi_dmul+0x3a6>
   1b366:	220f      	movs	r2, #15
   1b368:	401a      	ands	r2, r3
   1b36a:	2a04      	cmp	r2, #4
   1b36c:	d005      	beq.n	1b37a <__aeabi_dmul+0x3a6>
   1b36e:	1d1a      	adds	r2, r3, #4
   1b370:	429a      	cmp	r2, r3
   1b372:	419b      	sbcs	r3, r3
   1b374:	425b      	negs	r3, r3
   1b376:	18e4      	adds	r4, r4, r3
   1b378:	0013      	movs	r3, r2
   1b37a:	01e2      	lsls	r2, r4, #7
   1b37c:	d504      	bpl.n	1b388 <__aeabi_dmul+0x3b4>
   1b37e:	2080      	movs	r0, #128	; 0x80
   1b380:	4a51      	ldr	r2, [pc, #324]	; (1b4c8 <__aeabi_dmul+0x4f4>)
   1b382:	00c0      	lsls	r0, r0, #3
   1b384:	4014      	ands	r4, r2
   1b386:	4460      	add	r0, ip
   1b388:	4a50      	ldr	r2, [pc, #320]	; (1b4cc <__aeabi_dmul+0x4f8>)
   1b38a:	4290      	cmp	r0, r2
   1b38c:	dd00      	ble.n	1b390 <__aeabi_dmul+0x3bc>
   1b38e:	e6e3      	b.n	1b158 <__aeabi_dmul+0x184>
   1b390:	2501      	movs	r5, #1
   1b392:	08db      	lsrs	r3, r3, #3
   1b394:	0762      	lsls	r2, r4, #29
   1b396:	431a      	orrs	r2, r3
   1b398:	0264      	lsls	r4, r4, #9
   1b39a:	9b01      	ldr	r3, [sp, #4]
   1b39c:	4691      	mov	r9, r2
   1b39e:	0b22      	lsrs	r2, r4, #12
   1b3a0:	0544      	lsls	r4, r0, #21
   1b3a2:	0d64      	lsrs	r4, r4, #21
   1b3a4:	401d      	ands	r5, r3
   1b3a6:	e67c      	b.n	1b0a2 <__aeabi_dmul+0xce>
   1b3a8:	2280      	movs	r2, #128	; 0x80
   1b3aa:	4659      	mov	r1, fp
   1b3ac:	0312      	lsls	r2, r2, #12
   1b3ae:	4211      	tst	r1, r2
   1b3b0:	d008      	beq.n	1b3c4 <__aeabi_dmul+0x3f0>
   1b3b2:	4214      	tst	r4, r2
   1b3b4:	d106      	bne.n	1b3c4 <__aeabi_dmul+0x3f0>
   1b3b6:	4322      	orrs	r2, r4
   1b3b8:	0312      	lsls	r2, r2, #12
   1b3ba:	0b12      	lsrs	r2, r2, #12
   1b3bc:	4645      	mov	r5, r8
   1b3be:	4699      	mov	r9, r3
   1b3c0:	4c43      	ldr	r4, [pc, #268]	; (1b4d0 <__aeabi_dmul+0x4fc>)
   1b3c2:	e66e      	b.n	1b0a2 <__aeabi_dmul+0xce>
   1b3c4:	465b      	mov	r3, fp
   1b3c6:	431a      	orrs	r2, r3
   1b3c8:	0312      	lsls	r2, r2, #12
   1b3ca:	0b12      	lsrs	r2, r2, #12
   1b3cc:	4c40      	ldr	r4, [pc, #256]	; (1b4d0 <__aeabi_dmul+0x4fc>)
   1b3ce:	e668      	b.n	1b0a2 <__aeabi_dmul+0xce>
   1b3d0:	0003      	movs	r3, r0
   1b3d2:	4654      	mov	r4, sl
   1b3d4:	3b28      	subs	r3, #40	; 0x28
   1b3d6:	409c      	lsls	r4, r3
   1b3d8:	2300      	movs	r3, #0
   1b3da:	e6b9      	b.n	1b150 <__aeabi_dmul+0x17c>
   1b3dc:	f7fe fe30 	bl	1a040 <__clzsi2>
   1b3e0:	3020      	adds	r0, #32
   1b3e2:	e6a6      	b.n	1b132 <__aeabi_dmul+0x15e>
   1b3e4:	0003      	movs	r3, r0
   1b3e6:	3b28      	subs	r3, #40	; 0x28
   1b3e8:	409f      	lsls	r7, r3
   1b3ea:	2300      	movs	r3, #0
   1b3ec:	46bb      	mov	fp, r7
   1b3ee:	4699      	mov	r9, r3
   1b3f0:	e68a      	b.n	1b108 <__aeabi_dmul+0x134>
   1b3f2:	f7fe fe25 	bl	1a040 <__clzsi2>
   1b3f6:	3020      	adds	r0, #32
   1b3f8:	e674      	b.n	1b0e4 <__aeabi_dmul+0x110>
   1b3fa:	46b4      	mov	ip, r6
   1b3fc:	e7ad      	b.n	1b35a <__aeabi_dmul+0x386>
   1b3fe:	2501      	movs	r5, #1
   1b400:	1a2a      	subs	r2, r5, r0
   1b402:	2a38      	cmp	r2, #56	; 0x38
   1b404:	dd06      	ble.n	1b414 <__aeabi_dmul+0x440>
   1b406:	9b01      	ldr	r3, [sp, #4]
   1b408:	2400      	movs	r4, #0
   1b40a:	401d      	ands	r5, r3
   1b40c:	2300      	movs	r3, #0
   1b40e:	2200      	movs	r2, #0
   1b410:	4699      	mov	r9, r3
   1b412:	e646      	b.n	1b0a2 <__aeabi_dmul+0xce>
   1b414:	2a1f      	cmp	r2, #31
   1b416:	dc21      	bgt.n	1b45c <__aeabi_dmul+0x488>
   1b418:	2520      	movs	r5, #32
   1b41a:	0020      	movs	r0, r4
   1b41c:	1aad      	subs	r5, r5, r2
   1b41e:	001e      	movs	r6, r3
   1b420:	40ab      	lsls	r3, r5
   1b422:	40a8      	lsls	r0, r5
   1b424:	40d6      	lsrs	r6, r2
   1b426:	1e5d      	subs	r5, r3, #1
   1b428:	41ab      	sbcs	r3, r5
   1b42a:	4330      	orrs	r0, r6
   1b42c:	4318      	orrs	r0, r3
   1b42e:	40d4      	lsrs	r4, r2
   1b430:	0743      	lsls	r3, r0, #29
   1b432:	d009      	beq.n	1b448 <__aeabi_dmul+0x474>
   1b434:	230f      	movs	r3, #15
   1b436:	4003      	ands	r3, r0
   1b438:	2b04      	cmp	r3, #4
   1b43a:	d005      	beq.n	1b448 <__aeabi_dmul+0x474>
   1b43c:	0003      	movs	r3, r0
   1b43e:	1d18      	adds	r0, r3, #4
   1b440:	4298      	cmp	r0, r3
   1b442:	419b      	sbcs	r3, r3
   1b444:	425b      	negs	r3, r3
   1b446:	18e4      	adds	r4, r4, r3
   1b448:	0223      	lsls	r3, r4, #8
   1b44a:	d521      	bpl.n	1b490 <__aeabi_dmul+0x4bc>
   1b44c:	2501      	movs	r5, #1
   1b44e:	9b01      	ldr	r3, [sp, #4]
   1b450:	2401      	movs	r4, #1
   1b452:	401d      	ands	r5, r3
   1b454:	2300      	movs	r3, #0
   1b456:	2200      	movs	r2, #0
   1b458:	4699      	mov	r9, r3
   1b45a:	e622      	b.n	1b0a2 <__aeabi_dmul+0xce>
   1b45c:	251f      	movs	r5, #31
   1b45e:	0021      	movs	r1, r4
   1b460:	426d      	negs	r5, r5
   1b462:	1a28      	subs	r0, r5, r0
   1b464:	40c1      	lsrs	r1, r0
   1b466:	0008      	movs	r0, r1
   1b468:	2a20      	cmp	r2, #32
   1b46a:	d01d      	beq.n	1b4a8 <__aeabi_dmul+0x4d4>
   1b46c:	355f      	adds	r5, #95	; 0x5f
   1b46e:	1aaa      	subs	r2, r5, r2
   1b470:	4094      	lsls	r4, r2
   1b472:	4323      	orrs	r3, r4
   1b474:	1e5c      	subs	r4, r3, #1
   1b476:	41a3      	sbcs	r3, r4
   1b478:	2507      	movs	r5, #7
   1b47a:	4303      	orrs	r3, r0
   1b47c:	401d      	ands	r5, r3
   1b47e:	2200      	movs	r2, #0
   1b480:	2d00      	cmp	r5, #0
   1b482:	d009      	beq.n	1b498 <__aeabi_dmul+0x4c4>
   1b484:	220f      	movs	r2, #15
   1b486:	2400      	movs	r4, #0
   1b488:	401a      	ands	r2, r3
   1b48a:	0018      	movs	r0, r3
   1b48c:	2a04      	cmp	r2, #4
   1b48e:	d1d6      	bne.n	1b43e <__aeabi_dmul+0x46a>
   1b490:	0003      	movs	r3, r0
   1b492:	0765      	lsls	r5, r4, #29
   1b494:	0264      	lsls	r4, r4, #9
   1b496:	0b22      	lsrs	r2, r4, #12
   1b498:	08db      	lsrs	r3, r3, #3
   1b49a:	432b      	orrs	r3, r5
   1b49c:	2501      	movs	r5, #1
   1b49e:	4699      	mov	r9, r3
   1b4a0:	9b01      	ldr	r3, [sp, #4]
   1b4a2:	2400      	movs	r4, #0
   1b4a4:	401d      	ands	r5, r3
   1b4a6:	e5fc      	b.n	1b0a2 <__aeabi_dmul+0xce>
   1b4a8:	2400      	movs	r4, #0
   1b4aa:	e7e2      	b.n	1b472 <__aeabi_dmul+0x49e>
   1b4ac:	2280      	movs	r2, #128	; 0x80
   1b4ae:	2501      	movs	r5, #1
   1b4b0:	0312      	lsls	r2, r2, #12
   1b4b2:	4322      	orrs	r2, r4
   1b4b4:	9901      	ldr	r1, [sp, #4]
   1b4b6:	0312      	lsls	r2, r2, #12
   1b4b8:	0b12      	lsrs	r2, r2, #12
   1b4ba:	400d      	ands	r5, r1
   1b4bc:	4699      	mov	r9, r3
   1b4be:	4c04      	ldr	r4, [pc, #16]	; (1b4d0 <__aeabi_dmul+0x4fc>)
   1b4c0:	e5ef      	b.n	1b0a2 <__aeabi_dmul+0xce>
   1b4c2:	46c0      	nop			; (mov r8, r8)
   1b4c4:	000003ff 	.word	0x000003ff
   1b4c8:	feffffff 	.word	0xfeffffff
   1b4cc:	000007fe 	.word	0x000007fe
   1b4d0:	000007ff 	.word	0x000007ff

0001b4d4 <__aeabi_dsub>:
   1b4d4:	b5f0      	push	{r4, r5, r6, r7, lr}
   1b4d6:	4646      	mov	r6, r8
   1b4d8:	46d6      	mov	lr, sl
   1b4da:	464f      	mov	r7, r9
   1b4dc:	030c      	lsls	r4, r1, #12
   1b4de:	b5c0      	push	{r6, r7, lr}
   1b4e0:	0fcd      	lsrs	r5, r1, #31
   1b4e2:	004e      	lsls	r6, r1, #1
   1b4e4:	0a61      	lsrs	r1, r4, #9
   1b4e6:	0f44      	lsrs	r4, r0, #29
   1b4e8:	430c      	orrs	r4, r1
   1b4ea:	00c1      	lsls	r1, r0, #3
   1b4ec:	0058      	lsls	r0, r3, #1
   1b4ee:	0d40      	lsrs	r0, r0, #21
   1b4f0:	4684      	mov	ip, r0
   1b4f2:	468a      	mov	sl, r1
   1b4f4:	000f      	movs	r7, r1
   1b4f6:	0319      	lsls	r1, r3, #12
   1b4f8:	0f50      	lsrs	r0, r2, #29
   1b4fa:	0a49      	lsrs	r1, r1, #9
   1b4fc:	4301      	orrs	r1, r0
   1b4fe:	48c6      	ldr	r0, [pc, #792]	; (1b818 <__aeabi_dsub+0x344>)
   1b500:	0d76      	lsrs	r6, r6, #21
   1b502:	46a8      	mov	r8, r5
   1b504:	0fdb      	lsrs	r3, r3, #31
   1b506:	00d2      	lsls	r2, r2, #3
   1b508:	4584      	cmp	ip, r0
   1b50a:	d100      	bne.n	1b50e <__aeabi_dsub+0x3a>
   1b50c:	e0d8      	b.n	1b6c0 <__aeabi_dsub+0x1ec>
   1b50e:	2001      	movs	r0, #1
   1b510:	4043      	eors	r3, r0
   1b512:	42ab      	cmp	r3, r5
   1b514:	d100      	bne.n	1b518 <__aeabi_dsub+0x44>
   1b516:	e0a6      	b.n	1b666 <__aeabi_dsub+0x192>
   1b518:	4660      	mov	r0, ip
   1b51a:	1a35      	subs	r5, r6, r0
   1b51c:	2d00      	cmp	r5, #0
   1b51e:	dc00      	bgt.n	1b522 <__aeabi_dsub+0x4e>
   1b520:	e105      	b.n	1b72e <__aeabi_dsub+0x25a>
   1b522:	2800      	cmp	r0, #0
   1b524:	d110      	bne.n	1b548 <__aeabi_dsub+0x74>
   1b526:	000b      	movs	r3, r1
   1b528:	4313      	orrs	r3, r2
   1b52a:	d100      	bne.n	1b52e <__aeabi_dsub+0x5a>
   1b52c:	e0d7      	b.n	1b6de <__aeabi_dsub+0x20a>
   1b52e:	1e6b      	subs	r3, r5, #1
   1b530:	2b00      	cmp	r3, #0
   1b532:	d000      	beq.n	1b536 <__aeabi_dsub+0x62>
   1b534:	e14b      	b.n	1b7ce <__aeabi_dsub+0x2fa>
   1b536:	4653      	mov	r3, sl
   1b538:	1a9f      	subs	r7, r3, r2
   1b53a:	45ba      	cmp	sl, r7
   1b53c:	4180      	sbcs	r0, r0
   1b53e:	1a64      	subs	r4, r4, r1
   1b540:	4240      	negs	r0, r0
   1b542:	1a24      	subs	r4, r4, r0
   1b544:	2601      	movs	r6, #1
   1b546:	e01e      	b.n	1b586 <__aeabi_dsub+0xb2>
   1b548:	4bb3      	ldr	r3, [pc, #716]	; (1b818 <__aeabi_dsub+0x344>)
   1b54a:	429e      	cmp	r6, r3
   1b54c:	d048      	beq.n	1b5e0 <__aeabi_dsub+0x10c>
   1b54e:	2380      	movs	r3, #128	; 0x80
   1b550:	041b      	lsls	r3, r3, #16
   1b552:	4319      	orrs	r1, r3
   1b554:	2d38      	cmp	r5, #56	; 0x38
   1b556:	dd00      	ble.n	1b55a <__aeabi_dsub+0x86>
   1b558:	e119      	b.n	1b78e <__aeabi_dsub+0x2ba>
   1b55a:	2d1f      	cmp	r5, #31
   1b55c:	dd00      	ble.n	1b560 <__aeabi_dsub+0x8c>
   1b55e:	e14c      	b.n	1b7fa <__aeabi_dsub+0x326>
   1b560:	2320      	movs	r3, #32
   1b562:	000f      	movs	r7, r1
   1b564:	1b5b      	subs	r3, r3, r5
   1b566:	0010      	movs	r0, r2
   1b568:	409a      	lsls	r2, r3
   1b56a:	409f      	lsls	r7, r3
   1b56c:	40e8      	lsrs	r0, r5
   1b56e:	1e53      	subs	r3, r2, #1
   1b570:	419a      	sbcs	r2, r3
   1b572:	40e9      	lsrs	r1, r5
   1b574:	4307      	orrs	r7, r0
   1b576:	4317      	orrs	r7, r2
   1b578:	4653      	mov	r3, sl
   1b57a:	1bdf      	subs	r7, r3, r7
   1b57c:	1a61      	subs	r1, r4, r1
   1b57e:	45ba      	cmp	sl, r7
   1b580:	41a4      	sbcs	r4, r4
   1b582:	4264      	negs	r4, r4
   1b584:	1b0c      	subs	r4, r1, r4
   1b586:	0223      	lsls	r3, r4, #8
   1b588:	d400      	bmi.n	1b58c <__aeabi_dsub+0xb8>
   1b58a:	e0c5      	b.n	1b718 <__aeabi_dsub+0x244>
   1b58c:	0264      	lsls	r4, r4, #9
   1b58e:	0a65      	lsrs	r5, r4, #9
   1b590:	2d00      	cmp	r5, #0
   1b592:	d100      	bne.n	1b596 <__aeabi_dsub+0xc2>
   1b594:	e0f6      	b.n	1b784 <__aeabi_dsub+0x2b0>
   1b596:	0028      	movs	r0, r5
   1b598:	f7fe fd52 	bl	1a040 <__clzsi2>
   1b59c:	0003      	movs	r3, r0
   1b59e:	3b08      	subs	r3, #8
   1b5a0:	2b1f      	cmp	r3, #31
   1b5a2:	dd00      	ble.n	1b5a6 <__aeabi_dsub+0xd2>
   1b5a4:	e0e9      	b.n	1b77a <__aeabi_dsub+0x2a6>
   1b5a6:	2220      	movs	r2, #32
   1b5a8:	003c      	movs	r4, r7
   1b5aa:	1ad2      	subs	r2, r2, r3
   1b5ac:	409d      	lsls	r5, r3
   1b5ae:	40d4      	lsrs	r4, r2
   1b5b0:	409f      	lsls	r7, r3
   1b5b2:	4325      	orrs	r5, r4
   1b5b4:	429e      	cmp	r6, r3
   1b5b6:	dd00      	ble.n	1b5ba <__aeabi_dsub+0xe6>
   1b5b8:	e0db      	b.n	1b772 <__aeabi_dsub+0x29e>
   1b5ba:	1b9e      	subs	r6, r3, r6
   1b5bc:	1c73      	adds	r3, r6, #1
   1b5be:	2b1f      	cmp	r3, #31
   1b5c0:	dd00      	ble.n	1b5c4 <__aeabi_dsub+0xf0>
   1b5c2:	e10a      	b.n	1b7da <__aeabi_dsub+0x306>
   1b5c4:	2220      	movs	r2, #32
   1b5c6:	0038      	movs	r0, r7
   1b5c8:	1ad2      	subs	r2, r2, r3
   1b5ca:	0029      	movs	r1, r5
   1b5cc:	4097      	lsls	r7, r2
   1b5ce:	002c      	movs	r4, r5
   1b5d0:	4091      	lsls	r1, r2
   1b5d2:	40d8      	lsrs	r0, r3
   1b5d4:	1e7a      	subs	r2, r7, #1
   1b5d6:	4197      	sbcs	r7, r2
   1b5d8:	40dc      	lsrs	r4, r3
   1b5da:	2600      	movs	r6, #0
   1b5dc:	4301      	orrs	r1, r0
   1b5de:	430f      	orrs	r7, r1
   1b5e0:	077b      	lsls	r3, r7, #29
   1b5e2:	d009      	beq.n	1b5f8 <__aeabi_dsub+0x124>
   1b5e4:	230f      	movs	r3, #15
   1b5e6:	403b      	ands	r3, r7
   1b5e8:	2b04      	cmp	r3, #4
   1b5ea:	d005      	beq.n	1b5f8 <__aeabi_dsub+0x124>
   1b5ec:	1d3b      	adds	r3, r7, #4
   1b5ee:	42bb      	cmp	r3, r7
   1b5f0:	41bf      	sbcs	r7, r7
   1b5f2:	427f      	negs	r7, r7
   1b5f4:	19e4      	adds	r4, r4, r7
   1b5f6:	001f      	movs	r7, r3
   1b5f8:	0223      	lsls	r3, r4, #8
   1b5fa:	d525      	bpl.n	1b648 <__aeabi_dsub+0x174>
   1b5fc:	4b86      	ldr	r3, [pc, #536]	; (1b818 <__aeabi_dsub+0x344>)
   1b5fe:	3601      	adds	r6, #1
   1b600:	429e      	cmp	r6, r3
   1b602:	d100      	bne.n	1b606 <__aeabi_dsub+0x132>
   1b604:	e0af      	b.n	1b766 <__aeabi_dsub+0x292>
   1b606:	4b85      	ldr	r3, [pc, #532]	; (1b81c <__aeabi_dsub+0x348>)
   1b608:	2501      	movs	r5, #1
   1b60a:	401c      	ands	r4, r3
   1b60c:	4643      	mov	r3, r8
   1b60e:	0762      	lsls	r2, r4, #29
   1b610:	08ff      	lsrs	r7, r7, #3
   1b612:	0264      	lsls	r4, r4, #9
   1b614:	0576      	lsls	r6, r6, #21
   1b616:	4317      	orrs	r7, r2
   1b618:	0b24      	lsrs	r4, r4, #12
   1b61a:	0d76      	lsrs	r6, r6, #21
   1b61c:	401d      	ands	r5, r3
   1b61e:	2100      	movs	r1, #0
   1b620:	0324      	lsls	r4, r4, #12
   1b622:	0b23      	lsrs	r3, r4, #12
   1b624:	0d0c      	lsrs	r4, r1, #20
   1b626:	4a7e      	ldr	r2, [pc, #504]	; (1b820 <__aeabi_dsub+0x34c>)
   1b628:	0524      	lsls	r4, r4, #20
   1b62a:	431c      	orrs	r4, r3
   1b62c:	4014      	ands	r4, r2
   1b62e:	0533      	lsls	r3, r6, #20
   1b630:	4323      	orrs	r3, r4
   1b632:	005b      	lsls	r3, r3, #1
   1b634:	07ed      	lsls	r5, r5, #31
   1b636:	085b      	lsrs	r3, r3, #1
   1b638:	432b      	orrs	r3, r5
   1b63a:	0038      	movs	r0, r7
   1b63c:	0019      	movs	r1, r3
   1b63e:	bc1c      	pop	{r2, r3, r4}
   1b640:	4690      	mov	r8, r2
   1b642:	4699      	mov	r9, r3
   1b644:	46a2      	mov	sl, r4
   1b646:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1b648:	2501      	movs	r5, #1
   1b64a:	4643      	mov	r3, r8
   1b64c:	0762      	lsls	r2, r4, #29
   1b64e:	08ff      	lsrs	r7, r7, #3
   1b650:	4317      	orrs	r7, r2
   1b652:	08e4      	lsrs	r4, r4, #3
   1b654:	401d      	ands	r5, r3
   1b656:	4b70      	ldr	r3, [pc, #448]	; (1b818 <__aeabi_dsub+0x344>)
   1b658:	429e      	cmp	r6, r3
   1b65a:	d036      	beq.n	1b6ca <__aeabi_dsub+0x1f6>
   1b65c:	0324      	lsls	r4, r4, #12
   1b65e:	0576      	lsls	r6, r6, #21
   1b660:	0b24      	lsrs	r4, r4, #12
   1b662:	0d76      	lsrs	r6, r6, #21
   1b664:	e7db      	b.n	1b61e <__aeabi_dsub+0x14a>
   1b666:	4663      	mov	r3, ip
   1b668:	1af3      	subs	r3, r6, r3
   1b66a:	2b00      	cmp	r3, #0
   1b66c:	dc00      	bgt.n	1b670 <__aeabi_dsub+0x19c>
   1b66e:	e094      	b.n	1b79a <__aeabi_dsub+0x2c6>
   1b670:	4660      	mov	r0, ip
   1b672:	2800      	cmp	r0, #0
   1b674:	d035      	beq.n	1b6e2 <__aeabi_dsub+0x20e>
   1b676:	4868      	ldr	r0, [pc, #416]	; (1b818 <__aeabi_dsub+0x344>)
   1b678:	4286      	cmp	r6, r0
   1b67a:	d0b1      	beq.n	1b5e0 <__aeabi_dsub+0x10c>
   1b67c:	2780      	movs	r7, #128	; 0x80
   1b67e:	043f      	lsls	r7, r7, #16
   1b680:	4339      	orrs	r1, r7
   1b682:	2b38      	cmp	r3, #56	; 0x38
   1b684:	dc00      	bgt.n	1b688 <__aeabi_dsub+0x1b4>
   1b686:	e0fd      	b.n	1b884 <__aeabi_dsub+0x3b0>
   1b688:	430a      	orrs	r2, r1
   1b68a:	0017      	movs	r7, r2
   1b68c:	2100      	movs	r1, #0
   1b68e:	1e7a      	subs	r2, r7, #1
   1b690:	4197      	sbcs	r7, r2
   1b692:	4457      	add	r7, sl
   1b694:	4557      	cmp	r7, sl
   1b696:	4180      	sbcs	r0, r0
   1b698:	1909      	adds	r1, r1, r4
   1b69a:	4244      	negs	r4, r0
   1b69c:	190c      	adds	r4, r1, r4
   1b69e:	0223      	lsls	r3, r4, #8
   1b6a0:	d53a      	bpl.n	1b718 <__aeabi_dsub+0x244>
   1b6a2:	4b5d      	ldr	r3, [pc, #372]	; (1b818 <__aeabi_dsub+0x344>)
   1b6a4:	3601      	adds	r6, #1
   1b6a6:	429e      	cmp	r6, r3
   1b6a8:	d100      	bne.n	1b6ac <__aeabi_dsub+0x1d8>
   1b6aa:	e14b      	b.n	1b944 <__aeabi_dsub+0x470>
   1b6ac:	2201      	movs	r2, #1
   1b6ae:	4b5b      	ldr	r3, [pc, #364]	; (1b81c <__aeabi_dsub+0x348>)
   1b6b0:	401c      	ands	r4, r3
   1b6b2:	087b      	lsrs	r3, r7, #1
   1b6b4:	4017      	ands	r7, r2
   1b6b6:	431f      	orrs	r7, r3
   1b6b8:	07e2      	lsls	r2, r4, #31
   1b6ba:	4317      	orrs	r7, r2
   1b6bc:	0864      	lsrs	r4, r4, #1
   1b6be:	e78f      	b.n	1b5e0 <__aeabi_dsub+0x10c>
   1b6c0:	0008      	movs	r0, r1
   1b6c2:	4310      	orrs	r0, r2
   1b6c4:	d000      	beq.n	1b6c8 <__aeabi_dsub+0x1f4>
   1b6c6:	e724      	b.n	1b512 <__aeabi_dsub+0x3e>
   1b6c8:	e721      	b.n	1b50e <__aeabi_dsub+0x3a>
   1b6ca:	0023      	movs	r3, r4
   1b6cc:	433b      	orrs	r3, r7
   1b6ce:	d100      	bne.n	1b6d2 <__aeabi_dsub+0x1fe>
   1b6d0:	e1b9      	b.n	1ba46 <__aeabi_dsub+0x572>
   1b6d2:	2280      	movs	r2, #128	; 0x80
   1b6d4:	0312      	lsls	r2, r2, #12
   1b6d6:	4314      	orrs	r4, r2
   1b6d8:	0324      	lsls	r4, r4, #12
   1b6da:	0b24      	lsrs	r4, r4, #12
   1b6dc:	e79f      	b.n	1b61e <__aeabi_dsub+0x14a>
   1b6de:	002e      	movs	r6, r5
   1b6e0:	e77e      	b.n	1b5e0 <__aeabi_dsub+0x10c>
   1b6e2:	0008      	movs	r0, r1
   1b6e4:	4310      	orrs	r0, r2
   1b6e6:	d100      	bne.n	1b6ea <__aeabi_dsub+0x216>
   1b6e8:	e0ca      	b.n	1b880 <__aeabi_dsub+0x3ac>
   1b6ea:	1e58      	subs	r0, r3, #1
   1b6ec:	4684      	mov	ip, r0
   1b6ee:	2800      	cmp	r0, #0
   1b6f0:	d000      	beq.n	1b6f4 <__aeabi_dsub+0x220>
   1b6f2:	e0e7      	b.n	1b8c4 <__aeabi_dsub+0x3f0>
   1b6f4:	4452      	add	r2, sl
   1b6f6:	4552      	cmp	r2, sl
   1b6f8:	4180      	sbcs	r0, r0
   1b6fa:	1864      	adds	r4, r4, r1
   1b6fc:	4240      	negs	r0, r0
   1b6fe:	1824      	adds	r4, r4, r0
   1b700:	0017      	movs	r7, r2
   1b702:	2601      	movs	r6, #1
   1b704:	0223      	lsls	r3, r4, #8
   1b706:	d507      	bpl.n	1b718 <__aeabi_dsub+0x244>
   1b708:	2602      	movs	r6, #2
   1b70a:	e7cf      	b.n	1b6ac <__aeabi_dsub+0x1d8>
   1b70c:	4664      	mov	r4, ip
   1b70e:	432c      	orrs	r4, r5
   1b710:	d100      	bne.n	1b714 <__aeabi_dsub+0x240>
   1b712:	e1b3      	b.n	1ba7c <__aeabi_dsub+0x5a8>
   1b714:	002c      	movs	r4, r5
   1b716:	4667      	mov	r7, ip
   1b718:	077b      	lsls	r3, r7, #29
   1b71a:	d000      	beq.n	1b71e <__aeabi_dsub+0x24a>
   1b71c:	e762      	b.n	1b5e4 <__aeabi_dsub+0x110>
   1b71e:	0763      	lsls	r3, r4, #29
   1b720:	08ff      	lsrs	r7, r7, #3
   1b722:	431f      	orrs	r7, r3
   1b724:	2501      	movs	r5, #1
   1b726:	4643      	mov	r3, r8
   1b728:	08e4      	lsrs	r4, r4, #3
   1b72a:	401d      	ands	r5, r3
   1b72c:	e793      	b.n	1b656 <__aeabi_dsub+0x182>
   1b72e:	2d00      	cmp	r5, #0
   1b730:	d178      	bne.n	1b824 <__aeabi_dsub+0x350>
   1b732:	1c75      	adds	r5, r6, #1
   1b734:	056d      	lsls	r5, r5, #21
   1b736:	0d6d      	lsrs	r5, r5, #21
   1b738:	2d01      	cmp	r5, #1
   1b73a:	dc00      	bgt.n	1b73e <__aeabi_dsub+0x26a>
   1b73c:	e0f2      	b.n	1b924 <__aeabi_dsub+0x450>
   1b73e:	4650      	mov	r0, sl
   1b740:	1a80      	subs	r0, r0, r2
   1b742:	4582      	cmp	sl, r0
   1b744:	41bf      	sbcs	r7, r7
   1b746:	1a65      	subs	r5, r4, r1
   1b748:	427f      	negs	r7, r7
   1b74a:	1bed      	subs	r5, r5, r7
   1b74c:	4684      	mov	ip, r0
   1b74e:	0228      	lsls	r0, r5, #8
   1b750:	d400      	bmi.n	1b754 <__aeabi_dsub+0x280>
   1b752:	e08c      	b.n	1b86e <__aeabi_dsub+0x39a>
   1b754:	4650      	mov	r0, sl
   1b756:	1a17      	subs	r7, r2, r0
   1b758:	42ba      	cmp	r2, r7
   1b75a:	4192      	sbcs	r2, r2
   1b75c:	1b0c      	subs	r4, r1, r4
   1b75e:	4255      	negs	r5, r2
   1b760:	1b65      	subs	r5, r4, r5
   1b762:	4698      	mov	r8, r3
   1b764:	e714      	b.n	1b590 <__aeabi_dsub+0xbc>
   1b766:	2501      	movs	r5, #1
   1b768:	4643      	mov	r3, r8
   1b76a:	2400      	movs	r4, #0
   1b76c:	401d      	ands	r5, r3
   1b76e:	2700      	movs	r7, #0
   1b770:	e755      	b.n	1b61e <__aeabi_dsub+0x14a>
   1b772:	4c2a      	ldr	r4, [pc, #168]	; (1b81c <__aeabi_dsub+0x348>)
   1b774:	1af6      	subs	r6, r6, r3
   1b776:	402c      	ands	r4, r5
   1b778:	e732      	b.n	1b5e0 <__aeabi_dsub+0x10c>
   1b77a:	003d      	movs	r5, r7
   1b77c:	3828      	subs	r0, #40	; 0x28
   1b77e:	4085      	lsls	r5, r0
   1b780:	2700      	movs	r7, #0
   1b782:	e717      	b.n	1b5b4 <__aeabi_dsub+0xe0>
   1b784:	0038      	movs	r0, r7
   1b786:	f7fe fc5b 	bl	1a040 <__clzsi2>
   1b78a:	3020      	adds	r0, #32
   1b78c:	e706      	b.n	1b59c <__aeabi_dsub+0xc8>
   1b78e:	430a      	orrs	r2, r1
   1b790:	0017      	movs	r7, r2
   1b792:	2100      	movs	r1, #0
   1b794:	1e7a      	subs	r2, r7, #1
   1b796:	4197      	sbcs	r7, r2
   1b798:	e6ee      	b.n	1b578 <__aeabi_dsub+0xa4>
   1b79a:	2b00      	cmp	r3, #0
   1b79c:	d000      	beq.n	1b7a0 <__aeabi_dsub+0x2cc>
   1b79e:	e0e5      	b.n	1b96c <__aeabi_dsub+0x498>
   1b7a0:	1c73      	adds	r3, r6, #1
   1b7a2:	469c      	mov	ip, r3
   1b7a4:	055b      	lsls	r3, r3, #21
   1b7a6:	0d5b      	lsrs	r3, r3, #21
   1b7a8:	2b01      	cmp	r3, #1
   1b7aa:	dc00      	bgt.n	1b7ae <__aeabi_dsub+0x2da>
   1b7ac:	e09f      	b.n	1b8ee <__aeabi_dsub+0x41a>
   1b7ae:	4b1a      	ldr	r3, [pc, #104]	; (1b818 <__aeabi_dsub+0x344>)
   1b7b0:	459c      	cmp	ip, r3
   1b7b2:	d100      	bne.n	1b7b6 <__aeabi_dsub+0x2e2>
   1b7b4:	e0c5      	b.n	1b942 <__aeabi_dsub+0x46e>
   1b7b6:	4452      	add	r2, sl
   1b7b8:	4552      	cmp	r2, sl
   1b7ba:	4180      	sbcs	r0, r0
   1b7bc:	1864      	adds	r4, r4, r1
   1b7be:	4240      	negs	r0, r0
   1b7c0:	1824      	adds	r4, r4, r0
   1b7c2:	07e7      	lsls	r7, r4, #31
   1b7c4:	0852      	lsrs	r2, r2, #1
   1b7c6:	4317      	orrs	r7, r2
   1b7c8:	0864      	lsrs	r4, r4, #1
   1b7ca:	4666      	mov	r6, ip
   1b7cc:	e708      	b.n	1b5e0 <__aeabi_dsub+0x10c>
   1b7ce:	4812      	ldr	r0, [pc, #72]	; (1b818 <__aeabi_dsub+0x344>)
   1b7d0:	4285      	cmp	r5, r0
   1b7d2:	d100      	bne.n	1b7d6 <__aeabi_dsub+0x302>
   1b7d4:	e085      	b.n	1b8e2 <__aeabi_dsub+0x40e>
   1b7d6:	001d      	movs	r5, r3
   1b7d8:	e6bc      	b.n	1b554 <__aeabi_dsub+0x80>
   1b7da:	0029      	movs	r1, r5
   1b7dc:	3e1f      	subs	r6, #31
   1b7de:	40f1      	lsrs	r1, r6
   1b7e0:	2b20      	cmp	r3, #32
   1b7e2:	d100      	bne.n	1b7e6 <__aeabi_dsub+0x312>
   1b7e4:	e07f      	b.n	1b8e6 <__aeabi_dsub+0x412>
   1b7e6:	2240      	movs	r2, #64	; 0x40
   1b7e8:	1ad3      	subs	r3, r2, r3
   1b7ea:	409d      	lsls	r5, r3
   1b7ec:	432f      	orrs	r7, r5
   1b7ee:	1e7d      	subs	r5, r7, #1
   1b7f0:	41af      	sbcs	r7, r5
   1b7f2:	2400      	movs	r4, #0
   1b7f4:	430f      	orrs	r7, r1
   1b7f6:	2600      	movs	r6, #0
   1b7f8:	e78e      	b.n	1b718 <__aeabi_dsub+0x244>
   1b7fa:	002b      	movs	r3, r5
   1b7fc:	000f      	movs	r7, r1
   1b7fe:	3b20      	subs	r3, #32
   1b800:	40df      	lsrs	r7, r3
   1b802:	2d20      	cmp	r5, #32
   1b804:	d071      	beq.n	1b8ea <__aeabi_dsub+0x416>
   1b806:	2340      	movs	r3, #64	; 0x40
   1b808:	1b5d      	subs	r5, r3, r5
   1b80a:	40a9      	lsls	r1, r5
   1b80c:	430a      	orrs	r2, r1
   1b80e:	1e51      	subs	r1, r2, #1
   1b810:	418a      	sbcs	r2, r1
   1b812:	2100      	movs	r1, #0
   1b814:	4317      	orrs	r7, r2
   1b816:	e6af      	b.n	1b578 <__aeabi_dsub+0xa4>
   1b818:	000007ff 	.word	0x000007ff
   1b81c:	ff7fffff 	.word	0xff7fffff
   1b820:	800fffff 	.word	0x800fffff
   1b824:	2e00      	cmp	r6, #0
   1b826:	d03e      	beq.n	1b8a6 <__aeabi_dsub+0x3d2>
   1b828:	4eb3      	ldr	r6, [pc, #716]	; (1baf8 <__aeabi_dsub+0x624>)
   1b82a:	45b4      	cmp	ip, r6
   1b82c:	d045      	beq.n	1b8ba <__aeabi_dsub+0x3e6>
   1b82e:	2680      	movs	r6, #128	; 0x80
   1b830:	0436      	lsls	r6, r6, #16
   1b832:	426d      	negs	r5, r5
   1b834:	4334      	orrs	r4, r6
   1b836:	2d38      	cmp	r5, #56	; 0x38
   1b838:	dd00      	ble.n	1b83c <__aeabi_dsub+0x368>
   1b83a:	e0a8      	b.n	1b98e <__aeabi_dsub+0x4ba>
   1b83c:	2d1f      	cmp	r5, #31
   1b83e:	dd00      	ble.n	1b842 <__aeabi_dsub+0x36e>
   1b840:	e11f      	b.n	1ba82 <__aeabi_dsub+0x5ae>
   1b842:	2620      	movs	r6, #32
   1b844:	0027      	movs	r7, r4
   1b846:	4650      	mov	r0, sl
   1b848:	1b76      	subs	r6, r6, r5
   1b84a:	40b7      	lsls	r7, r6
   1b84c:	40e8      	lsrs	r0, r5
   1b84e:	4307      	orrs	r7, r0
   1b850:	4650      	mov	r0, sl
   1b852:	40b0      	lsls	r0, r6
   1b854:	1e46      	subs	r6, r0, #1
   1b856:	41b0      	sbcs	r0, r6
   1b858:	40ec      	lsrs	r4, r5
   1b85a:	4338      	orrs	r0, r7
   1b85c:	1a17      	subs	r7, r2, r0
   1b85e:	42ba      	cmp	r2, r7
   1b860:	4192      	sbcs	r2, r2
   1b862:	1b0c      	subs	r4, r1, r4
   1b864:	4252      	negs	r2, r2
   1b866:	1aa4      	subs	r4, r4, r2
   1b868:	4666      	mov	r6, ip
   1b86a:	4698      	mov	r8, r3
   1b86c:	e68b      	b.n	1b586 <__aeabi_dsub+0xb2>
   1b86e:	4664      	mov	r4, ip
   1b870:	4667      	mov	r7, ip
   1b872:	432c      	orrs	r4, r5
   1b874:	d000      	beq.n	1b878 <__aeabi_dsub+0x3a4>
   1b876:	e68b      	b.n	1b590 <__aeabi_dsub+0xbc>
   1b878:	2500      	movs	r5, #0
   1b87a:	2600      	movs	r6, #0
   1b87c:	2700      	movs	r7, #0
   1b87e:	e6ea      	b.n	1b656 <__aeabi_dsub+0x182>
   1b880:	001e      	movs	r6, r3
   1b882:	e6ad      	b.n	1b5e0 <__aeabi_dsub+0x10c>
   1b884:	2b1f      	cmp	r3, #31
   1b886:	dc60      	bgt.n	1b94a <__aeabi_dsub+0x476>
   1b888:	2720      	movs	r7, #32
   1b88a:	1af8      	subs	r0, r7, r3
   1b88c:	000f      	movs	r7, r1
   1b88e:	4684      	mov	ip, r0
   1b890:	4087      	lsls	r7, r0
   1b892:	0010      	movs	r0, r2
   1b894:	40d8      	lsrs	r0, r3
   1b896:	4307      	orrs	r7, r0
   1b898:	4660      	mov	r0, ip
   1b89a:	4082      	lsls	r2, r0
   1b89c:	1e50      	subs	r0, r2, #1
   1b89e:	4182      	sbcs	r2, r0
   1b8a0:	40d9      	lsrs	r1, r3
   1b8a2:	4317      	orrs	r7, r2
   1b8a4:	e6f5      	b.n	1b692 <__aeabi_dsub+0x1be>
   1b8a6:	0026      	movs	r6, r4
   1b8a8:	4650      	mov	r0, sl
   1b8aa:	4306      	orrs	r6, r0
   1b8ac:	d005      	beq.n	1b8ba <__aeabi_dsub+0x3e6>
   1b8ae:	43ed      	mvns	r5, r5
   1b8b0:	2d00      	cmp	r5, #0
   1b8b2:	d0d3      	beq.n	1b85c <__aeabi_dsub+0x388>
   1b8b4:	4e90      	ldr	r6, [pc, #576]	; (1baf8 <__aeabi_dsub+0x624>)
   1b8b6:	45b4      	cmp	ip, r6
   1b8b8:	d1bd      	bne.n	1b836 <__aeabi_dsub+0x362>
   1b8ba:	000c      	movs	r4, r1
   1b8bc:	0017      	movs	r7, r2
   1b8be:	4666      	mov	r6, ip
   1b8c0:	4698      	mov	r8, r3
   1b8c2:	e68d      	b.n	1b5e0 <__aeabi_dsub+0x10c>
   1b8c4:	488c      	ldr	r0, [pc, #560]	; (1baf8 <__aeabi_dsub+0x624>)
   1b8c6:	4283      	cmp	r3, r0
   1b8c8:	d00b      	beq.n	1b8e2 <__aeabi_dsub+0x40e>
   1b8ca:	4663      	mov	r3, ip
   1b8cc:	e6d9      	b.n	1b682 <__aeabi_dsub+0x1ae>
   1b8ce:	2d00      	cmp	r5, #0
   1b8d0:	d000      	beq.n	1b8d4 <__aeabi_dsub+0x400>
   1b8d2:	e096      	b.n	1ba02 <__aeabi_dsub+0x52e>
   1b8d4:	0008      	movs	r0, r1
   1b8d6:	4310      	orrs	r0, r2
   1b8d8:	d100      	bne.n	1b8dc <__aeabi_dsub+0x408>
   1b8da:	e0e2      	b.n	1baa2 <__aeabi_dsub+0x5ce>
   1b8dc:	000c      	movs	r4, r1
   1b8de:	0017      	movs	r7, r2
   1b8e0:	4698      	mov	r8, r3
   1b8e2:	4e85      	ldr	r6, [pc, #532]	; (1baf8 <__aeabi_dsub+0x624>)
   1b8e4:	e67c      	b.n	1b5e0 <__aeabi_dsub+0x10c>
   1b8e6:	2500      	movs	r5, #0
   1b8e8:	e780      	b.n	1b7ec <__aeabi_dsub+0x318>
   1b8ea:	2100      	movs	r1, #0
   1b8ec:	e78e      	b.n	1b80c <__aeabi_dsub+0x338>
   1b8ee:	0023      	movs	r3, r4
   1b8f0:	4650      	mov	r0, sl
   1b8f2:	4303      	orrs	r3, r0
   1b8f4:	2e00      	cmp	r6, #0
   1b8f6:	d000      	beq.n	1b8fa <__aeabi_dsub+0x426>
   1b8f8:	e0a8      	b.n	1ba4c <__aeabi_dsub+0x578>
   1b8fa:	2b00      	cmp	r3, #0
   1b8fc:	d100      	bne.n	1b900 <__aeabi_dsub+0x42c>
   1b8fe:	e0de      	b.n	1babe <__aeabi_dsub+0x5ea>
   1b900:	000b      	movs	r3, r1
   1b902:	4313      	orrs	r3, r2
   1b904:	d100      	bne.n	1b908 <__aeabi_dsub+0x434>
   1b906:	e66b      	b.n	1b5e0 <__aeabi_dsub+0x10c>
   1b908:	4452      	add	r2, sl
   1b90a:	4552      	cmp	r2, sl
   1b90c:	4180      	sbcs	r0, r0
   1b90e:	1864      	adds	r4, r4, r1
   1b910:	4240      	negs	r0, r0
   1b912:	1824      	adds	r4, r4, r0
   1b914:	0017      	movs	r7, r2
   1b916:	0223      	lsls	r3, r4, #8
   1b918:	d400      	bmi.n	1b91c <__aeabi_dsub+0x448>
   1b91a:	e6fd      	b.n	1b718 <__aeabi_dsub+0x244>
   1b91c:	4b77      	ldr	r3, [pc, #476]	; (1bafc <__aeabi_dsub+0x628>)
   1b91e:	4666      	mov	r6, ip
   1b920:	401c      	ands	r4, r3
   1b922:	e65d      	b.n	1b5e0 <__aeabi_dsub+0x10c>
   1b924:	0025      	movs	r5, r4
   1b926:	4650      	mov	r0, sl
   1b928:	4305      	orrs	r5, r0
   1b92a:	2e00      	cmp	r6, #0
   1b92c:	d1cf      	bne.n	1b8ce <__aeabi_dsub+0x3fa>
   1b92e:	2d00      	cmp	r5, #0
   1b930:	d14f      	bne.n	1b9d2 <__aeabi_dsub+0x4fe>
   1b932:	000c      	movs	r4, r1
   1b934:	4314      	orrs	r4, r2
   1b936:	d100      	bne.n	1b93a <__aeabi_dsub+0x466>
   1b938:	e0a0      	b.n	1ba7c <__aeabi_dsub+0x5a8>
   1b93a:	000c      	movs	r4, r1
   1b93c:	0017      	movs	r7, r2
   1b93e:	4698      	mov	r8, r3
   1b940:	e64e      	b.n	1b5e0 <__aeabi_dsub+0x10c>
   1b942:	4666      	mov	r6, ip
   1b944:	2400      	movs	r4, #0
   1b946:	2700      	movs	r7, #0
   1b948:	e685      	b.n	1b656 <__aeabi_dsub+0x182>
   1b94a:	001f      	movs	r7, r3
   1b94c:	0008      	movs	r0, r1
   1b94e:	3f20      	subs	r7, #32
   1b950:	40f8      	lsrs	r0, r7
   1b952:	0007      	movs	r7, r0
   1b954:	2b20      	cmp	r3, #32
   1b956:	d100      	bne.n	1b95a <__aeabi_dsub+0x486>
   1b958:	e08e      	b.n	1ba78 <__aeabi_dsub+0x5a4>
   1b95a:	2040      	movs	r0, #64	; 0x40
   1b95c:	1ac3      	subs	r3, r0, r3
   1b95e:	4099      	lsls	r1, r3
   1b960:	430a      	orrs	r2, r1
   1b962:	1e51      	subs	r1, r2, #1
   1b964:	418a      	sbcs	r2, r1
   1b966:	2100      	movs	r1, #0
   1b968:	4317      	orrs	r7, r2
   1b96a:	e692      	b.n	1b692 <__aeabi_dsub+0x1be>
   1b96c:	2e00      	cmp	r6, #0
   1b96e:	d114      	bne.n	1b99a <__aeabi_dsub+0x4c6>
   1b970:	0026      	movs	r6, r4
   1b972:	4650      	mov	r0, sl
   1b974:	4306      	orrs	r6, r0
   1b976:	d062      	beq.n	1ba3e <__aeabi_dsub+0x56a>
   1b978:	43db      	mvns	r3, r3
   1b97a:	2b00      	cmp	r3, #0
   1b97c:	d15c      	bne.n	1ba38 <__aeabi_dsub+0x564>
   1b97e:	1887      	adds	r7, r0, r2
   1b980:	4297      	cmp	r7, r2
   1b982:	4192      	sbcs	r2, r2
   1b984:	1864      	adds	r4, r4, r1
   1b986:	4252      	negs	r2, r2
   1b988:	18a4      	adds	r4, r4, r2
   1b98a:	4666      	mov	r6, ip
   1b98c:	e687      	b.n	1b69e <__aeabi_dsub+0x1ca>
   1b98e:	4650      	mov	r0, sl
   1b990:	4320      	orrs	r0, r4
   1b992:	1e44      	subs	r4, r0, #1
   1b994:	41a0      	sbcs	r0, r4
   1b996:	2400      	movs	r4, #0
   1b998:	e760      	b.n	1b85c <__aeabi_dsub+0x388>
   1b99a:	4e57      	ldr	r6, [pc, #348]	; (1baf8 <__aeabi_dsub+0x624>)
   1b99c:	45b4      	cmp	ip, r6
   1b99e:	d04e      	beq.n	1ba3e <__aeabi_dsub+0x56a>
   1b9a0:	2680      	movs	r6, #128	; 0x80
   1b9a2:	0436      	lsls	r6, r6, #16
   1b9a4:	425b      	negs	r3, r3
   1b9a6:	4334      	orrs	r4, r6
   1b9a8:	2b38      	cmp	r3, #56	; 0x38
   1b9aa:	dd00      	ble.n	1b9ae <__aeabi_dsub+0x4da>
   1b9ac:	e07f      	b.n	1baae <__aeabi_dsub+0x5da>
   1b9ae:	2b1f      	cmp	r3, #31
   1b9b0:	dd00      	ble.n	1b9b4 <__aeabi_dsub+0x4e0>
   1b9b2:	e08b      	b.n	1bacc <__aeabi_dsub+0x5f8>
   1b9b4:	2620      	movs	r6, #32
   1b9b6:	0027      	movs	r7, r4
   1b9b8:	4650      	mov	r0, sl
   1b9ba:	1af6      	subs	r6, r6, r3
   1b9bc:	40b7      	lsls	r7, r6
   1b9be:	40d8      	lsrs	r0, r3
   1b9c0:	4307      	orrs	r7, r0
   1b9c2:	4650      	mov	r0, sl
   1b9c4:	40b0      	lsls	r0, r6
   1b9c6:	1e46      	subs	r6, r0, #1
   1b9c8:	41b0      	sbcs	r0, r6
   1b9ca:	4307      	orrs	r7, r0
   1b9cc:	40dc      	lsrs	r4, r3
   1b9ce:	18bf      	adds	r7, r7, r2
   1b9d0:	e7d6      	b.n	1b980 <__aeabi_dsub+0x4ac>
   1b9d2:	000d      	movs	r5, r1
   1b9d4:	4315      	orrs	r5, r2
   1b9d6:	d100      	bne.n	1b9da <__aeabi_dsub+0x506>
   1b9d8:	e602      	b.n	1b5e0 <__aeabi_dsub+0x10c>
   1b9da:	4650      	mov	r0, sl
   1b9dc:	1a80      	subs	r0, r0, r2
   1b9de:	4582      	cmp	sl, r0
   1b9e0:	41bf      	sbcs	r7, r7
   1b9e2:	1a65      	subs	r5, r4, r1
   1b9e4:	427f      	negs	r7, r7
   1b9e6:	1bed      	subs	r5, r5, r7
   1b9e8:	4684      	mov	ip, r0
   1b9ea:	0228      	lsls	r0, r5, #8
   1b9ec:	d400      	bmi.n	1b9f0 <__aeabi_dsub+0x51c>
   1b9ee:	e68d      	b.n	1b70c <__aeabi_dsub+0x238>
   1b9f0:	4650      	mov	r0, sl
   1b9f2:	1a17      	subs	r7, r2, r0
   1b9f4:	42ba      	cmp	r2, r7
   1b9f6:	4192      	sbcs	r2, r2
   1b9f8:	1b0c      	subs	r4, r1, r4
   1b9fa:	4252      	negs	r2, r2
   1b9fc:	1aa4      	subs	r4, r4, r2
   1b9fe:	4698      	mov	r8, r3
   1ba00:	e5ee      	b.n	1b5e0 <__aeabi_dsub+0x10c>
   1ba02:	000d      	movs	r5, r1
   1ba04:	4315      	orrs	r5, r2
   1ba06:	d100      	bne.n	1ba0a <__aeabi_dsub+0x536>
   1ba08:	e76b      	b.n	1b8e2 <__aeabi_dsub+0x40e>
   1ba0a:	4650      	mov	r0, sl
   1ba0c:	0767      	lsls	r7, r4, #29
   1ba0e:	08c0      	lsrs	r0, r0, #3
   1ba10:	4307      	orrs	r7, r0
   1ba12:	2080      	movs	r0, #128	; 0x80
   1ba14:	08e4      	lsrs	r4, r4, #3
   1ba16:	0300      	lsls	r0, r0, #12
   1ba18:	4204      	tst	r4, r0
   1ba1a:	d007      	beq.n	1ba2c <__aeabi_dsub+0x558>
   1ba1c:	08cd      	lsrs	r5, r1, #3
   1ba1e:	4205      	tst	r5, r0
   1ba20:	d104      	bne.n	1ba2c <__aeabi_dsub+0x558>
   1ba22:	002c      	movs	r4, r5
   1ba24:	4698      	mov	r8, r3
   1ba26:	08d7      	lsrs	r7, r2, #3
   1ba28:	0749      	lsls	r1, r1, #29
   1ba2a:	430f      	orrs	r7, r1
   1ba2c:	0f7b      	lsrs	r3, r7, #29
   1ba2e:	00e4      	lsls	r4, r4, #3
   1ba30:	431c      	orrs	r4, r3
   1ba32:	00ff      	lsls	r7, r7, #3
   1ba34:	4e30      	ldr	r6, [pc, #192]	; (1baf8 <__aeabi_dsub+0x624>)
   1ba36:	e5d3      	b.n	1b5e0 <__aeabi_dsub+0x10c>
   1ba38:	4e2f      	ldr	r6, [pc, #188]	; (1baf8 <__aeabi_dsub+0x624>)
   1ba3a:	45b4      	cmp	ip, r6
   1ba3c:	d1b4      	bne.n	1b9a8 <__aeabi_dsub+0x4d4>
   1ba3e:	000c      	movs	r4, r1
   1ba40:	0017      	movs	r7, r2
   1ba42:	4666      	mov	r6, ip
   1ba44:	e5cc      	b.n	1b5e0 <__aeabi_dsub+0x10c>
   1ba46:	2700      	movs	r7, #0
   1ba48:	2400      	movs	r4, #0
   1ba4a:	e5e8      	b.n	1b61e <__aeabi_dsub+0x14a>
   1ba4c:	2b00      	cmp	r3, #0
   1ba4e:	d039      	beq.n	1bac4 <__aeabi_dsub+0x5f0>
   1ba50:	000b      	movs	r3, r1
   1ba52:	4313      	orrs	r3, r2
   1ba54:	d100      	bne.n	1ba58 <__aeabi_dsub+0x584>
   1ba56:	e744      	b.n	1b8e2 <__aeabi_dsub+0x40e>
   1ba58:	08c0      	lsrs	r0, r0, #3
   1ba5a:	0767      	lsls	r7, r4, #29
   1ba5c:	4307      	orrs	r7, r0
   1ba5e:	2080      	movs	r0, #128	; 0x80
   1ba60:	08e4      	lsrs	r4, r4, #3
   1ba62:	0300      	lsls	r0, r0, #12
   1ba64:	4204      	tst	r4, r0
   1ba66:	d0e1      	beq.n	1ba2c <__aeabi_dsub+0x558>
   1ba68:	08cb      	lsrs	r3, r1, #3
   1ba6a:	4203      	tst	r3, r0
   1ba6c:	d1de      	bne.n	1ba2c <__aeabi_dsub+0x558>
   1ba6e:	08d7      	lsrs	r7, r2, #3
   1ba70:	0749      	lsls	r1, r1, #29
   1ba72:	430f      	orrs	r7, r1
   1ba74:	001c      	movs	r4, r3
   1ba76:	e7d9      	b.n	1ba2c <__aeabi_dsub+0x558>
   1ba78:	2100      	movs	r1, #0
   1ba7a:	e771      	b.n	1b960 <__aeabi_dsub+0x48c>
   1ba7c:	2500      	movs	r5, #0
   1ba7e:	2700      	movs	r7, #0
   1ba80:	e5e9      	b.n	1b656 <__aeabi_dsub+0x182>
   1ba82:	002e      	movs	r6, r5
   1ba84:	0027      	movs	r7, r4
   1ba86:	3e20      	subs	r6, #32
   1ba88:	40f7      	lsrs	r7, r6
   1ba8a:	2d20      	cmp	r5, #32
   1ba8c:	d02f      	beq.n	1baee <__aeabi_dsub+0x61a>
   1ba8e:	2640      	movs	r6, #64	; 0x40
   1ba90:	1b75      	subs	r5, r6, r5
   1ba92:	40ac      	lsls	r4, r5
   1ba94:	4650      	mov	r0, sl
   1ba96:	4320      	orrs	r0, r4
   1ba98:	1e44      	subs	r4, r0, #1
   1ba9a:	41a0      	sbcs	r0, r4
   1ba9c:	2400      	movs	r4, #0
   1ba9e:	4338      	orrs	r0, r7
   1baa0:	e6dc      	b.n	1b85c <__aeabi_dsub+0x388>
   1baa2:	2480      	movs	r4, #128	; 0x80
   1baa4:	2500      	movs	r5, #0
   1baa6:	0324      	lsls	r4, r4, #12
   1baa8:	4e13      	ldr	r6, [pc, #76]	; (1baf8 <__aeabi_dsub+0x624>)
   1baaa:	2700      	movs	r7, #0
   1baac:	e5d3      	b.n	1b656 <__aeabi_dsub+0x182>
   1baae:	4650      	mov	r0, sl
   1bab0:	4320      	orrs	r0, r4
   1bab2:	0007      	movs	r7, r0
   1bab4:	1e78      	subs	r0, r7, #1
   1bab6:	4187      	sbcs	r7, r0
   1bab8:	2400      	movs	r4, #0
   1baba:	18bf      	adds	r7, r7, r2
   1babc:	e760      	b.n	1b980 <__aeabi_dsub+0x4ac>
   1babe:	000c      	movs	r4, r1
   1bac0:	0017      	movs	r7, r2
   1bac2:	e58d      	b.n	1b5e0 <__aeabi_dsub+0x10c>
   1bac4:	000c      	movs	r4, r1
   1bac6:	0017      	movs	r7, r2
   1bac8:	4e0b      	ldr	r6, [pc, #44]	; (1baf8 <__aeabi_dsub+0x624>)
   1baca:	e589      	b.n	1b5e0 <__aeabi_dsub+0x10c>
   1bacc:	001e      	movs	r6, r3
   1bace:	0027      	movs	r7, r4
   1bad0:	3e20      	subs	r6, #32
   1bad2:	40f7      	lsrs	r7, r6
   1bad4:	2b20      	cmp	r3, #32
   1bad6:	d00c      	beq.n	1baf2 <__aeabi_dsub+0x61e>
   1bad8:	2640      	movs	r6, #64	; 0x40
   1bada:	1af3      	subs	r3, r6, r3
   1badc:	409c      	lsls	r4, r3
   1bade:	4650      	mov	r0, sl
   1bae0:	4320      	orrs	r0, r4
   1bae2:	1e44      	subs	r4, r0, #1
   1bae4:	41a0      	sbcs	r0, r4
   1bae6:	4307      	orrs	r7, r0
   1bae8:	2400      	movs	r4, #0
   1baea:	18bf      	adds	r7, r7, r2
   1baec:	e748      	b.n	1b980 <__aeabi_dsub+0x4ac>
   1baee:	2400      	movs	r4, #0
   1baf0:	e7d0      	b.n	1ba94 <__aeabi_dsub+0x5c0>
   1baf2:	2400      	movs	r4, #0
   1baf4:	e7f3      	b.n	1bade <__aeabi_dsub+0x60a>
   1baf6:	46c0      	nop			; (mov r8, r8)
   1baf8:	000007ff 	.word	0x000007ff
   1bafc:	ff7fffff 	.word	0xff7fffff

0001bb00 <__aeabi_d2iz>:
   1bb00:	b530      	push	{r4, r5, lr}
   1bb02:	4d13      	ldr	r5, [pc, #76]	; (1bb50 <__aeabi_d2iz+0x50>)
   1bb04:	030a      	lsls	r2, r1, #12
   1bb06:	004b      	lsls	r3, r1, #1
   1bb08:	0b12      	lsrs	r2, r2, #12
   1bb0a:	0d5b      	lsrs	r3, r3, #21
   1bb0c:	0fc9      	lsrs	r1, r1, #31
   1bb0e:	2400      	movs	r4, #0
   1bb10:	42ab      	cmp	r3, r5
   1bb12:	dd10      	ble.n	1bb36 <__aeabi_d2iz+0x36>
   1bb14:	4c0f      	ldr	r4, [pc, #60]	; (1bb54 <__aeabi_d2iz+0x54>)
   1bb16:	42a3      	cmp	r3, r4
   1bb18:	dc0f      	bgt.n	1bb3a <__aeabi_d2iz+0x3a>
   1bb1a:	2480      	movs	r4, #128	; 0x80
   1bb1c:	4d0e      	ldr	r5, [pc, #56]	; (1bb58 <__aeabi_d2iz+0x58>)
   1bb1e:	0364      	lsls	r4, r4, #13
   1bb20:	4322      	orrs	r2, r4
   1bb22:	1aed      	subs	r5, r5, r3
   1bb24:	2d1f      	cmp	r5, #31
   1bb26:	dd0b      	ble.n	1bb40 <__aeabi_d2iz+0x40>
   1bb28:	480c      	ldr	r0, [pc, #48]	; (1bb5c <__aeabi_d2iz+0x5c>)
   1bb2a:	1ac3      	subs	r3, r0, r3
   1bb2c:	40da      	lsrs	r2, r3
   1bb2e:	4254      	negs	r4, r2
   1bb30:	2900      	cmp	r1, #0
   1bb32:	d100      	bne.n	1bb36 <__aeabi_d2iz+0x36>
   1bb34:	0014      	movs	r4, r2
   1bb36:	0020      	movs	r0, r4
   1bb38:	bd30      	pop	{r4, r5, pc}
   1bb3a:	4b09      	ldr	r3, [pc, #36]	; (1bb60 <__aeabi_d2iz+0x60>)
   1bb3c:	18cc      	adds	r4, r1, r3
   1bb3e:	e7fa      	b.n	1bb36 <__aeabi_d2iz+0x36>
   1bb40:	4c08      	ldr	r4, [pc, #32]	; (1bb64 <__aeabi_d2iz+0x64>)
   1bb42:	40e8      	lsrs	r0, r5
   1bb44:	46a4      	mov	ip, r4
   1bb46:	4463      	add	r3, ip
   1bb48:	409a      	lsls	r2, r3
   1bb4a:	4302      	orrs	r2, r0
   1bb4c:	e7ef      	b.n	1bb2e <__aeabi_d2iz+0x2e>
   1bb4e:	46c0      	nop			; (mov r8, r8)
   1bb50:	000003fe 	.word	0x000003fe
   1bb54:	0000041d 	.word	0x0000041d
   1bb58:	00000433 	.word	0x00000433
   1bb5c:	00000413 	.word	0x00000413
   1bb60:	7fffffff 	.word	0x7fffffff
   1bb64:	fffffbed 	.word	0xfffffbed

0001bb68 <__aeabi_i2d>:
   1bb68:	b570      	push	{r4, r5, r6, lr}
   1bb6a:	2800      	cmp	r0, #0
   1bb6c:	d030      	beq.n	1bbd0 <__aeabi_i2d+0x68>
   1bb6e:	17c3      	asrs	r3, r0, #31
   1bb70:	18c4      	adds	r4, r0, r3
   1bb72:	405c      	eors	r4, r3
   1bb74:	0fc5      	lsrs	r5, r0, #31
   1bb76:	0020      	movs	r0, r4
   1bb78:	f7fe fa62 	bl	1a040 <__clzsi2>
   1bb7c:	4b17      	ldr	r3, [pc, #92]	; (1bbdc <__aeabi_i2d+0x74>)
   1bb7e:	4a18      	ldr	r2, [pc, #96]	; (1bbe0 <__aeabi_i2d+0x78>)
   1bb80:	1a1b      	subs	r3, r3, r0
   1bb82:	1ad2      	subs	r2, r2, r3
   1bb84:	2a1f      	cmp	r2, #31
   1bb86:	dd18      	ble.n	1bbba <__aeabi_i2d+0x52>
   1bb88:	4a16      	ldr	r2, [pc, #88]	; (1bbe4 <__aeabi_i2d+0x7c>)
   1bb8a:	1ad2      	subs	r2, r2, r3
   1bb8c:	4094      	lsls	r4, r2
   1bb8e:	2200      	movs	r2, #0
   1bb90:	0324      	lsls	r4, r4, #12
   1bb92:	055b      	lsls	r3, r3, #21
   1bb94:	0b24      	lsrs	r4, r4, #12
   1bb96:	0d5b      	lsrs	r3, r3, #21
   1bb98:	2100      	movs	r1, #0
   1bb9a:	0010      	movs	r0, r2
   1bb9c:	0324      	lsls	r4, r4, #12
   1bb9e:	0d0a      	lsrs	r2, r1, #20
   1bba0:	0b24      	lsrs	r4, r4, #12
   1bba2:	0512      	lsls	r2, r2, #20
   1bba4:	4322      	orrs	r2, r4
   1bba6:	4c10      	ldr	r4, [pc, #64]	; (1bbe8 <__aeabi_i2d+0x80>)
   1bba8:	051b      	lsls	r3, r3, #20
   1bbaa:	4022      	ands	r2, r4
   1bbac:	4313      	orrs	r3, r2
   1bbae:	005b      	lsls	r3, r3, #1
   1bbb0:	07ed      	lsls	r5, r5, #31
   1bbb2:	085b      	lsrs	r3, r3, #1
   1bbb4:	432b      	orrs	r3, r5
   1bbb6:	0019      	movs	r1, r3
   1bbb8:	bd70      	pop	{r4, r5, r6, pc}
   1bbba:	0021      	movs	r1, r4
   1bbbc:	4091      	lsls	r1, r2
   1bbbe:	000a      	movs	r2, r1
   1bbc0:	210b      	movs	r1, #11
   1bbc2:	1a08      	subs	r0, r1, r0
   1bbc4:	40c4      	lsrs	r4, r0
   1bbc6:	055b      	lsls	r3, r3, #21
   1bbc8:	0324      	lsls	r4, r4, #12
   1bbca:	0b24      	lsrs	r4, r4, #12
   1bbcc:	0d5b      	lsrs	r3, r3, #21
   1bbce:	e7e3      	b.n	1bb98 <__aeabi_i2d+0x30>
   1bbd0:	2500      	movs	r5, #0
   1bbd2:	2300      	movs	r3, #0
   1bbd4:	2400      	movs	r4, #0
   1bbd6:	2200      	movs	r2, #0
   1bbd8:	e7de      	b.n	1bb98 <__aeabi_i2d+0x30>
   1bbda:	46c0      	nop			; (mov r8, r8)
   1bbdc:	0000041e 	.word	0x0000041e
   1bbe0:	00000433 	.word	0x00000433
   1bbe4:	00000413 	.word	0x00000413
   1bbe8:	800fffff 	.word	0x800fffff

0001bbec <__aeabi_ui2d>:
   1bbec:	b510      	push	{r4, lr}
   1bbee:	1e04      	subs	r4, r0, #0
   1bbf0:	d028      	beq.n	1bc44 <__aeabi_ui2d+0x58>
   1bbf2:	f7fe fa25 	bl	1a040 <__clzsi2>
   1bbf6:	4b15      	ldr	r3, [pc, #84]	; (1bc4c <__aeabi_ui2d+0x60>)
   1bbf8:	4a15      	ldr	r2, [pc, #84]	; (1bc50 <__aeabi_ui2d+0x64>)
   1bbfa:	1a1b      	subs	r3, r3, r0
   1bbfc:	1ad2      	subs	r2, r2, r3
   1bbfe:	2a1f      	cmp	r2, #31
   1bc00:	dd15      	ble.n	1bc2e <__aeabi_ui2d+0x42>
   1bc02:	4a14      	ldr	r2, [pc, #80]	; (1bc54 <__aeabi_ui2d+0x68>)
   1bc04:	1ad2      	subs	r2, r2, r3
   1bc06:	4094      	lsls	r4, r2
   1bc08:	2200      	movs	r2, #0
   1bc0a:	0324      	lsls	r4, r4, #12
   1bc0c:	055b      	lsls	r3, r3, #21
   1bc0e:	0b24      	lsrs	r4, r4, #12
   1bc10:	0d5b      	lsrs	r3, r3, #21
   1bc12:	2100      	movs	r1, #0
   1bc14:	0010      	movs	r0, r2
   1bc16:	0324      	lsls	r4, r4, #12
   1bc18:	0d0a      	lsrs	r2, r1, #20
   1bc1a:	0b24      	lsrs	r4, r4, #12
   1bc1c:	0512      	lsls	r2, r2, #20
   1bc1e:	4322      	orrs	r2, r4
   1bc20:	4c0d      	ldr	r4, [pc, #52]	; (1bc58 <__aeabi_ui2d+0x6c>)
   1bc22:	051b      	lsls	r3, r3, #20
   1bc24:	4022      	ands	r2, r4
   1bc26:	4313      	orrs	r3, r2
   1bc28:	005b      	lsls	r3, r3, #1
   1bc2a:	0859      	lsrs	r1, r3, #1
   1bc2c:	bd10      	pop	{r4, pc}
   1bc2e:	0021      	movs	r1, r4
   1bc30:	4091      	lsls	r1, r2
   1bc32:	000a      	movs	r2, r1
   1bc34:	210b      	movs	r1, #11
   1bc36:	1a08      	subs	r0, r1, r0
   1bc38:	40c4      	lsrs	r4, r0
   1bc3a:	055b      	lsls	r3, r3, #21
   1bc3c:	0324      	lsls	r4, r4, #12
   1bc3e:	0b24      	lsrs	r4, r4, #12
   1bc40:	0d5b      	lsrs	r3, r3, #21
   1bc42:	e7e6      	b.n	1bc12 <__aeabi_ui2d+0x26>
   1bc44:	2300      	movs	r3, #0
   1bc46:	2400      	movs	r4, #0
   1bc48:	2200      	movs	r2, #0
   1bc4a:	e7e2      	b.n	1bc12 <__aeabi_ui2d+0x26>
   1bc4c:	0000041e 	.word	0x0000041e
   1bc50:	00000433 	.word	0x00000433
   1bc54:	00000413 	.word	0x00000413
   1bc58:	800fffff 	.word	0x800fffff

0001bc5c <__sflush_r>:
   1bc5c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1bc5e:	898a      	ldrh	r2, [r1, #12]
   1bc60:	0005      	movs	r5, r0
   1bc62:	000c      	movs	r4, r1
   1bc64:	0713      	lsls	r3, r2, #28
   1bc66:	d460      	bmi.n	1bd2a <__sflush_r+0xce>
   1bc68:	684b      	ldr	r3, [r1, #4]
   1bc6a:	2b00      	cmp	r3, #0
   1bc6c:	dc04      	bgt.n	1bc78 <__sflush_r+0x1c>
   1bc6e:	6c0b      	ldr	r3, [r1, #64]	; 0x40
   1bc70:	2b00      	cmp	r3, #0
   1bc72:	dc01      	bgt.n	1bc78 <__sflush_r+0x1c>
   1bc74:	2000      	movs	r0, #0
   1bc76:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   1bc78:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
   1bc7a:	2f00      	cmp	r7, #0
   1bc7c:	d0fa      	beq.n	1bc74 <__sflush_r+0x18>
   1bc7e:	2300      	movs	r3, #0
   1bc80:	682e      	ldr	r6, [r5, #0]
   1bc82:	602b      	str	r3, [r5, #0]
   1bc84:	2380      	movs	r3, #128	; 0x80
   1bc86:	015b      	lsls	r3, r3, #5
   1bc88:	401a      	ands	r2, r3
   1bc8a:	d034      	beq.n	1bcf6 <__sflush_r+0x9a>
   1bc8c:	6d60      	ldr	r0, [r4, #84]	; 0x54
   1bc8e:	89a3      	ldrh	r3, [r4, #12]
   1bc90:	075b      	lsls	r3, r3, #29
   1bc92:	d506      	bpl.n	1bca2 <__sflush_r+0x46>
   1bc94:	6863      	ldr	r3, [r4, #4]
   1bc96:	1ac0      	subs	r0, r0, r3
   1bc98:	6b63      	ldr	r3, [r4, #52]	; 0x34
   1bc9a:	2b00      	cmp	r3, #0
   1bc9c:	d001      	beq.n	1bca2 <__sflush_r+0x46>
   1bc9e:	6c23      	ldr	r3, [r4, #64]	; 0x40
   1bca0:	1ac0      	subs	r0, r0, r3
   1bca2:	0002      	movs	r2, r0
   1bca4:	6a21      	ldr	r1, [r4, #32]
   1bca6:	2300      	movs	r3, #0
   1bca8:	0028      	movs	r0, r5
   1bcaa:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
   1bcac:	47b8      	blx	r7
   1bcae:	89a1      	ldrh	r1, [r4, #12]
   1bcb0:	1c43      	adds	r3, r0, #1
   1bcb2:	d106      	bne.n	1bcc2 <__sflush_r+0x66>
   1bcb4:	682b      	ldr	r3, [r5, #0]
   1bcb6:	2b1d      	cmp	r3, #29
   1bcb8:	d831      	bhi.n	1bd1e <__sflush_r+0xc2>
   1bcba:	4a2c      	ldr	r2, [pc, #176]	; (1bd6c <__sflush_r+0x110>)
   1bcbc:	40da      	lsrs	r2, r3
   1bcbe:	07d3      	lsls	r3, r2, #31
   1bcc0:	d52d      	bpl.n	1bd1e <__sflush_r+0xc2>
   1bcc2:	2300      	movs	r3, #0
   1bcc4:	6063      	str	r3, [r4, #4]
   1bcc6:	6923      	ldr	r3, [r4, #16]
   1bcc8:	6023      	str	r3, [r4, #0]
   1bcca:	04cb      	lsls	r3, r1, #19
   1bccc:	d505      	bpl.n	1bcda <__sflush_r+0x7e>
   1bcce:	1c43      	adds	r3, r0, #1
   1bcd0:	d102      	bne.n	1bcd8 <__sflush_r+0x7c>
   1bcd2:	682b      	ldr	r3, [r5, #0]
   1bcd4:	2b00      	cmp	r3, #0
   1bcd6:	d100      	bne.n	1bcda <__sflush_r+0x7e>
   1bcd8:	6560      	str	r0, [r4, #84]	; 0x54
   1bcda:	6b61      	ldr	r1, [r4, #52]	; 0x34
   1bcdc:	602e      	str	r6, [r5, #0]
   1bcde:	2900      	cmp	r1, #0
   1bce0:	d0c8      	beq.n	1bc74 <__sflush_r+0x18>
   1bce2:	0023      	movs	r3, r4
   1bce4:	3344      	adds	r3, #68	; 0x44
   1bce6:	4299      	cmp	r1, r3
   1bce8:	d002      	beq.n	1bcf0 <__sflush_r+0x94>
   1bcea:	0028      	movs	r0, r5
   1bcec:	f000 fa4a 	bl	1c184 <_free_r>
   1bcf0:	2000      	movs	r0, #0
   1bcf2:	6360      	str	r0, [r4, #52]	; 0x34
   1bcf4:	e7bf      	b.n	1bc76 <__sflush_r+0x1a>
   1bcf6:	2301      	movs	r3, #1
   1bcf8:	6a21      	ldr	r1, [r4, #32]
   1bcfa:	0028      	movs	r0, r5
   1bcfc:	47b8      	blx	r7
   1bcfe:	1c43      	adds	r3, r0, #1
   1bd00:	d1c5      	bne.n	1bc8e <__sflush_r+0x32>
   1bd02:	682b      	ldr	r3, [r5, #0]
   1bd04:	2b00      	cmp	r3, #0
   1bd06:	d0c2      	beq.n	1bc8e <__sflush_r+0x32>
   1bd08:	2b1d      	cmp	r3, #29
   1bd0a:	d001      	beq.n	1bd10 <__sflush_r+0xb4>
   1bd0c:	2b16      	cmp	r3, #22
   1bd0e:	d101      	bne.n	1bd14 <__sflush_r+0xb8>
   1bd10:	602e      	str	r6, [r5, #0]
   1bd12:	e7af      	b.n	1bc74 <__sflush_r+0x18>
   1bd14:	2340      	movs	r3, #64	; 0x40
   1bd16:	89a2      	ldrh	r2, [r4, #12]
   1bd18:	4313      	orrs	r3, r2
   1bd1a:	81a3      	strh	r3, [r4, #12]
   1bd1c:	e7ab      	b.n	1bc76 <__sflush_r+0x1a>
   1bd1e:	2340      	movs	r3, #64	; 0x40
   1bd20:	430b      	orrs	r3, r1
   1bd22:	2001      	movs	r0, #1
   1bd24:	81a3      	strh	r3, [r4, #12]
   1bd26:	4240      	negs	r0, r0
   1bd28:	e7a5      	b.n	1bc76 <__sflush_r+0x1a>
   1bd2a:	690f      	ldr	r7, [r1, #16]
   1bd2c:	2f00      	cmp	r7, #0
   1bd2e:	d0a1      	beq.n	1bc74 <__sflush_r+0x18>
   1bd30:	680b      	ldr	r3, [r1, #0]
   1bd32:	600f      	str	r7, [r1, #0]
   1bd34:	1bdb      	subs	r3, r3, r7
   1bd36:	9301      	str	r3, [sp, #4]
   1bd38:	2300      	movs	r3, #0
   1bd3a:	0792      	lsls	r2, r2, #30
   1bd3c:	d100      	bne.n	1bd40 <__sflush_r+0xe4>
   1bd3e:	694b      	ldr	r3, [r1, #20]
   1bd40:	60a3      	str	r3, [r4, #8]
   1bd42:	9b01      	ldr	r3, [sp, #4]
   1bd44:	2b00      	cmp	r3, #0
   1bd46:	dc00      	bgt.n	1bd4a <__sflush_r+0xee>
   1bd48:	e794      	b.n	1bc74 <__sflush_r+0x18>
   1bd4a:	9b01      	ldr	r3, [sp, #4]
   1bd4c:	003a      	movs	r2, r7
   1bd4e:	6a21      	ldr	r1, [r4, #32]
   1bd50:	0028      	movs	r0, r5
   1bd52:	6aa6      	ldr	r6, [r4, #40]	; 0x28
   1bd54:	47b0      	blx	r6
   1bd56:	2800      	cmp	r0, #0
   1bd58:	dc03      	bgt.n	1bd62 <__sflush_r+0x106>
   1bd5a:	2340      	movs	r3, #64	; 0x40
   1bd5c:	89a2      	ldrh	r2, [r4, #12]
   1bd5e:	4313      	orrs	r3, r2
   1bd60:	e7df      	b.n	1bd22 <__sflush_r+0xc6>
   1bd62:	9b01      	ldr	r3, [sp, #4]
   1bd64:	183f      	adds	r7, r7, r0
   1bd66:	1a1b      	subs	r3, r3, r0
   1bd68:	9301      	str	r3, [sp, #4]
   1bd6a:	e7ea      	b.n	1bd42 <__sflush_r+0xe6>
   1bd6c:	20400001 	.word	0x20400001

0001bd70 <_fflush_r>:
   1bd70:	690b      	ldr	r3, [r1, #16]
   1bd72:	b570      	push	{r4, r5, r6, lr}
   1bd74:	0005      	movs	r5, r0
   1bd76:	000c      	movs	r4, r1
   1bd78:	2b00      	cmp	r3, #0
   1bd7a:	d101      	bne.n	1bd80 <_fflush_r+0x10>
   1bd7c:	2000      	movs	r0, #0
   1bd7e:	bd70      	pop	{r4, r5, r6, pc}
   1bd80:	2800      	cmp	r0, #0
   1bd82:	d004      	beq.n	1bd8e <_fflush_r+0x1e>
   1bd84:	6983      	ldr	r3, [r0, #24]
   1bd86:	2b00      	cmp	r3, #0
   1bd88:	d101      	bne.n	1bd8e <_fflush_r+0x1e>
   1bd8a:	f000 f85f 	bl	1be4c <__sinit>
   1bd8e:	4b0b      	ldr	r3, [pc, #44]	; (1bdbc <_fflush_r+0x4c>)
   1bd90:	429c      	cmp	r4, r3
   1bd92:	d109      	bne.n	1bda8 <_fflush_r+0x38>
   1bd94:	686c      	ldr	r4, [r5, #4]
   1bd96:	220c      	movs	r2, #12
   1bd98:	5ea3      	ldrsh	r3, [r4, r2]
   1bd9a:	2b00      	cmp	r3, #0
   1bd9c:	d0ee      	beq.n	1bd7c <_fflush_r+0xc>
   1bd9e:	0021      	movs	r1, r4
   1bda0:	0028      	movs	r0, r5
   1bda2:	f7ff ff5b 	bl	1bc5c <__sflush_r>
   1bda6:	e7ea      	b.n	1bd7e <_fflush_r+0xe>
   1bda8:	4b05      	ldr	r3, [pc, #20]	; (1bdc0 <_fflush_r+0x50>)
   1bdaa:	429c      	cmp	r4, r3
   1bdac:	d101      	bne.n	1bdb2 <_fflush_r+0x42>
   1bdae:	68ac      	ldr	r4, [r5, #8]
   1bdb0:	e7f1      	b.n	1bd96 <_fflush_r+0x26>
   1bdb2:	4b04      	ldr	r3, [pc, #16]	; (1bdc4 <_fflush_r+0x54>)
   1bdb4:	429c      	cmp	r4, r3
   1bdb6:	d1ee      	bne.n	1bd96 <_fflush_r+0x26>
   1bdb8:	68ec      	ldr	r4, [r5, #12]
   1bdba:	e7ec      	b.n	1bd96 <_fflush_r+0x26>
   1bdbc:	00021cb0 	.word	0x00021cb0
   1bdc0:	00021cd0 	.word	0x00021cd0
   1bdc4:	00021c90 	.word	0x00021c90

0001bdc8 <_cleanup_r>:
   1bdc8:	b510      	push	{r4, lr}
   1bdca:	4902      	ldr	r1, [pc, #8]	; (1bdd4 <_cleanup_r+0xc>)
   1bdcc:	f000 f8b2 	bl	1bf34 <_fwalk_reent>
   1bdd0:	bd10      	pop	{r4, pc}
   1bdd2:	46c0      	nop			; (mov r8, r8)
   1bdd4:	0001bd71 	.word	0x0001bd71

0001bdd8 <std.isra.0>:
   1bdd8:	2300      	movs	r3, #0
   1bdda:	b510      	push	{r4, lr}
   1bddc:	0004      	movs	r4, r0
   1bdde:	6003      	str	r3, [r0, #0]
   1bde0:	6043      	str	r3, [r0, #4]
   1bde2:	6083      	str	r3, [r0, #8]
   1bde4:	8181      	strh	r1, [r0, #12]
   1bde6:	6643      	str	r3, [r0, #100]	; 0x64
   1bde8:	81c2      	strh	r2, [r0, #14]
   1bdea:	6103      	str	r3, [r0, #16]
   1bdec:	6143      	str	r3, [r0, #20]
   1bdee:	6183      	str	r3, [r0, #24]
   1bdf0:	0019      	movs	r1, r3
   1bdf2:	2208      	movs	r2, #8
   1bdf4:	305c      	adds	r0, #92	; 0x5c
   1bdf6:	f000 f9bc 	bl	1c172 <memset>
   1bdfa:	4b05      	ldr	r3, [pc, #20]	; (1be10 <std.isra.0+0x38>)
   1bdfc:	6224      	str	r4, [r4, #32]
   1bdfe:	6263      	str	r3, [r4, #36]	; 0x24
   1be00:	4b04      	ldr	r3, [pc, #16]	; (1be14 <std.isra.0+0x3c>)
   1be02:	62a3      	str	r3, [r4, #40]	; 0x28
   1be04:	4b04      	ldr	r3, [pc, #16]	; (1be18 <std.isra.0+0x40>)
   1be06:	62e3      	str	r3, [r4, #44]	; 0x2c
   1be08:	4b04      	ldr	r3, [pc, #16]	; (1be1c <std.isra.0+0x44>)
   1be0a:	6323      	str	r3, [r4, #48]	; 0x30
   1be0c:	bd10      	pop	{r4, pc}
   1be0e:	46c0      	nop			; (mov r8, r8)
   1be10:	0001c649 	.word	0x0001c649
   1be14:	0001c675 	.word	0x0001c675
   1be18:	0001c6ad 	.word	0x0001c6ad
   1be1c:	0001c6d9 	.word	0x0001c6d9

0001be20 <__sfmoreglue>:
   1be20:	b570      	push	{r4, r5, r6, lr}
   1be22:	2568      	movs	r5, #104	; 0x68
   1be24:	1e4a      	subs	r2, r1, #1
   1be26:	4355      	muls	r5, r2
   1be28:	000e      	movs	r6, r1
   1be2a:	0029      	movs	r1, r5
   1be2c:	3174      	adds	r1, #116	; 0x74
   1be2e:	f000 f9f3 	bl	1c218 <_malloc_r>
   1be32:	1e04      	subs	r4, r0, #0
   1be34:	d008      	beq.n	1be48 <__sfmoreglue+0x28>
   1be36:	2100      	movs	r1, #0
   1be38:	002a      	movs	r2, r5
   1be3a:	6001      	str	r1, [r0, #0]
   1be3c:	6046      	str	r6, [r0, #4]
   1be3e:	300c      	adds	r0, #12
   1be40:	60a0      	str	r0, [r4, #8]
   1be42:	3268      	adds	r2, #104	; 0x68
   1be44:	f000 f995 	bl	1c172 <memset>
   1be48:	0020      	movs	r0, r4
   1be4a:	bd70      	pop	{r4, r5, r6, pc}

0001be4c <__sinit>:
   1be4c:	6983      	ldr	r3, [r0, #24]
   1be4e:	b513      	push	{r0, r1, r4, lr}
   1be50:	0004      	movs	r4, r0
   1be52:	2b00      	cmp	r3, #0
   1be54:	d128      	bne.n	1bea8 <__sinit+0x5c>
   1be56:	6483      	str	r3, [r0, #72]	; 0x48
   1be58:	64c3      	str	r3, [r0, #76]	; 0x4c
   1be5a:	6503      	str	r3, [r0, #80]	; 0x50
   1be5c:	4b13      	ldr	r3, [pc, #76]	; (1beac <__sinit+0x60>)
   1be5e:	4a14      	ldr	r2, [pc, #80]	; (1beb0 <__sinit+0x64>)
   1be60:	681b      	ldr	r3, [r3, #0]
   1be62:	6282      	str	r2, [r0, #40]	; 0x28
   1be64:	9301      	str	r3, [sp, #4]
   1be66:	4298      	cmp	r0, r3
   1be68:	d101      	bne.n	1be6e <__sinit+0x22>
   1be6a:	2301      	movs	r3, #1
   1be6c:	6183      	str	r3, [r0, #24]
   1be6e:	0020      	movs	r0, r4
   1be70:	f000 f820 	bl	1beb4 <__sfp>
   1be74:	6060      	str	r0, [r4, #4]
   1be76:	0020      	movs	r0, r4
   1be78:	f000 f81c 	bl	1beb4 <__sfp>
   1be7c:	60a0      	str	r0, [r4, #8]
   1be7e:	0020      	movs	r0, r4
   1be80:	f000 f818 	bl	1beb4 <__sfp>
   1be84:	2200      	movs	r2, #0
   1be86:	60e0      	str	r0, [r4, #12]
   1be88:	2104      	movs	r1, #4
   1be8a:	6860      	ldr	r0, [r4, #4]
   1be8c:	f7ff ffa4 	bl	1bdd8 <std.isra.0>
   1be90:	2201      	movs	r2, #1
   1be92:	2109      	movs	r1, #9
   1be94:	68a0      	ldr	r0, [r4, #8]
   1be96:	f7ff ff9f 	bl	1bdd8 <std.isra.0>
   1be9a:	2202      	movs	r2, #2
   1be9c:	2112      	movs	r1, #18
   1be9e:	68e0      	ldr	r0, [r4, #12]
   1bea0:	f7ff ff9a 	bl	1bdd8 <std.isra.0>
   1bea4:	2301      	movs	r3, #1
   1bea6:	61a3      	str	r3, [r4, #24]
   1bea8:	bd13      	pop	{r0, r1, r4, pc}
   1beaa:	46c0      	nop			; (mov r8, r8)
   1beac:	00021cf0 	.word	0x00021cf0
   1beb0:	0001bdc9 	.word	0x0001bdc9

0001beb4 <__sfp>:
   1beb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1beb6:	4b1e      	ldr	r3, [pc, #120]	; (1bf30 <__sfp+0x7c>)
   1beb8:	0007      	movs	r7, r0
   1beba:	681e      	ldr	r6, [r3, #0]
   1bebc:	69b3      	ldr	r3, [r6, #24]
   1bebe:	2b00      	cmp	r3, #0
   1bec0:	d102      	bne.n	1bec8 <__sfp+0x14>
   1bec2:	0030      	movs	r0, r6
   1bec4:	f7ff ffc2 	bl	1be4c <__sinit>
   1bec8:	3648      	adds	r6, #72	; 0x48
   1beca:	68b4      	ldr	r4, [r6, #8]
   1becc:	6873      	ldr	r3, [r6, #4]
   1bece:	3b01      	subs	r3, #1
   1bed0:	d504      	bpl.n	1bedc <__sfp+0x28>
   1bed2:	6833      	ldr	r3, [r6, #0]
   1bed4:	2b00      	cmp	r3, #0
   1bed6:	d007      	beq.n	1bee8 <__sfp+0x34>
   1bed8:	6836      	ldr	r6, [r6, #0]
   1beda:	e7f6      	b.n	1beca <__sfp+0x16>
   1bedc:	220c      	movs	r2, #12
   1bede:	5ea5      	ldrsh	r5, [r4, r2]
   1bee0:	2d00      	cmp	r5, #0
   1bee2:	d00d      	beq.n	1bf00 <__sfp+0x4c>
   1bee4:	3468      	adds	r4, #104	; 0x68
   1bee6:	e7f2      	b.n	1bece <__sfp+0x1a>
   1bee8:	2104      	movs	r1, #4
   1beea:	0038      	movs	r0, r7
   1beec:	f7ff ff98 	bl	1be20 <__sfmoreglue>
   1bef0:	6030      	str	r0, [r6, #0]
   1bef2:	2800      	cmp	r0, #0
   1bef4:	d1f0      	bne.n	1bed8 <__sfp+0x24>
   1bef6:	230c      	movs	r3, #12
   1bef8:	0004      	movs	r4, r0
   1befa:	603b      	str	r3, [r7, #0]
   1befc:	0020      	movs	r0, r4
   1befe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1bf00:	2301      	movs	r3, #1
   1bf02:	0020      	movs	r0, r4
   1bf04:	425b      	negs	r3, r3
   1bf06:	81e3      	strh	r3, [r4, #14]
   1bf08:	3302      	adds	r3, #2
   1bf0a:	81a3      	strh	r3, [r4, #12]
   1bf0c:	6665      	str	r5, [r4, #100]	; 0x64
   1bf0e:	6025      	str	r5, [r4, #0]
   1bf10:	60a5      	str	r5, [r4, #8]
   1bf12:	6065      	str	r5, [r4, #4]
   1bf14:	6125      	str	r5, [r4, #16]
   1bf16:	6165      	str	r5, [r4, #20]
   1bf18:	61a5      	str	r5, [r4, #24]
   1bf1a:	2208      	movs	r2, #8
   1bf1c:	0029      	movs	r1, r5
   1bf1e:	305c      	adds	r0, #92	; 0x5c
   1bf20:	f000 f927 	bl	1c172 <memset>
   1bf24:	6365      	str	r5, [r4, #52]	; 0x34
   1bf26:	63a5      	str	r5, [r4, #56]	; 0x38
   1bf28:	64a5      	str	r5, [r4, #72]	; 0x48
   1bf2a:	64e5      	str	r5, [r4, #76]	; 0x4c
   1bf2c:	e7e6      	b.n	1befc <__sfp+0x48>
   1bf2e:	46c0      	nop			; (mov r8, r8)
   1bf30:	00021cf0 	.word	0x00021cf0

0001bf34 <_fwalk_reent>:
   1bf34:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1bf36:	0004      	movs	r4, r0
   1bf38:	0007      	movs	r7, r0
   1bf3a:	2600      	movs	r6, #0
   1bf3c:	9101      	str	r1, [sp, #4]
   1bf3e:	3448      	adds	r4, #72	; 0x48
   1bf40:	2c00      	cmp	r4, #0
   1bf42:	d101      	bne.n	1bf48 <_fwalk_reent+0x14>
   1bf44:	0030      	movs	r0, r6
   1bf46:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   1bf48:	6863      	ldr	r3, [r4, #4]
   1bf4a:	68a5      	ldr	r5, [r4, #8]
   1bf4c:	9300      	str	r3, [sp, #0]
   1bf4e:	9b00      	ldr	r3, [sp, #0]
   1bf50:	3b01      	subs	r3, #1
   1bf52:	9300      	str	r3, [sp, #0]
   1bf54:	d501      	bpl.n	1bf5a <_fwalk_reent+0x26>
   1bf56:	6824      	ldr	r4, [r4, #0]
   1bf58:	e7f2      	b.n	1bf40 <_fwalk_reent+0xc>
   1bf5a:	89ab      	ldrh	r3, [r5, #12]
   1bf5c:	2b01      	cmp	r3, #1
   1bf5e:	d908      	bls.n	1bf72 <_fwalk_reent+0x3e>
   1bf60:	220e      	movs	r2, #14
   1bf62:	5eab      	ldrsh	r3, [r5, r2]
   1bf64:	3301      	adds	r3, #1
   1bf66:	d004      	beq.n	1bf72 <_fwalk_reent+0x3e>
   1bf68:	0029      	movs	r1, r5
   1bf6a:	0038      	movs	r0, r7
   1bf6c:	9b01      	ldr	r3, [sp, #4]
   1bf6e:	4798      	blx	r3
   1bf70:	4306      	orrs	r6, r0
   1bf72:	3568      	adds	r5, #104	; 0x68
   1bf74:	e7eb      	b.n	1bf4e <_fwalk_reent+0x1a>
	...

0001bf78 <__libc_init_array>:
   1bf78:	b570      	push	{r4, r5, r6, lr}
   1bf7a:	2600      	movs	r6, #0
   1bf7c:	4d0c      	ldr	r5, [pc, #48]	; (1bfb0 <__libc_init_array+0x38>)
   1bf7e:	4c0d      	ldr	r4, [pc, #52]	; (1bfb4 <__libc_init_array+0x3c>)
   1bf80:	1b64      	subs	r4, r4, r5
   1bf82:	10a4      	asrs	r4, r4, #2
   1bf84:	42a6      	cmp	r6, r4
   1bf86:	d109      	bne.n	1bf9c <__libc_init_array+0x24>
   1bf88:	2600      	movs	r6, #0
   1bf8a:	f006 f819 	bl	21fc0 <_init>
   1bf8e:	4d0a      	ldr	r5, [pc, #40]	; (1bfb8 <__libc_init_array+0x40>)
   1bf90:	4c0a      	ldr	r4, [pc, #40]	; (1bfbc <__libc_init_array+0x44>)
   1bf92:	1b64      	subs	r4, r4, r5
   1bf94:	10a4      	asrs	r4, r4, #2
   1bf96:	42a6      	cmp	r6, r4
   1bf98:	d105      	bne.n	1bfa6 <__libc_init_array+0x2e>
   1bf9a:	bd70      	pop	{r4, r5, r6, pc}
   1bf9c:	00b3      	lsls	r3, r6, #2
   1bf9e:	58eb      	ldr	r3, [r5, r3]
   1bfa0:	4798      	blx	r3
   1bfa2:	3601      	adds	r6, #1
   1bfa4:	e7ee      	b.n	1bf84 <__libc_init_array+0xc>
   1bfa6:	00b3      	lsls	r3, r6, #2
   1bfa8:	58eb      	ldr	r3, [r5, r3]
   1bfaa:	4798      	blx	r3
   1bfac:	3601      	adds	r6, #1
   1bfae:	e7f2      	b.n	1bf96 <__libc_init_array+0x1e>
   1bfb0:	00021fcc 	.word	0x00021fcc
   1bfb4:	00021fcc 	.word	0x00021fcc
   1bfb8:	00021fcc 	.word	0x00021fcc
   1bfbc:	00021fd0 	.word	0x00021fd0

0001bfc0 <__locale_ctype_ptr_l>:
   1bfc0:	30ec      	adds	r0, #236	; 0xec
   1bfc2:	6800      	ldr	r0, [r0, #0]
   1bfc4:	4770      	bx	lr
	...

0001bfc8 <__locale_ctype_ptr>:
   1bfc8:	4b04      	ldr	r3, [pc, #16]	; (1bfdc <__locale_ctype_ptr+0x14>)
   1bfca:	681b      	ldr	r3, [r3, #0]
   1bfcc:	6a1b      	ldr	r3, [r3, #32]
   1bfce:	2b00      	cmp	r3, #0
   1bfd0:	d100      	bne.n	1bfd4 <__locale_ctype_ptr+0xc>
   1bfd2:	4b03      	ldr	r3, [pc, #12]	; (1bfe0 <__locale_ctype_ptr+0x18>)
   1bfd4:	33ec      	adds	r3, #236	; 0xec
   1bfd6:	6818      	ldr	r0, [r3, #0]
   1bfd8:	4770      	bx	lr
   1bfda:	46c0      	nop			; (mov r8, r8)
   1bfdc:	2000022c 	.word	0x2000022c
   1bfe0:	20000290 	.word	0x20000290

0001bfe4 <__swhatbuf_r>:
   1bfe4:	b570      	push	{r4, r5, r6, lr}
   1bfe6:	000e      	movs	r6, r1
   1bfe8:	001d      	movs	r5, r3
   1bfea:	230e      	movs	r3, #14
   1bfec:	5ec9      	ldrsh	r1, [r1, r3]
   1bfee:	b090      	sub	sp, #64	; 0x40
   1bff0:	0014      	movs	r4, r2
   1bff2:	2900      	cmp	r1, #0
   1bff4:	da07      	bge.n	1c006 <__swhatbuf_r+0x22>
   1bff6:	2300      	movs	r3, #0
   1bff8:	602b      	str	r3, [r5, #0]
   1bffa:	89b3      	ldrh	r3, [r6, #12]
   1bffc:	061b      	lsls	r3, r3, #24
   1bffe:	d411      	bmi.n	1c024 <__swhatbuf_r+0x40>
   1c000:	2380      	movs	r3, #128	; 0x80
   1c002:	00db      	lsls	r3, r3, #3
   1c004:	e00f      	b.n	1c026 <__swhatbuf_r+0x42>
   1c006:	aa01      	add	r2, sp, #4
   1c008:	f001 faec 	bl	1d5e4 <_fstat_r>
   1c00c:	2800      	cmp	r0, #0
   1c00e:	dbf2      	blt.n	1bff6 <__swhatbuf_r+0x12>
   1c010:	22f0      	movs	r2, #240	; 0xf0
   1c012:	9b02      	ldr	r3, [sp, #8]
   1c014:	0212      	lsls	r2, r2, #8
   1c016:	4013      	ands	r3, r2
   1c018:	4a05      	ldr	r2, [pc, #20]	; (1c030 <__swhatbuf_r+0x4c>)
   1c01a:	189b      	adds	r3, r3, r2
   1c01c:	425a      	negs	r2, r3
   1c01e:	4153      	adcs	r3, r2
   1c020:	602b      	str	r3, [r5, #0]
   1c022:	e7ed      	b.n	1c000 <__swhatbuf_r+0x1c>
   1c024:	2340      	movs	r3, #64	; 0x40
   1c026:	2000      	movs	r0, #0
   1c028:	6023      	str	r3, [r4, #0]
   1c02a:	b010      	add	sp, #64	; 0x40
   1c02c:	bd70      	pop	{r4, r5, r6, pc}
   1c02e:	46c0      	nop			; (mov r8, r8)
   1c030:	ffffe000 	.word	0xffffe000

0001c034 <__smakebuf_r>:
   1c034:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1c036:	2602      	movs	r6, #2
   1c038:	898b      	ldrh	r3, [r1, #12]
   1c03a:	0005      	movs	r5, r0
   1c03c:	000c      	movs	r4, r1
   1c03e:	4233      	tst	r3, r6
   1c040:	d006      	beq.n	1c050 <__smakebuf_r+0x1c>
   1c042:	0023      	movs	r3, r4
   1c044:	3347      	adds	r3, #71	; 0x47
   1c046:	6023      	str	r3, [r4, #0]
   1c048:	6123      	str	r3, [r4, #16]
   1c04a:	2301      	movs	r3, #1
   1c04c:	6163      	str	r3, [r4, #20]
   1c04e:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
   1c050:	ab01      	add	r3, sp, #4
   1c052:	466a      	mov	r2, sp
   1c054:	f7ff ffc6 	bl	1bfe4 <__swhatbuf_r>
   1c058:	9900      	ldr	r1, [sp, #0]
   1c05a:	0007      	movs	r7, r0
   1c05c:	0028      	movs	r0, r5
   1c05e:	f000 f8db 	bl	1c218 <_malloc_r>
   1c062:	2800      	cmp	r0, #0
   1c064:	d108      	bne.n	1c078 <__smakebuf_r+0x44>
   1c066:	220c      	movs	r2, #12
   1c068:	5ea3      	ldrsh	r3, [r4, r2]
   1c06a:	059a      	lsls	r2, r3, #22
   1c06c:	d4ef      	bmi.n	1c04e <__smakebuf_r+0x1a>
   1c06e:	2203      	movs	r2, #3
   1c070:	4393      	bics	r3, r2
   1c072:	431e      	orrs	r6, r3
   1c074:	81a6      	strh	r6, [r4, #12]
   1c076:	e7e4      	b.n	1c042 <__smakebuf_r+0xe>
   1c078:	4b0f      	ldr	r3, [pc, #60]	; (1c0b8 <__smakebuf_r+0x84>)
   1c07a:	62ab      	str	r3, [r5, #40]	; 0x28
   1c07c:	2380      	movs	r3, #128	; 0x80
   1c07e:	89a2      	ldrh	r2, [r4, #12]
   1c080:	6020      	str	r0, [r4, #0]
   1c082:	4313      	orrs	r3, r2
   1c084:	81a3      	strh	r3, [r4, #12]
   1c086:	9b00      	ldr	r3, [sp, #0]
   1c088:	6120      	str	r0, [r4, #16]
   1c08a:	6163      	str	r3, [r4, #20]
   1c08c:	9b01      	ldr	r3, [sp, #4]
   1c08e:	2b00      	cmp	r3, #0
   1c090:	d00d      	beq.n	1c0ae <__smakebuf_r+0x7a>
   1c092:	230e      	movs	r3, #14
   1c094:	5ee1      	ldrsh	r1, [r4, r3]
   1c096:	0028      	movs	r0, r5
   1c098:	f001 fde2 	bl	1dc60 <_isatty_r>
   1c09c:	2800      	cmp	r0, #0
   1c09e:	d006      	beq.n	1c0ae <__smakebuf_r+0x7a>
   1c0a0:	2203      	movs	r2, #3
   1c0a2:	89a3      	ldrh	r3, [r4, #12]
   1c0a4:	4393      	bics	r3, r2
   1c0a6:	001a      	movs	r2, r3
   1c0a8:	2301      	movs	r3, #1
   1c0aa:	4313      	orrs	r3, r2
   1c0ac:	81a3      	strh	r3, [r4, #12]
   1c0ae:	89a0      	ldrh	r0, [r4, #12]
   1c0b0:	4338      	orrs	r0, r7
   1c0b2:	81a0      	strh	r0, [r4, #12]
   1c0b4:	e7cb      	b.n	1c04e <__smakebuf_r+0x1a>
   1c0b6:	46c0      	nop			; (mov r8, r8)
   1c0b8:	0001bdc9 	.word	0x0001bdc9

0001c0bc <malloc>:
   1c0bc:	b510      	push	{r4, lr}
   1c0be:	4b03      	ldr	r3, [pc, #12]	; (1c0cc <malloc+0x10>)
   1c0c0:	0001      	movs	r1, r0
   1c0c2:	6818      	ldr	r0, [r3, #0]
   1c0c4:	f000 f8a8 	bl	1c218 <_malloc_r>
   1c0c8:	bd10      	pop	{r4, pc}
   1c0ca:	46c0      	nop			; (mov r8, r8)
   1c0cc:	2000022c 	.word	0x2000022c

0001c0d0 <free>:
   1c0d0:	b510      	push	{r4, lr}
   1c0d2:	4b03      	ldr	r3, [pc, #12]	; (1c0e0 <free+0x10>)
   1c0d4:	0001      	movs	r1, r0
   1c0d6:	6818      	ldr	r0, [r3, #0]
   1c0d8:	f000 f854 	bl	1c184 <_free_r>
   1c0dc:	bd10      	pop	{r4, pc}
   1c0de:	46c0      	nop			; (mov r8, r8)
   1c0e0:	2000022c 	.word	0x2000022c

0001c0e4 <__ascii_mbtowc>:
   1c0e4:	b082      	sub	sp, #8
   1c0e6:	2900      	cmp	r1, #0
   1c0e8:	d100      	bne.n	1c0ec <__ascii_mbtowc+0x8>
   1c0ea:	a901      	add	r1, sp, #4
   1c0ec:	1e10      	subs	r0, r2, #0
   1c0ee:	d006      	beq.n	1c0fe <__ascii_mbtowc+0x1a>
   1c0f0:	2b00      	cmp	r3, #0
   1c0f2:	d006      	beq.n	1c102 <__ascii_mbtowc+0x1e>
   1c0f4:	7813      	ldrb	r3, [r2, #0]
   1c0f6:	600b      	str	r3, [r1, #0]
   1c0f8:	7810      	ldrb	r0, [r2, #0]
   1c0fa:	1e43      	subs	r3, r0, #1
   1c0fc:	4198      	sbcs	r0, r3
   1c0fe:	b002      	add	sp, #8
   1c100:	4770      	bx	lr
   1c102:	2002      	movs	r0, #2
   1c104:	4240      	negs	r0, r0
   1c106:	e7fa      	b.n	1c0fe <__ascii_mbtowc+0x1a>

0001c108 <memchr>:
   1c108:	b2c9      	uxtb	r1, r1
   1c10a:	1882      	adds	r2, r0, r2
   1c10c:	4290      	cmp	r0, r2
   1c10e:	d101      	bne.n	1c114 <memchr+0xc>
   1c110:	2000      	movs	r0, #0
   1c112:	4770      	bx	lr
   1c114:	7803      	ldrb	r3, [r0, #0]
   1c116:	428b      	cmp	r3, r1
   1c118:	d0fb      	beq.n	1c112 <memchr+0xa>
   1c11a:	3001      	adds	r0, #1
   1c11c:	e7f6      	b.n	1c10c <memchr+0x4>

0001c11e <memcmp>:
   1c11e:	b530      	push	{r4, r5, lr}
   1c120:	2400      	movs	r4, #0
   1c122:	42a2      	cmp	r2, r4
   1c124:	d101      	bne.n	1c12a <memcmp+0xc>
   1c126:	2000      	movs	r0, #0
   1c128:	e005      	b.n	1c136 <memcmp+0x18>
   1c12a:	5d03      	ldrb	r3, [r0, r4]
   1c12c:	1c65      	adds	r5, r4, #1
   1c12e:	5d0c      	ldrb	r4, [r1, r4]
   1c130:	42a3      	cmp	r3, r4
   1c132:	d001      	beq.n	1c138 <memcmp+0x1a>
   1c134:	1b18      	subs	r0, r3, r4
   1c136:	bd30      	pop	{r4, r5, pc}
   1c138:	002c      	movs	r4, r5
   1c13a:	e7f2      	b.n	1c122 <memcmp+0x4>

0001c13c <memcpy>:
   1c13c:	2300      	movs	r3, #0
   1c13e:	b510      	push	{r4, lr}
   1c140:	429a      	cmp	r2, r3
   1c142:	d100      	bne.n	1c146 <memcpy+0xa>
   1c144:	bd10      	pop	{r4, pc}
   1c146:	5ccc      	ldrb	r4, [r1, r3]
   1c148:	54c4      	strb	r4, [r0, r3]
   1c14a:	3301      	adds	r3, #1
   1c14c:	e7f8      	b.n	1c140 <memcpy+0x4>

0001c14e <memmove>:
   1c14e:	b510      	push	{r4, lr}
   1c150:	4288      	cmp	r0, r1
   1c152:	d902      	bls.n	1c15a <memmove+0xc>
   1c154:	188b      	adds	r3, r1, r2
   1c156:	4298      	cmp	r0, r3
   1c158:	d308      	bcc.n	1c16c <memmove+0x1e>
   1c15a:	2300      	movs	r3, #0
   1c15c:	429a      	cmp	r2, r3
   1c15e:	d007      	beq.n	1c170 <memmove+0x22>
   1c160:	5ccc      	ldrb	r4, [r1, r3]
   1c162:	54c4      	strb	r4, [r0, r3]
   1c164:	3301      	adds	r3, #1
   1c166:	e7f9      	b.n	1c15c <memmove+0xe>
   1c168:	5c8b      	ldrb	r3, [r1, r2]
   1c16a:	5483      	strb	r3, [r0, r2]
   1c16c:	3a01      	subs	r2, #1
   1c16e:	d2fb      	bcs.n	1c168 <memmove+0x1a>
   1c170:	bd10      	pop	{r4, pc}

0001c172 <memset>:
   1c172:	0003      	movs	r3, r0
   1c174:	1882      	adds	r2, r0, r2
   1c176:	4293      	cmp	r3, r2
   1c178:	d100      	bne.n	1c17c <memset+0xa>
   1c17a:	4770      	bx	lr
   1c17c:	7019      	strb	r1, [r3, #0]
   1c17e:	3301      	adds	r3, #1
   1c180:	e7f9      	b.n	1c176 <memset+0x4>
	...

0001c184 <_free_r>:
   1c184:	b570      	push	{r4, r5, r6, lr}
   1c186:	0005      	movs	r5, r0
   1c188:	2900      	cmp	r1, #0
   1c18a:	d010      	beq.n	1c1ae <_free_r+0x2a>
   1c18c:	1f0c      	subs	r4, r1, #4
   1c18e:	6823      	ldr	r3, [r4, #0]
   1c190:	2b00      	cmp	r3, #0
   1c192:	da00      	bge.n	1c196 <_free_r+0x12>
   1c194:	18e4      	adds	r4, r4, r3
   1c196:	0028      	movs	r0, r5
   1c198:	f001 fd8a 	bl	1dcb0 <__malloc_lock>
   1c19c:	4a1d      	ldr	r2, [pc, #116]	; (1c214 <_free_r+0x90>)
   1c19e:	6813      	ldr	r3, [r2, #0]
   1c1a0:	2b00      	cmp	r3, #0
   1c1a2:	d105      	bne.n	1c1b0 <_free_r+0x2c>
   1c1a4:	6063      	str	r3, [r4, #4]
   1c1a6:	6014      	str	r4, [r2, #0]
   1c1a8:	0028      	movs	r0, r5
   1c1aa:	f001 fd82 	bl	1dcb2 <__malloc_unlock>
   1c1ae:	bd70      	pop	{r4, r5, r6, pc}
   1c1b0:	42a3      	cmp	r3, r4
   1c1b2:	d909      	bls.n	1c1c8 <_free_r+0x44>
   1c1b4:	6821      	ldr	r1, [r4, #0]
   1c1b6:	1860      	adds	r0, r4, r1
   1c1b8:	4283      	cmp	r3, r0
   1c1ba:	d1f3      	bne.n	1c1a4 <_free_r+0x20>
   1c1bc:	6818      	ldr	r0, [r3, #0]
   1c1be:	685b      	ldr	r3, [r3, #4]
   1c1c0:	1841      	adds	r1, r0, r1
   1c1c2:	6021      	str	r1, [r4, #0]
   1c1c4:	e7ee      	b.n	1c1a4 <_free_r+0x20>
   1c1c6:	0013      	movs	r3, r2
   1c1c8:	685a      	ldr	r2, [r3, #4]
   1c1ca:	2a00      	cmp	r2, #0
   1c1cc:	d001      	beq.n	1c1d2 <_free_r+0x4e>
   1c1ce:	42a2      	cmp	r2, r4
   1c1d0:	d9f9      	bls.n	1c1c6 <_free_r+0x42>
   1c1d2:	6819      	ldr	r1, [r3, #0]
   1c1d4:	1858      	adds	r0, r3, r1
   1c1d6:	42a0      	cmp	r0, r4
   1c1d8:	d10b      	bne.n	1c1f2 <_free_r+0x6e>
   1c1da:	6820      	ldr	r0, [r4, #0]
   1c1dc:	1809      	adds	r1, r1, r0
   1c1de:	1858      	adds	r0, r3, r1
   1c1e0:	6019      	str	r1, [r3, #0]
   1c1e2:	4282      	cmp	r2, r0
   1c1e4:	d1e0      	bne.n	1c1a8 <_free_r+0x24>
   1c1e6:	6810      	ldr	r0, [r2, #0]
   1c1e8:	6852      	ldr	r2, [r2, #4]
   1c1ea:	1841      	adds	r1, r0, r1
   1c1ec:	6019      	str	r1, [r3, #0]
   1c1ee:	605a      	str	r2, [r3, #4]
   1c1f0:	e7da      	b.n	1c1a8 <_free_r+0x24>
   1c1f2:	42a0      	cmp	r0, r4
   1c1f4:	d902      	bls.n	1c1fc <_free_r+0x78>
   1c1f6:	230c      	movs	r3, #12
   1c1f8:	602b      	str	r3, [r5, #0]
   1c1fa:	e7d5      	b.n	1c1a8 <_free_r+0x24>
   1c1fc:	6821      	ldr	r1, [r4, #0]
   1c1fe:	1860      	adds	r0, r4, r1
   1c200:	4282      	cmp	r2, r0
   1c202:	d103      	bne.n	1c20c <_free_r+0x88>
   1c204:	6810      	ldr	r0, [r2, #0]
   1c206:	6852      	ldr	r2, [r2, #4]
   1c208:	1841      	adds	r1, r0, r1
   1c20a:	6021      	str	r1, [r4, #0]
   1c20c:	6062      	str	r2, [r4, #4]
   1c20e:	605c      	str	r4, [r3, #4]
   1c210:	e7ca      	b.n	1c1a8 <_free_r+0x24>
   1c212:	46c0      	nop			; (mov r8, r8)
   1c214:	200026c0 	.word	0x200026c0

0001c218 <_malloc_r>:
   1c218:	2303      	movs	r3, #3
   1c21a:	b570      	push	{r4, r5, r6, lr}
   1c21c:	1ccd      	adds	r5, r1, #3
   1c21e:	439d      	bics	r5, r3
   1c220:	3508      	adds	r5, #8
   1c222:	0006      	movs	r6, r0
   1c224:	2d0c      	cmp	r5, #12
   1c226:	d21e      	bcs.n	1c266 <_malloc_r+0x4e>
   1c228:	250c      	movs	r5, #12
   1c22a:	42a9      	cmp	r1, r5
   1c22c:	d81d      	bhi.n	1c26a <_malloc_r+0x52>
   1c22e:	0030      	movs	r0, r6
   1c230:	f001 fd3e 	bl	1dcb0 <__malloc_lock>
   1c234:	4a25      	ldr	r2, [pc, #148]	; (1c2cc <_malloc_r+0xb4>)
   1c236:	6814      	ldr	r4, [r2, #0]
   1c238:	0021      	movs	r1, r4
   1c23a:	2900      	cmp	r1, #0
   1c23c:	d119      	bne.n	1c272 <_malloc_r+0x5a>
   1c23e:	4c24      	ldr	r4, [pc, #144]	; (1c2d0 <_malloc_r+0xb8>)
   1c240:	6823      	ldr	r3, [r4, #0]
   1c242:	2b00      	cmp	r3, #0
   1c244:	d103      	bne.n	1c24e <_malloc_r+0x36>
   1c246:	0030      	movs	r0, r6
   1c248:	f000 f8dc 	bl	1c404 <_sbrk_r>
   1c24c:	6020      	str	r0, [r4, #0]
   1c24e:	0029      	movs	r1, r5
   1c250:	0030      	movs	r0, r6
   1c252:	f000 f8d7 	bl	1c404 <_sbrk_r>
   1c256:	1c43      	adds	r3, r0, #1
   1c258:	d12c      	bne.n	1c2b4 <_malloc_r+0x9c>
   1c25a:	230c      	movs	r3, #12
   1c25c:	0030      	movs	r0, r6
   1c25e:	6033      	str	r3, [r6, #0]
   1c260:	f001 fd27 	bl	1dcb2 <__malloc_unlock>
   1c264:	e003      	b.n	1c26e <_malloc_r+0x56>
   1c266:	2d00      	cmp	r5, #0
   1c268:	dadf      	bge.n	1c22a <_malloc_r+0x12>
   1c26a:	230c      	movs	r3, #12
   1c26c:	6033      	str	r3, [r6, #0]
   1c26e:	2000      	movs	r0, #0
   1c270:	bd70      	pop	{r4, r5, r6, pc}
   1c272:	680b      	ldr	r3, [r1, #0]
   1c274:	1b5b      	subs	r3, r3, r5
   1c276:	d41a      	bmi.n	1c2ae <_malloc_r+0x96>
   1c278:	2b0b      	cmp	r3, #11
   1c27a:	d903      	bls.n	1c284 <_malloc_r+0x6c>
   1c27c:	600b      	str	r3, [r1, #0]
   1c27e:	18cc      	adds	r4, r1, r3
   1c280:	6025      	str	r5, [r4, #0]
   1c282:	e003      	b.n	1c28c <_malloc_r+0x74>
   1c284:	428c      	cmp	r4, r1
   1c286:	d10e      	bne.n	1c2a6 <_malloc_r+0x8e>
   1c288:	6863      	ldr	r3, [r4, #4]
   1c28a:	6013      	str	r3, [r2, #0]
   1c28c:	0030      	movs	r0, r6
   1c28e:	f001 fd10 	bl	1dcb2 <__malloc_unlock>
   1c292:	0020      	movs	r0, r4
   1c294:	2207      	movs	r2, #7
   1c296:	300b      	adds	r0, #11
   1c298:	1d23      	adds	r3, r4, #4
   1c29a:	4390      	bics	r0, r2
   1c29c:	1ac3      	subs	r3, r0, r3
   1c29e:	d0e7      	beq.n	1c270 <_malloc_r+0x58>
   1c2a0:	425a      	negs	r2, r3
   1c2a2:	50e2      	str	r2, [r4, r3]
   1c2a4:	e7e4      	b.n	1c270 <_malloc_r+0x58>
   1c2a6:	684b      	ldr	r3, [r1, #4]
   1c2a8:	6063      	str	r3, [r4, #4]
   1c2aa:	000c      	movs	r4, r1
   1c2ac:	e7ee      	b.n	1c28c <_malloc_r+0x74>
   1c2ae:	000c      	movs	r4, r1
   1c2b0:	6849      	ldr	r1, [r1, #4]
   1c2b2:	e7c2      	b.n	1c23a <_malloc_r+0x22>
   1c2b4:	2303      	movs	r3, #3
   1c2b6:	1cc4      	adds	r4, r0, #3
   1c2b8:	439c      	bics	r4, r3
   1c2ba:	42a0      	cmp	r0, r4
   1c2bc:	d0e0      	beq.n	1c280 <_malloc_r+0x68>
   1c2be:	1a21      	subs	r1, r4, r0
   1c2c0:	0030      	movs	r0, r6
   1c2c2:	f000 f89f 	bl	1c404 <_sbrk_r>
   1c2c6:	1c43      	adds	r3, r0, #1
   1c2c8:	d1da      	bne.n	1c280 <_malloc_r+0x68>
   1c2ca:	e7c6      	b.n	1c25a <_malloc_r+0x42>
   1c2cc:	200026c0 	.word	0x200026c0
   1c2d0:	200026c4 	.word	0x200026c4

0001c2d4 <iprintf>:
   1c2d4:	b40f      	push	{r0, r1, r2, r3}
   1c2d6:	4b0b      	ldr	r3, [pc, #44]	; (1c304 <iprintf+0x30>)
   1c2d8:	b513      	push	{r0, r1, r4, lr}
   1c2da:	681c      	ldr	r4, [r3, #0]
   1c2dc:	2c00      	cmp	r4, #0
   1c2de:	d005      	beq.n	1c2ec <iprintf+0x18>
   1c2e0:	69a3      	ldr	r3, [r4, #24]
   1c2e2:	2b00      	cmp	r3, #0
   1c2e4:	d102      	bne.n	1c2ec <iprintf+0x18>
   1c2e6:	0020      	movs	r0, r4
   1c2e8:	f7ff fdb0 	bl	1be4c <__sinit>
   1c2ec:	ab05      	add	r3, sp, #20
   1c2ee:	9a04      	ldr	r2, [sp, #16]
   1c2f0:	68a1      	ldr	r1, [r4, #8]
   1c2f2:	0020      	movs	r0, r4
   1c2f4:	9301      	str	r3, [sp, #4]
   1c2f6:	f002 fc4f 	bl	1eb98 <_vfiprintf_r>
   1c2fa:	bc16      	pop	{r1, r2, r4}
   1c2fc:	bc08      	pop	{r3}
   1c2fe:	b004      	add	sp, #16
   1c300:	4718      	bx	r3
   1c302:	46c0      	nop			; (mov r8, r8)
   1c304:	2000022c 	.word	0x2000022c

0001c308 <putchar>:
   1c308:	4b08      	ldr	r3, [pc, #32]	; (1c32c <putchar+0x24>)
   1c30a:	b570      	push	{r4, r5, r6, lr}
   1c30c:	681c      	ldr	r4, [r3, #0]
   1c30e:	0005      	movs	r5, r0
   1c310:	2c00      	cmp	r4, #0
   1c312:	d005      	beq.n	1c320 <putchar+0x18>
   1c314:	69a3      	ldr	r3, [r4, #24]
   1c316:	2b00      	cmp	r3, #0
   1c318:	d102      	bne.n	1c320 <putchar+0x18>
   1c31a:	0020      	movs	r0, r4
   1c31c:	f7ff fd96 	bl	1be4c <__sinit>
   1c320:	0029      	movs	r1, r5
   1c322:	68a2      	ldr	r2, [r4, #8]
   1c324:	0020      	movs	r0, r4
   1c326:	f003 f83f 	bl	1f3a8 <_putc_r>
   1c32a:	bd70      	pop	{r4, r5, r6, pc}
   1c32c:	2000022c 	.word	0x2000022c

0001c330 <_puts_r>:
   1c330:	b570      	push	{r4, r5, r6, lr}
   1c332:	0005      	movs	r5, r0
   1c334:	000e      	movs	r6, r1
   1c336:	2800      	cmp	r0, #0
   1c338:	d004      	beq.n	1c344 <_puts_r+0x14>
   1c33a:	6983      	ldr	r3, [r0, #24]
   1c33c:	2b00      	cmp	r3, #0
   1c33e:	d101      	bne.n	1c344 <_puts_r+0x14>
   1c340:	f7ff fd84 	bl	1be4c <__sinit>
   1c344:	69ab      	ldr	r3, [r5, #24]
   1c346:	68ac      	ldr	r4, [r5, #8]
   1c348:	2b00      	cmp	r3, #0
   1c34a:	d102      	bne.n	1c352 <_puts_r+0x22>
   1c34c:	0028      	movs	r0, r5
   1c34e:	f7ff fd7d 	bl	1be4c <__sinit>
   1c352:	4b24      	ldr	r3, [pc, #144]	; (1c3e4 <_puts_r+0xb4>)
   1c354:	429c      	cmp	r4, r3
   1c356:	d10f      	bne.n	1c378 <_puts_r+0x48>
   1c358:	686c      	ldr	r4, [r5, #4]
   1c35a:	89a3      	ldrh	r3, [r4, #12]
   1c35c:	071b      	lsls	r3, r3, #28
   1c35e:	d502      	bpl.n	1c366 <_puts_r+0x36>
   1c360:	6923      	ldr	r3, [r4, #16]
   1c362:	2b00      	cmp	r3, #0
   1c364:	d120      	bne.n	1c3a8 <_puts_r+0x78>
   1c366:	0021      	movs	r1, r4
   1c368:	0028      	movs	r0, r5
   1c36a:	f001 f8b3 	bl	1d4d4 <__swsetup_r>
   1c36e:	2800      	cmp	r0, #0
   1c370:	d01a      	beq.n	1c3a8 <_puts_r+0x78>
   1c372:	2001      	movs	r0, #1
   1c374:	4240      	negs	r0, r0
   1c376:	bd70      	pop	{r4, r5, r6, pc}
   1c378:	4b1b      	ldr	r3, [pc, #108]	; (1c3e8 <_puts_r+0xb8>)
   1c37a:	429c      	cmp	r4, r3
   1c37c:	d101      	bne.n	1c382 <_puts_r+0x52>
   1c37e:	68ac      	ldr	r4, [r5, #8]
   1c380:	e7eb      	b.n	1c35a <_puts_r+0x2a>
   1c382:	4b1a      	ldr	r3, [pc, #104]	; (1c3ec <_puts_r+0xbc>)
   1c384:	429c      	cmp	r4, r3
   1c386:	d1e8      	bne.n	1c35a <_puts_r+0x2a>
   1c388:	68ec      	ldr	r4, [r5, #12]
   1c38a:	e7e6      	b.n	1c35a <_puts_r+0x2a>
   1c38c:	3b01      	subs	r3, #1
   1c38e:	3601      	adds	r6, #1
   1c390:	60a3      	str	r3, [r4, #8]
   1c392:	2b00      	cmp	r3, #0
   1c394:	da04      	bge.n	1c3a0 <_puts_r+0x70>
   1c396:	69a2      	ldr	r2, [r4, #24]
   1c398:	4293      	cmp	r3, r2
   1c39a:	db16      	blt.n	1c3ca <_puts_r+0x9a>
   1c39c:	290a      	cmp	r1, #10
   1c39e:	d014      	beq.n	1c3ca <_puts_r+0x9a>
   1c3a0:	6823      	ldr	r3, [r4, #0]
   1c3a2:	1c5a      	adds	r2, r3, #1
   1c3a4:	6022      	str	r2, [r4, #0]
   1c3a6:	7019      	strb	r1, [r3, #0]
   1c3a8:	7831      	ldrb	r1, [r6, #0]
   1c3aa:	68a3      	ldr	r3, [r4, #8]
   1c3ac:	2900      	cmp	r1, #0
   1c3ae:	d1ed      	bne.n	1c38c <_puts_r+0x5c>
   1c3b0:	3b01      	subs	r3, #1
   1c3b2:	60a3      	str	r3, [r4, #8]
   1c3b4:	2b00      	cmp	r3, #0
   1c3b6:	da0f      	bge.n	1c3d8 <_puts_r+0xa8>
   1c3b8:	0022      	movs	r2, r4
   1c3ba:	310a      	adds	r1, #10
   1c3bc:	0028      	movs	r0, r5
   1c3be:	f001 f813 	bl	1d3e8 <__swbuf_r>
   1c3c2:	1c43      	adds	r3, r0, #1
   1c3c4:	d0d5      	beq.n	1c372 <_puts_r+0x42>
   1c3c6:	200a      	movs	r0, #10
   1c3c8:	e7d5      	b.n	1c376 <_puts_r+0x46>
   1c3ca:	0022      	movs	r2, r4
   1c3cc:	0028      	movs	r0, r5
   1c3ce:	f001 f80b 	bl	1d3e8 <__swbuf_r>
   1c3d2:	1c43      	adds	r3, r0, #1
   1c3d4:	d1e8      	bne.n	1c3a8 <_puts_r+0x78>
   1c3d6:	e7cc      	b.n	1c372 <_puts_r+0x42>
   1c3d8:	200a      	movs	r0, #10
   1c3da:	6823      	ldr	r3, [r4, #0]
   1c3dc:	1c5a      	adds	r2, r3, #1
   1c3de:	6022      	str	r2, [r4, #0]
   1c3e0:	7018      	strb	r0, [r3, #0]
   1c3e2:	e7c8      	b.n	1c376 <_puts_r+0x46>
   1c3e4:	00021cb0 	.word	0x00021cb0
   1c3e8:	00021cd0 	.word	0x00021cd0
   1c3ec:	00021c90 	.word	0x00021c90

0001c3f0 <puts>:
   1c3f0:	b510      	push	{r4, lr}
   1c3f2:	4b03      	ldr	r3, [pc, #12]	; (1c400 <puts+0x10>)
   1c3f4:	0001      	movs	r1, r0
   1c3f6:	6818      	ldr	r0, [r3, #0]
   1c3f8:	f7ff ff9a 	bl	1c330 <_puts_r>
   1c3fc:	bd10      	pop	{r4, pc}
   1c3fe:	46c0      	nop			; (mov r8, r8)
   1c400:	2000022c 	.word	0x2000022c

0001c404 <_sbrk_r>:
   1c404:	2300      	movs	r3, #0
   1c406:	b570      	push	{r4, r5, r6, lr}
   1c408:	4c06      	ldr	r4, [pc, #24]	; (1c424 <_sbrk_r+0x20>)
   1c40a:	0005      	movs	r5, r0
   1c40c:	0008      	movs	r0, r1
   1c40e:	6023      	str	r3, [r4, #0]
   1c410:	f7e3 ffea 	bl	3e8 <_sbrk>
   1c414:	1c43      	adds	r3, r0, #1
   1c416:	d103      	bne.n	1c420 <_sbrk_r+0x1c>
   1c418:	6823      	ldr	r3, [r4, #0]
   1c41a:	2b00      	cmp	r3, #0
   1c41c:	d000      	beq.n	1c420 <_sbrk_r+0x1c>
   1c41e:	602b      	str	r3, [r5, #0]
   1c420:	bd70      	pop	{r4, r5, r6, pc}
   1c422:	46c0      	nop			; (mov r8, r8)
   1c424:	20002c00 	.word	0x20002c00

0001c428 <setbuf>:
   1c428:	424a      	negs	r2, r1
   1c42a:	414a      	adcs	r2, r1
   1c42c:	2380      	movs	r3, #128	; 0x80
   1c42e:	b510      	push	{r4, lr}
   1c430:	0052      	lsls	r2, r2, #1
   1c432:	00db      	lsls	r3, r3, #3
   1c434:	f000 f802 	bl	1c43c <setvbuf>
   1c438:	bd10      	pop	{r4, pc}
	...

0001c43c <setvbuf>:
   1c43c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1c43e:	001d      	movs	r5, r3
   1c440:	4b4f      	ldr	r3, [pc, #316]	; (1c580 <setvbuf+0x144>)
   1c442:	b085      	sub	sp, #20
   1c444:	681e      	ldr	r6, [r3, #0]
   1c446:	0004      	movs	r4, r0
   1c448:	000f      	movs	r7, r1
   1c44a:	9200      	str	r2, [sp, #0]
   1c44c:	2e00      	cmp	r6, #0
   1c44e:	d005      	beq.n	1c45c <setvbuf+0x20>
   1c450:	69b3      	ldr	r3, [r6, #24]
   1c452:	2b00      	cmp	r3, #0
   1c454:	d102      	bne.n	1c45c <setvbuf+0x20>
   1c456:	0030      	movs	r0, r6
   1c458:	f7ff fcf8 	bl	1be4c <__sinit>
   1c45c:	4b49      	ldr	r3, [pc, #292]	; (1c584 <setvbuf+0x148>)
   1c45e:	429c      	cmp	r4, r3
   1c460:	d150      	bne.n	1c504 <setvbuf+0xc8>
   1c462:	6874      	ldr	r4, [r6, #4]
   1c464:	9b00      	ldr	r3, [sp, #0]
   1c466:	2b02      	cmp	r3, #2
   1c468:	d005      	beq.n	1c476 <setvbuf+0x3a>
   1c46a:	2b01      	cmp	r3, #1
   1c46c:	d900      	bls.n	1c470 <setvbuf+0x34>
   1c46e:	e084      	b.n	1c57a <setvbuf+0x13e>
   1c470:	2d00      	cmp	r5, #0
   1c472:	da00      	bge.n	1c476 <setvbuf+0x3a>
   1c474:	e081      	b.n	1c57a <setvbuf+0x13e>
   1c476:	0021      	movs	r1, r4
   1c478:	0030      	movs	r0, r6
   1c47a:	f7ff fc79 	bl	1bd70 <_fflush_r>
   1c47e:	6b61      	ldr	r1, [r4, #52]	; 0x34
   1c480:	2900      	cmp	r1, #0
   1c482:	d008      	beq.n	1c496 <setvbuf+0x5a>
   1c484:	0023      	movs	r3, r4
   1c486:	3344      	adds	r3, #68	; 0x44
   1c488:	4299      	cmp	r1, r3
   1c48a:	d002      	beq.n	1c492 <setvbuf+0x56>
   1c48c:	0030      	movs	r0, r6
   1c48e:	f7ff fe79 	bl	1c184 <_free_r>
   1c492:	2300      	movs	r3, #0
   1c494:	6363      	str	r3, [r4, #52]	; 0x34
   1c496:	2300      	movs	r3, #0
   1c498:	61a3      	str	r3, [r4, #24]
   1c49a:	6063      	str	r3, [r4, #4]
   1c49c:	89a3      	ldrh	r3, [r4, #12]
   1c49e:	061b      	lsls	r3, r3, #24
   1c4a0:	d503      	bpl.n	1c4aa <setvbuf+0x6e>
   1c4a2:	6921      	ldr	r1, [r4, #16]
   1c4a4:	0030      	movs	r0, r6
   1c4a6:	f7ff fe6d 	bl	1c184 <_free_r>
   1c4aa:	89a3      	ldrh	r3, [r4, #12]
   1c4ac:	4a36      	ldr	r2, [pc, #216]	; (1c588 <setvbuf+0x14c>)
   1c4ae:	4013      	ands	r3, r2
   1c4b0:	81a3      	strh	r3, [r4, #12]
   1c4b2:	9b00      	ldr	r3, [sp, #0]
   1c4b4:	2b02      	cmp	r3, #2
   1c4b6:	d05a      	beq.n	1c56e <setvbuf+0x132>
   1c4b8:	ab03      	add	r3, sp, #12
   1c4ba:	aa02      	add	r2, sp, #8
   1c4bc:	0021      	movs	r1, r4
   1c4be:	0030      	movs	r0, r6
   1c4c0:	f7ff fd90 	bl	1bfe4 <__swhatbuf_r>
   1c4c4:	89a3      	ldrh	r3, [r4, #12]
   1c4c6:	4318      	orrs	r0, r3
   1c4c8:	81a0      	strh	r0, [r4, #12]
   1c4ca:	2d00      	cmp	r5, #0
   1c4cc:	d124      	bne.n	1c518 <setvbuf+0xdc>
   1c4ce:	9d02      	ldr	r5, [sp, #8]
   1c4d0:	0028      	movs	r0, r5
   1c4d2:	f7ff fdf3 	bl	1c0bc <malloc>
   1c4d6:	9501      	str	r5, [sp, #4]
   1c4d8:	1e07      	subs	r7, r0, #0
   1c4da:	d142      	bne.n	1c562 <setvbuf+0x126>
   1c4dc:	9b02      	ldr	r3, [sp, #8]
   1c4de:	9301      	str	r3, [sp, #4]
   1c4e0:	42ab      	cmp	r3, r5
   1c4e2:	d139      	bne.n	1c558 <setvbuf+0x11c>
   1c4e4:	2001      	movs	r0, #1
   1c4e6:	4240      	negs	r0, r0
   1c4e8:	2302      	movs	r3, #2
   1c4ea:	89a2      	ldrh	r2, [r4, #12]
   1c4ec:	4313      	orrs	r3, r2
   1c4ee:	81a3      	strh	r3, [r4, #12]
   1c4f0:	2300      	movs	r3, #0
   1c4f2:	60a3      	str	r3, [r4, #8]
   1c4f4:	0023      	movs	r3, r4
   1c4f6:	3347      	adds	r3, #71	; 0x47
   1c4f8:	6023      	str	r3, [r4, #0]
   1c4fa:	6123      	str	r3, [r4, #16]
   1c4fc:	2301      	movs	r3, #1
   1c4fe:	6163      	str	r3, [r4, #20]
   1c500:	b005      	add	sp, #20
   1c502:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1c504:	4b21      	ldr	r3, [pc, #132]	; (1c58c <setvbuf+0x150>)
   1c506:	429c      	cmp	r4, r3
   1c508:	d101      	bne.n	1c50e <setvbuf+0xd2>
   1c50a:	68b4      	ldr	r4, [r6, #8]
   1c50c:	e7aa      	b.n	1c464 <setvbuf+0x28>
   1c50e:	4b20      	ldr	r3, [pc, #128]	; (1c590 <setvbuf+0x154>)
   1c510:	429c      	cmp	r4, r3
   1c512:	d1a7      	bne.n	1c464 <setvbuf+0x28>
   1c514:	68f4      	ldr	r4, [r6, #12]
   1c516:	e7a5      	b.n	1c464 <setvbuf+0x28>
   1c518:	2f00      	cmp	r7, #0
   1c51a:	d0d9      	beq.n	1c4d0 <setvbuf+0x94>
   1c51c:	69b3      	ldr	r3, [r6, #24]
   1c51e:	2b00      	cmp	r3, #0
   1c520:	d102      	bne.n	1c528 <setvbuf+0xec>
   1c522:	0030      	movs	r0, r6
   1c524:	f7ff fc92 	bl	1be4c <__sinit>
   1c528:	9b00      	ldr	r3, [sp, #0]
   1c52a:	2b01      	cmp	r3, #1
   1c52c:	d103      	bne.n	1c536 <setvbuf+0xfa>
   1c52e:	89a3      	ldrh	r3, [r4, #12]
   1c530:	9a00      	ldr	r2, [sp, #0]
   1c532:	431a      	orrs	r2, r3
   1c534:	81a2      	strh	r2, [r4, #12]
   1c536:	2008      	movs	r0, #8
   1c538:	89a3      	ldrh	r3, [r4, #12]
   1c53a:	6027      	str	r7, [r4, #0]
   1c53c:	6127      	str	r7, [r4, #16]
   1c53e:	6165      	str	r5, [r4, #20]
   1c540:	4018      	ands	r0, r3
   1c542:	d018      	beq.n	1c576 <setvbuf+0x13a>
   1c544:	2001      	movs	r0, #1
   1c546:	4018      	ands	r0, r3
   1c548:	2300      	movs	r3, #0
   1c54a:	4298      	cmp	r0, r3
   1c54c:	d011      	beq.n	1c572 <setvbuf+0x136>
   1c54e:	426d      	negs	r5, r5
   1c550:	60a3      	str	r3, [r4, #8]
   1c552:	61a5      	str	r5, [r4, #24]
   1c554:	0018      	movs	r0, r3
   1c556:	e7d3      	b.n	1c500 <setvbuf+0xc4>
   1c558:	9801      	ldr	r0, [sp, #4]
   1c55a:	f7ff fdaf 	bl	1c0bc <malloc>
   1c55e:	1e07      	subs	r7, r0, #0
   1c560:	d0c0      	beq.n	1c4e4 <setvbuf+0xa8>
   1c562:	2380      	movs	r3, #128	; 0x80
   1c564:	89a2      	ldrh	r2, [r4, #12]
   1c566:	9d01      	ldr	r5, [sp, #4]
   1c568:	4313      	orrs	r3, r2
   1c56a:	81a3      	strh	r3, [r4, #12]
   1c56c:	e7d6      	b.n	1c51c <setvbuf+0xe0>
   1c56e:	2000      	movs	r0, #0
   1c570:	e7ba      	b.n	1c4e8 <setvbuf+0xac>
   1c572:	60a5      	str	r5, [r4, #8]
   1c574:	e7c4      	b.n	1c500 <setvbuf+0xc4>
   1c576:	60a0      	str	r0, [r4, #8]
   1c578:	e7c2      	b.n	1c500 <setvbuf+0xc4>
   1c57a:	2001      	movs	r0, #1
   1c57c:	4240      	negs	r0, r0
   1c57e:	e7bf      	b.n	1c500 <setvbuf+0xc4>
   1c580:	2000022c 	.word	0x2000022c
   1c584:	00021cb0 	.word	0x00021cb0
   1c588:	fffff35c 	.word	0xfffff35c
   1c58c:	00021cd0 	.word	0x00021cd0
   1c590:	00021c90 	.word	0x00021c90

0001c594 <sniprintf>:
   1c594:	b40c      	push	{r2, r3}
   1c596:	b530      	push	{r4, r5, lr}
   1c598:	4b16      	ldr	r3, [pc, #88]	; (1c5f4 <sniprintf+0x60>)
   1c59a:	b09d      	sub	sp, #116	; 0x74
   1c59c:	1e0c      	subs	r4, r1, #0
   1c59e:	681d      	ldr	r5, [r3, #0]
   1c5a0:	da08      	bge.n	1c5b4 <sniprintf+0x20>
   1c5a2:	238b      	movs	r3, #139	; 0x8b
   1c5a4:	2001      	movs	r0, #1
   1c5a6:	602b      	str	r3, [r5, #0]
   1c5a8:	4240      	negs	r0, r0
   1c5aa:	b01d      	add	sp, #116	; 0x74
   1c5ac:	bc30      	pop	{r4, r5}
   1c5ae:	bc08      	pop	{r3}
   1c5b0:	b002      	add	sp, #8
   1c5b2:	4718      	bx	r3
   1c5b4:	2382      	movs	r3, #130	; 0x82
   1c5b6:	a902      	add	r1, sp, #8
   1c5b8:	009b      	lsls	r3, r3, #2
   1c5ba:	818b      	strh	r3, [r1, #12]
   1c5bc:	2300      	movs	r3, #0
   1c5be:	9002      	str	r0, [sp, #8]
   1c5c0:	6108      	str	r0, [r1, #16]
   1c5c2:	429c      	cmp	r4, r3
   1c5c4:	d000      	beq.n	1c5c8 <sniprintf+0x34>
   1c5c6:	1e63      	subs	r3, r4, #1
   1c5c8:	608b      	str	r3, [r1, #8]
   1c5ca:	614b      	str	r3, [r1, #20]
   1c5cc:	2301      	movs	r3, #1
   1c5ce:	425b      	negs	r3, r3
   1c5d0:	81cb      	strh	r3, [r1, #14]
   1c5d2:	9a20      	ldr	r2, [sp, #128]	; 0x80
   1c5d4:	ab21      	add	r3, sp, #132	; 0x84
   1c5d6:	0028      	movs	r0, r5
   1c5d8:	9301      	str	r3, [sp, #4]
   1c5da:	f001 ffcf 	bl	1e57c <_svfiprintf_r>
   1c5de:	1c43      	adds	r3, r0, #1
   1c5e0:	da01      	bge.n	1c5e6 <sniprintf+0x52>
   1c5e2:	238b      	movs	r3, #139	; 0x8b
   1c5e4:	602b      	str	r3, [r5, #0]
   1c5e6:	2c00      	cmp	r4, #0
   1c5e8:	d0df      	beq.n	1c5aa <sniprintf+0x16>
   1c5ea:	2300      	movs	r3, #0
   1c5ec:	9a02      	ldr	r2, [sp, #8]
   1c5ee:	7013      	strb	r3, [r2, #0]
   1c5f0:	e7db      	b.n	1c5aa <sniprintf+0x16>
   1c5f2:	46c0      	nop			; (mov r8, r8)
   1c5f4:	2000022c 	.word	0x2000022c

0001c5f8 <siscanf>:
   1c5f8:	b40e      	push	{r1, r2, r3}
   1c5fa:	2381      	movs	r3, #129	; 0x81
   1c5fc:	b570      	push	{r4, r5, r6, lr}
   1c5fe:	b09d      	sub	sp, #116	; 0x74
   1c600:	ac02      	add	r4, sp, #8
   1c602:	ad21      	add	r5, sp, #132	; 0x84
   1c604:	009b      	lsls	r3, r3, #2
   1c606:	cd40      	ldmia	r5!, {r6}
   1c608:	81a3      	strh	r3, [r4, #12]
   1c60a:	9002      	str	r0, [sp, #8]
   1c60c:	9006      	str	r0, [sp, #24]
   1c60e:	f000 f88c 	bl	1c72a <strlen>
   1c612:	4b0b      	ldr	r3, [pc, #44]	; (1c640 <siscanf+0x48>)
   1c614:	6060      	str	r0, [r4, #4]
   1c616:	6263      	str	r3, [r4, #36]	; 0x24
   1c618:	2300      	movs	r3, #0
   1c61a:	6160      	str	r0, [r4, #20]
   1c61c:	4809      	ldr	r0, [pc, #36]	; (1c644 <siscanf+0x4c>)
   1c61e:	6363      	str	r3, [r4, #52]	; 0x34
   1c620:	64a3      	str	r3, [r4, #72]	; 0x48
   1c622:	3b01      	subs	r3, #1
   1c624:	81e3      	strh	r3, [r4, #14]
   1c626:	0032      	movs	r2, r6
   1c628:	002b      	movs	r3, r5
   1c62a:	0021      	movs	r1, r4
   1c62c:	6800      	ldr	r0, [r0, #0]
   1c62e:	9501      	str	r5, [sp, #4]
   1c630:	f002 f904 	bl	1e83c <__ssvfiscanf_r>
   1c634:	b01d      	add	sp, #116	; 0x74
   1c636:	bc70      	pop	{r4, r5, r6}
   1c638:	bc08      	pop	{r3}
   1c63a:	b003      	add	sp, #12
   1c63c:	4718      	bx	r3
   1c63e:	46c0      	nop			; (mov r8, r8)
   1c640:	0001c671 	.word	0x0001c671
   1c644:	2000022c 	.word	0x2000022c

0001c648 <__sread>:
   1c648:	b570      	push	{r4, r5, r6, lr}
   1c64a:	000c      	movs	r4, r1
   1c64c:	250e      	movs	r5, #14
   1c64e:	5f49      	ldrsh	r1, [r1, r5]
   1c650:	f002 fee0 	bl	1f414 <_read_r>
   1c654:	2800      	cmp	r0, #0
   1c656:	db03      	blt.n	1c660 <__sread+0x18>
   1c658:	6d63      	ldr	r3, [r4, #84]	; 0x54
   1c65a:	181b      	adds	r3, r3, r0
   1c65c:	6563      	str	r3, [r4, #84]	; 0x54
   1c65e:	bd70      	pop	{r4, r5, r6, pc}
   1c660:	89a3      	ldrh	r3, [r4, #12]
   1c662:	4a02      	ldr	r2, [pc, #8]	; (1c66c <__sread+0x24>)
   1c664:	4013      	ands	r3, r2
   1c666:	81a3      	strh	r3, [r4, #12]
   1c668:	e7f9      	b.n	1c65e <__sread+0x16>
   1c66a:	46c0      	nop			; (mov r8, r8)
   1c66c:	ffffefff 	.word	0xffffefff

0001c670 <__seofread>:
   1c670:	2000      	movs	r0, #0
   1c672:	4770      	bx	lr

0001c674 <__swrite>:
   1c674:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1c676:	001f      	movs	r7, r3
   1c678:	898b      	ldrh	r3, [r1, #12]
   1c67a:	0005      	movs	r5, r0
   1c67c:	000c      	movs	r4, r1
   1c67e:	0016      	movs	r6, r2
   1c680:	05db      	lsls	r3, r3, #23
   1c682:	d505      	bpl.n	1c690 <__swrite+0x1c>
   1c684:	230e      	movs	r3, #14
   1c686:	5ec9      	ldrsh	r1, [r1, r3]
   1c688:	2200      	movs	r2, #0
   1c68a:	2302      	movs	r3, #2
   1c68c:	f001 fafc 	bl	1dc88 <_lseek_r>
   1c690:	89a3      	ldrh	r3, [r4, #12]
   1c692:	4a05      	ldr	r2, [pc, #20]	; (1c6a8 <__swrite+0x34>)
   1c694:	0028      	movs	r0, r5
   1c696:	4013      	ands	r3, r2
   1c698:	81a3      	strh	r3, [r4, #12]
   1c69a:	0032      	movs	r2, r6
   1c69c:	230e      	movs	r3, #14
   1c69e:	5ee1      	ldrsh	r1, [r4, r3]
   1c6a0:	003b      	movs	r3, r7
   1c6a2:	f000 ff03 	bl	1d4ac <_write_r>
   1c6a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1c6a8:	ffffefff 	.word	0xffffefff

0001c6ac <__sseek>:
   1c6ac:	b570      	push	{r4, r5, r6, lr}
   1c6ae:	000c      	movs	r4, r1
   1c6b0:	250e      	movs	r5, #14
   1c6b2:	5f49      	ldrsh	r1, [r1, r5]
   1c6b4:	f001 fae8 	bl	1dc88 <_lseek_r>
   1c6b8:	89a3      	ldrh	r3, [r4, #12]
   1c6ba:	1c42      	adds	r2, r0, #1
   1c6bc:	d103      	bne.n	1c6c6 <__sseek+0x1a>
   1c6be:	4a05      	ldr	r2, [pc, #20]	; (1c6d4 <__sseek+0x28>)
   1c6c0:	4013      	ands	r3, r2
   1c6c2:	81a3      	strh	r3, [r4, #12]
   1c6c4:	bd70      	pop	{r4, r5, r6, pc}
   1c6c6:	2280      	movs	r2, #128	; 0x80
   1c6c8:	0152      	lsls	r2, r2, #5
   1c6ca:	4313      	orrs	r3, r2
   1c6cc:	81a3      	strh	r3, [r4, #12]
   1c6ce:	6560      	str	r0, [r4, #84]	; 0x54
   1c6d0:	e7f8      	b.n	1c6c4 <__sseek+0x18>
   1c6d2:	46c0      	nop			; (mov r8, r8)
   1c6d4:	ffffefff 	.word	0xffffefff

0001c6d8 <__sclose>:
   1c6d8:	b510      	push	{r4, lr}
   1c6da:	230e      	movs	r3, #14
   1c6dc:	5ec9      	ldrsh	r1, [r1, r3]
   1c6de:	f000 ff6f 	bl	1d5c0 <_close_r>
   1c6e2:	bd10      	pop	{r4, pc}

0001c6e4 <strcat>:
   1c6e4:	0002      	movs	r2, r0
   1c6e6:	b510      	push	{r4, lr}
   1c6e8:	7813      	ldrb	r3, [r2, #0]
   1c6ea:	2b00      	cmp	r3, #0
   1c6ec:	d105      	bne.n	1c6fa <strcat+0x16>
   1c6ee:	5ccc      	ldrb	r4, [r1, r3]
   1c6f0:	54d4      	strb	r4, [r2, r3]
   1c6f2:	3301      	adds	r3, #1
   1c6f4:	2c00      	cmp	r4, #0
   1c6f6:	d1fa      	bne.n	1c6ee <strcat+0xa>
   1c6f8:	bd10      	pop	{r4, pc}
   1c6fa:	3201      	adds	r2, #1
   1c6fc:	e7f4      	b.n	1c6e8 <strcat+0x4>

0001c6fe <strchr>:
   1c6fe:	b2c9      	uxtb	r1, r1
   1c700:	7803      	ldrb	r3, [r0, #0]
   1c702:	2b00      	cmp	r3, #0
   1c704:	d004      	beq.n	1c710 <strchr+0x12>
   1c706:	4299      	cmp	r1, r3
   1c708:	d100      	bne.n	1c70c <strchr+0xe>
   1c70a:	4770      	bx	lr
   1c70c:	3001      	adds	r0, #1
   1c70e:	e7f7      	b.n	1c700 <strchr+0x2>
   1c710:	424b      	negs	r3, r1
   1c712:	4159      	adcs	r1, r3
   1c714:	4249      	negs	r1, r1
   1c716:	4008      	ands	r0, r1
   1c718:	e7f7      	b.n	1c70a <strchr+0xc>

0001c71a <strcpy>:
   1c71a:	1c03      	adds	r3, r0, #0
   1c71c:	780a      	ldrb	r2, [r1, #0]
   1c71e:	3101      	adds	r1, #1
   1c720:	701a      	strb	r2, [r3, #0]
   1c722:	3301      	adds	r3, #1
   1c724:	2a00      	cmp	r2, #0
   1c726:	d1f9      	bne.n	1c71c <strcpy+0x2>
   1c728:	4770      	bx	lr

0001c72a <strlen>:
   1c72a:	2300      	movs	r3, #0
   1c72c:	5cc2      	ldrb	r2, [r0, r3]
   1c72e:	3301      	adds	r3, #1
   1c730:	2a00      	cmp	r2, #0
   1c732:	d1fb      	bne.n	1c72c <strlen+0x2>
   1c734:	1e58      	subs	r0, r3, #1
   1c736:	4770      	bx	lr

0001c738 <strncmp>:
   1c738:	2300      	movs	r3, #0
   1c73a:	b530      	push	{r4, r5, lr}
   1c73c:	429a      	cmp	r2, r3
   1c73e:	d00a      	beq.n	1c756 <strncmp+0x1e>
   1c740:	3a01      	subs	r2, #1
   1c742:	5cc4      	ldrb	r4, [r0, r3]
   1c744:	5ccd      	ldrb	r5, [r1, r3]
   1c746:	42ac      	cmp	r4, r5
   1c748:	d104      	bne.n	1c754 <strncmp+0x1c>
   1c74a:	429a      	cmp	r2, r3
   1c74c:	d002      	beq.n	1c754 <strncmp+0x1c>
   1c74e:	3301      	adds	r3, #1
   1c750:	2c00      	cmp	r4, #0
   1c752:	d1f6      	bne.n	1c742 <strncmp+0xa>
   1c754:	1b63      	subs	r3, r4, r5
   1c756:	0018      	movs	r0, r3
   1c758:	bd30      	pop	{r4, r5, pc}

0001c75a <strncpy>:
   1c75a:	b570      	push	{r4, r5, r6, lr}
   1c75c:	0004      	movs	r4, r0
   1c75e:	2a00      	cmp	r2, #0
   1c760:	d100      	bne.n	1c764 <strncpy+0xa>
   1c762:	bd70      	pop	{r4, r5, r6, pc}
   1c764:	780d      	ldrb	r5, [r1, #0]
   1c766:	1e56      	subs	r6, r2, #1
   1c768:	1c63      	adds	r3, r4, #1
   1c76a:	7025      	strb	r5, [r4, #0]
   1c76c:	3101      	adds	r1, #1
   1c76e:	2d00      	cmp	r5, #0
   1c770:	d105      	bne.n	1c77e <strncpy+0x24>
   1c772:	18a4      	adds	r4, r4, r2
   1c774:	429c      	cmp	r4, r3
   1c776:	d0f4      	beq.n	1c762 <strncpy+0x8>
   1c778:	701d      	strb	r5, [r3, #0]
   1c77a:	3301      	adds	r3, #1
   1c77c:	e7fa      	b.n	1c774 <strncpy+0x1a>
   1c77e:	001c      	movs	r4, r3
   1c780:	0032      	movs	r2, r6
   1c782:	e7ec      	b.n	1c75e <strncpy+0x4>

0001c784 <sulp>:
   1c784:	b570      	push	{r4, r5, r6, lr}
   1c786:	0016      	movs	r6, r2
   1c788:	000d      	movs	r5, r1
   1c78a:	f001 fd61 	bl	1e250 <__ulp>
   1c78e:	2e00      	cmp	r6, #0
   1c790:	d00d      	beq.n	1c7ae <sulp+0x2a>
   1c792:	236b      	movs	r3, #107	; 0x6b
   1c794:	006a      	lsls	r2, r5, #1
   1c796:	0d52      	lsrs	r2, r2, #21
   1c798:	1a9b      	subs	r3, r3, r2
   1c79a:	2b00      	cmp	r3, #0
   1c79c:	dd07      	ble.n	1c7ae <sulp+0x2a>
   1c79e:	2400      	movs	r4, #0
   1c7a0:	4a03      	ldr	r2, [pc, #12]	; (1c7b0 <sulp+0x2c>)
   1c7a2:	051b      	lsls	r3, r3, #20
   1c7a4:	189d      	adds	r5, r3, r2
   1c7a6:	002b      	movs	r3, r5
   1c7a8:	0022      	movs	r2, r4
   1c7aa:	f7fe fc13 	bl	1afd4 <__aeabi_dmul>
   1c7ae:	bd70      	pop	{r4, r5, r6, pc}
   1c7b0:	3ff00000 	.word	0x3ff00000

0001c7b4 <_strtod_l>:
   1c7b4:	b5f0      	push	{r4, r5, r6, r7, lr}
   1c7b6:	b0a5      	sub	sp, #148	; 0x94
   1c7b8:	9307      	str	r3, [sp, #28]
   1c7ba:	2300      	movs	r3, #0
   1c7bc:	9004      	str	r0, [sp, #16]
   1c7be:	9807      	ldr	r0, [sp, #28]
   1c7c0:	9320      	str	r3, [sp, #128]	; 0x80
   1c7c2:	9106      	str	r1, [sp, #24]
   1c7c4:	921a      	str	r2, [sp, #104]	; 0x68
   1c7c6:	f001 fa5d 	bl	1dc84 <__localeconv_l>
   1c7ca:	0005      	movs	r5, r0
   1c7cc:	6800      	ldr	r0, [r0, #0]
   1c7ce:	f7ff ffac 	bl	1c72a <strlen>
   1c7d2:	2600      	movs	r6, #0
   1c7d4:	2700      	movs	r7, #0
   1c7d6:	9b06      	ldr	r3, [sp, #24]
   1c7d8:	9005      	str	r0, [sp, #20]
   1c7da:	931f      	str	r3, [sp, #124]	; 0x7c
   1c7dc:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   1c7de:	781a      	ldrb	r2, [r3, #0]
   1c7e0:	2a0d      	cmp	r2, #13
   1c7e2:	d839      	bhi.n	1c858 <_strtod_l+0xa4>
   1c7e4:	2a09      	cmp	r2, #9
   1c7e6:	d23d      	bcs.n	1c864 <_strtod_l+0xb0>
   1c7e8:	2a00      	cmp	r2, #0
   1c7ea:	d044      	beq.n	1c876 <_strtod_l+0xc2>
   1c7ec:	2300      	movs	r3, #0
   1c7ee:	9312      	str	r3, [sp, #72]	; 0x48
   1c7f0:	2200      	movs	r2, #0
   1c7f2:	9c1f      	ldr	r4, [sp, #124]	; 0x7c
   1c7f4:	920c      	str	r2, [sp, #48]	; 0x30
   1c7f6:	7823      	ldrb	r3, [r4, #0]
   1c7f8:	2b30      	cmp	r3, #48	; 0x30
   1c7fa:	d000      	beq.n	1c7fe <_strtod_l+0x4a>
   1c7fc:	e07e      	b.n	1c8fc <_strtod_l+0x148>
   1c7fe:	7863      	ldrb	r3, [r4, #1]
   1c800:	2b58      	cmp	r3, #88	; 0x58
   1c802:	d002      	beq.n	1c80a <_strtod_l+0x56>
   1c804:	2b78      	cmp	r3, #120	; 0x78
   1c806:	d000      	beq.n	1c80a <_strtod_l+0x56>
   1c808:	e06e      	b.n	1c8e8 <_strtod_l+0x134>
   1c80a:	9b07      	ldr	r3, [sp, #28]
   1c80c:	4ab7      	ldr	r2, [pc, #732]	; (1caec <_strtod_l+0x338>)
   1c80e:	9302      	str	r3, [sp, #8]
   1c810:	9b12      	ldr	r3, [sp, #72]	; 0x48
   1c812:	a91f      	add	r1, sp, #124	; 0x7c
   1c814:	9301      	str	r3, [sp, #4]
   1c816:	ab20      	add	r3, sp, #128	; 0x80
   1c818:	9300      	str	r3, [sp, #0]
   1c81a:	9804      	ldr	r0, [sp, #16]
   1c81c:	ab21      	add	r3, sp, #132	; 0x84
   1c81e:	f000 ff3a 	bl	1d696 <__gethex>
   1c822:	2507      	movs	r5, #7
   1c824:	9005      	str	r0, [sp, #20]
   1c826:	4005      	ands	r5, r0
   1c828:	d005      	beq.n	1c836 <_strtod_l+0x82>
   1c82a:	2d06      	cmp	r5, #6
   1c82c:	d12f      	bne.n	1c88e <_strtod_l+0xda>
   1c82e:	2300      	movs	r3, #0
   1c830:	3401      	adds	r4, #1
   1c832:	941f      	str	r4, [sp, #124]	; 0x7c
   1c834:	9312      	str	r3, [sp, #72]	; 0x48
   1c836:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   1c838:	2b00      	cmp	r3, #0
   1c83a:	d002      	beq.n	1c842 <_strtod_l+0x8e>
   1c83c:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   1c83e:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
   1c840:	601a      	str	r2, [r3, #0]
   1c842:	9b12      	ldr	r3, [sp, #72]	; 0x48
   1c844:	2b00      	cmp	r3, #0
   1c846:	d01d      	beq.n	1c884 <_strtod_l+0xd0>
   1c848:	2380      	movs	r3, #128	; 0x80
   1c84a:	0032      	movs	r2, r6
   1c84c:	061b      	lsls	r3, r3, #24
   1c84e:	18fb      	adds	r3, r7, r3
   1c850:	0010      	movs	r0, r2
   1c852:	0019      	movs	r1, r3
   1c854:	b025      	add	sp, #148	; 0x94
   1c856:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1c858:	2a2b      	cmp	r2, #43	; 0x2b
   1c85a:	d005      	beq.n	1c868 <_strtod_l+0xb4>
   1c85c:	2a2d      	cmp	r2, #45	; 0x2d
   1c85e:	d014      	beq.n	1c88a <_strtod_l+0xd6>
   1c860:	2a20      	cmp	r2, #32
   1c862:	d1c3      	bne.n	1c7ec <_strtod_l+0x38>
   1c864:	3301      	adds	r3, #1
   1c866:	e7b8      	b.n	1c7da <_strtod_l+0x26>
   1c868:	2200      	movs	r2, #0
   1c86a:	9212      	str	r2, [sp, #72]	; 0x48
   1c86c:	1c5a      	adds	r2, r3, #1
   1c86e:	921f      	str	r2, [sp, #124]	; 0x7c
   1c870:	785b      	ldrb	r3, [r3, #1]
   1c872:	2b00      	cmp	r3, #0
   1c874:	d1bc      	bne.n	1c7f0 <_strtod_l+0x3c>
   1c876:	9b06      	ldr	r3, [sp, #24]
   1c878:	931f      	str	r3, [sp, #124]	; 0x7c
   1c87a:	2300      	movs	r3, #0
   1c87c:	9312      	str	r3, [sp, #72]	; 0x48
   1c87e:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   1c880:	2b00      	cmp	r3, #0
   1c882:	d1db      	bne.n	1c83c <_strtod_l+0x88>
   1c884:	0032      	movs	r2, r6
   1c886:	003b      	movs	r3, r7
   1c888:	e7e2      	b.n	1c850 <_strtod_l+0x9c>
   1c88a:	2201      	movs	r2, #1
   1c88c:	e7ed      	b.n	1c86a <_strtod_l+0xb6>
   1c88e:	9a20      	ldr	r2, [sp, #128]	; 0x80
   1c890:	2a00      	cmp	r2, #0
   1c892:	d007      	beq.n	1c8a4 <_strtod_l+0xf0>
   1c894:	2135      	movs	r1, #53	; 0x35
   1c896:	a822      	add	r0, sp, #136	; 0x88
   1c898:	f001 fdc7 	bl	1e42a <__copybits>
   1c89c:	9920      	ldr	r1, [sp, #128]	; 0x80
   1c89e:	9804      	ldr	r0, [sp, #16]
   1c8a0:	f001 fa40 	bl	1dd24 <_Bfree>
   1c8a4:	1e68      	subs	r0, r5, #1
   1c8a6:	2804      	cmp	r0, #4
   1c8a8:	d806      	bhi.n	1c8b8 <_strtod_l+0x104>
   1c8aa:	f002 ff93 	bl	1f7d4 <__gnu_thumb1_case_uqi>
   1c8ae:	030c      	.short	0x030c
   1c8b0:	1917      	.short	0x1917
   1c8b2:	0c          	.byte	0x0c
   1c8b3:	00          	.byte	0x00
   1c8b4:	9e22      	ldr	r6, [sp, #136]	; 0x88
   1c8b6:	9f23      	ldr	r7, [sp, #140]	; 0x8c
   1c8b8:	9b05      	ldr	r3, [sp, #20]
   1c8ba:	071b      	lsls	r3, r3, #28
   1c8bc:	d5bb      	bpl.n	1c836 <_strtod_l+0x82>
   1c8be:	2380      	movs	r3, #128	; 0x80
   1c8c0:	061b      	lsls	r3, r3, #24
   1c8c2:	431f      	orrs	r7, r3
   1c8c4:	e7b7      	b.n	1c836 <_strtod_l+0x82>
   1c8c6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   1c8c8:	4a89      	ldr	r2, [pc, #548]	; (1caf0 <_strtod_l+0x33c>)
   1c8ca:	498a      	ldr	r1, [pc, #552]	; (1caf4 <_strtod_l+0x340>)
   1c8cc:	401a      	ands	r2, r3
   1c8ce:	9b21      	ldr	r3, [sp, #132]	; 0x84
   1c8d0:	9e22      	ldr	r6, [sp, #136]	; 0x88
   1c8d2:	185b      	adds	r3, r3, r1
   1c8d4:	051b      	lsls	r3, r3, #20
   1c8d6:	431a      	orrs	r2, r3
   1c8d8:	0017      	movs	r7, r2
   1c8da:	e7ed      	b.n	1c8b8 <_strtod_l+0x104>
   1c8dc:	4f86      	ldr	r7, [pc, #536]	; (1caf8 <_strtod_l+0x344>)
   1c8de:	e7eb      	b.n	1c8b8 <_strtod_l+0x104>
   1c8e0:	2601      	movs	r6, #1
   1c8e2:	4f86      	ldr	r7, [pc, #536]	; (1cafc <_strtod_l+0x348>)
   1c8e4:	4276      	negs	r6, r6
   1c8e6:	e7e7      	b.n	1c8b8 <_strtod_l+0x104>
   1c8e8:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   1c8ea:	1c5a      	adds	r2, r3, #1
   1c8ec:	921f      	str	r2, [sp, #124]	; 0x7c
   1c8ee:	785b      	ldrb	r3, [r3, #1]
   1c8f0:	2b30      	cmp	r3, #48	; 0x30
   1c8f2:	d0f9      	beq.n	1c8e8 <_strtod_l+0x134>
   1c8f4:	2b00      	cmp	r3, #0
   1c8f6:	d09e      	beq.n	1c836 <_strtod_l+0x82>
   1c8f8:	2301      	movs	r3, #1
   1c8fa:	930c      	str	r3, [sp, #48]	; 0x30
   1c8fc:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   1c8fe:	220a      	movs	r2, #10
   1c900:	9313      	str	r3, [sp, #76]	; 0x4c
   1c902:	2300      	movs	r3, #0
   1c904:	930b      	str	r3, [sp, #44]	; 0x2c
   1c906:	930a      	str	r3, [sp, #40]	; 0x28
   1c908:	9308      	str	r3, [sp, #32]
   1c90a:	981f      	ldr	r0, [sp, #124]	; 0x7c
   1c90c:	7804      	ldrb	r4, [r0, #0]
   1c90e:	0023      	movs	r3, r4
   1c910:	3b30      	subs	r3, #48	; 0x30
   1c912:	b2d9      	uxtb	r1, r3
   1c914:	2909      	cmp	r1, #9
   1c916:	d926      	bls.n	1c966 <_strtod_l+0x1b2>
   1c918:	9a05      	ldr	r2, [sp, #20]
   1c91a:	6829      	ldr	r1, [r5, #0]
   1c91c:	f7ff ff0c 	bl	1c738 <strncmp>
   1c920:	2800      	cmp	r0, #0
   1c922:	d032      	beq.n	1c98a <_strtod_l+0x1d6>
   1c924:	2000      	movs	r0, #0
   1c926:	0023      	movs	r3, r4
   1c928:	4684      	mov	ip, r0
   1c92a:	9a08      	ldr	r2, [sp, #32]
   1c92c:	9007      	str	r0, [sp, #28]
   1c92e:	9205      	str	r2, [sp, #20]
   1c930:	2220      	movs	r2, #32
   1c932:	0019      	movs	r1, r3
   1c934:	4391      	bics	r1, r2
   1c936:	000a      	movs	r2, r1
   1c938:	2100      	movs	r1, #0
   1c93a:	2a45      	cmp	r2, #69	; 0x45
   1c93c:	d000      	beq.n	1c940 <_strtod_l+0x18c>
   1c93e:	e0a8      	b.n	1ca92 <_strtod_l+0x2de>
   1c940:	9b05      	ldr	r3, [sp, #20]
   1c942:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   1c944:	4303      	orrs	r3, r0
   1c946:	4313      	orrs	r3, r2
   1c948:	428b      	cmp	r3, r1
   1c94a:	d094      	beq.n	1c876 <_strtod_l+0xc2>
   1c94c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   1c94e:	9306      	str	r3, [sp, #24]
   1c950:	3301      	adds	r3, #1
   1c952:	931f      	str	r3, [sp, #124]	; 0x7c
   1c954:	9b06      	ldr	r3, [sp, #24]
   1c956:	785b      	ldrb	r3, [r3, #1]
   1c958:	2b2b      	cmp	r3, #43	; 0x2b
   1c95a:	d072      	beq.n	1ca42 <_strtod_l+0x28e>
   1c95c:	000c      	movs	r4, r1
   1c95e:	2b2d      	cmp	r3, #45	; 0x2d
   1c960:	d175      	bne.n	1ca4e <_strtod_l+0x29a>
   1c962:	2401      	movs	r4, #1
   1c964:	e06e      	b.n	1ca44 <_strtod_l+0x290>
   1c966:	9908      	ldr	r1, [sp, #32]
   1c968:	2908      	cmp	r1, #8
   1c96a:	dc09      	bgt.n	1c980 <_strtod_l+0x1cc>
   1c96c:	990a      	ldr	r1, [sp, #40]	; 0x28
   1c96e:	4351      	muls	r1, r2
   1c970:	185b      	adds	r3, r3, r1
   1c972:	930a      	str	r3, [sp, #40]	; 0x28
   1c974:	9b08      	ldr	r3, [sp, #32]
   1c976:	3001      	adds	r0, #1
   1c978:	3301      	adds	r3, #1
   1c97a:	9308      	str	r3, [sp, #32]
   1c97c:	901f      	str	r0, [sp, #124]	; 0x7c
   1c97e:	e7c4      	b.n	1c90a <_strtod_l+0x156>
   1c980:	990b      	ldr	r1, [sp, #44]	; 0x2c
   1c982:	4351      	muls	r1, r2
   1c984:	185b      	adds	r3, r3, r1
   1c986:	930b      	str	r3, [sp, #44]	; 0x2c
   1c988:	e7f4      	b.n	1c974 <_strtod_l+0x1c0>
   1c98a:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
   1c98c:	9b05      	ldr	r3, [sp, #20]
   1c98e:	4694      	mov	ip, r2
   1c990:	9a08      	ldr	r2, [sp, #32]
   1c992:	4463      	add	r3, ip
   1c994:	931f      	str	r3, [sp, #124]	; 0x7c
   1c996:	781b      	ldrb	r3, [r3, #0]
   1c998:	2a00      	cmp	r2, #0
   1c99a:	d149      	bne.n	1ca30 <_strtod_l+0x27c>
   1c99c:	0010      	movs	r0, r2
   1c99e:	2b30      	cmp	r3, #48	; 0x30
   1c9a0:	d028      	beq.n	1c9f4 <_strtod_l+0x240>
   1c9a2:	001a      	movs	r2, r3
   1c9a4:	3a31      	subs	r2, #49	; 0x31
   1c9a6:	2a08      	cmp	r2, #8
   1c9a8:	d846      	bhi.n	1ca38 <_strtod_l+0x284>
   1c9aa:	4684      	mov	ip, r0
   1c9ac:	2000      	movs	r0, #0
   1c9ae:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
   1c9b0:	9005      	str	r0, [sp, #20]
   1c9b2:	9213      	str	r2, [sp, #76]	; 0x4c
   1c9b4:	3b30      	subs	r3, #48	; 0x30
   1c9b6:	1c42      	adds	r2, r0, #1
   1c9b8:	2b00      	cmp	r3, #0
   1c9ba:	d00f      	beq.n	1c9dc <_strtod_l+0x228>
   1c9bc:	210a      	movs	r1, #10
   1c9be:	4494      	add	ip, r2
   1c9c0:	9a05      	ldr	r2, [sp, #20]
   1c9c2:	1810      	adds	r0, r2, r0
   1c9c4:	4282      	cmp	r2, r0
   1c9c6:	d11b      	bne.n	1ca00 <_strtod_l+0x24c>
   1c9c8:	1c51      	adds	r1, r2, #1
   1c9ca:	9105      	str	r1, [sp, #20]
   1c9cc:	2a08      	cmp	r2, #8
   1c9ce:	dc25      	bgt.n	1ca1c <_strtod_l+0x268>
   1c9d0:	220a      	movs	r2, #10
   1c9d2:	990a      	ldr	r1, [sp, #40]	; 0x28
   1c9d4:	434a      	muls	r2, r1
   1c9d6:	189b      	adds	r3, r3, r2
   1c9d8:	2200      	movs	r2, #0
   1c9da:	930a      	str	r3, [sp, #40]	; 0x28
   1c9dc:	0010      	movs	r0, r2
   1c9de:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   1c9e0:	1c59      	adds	r1, r3, #1
   1c9e2:	911f      	str	r1, [sp, #124]	; 0x7c
   1c9e4:	785b      	ldrb	r3, [r3, #1]
   1c9e6:	001a      	movs	r2, r3
   1c9e8:	3a30      	subs	r2, #48	; 0x30
   1c9ea:	2a09      	cmp	r2, #9
   1c9ec:	d9e2      	bls.n	1c9b4 <_strtod_l+0x200>
   1c9ee:	2201      	movs	r2, #1
   1c9f0:	9207      	str	r2, [sp, #28]
   1c9f2:	e79d      	b.n	1c930 <_strtod_l+0x17c>
   1c9f4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   1c9f6:	3001      	adds	r0, #1
   1c9f8:	1c5a      	adds	r2, r3, #1
   1c9fa:	921f      	str	r2, [sp, #124]	; 0x7c
   1c9fc:	785b      	ldrb	r3, [r3, #1]
   1c9fe:	e7ce      	b.n	1c99e <_strtod_l+0x1ea>
   1ca00:	3201      	adds	r2, #1
   1ca02:	1e54      	subs	r4, r2, #1
   1ca04:	2c08      	cmp	r4, #8
   1ca06:	dc03      	bgt.n	1ca10 <_strtod_l+0x25c>
   1ca08:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   1ca0a:	434c      	muls	r4, r1
   1ca0c:	940a      	str	r4, [sp, #40]	; 0x28
   1ca0e:	e7d9      	b.n	1c9c4 <_strtod_l+0x210>
   1ca10:	2a10      	cmp	r2, #16
   1ca12:	dcd7      	bgt.n	1c9c4 <_strtod_l+0x210>
   1ca14:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
   1ca16:	434c      	muls	r4, r1
   1ca18:	940b      	str	r4, [sp, #44]	; 0x2c
   1ca1a:	e7d3      	b.n	1c9c4 <_strtod_l+0x210>
   1ca1c:	9905      	ldr	r1, [sp, #20]
   1ca1e:	2200      	movs	r2, #0
   1ca20:	2910      	cmp	r1, #16
   1ca22:	dcdb      	bgt.n	1c9dc <_strtod_l+0x228>
   1ca24:	210a      	movs	r1, #10
   1ca26:	980b      	ldr	r0, [sp, #44]	; 0x2c
   1ca28:	4341      	muls	r1, r0
   1ca2a:	185b      	adds	r3, r3, r1
   1ca2c:	930b      	str	r3, [sp, #44]	; 0x2c
   1ca2e:	e7d5      	b.n	1c9dc <_strtod_l+0x228>
   1ca30:	9a08      	ldr	r2, [sp, #32]
   1ca32:	4684      	mov	ip, r0
   1ca34:	9205      	str	r2, [sp, #20]
   1ca36:	e7d6      	b.n	1c9e6 <_strtod_l+0x232>
   1ca38:	2200      	movs	r2, #0
   1ca3a:	4694      	mov	ip, r2
   1ca3c:	9205      	str	r2, [sp, #20]
   1ca3e:	3201      	adds	r2, #1
   1ca40:	e7d6      	b.n	1c9f0 <_strtod_l+0x23c>
   1ca42:	000c      	movs	r4, r1
   1ca44:	9b06      	ldr	r3, [sp, #24]
   1ca46:	3302      	adds	r3, #2
   1ca48:	931f      	str	r3, [sp, #124]	; 0x7c
   1ca4a:	9b06      	ldr	r3, [sp, #24]
   1ca4c:	789b      	ldrb	r3, [r3, #2]
   1ca4e:	001a      	movs	r2, r3
   1ca50:	3a30      	subs	r2, #48	; 0x30
   1ca52:	2a09      	cmp	r2, #9
   1ca54:	d861      	bhi.n	1cb1a <_strtod_l+0x366>
   1ca56:	2b30      	cmp	r3, #48	; 0x30
   1ca58:	d042      	beq.n	1cae0 <_strtod_l+0x32c>
   1ca5a:	001a      	movs	r2, r3
   1ca5c:	3a31      	subs	r2, #49	; 0x31
   1ca5e:	2100      	movs	r1, #0
   1ca60:	2a08      	cmp	r2, #8
   1ca62:	d816      	bhi.n	1ca92 <_strtod_l+0x2de>
   1ca64:	3b30      	subs	r3, #48	; 0x30
   1ca66:	9d1f      	ldr	r5, [sp, #124]	; 0x7c
   1ca68:	930e      	str	r3, [sp, #56]	; 0x38
   1ca6a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   1ca6c:	1c59      	adds	r1, r3, #1
   1ca6e:	911f      	str	r1, [sp, #124]	; 0x7c
   1ca70:	785b      	ldrb	r3, [r3, #1]
   1ca72:	001a      	movs	r2, r3
   1ca74:	3a30      	subs	r2, #48	; 0x30
   1ca76:	2a09      	cmp	r2, #9
   1ca78:	d948      	bls.n	1cb0c <_strtod_l+0x358>
   1ca7a:	1b4a      	subs	r2, r1, r5
   1ca7c:	4d20      	ldr	r5, [pc, #128]	; (1cb00 <_strtod_l+0x34c>)
   1ca7e:	0029      	movs	r1, r5
   1ca80:	2a08      	cmp	r2, #8
   1ca82:	dc03      	bgt.n	1ca8c <_strtod_l+0x2d8>
   1ca84:	990e      	ldr	r1, [sp, #56]	; 0x38
   1ca86:	42a9      	cmp	r1, r5
   1ca88:	dd00      	ble.n	1ca8c <_strtod_l+0x2d8>
   1ca8a:	0029      	movs	r1, r5
   1ca8c:	2c00      	cmp	r4, #0
   1ca8e:	d000      	beq.n	1ca92 <_strtod_l+0x2de>
   1ca90:	4249      	negs	r1, r1
   1ca92:	9a05      	ldr	r2, [sp, #20]
   1ca94:	2a00      	cmp	r2, #0
   1ca96:	d163      	bne.n	1cb60 <_strtod_l+0x3ac>
   1ca98:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   1ca9a:	4310      	orrs	r0, r2
   1ca9c:	d000      	beq.n	1caa0 <_strtod_l+0x2ec>
   1ca9e:	e6ca      	b.n	1c836 <_strtod_l+0x82>
   1caa0:	9a07      	ldr	r2, [sp, #28]
   1caa2:	2a00      	cmp	r2, #0
   1caa4:	d000      	beq.n	1caa8 <_strtod_l+0x2f4>
   1caa6:	e6e6      	b.n	1c876 <_strtod_l+0xc2>
   1caa8:	2b4e      	cmp	r3, #78	; 0x4e
   1caaa:	d03f      	beq.n	1cb2c <_strtod_l+0x378>
   1caac:	dc39      	bgt.n	1cb22 <_strtod_l+0x36e>
   1caae:	2b49      	cmp	r3, #73	; 0x49
   1cab0:	d000      	beq.n	1cab4 <_strtod_l+0x300>
   1cab2:	e6e0      	b.n	1c876 <_strtod_l+0xc2>
   1cab4:	4913      	ldr	r1, [pc, #76]	; (1cb04 <_strtod_l+0x350>)
   1cab6:	a81f      	add	r0, sp, #124	; 0x7c
   1cab8:	f001 f826 	bl	1db08 <__match>
   1cabc:	2800      	cmp	r0, #0
   1cabe:	d100      	bne.n	1cac2 <_strtod_l+0x30e>
   1cac0:	e6d9      	b.n	1c876 <_strtod_l+0xc2>
   1cac2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   1cac4:	4910      	ldr	r1, [pc, #64]	; (1cb08 <_strtod_l+0x354>)
   1cac6:	3b01      	subs	r3, #1
   1cac8:	a81f      	add	r0, sp, #124	; 0x7c
   1caca:	931f      	str	r3, [sp, #124]	; 0x7c
   1cacc:	f001 f81c 	bl	1db08 <__match>
   1cad0:	2800      	cmp	r0, #0
   1cad2:	d102      	bne.n	1cada <_strtod_l+0x326>
   1cad4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   1cad6:	3301      	adds	r3, #1
   1cad8:	931f      	str	r3, [sp, #124]	; 0x7c
   1cada:	4f07      	ldr	r7, [pc, #28]	; (1caf8 <_strtod_l+0x344>)
   1cadc:	2600      	movs	r6, #0
   1cade:	e6aa      	b.n	1c836 <_strtod_l+0x82>
   1cae0:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   1cae2:	1c5a      	adds	r2, r3, #1
   1cae4:	921f      	str	r2, [sp, #124]	; 0x7c
   1cae6:	785b      	ldrb	r3, [r3, #1]
   1cae8:	e7b5      	b.n	1ca56 <_strtod_l+0x2a2>
   1caea:	46c0      	nop			; (mov r8, r8)
   1caec:	00021d0c 	.word	0x00021d0c
   1caf0:	ffefffff 	.word	0xffefffff
   1caf4:	00000433 	.word	0x00000433
   1caf8:	7ff00000 	.word	0x7ff00000
   1cafc:	7fffffff 	.word	0x7fffffff
   1cb00:	00004e1f 	.word	0x00004e1f
   1cb04:	00021cfe 	.word	0x00021cfe
   1cb08:	00021d01 	.word	0x00021d01
   1cb0c:	220a      	movs	r2, #10
   1cb0e:	990e      	ldr	r1, [sp, #56]	; 0x38
   1cb10:	434a      	muls	r2, r1
   1cb12:	18d2      	adds	r2, r2, r3
   1cb14:	3a30      	subs	r2, #48	; 0x30
   1cb16:	920e      	str	r2, [sp, #56]	; 0x38
   1cb18:	e7a7      	b.n	1ca6a <_strtod_l+0x2b6>
   1cb1a:	9a06      	ldr	r2, [sp, #24]
   1cb1c:	2100      	movs	r1, #0
   1cb1e:	921f      	str	r2, [sp, #124]	; 0x7c
   1cb20:	e7b7      	b.n	1ca92 <_strtod_l+0x2de>
   1cb22:	2b69      	cmp	r3, #105	; 0x69
   1cb24:	d0c6      	beq.n	1cab4 <_strtod_l+0x300>
   1cb26:	2b6e      	cmp	r3, #110	; 0x6e
   1cb28:	d000      	beq.n	1cb2c <_strtod_l+0x378>
   1cb2a:	e6a4      	b.n	1c876 <_strtod_l+0xc2>
   1cb2c:	498b      	ldr	r1, [pc, #556]	; (1cd5c <_strtod_l+0x5a8>)
   1cb2e:	a81f      	add	r0, sp, #124	; 0x7c
   1cb30:	f000 ffea 	bl	1db08 <__match>
   1cb34:	2800      	cmp	r0, #0
   1cb36:	d100      	bne.n	1cb3a <_strtod_l+0x386>
   1cb38:	e69d      	b.n	1c876 <_strtod_l+0xc2>
   1cb3a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   1cb3c:	781b      	ldrb	r3, [r3, #0]
   1cb3e:	2b28      	cmp	r3, #40	; 0x28
   1cb40:	d10c      	bne.n	1cb5c <_strtod_l+0x3a8>
   1cb42:	aa22      	add	r2, sp, #136	; 0x88
   1cb44:	4986      	ldr	r1, [pc, #536]	; (1cd60 <_strtod_l+0x5ac>)
   1cb46:	a81f      	add	r0, sp, #124	; 0x7c
   1cb48:	f000 fff2 	bl	1db30 <__hexnan>
   1cb4c:	2805      	cmp	r0, #5
   1cb4e:	d105      	bne.n	1cb5c <_strtod_l+0x3a8>
   1cb50:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   1cb52:	4a84      	ldr	r2, [pc, #528]	; (1cd64 <_strtod_l+0x5b0>)
   1cb54:	9e22      	ldr	r6, [sp, #136]	; 0x88
   1cb56:	431a      	orrs	r2, r3
   1cb58:	0017      	movs	r7, r2
   1cb5a:	e66c      	b.n	1c836 <_strtod_l+0x82>
   1cb5c:	4f82      	ldr	r7, [pc, #520]	; (1cd68 <_strtod_l+0x5b4>)
   1cb5e:	e7bd      	b.n	1cadc <_strtod_l+0x328>
   1cb60:	4663      	mov	r3, ip
   1cb62:	1acb      	subs	r3, r1, r3
   1cb64:	9307      	str	r3, [sp, #28]
   1cb66:	9b08      	ldr	r3, [sp, #32]
   1cb68:	2b00      	cmp	r3, #0
   1cb6a:	d101      	bne.n	1cb70 <_strtod_l+0x3bc>
   1cb6c:	9b05      	ldr	r3, [sp, #20]
   1cb6e:	9308      	str	r3, [sp, #32]
   1cb70:	9c05      	ldr	r4, [sp, #20]
   1cb72:	2c10      	cmp	r4, #16
   1cb74:	dd00      	ble.n	1cb78 <_strtod_l+0x3c4>
   1cb76:	2410      	movs	r4, #16
   1cb78:	980a      	ldr	r0, [sp, #40]	; 0x28
   1cb7a:	f7ff f837 	bl	1bbec <__aeabi_ui2d>
   1cb7e:	0006      	movs	r6, r0
   1cb80:	000f      	movs	r7, r1
   1cb82:	2c09      	cmp	r4, #9
   1cb84:	dd15      	ble.n	1cbb2 <_strtod_l+0x3fe>
   1cb86:	0022      	movs	r2, r4
   1cb88:	4b78      	ldr	r3, [pc, #480]	; (1cd6c <_strtod_l+0x5b8>)
   1cb8a:	3a09      	subs	r2, #9
   1cb8c:	00d2      	lsls	r2, r2, #3
   1cb8e:	189b      	adds	r3, r3, r2
   1cb90:	681a      	ldr	r2, [r3, #0]
   1cb92:	685b      	ldr	r3, [r3, #4]
   1cb94:	f7fe fa1e 	bl	1afd4 <__aeabi_dmul>
   1cb98:	0006      	movs	r6, r0
   1cb9a:	980b      	ldr	r0, [sp, #44]	; 0x2c
   1cb9c:	000f      	movs	r7, r1
   1cb9e:	f7ff f825 	bl	1bbec <__aeabi_ui2d>
   1cba2:	0002      	movs	r2, r0
   1cba4:	000b      	movs	r3, r1
   1cba6:	0030      	movs	r0, r6
   1cba8:	0039      	movs	r1, r7
   1cbaa:	f7fd facf 	bl	1a14c <__aeabi_dadd>
   1cbae:	0006      	movs	r6, r0
   1cbb0:	000f      	movs	r7, r1
   1cbb2:	9b05      	ldr	r3, [sp, #20]
   1cbb4:	2b0f      	cmp	r3, #15
   1cbb6:	dc39      	bgt.n	1cc2c <_strtod_l+0x478>
   1cbb8:	9b07      	ldr	r3, [sp, #28]
   1cbba:	2b00      	cmp	r3, #0
   1cbbc:	d100      	bne.n	1cbc0 <_strtod_l+0x40c>
   1cbbe:	e63a      	b.n	1c836 <_strtod_l+0x82>
   1cbc0:	dd26      	ble.n	1cc10 <_strtod_l+0x45c>
   1cbc2:	2b16      	cmp	r3, #22
   1cbc4:	dc0b      	bgt.n	1cbde <_strtod_l+0x42a>
   1cbc6:	4969      	ldr	r1, [pc, #420]	; (1cd6c <_strtod_l+0x5b8>)
   1cbc8:	00db      	lsls	r3, r3, #3
   1cbca:	18c9      	adds	r1, r1, r3
   1cbcc:	0032      	movs	r2, r6
   1cbce:	6808      	ldr	r0, [r1, #0]
   1cbd0:	6849      	ldr	r1, [r1, #4]
   1cbd2:	003b      	movs	r3, r7
   1cbd4:	f7fe f9fe 	bl	1afd4 <__aeabi_dmul>
   1cbd8:	0006      	movs	r6, r0
   1cbda:	000f      	movs	r7, r1
   1cbdc:	e62b      	b.n	1c836 <_strtod_l+0x82>
   1cbde:	2325      	movs	r3, #37	; 0x25
   1cbe0:	9a05      	ldr	r2, [sp, #20]
   1cbe2:	1a9b      	subs	r3, r3, r2
   1cbe4:	9a07      	ldr	r2, [sp, #28]
   1cbe6:	429a      	cmp	r2, r3
   1cbe8:	dc20      	bgt.n	1cc2c <_strtod_l+0x478>
   1cbea:	240f      	movs	r4, #15
   1cbec:	9b05      	ldr	r3, [sp, #20]
   1cbee:	4d5f      	ldr	r5, [pc, #380]	; (1cd6c <_strtod_l+0x5b8>)
   1cbf0:	1ae4      	subs	r4, r4, r3
   1cbf2:	00e1      	lsls	r1, r4, #3
   1cbf4:	1869      	adds	r1, r5, r1
   1cbf6:	0032      	movs	r2, r6
   1cbf8:	6808      	ldr	r0, [r1, #0]
   1cbfa:	6849      	ldr	r1, [r1, #4]
   1cbfc:	003b      	movs	r3, r7
   1cbfe:	f7fe f9e9 	bl	1afd4 <__aeabi_dmul>
   1cc02:	9b07      	ldr	r3, [sp, #28]
   1cc04:	1b1c      	subs	r4, r3, r4
   1cc06:	00e4      	lsls	r4, r4, #3
   1cc08:	192c      	adds	r4, r5, r4
   1cc0a:	6822      	ldr	r2, [r4, #0]
   1cc0c:	6863      	ldr	r3, [r4, #4]
   1cc0e:	e7e1      	b.n	1cbd4 <_strtod_l+0x420>
   1cc10:	9b07      	ldr	r3, [sp, #28]
   1cc12:	3316      	adds	r3, #22
   1cc14:	db0a      	blt.n	1cc2c <_strtod_l+0x478>
   1cc16:	9b07      	ldr	r3, [sp, #28]
   1cc18:	0030      	movs	r0, r6
   1cc1a:	00da      	lsls	r2, r3, #3
   1cc1c:	4b53      	ldr	r3, [pc, #332]	; (1cd6c <_strtod_l+0x5b8>)
   1cc1e:	0039      	movs	r1, r7
   1cc20:	1a9b      	subs	r3, r3, r2
   1cc22:	681a      	ldr	r2, [r3, #0]
   1cc24:	685b      	ldr	r3, [r3, #4]
   1cc26:	f7fd fda1 	bl	1a76c <__aeabi_ddiv>
   1cc2a:	e7d5      	b.n	1cbd8 <_strtod_l+0x424>
   1cc2c:	9b05      	ldr	r3, [sp, #20]
   1cc2e:	1b1c      	subs	r4, r3, r4
   1cc30:	9b07      	ldr	r3, [sp, #28]
   1cc32:	18e4      	adds	r4, r4, r3
   1cc34:	2c00      	cmp	r4, #0
   1cc36:	dd6e      	ble.n	1cd16 <_strtod_l+0x562>
   1cc38:	230f      	movs	r3, #15
   1cc3a:	4023      	ands	r3, r4
   1cc3c:	d00a      	beq.n	1cc54 <_strtod_l+0x4a0>
   1cc3e:	494b      	ldr	r1, [pc, #300]	; (1cd6c <_strtod_l+0x5b8>)
   1cc40:	00db      	lsls	r3, r3, #3
   1cc42:	18c9      	adds	r1, r1, r3
   1cc44:	0032      	movs	r2, r6
   1cc46:	6808      	ldr	r0, [r1, #0]
   1cc48:	6849      	ldr	r1, [r1, #4]
   1cc4a:	003b      	movs	r3, r7
   1cc4c:	f7fe f9c2 	bl	1afd4 <__aeabi_dmul>
   1cc50:	0006      	movs	r6, r0
   1cc52:	000f      	movs	r7, r1
   1cc54:	230f      	movs	r3, #15
   1cc56:	439c      	bics	r4, r3
   1cc58:	d048      	beq.n	1ccec <_strtod_l+0x538>
   1cc5a:	3326      	adds	r3, #38	; 0x26
   1cc5c:	33ff      	adds	r3, #255	; 0xff
   1cc5e:	429c      	cmp	r4, r3
   1cc60:	dd21      	ble.n	1cca6 <_strtod_l+0x4f2>
   1cc62:	2400      	movs	r4, #0
   1cc64:	9405      	str	r4, [sp, #20]
   1cc66:	940a      	str	r4, [sp, #40]	; 0x28
   1cc68:	9407      	str	r4, [sp, #28]
   1cc6a:	2322      	movs	r3, #34	; 0x22
   1cc6c:	2600      	movs	r6, #0
   1cc6e:	9a04      	ldr	r2, [sp, #16]
   1cc70:	4f3c      	ldr	r7, [pc, #240]	; (1cd64 <_strtod_l+0x5b0>)
   1cc72:	6013      	str	r3, [r2, #0]
   1cc74:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1cc76:	42b3      	cmp	r3, r6
   1cc78:	d100      	bne.n	1cc7c <_strtod_l+0x4c8>
   1cc7a:	e5dc      	b.n	1c836 <_strtod_l+0x82>
   1cc7c:	9920      	ldr	r1, [sp, #128]	; 0x80
   1cc7e:	9804      	ldr	r0, [sp, #16]
   1cc80:	f001 f850 	bl	1dd24 <_Bfree>
   1cc84:	9907      	ldr	r1, [sp, #28]
   1cc86:	9804      	ldr	r0, [sp, #16]
   1cc88:	f001 f84c 	bl	1dd24 <_Bfree>
   1cc8c:	9905      	ldr	r1, [sp, #20]
   1cc8e:	9804      	ldr	r0, [sp, #16]
   1cc90:	f001 f848 	bl	1dd24 <_Bfree>
   1cc94:	990a      	ldr	r1, [sp, #40]	; 0x28
   1cc96:	9804      	ldr	r0, [sp, #16]
   1cc98:	f001 f844 	bl	1dd24 <_Bfree>
   1cc9c:	0021      	movs	r1, r4
   1cc9e:	9804      	ldr	r0, [sp, #16]
   1cca0:	f001 f840 	bl	1dd24 <_Bfree>
   1cca4:	e5c7      	b.n	1c836 <_strtod_l+0x82>
   1cca6:	2300      	movs	r3, #0
   1cca8:	0030      	movs	r0, r6
   1ccaa:	0039      	movs	r1, r7
   1ccac:	001d      	movs	r5, r3
   1ccae:	1124      	asrs	r4, r4, #4
   1ccb0:	2c01      	cmp	r4, #1
   1ccb2:	dc1e      	bgt.n	1ccf2 <_strtod_l+0x53e>
   1ccb4:	2b00      	cmp	r3, #0
   1ccb6:	d001      	beq.n	1ccbc <_strtod_l+0x508>
   1ccb8:	0006      	movs	r6, r0
   1ccba:	000f      	movs	r7, r1
   1ccbc:	4b2c      	ldr	r3, [pc, #176]	; (1cd70 <_strtod_l+0x5bc>)
   1ccbe:	00ed      	lsls	r5, r5, #3
   1ccc0:	18ff      	adds	r7, r7, r3
   1ccc2:	4b2c      	ldr	r3, [pc, #176]	; (1cd74 <_strtod_l+0x5c0>)
   1ccc4:	0032      	movs	r2, r6
   1ccc6:	195d      	adds	r5, r3, r5
   1ccc8:	6828      	ldr	r0, [r5, #0]
   1ccca:	6869      	ldr	r1, [r5, #4]
   1cccc:	003b      	movs	r3, r7
   1ccce:	f7fe f981 	bl	1afd4 <__aeabi_dmul>
   1ccd2:	4b24      	ldr	r3, [pc, #144]	; (1cd64 <_strtod_l+0x5b0>)
   1ccd4:	000f      	movs	r7, r1
   1ccd6:	400b      	ands	r3, r1
   1ccd8:	4927      	ldr	r1, [pc, #156]	; (1cd78 <_strtod_l+0x5c4>)
   1ccda:	0006      	movs	r6, r0
   1ccdc:	428b      	cmp	r3, r1
   1ccde:	d8c0      	bhi.n	1cc62 <_strtod_l+0x4ae>
   1cce0:	4926      	ldr	r1, [pc, #152]	; (1cd7c <_strtod_l+0x5c8>)
   1cce2:	428b      	cmp	r3, r1
   1cce4:	d913      	bls.n	1cd0e <_strtod_l+0x55a>
   1cce6:	2601      	movs	r6, #1
   1cce8:	4f25      	ldr	r7, [pc, #148]	; (1cd80 <_strtod_l+0x5cc>)
   1ccea:	4276      	negs	r6, r6
   1ccec:	2300      	movs	r3, #0
   1ccee:	9306      	str	r3, [sp, #24]
   1ccf0:	e074      	b.n	1cddc <_strtod_l+0x628>
   1ccf2:	2201      	movs	r2, #1
   1ccf4:	4214      	tst	r4, r2
   1ccf6:	d007      	beq.n	1cd08 <_strtod_l+0x554>
   1ccf8:	4a1e      	ldr	r2, [pc, #120]	; (1cd74 <_strtod_l+0x5c0>)
   1ccfa:	00eb      	lsls	r3, r5, #3
   1ccfc:	189b      	adds	r3, r3, r2
   1ccfe:	681a      	ldr	r2, [r3, #0]
   1cd00:	685b      	ldr	r3, [r3, #4]
   1cd02:	f7fe f967 	bl	1afd4 <__aeabi_dmul>
   1cd06:	2301      	movs	r3, #1
   1cd08:	3501      	adds	r5, #1
   1cd0a:	1064      	asrs	r4, r4, #1
   1cd0c:	e7d0      	b.n	1ccb0 <_strtod_l+0x4fc>
   1cd0e:	23d4      	movs	r3, #212	; 0xd4
   1cd10:	049b      	lsls	r3, r3, #18
   1cd12:	18ff      	adds	r7, r7, r3
   1cd14:	e7ea      	b.n	1ccec <_strtod_l+0x538>
   1cd16:	2c00      	cmp	r4, #0
   1cd18:	d0e8      	beq.n	1ccec <_strtod_l+0x538>
   1cd1a:	230f      	movs	r3, #15
   1cd1c:	4264      	negs	r4, r4
   1cd1e:	4023      	ands	r3, r4
   1cd20:	d00a      	beq.n	1cd38 <_strtod_l+0x584>
   1cd22:	4a12      	ldr	r2, [pc, #72]	; (1cd6c <_strtod_l+0x5b8>)
   1cd24:	00db      	lsls	r3, r3, #3
   1cd26:	18d3      	adds	r3, r2, r3
   1cd28:	0030      	movs	r0, r6
   1cd2a:	681a      	ldr	r2, [r3, #0]
   1cd2c:	685b      	ldr	r3, [r3, #4]
   1cd2e:	0039      	movs	r1, r7
   1cd30:	f7fd fd1c 	bl	1a76c <__aeabi_ddiv>
   1cd34:	0006      	movs	r6, r0
   1cd36:	000f      	movs	r7, r1
   1cd38:	1124      	asrs	r4, r4, #4
   1cd3a:	d0d7      	beq.n	1ccec <_strtod_l+0x538>
   1cd3c:	2c1f      	cmp	r4, #31
   1cd3e:	dd21      	ble.n	1cd84 <_strtod_l+0x5d0>
   1cd40:	2400      	movs	r4, #0
   1cd42:	9405      	str	r4, [sp, #20]
   1cd44:	940a      	str	r4, [sp, #40]	; 0x28
   1cd46:	9407      	str	r4, [sp, #28]
   1cd48:	2322      	movs	r3, #34	; 0x22
   1cd4a:	9a04      	ldr	r2, [sp, #16]
   1cd4c:	2600      	movs	r6, #0
   1cd4e:	6013      	str	r3, [r2, #0]
   1cd50:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1cd52:	2700      	movs	r7, #0
   1cd54:	2b00      	cmp	r3, #0
   1cd56:	d191      	bne.n	1cc7c <_strtod_l+0x4c8>
   1cd58:	e56d      	b.n	1c836 <_strtod_l+0x82>
   1cd5a:	46c0      	nop			; (mov r8, r8)
   1cd5c:	00021d07 	.word	0x00021d07
   1cd60:	00021d20 	.word	0x00021d20
   1cd64:	7ff00000 	.word	0x7ff00000
   1cd68:	fff80000 	.word	0xfff80000
   1cd6c:	00021e90 	.word	0x00021e90
   1cd70:	fcb00000 	.word	0xfcb00000
   1cd74:	00021e68 	.word	0x00021e68
   1cd78:	7ca00000 	.word	0x7ca00000
   1cd7c:	7c900000 	.word	0x7c900000
   1cd80:	7fefffff 	.word	0x7fefffff
   1cd84:	2310      	movs	r3, #16
   1cd86:	4023      	ands	r3, r4
   1cd88:	9306      	str	r3, [sp, #24]
   1cd8a:	d001      	beq.n	1cd90 <_strtod_l+0x5dc>
   1cd8c:	236a      	movs	r3, #106	; 0x6a
   1cd8e:	9306      	str	r3, [sp, #24]
   1cd90:	0030      	movs	r0, r6
   1cd92:	0039      	movs	r1, r7
   1cd94:	2300      	movs	r3, #0
   1cd96:	4dca      	ldr	r5, [pc, #808]	; (1d0c0 <_strtod_l+0x90c>)
   1cd98:	2c00      	cmp	r4, #0
   1cd9a:	dd00      	ble.n	1cd9e <_strtod_l+0x5ea>
   1cd9c:	e103      	b.n	1cfa6 <_strtod_l+0x7f2>
   1cd9e:	2b00      	cmp	r3, #0
   1cda0:	d001      	beq.n	1cda6 <_strtod_l+0x5f2>
   1cda2:	0006      	movs	r6, r0
   1cda4:	000f      	movs	r7, r1
   1cda6:	9b06      	ldr	r3, [sp, #24]
   1cda8:	2b00      	cmp	r3, #0
   1cdaa:	d00f      	beq.n	1cdcc <_strtod_l+0x618>
   1cdac:	236b      	movs	r3, #107	; 0x6b
   1cdae:	0079      	lsls	r1, r7, #1
   1cdb0:	0d49      	lsrs	r1, r1, #21
   1cdb2:	003a      	movs	r2, r7
   1cdb4:	1a5b      	subs	r3, r3, r1
   1cdb6:	2b00      	cmp	r3, #0
   1cdb8:	dd08      	ble.n	1cdcc <_strtod_l+0x618>
   1cdba:	2b1f      	cmp	r3, #31
   1cdbc:	dc00      	bgt.n	1cdc0 <_strtod_l+0x60c>
   1cdbe:	e104      	b.n	1cfca <_strtod_l+0x816>
   1cdc0:	2600      	movs	r6, #0
   1cdc2:	2b34      	cmp	r3, #52	; 0x34
   1cdc4:	dc00      	bgt.n	1cdc8 <_strtod_l+0x614>
   1cdc6:	e0f9      	b.n	1cfbc <_strtod_l+0x808>
   1cdc8:	27dc      	movs	r7, #220	; 0xdc
   1cdca:	04bf      	lsls	r7, r7, #18
   1cdcc:	2200      	movs	r2, #0
   1cdce:	2300      	movs	r3, #0
   1cdd0:	0030      	movs	r0, r6
   1cdd2:	0039      	movs	r1, r7
   1cdd4:	f7fd f906 	bl	19fe4 <__aeabi_dcmpeq>
   1cdd8:	2800      	cmp	r0, #0
   1cdda:	d1b1      	bne.n	1cd40 <_strtod_l+0x58c>
   1cddc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1cdde:	9a08      	ldr	r2, [sp, #32]
   1cde0:	9300      	str	r3, [sp, #0]
   1cde2:	9913      	ldr	r1, [sp, #76]	; 0x4c
   1cde4:	9b05      	ldr	r3, [sp, #20]
   1cde6:	9804      	ldr	r0, [sp, #16]
   1cde8:	f000 fff1 	bl	1ddce <__s2b>
   1cdec:	900a      	str	r0, [sp, #40]	; 0x28
   1cdee:	2800      	cmp	r0, #0
   1cdf0:	d100      	bne.n	1cdf4 <_strtod_l+0x640>
   1cdf2:	e736      	b.n	1cc62 <_strtod_l+0x4ae>
   1cdf4:	9b07      	ldr	r3, [sp, #28]
   1cdf6:	2400      	movs	r4, #0
   1cdf8:	17da      	asrs	r2, r3, #31
   1cdfa:	425b      	negs	r3, r3
   1cdfc:	401a      	ands	r2, r3
   1cdfe:	9b07      	ldr	r3, [sp, #28]
   1ce00:	9215      	str	r2, [sp, #84]	; 0x54
   1ce02:	43db      	mvns	r3, r3
   1ce04:	9a07      	ldr	r2, [sp, #28]
   1ce06:	17db      	asrs	r3, r3, #31
   1ce08:	401a      	ands	r2, r3
   1ce0a:	9213      	str	r2, [sp, #76]	; 0x4c
   1ce0c:	9405      	str	r4, [sp, #20]
   1ce0e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1ce10:	9804      	ldr	r0, [sp, #16]
   1ce12:	6859      	ldr	r1, [r3, #4]
   1ce14:	f000 ff4e 	bl	1dcb4 <_Balloc>
   1ce18:	9007      	str	r0, [sp, #28]
   1ce1a:	2800      	cmp	r0, #0
   1ce1c:	d100      	bne.n	1ce20 <_strtod_l+0x66c>
   1ce1e:	e724      	b.n	1cc6a <_strtod_l+0x4b6>
   1ce20:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1ce22:	990a      	ldr	r1, [sp, #40]	; 0x28
   1ce24:	691b      	ldr	r3, [r3, #16]
   1ce26:	310c      	adds	r1, #12
   1ce28:	1c9a      	adds	r2, r3, #2
   1ce2a:	0092      	lsls	r2, r2, #2
   1ce2c:	300c      	adds	r0, #12
   1ce2e:	9308      	str	r3, [sp, #32]
   1ce30:	f7ff f984 	bl	1c13c <memcpy>
   1ce34:	ab22      	add	r3, sp, #136	; 0x88
   1ce36:	9301      	str	r3, [sp, #4]
   1ce38:	ab21      	add	r3, sp, #132	; 0x84
   1ce3a:	9300      	str	r3, [sp, #0]
   1ce3c:	0032      	movs	r2, r6
   1ce3e:	003b      	movs	r3, r7
   1ce40:	9804      	ldr	r0, [sp, #16]
   1ce42:	960e      	str	r6, [sp, #56]	; 0x38
   1ce44:	970f      	str	r7, [sp, #60]	; 0x3c
   1ce46:	f001 fa75 	bl	1e334 <__d2b>
   1ce4a:	9020      	str	r0, [sp, #128]	; 0x80
   1ce4c:	2800      	cmp	r0, #0
   1ce4e:	d100      	bne.n	1ce52 <_strtod_l+0x69e>
   1ce50:	e70b      	b.n	1cc6a <_strtod_l+0x4b6>
   1ce52:	2101      	movs	r1, #1
   1ce54:	9804      	ldr	r0, [sp, #16]
   1ce56:	f001 f842 	bl	1dede <__i2b>
   1ce5a:	9005      	str	r0, [sp, #20]
   1ce5c:	2800      	cmp	r0, #0
   1ce5e:	d100      	bne.n	1ce62 <_strtod_l+0x6ae>
   1ce60:	e703      	b.n	1cc6a <_strtod_l+0x4b6>
   1ce62:	9b21      	ldr	r3, [sp, #132]	; 0x84
   1ce64:	2b00      	cmp	r3, #0
   1ce66:	da00      	bge.n	1ce6a <_strtod_l+0x6b6>
   1ce68:	e0b4      	b.n	1cfd4 <_strtod_l+0x820>
   1ce6a:	9a15      	ldr	r2, [sp, #84]	; 0x54
   1ce6c:	18d5      	adds	r5, r2, r3
   1ce6e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   1ce70:	4694      	mov	ip, r2
   1ce72:	9906      	ldr	r1, [sp, #24]
   1ce74:	9a22      	ldr	r2, [sp, #136]	; 0x88
   1ce76:	1a5b      	subs	r3, r3, r1
   1ce78:	2136      	movs	r1, #54	; 0x36
   1ce7a:	189b      	adds	r3, r3, r2
   1ce7c:	1a8a      	subs	r2, r1, r2
   1ce7e:	4991      	ldr	r1, [pc, #580]	; (1d0c4 <_strtod_l+0x910>)
   1ce80:	3b01      	subs	r3, #1
   1ce82:	2001      	movs	r0, #1
   1ce84:	428b      	cmp	r3, r1
   1ce86:	db00      	blt.n	1ce8a <_strtod_l+0x6d6>
   1ce88:	e0b0      	b.n	1cfec <_strtod_l+0x838>
   1ce8a:	1ac9      	subs	r1, r1, r3
   1ce8c:	1a52      	subs	r2, r2, r1
   1ce8e:	291f      	cmp	r1, #31
   1ce90:	dd00      	ble.n	1ce94 <_strtod_l+0x6e0>
   1ce92:	e0a4      	b.n	1cfde <_strtod_l+0x82a>
   1ce94:	4088      	lsls	r0, r1
   1ce96:	2300      	movs	r3, #0
   1ce98:	9014      	str	r0, [sp, #80]	; 0x50
   1ce9a:	930c      	str	r3, [sp, #48]	; 0x30
   1ce9c:	18ab      	adds	r3, r5, r2
   1ce9e:	9308      	str	r3, [sp, #32]
   1cea0:	0013      	movs	r3, r2
   1cea2:	9a06      	ldr	r2, [sp, #24]
   1cea4:	4463      	add	r3, ip
   1cea6:	18d3      	adds	r3, r2, r3
   1cea8:	9a08      	ldr	r2, [sp, #32]
   1ceaa:	930b      	str	r3, [sp, #44]	; 0x2c
   1ceac:	002b      	movs	r3, r5
   1ceae:	4295      	cmp	r5, r2
   1ceb0:	dd00      	ble.n	1ceb4 <_strtod_l+0x700>
   1ceb2:	0013      	movs	r3, r2
   1ceb4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   1ceb6:	4293      	cmp	r3, r2
   1ceb8:	dd00      	ble.n	1cebc <_strtod_l+0x708>
   1ceba:	0013      	movs	r3, r2
   1cebc:	2b00      	cmp	r3, #0
   1cebe:	dd06      	ble.n	1cece <_strtod_l+0x71a>
   1cec0:	9a08      	ldr	r2, [sp, #32]
   1cec2:	1aed      	subs	r5, r5, r3
   1cec4:	1ad2      	subs	r2, r2, r3
   1cec6:	9208      	str	r2, [sp, #32]
   1cec8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   1ceca:	1ad2      	subs	r2, r2, r3
   1cecc:	920b      	str	r2, [sp, #44]	; 0x2c
   1cece:	9b15      	ldr	r3, [sp, #84]	; 0x54
   1ced0:	2b00      	cmp	r3, #0
   1ced2:	d017      	beq.n	1cf04 <_strtod_l+0x750>
   1ced4:	001a      	movs	r2, r3
   1ced6:	9905      	ldr	r1, [sp, #20]
   1ced8:	9804      	ldr	r0, [sp, #16]
   1ceda:	f001 f899 	bl	1e010 <__pow5mult>
   1cede:	9005      	str	r0, [sp, #20]
   1cee0:	2800      	cmp	r0, #0
   1cee2:	d100      	bne.n	1cee6 <_strtod_l+0x732>
   1cee4:	e6c1      	b.n	1cc6a <_strtod_l+0x4b6>
   1cee6:	0001      	movs	r1, r0
   1cee8:	9a20      	ldr	r2, [sp, #128]	; 0x80
   1ceea:	9804      	ldr	r0, [sp, #16]
   1ceec:	f001 f800 	bl	1def0 <__multiply>
   1cef0:	901b      	str	r0, [sp, #108]	; 0x6c
   1cef2:	2800      	cmp	r0, #0
   1cef4:	d100      	bne.n	1cef8 <_strtod_l+0x744>
   1cef6:	e6b8      	b.n	1cc6a <_strtod_l+0x4b6>
   1cef8:	9920      	ldr	r1, [sp, #128]	; 0x80
   1cefa:	9804      	ldr	r0, [sp, #16]
   1cefc:	f000 ff12 	bl	1dd24 <_Bfree>
   1cf00:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   1cf02:	9320      	str	r3, [sp, #128]	; 0x80
   1cf04:	9b08      	ldr	r3, [sp, #32]
   1cf06:	2b00      	cmp	r3, #0
   1cf08:	dc73      	bgt.n	1cff2 <_strtod_l+0x83e>
   1cf0a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   1cf0c:	2b00      	cmp	r3, #0
   1cf0e:	d179      	bne.n	1d004 <_strtod_l+0x850>
   1cf10:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1cf12:	2b00      	cmp	r3, #0
   1cf14:	dd08      	ble.n	1cf28 <_strtod_l+0x774>
   1cf16:	001a      	movs	r2, r3
   1cf18:	9907      	ldr	r1, [sp, #28]
   1cf1a:	9804      	ldr	r0, [sp, #16]
   1cf1c:	f001 f8ca 	bl	1e0b4 <__lshift>
   1cf20:	9007      	str	r0, [sp, #28]
   1cf22:	2800      	cmp	r0, #0
   1cf24:	d100      	bne.n	1cf28 <_strtod_l+0x774>
   1cf26:	e6a0      	b.n	1cc6a <_strtod_l+0x4b6>
   1cf28:	2d00      	cmp	r5, #0
   1cf2a:	dd08      	ble.n	1cf3e <_strtod_l+0x78a>
   1cf2c:	002a      	movs	r2, r5
   1cf2e:	9905      	ldr	r1, [sp, #20]
   1cf30:	9804      	ldr	r0, [sp, #16]
   1cf32:	f001 f8bf 	bl	1e0b4 <__lshift>
   1cf36:	9005      	str	r0, [sp, #20]
   1cf38:	2800      	cmp	r0, #0
   1cf3a:	d100      	bne.n	1cf3e <_strtod_l+0x78a>
   1cf3c:	e695      	b.n	1cc6a <_strtod_l+0x4b6>
   1cf3e:	9a07      	ldr	r2, [sp, #28]
   1cf40:	9920      	ldr	r1, [sp, #128]	; 0x80
   1cf42:	9804      	ldr	r0, [sp, #16]
   1cf44:	f001 f920 	bl	1e188 <__mdiff>
   1cf48:	1e04      	subs	r4, r0, #0
   1cf4a:	d100      	bne.n	1cf4e <_strtod_l+0x79a>
   1cf4c:	e68d      	b.n	1cc6a <_strtod_l+0x4b6>
   1cf4e:	2500      	movs	r5, #0
   1cf50:	68c3      	ldr	r3, [r0, #12]
   1cf52:	9905      	ldr	r1, [sp, #20]
   1cf54:	60c5      	str	r5, [r0, #12]
   1cf56:	930b      	str	r3, [sp, #44]	; 0x2c
   1cf58:	f001 f8fd 	bl	1e156 <__mcmp>
   1cf5c:	42a8      	cmp	r0, r5
   1cf5e:	da5b      	bge.n	1d018 <_strtod_l+0x864>
   1cf60:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1cf62:	42ab      	cmp	r3, r5
   1cf64:	d11b      	bne.n	1cf9e <_strtod_l+0x7ea>
   1cf66:	42ae      	cmp	r6, r5
   1cf68:	d119      	bne.n	1cf9e <_strtod_l+0x7ea>
   1cf6a:	033b      	lsls	r3, r7, #12
   1cf6c:	42ab      	cmp	r3, r5
   1cf6e:	d116      	bne.n	1cf9e <_strtod_l+0x7ea>
   1cf70:	22d6      	movs	r2, #214	; 0xd6
   1cf72:	4b55      	ldr	r3, [pc, #340]	; (1d0c8 <_strtod_l+0x914>)
   1cf74:	04d2      	lsls	r2, r2, #19
   1cf76:	403b      	ands	r3, r7
   1cf78:	4293      	cmp	r3, r2
   1cf7a:	d910      	bls.n	1cf9e <_strtod_l+0x7ea>
   1cf7c:	6963      	ldr	r3, [r4, #20]
   1cf7e:	42ab      	cmp	r3, r5
   1cf80:	d102      	bne.n	1cf88 <_strtod_l+0x7d4>
   1cf82:	6923      	ldr	r3, [r4, #16]
   1cf84:	2b01      	cmp	r3, #1
   1cf86:	dd0a      	ble.n	1cf9e <_strtod_l+0x7ea>
   1cf88:	0021      	movs	r1, r4
   1cf8a:	2201      	movs	r2, #1
   1cf8c:	9804      	ldr	r0, [sp, #16]
   1cf8e:	f001 f891 	bl	1e0b4 <__lshift>
   1cf92:	9905      	ldr	r1, [sp, #20]
   1cf94:	0004      	movs	r4, r0
   1cf96:	f001 f8de 	bl	1e156 <__mcmp>
   1cf9a:	2800      	cmp	r0, #0
   1cf9c:	dc6c      	bgt.n	1d078 <_strtod_l+0x8c4>
   1cf9e:	9b06      	ldr	r3, [sp, #24]
   1cfa0:	2b00      	cmp	r3, #0
   1cfa2:	d178      	bne.n	1d096 <_strtod_l+0x8e2>
   1cfa4:	e66a      	b.n	1cc7c <_strtod_l+0x4c8>
   1cfa6:	2201      	movs	r2, #1
   1cfa8:	4214      	tst	r4, r2
   1cfaa:	d004      	beq.n	1cfb6 <_strtod_l+0x802>
   1cfac:	682a      	ldr	r2, [r5, #0]
   1cfae:	686b      	ldr	r3, [r5, #4]
   1cfb0:	f7fe f810 	bl	1afd4 <__aeabi_dmul>
   1cfb4:	2301      	movs	r3, #1
   1cfb6:	1064      	asrs	r4, r4, #1
   1cfb8:	3508      	adds	r5, #8
   1cfba:	e6ed      	b.n	1cd98 <_strtod_l+0x5e4>
   1cfbc:	2101      	movs	r1, #1
   1cfbe:	3b20      	subs	r3, #32
   1cfc0:	4249      	negs	r1, r1
   1cfc2:	4099      	lsls	r1, r3
   1cfc4:	400a      	ands	r2, r1
   1cfc6:	0017      	movs	r7, r2
   1cfc8:	e700      	b.n	1cdcc <_strtod_l+0x618>
   1cfca:	2201      	movs	r2, #1
   1cfcc:	4252      	negs	r2, r2
   1cfce:	409a      	lsls	r2, r3
   1cfd0:	4016      	ands	r6, r2
   1cfd2:	e6fb      	b.n	1cdcc <_strtod_l+0x618>
   1cfd4:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   1cfd6:	9d15      	ldr	r5, [sp, #84]	; 0x54
   1cfd8:	1ad2      	subs	r2, r2, r3
   1cfda:	4694      	mov	ip, r2
   1cfdc:	e749      	b.n	1ce72 <_strtod_l+0x6be>
   1cfde:	493b      	ldr	r1, [pc, #236]	; (1d0cc <_strtod_l+0x918>)
   1cfe0:	1acb      	subs	r3, r1, r3
   1cfe2:	0001      	movs	r1, r0
   1cfe4:	4099      	lsls	r1, r3
   1cfe6:	910c      	str	r1, [sp, #48]	; 0x30
   1cfe8:	9014      	str	r0, [sp, #80]	; 0x50
   1cfea:	e757      	b.n	1ce9c <_strtod_l+0x6e8>
   1cfec:	2300      	movs	r3, #0
   1cfee:	930c      	str	r3, [sp, #48]	; 0x30
   1cff0:	e7fa      	b.n	1cfe8 <_strtod_l+0x834>
   1cff2:	9a08      	ldr	r2, [sp, #32]
   1cff4:	9920      	ldr	r1, [sp, #128]	; 0x80
   1cff6:	9804      	ldr	r0, [sp, #16]
   1cff8:	f001 f85c 	bl	1e0b4 <__lshift>
   1cffc:	9020      	str	r0, [sp, #128]	; 0x80
   1cffe:	2800      	cmp	r0, #0
   1d000:	d183      	bne.n	1cf0a <_strtod_l+0x756>
   1d002:	e632      	b.n	1cc6a <_strtod_l+0x4b6>
   1d004:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   1d006:	9907      	ldr	r1, [sp, #28]
   1d008:	9804      	ldr	r0, [sp, #16]
   1d00a:	f001 f801 	bl	1e010 <__pow5mult>
   1d00e:	9007      	str	r0, [sp, #28]
   1d010:	2800      	cmp	r0, #0
   1d012:	d000      	beq.n	1d016 <_strtod_l+0x862>
   1d014:	e77c      	b.n	1cf10 <_strtod_l+0x75c>
   1d016:	e628      	b.n	1cc6a <_strtod_l+0x4b6>
   1d018:	2800      	cmp	r0, #0
   1d01a:	d000      	beq.n	1d01e <_strtod_l+0x86a>
   1d01c:	e095      	b.n	1d14a <_strtod_l+0x996>
   1d01e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   1d020:	033b      	lsls	r3, r7, #12
   1d022:	2a00      	cmp	r2, #0
   1d024:	d024      	beq.n	1d070 <_strtod_l+0x8bc>
   1d026:	492a      	ldr	r1, [pc, #168]	; (1d0d0 <_strtod_l+0x91c>)
   1d028:	003a      	movs	r2, r7
   1d02a:	0b1b      	lsrs	r3, r3, #12
   1d02c:	428b      	cmp	r3, r1
   1d02e:	d15e      	bne.n	1d0ee <_strtod_l+0x93a>
   1d030:	9b06      	ldr	r3, [sp, #24]
   1d032:	3801      	subs	r0, #1
   1d034:	46b4      	mov	ip, r6
   1d036:	0001      	movs	r1, r0
   1d038:	2b00      	cmp	r3, #0
   1d03a:	d00a      	beq.n	1d052 <_strtod_l+0x89e>
   1d03c:	25d4      	movs	r5, #212	; 0xd4
   1d03e:	4b22      	ldr	r3, [pc, #136]	; (1d0c8 <_strtod_l+0x914>)
   1d040:	04ed      	lsls	r5, r5, #19
   1d042:	403b      	ands	r3, r7
   1d044:	42ab      	cmp	r3, r5
   1d046:	d804      	bhi.n	1d052 <_strtod_l+0x89e>
   1d048:	316c      	adds	r1, #108	; 0x6c
   1d04a:	0d1b      	lsrs	r3, r3, #20
   1d04c:	1acb      	subs	r3, r1, r3
   1d04e:	0001      	movs	r1, r0
   1d050:	4099      	lsls	r1, r3
   1d052:	4561      	cmp	r1, ip
   1d054:	d14b      	bne.n	1d0ee <_strtod_l+0x93a>
   1d056:	4b1f      	ldr	r3, [pc, #124]	; (1d0d4 <_strtod_l+0x920>)
   1d058:	429a      	cmp	r2, r3
   1d05a:	d102      	bne.n	1d062 <_strtod_l+0x8ae>
   1d05c:	1c4b      	adds	r3, r1, #1
   1d05e:	d100      	bne.n	1d062 <_strtod_l+0x8ae>
   1d060:	e603      	b.n	1cc6a <_strtod_l+0x4b6>
   1d062:	4b19      	ldr	r3, [pc, #100]	; (1d0c8 <_strtod_l+0x914>)
   1d064:	2600      	movs	r6, #0
   1d066:	401a      	ands	r2, r3
   1d068:	2380      	movs	r3, #128	; 0x80
   1d06a:	035b      	lsls	r3, r3, #13
   1d06c:	18d7      	adds	r7, r2, r3
   1d06e:	e796      	b.n	1cf9e <_strtod_l+0x7ea>
   1d070:	2b00      	cmp	r3, #0
   1d072:	d13c      	bne.n	1d0ee <_strtod_l+0x93a>
   1d074:	2e00      	cmp	r6, #0
   1d076:	d13a      	bne.n	1d0ee <_strtod_l+0x93a>
   1d078:	9a06      	ldr	r2, [sp, #24]
   1d07a:	4b13      	ldr	r3, [pc, #76]	; (1d0c8 <_strtod_l+0x914>)
   1d07c:	2a00      	cmp	r2, #0
   1d07e:	d02d      	beq.n	1d0dc <_strtod_l+0x928>
   1d080:	001a      	movs	r2, r3
   1d082:	21d6      	movs	r1, #214	; 0xd6
   1d084:	403a      	ands	r2, r7
   1d086:	04c9      	lsls	r1, r1, #19
   1d088:	428a      	cmp	r2, r1
   1d08a:	dc27      	bgt.n	1d0dc <_strtod_l+0x928>
   1d08c:	23dc      	movs	r3, #220	; 0xdc
   1d08e:	049b      	lsls	r3, r3, #18
   1d090:	429a      	cmp	r2, r3
   1d092:	dc00      	bgt.n	1d096 <_strtod_l+0x8e2>
   1d094:	e658      	b.n	1cd48 <_strtod_l+0x594>
   1d096:	4b10      	ldr	r3, [pc, #64]	; (1d0d8 <_strtod_l+0x924>)
   1d098:	0030      	movs	r0, r6
   1d09a:	9311      	str	r3, [sp, #68]	; 0x44
   1d09c:	2300      	movs	r3, #0
   1d09e:	9310      	str	r3, [sp, #64]	; 0x40
   1d0a0:	0039      	movs	r1, r7
   1d0a2:	9a10      	ldr	r2, [sp, #64]	; 0x40
   1d0a4:	9b11      	ldr	r3, [sp, #68]	; 0x44
   1d0a6:	f7fd ff95 	bl	1afd4 <__aeabi_dmul>
   1d0aa:	0006      	movs	r6, r0
   1d0ac:	1e0f      	subs	r7, r1, #0
   1d0ae:	d000      	beq.n	1d0b2 <_strtod_l+0x8fe>
   1d0b0:	e5e4      	b.n	1cc7c <_strtod_l+0x4c8>
   1d0b2:	2800      	cmp	r0, #0
   1d0b4:	d000      	beq.n	1d0b8 <_strtod_l+0x904>
   1d0b6:	e5e1      	b.n	1cc7c <_strtod_l+0x4c8>
   1d0b8:	2322      	movs	r3, #34	; 0x22
   1d0ba:	9a04      	ldr	r2, [sp, #16]
   1d0bc:	6013      	str	r3, [r2, #0]
   1d0be:	e5dd      	b.n	1cc7c <_strtod_l+0x4c8>
   1d0c0:	00021d38 	.word	0x00021d38
   1d0c4:	fffffc02 	.word	0xfffffc02
   1d0c8:	7ff00000 	.word	0x7ff00000
   1d0cc:	fffffbe2 	.word	0xfffffbe2
   1d0d0:	000fffff 	.word	0x000fffff
   1d0d4:	7fefffff 	.word	0x7fefffff
   1d0d8:	39500000 	.word	0x39500000
   1d0dc:	2601      	movs	r6, #1
   1d0de:	4aa9      	ldr	r2, [pc, #676]	; (1d384 <_strtod_l+0xbd0>)
   1d0e0:	403b      	ands	r3, r7
   1d0e2:	189b      	adds	r3, r3, r2
   1d0e4:	4aa8      	ldr	r2, [pc, #672]	; (1d388 <_strtod_l+0xbd4>)
   1d0e6:	4276      	negs	r6, r6
   1d0e8:	431a      	orrs	r2, r3
   1d0ea:	0017      	movs	r7, r2
   1d0ec:	e757      	b.n	1cf9e <_strtod_l+0x7ea>
   1d0ee:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1d0f0:	2b00      	cmp	r3, #0
   1d0f2:	d013      	beq.n	1d11c <_strtod_l+0x968>
   1d0f4:	423b      	tst	r3, r7
   1d0f6:	d100      	bne.n	1d0fa <_strtod_l+0x946>
   1d0f8:	e751      	b.n	1cf9e <_strtod_l+0x7ea>
   1d0fa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1d0fc:	9a06      	ldr	r2, [sp, #24]
   1d0fe:	0030      	movs	r0, r6
   1d100:	0039      	movs	r1, r7
   1d102:	2b00      	cmp	r3, #0
   1d104:	d00f      	beq.n	1d126 <_strtod_l+0x972>
   1d106:	f7ff fb3d 	bl	1c784 <sulp>
   1d10a:	0002      	movs	r2, r0
   1d10c:	000b      	movs	r3, r1
   1d10e:	980e      	ldr	r0, [sp, #56]	; 0x38
   1d110:	990f      	ldr	r1, [sp, #60]	; 0x3c
   1d112:	f7fd f81b 	bl	1a14c <__aeabi_dadd>
   1d116:	0006      	movs	r6, r0
   1d118:	000f      	movs	r7, r1
   1d11a:	e740      	b.n	1cf9e <_strtod_l+0x7ea>
   1d11c:	9b14      	ldr	r3, [sp, #80]	; 0x50
   1d11e:	4233      	tst	r3, r6
   1d120:	d100      	bne.n	1d124 <_strtod_l+0x970>
   1d122:	e73c      	b.n	1cf9e <_strtod_l+0x7ea>
   1d124:	e7e9      	b.n	1d0fa <_strtod_l+0x946>
   1d126:	f7ff fb2d 	bl	1c784 <sulp>
   1d12a:	0002      	movs	r2, r0
   1d12c:	000b      	movs	r3, r1
   1d12e:	980e      	ldr	r0, [sp, #56]	; 0x38
   1d130:	990f      	ldr	r1, [sp, #60]	; 0x3c
   1d132:	f7fe f9cf 	bl	1b4d4 <__aeabi_dsub>
   1d136:	2200      	movs	r2, #0
   1d138:	2300      	movs	r3, #0
   1d13a:	0006      	movs	r6, r0
   1d13c:	000f      	movs	r7, r1
   1d13e:	f7fc ff51 	bl	19fe4 <__aeabi_dcmpeq>
   1d142:	2800      	cmp	r0, #0
   1d144:	d000      	beq.n	1d148 <_strtod_l+0x994>
   1d146:	e5ff      	b.n	1cd48 <_strtod_l+0x594>
   1d148:	e729      	b.n	1cf9e <_strtod_l+0x7ea>
   1d14a:	9905      	ldr	r1, [sp, #20]
   1d14c:	0020      	movs	r0, r4
   1d14e:	f001 f945 	bl	1e3dc <__ratio>
   1d152:	2380      	movs	r3, #128	; 0x80
   1d154:	2200      	movs	r2, #0
   1d156:	05db      	lsls	r3, r3, #23
   1d158:	9008      	str	r0, [sp, #32]
   1d15a:	9109      	str	r1, [sp, #36]	; 0x24
   1d15c:	f7fc ff52 	bl	1a004 <__aeabi_dcmple>
   1d160:	2800      	cmp	r0, #0
   1d162:	d075      	beq.n	1d250 <_strtod_l+0xa9c>
   1d164:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1d166:	2b00      	cmp	r3, #0
   1d168:	d043      	beq.n	1d1f2 <_strtod_l+0xa3e>
   1d16a:	2200      	movs	r2, #0
   1d16c:	4b87      	ldr	r3, [pc, #540]	; (1d38c <_strtod_l+0xbd8>)
   1d16e:	920c      	str	r2, [sp, #48]	; 0x30
   1d170:	930d      	str	r3, [sp, #52]	; 0x34
   1d172:	4b86      	ldr	r3, [pc, #536]	; (1d38c <_strtod_l+0xbd8>)
   1d174:	9308      	str	r3, [sp, #32]
   1d176:	4b86      	ldr	r3, [pc, #536]	; (1d390 <_strtod_l+0xbdc>)
   1d178:	403b      	ands	r3, r7
   1d17a:	9314      	str	r3, [sp, #80]	; 0x50
   1d17c:	9a14      	ldr	r2, [sp, #80]	; 0x50
   1d17e:	4b85      	ldr	r3, [pc, #532]	; (1d394 <_strtod_l+0xbe0>)
   1d180:	429a      	cmp	r2, r3
   1d182:	d000      	beq.n	1d186 <_strtod_l+0x9d2>
   1d184:	e0b1      	b.n	1d2ea <_strtod_l+0xb36>
   1d186:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   1d188:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1d18a:	9210      	str	r2, [sp, #64]	; 0x40
   1d18c:	9311      	str	r3, [sp, #68]	; 0x44
   1d18e:	4b82      	ldr	r3, [pc, #520]	; (1d398 <_strtod_l+0xbe4>)
   1d190:	0030      	movs	r0, r6
   1d192:	18ff      	adds	r7, r7, r3
   1d194:	0039      	movs	r1, r7
   1d196:	f001 f85b 	bl	1e250 <__ulp>
   1d19a:	0002      	movs	r2, r0
   1d19c:	000b      	movs	r3, r1
   1d19e:	980c      	ldr	r0, [sp, #48]	; 0x30
   1d1a0:	990d      	ldr	r1, [sp, #52]	; 0x34
   1d1a2:	f7fd ff17 	bl	1afd4 <__aeabi_dmul>
   1d1a6:	0032      	movs	r2, r6
   1d1a8:	003b      	movs	r3, r7
   1d1aa:	f7fc ffcf 	bl	1a14c <__aeabi_dadd>
   1d1ae:	4a78      	ldr	r2, [pc, #480]	; (1d390 <_strtod_l+0xbdc>)
   1d1b0:	4b7a      	ldr	r3, [pc, #488]	; (1d39c <_strtod_l+0xbe8>)
   1d1b2:	0006      	movs	r6, r0
   1d1b4:	400a      	ands	r2, r1
   1d1b6:	429a      	cmp	r2, r3
   1d1b8:	d962      	bls.n	1d280 <_strtod_l+0xacc>
   1d1ba:	4b79      	ldr	r3, [pc, #484]	; (1d3a0 <_strtod_l+0xbec>)
   1d1bc:	9a11      	ldr	r2, [sp, #68]	; 0x44
   1d1be:	429a      	cmp	r2, r3
   1d1c0:	d103      	bne.n	1d1ca <_strtod_l+0xa16>
   1d1c2:	9b10      	ldr	r3, [sp, #64]	; 0x40
   1d1c4:	3301      	adds	r3, #1
   1d1c6:	d100      	bne.n	1d1ca <_strtod_l+0xa16>
   1d1c8:	e54f      	b.n	1cc6a <_strtod_l+0x4b6>
   1d1ca:	2601      	movs	r6, #1
   1d1cc:	4f74      	ldr	r7, [pc, #464]	; (1d3a0 <_strtod_l+0xbec>)
   1d1ce:	4276      	negs	r6, r6
   1d1d0:	9920      	ldr	r1, [sp, #128]	; 0x80
   1d1d2:	9804      	ldr	r0, [sp, #16]
   1d1d4:	f000 fda6 	bl	1dd24 <_Bfree>
   1d1d8:	9907      	ldr	r1, [sp, #28]
   1d1da:	9804      	ldr	r0, [sp, #16]
   1d1dc:	f000 fda2 	bl	1dd24 <_Bfree>
   1d1e0:	9905      	ldr	r1, [sp, #20]
   1d1e2:	9804      	ldr	r0, [sp, #16]
   1d1e4:	f000 fd9e 	bl	1dd24 <_Bfree>
   1d1e8:	0021      	movs	r1, r4
   1d1ea:	9804      	ldr	r0, [sp, #16]
   1d1ec:	f000 fd9a 	bl	1dd24 <_Bfree>
   1d1f0:	e60d      	b.n	1ce0e <_strtod_l+0x65a>
   1d1f2:	2e00      	cmp	r6, #0
   1d1f4:	d11d      	bne.n	1d232 <_strtod_l+0xa7e>
   1d1f6:	033b      	lsls	r3, r7, #12
   1d1f8:	d120      	bne.n	1d23c <_strtod_l+0xa88>
   1d1fa:	9808      	ldr	r0, [sp, #32]
   1d1fc:	9909      	ldr	r1, [sp, #36]	; 0x24
   1d1fe:	2200      	movs	r2, #0
   1d200:	4b62      	ldr	r3, [pc, #392]	; (1d38c <_strtod_l+0xbd8>)
   1d202:	f7fc fef5 	bl	19ff0 <__aeabi_dcmplt>
   1d206:	2800      	cmp	r0, #0
   1d208:	d11e      	bne.n	1d248 <_strtod_l+0xa94>
   1d20a:	9808      	ldr	r0, [sp, #32]
   1d20c:	9909      	ldr	r1, [sp, #36]	; 0x24
   1d20e:	2200      	movs	r2, #0
   1d210:	4b64      	ldr	r3, [pc, #400]	; (1d3a4 <_strtod_l+0xbf0>)
   1d212:	f7fd fedf 	bl	1afd4 <__aeabi_dmul>
   1d216:	0005      	movs	r5, r0
   1d218:	9108      	str	r1, [sp, #32]
   1d21a:	2280      	movs	r2, #128	; 0x80
   1d21c:	0612      	lsls	r2, r2, #24
   1d21e:	4694      	mov	ip, r2
   1d220:	9b08      	ldr	r3, [sp, #32]
   1d222:	951c      	str	r5, [sp, #112]	; 0x70
   1d224:	4463      	add	r3, ip
   1d226:	931d      	str	r3, [sp, #116]	; 0x74
   1d228:	9a1c      	ldr	r2, [sp, #112]	; 0x70
   1d22a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   1d22c:	920c      	str	r2, [sp, #48]	; 0x30
   1d22e:	930d      	str	r3, [sp, #52]	; 0x34
   1d230:	e7a1      	b.n	1d176 <_strtod_l+0x9c2>
   1d232:	2e01      	cmp	r6, #1
   1d234:	d102      	bne.n	1d23c <_strtod_l+0xa88>
   1d236:	2f00      	cmp	r7, #0
   1d238:	d100      	bne.n	1d23c <_strtod_l+0xa88>
   1d23a:	e585      	b.n	1cd48 <_strtod_l+0x594>
   1d23c:	2200      	movs	r2, #0
   1d23e:	4b5a      	ldr	r3, [pc, #360]	; (1d3a8 <_strtod_l+0xbf4>)
   1d240:	2500      	movs	r5, #0
   1d242:	920c      	str	r2, [sp, #48]	; 0x30
   1d244:	930d      	str	r3, [sp, #52]	; 0x34
   1d246:	e794      	b.n	1d172 <_strtod_l+0x9be>
   1d248:	4b56      	ldr	r3, [pc, #344]	; (1d3a4 <_strtod_l+0xbf0>)
   1d24a:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   1d24c:	9308      	str	r3, [sp, #32]
   1d24e:	e7e4      	b.n	1d21a <_strtod_l+0xa66>
   1d250:	4b54      	ldr	r3, [pc, #336]	; (1d3a4 <_strtod_l+0xbf0>)
   1d252:	9808      	ldr	r0, [sp, #32]
   1d254:	9909      	ldr	r1, [sp, #36]	; 0x24
   1d256:	2200      	movs	r2, #0
   1d258:	f7fd febc 	bl	1afd4 <__aeabi_dmul>
   1d25c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1d25e:	0005      	movs	r5, r0
   1d260:	9108      	str	r1, [sp, #32]
   1d262:	2b00      	cmp	r3, #0
   1d264:	d107      	bne.n	1d276 <_strtod_l+0xac2>
   1d266:	2380      	movs	r3, #128	; 0x80
   1d268:	061b      	lsls	r3, r3, #24
   1d26a:	18cb      	adds	r3, r1, r3
   1d26c:	9016      	str	r0, [sp, #88]	; 0x58
   1d26e:	9317      	str	r3, [sp, #92]	; 0x5c
   1d270:	9a16      	ldr	r2, [sp, #88]	; 0x58
   1d272:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   1d274:	e7da      	b.n	1d22c <_strtod_l+0xa78>
   1d276:	0002      	movs	r2, r0
   1d278:	9b08      	ldr	r3, [sp, #32]
   1d27a:	9216      	str	r2, [sp, #88]	; 0x58
   1d27c:	9317      	str	r3, [sp, #92]	; 0x5c
   1d27e:	e7f7      	b.n	1d270 <_strtod_l+0xabc>
   1d280:	23d4      	movs	r3, #212	; 0xd4
   1d282:	049b      	lsls	r3, r3, #18
   1d284:	18cf      	adds	r7, r1, r3
   1d286:	9b06      	ldr	r3, [sp, #24]
   1d288:	2b00      	cmp	r3, #0
   1d28a:	d1a1      	bne.n	1d1d0 <_strtod_l+0xa1c>
   1d28c:	4b40      	ldr	r3, [pc, #256]	; (1d390 <_strtod_l+0xbdc>)
   1d28e:	9a14      	ldr	r2, [sp, #80]	; 0x50
   1d290:	970c      	str	r7, [sp, #48]	; 0x30
   1d292:	403b      	ands	r3, r7
   1d294:	429a      	cmp	r2, r3
   1d296:	d19b      	bne.n	1d1d0 <_strtod_l+0xa1c>
   1d298:	9908      	ldr	r1, [sp, #32]
   1d29a:	0028      	movs	r0, r5
   1d29c:	f7fe fc30 	bl	1bb00 <__aeabi_d2iz>
   1d2a0:	f7fe fc62 	bl	1bb68 <__aeabi_i2d>
   1d2a4:	000b      	movs	r3, r1
   1d2a6:	0002      	movs	r2, r0
   1d2a8:	9908      	ldr	r1, [sp, #32]
   1d2aa:	0028      	movs	r0, r5
   1d2ac:	f7fe f912 	bl	1b4d4 <__aeabi_dsub>
   1d2b0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1d2b2:	9008      	str	r0, [sp, #32]
   1d2b4:	9109      	str	r1, [sp, #36]	; 0x24
   1d2b6:	2b00      	cmp	r3, #0
   1d2b8:	d104      	bne.n	1d2c4 <_strtod_l+0xb10>
   1d2ba:	2e00      	cmp	r6, #0
   1d2bc:	d102      	bne.n	1d2c4 <_strtod_l+0xb10>
   1d2be:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1d2c0:	031b      	lsls	r3, r3, #12
   1d2c2:	d058      	beq.n	1d376 <_strtod_l+0xbc2>
   1d2c4:	9808      	ldr	r0, [sp, #32]
   1d2c6:	9909      	ldr	r1, [sp, #36]	; 0x24
   1d2c8:	4a38      	ldr	r2, [pc, #224]	; (1d3ac <_strtod_l+0xbf8>)
   1d2ca:	4b39      	ldr	r3, [pc, #228]	; (1d3b0 <_strtod_l+0xbfc>)
   1d2cc:	f7fc fe90 	bl	19ff0 <__aeabi_dcmplt>
   1d2d0:	2800      	cmp	r0, #0
   1d2d2:	d000      	beq.n	1d2d6 <_strtod_l+0xb22>
   1d2d4:	e4d2      	b.n	1cc7c <_strtod_l+0x4c8>
   1d2d6:	9808      	ldr	r0, [sp, #32]
   1d2d8:	9909      	ldr	r1, [sp, #36]	; 0x24
   1d2da:	4a36      	ldr	r2, [pc, #216]	; (1d3b4 <_strtod_l+0xc00>)
   1d2dc:	4b31      	ldr	r3, [pc, #196]	; (1d3a4 <_strtod_l+0xbf0>)
   1d2de:	f7fc fe9b 	bl	1a018 <__aeabi_dcmpgt>
   1d2e2:	2800      	cmp	r0, #0
   1d2e4:	d100      	bne.n	1d2e8 <_strtod_l+0xb34>
   1d2e6:	e773      	b.n	1d1d0 <_strtod_l+0xa1c>
   1d2e8:	e4c8      	b.n	1cc7c <_strtod_l+0x4c8>
   1d2ea:	9b06      	ldr	r3, [sp, #24]
   1d2ec:	2b00      	cmp	r3, #0
   1d2ee:	d02a      	beq.n	1d346 <_strtod_l+0xb92>
   1d2f0:	23d4      	movs	r3, #212	; 0xd4
   1d2f2:	9a14      	ldr	r2, [sp, #80]	; 0x50
   1d2f4:	04db      	lsls	r3, r3, #19
   1d2f6:	429a      	cmp	r2, r3
   1d2f8:	d825      	bhi.n	1d346 <_strtod_l+0xb92>
   1d2fa:	4a2f      	ldr	r2, [pc, #188]	; (1d3b8 <_strtod_l+0xc04>)
   1d2fc:	4b2f      	ldr	r3, [pc, #188]	; (1d3bc <_strtod_l+0xc08>)
   1d2fe:	0028      	movs	r0, r5
   1d300:	9908      	ldr	r1, [sp, #32]
   1d302:	f7fc fe7f 	bl	1a004 <__aeabi_dcmple>
   1d306:	2800      	cmp	r0, #0
   1d308:	d016      	beq.n	1d338 <_strtod_l+0xb84>
   1d30a:	0028      	movs	r0, r5
   1d30c:	9908      	ldr	r1, [sp, #32]
   1d30e:	f7fc feff 	bl	1a110 <__aeabi_d2uiz>
   1d312:	2800      	cmp	r0, #0
   1d314:	d100      	bne.n	1d318 <_strtod_l+0xb64>
   1d316:	3001      	adds	r0, #1
   1d318:	f7fe fc68 	bl	1bbec <__aeabi_ui2d>
   1d31c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1d31e:	0005      	movs	r5, r0
   1d320:	9108      	str	r1, [sp, #32]
   1d322:	2b00      	cmp	r3, #0
   1d324:	d122      	bne.n	1d36c <_strtod_l+0xbb8>
   1d326:	2380      	movs	r3, #128	; 0x80
   1d328:	061b      	lsls	r3, r3, #24
   1d32a:	18cb      	adds	r3, r1, r3
   1d32c:	9018      	str	r0, [sp, #96]	; 0x60
   1d32e:	9319      	str	r3, [sp, #100]	; 0x64
   1d330:	9a18      	ldr	r2, [sp, #96]	; 0x60
   1d332:	9b19      	ldr	r3, [sp, #100]	; 0x64
   1d334:	920c      	str	r2, [sp, #48]	; 0x30
   1d336:	930d      	str	r3, [sp, #52]	; 0x34
   1d338:	22d6      	movs	r2, #214	; 0xd6
   1d33a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1d33c:	04d2      	lsls	r2, r2, #19
   1d33e:	189b      	adds	r3, r3, r2
   1d340:	9a14      	ldr	r2, [sp, #80]	; 0x50
   1d342:	1a9b      	subs	r3, r3, r2
   1d344:	930d      	str	r3, [sp, #52]	; 0x34
   1d346:	980e      	ldr	r0, [sp, #56]	; 0x38
   1d348:	990f      	ldr	r1, [sp, #60]	; 0x3c
   1d34a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
   1d34c:	9f0d      	ldr	r7, [sp, #52]	; 0x34
   1d34e:	f000 ff7f 	bl	1e250 <__ulp>
   1d352:	0002      	movs	r2, r0
   1d354:	000b      	movs	r3, r1
   1d356:	0030      	movs	r0, r6
   1d358:	0039      	movs	r1, r7
   1d35a:	f7fd fe3b 	bl	1afd4 <__aeabi_dmul>
   1d35e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   1d360:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1d362:	f7fc fef3 	bl	1a14c <__aeabi_dadd>
   1d366:	0006      	movs	r6, r0
   1d368:	000f      	movs	r7, r1
   1d36a:	e78c      	b.n	1d286 <_strtod_l+0xad2>
   1d36c:	0002      	movs	r2, r0
   1d36e:	9b08      	ldr	r3, [sp, #32]
   1d370:	9218      	str	r2, [sp, #96]	; 0x60
   1d372:	9319      	str	r3, [sp, #100]	; 0x64
   1d374:	e7dc      	b.n	1d330 <_strtod_l+0xb7c>
   1d376:	4a0d      	ldr	r2, [pc, #52]	; (1d3ac <_strtod_l+0xbf8>)
   1d378:	4b11      	ldr	r3, [pc, #68]	; (1d3c0 <_strtod_l+0xc0c>)
   1d37a:	9808      	ldr	r0, [sp, #32]
   1d37c:	9909      	ldr	r1, [sp, #36]	; 0x24
   1d37e:	f7fc fe37 	bl	19ff0 <__aeabi_dcmplt>
   1d382:	e7ae      	b.n	1d2e2 <_strtod_l+0xb2e>
   1d384:	fff00000 	.word	0xfff00000
   1d388:	000fffff 	.word	0x000fffff
   1d38c:	3ff00000 	.word	0x3ff00000
   1d390:	7ff00000 	.word	0x7ff00000
   1d394:	7fe00000 	.word	0x7fe00000
   1d398:	fcb00000 	.word	0xfcb00000
   1d39c:	7c9fffff 	.word	0x7c9fffff
   1d3a0:	7fefffff 	.word	0x7fefffff
   1d3a4:	3fe00000 	.word	0x3fe00000
   1d3a8:	bff00000 	.word	0xbff00000
   1d3ac:	94a03595 	.word	0x94a03595
   1d3b0:	3fdfffff 	.word	0x3fdfffff
   1d3b4:	35afe535 	.word	0x35afe535
   1d3b8:	ffc00000 	.word	0xffc00000
   1d3bc:	41dfffff 	.word	0x41dfffff
   1d3c0:	3fcfffff 	.word	0x3fcfffff

0001d3c4 <strtod>:
   1d3c4:	4b06      	ldr	r3, [pc, #24]	; (1d3e0 <strtod+0x1c>)
   1d3c6:	b510      	push	{r4, lr}
   1d3c8:	0004      	movs	r4, r0
   1d3ca:	6818      	ldr	r0, [r3, #0]
   1d3cc:	000a      	movs	r2, r1
   1d3ce:	6a03      	ldr	r3, [r0, #32]
   1d3d0:	2b00      	cmp	r3, #0
   1d3d2:	d100      	bne.n	1d3d6 <strtod+0x12>
   1d3d4:	4b03      	ldr	r3, [pc, #12]	; (1d3e4 <strtod+0x20>)
   1d3d6:	0021      	movs	r1, r4
   1d3d8:	f7ff f9ec 	bl	1c7b4 <_strtod_l>
   1d3dc:	bd10      	pop	{r4, pc}
   1d3de:	46c0      	nop			; (mov r8, r8)
   1d3e0:	2000022c 	.word	0x2000022c
   1d3e4:	20000290 	.word	0x20000290

0001d3e8 <__swbuf_r>:
   1d3e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1d3ea:	0005      	movs	r5, r0
   1d3ec:	000e      	movs	r6, r1
   1d3ee:	0014      	movs	r4, r2
   1d3f0:	2800      	cmp	r0, #0
   1d3f2:	d004      	beq.n	1d3fe <__swbuf_r+0x16>
   1d3f4:	6983      	ldr	r3, [r0, #24]
   1d3f6:	2b00      	cmp	r3, #0
   1d3f8:	d101      	bne.n	1d3fe <__swbuf_r+0x16>
   1d3fa:	f7fe fd27 	bl	1be4c <__sinit>
   1d3fe:	4b22      	ldr	r3, [pc, #136]	; (1d488 <__swbuf_r+0xa0>)
   1d400:	429c      	cmp	r4, r3
   1d402:	d12d      	bne.n	1d460 <__swbuf_r+0x78>
   1d404:	686c      	ldr	r4, [r5, #4]
   1d406:	69a3      	ldr	r3, [r4, #24]
   1d408:	60a3      	str	r3, [r4, #8]
   1d40a:	89a3      	ldrh	r3, [r4, #12]
   1d40c:	071b      	lsls	r3, r3, #28
   1d40e:	d531      	bpl.n	1d474 <__swbuf_r+0x8c>
   1d410:	6923      	ldr	r3, [r4, #16]
   1d412:	2b00      	cmp	r3, #0
   1d414:	d02e      	beq.n	1d474 <__swbuf_r+0x8c>
   1d416:	6823      	ldr	r3, [r4, #0]
   1d418:	6922      	ldr	r2, [r4, #16]
   1d41a:	b2f7      	uxtb	r7, r6
   1d41c:	1a98      	subs	r0, r3, r2
   1d41e:	6963      	ldr	r3, [r4, #20]
   1d420:	b2f6      	uxtb	r6, r6
   1d422:	4298      	cmp	r0, r3
   1d424:	db05      	blt.n	1d432 <__swbuf_r+0x4a>
   1d426:	0021      	movs	r1, r4
   1d428:	0028      	movs	r0, r5
   1d42a:	f7fe fca1 	bl	1bd70 <_fflush_r>
   1d42e:	2800      	cmp	r0, #0
   1d430:	d126      	bne.n	1d480 <__swbuf_r+0x98>
   1d432:	68a3      	ldr	r3, [r4, #8]
   1d434:	3001      	adds	r0, #1
   1d436:	3b01      	subs	r3, #1
   1d438:	60a3      	str	r3, [r4, #8]
   1d43a:	6823      	ldr	r3, [r4, #0]
   1d43c:	1c5a      	adds	r2, r3, #1
   1d43e:	6022      	str	r2, [r4, #0]
   1d440:	701f      	strb	r7, [r3, #0]
   1d442:	6963      	ldr	r3, [r4, #20]
   1d444:	4298      	cmp	r0, r3
   1d446:	d004      	beq.n	1d452 <__swbuf_r+0x6a>
   1d448:	89a3      	ldrh	r3, [r4, #12]
   1d44a:	07db      	lsls	r3, r3, #31
   1d44c:	d51a      	bpl.n	1d484 <__swbuf_r+0x9c>
   1d44e:	2e0a      	cmp	r6, #10
   1d450:	d118      	bne.n	1d484 <__swbuf_r+0x9c>
   1d452:	0021      	movs	r1, r4
   1d454:	0028      	movs	r0, r5
   1d456:	f7fe fc8b 	bl	1bd70 <_fflush_r>
   1d45a:	2800      	cmp	r0, #0
   1d45c:	d012      	beq.n	1d484 <__swbuf_r+0x9c>
   1d45e:	e00f      	b.n	1d480 <__swbuf_r+0x98>
   1d460:	4b0a      	ldr	r3, [pc, #40]	; (1d48c <__swbuf_r+0xa4>)
   1d462:	429c      	cmp	r4, r3
   1d464:	d101      	bne.n	1d46a <__swbuf_r+0x82>
   1d466:	68ac      	ldr	r4, [r5, #8]
   1d468:	e7cd      	b.n	1d406 <__swbuf_r+0x1e>
   1d46a:	4b09      	ldr	r3, [pc, #36]	; (1d490 <__swbuf_r+0xa8>)
   1d46c:	429c      	cmp	r4, r3
   1d46e:	d1ca      	bne.n	1d406 <__swbuf_r+0x1e>
   1d470:	68ec      	ldr	r4, [r5, #12]
   1d472:	e7c8      	b.n	1d406 <__swbuf_r+0x1e>
   1d474:	0021      	movs	r1, r4
   1d476:	0028      	movs	r0, r5
   1d478:	f000 f82c 	bl	1d4d4 <__swsetup_r>
   1d47c:	2800      	cmp	r0, #0
   1d47e:	d0ca      	beq.n	1d416 <__swbuf_r+0x2e>
   1d480:	2601      	movs	r6, #1
   1d482:	4276      	negs	r6, r6
   1d484:	0030      	movs	r0, r6
   1d486:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1d488:	00021cb0 	.word	0x00021cb0
   1d48c:	00021cd0 	.word	0x00021cd0
   1d490:	00021c90 	.word	0x00021c90

0001d494 <__ascii_wctomb>:
   1d494:	1e0b      	subs	r3, r1, #0
   1d496:	d004      	beq.n	1d4a2 <__ascii_wctomb+0xe>
   1d498:	2aff      	cmp	r2, #255	; 0xff
   1d49a:	d904      	bls.n	1d4a6 <__ascii_wctomb+0x12>
   1d49c:	238a      	movs	r3, #138	; 0x8a
   1d49e:	6003      	str	r3, [r0, #0]
   1d4a0:	3b8b      	subs	r3, #139	; 0x8b
   1d4a2:	0018      	movs	r0, r3
   1d4a4:	4770      	bx	lr
   1d4a6:	700a      	strb	r2, [r1, #0]
   1d4a8:	2301      	movs	r3, #1
   1d4aa:	e7fa      	b.n	1d4a2 <__ascii_wctomb+0xe>

0001d4ac <_write_r>:
   1d4ac:	b570      	push	{r4, r5, r6, lr}
   1d4ae:	0005      	movs	r5, r0
   1d4b0:	0008      	movs	r0, r1
   1d4b2:	0011      	movs	r1, r2
   1d4b4:	2200      	movs	r2, #0
   1d4b6:	4c06      	ldr	r4, [pc, #24]	; (1d4d0 <_write_r+0x24>)
   1d4b8:	6022      	str	r2, [r4, #0]
   1d4ba:	001a      	movs	r2, r3
   1d4bc:	f7f2 f846 	bl	f54c <_write>
   1d4c0:	1c43      	adds	r3, r0, #1
   1d4c2:	d103      	bne.n	1d4cc <_write_r+0x20>
   1d4c4:	6823      	ldr	r3, [r4, #0]
   1d4c6:	2b00      	cmp	r3, #0
   1d4c8:	d000      	beq.n	1d4cc <_write_r+0x20>
   1d4ca:	602b      	str	r3, [r5, #0]
   1d4cc:	bd70      	pop	{r4, r5, r6, pc}
   1d4ce:	46c0      	nop			; (mov r8, r8)
   1d4d0:	20002c00 	.word	0x20002c00

0001d4d4 <__swsetup_r>:
   1d4d4:	4b36      	ldr	r3, [pc, #216]	; (1d5b0 <__swsetup_r+0xdc>)
   1d4d6:	b570      	push	{r4, r5, r6, lr}
   1d4d8:	681d      	ldr	r5, [r3, #0]
   1d4da:	0006      	movs	r6, r0
   1d4dc:	000c      	movs	r4, r1
   1d4de:	2d00      	cmp	r5, #0
   1d4e0:	d005      	beq.n	1d4ee <__swsetup_r+0x1a>
   1d4e2:	69ab      	ldr	r3, [r5, #24]
   1d4e4:	2b00      	cmp	r3, #0
   1d4e6:	d102      	bne.n	1d4ee <__swsetup_r+0x1a>
   1d4e8:	0028      	movs	r0, r5
   1d4ea:	f7fe fcaf 	bl	1be4c <__sinit>
   1d4ee:	4b31      	ldr	r3, [pc, #196]	; (1d5b4 <__swsetup_r+0xe0>)
   1d4f0:	429c      	cmp	r4, r3
   1d4f2:	d10f      	bne.n	1d514 <__swsetup_r+0x40>
   1d4f4:	686c      	ldr	r4, [r5, #4]
   1d4f6:	230c      	movs	r3, #12
   1d4f8:	5ee2      	ldrsh	r2, [r4, r3]
   1d4fa:	b293      	uxth	r3, r2
   1d4fc:	0719      	lsls	r1, r3, #28
   1d4fe:	d42d      	bmi.n	1d55c <__swsetup_r+0x88>
   1d500:	06d9      	lsls	r1, r3, #27
   1d502:	d411      	bmi.n	1d528 <__swsetup_r+0x54>
   1d504:	2309      	movs	r3, #9
   1d506:	2001      	movs	r0, #1
   1d508:	6033      	str	r3, [r6, #0]
   1d50a:	3337      	adds	r3, #55	; 0x37
   1d50c:	4313      	orrs	r3, r2
   1d50e:	81a3      	strh	r3, [r4, #12]
   1d510:	4240      	negs	r0, r0
   1d512:	bd70      	pop	{r4, r5, r6, pc}
   1d514:	4b28      	ldr	r3, [pc, #160]	; (1d5b8 <__swsetup_r+0xe4>)
   1d516:	429c      	cmp	r4, r3
   1d518:	d101      	bne.n	1d51e <__swsetup_r+0x4a>
   1d51a:	68ac      	ldr	r4, [r5, #8]
   1d51c:	e7eb      	b.n	1d4f6 <__swsetup_r+0x22>
   1d51e:	4b27      	ldr	r3, [pc, #156]	; (1d5bc <__swsetup_r+0xe8>)
   1d520:	429c      	cmp	r4, r3
   1d522:	d1e8      	bne.n	1d4f6 <__swsetup_r+0x22>
   1d524:	68ec      	ldr	r4, [r5, #12]
   1d526:	e7e6      	b.n	1d4f6 <__swsetup_r+0x22>
   1d528:	075b      	lsls	r3, r3, #29
   1d52a:	d513      	bpl.n	1d554 <__swsetup_r+0x80>
   1d52c:	6b61      	ldr	r1, [r4, #52]	; 0x34
   1d52e:	2900      	cmp	r1, #0
   1d530:	d008      	beq.n	1d544 <__swsetup_r+0x70>
   1d532:	0023      	movs	r3, r4
   1d534:	3344      	adds	r3, #68	; 0x44
   1d536:	4299      	cmp	r1, r3
   1d538:	d002      	beq.n	1d540 <__swsetup_r+0x6c>
   1d53a:	0030      	movs	r0, r6
   1d53c:	f7fe fe22 	bl	1c184 <_free_r>
   1d540:	2300      	movs	r3, #0
   1d542:	6363      	str	r3, [r4, #52]	; 0x34
   1d544:	2224      	movs	r2, #36	; 0x24
   1d546:	89a3      	ldrh	r3, [r4, #12]
   1d548:	4393      	bics	r3, r2
   1d54a:	81a3      	strh	r3, [r4, #12]
   1d54c:	2300      	movs	r3, #0
   1d54e:	6063      	str	r3, [r4, #4]
   1d550:	6923      	ldr	r3, [r4, #16]
   1d552:	6023      	str	r3, [r4, #0]
   1d554:	2308      	movs	r3, #8
   1d556:	89a2      	ldrh	r2, [r4, #12]
   1d558:	4313      	orrs	r3, r2
   1d55a:	81a3      	strh	r3, [r4, #12]
   1d55c:	6923      	ldr	r3, [r4, #16]
   1d55e:	2b00      	cmp	r3, #0
   1d560:	d10b      	bne.n	1d57a <__swsetup_r+0xa6>
   1d562:	21a0      	movs	r1, #160	; 0xa0
   1d564:	2280      	movs	r2, #128	; 0x80
   1d566:	89a3      	ldrh	r3, [r4, #12]
   1d568:	0089      	lsls	r1, r1, #2
   1d56a:	0092      	lsls	r2, r2, #2
   1d56c:	400b      	ands	r3, r1
   1d56e:	4293      	cmp	r3, r2
   1d570:	d003      	beq.n	1d57a <__swsetup_r+0xa6>
   1d572:	0021      	movs	r1, r4
   1d574:	0030      	movs	r0, r6
   1d576:	f7fe fd5d 	bl	1c034 <__smakebuf_r>
   1d57a:	2301      	movs	r3, #1
   1d57c:	89a2      	ldrh	r2, [r4, #12]
   1d57e:	4013      	ands	r3, r2
   1d580:	d011      	beq.n	1d5a6 <__swsetup_r+0xd2>
   1d582:	2300      	movs	r3, #0
   1d584:	60a3      	str	r3, [r4, #8]
   1d586:	6963      	ldr	r3, [r4, #20]
   1d588:	425b      	negs	r3, r3
   1d58a:	61a3      	str	r3, [r4, #24]
   1d58c:	2000      	movs	r0, #0
   1d58e:	6923      	ldr	r3, [r4, #16]
   1d590:	4283      	cmp	r3, r0
   1d592:	d1be      	bne.n	1d512 <__swsetup_r+0x3e>
   1d594:	230c      	movs	r3, #12
   1d596:	5ee2      	ldrsh	r2, [r4, r3]
   1d598:	0613      	lsls	r3, r2, #24
   1d59a:	d5ba      	bpl.n	1d512 <__swsetup_r+0x3e>
   1d59c:	2340      	movs	r3, #64	; 0x40
   1d59e:	4313      	orrs	r3, r2
   1d5a0:	81a3      	strh	r3, [r4, #12]
   1d5a2:	3801      	subs	r0, #1
   1d5a4:	e7b5      	b.n	1d512 <__swsetup_r+0x3e>
   1d5a6:	0792      	lsls	r2, r2, #30
   1d5a8:	d400      	bmi.n	1d5ac <__swsetup_r+0xd8>
   1d5aa:	6963      	ldr	r3, [r4, #20]
   1d5ac:	60a3      	str	r3, [r4, #8]
   1d5ae:	e7ed      	b.n	1d58c <__swsetup_r+0xb8>
   1d5b0:	2000022c 	.word	0x2000022c
   1d5b4:	00021cb0 	.word	0x00021cb0
   1d5b8:	00021cd0 	.word	0x00021cd0
   1d5bc:	00021c90 	.word	0x00021c90

0001d5c0 <_close_r>:
   1d5c0:	2300      	movs	r3, #0
   1d5c2:	b570      	push	{r4, r5, r6, lr}
   1d5c4:	4c06      	ldr	r4, [pc, #24]	; (1d5e0 <_close_r+0x20>)
   1d5c6:	0005      	movs	r5, r0
   1d5c8:	0008      	movs	r0, r1
   1d5ca:	6023      	str	r3, [r4, #0]
   1d5cc:	f7e2 ff2a 	bl	424 <_close>
   1d5d0:	1c43      	adds	r3, r0, #1
   1d5d2:	d103      	bne.n	1d5dc <_close_r+0x1c>
   1d5d4:	6823      	ldr	r3, [r4, #0]
   1d5d6:	2b00      	cmp	r3, #0
   1d5d8:	d000      	beq.n	1d5dc <_close_r+0x1c>
   1d5da:	602b      	str	r3, [r5, #0]
   1d5dc:	bd70      	pop	{r4, r5, r6, pc}
   1d5de:	46c0      	nop			; (mov r8, r8)
   1d5e0:	20002c00 	.word	0x20002c00

0001d5e4 <_fstat_r>:
   1d5e4:	2300      	movs	r3, #0
   1d5e6:	b570      	push	{r4, r5, r6, lr}
   1d5e8:	4c06      	ldr	r4, [pc, #24]	; (1d604 <_fstat_r+0x20>)
   1d5ea:	0005      	movs	r5, r0
   1d5ec:	0008      	movs	r0, r1
   1d5ee:	0011      	movs	r1, r2
   1d5f0:	6023      	str	r3, [r4, #0]
   1d5f2:	f7e2 ff21 	bl	438 <_fstat>
   1d5f6:	1c43      	adds	r3, r0, #1
   1d5f8:	d103      	bne.n	1d602 <_fstat_r+0x1e>
   1d5fa:	6823      	ldr	r3, [r4, #0]
   1d5fc:	2b00      	cmp	r3, #0
   1d5fe:	d000      	beq.n	1d602 <_fstat_r+0x1e>
   1d600:	602b      	str	r3, [r5, #0]
   1d602:	bd70      	pop	{r4, r5, r6, pc}
   1d604:	20002c00 	.word	0x20002c00

0001d608 <rshift>:
   1d608:	b5f0      	push	{r4, r5, r6, r7, lr}
   1d60a:	0006      	movs	r6, r0
   1d60c:	6905      	ldr	r5, [r0, #16]
   1d60e:	3614      	adds	r6, #20
   1d610:	114b      	asrs	r3, r1, #5
   1d612:	0034      	movs	r4, r6
   1d614:	42ab      	cmp	r3, r5
   1d616:	da1a      	bge.n	1d64e <rshift+0x46>
   1d618:	221f      	movs	r2, #31
   1d61a:	00ad      	lsls	r5, r5, #2
   1d61c:	009b      	lsls	r3, r3, #2
   1d61e:	1975      	adds	r5, r6, r5
   1d620:	18f3      	adds	r3, r6, r3
   1d622:	4011      	ands	r1, r2
   1d624:	d107      	bne.n	1d636 <rshift+0x2e>
   1d626:	001a      	movs	r2, r3
   1d628:	0033      	movs	r3, r6
   1d62a:	001c      	movs	r4, r3
   1d62c:	4295      	cmp	r5, r2
   1d62e:	d90e      	bls.n	1d64e <rshift+0x46>
   1d630:	ca02      	ldmia	r2!, {r1}
   1d632:	c302      	stmia	r3!, {r1}
   1d634:	e7f9      	b.n	1d62a <rshift+0x22>
   1d636:	cb04      	ldmia	r3!, {r2}
   1d638:	2720      	movs	r7, #32
   1d63a:	40ca      	lsrs	r2, r1
   1d63c:	46b4      	mov	ip, r6
   1d63e:	1a7f      	subs	r7, r7, r1
   1d640:	4664      	mov	r4, ip
   1d642:	429d      	cmp	r5, r3
   1d644:	d809      	bhi.n	1d65a <rshift+0x52>
   1d646:	6022      	str	r2, [r4, #0]
   1d648:	2a00      	cmp	r2, #0
   1d64a:	d000      	beq.n	1d64e <rshift+0x46>
   1d64c:	3404      	adds	r4, #4
   1d64e:	1ba3      	subs	r3, r4, r6
   1d650:	109b      	asrs	r3, r3, #2
   1d652:	6103      	str	r3, [r0, #16]
   1d654:	d100      	bne.n	1d658 <rshift+0x50>
   1d656:	6143      	str	r3, [r0, #20]
   1d658:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1d65a:	681c      	ldr	r4, [r3, #0]
   1d65c:	40bc      	lsls	r4, r7
   1d65e:	4322      	orrs	r2, r4
   1d660:	4664      	mov	r4, ip
   1d662:	c404      	stmia	r4!, {r2}
   1d664:	cb04      	ldmia	r3!, {r2}
   1d666:	46a4      	mov	ip, r4
   1d668:	40ca      	lsrs	r2, r1
   1d66a:	e7e9      	b.n	1d640 <rshift+0x38>

0001d66c <__hexdig_fun>:
   1d66c:	0003      	movs	r3, r0
   1d66e:	3b30      	subs	r3, #48	; 0x30
   1d670:	2b09      	cmp	r3, #9
   1d672:	d803      	bhi.n	1d67c <__hexdig_fun+0x10>
   1d674:	3820      	subs	r0, #32
   1d676:	b2c3      	uxtb	r3, r0
   1d678:	0018      	movs	r0, r3
   1d67a:	4770      	bx	lr
   1d67c:	0003      	movs	r3, r0
   1d67e:	3b61      	subs	r3, #97	; 0x61
   1d680:	2b05      	cmp	r3, #5
   1d682:	d801      	bhi.n	1d688 <__hexdig_fun+0x1c>
   1d684:	3847      	subs	r0, #71	; 0x47
   1d686:	e7f6      	b.n	1d676 <__hexdig_fun+0xa>
   1d688:	0002      	movs	r2, r0
   1d68a:	3a41      	subs	r2, #65	; 0x41
   1d68c:	2300      	movs	r3, #0
   1d68e:	2a05      	cmp	r2, #5
   1d690:	d8f2      	bhi.n	1d678 <__hexdig_fun+0xc>
   1d692:	3827      	subs	r0, #39	; 0x27
   1d694:	e7ef      	b.n	1d676 <__hexdig_fun+0xa>

0001d696 <__gethex>:
   1d696:	b5f0      	push	{r4, r5, r6, r7, lr}
   1d698:	b08d      	sub	sp, #52	; 0x34
   1d69a:	9005      	str	r0, [sp, #20]
   1d69c:	9814      	ldr	r0, [sp, #80]	; 0x50
   1d69e:	9109      	str	r1, [sp, #36]	; 0x24
   1d6a0:	9202      	str	r2, [sp, #8]
   1d6a2:	930a      	str	r3, [sp, #40]	; 0x28
   1d6a4:	f000 faee 	bl	1dc84 <__localeconv_l>
   1d6a8:	6803      	ldr	r3, [r0, #0]
   1d6aa:	0018      	movs	r0, r3
   1d6ac:	9307      	str	r3, [sp, #28]
   1d6ae:	f7ff f83c 	bl	1c72a <strlen>
   1d6b2:	2202      	movs	r2, #2
   1d6b4:	9b07      	ldr	r3, [sp, #28]
   1d6b6:	4252      	negs	r2, r2
   1d6b8:	181b      	adds	r3, r3, r0
   1d6ba:	3b01      	subs	r3, #1
   1d6bc:	781b      	ldrb	r3, [r3, #0]
   1d6be:	9004      	str	r0, [sp, #16]
   1d6c0:	930b      	str	r3, [sp, #44]	; 0x2c
   1d6c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1d6c4:	6819      	ldr	r1, [r3, #0]
   1d6c6:	1c8b      	adds	r3, r1, #2
   1d6c8:	1a52      	subs	r2, r2, r1
   1d6ca:	18d1      	adds	r1, r2, r3
   1d6cc:	9301      	str	r3, [sp, #4]
   1d6ce:	9108      	str	r1, [sp, #32]
   1d6d0:	9901      	ldr	r1, [sp, #4]
   1d6d2:	3301      	adds	r3, #1
   1d6d4:	7808      	ldrb	r0, [r1, #0]
   1d6d6:	2830      	cmp	r0, #48	; 0x30
   1d6d8:	d0f7      	beq.n	1d6ca <__gethex+0x34>
   1d6da:	f7ff ffc7 	bl	1d66c <__hexdig_fun>
   1d6de:	1e07      	subs	r7, r0, #0
   1d6e0:	d000      	beq.n	1d6e4 <__gethex+0x4e>
   1d6e2:	e06b      	b.n	1d7bc <__gethex+0x126>
   1d6e4:	9a04      	ldr	r2, [sp, #16]
   1d6e6:	9907      	ldr	r1, [sp, #28]
   1d6e8:	9801      	ldr	r0, [sp, #4]
   1d6ea:	f7ff f825 	bl	1c738 <strncmp>
   1d6ee:	2800      	cmp	r0, #0
   1d6f0:	d000      	beq.n	1d6f4 <__gethex+0x5e>
   1d6f2:	e06b      	b.n	1d7cc <__gethex+0x136>
   1d6f4:	9b01      	ldr	r3, [sp, #4]
   1d6f6:	9a04      	ldr	r2, [sp, #16]
   1d6f8:	189c      	adds	r4, r3, r2
   1d6fa:	7820      	ldrb	r0, [r4, #0]
   1d6fc:	f7ff ffb6 	bl	1d66c <__hexdig_fun>
   1d700:	2800      	cmp	r0, #0
   1d702:	d067      	beq.n	1d7d4 <__gethex+0x13e>
   1d704:	9401      	str	r4, [sp, #4]
   1d706:	9b01      	ldr	r3, [sp, #4]
   1d708:	7818      	ldrb	r0, [r3, #0]
   1d70a:	2830      	cmp	r0, #48	; 0x30
   1d70c:	d052      	beq.n	1d7b4 <__gethex+0x11e>
   1d70e:	f7ff ffad 	bl	1d66c <__hexdig_fun>
   1d712:	4243      	negs	r3, r0
   1d714:	4143      	adcs	r3, r0
   1d716:	9303      	str	r3, [sp, #12]
   1d718:	2301      	movs	r3, #1
   1d71a:	0026      	movs	r6, r4
   1d71c:	9308      	str	r3, [sp, #32]
   1d71e:	9c01      	ldr	r4, [sp, #4]
   1d720:	7820      	ldrb	r0, [r4, #0]
   1d722:	f7ff ffa3 	bl	1d66c <__hexdig_fun>
   1d726:	2800      	cmp	r0, #0
   1d728:	d14c      	bne.n	1d7c4 <__gethex+0x12e>
   1d72a:	9a04      	ldr	r2, [sp, #16]
   1d72c:	9907      	ldr	r1, [sp, #28]
   1d72e:	0020      	movs	r0, r4
   1d730:	f7ff f802 	bl	1c738 <strncmp>
   1d734:	2800      	cmp	r0, #0
   1d736:	d109      	bne.n	1d74c <__gethex+0xb6>
   1d738:	2e00      	cmp	r6, #0
   1d73a:	d109      	bne.n	1d750 <__gethex+0xba>
   1d73c:	9b04      	ldr	r3, [sp, #16]
   1d73e:	18e4      	adds	r4, r4, r3
   1d740:	0026      	movs	r6, r4
   1d742:	7820      	ldrb	r0, [r4, #0]
   1d744:	f7ff ff92 	bl	1d66c <__hexdig_fun>
   1d748:	2800      	cmp	r0, #0
   1d74a:	d13d      	bne.n	1d7c8 <__gethex+0x132>
   1d74c:	1e37      	subs	r7, r6, #0
   1d74e:	d001      	beq.n	1d754 <__gethex+0xbe>
   1d750:	1b37      	subs	r7, r6, r4
   1d752:	00bf      	lsls	r7, r7, #2
   1d754:	7823      	ldrb	r3, [r4, #0]
   1d756:	2b50      	cmp	r3, #80	; 0x50
   1d758:	d001      	beq.n	1d75e <__gethex+0xc8>
   1d75a:	2b70      	cmp	r3, #112	; 0x70
   1d75c:	d147      	bne.n	1d7ee <__gethex+0x158>
   1d75e:	7863      	ldrb	r3, [r4, #1]
   1d760:	2b2b      	cmp	r3, #43	; 0x2b
   1d762:	d03d      	beq.n	1d7e0 <__gethex+0x14a>
   1d764:	2b2d      	cmp	r3, #45	; 0x2d
   1d766:	d037      	beq.n	1d7d8 <__gethex+0x142>
   1d768:	2300      	movs	r3, #0
   1d76a:	1c66      	adds	r6, r4, #1
   1d76c:	9306      	str	r3, [sp, #24]
   1d76e:	7830      	ldrb	r0, [r6, #0]
   1d770:	f7ff ff7c 	bl	1d66c <__hexdig_fun>
   1d774:	1e43      	subs	r3, r0, #1
   1d776:	b2db      	uxtb	r3, r3
   1d778:	2b18      	cmp	r3, #24
   1d77a:	d838      	bhi.n	1d7ee <__gethex+0x158>
   1d77c:	3810      	subs	r0, #16
   1d77e:	0005      	movs	r5, r0
   1d780:	3601      	adds	r6, #1
   1d782:	7830      	ldrb	r0, [r6, #0]
   1d784:	f7ff ff72 	bl	1d66c <__hexdig_fun>
   1d788:	1e43      	subs	r3, r0, #1
   1d78a:	b2db      	uxtb	r3, r3
   1d78c:	2b18      	cmp	r3, #24
   1d78e:	d929      	bls.n	1d7e4 <__gethex+0x14e>
   1d790:	9b06      	ldr	r3, [sp, #24]
   1d792:	2b00      	cmp	r3, #0
   1d794:	d000      	beq.n	1d798 <__gethex+0x102>
   1d796:	426d      	negs	r5, r5
   1d798:	197f      	adds	r7, r7, r5
   1d79a:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1d79c:	601e      	str	r6, [r3, #0]
   1d79e:	9b03      	ldr	r3, [sp, #12]
   1d7a0:	2b00      	cmp	r3, #0
   1d7a2:	d026      	beq.n	1d7f2 <__gethex+0x15c>
   1d7a4:	2600      	movs	r6, #0
   1d7a6:	9b08      	ldr	r3, [sp, #32]
   1d7a8:	42b3      	cmp	r3, r6
   1d7aa:	d100      	bne.n	1d7ae <__gethex+0x118>
   1d7ac:	3606      	adds	r6, #6
   1d7ae:	0030      	movs	r0, r6
   1d7b0:	b00d      	add	sp, #52	; 0x34
   1d7b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1d7b4:	9b01      	ldr	r3, [sp, #4]
   1d7b6:	3301      	adds	r3, #1
   1d7b8:	9301      	str	r3, [sp, #4]
   1d7ba:	e7a4      	b.n	1d706 <__gethex+0x70>
   1d7bc:	2300      	movs	r3, #0
   1d7be:	9303      	str	r3, [sp, #12]
   1d7c0:	001e      	movs	r6, r3
   1d7c2:	e7ac      	b.n	1d71e <__gethex+0x88>
   1d7c4:	3401      	adds	r4, #1
   1d7c6:	e7ab      	b.n	1d720 <__gethex+0x8a>
   1d7c8:	3401      	adds	r4, #1
   1d7ca:	e7ba      	b.n	1d742 <__gethex+0xac>
   1d7cc:	9c01      	ldr	r4, [sp, #4]
   1d7ce:	2301      	movs	r3, #1
   1d7d0:	9303      	str	r3, [sp, #12]
   1d7d2:	e7bf      	b.n	1d754 <__gethex+0xbe>
   1d7d4:	0007      	movs	r7, r0
   1d7d6:	e7fa      	b.n	1d7ce <__gethex+0x138>
   1d7d8:	2301      	movs	r3, #1
   1d7da:	9306      	str	r3, [sp, #24]
   1d7dc:	1ca6      	adds	r6, r4, #2
   1d7de:	e7c6      	b.n	1d76e <__gethex+0xd8>
   1d7e0:	2300      	movs	r3, #0
   1d7e2:	e7fa      	b.n	1d7da <__gethex+0x144>
   1d7e4:	230a      	movs	r3, #10
   1d7e6:	435d      	muls	r5, r3
   1d7e8:	182d      	adds	r5, r5, r0
   1d7ea:	3d10      	subs	r5, #16
   1d7ec:	e7c8      	b.n	1d780 <__gethex+0xea>
   1d7ee:	0026      	movs	r6, r4
   1d7f0:	e7d3      	b.n	1d79a <__gethex+0x104>
   1d7f2:	9b01      	ldr	r3, [sp, #4]
   1d7f4:	9903      	ldr	r1, [sp, #12]
   1d7f6:	1ae3      	subs	r3, r4, r3
   1d7f8:	3b01      	subs	r3, #1
   1d7fa:	2b07      	cmp	r3, #7
   1d7fc:	dc47      	bgt.n	1d88e <__gethex+0x1f8>
   1d7fe:	9805      	ldr	r0, [sp, #20]
   1d800:	f000 fa58 	bl	1dcb4 <_Balloc>
   1d804:	0003      	movs	r3, r0
   1d806:	3314      	adds	r3, #20
   1d808:	9303      	str	r3, [sp, #12]
   1d80a:	9308      	str	r3, [sp, #32]
   1d80c:	2300      	movs	r3, #0
   1d80e:	0005      	movs	r5, r0
   1d810:	001e      	movs	r6, r3
   1d812:	9306      	str	r3, [sp, #24]
   1d814:	9b01      	ldr	r3, [sp, #4]
   1d816:	42a3      	cmp	r3, r4
   1d818:	d33c      	bcc.n	1d894 <__gethex+0x1fe>
   1d81a:	9c08      	ldr	r4, [sp, #32]
   1d81c:	9b03      	ldr	r3, [sp, #12]
   1d81e:	c440      	stmia	r4!, {r6}
   1d820:	1ae4      	subs	r4, r4, r3
   1d822:	10a4      	asrs	r4, r4, #2
   1d824:	612c      	str	r4, [r5, #16]
   1d826:	0030      	movs	r0, r6
   1d828:	f000 fb10 	bl	1de4c <__hi0bits>
   1d82c:	9b02      	ldr	r3, [sp, #8]
   1d82e:	0164      	lsls	r4, r4, #5
   1d830:	681b      	ldr	r3, [r3, #0]
   1d832:	1a26      	subs	r6, r4, r0
   1d834:	9301      	str	r3, [sp, #4]
   1d836:	429e      	cmp	r6, r3
   1d838:	dd5f      	ble.n	1d8fa <__gethex+0x264>
   1d83a:	1af6      	subs	r6, r6, r3
   1d83c:	0031      	movs	r1, r6
   1d83e:	0028      	movs	r0, r5
   1d840:	f000 fe09 	bl	1e456 <__any_on>
   1d844:	1e04      	subs	r4, r0, #0
   1d846:	d00f      	beq.n	1d868 <__gethex+0x1d2>
   1d848:	2401      	movs	r4, #1
   1d84a:	211f      	movs	r1, #31
   1d84c:	0020      	movs	r0, r4
   1d84e:	1e73      	subs	r3, r6, #1
   1d850:	4019      	ands	r1, r3
   1d852:	4088      	lsls	r0, r1
   1d854:	0001      	movs	r1, r0
   1d856:	115a      	asrs	r2, r3, #5
   1d858:	9803      	ldr	r0, [sp, #12]
   1d85a:	0092      	lsls	r2, r2, #2
   1d85c:	5812      	ldr	r2, [r2, r0]
   1d85e:	420a      	tst	r2, r1
   1d860:	d002      	beq.n	1d868 <__gethex+0x1d2>
   1d862:	42a3      	cmp	r3, r4
   1d864:	dc41      	bgt.n	1d8ea <__gethex+0x254>
   1d866:	2402      	movs	r4, #2
   1d868:	0031      	movs	r1, r6
   1d86a:	0028      	movs	r0, r5
   1d86c:	f7ff fecc 	bl	1d608 <rshift>
   1d870:	19bf      	adds	r7, r7, r6
   1d872:	9b02      	ldr	r3, [sp, #8]
   1d874:	689b      	ldr	r3, [r3, #8]
   1d876:	9304      	str	r3, [sp, #16]
   1d878:	429f      	cmp	r7, r3
   1d87a:	dd4e      	ble.n	1d91a <__gethex+0x284>
   1d87c:	0029      	movs	r1, r5
   1d87e:	9805      	ldr	r0, [sp, #20]
   1d880:	f000 fa50 	bl	1dd24 <_Bfree>
   1d884:	2300      	movs	r3, #0
   1d886:	9a12      	ldr	r2, [sp, #72]	; 0x48
   1d888:	26a3      	movs	r6, #163	; 0xa3
   1d88a:	6013      	str	r3, [r2, #0]
   1d88c:	e78f      	b.n	1d7ae <__gethex+0x118>
   1d88e:	3101      	adds	r1, #1
   1d890:	105b      	asrs	r3, r3, #1
   1d892:	e7b2      	b.n	1d7fa <__gethex+0x164>
   1d894:	1e63      	subs	r3, r4, #1
   1d896:	9309      	str	r3, [sp, #36]	; 0x24
   1d898:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   1d89a:	781b      	ldrb	r3, [r3, #0]
   1d89c:	4293      	cmp	r3, r2
   1d89e:	d015      	beq.n	1d8cc <__gethex+0x236>
   1d8a0:	9b06      	ldr	r3, [sp, #24]
   1d8a2:	2b20      	cmp	r3, #32
   1d8a4:	d105      	bne.n	1d8b2 <__gethex+0x21c>
   1d8a6:	9b08      	ldr	r3, [sp, #32]
   1d8a8:	601e      	str	r6, [r3, #0]
   1d8aa:	2600      	movs	r6, #0
   1d8ac:	3304      	adds	r3, #4
   1d8ae:	9308      	str	r3, [sp, #32]
   1d8b0:	9606      	str	r6, [sp, #24]
   1d8b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1d8b4:	7818      	ldrb	r0, [r3, #0]
   1d8b6:	f7ff fed9 	bl	1d66c <__hexdig_fun>
   1d8ba:	230f      	movs	r3, #15
   1d8bc:	4018      	ands	r0, r3
   1d8be:	9b06      	ldr	r3, [sp, #24]
   1d8c0:	9c09      	ldr	r4, [sp, #36]	; 0x24
   1d8c2:	4098      	lsls	r0, r3
   1d8c4:	3304      	adds	r3, #4
   1d8c6:	4306      	orrs	r6, r0
   1d8c8:	9306      	str	r3, [sp, #24]
   1d8ca:	e7a3      	b.n	1d814 <__gethex+0x17e>
   1d8cc:	2301      	movs	r3, #1
   1d8ce:	9a04      	ldr	r2, [sp, #16]
   1d8d0:	1a9c      	subs	r4, r3, r2
   1d8d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1d8d4:	191c      	adds	r4, r3, r4
   1d8d6:	9b01      	ldr	r3, [sp, #4]
   1d8d8:	42a3      	cmp	r3, r4
   1d8da:	d8e1      	bhi.n	1d8a0 <__gethex+0x20a>
   1d8dc:	9907      	ldr	r1, [sp, #28]
   1d8de:	0020      	movs	r0, r4
   1d8e0:	f7fe ff2a 	bl	1c738 <strncmp>
   1d8e4:	2800      	cmp	r0, #0
   1d8e6:	d095      	beq.n	1d814 <__gethex+0x17e>
   1d8e8:	e7da      	b.n	1d8a0 <__gethex+0x20a>
   1d8ea:	1eb1      	subs	r1, r6, #2
   1d8ec:	0028      	movs	r0, r5
   1d8ee:	f000 fdb2 	bl	1e456 <__any_on>
   1d8f2:	2800      	cmp	r0, #0
   1d8f4:	d0b7      	beq.n	1d866 <__gethex+0x1d0>
   1d8f6:	2403      	movs	r4, #3
   1d8f8:	e7b6      	b.n	1d868 <__gethex+0x1d2>
   1d8fa:	9b01      	ldr	r3, [sp, #4]
   1d8fc:	2400      	movs	r4, #0
   1d8fe:	429e      	cmp	r6, r3
   1d900:	dab7      	bge.n	1d872 <__gethex+0x1dc>
   1d902:	1b9e      	subs	r6, r3, r6
   1d904:	0029      	movs	r1, r5
   1d906:	0032      	movs	r2, r6
   1d908:	9805      	ldr	r0, [sp, #20]
   1d90a:	f000 fbd3 	bl	1e0b4 <__lshift>
   1d90e:	0003      	movs	r3, r0
   1d910:	3314      	adds	r3, #20
   1d912:	0005      	movs	r5, r0
   1d914:	1bbf      	subs	r7, r7, r6
   1d916:	9303      	str	r3, [sp, #12]
   1d918:	e7ab      	b.n	1d872 <__gethex+0x1dc>
   1d91a:	9b02      	ldr	r3, [sp, #8]
   1d91c:	685e      	ldr	r6, [r3, #4]
   1d91e:	42b7      	cmp	r7, r6
   1d920:	da6b      	bge.n	1d9fa <__gethex+0x364>
   1d922:	9b01      	ldr	r3, [sp, #4]
   1d924:	1bf6      	subs	r6, r6, r7
   1d926:	42b3      	cmp	r3, r6
   1d928:	dc32      	bgt.n	1d990 <__gethex+0x2fa>
   1d92a:	9b02      	ldr	r3, [sp, #8]
   1d92c:	68db      	ldr	r3, [r3, #12]
   1d92e:	2b02      	cmp	r3, #2
   1d930:	d026      	beq.n	1d980 <__gethex+0x2ea>
   1d932:	2b03      	cmp	r3, #3
   1d934:	d028      	beq.n	1d988 <__gethex+0x2f2>
   1d936:	2b01      	cmp	r3, #1
   1d938:	d119      	bne.n	1d96e <__gethex+0x2d8>
   1d93a:	9b01      	ldr	r3, [sp, #4]
   1d93c:	42b3      	cmp	r3, r6
   1d93e:	d116      	bne.n	1d96e <__gethex+0x2d8>
   1d940:	2b01      	cmp	r3, #1
   1d942:	dc0d      	bgt.n	1d960 <__gethex+0x2ca>
   1d944:	9b02      	ldr	r3, [sp, #8]
   1d946:	2662      	movs	r6, #98	; 0x62
   1d948:	685b      	ldr	r3, [r3, #4]
   1d94a:	9301      	str	r3, [sp, #4]
   1d94c:	9a01      	ldr	r2, [sp, #4]
   1d94e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1d950:	601a      	str	r2, [r3, #0]
   1d952:	2301      	movs	r3, #1
   1d954:	9a03      	ldr	r2, [sp, #12]
   1d956:	612b      	str	r3, [r5, #16]
   1d958:	6013      	str	r3, [r2, #0]
   1d95a:	9b12      	ldr	r3, [sp, #72]	; 0x48
   1d95c:	601d      	str	r5, [r3, #0]
   1d95e:	e726      	b.n	1d7ae <__gethex+0x118>
   1d960:	9901      	ldr	r1, [sp, #4]
   1d962:	0028      	movs	r0, r5
   1d964:	3901      	subs	r1, #1
   1d966:	f000 fd76 	bl	1e456 <__any_on>
   1d96a:	2800      	cmp	r0, #0
   1d96c:	d1ea      	bne.n	1d944 <__gethex+0x2ae>
   1d96e:	0029      	movs	r1, r5
   1d970:	9805      	ldr	r0, [sp, #20]
   1d972:	f000 f9d7 	bl	1dd24 <_Bfree>
   1d976:	2300      	movs	r3, #0
   1d978:	9a12      	ldr	r2, [sp, #72]	; 0x48
   1d97a:	2650      	movs	r6, #80	; 0x50
   1d97c:	6013      	str	r3, [r2, #0]
   1d97e:	e716      	b.n	1d7ae <__gethex+0x118>
   1d980:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   1d982:	2b00      	cmp	r3, #0
   1d984:	d0de      	beq.n	1d944 <__gethex+0x2ae>
   1d986:	e7f2      	b.n	1d96e <__gethex+0x2d8>
   1d988:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   1d98a:	2b00      	cmp	r3, #0
   1d98c:	d1da      	bne.n	1d944 <__gethex+0x2ae>
   1d98e:	e7ee      	b.n	1d96e <__gethex+0x2d8>
   1d990:	1e77      	subs	r7, r6, #1
   1d992:	2c00      	cmp	r4, #0
   1d994:	d12f      	bne.n	1d9f6 <__gethex+0x360>
   1d996:	2f00      	cmp	r7, #0
   1d998:	d004      	beq.n	1d9a4 <__gethex+0x30e>
   1d99a:	0039      	movs	r1, r7
   1d99c:	0028      	movs	r0, r5
   1d99e:	f000 fd5a 	bl	1e456 <__any_on>
   1d9a2:	0004      	movs	r4, r0
   1d9a4:	231f      	movs	r3, #31
   1d9a6:	117a      	asrs	r2, r7, #5
   1d9a8:	401f      	ands	r7, r3
   1d9aa:	3b1e      	subs	r3, #30
   1d9ac:	40bb      	lsls	r3, r7
   1d9ae:	9903      	ldr	r1, [sp, #12]
   1d9b0:	0092      	lsls	r2, r2, #2
   1d9b2:	5852      	ldr	r2, [r2, r1]
   1d9b4:	421a      	tst	r2, r3
   1d9b6:	d001      	beq.n	1d9bc <__gethex+0x326>
   1d9b8:	2302      	movs	r3, #2
   1d9ba:	431c      	orrs	r4, r3
   1d9bc:	9b01      	ldr	r3, [sp, #4]
   1d9be:	0031      	movs	r1, r6
   1d9c0:	1b9b      	subs	r3, r3, r6
   1d9c2:	2602      	movs	r6, #2
   1d9c4:	0028      	movs	r0, r5
   1d9c6:	9301      	str	r3, [sp, #4]
   1d9c8:	f7ff fe1e 	bl	1d608 <rshift>
   1d9cc:	9b02      	ldr	r3, [sp, #8]
   1d9ce:	685f      	ldr	r7, [r3, #4]
   1d9d0:	2c00      	cmp	r4, #0
   1d9d2:	d041      	beq.n	1da58 <__gethex+0x3c2>
   1d9d4:	9b02      	ldr	r3, [sp, #8]
   1d9d6:	68db      	ldr	r3, [r3, #12]
   1d9d8:	2b02      	cmp	r3, #2
   1d9da:	d010      	beq.n	1d9fe <__gethex+0x368>
   1d9dc:	2b03      	cmp	r3, #3
   1d9de:	d012      	beq.n	1da06 <__gethex+0x370>
   1d9e0:	2b01      	cmp	r3, #1
   1d9e2:	d106      	bne.n	1d9f2 <__gethex+0x35c>
   1d9e4:	07a2      	lsls	r2, r4, #30
   1d9e6:	d504      	bpl.n	1d9f2 <__gethex+0x35c>
   1d9e8:	9a03      	ldr	r2, [sp, #12]
   1d9ea:	6812      	ldr	r2, [r2, #0]
   1d9ec:	4314      	orrs	r4, r2
   1d9ee:	421c      	tst	r4, r3
   1d9f0:	d10c      	bne.n	1da0c <__gethex+0x376>
   1d9f2:	2310      	movs	r3, #16
   1d9f4:	e02f      	b.n	1da56 <__gethex+0x3c0>
   1d9f6:	2401      	movs	r4, #1
   1d9f8:	e7d4      	b.n	1d9a4 <__gethex+0x30e>
   1d9fa:	2601      	movs	r6, #1
   1d9fc:	e7e8      	b.n	1d9d0 <__gethex+0x33a>
   1d9fe:	2301      	movs	r3, #1
   1da00:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   1da02:	1a9b      	subs	r3, r3, r2
   1da04:	9313      	str	r3, [sp, #76]	; 0x4c
   1da06:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   1da08:	2b00      	cmp	r3, #0
   1da0a:	d0f2      	beq.n	1d9f2 <__gethex+0x35c>
   1da0c:	692c      	ldr	r4, [r5, #16]
   1da0e:	00a3      	lsls	r3, r4, #2
   1da10:	9304      	str	r3, [sp, #16]
   1da12:	002b      	movs	r3, r5
   1da14:	00a2      	lsls	r2, r4, #2
   1da16:	3314      	adds	r3, #20
   1da18:	1899      	adds	r1, r3, r2
   1da1a:	2200      	movs	r2, #0
   1da1c:	4694      	mov	ip, r2
   1da1e:	681a      	ldr	r2, [r3, #0]
   1da20:	1c50      	adds	r0, r2, #1
   1da22:	d01e      	beq.n	1da62 <__gethex+0x3cc>
   1da24:	3201      	adds	r2, #1
   1da26:	601a      	str	r2, [r3, #0]
   1da28:	002b      	movs	r3, r5
   1da2a:	3314      	adds	r3, #20
   1da2c:	2e02      	cmp	r6, #2
   1da2e:	d13b      	bne.n	1daa8 <__gethex+0x412>
   1da30:	9a02      	ldr	r2, [sp, #8]
   1da32:	9901      	ldr	r1, [sp, #4]
   1da34:	6812      	ldr	r2, [r2, #0]
   1da36:	3a01      	subs	r2, #1
   1da38:	4291      	cmp	r1, r2
   1da3a:	d10b      	bne.n	1da54 <__gethex+0x3be>
   1da3c:	114a      	asrs	r2, r1, #5
   1da3e:	211f      	movs	r1, #31
   1da40:	9801      	ldr	r0, [sp, #4]
   1da42:	0092      	lsls	r2, r2, #2
   1da44:	4001      	ands	r1, r0
   1da46:	2001      	movs	r0, #1
   1da48:	0004      	movs	r4, r0
   1da4a:	408c      	lsls	r4, r1
   1da4c:	58d3      	ldr	r3, [r2, r3]
   1da4e:	4223      	tst	r3, r4
   1da50:	d000      	beq.n	1da54 <__gethex+0x3be>
   1da52:	2601      	movs	r6, #1
   1da54:	2320      	movs	r3, #32
   1da56:	431e      	orrs	r6, r3
   1da58:	9b12      	ldr	r3, [sp, #72]	; 0x48
   1da5a:	601d      	str	r5, [r3, #0]
   1da5c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1da5e:	601f      	str	r7, [r3, #0]
   1da60:	e6a5      	b.n	1d7ae <__gethex+0x118>
   1da62:	4662      	mov	r2, ip
   1da64:	c304      	stmia	r3!, {r2}
   1da66:	4299      	cmp	r1, r3
   1da68:	d8d9      	bhi.n	1da1e <__gethex+0x388>
   1da6a:	68ab      	ldr	r3, [r5, #8]
   1da6c:	429c      	cmp	r4, r3
   1da6e:	db12      	blt.n	1da96 <__gethex+0x400>
   1da70:	686b      	ldr	r3, [r5, #4]
   1da72:	9805      	ldr	r0, [sp, #20]
   1da74:	1c59      	adds	r1, r3, #1
   1da76:	f000 f91d 	bl	1dcb4 <_Balloc>
   1da7a:	0029      	movs	r1, r5
   1da7c:	692b      	ldr	r3, [r5, #16]
   1da7e:	9003      	str	r0, [sp, #12]
   1da80:	1c9a      	adds	r2, r3, #2
   1da82:	0092      	lsls	r2, r2, #2
   1da84:	310c      	adds	r1, #12
   1da86:	300c      	adds	r0, #12
   1da88:	f7fe fb58 	bl	1c13c <memcpy>
   1da8c:	0029      	movs	r1, r5
   1da8e:	9805      	ldr	r0, [sp, #20]
   1da90:	f000 f948 	bl	1dd24 <_Bfree>
   1da94:	9d03      	ldr	r5, [sp, #12]
   1da96:	692b      	ldr	r3, [r5, #16]
   1da98:	1c5a      	adds	r2, r3, #1
   1da9a:	612a      	str	r2, [r5, #16]
   1da9c:	2201      	movs	r2, #1
   1da9e:	3304      	adds	r3, #4
   1daa0:	009b      	lsls	r3, r3, #2
   1daa2:	18eb      	adds	r3, r5, r3
   1daa4:	605a      	str	r2, [r3, #4]
   1daa6:	e7bf      	b.n	1da28 <__gethex+0x392>
   1daa8:	692a      	ldr	r2, [r5, #16]
   1daaa:	4294      	cmp	r4, r2
   1daac:	da0a      	bge.n	1dac4 <__gethex+0x42e>
   1daae:	2101      	movs	r1, #1
   1dab0:	0028      	movs	r0, r5
   1dab2:	f7ff fda9 	bl	1d608 <rshift>
   1dab6:	9b02      	ldr	r3, [sp, #8]
   1dab8:	3701      	adds	r7, #1
   1daba:	689b      	ldr	r3, [r3, #8]
   1dabc:	429f      	cmp	r7, r3
   1dabe:	dd00      	ble.n	1dac2 <__gethex+0x42c>
   1dac0:	e6dc      	b.n	1d87c <__gethex+0x1e6>
   1dac2:	e7c6      	b.n	1da52 <__gethex+0x3bc>
   1dac4:	241f      	movs	r4, #31
   1dac6:	9a01      	ldr	r2, [sp, #4]
   1dac8:	2601      	movs	r6, #1
   1daca:	4022      	ands	r2, r4
   1dacc:	1e14      	subs	r4, r2, #0
   1dace:	d0c1      	beq.n	1da54 <__gethex+0x3be>
   1dad0:	9a04      	ldr	r2, [sp, #16]
   1dad2:	189b      	adds	r3, r3, r2
   1dad4:	3b04      	subs	r3, #4
   1dad6:	6818      	ldr	r0, [r3, #0]
   1dad8:	f000 f9b8 	bl	1de4c <__hi0bits>
   1dadc:	2120      	movs	r1, #32
   1dade:	1b0c      	subs	r4, r1, r4
   1dae0:	42a0      	cmp	r0, r4
   1dae2:	dbe4      	blt.n	1daae <__gethex+0x418>
   1dae4:	e7b6      	b.n	1da54 <__gethex+0x3be>

0001dae6 <L_shift>:
   1dae6:	2308      	movs	r3, #8
   1dae8:	b570      	push	{r4, r5, r6, lr}
   1daea:	2520      	movs	r5, #32
   1daec:	1a9a      	subs	r2, r3, r2
   1daee:	0092      	lsls	r2, r2, #2
   1daf0:	1aad      	subs	r5, r5, r2
   1daf2:	6843      	ldr	r3, [r0, #4]
   1daf4:	6806      	ldr	r6, [r0, #0]
   1daf6:	001c      	movs	r4, r3
   1daf8:	40ac      	lsls	r4, r5
   1dafa:	40d3      	lsrs	r3, r2
   1dafc:	4334      	orrs	r4, r6
   1dafe:	c010      	stmia	r0!, {r4}
   1db00:	6003      	str	r3, [r0, #0]
   1db02:	4288      	cmp	r0, r1
   1db04:	d3f5      	bcc.n	1daf2 <L_shift+0xc>
   1db06:	bd70      	pop	{r4, r5, r6, pc}

0001db08 <__match>:
   1db08:	b530      	push	{r4, r5, lr}
   1db0a:	6803      	ldr	r3, [r0, #0]
   1db0c:	780c      	ldrb	r4, [r1, #0]
   1db0e:	3301      	adds	r3, #1
   1db10:	2c00      	cmp	r4, #0
   1db12:	d102      	bne.n	1db1a <__match+0x12>
   1db14:	6003      	str	r3, [r0, #0]
   1db16:	2001      	movs	r0, #1
   1db18:	bd30      	pop	{r4, r5, pc}
   1db1a:	781a      	ldrb	r2, [r3, #0]
   1db1c:	0015      	movs	r5, r2
   1db1e:	3d41      	subs	r5, #65	; 0x41
   1db20:	2d19      	cmp	r5, #25
   1db22:	d800      	bhi.n	1db26 <__match+0x1e>
   1db24:	3220      	adds	r2, #32
   1db26:	3101      	adds	r1, #1
   1db28:	42a2      	cmp	r2, r4
   1db2a:	d0ef      	beq.n	1db0c <__match+0x4>
   1db2c:	2000      	movs	r0, #0
   1db2e:	e7f3      	b.n	1db18 <__match+0x10>

0001db30 <__hexnan>:
   1db30:	b5f0      	push	{r4, r5, r6, r7, lr}
   1db32:	b08b      	sub	sp, #44	; 0x2c
   1db34:	9201      	str	r2, [sp, #4]
   1db36:	680a      	ldr	r2, [r1, #0]
   1db38:	9901      	ldr	r1, [sp, #4]
   1db3a:	1153      	asrs	r3, r2, #5
   1db3c:	009b      	lsls	r3, r3, #2
   1db3e:	18cb      	adds	r3, r1, r3
   1db40:	9303      	str	r3, [sp, #12]
   1db42:	231f      	movs	r3, #31
   1db44:	401a      	ands	r2, r3
   1db46:	9008      	str	r0, [sp, #32]
   1db48:	9206      	str	r2, [sp, #24]
   1db4a:	d002      	beq.n	1db52 <__hexnan+0x22>
   1db4c:	9b03      	ldr	r3, [sp, #12]
   1db4e:	3304      	adds	r3, #4
   1db50:	9303      	str	r3, [sp, #12]
   1db52:	9b03      	ldr	r3, [sp, #12]
   1db54:	2500      	movs	r5, #0
   1db56:	1f1e      	subs	r6, r3, #4
   1db58:	0037      	movs	r7, r6
   1db5a:	0034      	movs	r4, r6
   1db5c:	9b08      	ldr	r3, [sp, #32]
   1db5e:	6035      	str	r5, [r6, #0]
   1db60:	681b      	ldr	r3, [r3, #0]
   1db62:	9507      	str	r5, [sp, #28]
   1db64:	9304      	str	r3, [sp, #16]
   1db66:	9502      	str	r5, [sp, #8]
   1db68:	9b04      	ldr	r3, [sp, #16]
   1db6a:	3301      	adds	r3, #1
   1db6c:	9309      	str	r3, [sp, #36]	; 0x24
   1db6e:	9b04      	ldr	r3, [sp, #16]
   1db70:	785b      	ldrb	r3, [r3, #1]
   1db72:	9305      	str	r3, [sp, #20]
   1db74:	2b00      	cmp	r3, #0
   1db76:	d028      	beq.n	1dbca <__hexnan+0x9a>
   1db78:	9805      	ldr	r0, [sp, #20]
   1db7a:	f7ff fd77 	bl	1d66c <__hexdig_fun>
   1db7e:	2800      	cmp	r0, #0
   1db80:	d145      	bne.n	1dc0e <__hexnan+0xde>
   1db82:	9b05      	ldr	r3, [sp, #20]
   1db84:	2b20      	cmp	r3, #32
   1db86:	d819      	bhi.n	1dbbc <__hexnan+0x8c>
   1db88:	9b02      	ldr	r3, [sp, #8]
   1db8a:	9a07      	ldr	r2, [sp, #28]
   1db8c:	4293      	cmp	r3, r2
   1db8e:	dd12      	ble.n	1dbb6 <__hexnan+0x86>
   1db90:	42bc      	cmp	r4, r7
   1db92:	d206      	bcs.n	1dba2 <__hexnan+0x72>
   1db94:	2d07      	cmp	r5, #7
   1db96:	dc04      	bgt.n	1dba2 <__hexnan+0x72>
   1db98:	002a      	movs	r2, r5
   1db9a:	0039      	movs	r1, r7
   1db9c:	0020      	movs	r0, r4
   1db9e:	f7ff ffa2 	bl	1dae6 <L_shift>
   1dba2:	9b01      	ldr	r3, [sp, #4]
   1dba4:	2508      	movs	r5, #8
   1dba6:	429c      	cmp	r4, r3
   1dba8:	d905      	bls.n	1dbb6 <__hexnan+0x86>
   1dbaa:	1f27      	subs	r7, r4, #4
   1dbac:	2500      	movs	r5, #0
   1dbae:	003c      	movs	r4, r7
   1dbb0:	9b02      	ldr	r3, [sp, #8]
   1dbb2:	603d      	str	r5, [r7, #0]
   1dbb4:	9307      	str	r3, [sp, #28]
   1dbb6:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1dbb8:	9304      	str	r3, [sp, #16]
   1dbba:	e7d5      	b.n	1db68 <__hexnan+0x38>
   1dbbc:	9b05      	ldr	r3, [sp, #20]
   1dbbe:	2b29      	cmp	r3, #41	; 0x29
   1dbc0:	d14a      	bne.n	1dc58 <__hexnan+0x128>
   1dbc2:	9b04      	ldr	r3, [sp, #16]
   1dbc4:	9a08      	ldr	r2, [sp, #32]
   1dbc6:	3302      	adds	r3, #2
   1dbc8:	6013      	str	r3, [r2, #0]
   1dbca:	9b02      	ldr	r3, [sp, #8]
   1dbcc:	2b00      	cmp	r3, #0
   1dbce:	d043      	beq.n	1dc58 <__hexnan+0x128>
   1dbd0:	42bc      	cmp	r4, r7
   1dbd2:	d206      	bcs.n	1dbe2 <__hexnan+0xb2>
   1dbd4:	2d07      	cmp	r5, #7
   1dbd6:	dc04      	bgt.n	1dbe2 <__hexnan+0xb2>
   1dbd8:	002a      	movs	r2, r5
   1dbda:	0039      	movs	r1, r7
   1dbdc:	0020      	movs	r0, r4
   1dbde:	f7ff ff82 	bl	1dae6 <L_shift>
   1dbe2:	9b01      	ldr	r3, [sp, #4]
   1dbe4:	429c      	cmp	r4, r3
   1dbe6:	d926      	bls.n	1dc36 <__hexnan+0x106>
   1dbe8:	cc04      	ldmia	r4!, {r2}
   1dbea:	601a      	str	r2, [r3, #0]
   1dbec:	3304      	adds	r3, #4
   1dbee:	42a6      	cmp	r6, r4
   1dbf0:	d2fa      	bcs.n	1dbe8 <__hexnan+0xb8>
   1dbf2:	2200      	movs	r2, #0
   1dbf4:	c304      	stmia	r3!, {r2}
   1dbf6:	429e      	cmp	r6, r3
   1dbf8:	d2fc      	bcs.n	1dbf4 <__hexnan+0xc4>
   1dbfa:	6833      	ldr	r3, [r6, #0]
   1dbfc:	2b00      	cmp	r3, #0
   1dbfe:	d104      	bne.n	1dc0a <__hexnan+0xda>
   1dc00:	9b01      	ldr	r3, [sp, #4]
   1dc02:	429e      	cmp	r6, r3
   1dc04:	d126      	bne.n	1dc54 <__hexnan+0x124>
   1dc06:	2301      	movs	r3, #1
   1dc08:	6033      	str	r3, [r6, #0]
   1dc0a:	2005      	movs	r0, #5
   1dc0c:	e025      	b.n	1dc5a <__hexnan+0x12a>
   1dc0e:	9b02      	ldr	r3, [sp, #8]
   1dc10:	3501      	adds	r5, #1
   1dc12:	3301      	adds	r3, #1
   1dc14:	9302      	str	r3, [sp, #8]
   1dc16:	2d08      	cmp	r5, #8
   1dc18:	dd06      	ble.n	1dc28 <__hexnan+0xf8>
   1dc1a:	9b01      	ldr	r3, [sp, #4]
   1dc1c:	429c      	cmp	r4, r3
   1dc1e:	d9ca      	bls.n	1dbb6 <__hexnan+0x86>
   1dc20:	2300      	movs	r3, #0
   1dc22:	2501      	movs	r5, #1
   1dc24:	3c04      	subs	r4, #4
   1dc26:	6023      	str	r3, [r4, #0]
   1dc28:	220f      	movs	r2, #15
   1dc2a:	6823      	ldr	r3, [r4, #0]
   1dc2c:	4010      	ands	r0, r2
   1dc2e:	011b      	lsls	r3, r3, #4
   1dc30:	4318      	orrs	r0, r3
   1dc32:	6020      	str	r0, [r4, #0]
   1dc34:	e7bf      	b.n	1dbb6 <__hexnan+0x86>
   1dc36:	9b06      	ldr	r3, [sp, #24]
   1dc38:	2b00      	cmp	r3, #0
   1dc3a:	d0de      	beq.n	1dbfa <__hexnan+0xca>
   1dc3c:	2120      	movs	r1, #32
   1dc3e:	9a06      	ldr	r2, [sp, #24]
   1dc40:	9b03      	ldr	r3, [sp, #12]
   1dc42:	1a89      	subs	r1, r1, r2
   1dc44:	2201      	movs	r2, #1
   1dc46:	4252      	negs	r2, r2
   1dc48:	40ca      	lsrs	r2, r1
   1dc4a:	3b04      	subs	r3, #4
   1dc4c:	6819      	ldr	r1, [r3, #0]
   1dc4e:	400a      	ands	r2, r1
   1dc50:	601a      	str	r2, [r3, #0]
   1dc52:	e7d2      	b.n	1dbfa <__hexnan+0xca>
   1dc54:	3e04      	subs	r6, #4
   1dc56:	e7d0      	b.n	1dbfa <__hexnan+0xca>
   1dc58:	2004      	movs	r0, #4
   1dc5a:	b00b      	add	sp, #44	; 0x2c
   1dc5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0001dc60 <_isatty_r>:
   1dc60:	2300      	movs	r3, #0
   1dc62:	b570      	push	{r4, r5, r6, lr}
   1dc64:	4c06      	ldr	r4, [pc, #24]	; (1dc80 <_isatty_r+0x20>)
   1dc66:	0005      	movs	r5, r0
   1dc68:	0008      	movs	r0, r1
   1dc6a:	6023      	str	r3, [r4, #0]
   1dc6c:	f7e2 fbf2 	bl	454 <_isatty>
   1dc70:	1c43      	adds	r3, r0, #1
   1dc72:	d103      	bne.n	1dc7c <_isatty_r+0x1c>
   1dc74:	6823      	ldr	r3, [r4, #0]
   1dc76:	2b00      	cmp	r3, #0
   1dc78:	d000      	beq.n	1dc7c <_isatty_r+0x1c>
   1dc7a:	602b      	str	r3, [r5, #0]
   1dc7c:	bd70      	pop	{r4, r5, r6, pc}
   1dc7e:	46c0      	nop			; (mov r8, r8)
   1dc80:	20002c00 	.word	0x20002c00

0001dc84 <__localeconv_l>:
   1dc84:	30f0      	adds	r0, #240	; 0xf0
   1dc86:	4770      	bx	lr

0001dc88 <_lseek_r>:
   1dc88:	b570      	push	{r4, r5, r6, lr}
   1dc8a:	0005      	movs	r5, r0
   1dc8c:	0008      	movs	r0, r1
   1dc8e:	0011      	movs	r1, r2
   1dc90:	2200      	movs	r2, #0
   1dc92:	4c06      	ldr	r4, [pc, #24]	; (1dcac <_lseek_r+0x24>)
   1dc94:	6022      	str	r2, [r4, #0]
   1dc96:	001a      	movs	r2, r3
   1dc98:	f7e2 fbe5 	bl	466 <_lseek>
   1dc9c:	1c43      	adds	r3, r0, #1
   1dc9e:	d103      	bne.n	1dca8 <_lseek_r+0x20>
   1dca0:	6823      	ldr	r3, [r4, #0]
   1dca2:	2b00      	cmp	r3, #0
   1dca4:	d000      	beq.n	1dca8 <_lseek_r+0x20>
   1dca6:	602b      	str	r3, [r5, #0]
   1dca8:	bd70      	pop	{r4, r5, r6, pc}
   1dcaa:	46c0      	nop			; (mov r8, r8)
   1dcac:	20002c00 	.word	0x20002c00

0001dcb0 <__malloc_lock>:
   1dcb0:	4770      	bx	lr

0001dcb2 <__malloc_unlock>:
   1dcb2:	4770      	bx	lr

0001dcb4 <_Balloc>:
   1dcb4:	b570      	push	{r4, r5, r6, lr}
   1dcb6:	6a46      	ldr	r6, [r0, #36]	; 0x24
   1dcb8:	0004      	movs	r4, r0
   1dcba:	000d      	movs	r5, r1
   1dcbc:	2e00      	cmp	r6, #0
   1dcbe:	d107      	bne.n	1dcd0 <_Balloc+0x1c>
   1dcc0:	2010      	movs	r0, #16
   1dcc2:	f7fe f9fb 	bl	1c0bc <malloc>
   1dcc6:	6260      	str	r0, [r4, #36]	; 0x24
   1dcc8:	6046      	str	r6, [r0, #4]
   1dcca:	6086      	str	r6, [r0, #8]
   1dccc:	6006      	str	r6, [r0, #0]
   1dcce:	60c6      	str	r6, [r0, #12]
   1dcd0:	6a66      	ldr	r6, [r4, #36]	; 0x24
   1dcd2:	68f3      	ldr	r3, [r6, #12]
   1dcd4:	2b00      	cmp	r3, #0
   1dcd6:	d013      	beq.n	1dd00 <_Balloc+0x4c>
   1dcd8:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1dcda:	00aa      	lsls	r2, r5, #2
   1dcdc:	68db      	ldr	r3, [r3, #12]
   1dcde:	189b      	adds	r3, r3, r2
   1dce0:	6818      	ldr	r0, [r3, #0]
   1dce2:	2800      	cmp	r0, #0
   1dce4:	d118      	bne.n	1dd18 <_Balloc+0x64>
   1dce6:	2101      	movs	r1, #1
   1dce8:	000e      	movs	r6, r1
   1dcea:	40ae      	lsls	r6, r5
   1dcec:	1d72      	adds	r2, r6, #5
   1dcee:	0092      	lsls	r2, r2, #2
   1dcf0:	0020      	movs	r0, r4
   1dcf2:	f000 fbd2 	bl	1e49a <_calloc_r>
   1dcf6:	2800      	cmp	r0, #0
   1dcf8:	d00c      	beq.n	1dd14 <_Balloc+0x60>
   1dcfa:	6045      	str	r5, [r0, #4]
   1dcfc:	6086      	str	r6, [r0, #8]
   1dcfe:	e00d      	b.n	1dd1c <_Balloc+0x68>
   1dd00:	2221      	movs	r2, #33	; 0x21
   1dd02:	2104      	movs	r1, #4
   1dd04:	0020      	movs	r0, r4
   1dd06:	f000 fbc8 	bl	1e49a <_calloc_r>
   1dd0a:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1dd0c:	60f0      	str	r0, [r6, #12]
   1dd0e:	68db      	ldr	r3, [r3, #12]
   1dd10:	2b00      	cmp	r3, #0
   1dd12:	d1e1      	bne.n	1dcd8 <_Balloc+0x24>
   1dd14:	2000      	movs	r0, #0
   1dd16:	bd70      	pop	{r4, r5, r6, pc}
   1dd18:	6802      	ldr	r2, [r0, #0]
   1dd1a:	601a      	str	r2, [r3, #0]
   1dd1c:	2300      	movs	r3, #0
   1dd1e:	6103      	str	r3, [r0, #16]
   1dd20:	60c3      	str	r3, [r0, #12]
   1dd22:	e7f8      	b.n	1dd16 <_Balloc+0x62>

0001dd24 <_Bfree>:
   1dd24:	b570      	push	{r4, r5, r6, lr}
   1dd26:	6a44      	ldr	r4, [r0, #36]	; 0x24
   1dd28:	0006      	movs	r6, r0
   1dd2a:	000d      	movs	r5, r1
   1dd2c:	2c00      	cmp	r4, #0
   1dd2e:	d107      	bne.n	1dd40 <_Bfree+0x1c>
   1dd30:	2010      	movs	r0, #16
   1dd32:	f7fe f9c3 	bl	1c0bc <malloc>
   1dd36:	6270      	str	r0, [r6, #36]	; 0x24
   1dd38:	6044      	str	r4, [r0, #4]
   1dd3a:	6084      	str	r4, [r0, #8]
   1dd3c:	6004      	str	r4, [r0, #0]
   1dd3e:	60c4      	str	r4, [r0, #12]
   1dd40:	2d00      	cmp	r5, #0
   1dd42:	d007      	beq.n	1dd54 <_Bfree+0x30>
   1dd44:	6a73      	ldr	r3, [r6, #36]	; 0x24
   1dd46:	686a      	ldr	r2, [r5, #4]
   1dd48:	68db      	ldr	r3, [r3, #12]
   1dd4a:	0092      	lsls	r2, r2, #2
   1dd4c:	189b      	adds	r3, r3, r2
   1dd4e:	681a      	ldr	r2, [r3, #0]
   1dd50:	602a      	str	r2, [r5, #0]
   1dd52:	601d      	str	r5, [r3, #0]
   1dd54:	bd70      	pop	{r4, r5, r6, pc}

0001dd56 <__multadd>:
   1dd56:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1dd58:	001e      	movs	r6, r3
   1dd5a:	2314      	movs	r3, #20
   1dd5c:	469c      	mov	ip, r3
   1dd5e:	0007      	movs	r7, r0
   1dd60:	000c      	movs	r4, r1
   1dd62:	2000      	movs	r0, #0
   1dd64:	690d      	ldr	r5, [r1, #16]
   1dd66:	448c      	add	ip, r1
   1dd68:	4663      	mov	r3, ip
   1dd6a:	8819      	ldrh	r1, [r3, #0]
   1dd6c:	681b      	ldr	r3, [r3, #0]
   1dd6e:	4351      	muls	r1, r2
   1dd70:	0c1b      	lsrs	r3, r3, #16
   1dd72:	4353      	muls	r3, r2
   1dd74:	1989      	adds	r1, r1, r6
   1dd76:	0c0e      	lsrs	r6, r1, #16
   1dd78:	199b      	adds	r3, r3, r6
   1dd7a:	b289      	uxth	r1, r1
   1dd7c:	0c1e      	lsrs	r6, r3, #16
   1dd7e:	041b      	lsls	r3, r3, #16
   1dd80:	185b      	adds	r3, r3, r1
   1dd82:	4661      	mov	r1, ip
   1dd84:	3001      	adds	r0, #1
   1dd86:	c108      	stmia	r1!, {r3}
   1dd88:	468c      	mov	ip, r1
   1dd8a:	4285      	cmp	r5, r0
   1dd8c:	dcec      	bgt.n	1dd68 <__multadd+0x12>
   1dd8e:	2e00      	cmp	r6, #0
   1dd90:	d01b      	beq.n	1ddca <__multadd+0x74>
   1dd92:	68a3      	ldr	r3, [r4, #8]
   1dd94:	429d      	cmp	r5, r3
   1dd96:	db12      	blt.n	1ddbe <__multadd+0x68>
   1dd98:	6863      	ldr	r3, [r4, #4]
   1dd9a:	0038      	movs	r0, r7
   1dd9c:	1c59      	adds	r1, r3, #1
   1dd9e:	f7ff ff89 	bl	1dcb4 <_Balloc>
   1dda2:	0021      	movs	r1, r4
   1dda4:	6923      	ldr	r3, [r4, #16]
   1dda6:	9001      	str	r0, [sp, #4]
   1dda8:	1c9a      	adds	r2, r3, #2
   1ddaa:	0092      	lsls	r2, r2, #2
   1ddac:	310c      	adds	r1, #12
   1ddae:	300c      	adds	r0, #12
   1ddb0:	f7fe f9c4 	bl	1c13c <memcpy>
   1ddb4:	0021      	movs	r1, r4
   1ddb6:	0038      	movs	r0, r7
   1ddb8:	f7ff ffb4 	bl	1dd24 <_Bfree>
   1ddbc:	9c01      	ldr	r4, [sp, #4]
   1ddbe:	1d2b      	adds	r3, r5, #4
   1ddc0:	009b      	lsls	r3, r3, #2
   1ddc2:	18e3      	adds	r3, r4, r3
   1ddc4:	3501      	adds	r5, #1
   1ddc6:	605e      	str	r6, [r3, #4]
   1ddc8:	6125      	str	r5, [r4, #16]
   1ddca:	0020      	movs	r0, r4
   1ddcc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

0001ddce <__s2b>:
   1ddce:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1ddd0:	0006      	movs	r6, r0
   1ddd2:	0018      	movs	r0, r3
   1ddd4:	000c      	movs	r4, r1
   1ddd6:	3008      	adds	r0, #8
   1ddd8:	2109      	movs	r1, #9
   1ddda:	9301      	str	r3, [sp, #4]
   1dddc:	0015      	movs	r5, r2
   1ddde:	f7fc f805 	bl	19dec <__divsi3>
   1dde2:	2301      	movs	r3, #1
   1dde4:	2100      	movs	r1, #0
   1dde6:	4283      	cmp	r3, r0
   1dde8:	db20      	blt.n	1de2c <__s2b+0x5e>
   1ddea:	0030      	movs	r0, r6
   1ddec:	f7ff ff62 	bl	1dcb4 <_Balloc>
   1ddf0:	9b08      	ldr	r3, [sp, #32]
   1ddf2:	6143      	str	r3, [r0, #20]
   1ddf4:	2301      	movs	r3, #1
   1ddf6:	6103      	str	r3, [r0, #16]
   1ddf8:	2d09      	cmp	r5, #9
   1ddfa:	dd1a      	ble.n	1de32 <__s2b+0x64>
   1ddfc:	0023      	movs	r3, r4
   1ddfe:	3309      	adds	r3, #9
   1de00:	001f      	movs	r7, r3
   1de02:	9300      	str	r3, [sp, #0]
   1de04:	1964      	adds	r4, r4, r5
   1de06:	783b      	ldrb	r3, [r7, #0]
   1de08:	0001      	movs	r1, r0
   1de0a:	3b30      	subs	r3, #48	; 0x30
   1de0c:	220a      	movs	r2, #10
   1de0e:	0030      	movs	r0, r6
   1de10:	3701      	adds	r7, #1
   1de12:	f7ff ffa0 	bl	1dd56 <__multadd>
   1de16:	42a7      	cmp	r7, r4
   1de18:	d1f5      	bne.n	1de06 <__s2b+0x38>
   1de1a:	002c      	movs	r4, r5
   1de1c:	9b00      	ldr	r3, [sp, #0]
   1de1e:	3c08      	subs	r4, #8
   1de20:	191c      	adds	r4, r3, r4
   1de22:	002f      	movs	r7, r5
   1de24:	9b01      	ldr	r3, [sp, #4]
   1de26:	429f      	cmp	r7, r3
   1de28:	db06      	blt.n	1de38 <__s2b+0x6a>
   1de2a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   1de2c:	005b      	lsls	r3, r3, #1
   1de2e:	3101      	adds	r1, #1
   1de30:	e7d9      	b.n	1dde6 <__s2b+0x18>
   1de32:	340a      	adds	r4, #10
   1de34:	2509      	movs	r5, #9
   1de36:	e7f4      	b.n	1de22 <__s2b+0x54>
   1de38:	1b63      	subs	r3, r4, r5
   1de3a:	5ddb      	ldrb	r3, [r3, r7]
   1de3c:	0001      	movs	r1, r0
   1de3e:	3b30      	subs	r3, #48	; 0x30
   1de40:	220a      	movs	r2, #10
   1de42:	0030      	movs	r0, r6
   1de44:	f7ff ff87 	bl	1dd56 <__multadd>
   1de48:	3701      	adds	r7, #1
   1de4a:	e7eb      	b.n	1de24 <__s2b+0x56>

0001de4c <__hi0bits>:
   1de4c:	0003      	movs	r3, r0
   1de4e:	0c02      	lsrs	r2, r0, #16
   1de50:	2000      	movs	r0, #0
   1de52:	4282      	cmp	r2, r0
   1de54:	d101      	bne.n	1de5a <__hi0bits+0xe>
   1de56:	041b      	lsls	r3, r3, #16
   1de58:	3010      	adds	r0, #16
   1de5a:	0e1a      	lsrs	r2, r3, #24
   1de5c:	d101      	bne.n	1de62 <__hi0bits+0x16>
   1de5e:	3008      	adds	r0, #8
   1de60:	021b      	lsls	r3, r3, #8
   1de62:	0f1a      	lsrs	r2, r3, #28
   1de64:	d101      	bne.n	1de6a <__hi0bits+0x1e>
   1de66:	3004      	adds	r0, #4
   1de68:	011b      	lsls	r3, r3, #4
   1de6a:	0f9a      	lsrs	r2, r3, #30
   1de6c:	d101      	bne.n	1de72 <__hi0bits+0x26>
   1de6e:	3002      	adds	r0, #2
   1de70:	009b      	lsls	r3, r3, #2
   1de72:	2b00      	cmp	r3, #0
   1de74:	db03      	blt.n	1de7e <__hi0bits+0x32>
   1de76:	3001      	adds	r0, #1
   1de78:	005b      	lsls	r3, r3, #1
   1de7a:	d400      	bmi.n	1de7e <__hi0bits+0x32>
   1de7c:	2020      	movs	r0, #32
   1de7e:	4770      	bx	lr

0001de80 <__lo0bits>:
   1de80:	2207      	movs	r2, #7
   1de82:	6803      	ldr	r3, [r0, #0]
   1de84:	b510      	push	{r4, lr}
   1de86:	0001      	movs	r1, r0
   1de88:	401a      	ands	r2, r3
   1de8a:	d00d      	beq.n	1dea8 <__lo0bits+0x28>
   1de8c:	2401      	movs	r4, #1
   1de8e:	2000      	movs	r0, #0
   1de90:	4223      	tst	r3, r4
   1de92:	d105      	bne.n	1dea0 <__lo0bits+0x20>
   1de94:	3002      	adds	r0, #2
   1de96:	4203      	tst	r3, r0
   1de98:	d003      	beq.n	1dea2 <__lo0bits+0x22>
   1de9a:	40e3      	lsrs	r3, r4
   1de9c:	0020      	movs	r0, r4
   1de9e:	600b      	str	r3, [r1, #0]
   1dea0:	bd10      	pop	{r4, pc}
   1dea2:	089b      	lsrs	r3, r3, #2
   1dea4:	600b      	str	r3, [r1, #0]
   1dea6:	e7fb      	b.n	1dea0 <__lo0bits+0x20>
   1dea8:	b29c      	uxth	r4, r3
   1deaa:	0010      	movs	r0, r2
   1deac:	2c00      	cmp	r4, #0
   1deae:	d101      	bne.n	1deb4 <__lo0bits+0x34>
   1deb0:	2010      	movs	r0, #16
   1deb2:	0c1b      	lsrs	r3, r3, #16
   1deb4:	b2da      	uxtb	r2, r3
   1deb6:	2a00      	cmp	r2, #0
   1deb8:	d101      	bne.n	1debe <__lo0bits+0x3e>
   1deba:	3008      	adds	r0, #8
   1debc:	0a1b      	lsrs	r3, r3, #8
   1debe:	071a      	lsls	r2, r3, #28
   1dec0:	d101      	bne.n	1dec6 <__lo0bits+0x46>
   1dec2:	3004      	adds	r0, #4
   1dec4:	091b      	lsrs	r3, r3, #4
   1dec6:	079a      	lsls	r2, r3, #30
   1dec8:	d101      	bne.n	1dece <__lo0bits+0x4e>
   1deca:	3002      	adds	r0, #2
   1decc:	089b      	lsrs	r3, r3, #2
   1dece:	07da      	lsls	r2, r3, #31
   1ded0:	d4e8      	bmi.n	1dea4 <__lo0bits+0x24>
   1ded2:	085b      	lsrs	r3, r3, #1
   1ded4:	d001      	beq.n	1deda <__lo0bits+0x5a>
   1ded6:	3001      	adds	r0, #1
   1ded8:	e7e4      	b.n	1dea4 <__lo0bits+0x24>
   1deda:	2020      	movs	r0, #32
   1dedc:	e7e0      	b.n	1dea0 <__lo0bits+0x20>

0001dede <__i2b>:
   1dede:	b510      	push	{r4, lr}
   1dee0:	000c      	movs	r4, r1
   1dee2:	2101      	movs	r1, #1
   1dee4:	f7ff fee6 	bl	1dcb4 <_Balloc>
   1dee8:	2301      	movs	r3, #1
   1deea:	6144      	str	r4, [r0, #20]
   1deec:	6103      	str	r3, [r0, #16]
   1deee:	bd10      	pop	{r4, pc}

0001def0 <__multiply>:
   1def0:	b5f0      	push	{r4, r5, r6, r7, lr}
   1def2:	690b      	ldr	r3, [r1, #16]
   1def4:	0015      	movs	r5, r2
   1def6:	6912      	ldr	r2, [r2, #16]
   1def8:	b089      	sub	sp, #36	; 0x24
   1defa:	000c      	movs	r4, r1
   1defc:	4293      	cmp	r3, r2
   1defe:	da01      	bge.n	1df04 <__multiply+0x14>
   1df00:	002c      	movs	r4, r5
   1df02:	000d      	movs	r5, r1
   1df04:	6927      	ldr	r7, [r4, #16]
   1df06:	692e      	ldr	r6, [r5, #16]
   1df08:	68a2      	ldr	r2, [r4, #8]
   1df0a:	19bb      	adds	r3, r7, r6
   1df0c:	6861      	ldr	r1, [r4, #4]
   1df0e:	9301      	str	r3, [sp, #4]
   1df10:	4293      	cmp	r3, r2
   1df12:	dd00      	ble.n	1df16 <__multiply+0x26>
   1df14:	3101      	adds	r1, #1
   1df16:	f7ff fecd 	bl	1dcb4 <_Balloc>
   1df1a:	0003      	movs	r3, r0
   1df1c:	3314      	adds	r3, #20
   1df1e:	9300      	str	r3, [sp, #0]
   1df20:	9a00      	ldr	r2, [sp, #0]
   1df22:	19bb      	adds	r3, r7, r6
   1df24:	4694      	mov	ip, r2
   1df26:	009b      	lsls	r3, r3, #2
   1df28:	449c      	add	ip, r3
   1df2a:	0013      	movs	r3, r2
   1df2c:	2200      	movs	r2, #0
   1df2e:	9004      	str	r0, [sp, #16]
   1df30:	4563      	cmp	r3, ip
   1df32:	d31c      	bcc.n	1df6e <__multiply+0x7e>
   1df34:	002a      	movs	r2, r5
   1df36:	3414      	adds	r4, #20
   1df38:	00bf      	lsls	r7, r7, #2
   1df3a:	19e3      	adds	r3, r4, r7
   1df3c:	3214      	adds	r2, #20
   1df3e:	00b6      	lsls	r6, r6, #2
   1df40:	9305      	str	r3, [sp, #20]
   1df42:	1993      	adds	r3, r2, r6
   1df44:	9402      	str	r4, [sp, #8]
   1df46:	9306      	str	r3, [sp, #24]
   1df48:	9b06      	ldr	r3, [sp, #24]
   1df4a:	429a      	cmp	r2, r3
   1df4c:	d311      	bcc.n	1df72 <__multiply+0x82>
   1df4e:	9b01      	ldr	r3, [sp, #4]
   1df50:	2b00      	cmp	r3, #0
   1df52:	dd06      	ble.n	1df62 <__multiply+0x72>
   1df54:	2304      	movs	r3, #4
   1df56:	425b      	negs	r3, r3
   1df58:	449c      	add	ip, r3
   1df5a:	4663      	mov	r3, ip
   1df5c:	681b      	ldr	r3, [r3, #0]
   1df5e:	2b00      	cmp	r3, #0
   1df60:	d051      	beq.n	1e006 <__multiply+0x116>
   1df62:	9b04      	ldr	r3, [sp, #16]
   1df64:	9a01      	ldr	r2, [sp, #4]
   1df66:	0018      	movs	r0, r3
   1df68:	611a      	str	r2, [r3, #16]
   1df6a:	b009      	add	sp, #36	; 0x24
   1df6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1df6e:	c304      	stmia	r3!, {r2}
   1df70:	e7de      	b.n	1df30 <__multiply+0x40>
   1df72:	8814      	ldrh	r4, [r2, #0]
   1df74:	2c00      	cmp	r4, #0
   1df76:	d01e      	beq.n	1dfb6 <__multiply+0xc6>
   1df78:	2600      	movs	r6, #0
   1df7a:	9d00      	ldr	r5, [sp, #0]
   1df7c:	9f02      	ldr	r7, [sp, #8]
   1df7e:	cf01      	ldmia	r7!, {r0}
   1df80:	9507      	str	r5, [sp, #28]
   1df82:	cd08      	ldmia	r5!, {r3}
   1df84:	9303      	str	r3, [sp, #12]
   1df86:	b283      	uxth	r3, r0
   1df88:	4363      	muls	r3, r4
   1df8a:	0019      	movs	r1, r3
   1df8c:	466b      	mov	r3, sp
   1df8e:	0c00      	lsrs	r0, r0, #16
   1df90:	899b      	ldrh	r3, [r3, #12]
   1df92:	4360      	muls	r0, r4
   1df94:	18cb      	adds	r3, r1, r3
   1df96:	9903      	ldr	r1, [sp, #12]
   1df98:	199b      	adds	r3, r3, r6
   1df9a:	0c09      	lsrs	r1, r1, #16
   1df9c:	1841      	adds	r1, r0, r1
   1df9e:	0c18      	lsrs	r0, r3, #16
   1dfa0:	1809      	adds	r1, r1, r0
   1dfa2:	0c0e      	lsrs	r6, r1, #16
   1dfa4:	b29b      	uxth	r3, r3
   1dfa6:	0409      	lsls	r1, r1, #16
   1dfa8:	430b      	orrs	r3, r1
   1dfaa:	9907      	ldr	r1, [sp, #28]
   1dfac:	600b      	str	r3, [r1, #0]
   1dfae:	9b05      	ldr	r3, [sp, #20]
   1dfb0:	42bb      	cmp	r3, r7
   1dfb2:	d8e4      	bhi.n	1df7e <__multiply+0x8e>
   1dfb4:	602e      	str	r6, [r5, #0]
   1dfb6:	6813      	ldr	r3, [r2, #0]
   1dfb8:	0c1b      	lsrs	r3, r3, #16
   1dfba:	9303      	str	r3, [sp, #12]
   1dfbc:	d01e      	beq.n	1dffc <__multiply+0x10c>
   1dfbe:	2600      	movs	r6, #0
   1dfc0:	9b00      	ldr	r3, [sp, #0]
   1dfc2:	9c02      	ldr	r4, [sp, #8]
   1dfc4:	681b      	ldr	r3, [r3, #0]
   1dfc6:	9800      	ldr	r0, [sp, #0]
   1dfc8:	0007      	movs	r7, r0
   1dfca:	8821      	ldrh	r1, [r4, #0]
   1dfcc:	9d03      	ldr	r5, [sp, #12]
   1dfce:	b29b      	uxth	r3, r3
   1dfd0:	4369      	muls	r1, r5
   1dfd2:	c820      	ldmia	r0!, {r5}
   1dfd4:	0c2d      	lsrs	r5, r5, #16
   1dfd6:	1949      	adds	r1, r1, r5
   1dfd8:	198e      	adds	r6, r1, r6
   1dfda:	0431      	lsls	r1, r6, #16
   1dfdc:	430b      	orrs	r3, r1
   1dfde:	603b      	str	r3, [r7, #0]
   1dfe0:	cc08      	ldmia	r4!, {r3}
   1dfe2:	9903      	ldr	r1, [sp, #12]
   1dfe4:	0c1b      	lsrs	r3, r3, #16
   1dfe6:	434b      	muls	r3, r1
   1dfe8:	6879      	ldr	r1, [r7, #4]
   1dfea:	0c36      	lsrs	r6, r6, #16
   1dfec:	b289      	uxth	r1, r1
   1dfee:	185b      	adds	r3, r3, r1
   1dff0:	9905      	ldr	r1, [sp, #20]
   1dff2:	199b      	adds	r3, r3, r6
   1dff4:	0c1e      	lsrs	r6, r3, #16
   1dff6:	42a1      	cmp	r1, r4
   1dff8:	d8e6      	bhi.n	1dfc8 <__multiply+0xd8>
   1dffa:	6003      	str	r3, [r0, #0]
   1dffc:	9b00      	ldr	r3, [sp, #0]
   1dffe:	3204      	adds	r2, #4
   1e000:	3304      	adds	r3, #4
   1e002:	9300      	str	r3, [sp, #0]
   1e004:	e7a0      	b.n	1df48 <__multiply+0x58>
   1e006:	9b01      	ldr	r3, [sp, #4]
   1e008:	3b01      	subs	r3, #1
   1e00a:	9301      	str	r3, [sp, #4]
   1e00c:	e79f      	b.n	1df4e <__multiply+0x5e>
	...

0001e010 <__pow5mult>:
   1e010:	2303      	movs	r3, #3
   1e012:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1e014:	4013      	ands	r3, r2
   1e016:	0005      	movs	r5, r0
   1e018:	000e      	movs	r6, r1
   1e01a:	0014      	movs	r4, r2
   1e01c:	2b00      	cmp	r3, #0
   1e01e:	d008      	beq.n	1e032 <__pow5mult+0x22>
   1e020:	4922      	ldr	r1, [pc, #136]	; (1e0ac <__pow5mult+0x9c>)
   1e022:	3b01      	subs	r3, #1
   1e024:	009a      	lsls	r2, r3, #2
   1e026:	5852      	ldr	r2, [r2, r1]
   1e028:	2300      	movs	r3, #0
   1e02a:	0031      	movs	r1, r6
   1e02c:	f7ff fe93 	bl	1dd56 <__multadd>
   1e030:	0006      	movs	r6, r0
   1e032:	10a3      	asrs	r3, r4, #2
   1e034:	9301      	str	r3, [sp, #4]
   1e036:	d036      	beq.n	1e0a6 <__pow5mult+0x96>
   1e038:	6a6c      	ldr	r4, [r5, #36]	; 0x24
   1e03a:	2c00      	cmp	r4, #0
   1e03c:	d107      	bne.n	1e04e <__pow5mult+0x3e>
   1e03e:	2010      	movs	r0, #16
   1e040:	f7fe f83c 	bl	1c0bc <malloc>
   1e044:	6268      	str	r0, [r5, #36]	; 0x24
   1e046:	6044      	str	r4, [r0, #4]
   1e048:	6084      	str	r4, [r0, #8]
   1e04a:	6004      	str	r4, [r0, #0]
   1e04c:	60c4      	str	r4, [r0, #12]
   1e04e:	6a6f      	ldr	r7, [r5, #36]	; 0x24
   1e050:	68bc      	ldr	r4, [r7, #8]
   1e052:	2c00      	cmp	r4, #0
   1e054:	d107      	bne.n	1e066 <__pow5mult+0x56>
   1e056:	4916      	ldr	r1, [pc, #88]	; (1e0b0 <__pow5mult+0xa0>)
   1e058:	0028      	movs	r0, r5
   1e05a:	f7ff ff40 	bl	1dede <__i2b>
   1e05e:	2300      	movs	r3, #0
   1e060:	0004      	movs	r4, r0
   1e062:	60b8      	str	r0, [r7, #8]
   1e064:	6003      	str	r3, [r0, #0]
   1e066:	2201      	movs	r2, #1
   1e068:	9b01      	ldr	r3, [sp, #4]
   1e06a:	4213      	tst	r3, r2
   1e06c:	d00a      	beq.n	1e084 <__pow5mult+0x74>
   1e06e:	0031      	movs	r1, r6
   1e070:	0022      	movs	r2, r4
   1e072:	0028      	movs	r0, r5
   1e074:	f7ff ff3c 	bl	1def0 <__multiply>
   1e078:	0007      	movs	r7, r0
   1e07a:	0031      	movs	r1, r6
   1e07c:	0028      	movs	r0, r5
   1e07e:	f7ff fe51 	bl	1dd24 <_Bfree>
   1e082:	003e      	movs	r6, r7
   1e084:	9b01      	ldr	r3, [sp, #4]
   1e086:	105b      	asrs	r3, r3, #1
   1e088:	9301      	str	r3, [sp, #4]
   1e08a:	d00c      	beq.n	1e0a6 <__pow5mult+0x96>
   1e08c:	6820      	ldr	r0, [r4, #0]
   1e08e:	2800      	cmp	r0, #0
   1e090:	d107      	bne.n	1e0a2 <__pow5mult+0x92>
   1e092:	0022      	movs	r2, r4
   1e094:	0021      	movs	r1, r4
   1e096:	0028      	movs	r0, r5
   1e098:	f7ff ff2a 	bl	1def0 <__multiply>
   1e09c:	2300      	movs	r3, #0
   1e09e:	6020      	str	r0, [r4, #0]
   1e0a0:	6003      	str	r3, [r0, #0]
   1e0a2:	0004      	movs	r4, r0
   1e0a4:	e7df      	b.n	1e066 <__pow5mult+0x56>
   1e0a6:	0030      	movs	r0, r6
   1e0a8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   1e0aa:	46c0      	nop			; (mov r8, r8)
   1e0ac:	00021f58 	.word	0x00021f58
   1e0b0:	00000271 	.word	0x00000271

0001e0b4 <__lshift>:
   1e0b4:	b5f0      	push	{r4, r5, r6, r7, lr}
   1e0b6:	000d      	movs	r5, r1
   1e0b8:	0017      	movs	r7, r2
   1e0ba:	692b      	ldr	r3, [r5, #16]
   1e0bc:	1154      	asrs	r4, r2, #5
   1e0be:	b085      	sub	sp, #20
   1e0c0:	18e3      	adds	r3, r4, r3
   1e0c2:	9302      	str	r3, [sp, #8]
   1e0c4:	3301      	adds	r3, #1
   1e0c6:	9301      	str	r3, [sp, #4]
   1e0c8:	6849      	ldr	r1, [r1, #4]
   1e0ca:	68ab      	ldr	r3, [r5, #8]
   1e0cc:	9003      	str	r0, [sp, #12]
   1e0ce:	9a01      	ldr	r2, [sp, #4]
   1e0d0:	4293      	cmp	r3, r2
   1e0d2:	db34      	blt.n	1e13e <__lshift+0x8a>
   1e0d4:	9803      	ldr	r0, [sp, #12]
   1e0d6:	f7ff fded 	bl	1dcb4 <_Balloc>
   1e0da:	2300      	movs	r3, #0
   1e0dc:	0002      	movs	r2, r0
   1e0de:	0006      	movs	r6, r0
   1e0e0:	0019      	movs	r1, r3
   1e0e2:	3214      	adds	r2, #20
   1e0e4:	42a3      	cmp	r3, r4
   1e0e6:	db2d      	blt.n	1e144 <__lshift+0x90>
   1e0e8:	43e3      	mvns	r3, r4
   1e0ea:	17db      	asrs	r3, r3, #31
   1e0ec:	401c      	ands	r4, r3
   1e0ee:	002b      	movs	r3, r5
   1e0f0:	211f      	movs	r1, #31
   1e0f2:	00a4      	lsls	r4, r4, #2
   1e0f4:	1914      	adds	r4, r2, r4
   1e0f6:	692a      	ldr	r2, [r5, #16]
   1e0f8:	3314      	adds	r3, #20
   1e0fa:	0092      	lsls	r2, r2, #2
   1e0fc:	189a      	adds	r2, r3, r2
   1e0fe:	400f      	ands	r7, r1
   1e100:	d024      	beq.n	1e14c <__lshift+0x98>
   1e102:	3101      	adds	r1, #1
   1e104:	1bc9      	subs	r1, r1, r7
   1e106:	468c      	mov	ip, r1
   1e108:	2100      	movs	r1, #0
   1e10a:	6818      	ldr	r0, [r3, #0]
   1e10c:	40b8      	lsls	r0, r7
   1e10e:	4301      	orrs	r1, r0
   1e110:	4660      	mov	r0, ip
   1e112:	6021      	str	r1, [r4, #0]
   1e114:	cb02      	ldmia	r3!, {r1}
   1e116:	3404      	adds	r4, #4
   1e118:	40c1      	lsrs	r1, r0
   1e11a:	429a      	cmp	r2, r3
   1e11c:	d8f5      	bhi.n	1e10a <__lshift+0x56>
   1e11e:	6021      	str	r1, [r4, #0]
   1e120:	2900      	cmp	r1, #0
   1e122:	d002      	beq.n	1e12a <__lshift+0x76>
   1e124:	9b02      	ldr	r3, [sp, #8]
   1e126:	3302      	adds	r3, #2
   1e128:	9301      	str	r3, [sp, #4]
   1e12a:	9b01      	ldr	r3, [sp, #4]
   1e12c:	9803      	ldr	r0, [sp, #12]
   1e12e:	3b01      	subs	r3, #1
   1e130:	6133      	str	r3, [r6, #16]
   1e132:	0029      	movs	r1, r5
   1e134:	f7ff fdf6 	bl	1dd24 <_Bfree>
   1e138:	0030      	movs	r0, r6
   1e13a:	b005      	add	sp, #20
   1e13c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1e13e:	3101      	adds	r1, #1
   1e140:	005b      	lsls	r3, r3, #1
   1e142:	e7c4      	b.n	1e0ce <__lshift+0x1a>
   1e144:	0098      	lsls	r0, r3, #2
   1e146:	5011      	str	r1, [r2, r0]
   1e148:	3301      	adds	r3, #1
   1e14a:	e7cb      	b.n	1e0e4 <__lshift+0x30>
   1e14c:	cb02      	ldmia	r3!, {r1}
   1e14e:	c402      	stmia	r4!, {r1}
   1e150:	429a      	cmp	r2, r3
   1e152:	d8fb      	bhi.n	1e14c <__lshift+0x98>
   1e154:	e7e9      	b.n	1e12a <__lshift+0x76>

0001e156 <__mcmp>:
   1e156:	690a      	ldr	r2, [r1, #16]
   1e158:	6903      	ldr	r3, [r0, #16]
   1e15a:	b530      	push	{r4, r5, lr}
   1e15c:	1a9b      	subs	r3, r3, r2
   1e15e:	d10e      	bne.n	1e17e <__mcmp+0x28>
   1e160:	0092      	lsls	r2, r2, #2
   1e162:	3014      	adds	r0, #20
   1e164:	3114      	adds	r1, #20
   1e166:	1884      	adds	r4, r0, r2
   1e168:	1889      	adds	r1, r1, r2
   1e16a:	3c04      	subs	r4, #4
   1e16c:	3904      	subs	r1, #4
   1e16e:	6822      	ldr	r2, [r4, #0]
   1e170:	680d      	ldr	r5, [r1, #0]
   1e172:	42aa      	cmp	r2, r5
   1e174:	d005      	beq.n	1e182 <__mcmp+0x2c>
   1e176:	42aa      	cmp	r2, r5
   1e178:	4192      	sbcs	r2, r2
   1e17a:	2301      	movs	r3, #1
   1e17c:	4313      	orrs	r3, r2
   1e17e:	0018      	movs	r0, r3
   1e180:	bd30      	pop	{r4, r5, pc}
   1e182:	42a0      	cmp	r0, r4
   1e184:	d3f1      	bcc.n	1e16a <__mcmp+0x14>
   1e186:	e7fa      	b.n	1e17e <__mcmp+0x28>

0001e188 <__mdiff>:
   1e188:	b5f0      	push	{r4, r5, r6, r7, lr}
   1e18a:	000d      	movs	r5, r1
   1e18c:	b085      	sub	sp, #20
   1e18e:	0007      	movs	r7, r0
   1e190:	0011      	movs	r1, r2
   1e192:	0028      	movs	r0, r5
   1e194:	0014      	movs	r4, r2
   1e196:	f7ff ffde 	bl	1e156 <__mcmp>
   1e19a:	1e06      	subs	r6, r0, #0
   1e19c:	d108      	bne.n	1e1b0 <__mdiff+0x28>
   1e19e:	0001      	movs	r1, r0
   1e1a0:	0038      	movs	r0, r7
   1e1a2:	f7ff fd87 	bl	1dcb4 <_Balloc>
   1e1a6:	2301      	movs	r3, #1
   1e1a8:	6146      	str	r6, [r0, #20]
   1e1aa:	6103      	str	r3, [r0, #16]
   1e1ac:	b005      	add	sp, #20
   1e1ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1e1b0:	2301      	movs	r3, #1
   1e1b2:	9301      	str	r3, [sp, #4]
   1e1b4:	2800      	cmp	r0, #0
   1e1b6:	db04      	blt.n	1e1c2 <__mdiff+0x3a>
   1e1b8:	0023      	movs	r3, r4
   1e1ba:	002c      	movs	r4, r5
   1e1bc:	001d      	movs	r5, r3
   1e1be:	2300      	movs	r3, #0
   1e1c0:	9301      	str	r3, [sp, #4]
   1e1c2:	6861      	ldr	r1, [r4, #4]
   1e1c4:	0038      	movs	r0, r7
   1e1c6:	f7ff fd75 	bl	1dcb4 <_Balloc>
   1e1ca:	002f      	movs	r7, r5
   1e1cc:	2200      	movs	r2, #0
   1e1ce:	9b01      	ldr	r3, [sp, #4]
   1e1d0:	6926      	ldr	r6, [r4, #16]
   1e1d2:	60c3      	str	r3, [r0, #12]
   1e1d4:	3414      	adds	r4, #20
   1e1d6:	00b3      	lsls	r3, r6, #2
   1e1d8:	18e3      	adds	r3, r4, r3
   1e1da:	9302      	str	r3, [sp, #8]
   1e1dc:	692b      	ldr	r3, [r5, #16]
   1e1de:	3714      	adds	r7, #20
   1e1e0:	009b      	lsls	r3, r3, #2
   1e1e2:	18fb      	adds	r3, r7, r3
   1e1e4:	9303      	str	r3, [sp, #12]
   1e1e6:	0003      	movs	r3, r0
   1e1e8:	4694      	mov	ip, r2
   1e1ea:	3314      	adds	r3, #20
   1e1ec:	cc20      	ldmia	r4!, {r5}
   1e1ee:	cf04      	ldmia	r7!, {r2}
   1e1f0:	9201      	str	r2, [sp, #4]
   1e1f2:	b2aa      	uxth	r2, r5
   1e1f4:	4494      	add	ip, r2
   1e1f6:	466a      	mov	r2, sp
   1e1f8:	4661      	mov	r1, ip
   1e1fa:	8892      	ldrh	r2, [r2, #4]
   1e1fc:	0c2d      	lsrs	r5, r5, #16
   1e1fe:	1a8a      	subs	r2, r1, r2
   1e200:	9901      	ldr	r1, [sp, #4]
   1e202:	0c09      	lsrs	r1, r1, #16
   1e204:	1a69      	subs	r1, r5, r1
   1e206:	1415      	asrs	r5, r2, #16
   1e208:	1949      	adds	r1, r1, r5
   1e20a:	140d      	asrs	r5, r1, #16
   1e20c:	b292      	uxth	r2, r2
   1e20e:	0409      	lsls	r1, r1, #16
   1e210:	430a      	orrs	r2, r1
   1e212:	601a      	str	r2, [r3, #0]
   1e214:	9a03      	ldr	r2, [sp, #12]
   1e216:	46ac      	mov	ip, r5
   1e218:	3304      	adds	r3, #4
   1e21a:	42ba      	cmp	r2, r7
   1e21c:	d8e6      	bhi.n	1e1ec <__mdiff+0x64>
   1e21e:	9902      	ldr	r1, [sp, #8]
   1e220:	001a      	movs	r2, r3
   1e222:	428c      	cmp	r4, r1
   1e224:	d305      	bcc.n	1e232 <__mdiff+0xaa>
   1e226:	3a04      	subs	r2, #4
   1e228:	6813      	ldr	r3, [r2, #0]
   1e22a:	2b00      	cmp	r3, #0
   1e22c:	d00e      	beq.n	1e24c <__mdiff+0xc4>
   1e22e:	6106      	str	r6, [r0, #16]
   1e230:	e7bc      	b.n	1e1ac <__mdiff+0x24>
   1e232:	cc04      	ldmia	r4!, {r2}
   1e234:	b291      	uxth	r1, r2
   1e236:	4461      	add	r1, ip
   1e238:	140d      	asrs	r5, r1, #16
   1e23a:	0c12      	lsrs	r2, r2, #16
   1e23c:	1952      	adds	r2, r2, r5
   1e23e:	1415      	asrs	r5, r2, #16
   1e240:	b289      	uxth	r1, r1
   1e242:	0412      	lsls	r2, r2, #16
   1e244:	430a      	orrs	r2, r1
   1e246:	46ac      	mov	ip, r5
   1e248:	c304      	stmia	r3!, {r2}
   1e24a:	e7e8      	b.n	1e21e <__mdiff+0x96>
   1e24c:	3e01      	subs	r6, #1
   1e24e:	e7ea      	b.n	1e226 <__mdiff+0x9e>

0001e250 <__ulp>:
   1e250:	000b      	movs	r3, r1
   1e252:	4910      	ldr	r1, [pc, #64]	; (1e294 <__ulp+0x44>)
   1e254:	b510      	push	{r4, lr}
   1e256:	4019      	ands	r1, r3
   1e258:	4b0f      	ldr	r3, [pc, #60]	; (1e298 <__ulp+0x48>)
   1e25a:	18c9      	adds	r1, r1, r3
   1e25c:	2900      	cmp	r1, #0
   1e25e:	dd04      	ble.n	1e26a <__ulp+0x1a>
   1e260:	2200      	movs	r2, #0
   1e262:	000b      	movs	r3, r1
   1e264:	0010      	movs	r0, r2
   1e266:	0019      	movs	r1, r3
   1e268:	bd10      	pop	{r4, pc}
   1e26a:	4249      	negs	r1, r1
   1e26c:	1509      	asrs	r1, r1, #20
   1e26e:	2200      	movs	r2, #0
   1e270:	2300      	movs	r3, #0
   1e272:	2913      	cmp	r1, #19
   1e274:	dc04      	bgt.n	1e280 <__ulp+0x30>
   1e276:	2080      	movs	r0, #128	; 0x80
   1e278:	0300      	lsls	r0, r0, #12
   1e27a:	4108      	asrs	r0, r1
   1e27c:	0003      	movs	r3, r0
   1e27e:	e7f1      	b.n	1e264 <__ulp+0x14>
   1e280:	3914      	subs	r1, #20
   1e282:	2001      	movs	r0, #1
   1e284:	291e      	cmp	r1, #30
   1e286:	dc02      	bgt.n	1e28e <__ulp+0x3e>
   1e288:	241f      	movs	r4, #31
   1e28a:	1a61      	subs	r1, r4, r1
   1e28c:	4088      	lsls	r0, r1
   1e28e:	0002      	movs	r2, r0
   1e290:	e7e8      	b.n	1e264 <__ulp+0x14>
   1e292:	46c0      	nop			; (mov r8, r8)
   1e294:	7ff00000 	.word	0x7ff00000
   1e298:	fcc00000 	.word	0xfcc00000

0001e29c <__b2d>:
   1e29c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1e29e:	0006      	movs	r6, r0
   1e2a0:	6903      	ldr	r3, [r0, #16]
   1e2a2:	3614      	adds	r6, #20
   1e2a4:	009b      	lsls	r3, r3, #2
   1e2a6:	18f3      	adds	r3, r6, r3
   1e2a8:	1f1d      	subs	r5, r3, #4
   1e2aa:	682c      	ldr	r4, [r5, #0]
   1e2ac:	000f      	movs	r7, r1
   1e2ae:	0020      	movs	r0, r4
   1e2b0:	9301      	str	r3, [sp, #4]
   1e2b2:	f7ff fdcb 	bl	1de4c <__hi0bits>
   1e2b6:	2320      	movs	r3, #32
   1e2b8:	1a1b      	subs	r3, r3, r0
   1e2ba:	603b      	str	r3, [r7, #0]
   1e2bc:	491c      	ldr	r1, [pc, #112]	; (1e330 <__b2d+0x94>)
   1e2be:	280a      	cmp	r0, #10
   1e2c0:	dc16      	bgt.n	1e2f0 <__b2d+0x54>
   1e2c2:	230b      	movs	r3, #11
   1e2c4:	0027      	movs	r7, r4
   1e2c6:	1a1b      	subs	r3, r3, r0
   1e2c8:	40df      	lsrs	r7, r3
   1e2ca:	4339      	orrs	r1, r7
   1e2cc:	469c      	mov	ip, r3
   1e2ce:	000b      	movs	r3, r1
   1e2d0:	2100      	movs	r1, #0
   1e2d2:	42ae      	cmp	r6, r5
   1e2d4:	d202      	bcs.n	1e2dc <__b2d+0x40>
   1e2d6:	9901      	ldr	r1, [sp, #4]
   1e2d8:	3908      	subs	r1, #8
   1e2da:	6809      	ldr	r1, [r1, #0]
   1e2dc:	3015      	adds	r0, #21
   1e2de:	4084      	lsls	r4, r0
   1e2e0:	4660      	mov	r0, ip
   1e2e2:	40c1      	lsrs	r1, r0
   1e2e4:	430c      	orrs	r4, r1
   1e2e6:	0022      	movs	r2, r4
   1e2e8:	0010      	movs	r0, r2
   1e2ea:	0019      	movs	r1, r3
   1e2ec:	b003      	add	sp, #12
   1e2ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1e2f0:	2700      	movs	r7, #0
   1e2f2:	42ae      	cmp	r6, r5
   1e2f4:	d202      	bcs.n	1e2fc <__b2d+0x60>
   1e2f6:	9d01      	ldr	r5, [sp, #4]
   1e2f8:	3d08      	subs	r5, #8
   1e2fa:	682f      	ldr	r7, [r5, #0]
   1e2fc:	380b      	subs	r0, #11
   1e2fe:	4684      	mov	ip, r0
   1e300:	1e03      	subs	r3, r0, #0
   1e302:	d012      	beq.n	1e32a <__b2d+0x8e>
   1e304:	409c      	lsls	r4, r3
   1e306:	2020      	movs	r0, #32
   1e308:	4321      	orrs	r1, r4
   1e30a:	003c      	movs	r4, r7
   1e30c:	1ac0      	subs	r0, r0, r3
   1e30e:	40c4      	lsrs	r4, r0
   1e310:	4321      	orrs	r1, r4
   1e312:	000b      	movs	r3, r1
   1e314:	2100      	movs	r1, #0
   1e316:	42b5      	cmp	r5, r6
   1e318:	d901      	bls.n	1e31e <__b2d+0x82>
   1e31a:	3d04      	subs	r5, #4
   1e31c:	6829      	ldr	r1, [r5, #0]
   1e31e:	4664      	mov	r4, ip
   1e320:	40c1      	lsrs	r1, r0
   1e322:	40a7      	lsls	r7, r4
   1e324:	430f      	orrs	r7, r1
   1e326:	003a      	movs	r2, r7
   1e328:	e7de      	b.n	1e2e8 <__b2d+0x4c>
   1e32a:	4321      	orrs	r1, r4
   1e32c:	000b      	movs	r3, r1
   1e32e:	e7fa      	b.n	1e326 <__b2d+0x8a>
   1e330:	3ff00000 	.word	0x3ff00000

0001e334 <__d2b>:
   1e334:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1e336:	001d      	movs	r5, r3
   1e338:	2101      	movs	r1, #1
   1e33a:	9f08      	ldr	r7, [sp, #32]
   1e33c:	0014      	movs	r4, r2
   1e33e:	f7ff fcb9 	bl	1dcb4 <_Balloc>
   1e342:	032b      	lsls	r3, r5, #12
   1e344:	006d      	lsls	r5, r5, #1
   1e346:	0006      	movs	r6, r0
   1e348:	0b1b      	lsrs	r3, r3, #12
   1e34a:	0d6d      	lsrs	r5, r5, #21
   1e34c:	d124      	bne.n	1e398 <__d2b+0x64>
   1e34e:	9301      	str	r3, [sp, #4]
   1e350:	2c00      	cmp	r4, #0
   1e352:	d027      	beq.n	1e3a4 <__d2b+0x70>
   1e354:	4668      	mov	r0, sp
   1e356:	9400      	str	r4, [sp, #0]
   1e358:	f7ff fd92 	bl	1de80 <__lo0bits>
   1e35c:	9c00      	ldr	r4, [sp, #0]
   1e35e:	2800      	cmp	r0, #0
   1e360:	d01e      	beq.n	1e3a0 <__d2b+0x6c>
   1e362:	9b01      	ldr	r3, [sp, #4]
   1e364:	2120      	movs	r1, #32
   1e366:	001a      	movs	r2, r3
   1e368:	1a09      	subs	r1, r1, r0
   1e36a:	408a      	lsls	r2, r1
   1e36c:	40c3      	lsrs	r3, r0
   1e36e:	4322      	orrs	r2, r4
   1e370:	6172      	str	r2, [r6, #20]
   1e372:	9301      	str	r3, [sp, #4]
   1e374:	9c01      	ldr	r4, [sp, #4]
   1e376:	61b4      	str	r4, [r6, #24]
   1e378:	1e63      	subs	r3, r4, #1
   1e37a:	419c      	sbcs	r4, r3
   1e37c:	3401      	adds	r4, #1
   1e37e:	6134      	str	r4, [r6, #16]
   1e380:	2d00      	cmp	r5, #0
   1e382:	d018      	beq.n	1e3b6 <__d2b+0x82>
   1e384:	4b12      	ldr	r3, [pc, #72]	; (1e3d0 <__d2b+0x9c>)
   1e386:	18ed      	adds	r5, r5, r3
   1e388:	2335      	movs	r3, #53	; 0x35
   1e38a:	182d      	adds	r5, r5, r0
   1e38c:	603d      	str	r5, [r7, #0]
   1e38e:	1a18      	subs	r0, r3, r0
   1e390:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1e392:	6018      	str	r0, [r3, #0]
   1e394:	0030      	movs	r0, r6
   1e396:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   1e398:	2280      	movs	r2, #128	; 0x80
   1e39a:	0352      	lsls	r2, r2, #13
   1e39c:	4313      	orrs	r3, r2
   1e39e:	e7d6      	b.n	1e34e <__d2b+0x1a>
   1e3a0:	6174      	str	r4, [r6, #20]
   1e3a2:	e7e7      	b.n	1e374 <__d2b+0x40>
   1e3a4:	a801      	add	r0, sp, #4
   1e3a6:	f7ff fd6b 	bl	1de80 <__lo0bits>
   1e3aa:	2401      	movs	r4, #1
   1e3ac:	9b01      	ldr	r3, [sp, #4]
   1e3ae:	6134      	str	r4, [r6, #16]
   1e3b0:	6173      	str	r3, [r6, #20]
   1e3b2:	3020      	adds	r0, #32
   1e3b4:	e7e4      	b.n	1e380 <__d2b+0x4c>
   1e3b6:	4b07      	ldr	r3, [pc, #28]	; (1e3d4 <__d2b+0xa0>)
   1e3b8:	18c0      	adds	r0, r0, r3
   1e3ba:	4b07      	ldr	r3, [pc, #28]	; (1e3d8 <__d2b+0xa4>)
   1e3bc:	6038      	str	r0, [r7, #0]
   1e3be:	18e3      	adds	r3, r4, r3
   1e3c0:	009b      	lsls	r3, r3, #2
   1e3c2:	18f3      	adds	r3, r6, r3
   1e3c4:	6958      	ldr	r0, [r3, #20]
   1e3c6:	f7ff fd41 	bl	1de4c <__hi0bits>
   1e3ca:	0164      	lsls	r4, r4, #5
   1e3cc:	1a20      	subs	r0, r4, r0
   1e3ce:	e7df      	b.n	1e390 <__d2b+0x5c>
   1e3d0:	fffffbcd 	.word	0xfffffbcd
   1e3d4:	fffffbce 	.word	0xfffffbce
   1e3d8:	3fffffff 	.word	0x3fffffff

0001e3dc <__ratio>:
   1e3dc:	b5f0      	push	{r4, r5, r6, r7, lr}
   1e3de:	b085      	sub	sp, #20
   1e3e0:	000f      	movs	r7, r1
   1e3e2:	a902      	add	r1, sp, #8
   1e3e4:	0006      	movs	r6, r0
   1e3e6:	f7ff ff59 	bl	1e29c <__b2d>
   1e3ea:	0004      	movs	r4, r0
   1e3ec:	000d      	movs	r5, r1
   1e3ee:	0038      	movs	r0, r7
   1e3f0:	a903      	add	r1, sp, #12
   1e3f2:	9400      	str	r4, [sp, #0]
   1e3f4:	9501      	str	r5, [sp, #4]
   1e3f6:	f7ff ff51 	bl	1e29c <__b2d>
   1e3fa:	6936      	ldr	r6, [r6, #16]
   1e3fc:	693f      	ldr	r7, [r7, #16]
   1e3fe:	0002      	movs	r2, r0
   1e400:	1bf7      	subs	r7, r6, r7
   1e402:	017e      	lsls	r6, r7, #5
   1e404:	46b4      	mov	ip, r6
   1e406:	9f03      	ldr	r7, [sp, #12]
   1e408:	9e02      	ldr	r6, [sp, #8]
   1e40a:	000b      	movs	r3, r1
   1e40c:	1bf6      	subs	r6, r6, r7
   1e40e:	4466      	add	r6, ip
   1e410:	0537      	lsls	r7, r6, #20
   1e412:	2e00      	cmp	r6, #0
   1e414:	dd07      	ble.n	1e426 <__ratio+0x4a>
   1e416:	1979      	adds	r1, r7, r5
   1e418:	9101      	str	r1, [sp, #4]
   1e41a:	9800      	ldr	r0, [sp, #0]
   1e41c:	9901      	ldr	r1, [sp, #4]
   1e41e:	f7fc f9a5 	bl	1a76c <__aeabi_ddiv>
   1e422:	b005      	add	sp, #20
   1e424:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1e426:	1bcb      	subs	r3, r1, r7
   1e428:	e7f7      	b.n	1e41a <__ratio+0x3e>

0001e42a <__copybits>:
   1e42a:	0013      	movs	r3, r2
   1e42c:	3901      	subs	r1, #1
   1e42e:	b510      	push	{r4, lr}
   1e430:	1149      	asrs	r1, r1, #5
   1e432:	6912      	ldr	r2, [r2, #16]
   1e434:	3101      	adds	r1, #1
   1e436:	0089      	lsls	r1, r1, #2
   1e438:	3314      	adds	r3, #20
   1e43a:	0092      	lsls	r2, r2, #2
   1e43c:	1841      	adds	r1, r0, r1
   1e43e:	189a      	adds	r2, r3, r2
   1e440:	429a      	cmp	r2, r3
   1e442:	d803      	bhi.n	1e44c <__copybits+0x22>
   1e444:	2300      	movs	r3, #0
   1e446:	4281      	cmp	r1, r0
   1e448:	d803      	bhi.n	1e452 <__copybits+0x28>
   1e44a:	bd10      	pop	{r4, pc}
   1e44c:	cb10      	ldmia	r3!, {r4}
   1e44e:	c010      	stmia	r0!, {r4}
   1e450:	e7f6      	b.n	1e440 <__copybits+0x16>
   1e452:	c008      	stmia	r0!, {r3}
   1e454:	e7f7      	b.n	1e446 <__copybits+0x1c>

0001e456 <__any_on>:
   1e456:	0002      	movs	r2, r0
   1e458:	6900      	ldr	r0, [r0, #16]
   1e45a:	b510      	push	{r4, lr}
   1e45c:	3214      	adds	r2, #20
   1e45e:	114b      	asrs	r3, r1, #5
   1e460:	4298      	cmp	r0, r3
   1e462:	db12      	blt.n	1e48a <__any_on+0x34>
   1e464:	dd0b      	ble.n	1e47e <__any_on+0x28>
   1e466:	201f      	movs	r0, #31
   1e468:	4001      	ands	r1, r0
   1e46a:	d008      	beq.n	1e47e <__any_on+0x28>
   1e46c:	0098      	lsls	r0, r3, #2
   1e46e:	5884      	ldr	r4, [r0, r2]
   1e470:	0020      	movs	r0, r4
   1e472:	40c8      	lsrs	r0, r1
   1e474:	4088      	lsls	r0, r1
   1e476:	0001      	movs	r1, r0
   1e478:	2001      	movs	r0, #1
   1e47a:	428c      	cmp	r4, r1
   1e47c:	d104      	bne.n	1e488 <__any_on+0x32>
   1e47e:	009b      	lsls	r3, r3, #2
   1e480:	18d3      	adds	r3, r2, r3
   1e482:	4293      	cmp	r3, r2
   1e484:	d803      	bhi.n	1e48e <__any_on+0x38>
   1e486:	2000      	movs	r0, #0
   1e488:	bd10      	pop	{r4, pc}
   1e48a:	0003      	movs	r3, r0
   1e48c:	e7f7      	b.n	1e47e <__any_on+0x28>
   1e48e:	3b04      	subs	r3, #4
   1e490:	6819      	ldr	r1, [r3, #0]
   1e492:	2900      	cmp	r1, #0
   1e494:	d0f5      	beq.n	1e482 <__any_on+0x2c>
   1e496:	2001      	movs	r0, #1
   1e498:	e7f6      	b.n	1e488 <__any_on+0x32>

0001e49a <_calloc_r>:
   1e49a:	434a      	muls	r2, r1
   1e49c:	b570      	push	{r4, r5, r6, lr}
   1e49e:	0011      	movs	r1, r2
   1e4a0:	0014      	movs	r4, r2
   1e4a2:	f7fd feb9 	bl	1c218 <_malloc_r>
   1e4a6:	1e05      	subs	r5, r0, #0
   1e4a8:	d003      	beq.n	1e4b2 <_calloc_r+0x18>
   1e4aa:	0022      	movs	r2, r4
   1e4ac:	2100      	movs	r1, #0
   1e4ae:	f7fd fe60 	bl	1c172 <memset>
   1e4b2:	0028      	movs	r0, r5
   1e4b4:	bd70      	pop	{r4, r5, r6, pc}
	...

0001e4b8 <__ssputs_r>:
   1e4b8:	b5f0      	push	{r4, r5, r6, r7, lr}
   1e4ba:	688e      	ldr	r6, [r1, #8]
   1e4bc:	b085      	sub	sp, #20
   1e4be:	0007      	movs	r7, r0
   1e4c0:	000c      	movs	r4, r1
   1e4c2:	9203      	str	r2, [sp, #12]
   1e4c4:	9301      	str	r3, [sp, #4]
   1e4c6:	429e      	cmp	r6, r3
   1e4c8:	d839      	bhi.n	1e53e <__ssputs_r+0x86>
   1e4ca:	2390      	movs	r3, #144	; 0x90
   1e4cc:	898a      	ldrh	r2, [r1, #12]
   1e4ce:	00db      	lsls	r3, r3, #3
   1e4d0:	421a      	tst	r2, r3
   1e4d2:	d034      	beq.n	1e53e <__ssputs_r+0x86>
   1e4d4:	2503      	movs	r5, #3
   1e4d6:	6909      	ldr	r1, [r1, #16]
   1e4d8:	6823      	ldr	r3, [r4, #0]
   1e4da:	1a5b      	subs	r3, r3, r1
   1e4dc:	9302      	str	r3, [sp, #8]
   1e4de:	6963      	ldr	r3, [r4, #20]
   1e4e0:	9802      	ldr	r0, [sp, #8]
   1e4e2:	435d      	muls	r5, r3
   1e4e4:	0feb      	lsrs	r3, r5, #31
   1e4e6:	195d      	adds	r5, r3, r5
   1e4e8:	9b01      	ldr	r3, [sp, #4]
   1e4ea:	106d      	asrs	r5, r5, #1
   1e4ec:	3301      	adds	r3, #1
   1e4ee:	181b      	adds	r3, r3, r0
   1e4f0:	42ab      	cmp	r3, r5
   1e4f2:	d900      	bls.n	1e4f6 <__ssputs_r+0x3e>
   1e4f4:	001d      	movs	r5, r3
   1e4f6:	0553      	lsls	r3, r2, #21
   1e4f8:	d532      	bpl.n	1e560 <__ssputs_r+0xa8>
   1e4fa:	0029      	movs	r1, r5
   1e4fc:	0038      	movs	r0, r7
   1e4fe:	f7fd fe8b 	bl	1c218 <_malloc_r>
   1e502:	1e06      	subs	r6, r0, #0
   1e504:	d109      	bne.n	1e51a <__ssputs_r+0x62>
   1e506:	230c      	movs	r3, #12
   1e508:	603b      	str	r3, [r7, #0]
   1e50a:	2340      	movs	r3, #64	; 0x40
   1e50c:	2001      	movs	r0, #1
   1e50e:	89a2      	ldrh	r2, [r4, #12]
   1e510:	4240      	negs	r0, r0
   1e512:	4313      	orrs	r3, r2
   1e514:	81a3      	strh	r3, [r4, #12]
   1e516:	b005      	add	sp, #20
   1e518:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1e51a:	9a02      	ldr	r2, [sp, #8]
   1e51c:	6921      	ldr	r1, [r4, #16]
   1e51e:	f7fd fe0d 	bl	1c13c <memcpy>
   1e522:	89a3      	ldrh	r3, [r4, #12]
   1e524:	4a14      	ldr	r2, [pc, #80]	; (1e578 <__ssputs_r+0xc0>)
   1e526:	401a      	ands	r2, r3
   1e528:	2380      	movs	r3, #128	; 0x80
   1e52a:	4313      	orrs	r3, r2
   1e52c:	81a3      	strh	r3, [r4, #12]
   1e52e:	9b02      	ldr	r3, [sp, #8]
   1e530:	6126      	str	r6, [r4, #16]
   1e532:	18f6      	adds	r6, r6, r3
   1e534:	6026      	str	r6, [r4, #0]
   1e536:	6165      	str	r5, [r4, #20]
   1e538:	9e01      	ldr	r6, [sp, #4]
   1e53a:	1aed      	subs	r5, r5, r3
   1e53c:	60a5      	str	r5, [r4, #8]
   1e53e:	9b01      	ldr	r3, [sp, #4]
   1e540:	42b3      	cmp	r3, r6
   1e542:	d200      	bcs.n	1e546 <__ssputs_r+0x8e>
   1e544:	001e      	movs	r6, r3
   1e546:	0032      	movs	r2, r6
   1e548:	9903      	ldr	r1, [sp, #12]
   1e54a:	6820      	ldr	r0, [r4, #0]
   1e54c:	f7fd fdff 	bl	1c14e <memmove>
   1e550:	68a3      	ldr	r3, [r4, #8]
   1e552:	2000      	movs	r0, #0
   1e554:	1b9b      	subs	r3, r3, r6
   1e556:	60a3      	str	r3, [r4, #8]
   1e558:	6823      	ldr	r3, [r4, #0]
   1e55a:	199e      	adds	r6, r3, r6
   1e55c:	6026      	str	r6, [r4, #0]
   1e55e:	e7da      	b.n	1e516 <__ssputs_r+0x5e>
   1e560:	002a      	movs	r2, r5
   1e562:	0038      	movs	r0, r7
   1e564:	f001 f908 	bl	1f778 <_realloc_r>
   1e568:	1e06      	subs	r6, r0, #0
   1e56a:	d1e0      	bne.n	1e52e <__ssputs_r+0x76>
   1e56c:	6921      	ldr	r1, [r4, #16]
   1e56e:	0038      	movs	r0, r7
   1e570:	f7fd fe08 	bl	1c184 <_free_r>
   1e574:	e7c7      	b.n	1e506 <__ssputs_r+0x4e>
   1e576:	46c0      	nop			; (mov r8, r8)
   1e578:	fffffb7f 	.word	0xfffffb7f

0001e57c <_svfiprintf_r>:
   1e57c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1e57e:	b09f      	sub	sp, #124	; 0x7c
   1e580:	9002      	str	r0, [sp, #8]
   1e582:	9305      	str	r3, [sp, #20]
   1e584:	898b      	ldrh	r3, [r1, #12]
   1e586:	000f      	movs	r7, r1
   1e588:	0016      	movs	r6, r2
   1e58a:	061b      	lsls	r3, r3, #24
   1e58c:	d511      	bpl.n	1e5b2 <_svfiprintf_r+0x36>
   1e58e:	690b      	ldr	r3, [r1, #16]
   1e590:	2b00      	cmp	r3, #0
   1e592:	d10e      	bne.n	1e5b2 <_svfiprintf_r+0x36>
   1e594:	2140      	movs	r1, #64	; 0x40
   1e596:	f7fd fe3f 	bl	1c218 <_malloc_r>
   1e59a:	6038      	str	r0, [r7, #0]
   1e59c:	6138      	str	r0, [r7, #16]
   1e59e:	2800      	cmp	r0, #0
   1e5a0:	d105      	bne.n	1e5ae <_svfiprintf_r+0x32>
   1e5a2:	230c      	movs	r3, #12
   1e5a4:	9a02      	ldr	r2, [sp, #8]
   1e5a6:	3801      	subs	r0, #1
   1e5a8:	6013      	str	r3, [r2, #0]
   1e5aa:	b01f      	add	sp, #124	; 0x7c
   1e5ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1e5ae:	2340      	movs	r3, #64	; 0x40
   1e5b0:	617b      	str	r3, [r7, #20]
   1e5b2:	2300      	movs	r3, #0
   1e5b4:	ad06      	add	r5, sp, #24
   1e5b6:	616b      	str	r3, [r5, #20]
   1e5b8:	3320      	adds	r3, #32
   1e5ba:	766b      	strb	r3, [r5, #25]
   1e5bc:	3310      	adds	r3, #16
   1e5be:	76ab      	strb	r3, [r5, #26]
   1e5c0:	0034      	movs	r4, r6
   1e5c2:	7823      	ldrb	r3, [r4, #0]
   1e5c4:	2b00      	cmp	r3, #0
   1e5c6:	d147      	bne.n	1e658 <_svfiprintf_r+0xdc>
   1e5c8:	1ba3      	subs	r3, r4, r6
   1e5ca:	9304      	str	r3, [sp, #16]
   1e5cc:	d00d      	beq.n	1e5ea <_svfiprintf_r+0x6e>
   1e5ce:	1ba3      	subs	r3, r4, r6
   1e5d0:	0032      	movs	r2, r6
   1e5d2:	0039      	movs	r1, r7
   1e5d4:	9802      	ldr	r0, [sp, #8]
   1e5d6:	f7ff ff6f 	bl	1e4b8 <__ssputs_r>
   1e5da:	1c43      	adds	r3, r0, #1
   1e5dc:	d100      	bne.n	1e5e0 <_svfiprintf_r+0x64>
   1e5de:	e0b5      	b.n	1e74c <_svfiprintf_r+0x1d0>
   1e5e0:	696a      	ldr	r2, [r5, #20]
   1e5e2:	9b04      	ldr	r3, [sp, #16]
   1e5e4:	4694      	mov	ip, r2
   1e5e6:	4463      	add	r3, ip
   1e5e8:	616b      	str	r3, [r5, #20]
   1e5ea:	7823      	ldrb	r3, [r4, #0]
   1e5ec:	2b00      	cmp	r3, #0
   1e5ee:	d100      	bne.n	1e5f2 <_svfiprintf_r+0x76>
   1e5f0:	e0ac      	b.n	1e74c <_svfiprintf_r+0x1d0>
   1e5f2:	2201      	movs	r2, #1
   1e5f4:	2300      	movs	r3, #0
   1e5f6:	4252      	negs	r2, r2
   1e5f8:	606a      	str	r2, [r5, #4]
   1e5fa:	a902      	add	r1, sp, #8
   1e5fc:	3254      	adds	r2, #84	; 0x54
   1e5fe:	1852      	adds	r2, r2, r1
   1e600:	3401      	adds	r4, #1
   1e602:	602b      	str	r3, [r5, #0]
   1e604:	60eb      	str	r3, [r5, #12]
   1e606:	60ab      	str	r3, [r5, #8]
   1e608:	7013      	strb	r3, [r2, #0]
   1e60a:	65ab      	str	r3, [r5, #88]	; 0x58
   1e60c:	4e58      	ldr	r6, [pc, #352]	; (1e770 <_svfiprintf_r+0x1f4>)
   1e60e:	2205      	movs	r2, #5
   1e610:	7821      	ldrb	r1, [r4, #0]
   1e612:	0030      	movs	r0, r6
   1e614:	f7fd fd78 	bl	1c108 <memchr>
   1e618:	1c62      	adds	r2, r4, #1
   1e61a:	2800      	cmp	r0, #0
   1e61c:	d120      	bne.n	1e660 <_svfiprintf_r+0xe4>
   1e61e:	6829      	ldr	r1, [r5, #0]
   1e620:	06cb      	lsls	r3, r1, #27
   1e622:	d504      	bpl.n	1e62e <_svfiprintf_r+0xb2>
   1e624:	2353      	movs	r3, #83	; 0x53
   1e626:	ae02      	add	r6, sp, #8
   1e628:	3020      	adds	r0, #32
   1e62a:	199b      	adds	r3, r3, r6
   1e62c:	7018      	strb	r0, [r3, #0]
   1e62e:	070b      	lsls	r3, r1, #28
   1e630:	d504      	bpl.n	1e63c <_svfiprintf_r+0xc0>
   1e632:	2353      	movs	r3, #83	; 0x53
   1e634:	202b      	movs	r0, #43	; 0x2b
   1e636:	ae02      	add	r6, sp, #8
   1e638:	199b      	adds	r3, r3, r6
   1e63a:	7018      	strb	r0, [r3, #0]
   1e63c:	7823      	ldrb	r3, [r4, #0]
   1e63e:	2b2a      	cmp	r3, #42	; 0x2a
   1e640:	d016      	beq.n	1e670 <_svfiprintf_r+0xf4>
   1e642:	2000      	movs	r0, #0
   1e644:	210a      	movs	r1, #10
   1e646:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1e648:	7822      	ldrb	r2, [r4, #0]
   1e64a:	3a30      	subs	r2, #48	; 0x30
   1e64c:	2a09      	cmp	r2, #9
   1e64e:	d955      	bls.n	1e6fc <_svfiprintf_r+0x180>
   1e650:	2800      	cmp	r0, #0
   1e652:	d015      	beq.n	1e680 <_svfiprintf_r+0x104>
   1e654:	9309      	str	r3, [sp, #36]	; 0x24
   1e656:	e013      	b.n	1e680 <_svfiprintf_r+0x104>
   1e658:	2b25      	cmp	r3, #37	; 0x25
   1e65a:	d0b5      	beq.n	1e5c8 <_svfiprintf_r+0x4c>
   1e65c:	3401      	adds	r4, #1
   1e65e:	e7b0      	b.n	1e5c2 <_svfiprintf_r+0x46>
   1e660:	2301      	movs	r3, #1
   1e662:	1b80      	subs	r0, r0, r6
   1e664:	4083      	lsls	r3, r0
   1e666:	6829      	ldr	r1, [r5, #0]
   1e668:	0014      	movs	r4, r2
   1e66a:	430b      	orrs	r3, r1
   1e66c:	602b      	str	r3, [r5, #0]
   1e66e:	e7cd      	b.n	1e60c <_svfiprintf_r+0x90>
   1e670:	9b05      	ldr	r3, [sp, #20]
   1e672:	1d18      	adds	r0, r3, #4
   1e674:	681b      	ldr	r3, [r3, #0]
   1e676:	9005      	str	r0, [sp, #20]
   1e678:	2b00      	cmp	r3, #0
   1e67a:	db39      	blt.n	1e6f0 <_svfiprintf_r+0x174>
   1e67c:	9309      	str	r3, [sp, #36]	; 0x24
   1e67e:	0014      	movs	r4, r2
   1e680:	7823      	ldrb	r3, [r4, #0]
   1e682:	2b2e      	cmp	r3, #46	; 0x2e
   1e684:	d10b      	bne.n	1e69e <_svfiprintf_r+0x122>
   1e686:	7863      	ldrb	r3, [r4, #1]
   1e688:	1c62      	adds	r2, r4, #1
   1e68a:	2b2a      	cmp	r3, #42	; 0x2a
   1e68c:	d13e      	bne.n	1e70c <_svfiprintf_r+0x190>
   1e68e:	9b05      	ldr	r3, [sp, #20]
   1e690:	3402      	adds	r4, #2
   1e692:	1d1a      	adds	r2, r3, #4
   1e694:	681b      	ldr	r3, [r3, #0]
   1e696:	9205      	str	r2, [sp, #20]
   1e698:	2b00      	cmp	r3, #0
   1e69a:	db34      	blt.n	1e706 <_svfiprintf_r+0x18a>
   1e69c:	9307      	str	r3, [sp, #28]
   1e69e:	4e35      	ldr	r6, [pc, #212]	; (1e774 <_svfiprintf_r+0x1f8>)
   1e6a0:	7821      	ldrb	r1, [r4, #0]
   1e6a2:	2203      	movs	r2, #3
   1e6a4:	0030      	movs	r0, r6
   1e6a6:	f7fd fd2f 	bl	1c108 <memchr>
   1e6aa:	2800      	cmp	r0, #0
   1e6ac:	d006      	beq.n	1e6bc <_svfiprintf_r+0x140>
   1e6ae:	2340      	movs	r3, #64	; 0x40
   1e6b0:	1b80      	subs	r0, r0, r6
   1e6b2:	4083      	lsls	r3, r0
   1e6b4:	682a      	ldr	r2, [r5, #0]
   1e6b6:	3401      	adds	r4, #1
   1e6b8:	4313      	orrs	r3, r2
   1e6ba:	602b      	str	r3, [r5, #0]
   1e6bc:	7821      	ldrb	r1, [r4, #0]
   1e6be:	2206      	movs	r2, #6
   1e6c0:	482d      	ldr	r0, [pc, #180]	; (1e778 <_svfiprintf_r+0x1fc>)
   1e6c2:	1c66      	adds	r6, r4, #1
   1e6c4:	7629      	strb	r1, [r5, #24]
   1e6c6:	f7fd fd1f 	bl	1c108 <memchr>
   1e6ca:	2800      	cmp	r0, #0
   1e6cc:	d046      	beq.n	1e75c <_svfiprintf_r+0x1e0>
   1e6ce:	4b2b      	ldr	r3, [pc, #172]	; (1e77c <_svfiprintf_r+0x200>)
   1e6d0:	2b00      	cmp	r3, #0
   1e6d2:	d12f      	bne.n	1e734 <_svfiprintf_r+0x1b8>
   1e6d4:	6829      	ldr	r1, [r5, #0]
   1e6d6:	9b05      	ldr	r3, [sp, #20]
   1e6d8:	2207      	movs	r2, #7
   1e6da:	05c9      	lsls	r1, r1, #23
   1e6dc:	d528      	bpl.n	1e730 <_svfiprintf_r+0x1b4>
   1e6de:	189b      	adds	r3, r3, r2
   1e6e0:	4393      	bics	r3, r2
   1e6e2:	3308      	adds	r3, #8
   1e6e4:	9305      	str	r3, [sp, #20]
   1e6e6:	696b      	ldr	r3, [r5, #20]
   1e6e8:	9a03      	ldr	r2, [sp, #12]
   1e6ea:	189b      	adds	r3, r3, r2
   1e6ec:	616b      	str	r3, [r5, #20]
   1e6ee:	e767      	b.n	1e5c0 <_svfiprintf_r+0x44>
   1e6f0:	425b      	negs	r3, r3
   1e6f2:	60eb      	str	r3, [r5, #12]
   1e6f4:	2302      	movs	r3, #2
   1e6f6:	430b      	orrs	r3, r1
   1e6f8:	602b      	str	r3, [r5, #0]
   1e6fa:	e7c0      	b.n	1e67e <_svfiprintf_r+0x102>
   1e6fc:	434b      	muls	r3, r1
   1e6fe:	3401      	adds	r4, #1
   1e700:	189b      	adds	r3, r3, r2
   1e702:	2001      	movs	r0, #1
   1e704:	e7a0      	b.n	1e648 <_svfiprintf_r+0xcc>
   1e706:	2301      	movs	r3, #1
   1e708:	425b      	negs	r3, r3
   1e70a:	e7c7      	b.n	1e69c <_svfiprintf_r+0x120>
   1e70c:	2300      	movs	r3, #0
   1e70e:	0014      	movs	r4, r2
   1e710:	200a      	movs	r0, #10
   1e712:	001a      	movs	r2, r3
   1e714:	606b      	str	r3, [r5, #4]
   1e716:	7821      	ldrb	r1, [r4, #0]
   1e718:	3930      	subs	r1, #48	; 0x30
   1e71a:	2909      	cmp	r1, #9
   1e71c:	d903      	bls.n	1e726 <_svfiprintf_r+0x1aa>
   1e71e:	2b00      	cmp	r3, #0
   1e720:	d0bd      	beq.n	1e69e <_svfiprintf_r+0x122>
   1e722:	9207      	str	r2, [sp, #28]
   1e724:	e7bb      	b.n	1e69e <_svfiprintf_r+0x122>
   1e726:	4342      	muls	r2, r0
   1e728:	3401      	adds	r4, #1
   1e72a:	1852      	adds	r2, r2, r1
   1e72c:	2301      	movs	r3, #1
   1e72e:	e7f2      	b.n	1e716 <_svfiprintf_r+0x19a>
   1e730:	3307      	adds	r3, #7
   1e732:	e7d5      	b.n	1e6e0 <_svfiprintf_r+0x164>
   1e734:	ab05      	add	r3, sp, #20
   1e736:	9300      	str	r3, [sp, #0]
   1e738:	003a      	movs	r2, r7
   1e73a:	4b11      	ldr	r3, [pc, #68]	; (1e780 <_svfiprintf_r+0x204>)
   1e73c:	0029      	movs	r1, r5
   1e73e:	9802      	ldr	r0, [sp, #8]
   1e740:	e000      	b.n	1e744 <_svfiprintf_r+0x1c8>
   1e742:	bf00      	nop
   1e744:	9003      	str	r0, [sp, #12]
   1e746:	9b03      	ldr	r3, [sp, #12]
   1e748:	3301      	adds	r3, #1
   1e74a:	d1cc      	bne.n	1e6e6 <_svfiprintf_r+0x16a>
   1e74c:	89bb      	ldrh	r3, [r7, #12]
   1e74e:	980b      	ldr	r0, [sp, #44]	; 0x2c
   1e750:	065b      	lsls	r3, r3, #25
   1e752:	d400      	bmi.n	1e756 <_svfiprintf_r+0x1da>
   1e754:	e729      	b.n	1e5aa <_svfiprintf_r+0x2e>
   1e756:	2001      	movs	r0, #1
   1e758:	4240      	negs	r0, r0
   1e75a:	e726      	b.n	1e5aa <_svfiprintf_r+0x2e>
   1e75c:	ab05      	add	r3, sp, #20
   1e75e:	9300      	str	r3, [sp, #0]
   1e760:	003a      	movs	r2, r7
   1e762:	4b07      	ldr	r3, [pc, #28]	; (1e780 <_svfiprintf_r+0x204>)
   1e764:	0029      	movs	r1, r5
   1e766:	9802      	ldr	r0, [sp, #8]
   1e768:	f000 fba0 	bl	1eeac <_printf_i>
   1e76c:	e7ea      	b.n	1e744 <_svfiprintf_r+0x1c8>
   1e76e:	46c0      	nop			; (mov r8, r8)
   1e770:	00021f64 	.word	0x00021f64
   1e774:	00021f6a 	.word	0x00021f6a
   1e778:	00021f6e 	.word	0x00021f6e
   1e77c:	00000000 	.word	0x00000000
   1e780:	0001e4b9 	.word	0x0001e4b9

0001e784 <_sungetc_r>:
   1e784:	b570      	push	{r4, r5, r6, lr}
   1e786:	0014      	movs	r4, r2
   1e788:	1c4b      	adds	r3, r1, #1
   1e78a:	d103      	bne.n	1e794 <_sungetc_r+0x10>
   1e78c:	2501      	movs	r5, #1
   1e78e:	426d      	negs	r5, r5
   1e790:	0028      	movs	r0, r5
   1e792:	bd70      	pop	{r4, r5, r6, pc}
   1e794:	8993      	ldrh	r3, [r2, #12]
   1e796:	2220      	movs	r2, #32
   1e798:	4393      	bics	r3, r2
   1e79a:	6b62      	ldr	r2, [r4, #52]	; 0x34
   1e79c:	81a3      	strh	r3, [r4, #12]
   1e79e:	b2ce      	uxtb	r6, r1
   1e7a0:	b2cd      	uxtb	r5, r1
   1e7a2:	6863      	ldr	r3, [r4, #4]
   1e7a4:	2a00      	cmp	r2, #0
   1e7a6:	d010      	beq.n	1e7ca <_sungetc_r+0x46>
   1e7a8:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   1e7aa:	4293      	cmp	r3, r2
   1e7ac:	da07      	bge.n	1e7be <_sungetc_r+0x3a>
   1e7ae:	6823      	ldr	r3, [r4, #0]
   1e7b0:	3b01      	subs	r3, #1
   1e7b2:	6023      	str	r3, [r4, #0]
   1e7b4:	701e      	strb	r6, [r3, #0]
   1e7b6:	6863      	ldr	r3, [r4, #4]
   1e7b8:	3301      	adds	r3, #1
   1e7ba:	6063      	str	r3, [r4, #4]
   1e7bc:	e7e8      	b.n	1e790 <_sungetc_r+0xc>
   1e7be:	0021      	movs	r1, r4
   1e7c0:	f000 ff9c 	bl	1f6fc <__submore>
   1e7c4:	2800      	cmp	r0, #0
   1e7c6:	d0f2      	beq.n	1e7ae <_sungetc_r+0x2a>
   1e7c8:	e7e0      	b.n	1e78c <_sungetc_r+0x8>
   1e7ca:	6921      	ldr	r1, [r4, #16]
   1e7cc:	6822      	ldr	r2, [r4, #0]
   1e7ce:	2900      	cmp	r1, #0
   1e7d0:	d007      	beq.n	1e7e2 <_sungetc_r+0x5e>
   1e7d2:	4291      	cmp	r1, r2
   1e7d4:	d205      	bcs.n	1e7e2 <_sungetc_r+0x5e>
   1e7d6:	1e51      	subs	r1, r2, #1
   1e7d8:	7808      	ldrb	r0, [r1, #0]
   1e7da:	4285      	cmp	r5, r0
   1e7dc:	d101      	bne.n	1e7e2 <_sungetc_r+0x5e>
   1e7de:	6021      	str	r1, [r4, #0]
   1e7e0:	e7ea      	b.n	1e7b8 <_sungetc_r+0x34>
   1e7e2:	6423      	str	r3, [r4, #64]	; 0x40
   1e7e4:	0023      	movs	r3, r4
   1e7e6:	3344      	adds	r3, #68	; 0x44
   1e7e8:	6363      	str	r3, [r4, #52]	; 0x34
   1e7ea:	2303      	movs	r3, #3
   1e7ec:	63a3      	str	r3, [r4, #56]	; 0x38
   1e7ee:	0023      	movs	r3, r4
   1e7f0:	3346      	adds	r3, #70	; 0x46
   1e7f2:	63e2      	str	r2, [r4, #60]	; 0x3c
   1e7f4:	701e      	strb	r6, [r3, #0]
   1e7f6:	6023      	str	r3, [r4, #0]
   1e7f8:	2301      	movs	r3, #1
   1e7fa:	e7de      	b.n	1e7ba <_sungetc_r+0x36>

0001e7fc <__ssrefill_r>:
   1e7fc:	b510      	push	{r4, lr}
   1e7fe:	000c      	movs	r4, r1
   1e800:	6b49      	ldr	r1, [r1, #52]	; 0x34
   1e802:	2900      	cmp	r1, #0
   1e804:	d00e      	beq.n	1e824 <__ssrefill_r+0x28>
   1e806:	0023      	movs	r3, r4
   1e808:	3344      	adds	r3, #68	; 0x44
   1e80a:	4299      	cmp	r1, r3
   1e80c:	d001      	beq.n	1e812 <__ssrefill_r+0x16>
   1e80e:	f7fd fcb9 	bl	1c184 <_free_r>
   1e812:	2000      	movs	r0, #0
   1e814:	6c23      	ldr	r3, [r4, #64]	; 0x40
   1e816:	6360      	str	r0, [r4, #52]	; 0x34
   1e818:	6063      	str	r3, [r4, #4]
   1e81a:	4283      	cmp	r3, r0
   1e81c:	d002      	beq.n	1e824 <__ssrefill_r+0x28>
   1e81e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   1e820:	6023      	str	r3, [r4, #0]
   1e822:	bd10      	pop	{r4, pc}
   1e824:	6923      	ldr	r3, [r4, #16]
   1e826:	2001      	movs	r0, #1
   1e828:	6023      	str	r3, [r4, #0]
   1e82a:	2300      	movs	r3, #0
   1e82c:	89a2      	ldrh	r2, [r4, #12]
   1e82e:	6063      	str	r3, [r4, #4]
   1e830:	3320      	adds	r3, #32
   1e832:	4313      	orrs	r3, r2
   1e834:	81a3      	strh	r3, [r4, #12]
   1e836:	4240      	negs	r0, r0
   1e838:	e7f3      	b.n	1e822 <__ssrefill_r+0x26>
	...

0001e83c <__ssvfiscanf_r>:
   1e83c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1e83e:	4cbd      	ldr	r4, [pc, #756]	; (1eb34 <__ssvfiscanf_r+0x2f8>)
   1e840:	2586      	movs	r5, #134	; 0x86
   1e842:	44a5      	add	sp, r4
   1e844:	9303      	str	r3, [sp, #12]
   1e846:	2300      	movs	r3, #0
   1e848:	9348      	str	r3, [sp, #288]	; 0x120
   1e84a:	9349      	str	r3, [sp, #292]	; 0x124
   1e84c:	ab05      	add	r3, sp, #20
   1e84e:	934a      	str	r3, [sp, #296]	; 0x128
   1e850:	23be      	movs	r3, #190	; 0xbe
   1e852:	006d      	lsls	r5, r5, #1
   1e854:	9000      	str	r0, [sp, #0]
   1e856:	000c      	movs	r4, r1
   1e858:	a802      	add	r0, sp, #8
   1e85a:	49b7      	ldr	r1, [pc, #732]	; (1eb38 <__ssvfiscanf_r+0x2fc>)
   1e85c:	005b      	lsls	r3, r3, #1
   1e85e:	1940      	adds	r0, r0, r5
   1e860:	27c0      	movs	r7, #192	; 0xc0
   1e862:	50c1      	str	r1, [r0, r3]
   1e864:	ab02      	add	r3, sp, #8
   1e866:	195b      	adds	r3, r3, r5
   1e868:	0015      	movs	r5, r2
   1e86a:	49b4      	ldr	r1, [pc, #720]	; (1eb3c <__ssvfiscanf_r+0x300>)
   1e86c:	007f      	lsls	r7, r7, #1
   1e86e:	51d9      	str	r1, [r3, r7]
   1e870:	782b      	ldrb	r3, [r5, #0]
   1e872:	2b00      	cmp	r3, #0
   1e874:	d100      	bne.n	1e878 <__ssvfiscanf_r+0x3c>
   1e876:	e15b      	b.n	1eb30 <__ssvfiscanf_r+0x2f4>
   1e878:	f7fd fba6 	bl	1bfc8 <__locale_ctype_ptr>
   1e87c:	2208      	movs	r2, #8
   1e87e:	782b      	ldrb	r3, [r5, #0]
   1e880:	18c0      	adds	r0, r0, r3
   1e882:	9301      	str	r3, [sp, #4]
   1e884:	7843      	ldrb	r3, [r0, #1]
   1e886:	4013      	ands	r3, r2
   1e888:	d141      	bne.n	1e90e <__ssvfiscanf_r+0xd2>
   1e88a:	9a01      	ldr	r2, [sp, #4]
   1e88c:	1c6e      	adds	r6, r5, #1
   1e88e:	2a25      	cmp	r2, #37	; 0x25
   1e890:	d000      	beq.n	1e894 <__ssvfiscanf_r+0x58>
   1e892:	e0a8      	b.n	1e9e6 <__ssvfiscanf_r+0x1aa>
   1e894:	9347      	str	r3, [sp, #284]	; 0x11c
   1e896:	9345      	str	r3, [sp, #276]	; 0x114
   1e898:	786b      	ldrb	r3, [r5, #1]
   1e89a:	2b2a      	cmp	r3, #42	; 0x2a
   1e89c:	d102      	bne.n	1e8a4 <__ssvfiscanf_r+0x68>
   1e89e:	3b1a      	subs	r3, #26
   1e8a0:	9345      	str	r3, [sp, #276]	; 0x114
   1e8a2:	1cae      	adds	r6, r5, #2
   1e8a4:	0035      	movs	r5, r6
   1e8a6:	220a      	movs	r2, #10
   1e8a8:	7829      	ldrb	r1, [r5, #0]
   1e8aa:	000b      	movs	r3, r1
   1e8ac:	3b30      	subs	r3, #48	; 0x30
   1e8ae:	2b09      	cmp	r3, #9
   1e8b0:	d948      	bls.n	1e944 <__ssvfiscanf_r+0x108>
   1e8b2:	4ea3      	ldr	r6, [pc, #652]	; (1eb40 <__ssvfiscanf_r+0x304>)
   1e8b4:	2203      	movs	r2, #3
   1e8b6:	0030      	movs	r0, r6
   1e8b8:	f7fd fc26 	bl	1c108 <memchr>
   1e8bc:	2800      	cmp	r0, #0
   1e8be:	d007      	beq.n	1e8d0 <__ssvfiscanf_r+0x94>
   1e8c0:	2301      	movs	r3, #1
   1e8c2:	1b80      	subs	r0, r0, r6
   1e8c4:	4083      	lsls	r3, r0
   1e8c6:	9a45      	ldr	r2, [sp, #276]	; 0x114
   1e8c8:	3501      	adds	r5, #1
   1e8ca:	4313      	orrs	r3, r2
   1e8cc:	9202      	str	r2, [sp, #8]
   1e8ce:	9345      	str	r3, [sp, #276]	; 0x114
   1e8d0:	782b      	ldrb	r3, [r5, #0]
   1e8d2:	1c6e      	adds	r6, r5, #1
   1e8d4:	2b67      	cmp	r3, #103	; 0x67
   1e8d6:	d858      	bhi.n	1e98a <__ssvfiscanf_r+0x14e>
   1e8d8:	2b65      	cmp	r3, #101	; 0x65
   1e8da:	d300      	bcc.n	1e8de <__ssvfiscanf_r+0xa2>
   1e8dc:	e0dd      	b.n	1ea9a <__ssvfiscanf_r+0x25e>
   1e8de:	2b47      	cmp	r3, #71	; 0x47
   1e8e0:	d838      	bhi.n	1e954 <__ssvfiscanf_r+0x118>
   1e8e2:	2b45      	cmp	r3, #69	; 0x45
   1e8e4:	d300      	bcc.n	1e8e8 <__ssvfiscanf_r+0xac>
   1e8e6:	e0d8      	b.n	1ea9a <__ssvfiscanf_r+0x25e>
   1e8e8:	2b00      	cmp	r3, #0
   1e8ea:	d100      	bne.n	1e8ee <__ssvfiscanf_r+0xb2>
   1e8ec:	e11d      	b.n	1eb2a <__ssvfiscanf_r+0x2ee>
   1e8ee:	2b25      	cmp	r3, #37	; 0x25
   1e8f0:	d079      	beq.n	1e9e6 <__ssvfiscanf_r+0x1aa>
   1e8f2:	2303      	movs	r3, #3
   1e8f4:	934b      	str	r3, [sp, #300]	; 0x12c
   1e8f6:	3307      	adds	r3, #7
   1e8f8:	9346      	str	r3, [sp, #280]	; 0x118
   1e8fa:	e053      	b.n	1e9a4 <__ssvfiscanf_r+0x168>
   1e8fc:	9a49      	ldr	r2, [sp, #292]	; 0x124
   1e8fe:	3301      	adds	r3, #1
   1e900:	9201      	str	r2, [sp, #4]
   1e902:	3201      	adds	r2, #1
   1e904:	9249      	str	r2, [sp, #292]	; 0x124
   1e906:	6862      	ldr	r2, [r4, #4]
   1e908:	6023      	str	r3, [r4, #0]
   1e90a:	3a01      	subs	r2, #1
   1e90c:	6062      	str	r2, [r4, #4]
   1e90e:	6863      	ldr	r3, [r4, #4]
   1e910:	2b00      	cmp	r3, #0
   1e912:	dd0b      	ble.n	1e92c <__ssvfiscanf_r+0xf0>
   1e914:	f7fd fb58 	bl	1bfc8 <__locale_ctype_ptr>
   1e918:	2108      	movs	r1, #8
   1e91a:	6823      	ldr	r3, [r4, #0]
   1e91c:	781a      	ldrb	r2, [r3, #0]
   1e91e:	1880      	adds	r0, r0, r2
   1e920:	7842      	ldrb	r2, [r0, #1]
   1e922:	420a      	tst	r2, r1
   1e924:	d1ea      	bne.n	1e8fc <__ssvfiscanf_r+0xc0>
   1e926:	1c6e      	adds	r6, r5, #1
   1e928:	0035      	movs	r5, r6
   1e92a:	e7a1      	b.n	1e870 <__ssvfiscanf_r+0x34>
   1e92c:	2286      	movs	r2, #134	; 0x86
   1e92e:	ab02      	add	r3, sp, #8
   1e930:	0052      	lsls	r2, r2, #1
   1e932:	189b      	adds	r3, r3, r2
   1e934:	59db      	ldr	r3, [r3, r7]
   1e936:	0021      	movs	r1, r4
   1e938:	9800      	ldr	r0, [sp, #0]
   1e93a:	9301      	str	r3, [sp, #4]
   1e93c:	4798      	blx	r3
   1e93e:	2800      	cmp	r0, #0
   1e940:	d0e8      	beq.n	1e914 <__ssvfiscanf_r+0xd8>
   1e942:	e7f0      	b.n	1e926 <__ssvfiscanf_r+0xea>
   1e944:	9b47      	ldr	r3, [sp, #284]	; 0x11c
   1e946:	3501      	adds	r5, #1
   1e948:	9302      	str	r3, [sp, #8]
   1e94a:	4353      	muls	r3, r2
   1e94c:	3b30      	subs	r3, #48	; 0x30
   1e94e:	1859      	adds	r1, r3, r1
   1e950:	9147      	str	r1, [sp, #284]	; 0x11c
   1e952:	e7a9      	b.n	1e8a8 <__ssvfiscanf_r+0x6c>
   1e954:	2b5b      	cmp	r3, #91	; 0x5b
   1e956:	d100      	bne.n	1e95a <__ssvfiscanf_r+0x11e>
   1e958:	e077      	b.n	1ea4a <__ssvfiscanf_r+0x20e>
   1e95a:	d80f      	bhi.n	1e97c <__ssvfiscanf_r+0x140>
   1e95c:	2b58      	cmp	r3, #88	; 0x58
   1e95e:	d1c8      	bne.n	1e8f2 <__ssvfiscanf_r+0xb6>
   1e960:	9a45      	ldr	r2, [sp, #276]	; 0x114
   1e962:	9201      	str	r2, [sp, #4]
   1e964:	2280      	movs	r2, #128	; 0x80
   1e966:	9901      	ldr	r1, [sp, #4]
   1e968:	0092      	lsls	r2, r2, #2
   1e96a:	430a      	orrs	r2, r1
   1e96c:	9245      	str	r2, [sp, #276]	; 0x114
   1e96e:	2210      	movs	r2, #16
   1e970:	9246      	str	r2, [sp, #280]	; 0x118
   1e972:	2203      	movs	r2, #3
   1e974:	2b6e      	cmp	r3, #110	; 0x6e
   1e976:	dd14      	ble.n	1e9a2 <__ssvfiscanf_r+0x166>
   1e978:	3201      	adds	r2, #1
   1e97a:	e012      	b.n	1e9a2 <__ssvfiscanf_r+0x166>
   1e97c:	2b63      	cmp	r3, #99	; 0x63
   1e97e:	d100      	bne.n	1e982 <__ssvfiscanf_r+0x146>
   1e980:	e071      	b.n	1ea66 <__ssvfiscanf_r+0x22a>
   1e982:	2b64      	cmp	r3, #100	; 0x64
   1e984:	d1b5      	bne.n	1e8f2 <__ssvfiscanf_r+0xb6>
   1e986:	220a      	movs	r2, #10
   1e988:	e7f2      	b.n	1e970 <__ssvfiscanf_r+0x134>
   1e98a:	2b70      	cmp	r3, #112	; 0x70
   1e98c:	d052      	beq.n	1ea34 <__ssvfiscanf_r+0x1f8>
   1e98e:	d822      	bhi.n	1e9d6 <__ssvfiscanf_r+0x19a>
   1e990:	2b6e      	cmp	r3, #110	; 0x6e
   1e992:	d100      	bne.n	1e996 <__ssvfiscanf_r+0x15a>
   1e994:	e06f      	b.n	1ea76 <__ssvfiscanf_r+0x23a>
   1e996:	d854      	bhi.n	1ea42 <__ssvfiscanf_r+0x206>
   1e998:	2b69      	cmp	r3, #105	; 0x69
   1e99a:	d1aa      	bne.n	1e8f2 <__ssvfiscanf_r+0xb6>
   1e99c:	2300      	movs	r3, #0
   1e99e:	2203      	movs	r2, #3
   1e9a0:	9346      	str	r3, [sp, #280]	; 0x118
   1e9a2:	924b      	str	r2, [sp, #300]	; 0x12c
   1e9a4:	6863      	ldr	r3, [r4, #4]
   1e9a6:	2b00      	cmp	r3, #0
   1e9a8:	dc00      	bgt.n	1e9ac <__ssvfiscanf_r+0x170>
   1e9aa:	e078      	b.n	1ea9e <__ssvfiscanf_r+0x262>
   1e9ac:	9b45      	ldr	r3, [sp, #276]	; 0x114
   1e9ae:	9301      	str	r3, [sp, #4]
   1e9b0:	065b      	lsls	r3, r3, #25
   1e9b2:	d400      	bmi.n	1e9b6 <__ssvfiscanf_r+0x17a>
   1e9b4:	e08b      	b.n	1eace <__ssvfiscanf_r+0x292>
   1e9b6:	9b4b      	ldr	r3, [sp, #300]	; 0x12c
   1e9b8:	2b02      	cmp	r3, #2
   1e9ba:	dd00      	ble.n	1e9be <__ssvfiscanf_r+0x182>
   1e9bc:	e09d      	b.n	1eafa <__ssvfiscanf_r+0x2be>
   1e9be:	ab03      	add	r3, sp, #12
   1e9c0:	0022      	movs	r2, r4
   1e9c2:	a945      	add	r1, sp, #276	; 0x114
   1e9c4:	9800      	ldr	r0, [sp, #0]
   1e9c6:	f000 fb8b 	bl	1f0e0 <_scanf_chars>
   1e9ca:	2801      	cmp	r0, #1
   1e9cc:	d100      	bne.n	1e9d0 <__ssvfiscanf_r+0x194>
   1e9ce:	e0af      	b.n	1eb30 <__ssvfiscanf_r+0x2f4>
   1e9d0:	2802      	cmp	r0, #2
   1e9d2:	d1a9      	bne.n	1e928 <__ssvfiscanf_r+0xec>
   1e9d4:	e025      	b.n	1ea22 <__ssvfiscanf_r+0x1e6>
   1e9d6:	2b75      	cmp	r3, #117	; 0x75
   1e9d8:	d0d5      	beq.n	1e986 <__ssvfiscanf_r+0x14a>
   1e9da:	2b78      	cmp	r3, #120	; 0x78
   1e9dc:	d0c0      	beq.n	1e960 <__ssvfiscanf_r+0x124>
   1e9de:	2b73      	cmp	r3, #115	; 0x73
   1e9e0:	d187      	bne.n	1e8f2 <__ssvfiscanf_r+0xb6>
   1e9e2:	2302      	movs	r3, #2
   1e9e4:	e03d      	b.n	1ea62 <__ssvfiscanf_r+0x226>
   1e9e6:	6863      	ldr	r3, [r4, #4]
   1e9e8:	2b00      	cmp	r3, #0
   1e9ea:	dd0f      	ble.n	1ea0c <__ssvfiscanf_r+0x1d0>
   1e9ec:	6823      	ldr	r3, [r4, #0]
   1e9ee:	9901      	ldr	r1, [sp, #4]
   1e9f0:	781a      	ldrb	r2, [r3, #0]
   1e9f2:	4291      	cmp	r1, r2
   1e9f4:	d000      	beq.n	1e9f8 <__ssvfiscanf_r+0x1bc>
   1e9f6:	e09b      	b.n	1eb30 <__ssvfiscanf_r+0x2f4>
   1e9f8:	3301      	adds	r3, #1
   1e9fa:	6862      	ldr	r2, [r4, #4]
   1e9fc:	6023      	str	r3, [r4, #0]
   1e9fe:	9b49      	ldr	r3, [sp, #292]	; 0x124
   1ea00:	3a01      	subs	r2, #1
   1ea02:	9301      	str	r3, [sp, #4]
   1ea04:	3301      	adds	r3, #1
   1ea06:	6062      	str	r2, [r4, #4]
   1ea08:	9349      	str	r3, [sp, #292]	; 0x124
   1ea0a:	e78d      	b.n	1e928 <__ssvfiscanf_r+0xec>
   1ea0c:	2286      	movs	r2, #134	; 0x86
   1ea0e:	ab02      	add	r3, sp, #8
   1ea10:	0052      	lsls	r2, r2, #1
   1ea12:	189b      	adds	r3, r3, r2
   1ea14:	59db      	ldr	r3, [r3, r7]
   1ea16:	0021      	movs	r1, r4
   1ea18:	9800      	ldr	r0, [sp, #0]
   1ea1a:	9302      	str	r3, [sp, #8]
   1ea1c:	4798      	blx	r3
   1ea1e:	2800      	cmp	r0, #0
   1ea20:	d0e4      	beq.n	1e9ec <__ssvfiscanf_r+0x1b0>
   1ea22:	9848      	ldr	r0, [sp, #288]	; 0x120
   1ea24:	2800      	cmp	r0, #0
   1ea26:	d000      	beq.n	1ea2a <__ssvfiscanf_r+0x1ee>
   1ea28:	e07b      	b.n	1eb22 <__ssvfiscanf_r+0x2e6>
   1ea2a:	3801      	subs	r0, #1
   1ea2c:	23a7      	movs	r3, #167	; 0xa7
   1ea2e:	009b      	lsls	r3, r3, #2
   1ea30:	449d      	add	sp, r3
   1ea32:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1ea34:	9a45      	ldr	r2, [sp, #276]	; 0x114
   1ea36:	9201      	str	r2, [sp, #4]
   1ea38:	2220      	movs	r2, #32
   1ea3a:	9901      	ldr	r1, [sp, #4]
   1ea3c:	430a      	orrs	r2, r1
   1ea3e:	9245      	str	r2, [sp, #276]	; 0x114
   1ea40:	e78e      	b.n	1e960 <__ssvfiscanf_r+0x124>
   1ea42:	2308      	movs	r3, #8
   1ea44:	2204      	movs	r2, #4
   1ea46:	9346      	str	r3, [sp, #280]	; 0x118
   1ea48:	e7ab      	b.n	1e9a2 <__ssvfiscanf_r+0x166>
   1ea4a:	0031      	movs	r1, r6
   1ea4c:	a805      	add	r0, sp, #20
   1ea4e:	f000 fcf5 	bl	1f43c <__sccl>
   1ea52:	9b45      	ldr	r3, [sp, #276]	; 0x114
   1ea54:	0006      	movs	r6, r0
   1ea56:	9301      	str	r3, [sp, #4]
   1ea58:	2340      	movs	r3, #64	; 0x40
   1ea5a:	9a01      	ldr	r2, [sp, #4]
   1ea5c:	4313      	orrs	r3, r2
   1ea5e:	9345      	str	r3, [sp, #276]	; 0x114
   1ea60:	2301      	movs	r3, #1
   1ea62:	934b      	str	r3, [sp, #300]	; 0x12c
   1ea64:	e79e      	b.n	1e9a4 <__ssvfiscanf_r+0x168>
   1ea66:	9b45      	ldr	r3, [sp, #276]	; 0x114
   1ea68:	9301      	str	r3, [sp, #4]
   1ea6a:	2340      	movs	r3, #64	; 0x40
   1ea6c:	9a01      	ldr	r2, [sp, #4]
   1ea6e:	4313      	orrs	r3, r2
   1ea70:	9345      	str	r3, [sp, #276]	; 0x114
   1ea72:	2300      	movs	r3, #0
   1ea74:	e7f5      	b.n	1ea62 <__ssvfiscanf_r+0x226>
   1ea76:	9945      	ldr	r1, [sp, #276]	; 0x114
   1ea78:	06cb      	lsls	r3, r1, #27
   1ea7a:	d500      	bpl.n	1ea7e <__ssvfiscanf_r+0x242>
   1ea7c:	e754      	b.n	1e928 <__ssvfiscanf_r+0xec>
   1ea7e:	9b03      	ldr	r3, [sp, #12]
   1ea80:	9a49      	ldr	r2, [sp, #292]	; 0x124
   1ea82:	07c8      	lsls	r0, r1, #31
   1ea84:	d504      	bpl.n	1ea90 <__ssvfiscanf_r+0x254>
   1ea86:	1d19      	adds	r1, r3, #4
   1ea88:	9103      	str	r1, [sp, #12]
   1ea8a:	681b      	ldr	r3, [r3, #0]
   1ea8c:	801a      	strh	r2, [r3, #0]
   1ea8e:	e74b      	b.n	1e928 <__ssvfiscanf_r+0xec>
   1ea90:	1d19      	adds	r1, r3, #4
   1ea92:	9103      	str	r1, [sp, #12]
   1ea94:	681b      	ldr	r3, [r3, #0]
   1ea96:	601a      	str	r2, [r3, #0]
   1ea98:	e746      	b.n	1e928 <__ssvfiscanf_r+0xec>
   1ea9a:	2305      	movs	r3, #5
   1ea9c:	e7e1      	b.n	1ea62 <__ssvfiscanf_r+0x226>
   1ea9e:	2286      	movs	r2, #134	; 0x86
   1eaa0:	ab02      	add	r3, sp, #8
   1eaa2:	0052      	lsls	r2, r2, #1
   1eaa4:	189b      	adds	r3, r3, r2
   1eaa6:	59db      	ldr	r3, [r3, r7]
   1eaa8:	0021      	movs	r1, r4
   1eaaa:	9800      	ldr	r0, [sp, #0]
   1eaac:	9301      	str	r3, [sp, #4]
   1eaae:	4798      	blx	r3
   1eab0:	2800      	cmp	r0, #0
   1eab2:	d100      	bne.n	1eab6 <__ssvfiscanf_r+0x27a>
   1eab4:	e77a      	b.n	1e9ac <__ssvfiscanf_r+0x170>
   1eab6:	e7b4      	b.n	1ea22 <__ssvfiscanf_r+0x1e6>
   1eab8:	9a49      	ldr	r2, [sp, #292]	; 0x124
   1eaba:	9201      	str	r2, [sp, #4]
   1eabc:	3201      	adds	r2, #1
   1eabe:	9249      	str	r2, [sp, #292]	; 0x124
   1eac0:	6862      	ldr	r2, [r4, #4]
   1eac2:	3a01      	subs	r2, #1
   1eac4:	6062      	str	r2, [r4, #4]
   1eac6:	2a00      	cmp	r2, #0
   1eac8:	dd0b      	ble.n	1eae2 <__ssvfiscanf_r+0x2a6>
   1eaca:	3301      	adds	r3, #1
   1eacc:	6023      	str	r3, [r4, #0]
   1eace:	f7fd fa7b 	bl	1bfc8 <__locale_ctype_ptr>
   1ead2:	2108      	movs	r1, #8
   1ead4:	6823      	ldr	r3, [r4, #0]
   1ead6:	781a      	ldrb	r2, [r3, #0]
   1ead8:	1880      	adds	r0, r0, r2
   1eada:	7842      	ldrb	r2, [r0, #1]
   1eadc:	420a      	tst	r2, r1
   1eade:	d1eb      	bne.n	1eab8 <__ssvfiscanf_r+0x27c>
   1eae0:	e769      	b.n	1e9b6 <__ssvfiscanf_r+0x17a>
   1eae2:	2286      	movs	r2, #134	; 0x86
   1eae4:	ab02      	add	r3, sp, #8
   1eae6:	0052      	lsls	r2, r2, #1
   1eae8:	189b      	adds	r3, r3, r2
   1eaea:	59db      	ldr	r3, [r3, r7]
   1eaec:	0021      	movs	r1, r4
   1eaee:	9800      	ldr	r0, [sp, #0]
   1eaf0:	9301      	str	r3, [sp, #4]
   1eaf2:	4798      	blx	r3
   1eaf4:	2800      	cmp	r0, #0
   1eaf6:	d0ea      	beq.n	1eace <__ssvfiscanf_r+0x292>
   1eaf8:	e793      	b.n	1ea22 <__ssvfiscanf_r+0x1e6>
   1eafa:	2b04      	cmp	r3, #4
   1eafc:	dc06      	bgt.n	1eb0c <__ssvfiscanf_r+0x2d0>
   1eafe:	ab03      	add	r3, sp, #12
   1eb00:	0022      	movs	r2, r4
   1eb02:	a945      	add	r1, sp, #276	; 0x114
   1eb04:	9800      	ldr	r0, [sp, #0]
   1eb06:	f000 fb4f 	bl	1f1a8 <_scanf_i>
   1eb0a:	e75e      	b.n	1e9ca <__ssvfiscanf_r+0x18e>
   1eb0c:	4b0d      	ldr	r3, [pc, #52]	; (1eb44 <__ssvfiscanf_r+0x308>)
   1eb0e:	2b00      	cmp	r3, #0
   1eb10:	d100      	bne.n	1eb14 <__ssvfiscanf_r+0x2d8>
   1eb12:	e709      	b.n	1e928 <__ssvfiscanf_r+0xec>
   1eb14:	ab03      	add	r3, sp, #12
   1eb16:	0022      	movs	r2, r4
   1eb18:	a945      	add	r1, sp, #276	; 0x114
   1eb1a:	9800      	ldr	r0, [sp, #0]
   1eb1c:	e000      	b.n	1eb20 <__ssvfiscanf_r+0x2e4>
   1eb1e:	bf00      	nop
   1eb20:	e753      	b.n	1e9ca <__ssvfiscanf_r+0x18e>
   1eb22:	89a3      	ldrh	r3, [r4, #12]
   1eb24:	065b      	lsls	r3, r3, #25
   1eb26:	d400      	bmi.n	1eb2a <__ssvfiscanf_r+0x2ee>
   1eb28:	e780      	b.n	1ea2c <__ssvfiscanf_r+0x1f0>
   1eb2a:	2001      	movs	r0, #1
   1eb2c:	4240      	negs	r0, r0
   1eb2e:	e77d      	b.n	1ea2c <__ssvfiscanf_r+0x1f0>
   1eb30:	9848      	ldr	r0, [sp, #288]	; 0x120
   1eb32:	e77b      	b.n	1ea2c <__ssvfiscanf_r+0x1f0>
   1eb34:	fffffd64 	.word	0xfffffd64
   1eb38:	0001e785 	.word	0x0001e785
   1eb3c:	0001e7fd 	.word	0x0001e7fd
   1eb40:	00021f6a 	.word	0x00021f6a
   1eb44:	00000000 	.word	0x00000000

0001eb48 <__sfputc_r>:
   1eb48:	6893      	ldr	r3, [r2, #8]
   1eb4a:	b510      	push	{r4, lr}
   1eb4c:	3b01      	subs	r3, #1
   1eb4e:	6093      	str	r3, [r2, #8]
   1eb50:	2b00      	cmp	r3, #0
   1eb52:	da05      	bge.n	1eb60 <__sfputc_r+0x18>
   1eb54:	6994      	ldr	r4, [r2, #24]
   1eb56:	42a3      	cmp	r3, r4
   1eb58:	db08      	blt.n	1eb6c <__sfputc_r+0x24>
   1eb5a:	b2cb      	uxtb	r3, r1
   1eb5c:	2b0a      	cmp	r3, #10
   1eb5e:	d005      	beq.n	1eb6c <__sfputc_r+0x24>
   1eb60:	6813      	ldr	r3, [r2, #0]
   1eb62:	1c58      	adds	r0, r3, #1
   1eb64:	6010      	str	r0, [r2, #0]
   1eb66:	7019      	strb	r1, [r3, #0]
   1eb68:	b2c8      	uxtb	r0, r1
   1eb6a:	bd10      	pop	{r4, pc}
   1eb6c:	f7fe fc3c 	bl	1d3e8 <__swbuf_r>
   1eb70:	e7fb      	b.n	1eb6a <__sfputc_r+0x22>

0001eb72 <__sfputs_r>:
   1eb72:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1eb74:	0006      	movs	r6, r0
   1eb76:	000f      	movs	r7, r1
   1eb78:	0014      	movs	r4, r2
   1eb7a:	18d5      	adds	r5, r2, r3
   1eb7c:	42ac      	cmp	r4, r5
   1eb7e:	d101      	bne.n	1eb84 <__sfputs_r+0x12>
   1eb80:	2000      	movs	r0, #0
   1eb82:	e007      	b.n	1eb94 <__sfputs_r+0x22>
   1eb84:	7821      	ldrb	r1, [r4, #0]
   1eb86:	003a      	movs	r2, r7
   1eb88:	0030      	movs	r0, r6
   1eb8a:	f7ff ffdd 	bl	1eb48 <__sfputc_r>
   1eb8e:	3401      	adds	r4, #1
   1eb90:	1c43      	adds	r3, r0, #1
   1eb92:	d1f3      	bne.n	1eb7c <__sfputs_r+0xa>
   1eb94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0001eb98 <_vfiprintf_r>:
   1eb98:	b5f0      	push	{r4, r5, r6, r7, lr}
   1eb9a:	b09f      	sub	sp, #124	; 0x7c
   1eb9c:	0006      	movs	r6, r0
   1eb9e:	000f      	movs	r7, r1
   1eba0:	0014      	movs	r4, r2
   1eba2:	9305      	str	r3, [sp, #20]
   1eba4:	2800      	cmp	r0, #0
   1eba6:	d004      	beq.n	1ebb2 <_vfiprintf_r+0x1a>
   1eba8:	6983      	ldr	r3, [r0, #24]
   1ebaa:	2b00      	cmp	r3, #0
   1ebac:	d101      	bne.n	1ebb2 <_vfiprintf_r+0x1a>
   1ebae:	f7fd f94d 	bl	1be4c <__sinit>
   1ebb2:	4b7f      	ldr	r3, [pc, #508]	; (1edb0 <_vfiprintf_r+0x218>)
   1ebb4:	429f      	cmp	r7, r3
   1ebb6:	d15c      	bne.n	1ec72 <_vfiprintf_r+0xda>
   1ebb8:	6877      	ldr	r7, [r6, #4]
   1ebba:	89bb      	ldrh	r3, [r7, #12]
   1ebbc:	071b      	lsls	r3, r3, #28
   1ebbe:	d562      	bpl.n	1ec86 <_vfiprintf_r+0xee>
   1ebc0:	693b      	ldr	r3, [r7, #16]
   1ebc2:	2b00      	cmp	r3, #0
   1ebc4:	d05f      	beq.n	1ec86 <_vfiprintf_r+0xee>
   1ebc6:	2300      	movs	r3, #0
   1ebc8:	ad06      	add	r5, sp, #24
   1ebca:	616b      	str	r3, [r5, #20]
   1ebcc:	3320      	adds	r3, #32
   1ebce:	766b      	strb	r3, [r5, #25]
   1ebd0:	3310      	adds	r3, #16
   1ebd2:	76ab      	strb	r3, [r5, #26]
   1ebd4:	9402      	str	r4, [sp, #8]
   1ebd6:	9c02      	ldr	r4, [sp, #8]
   1ebd8:	7823      	ldrb	r3, [r4, #0]
   1ebda:	2b00      	cmp	r3, #0
   1ebdc:	d15d      	bne.n	1ec9a <_vfiprintf_r+0x102>
   1ebde:	9b02      	ldr	r3, [sp, #8]
   1ebe0:	1ae3      	subs	r3, r4, r3
   1ebe2:	9304      	str	r3, [sp, #16]
   1ebe4:	d00d      	beq.n	1ec02 <_vfiprintf_r+0x6a>
   1ebe6:	9b04      	ldr	r3, [sp, #16]
   1ebe8:	9a02      	ldr	r2, [sp, #8]
   1ebea:	0039      	movs	r1, r7
   1ebec:	0030      	movs	r0, r6
   1ebee:	f7ff ffc0 	bl	1eb72 <__sfputs_r>
   1ebf2:	1c43      	adds	r3, r0, #1
   1ebf4:	d100      	bne.n	1ebf8 <_vfiprintf_r+0x60>
   1ebf6:	e0cc      	b.n	1ed92 <_vfiprintf_r+0x1fa>
   1ebf8:	696a      	ldr	r2, [r5, #20]
   1ebfa:	9b04      	ldr	r3, [sp, #16]
   1ebfc:	4694      	mov	ip, r2
   1ebfe:	4463      	add	r3, ip
   1ec00:	616b      	str	r3, [r5, #20]
   1ec02:	7823      	ldrb	r3, [r4, #0]
   1ec04:	2b00      	cmp	r3, #0
   1ec06:	d100      	bne.n	1ec0a <_vfiprintf_r+0x72>
   1ec08:	e0c3      	b.n	1ed92 <_vfiprintf_r+0x1fa>
   1ec0a:	2201      	movs	r2, #1
   1ec0c:	2300      	movs	r3, #0
   1ec0e:	4252      	negs	r2, r2
   1ec10:	606a      	str	r2, [r5, #4]
   1ec12:	a902      	add	r1, sp, #8
   1ec14:	3254      	adds	r2, #84	; 0x54
   1ec16:	1852      	adds	r2, r2, r1
   1ec18:	3401      	adds	r4, #1
   1ec1a:	602b      	str	r3, [r5, #0]
   1ec1c:	60eb      	str	r3, [r5, #12]
   1ec1e:	60ab      	str	r3, [r5, #8]
   1ec20:	7013      	strb	r3, [r2, #0]
   1ec22:	65ab      	str	r3, [r5, #88]	; 0x58
   1ec24:	7821      	ldrb	r1, [r4, #0]
   1ec26:	2205      	movs	r2, #5
   1ec28:	4862      	ldr	r0, [pc, #392]	; (1edb4 <_vfiprintf_r+0x21c>)
   1ec2a:	f7fd fa6d 	bl	1c108 <memchr>
   1ec2e:	1c63      	adds	r3, r4, #1
   1ec30:	469c      	mov	ip, r3
   1ec32:	2800      	cmp	r0, #0
   1ec34:	d135      	bne.n	1eca2 <_vfiprintf_r+0x10a>
   1ec36:	6829      	ldr	r1, [r5, #0]
   1ec38:	06cb      	lsls	r3, r1, #27
   1ec3a:	d504      	bpl.n	1ec46 <_vfiprintf_r+0xae>
   1ec3c:	2353      	movs	r3, #83	; 0x53
   1ec3e:	aa02      	add	r2, sp, #8
   1ec40:	3020      	adds	r0, #32
   1ec42:	189b      	adds	r3, r3, r2
   1ec44:	7018      	strb	r0, [r3, #0]
   1ec46:	070b      	lsls	r3, r1, #28
   1ec48:	d504      	bpl.n	1ec54 <_vfiprintf_r+0xbc>
   1ec4a:	2353      	movs	r3, #83	; 0x53
   1ec4c:	202b      	movs	r0, #43	; 0x2b
   1ec4e:	aa02      	add	r2, sp, #8
   1ec50:	189b      	adds	r3, r3, r2
   1ec52:	7018      	strb	r0, [r3, #0]
   1ec54:	7823      	ldrb	r3, [r4, #0]
   1ec56:	2b2a      	cmp	r3, #42	; 0x2a
   1ec58:	d02c      	beq.n	1ecb4 <_vfiprintf_r+0x11c>
   1ec5a:	2000      	movs	r0, #0
   1ec5c:	210a      	movs	r1, #10
   1ec5e:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1ec60:	7822      	ldrb	r2, [r4, #0]
   1ec62:	3a30      	subs	r2, #48	; 0x30
   1ec64:	2a09      	cmp	r2, #9
   1ec66:	d800      	bhi.n	1ec6a <_vfiprintf_r+0xd2>
   1ec68:	e06b      	b.n	1ed42 <_vfiprintf_r+0x1aa>
   1ec6a:	2800      	cmp	r0, #0
   1ec6c:	d02a      	beq.n	1ecc4 <_vfiprintf_r+0x12c>
   1ec6e:	9309      	str	r3, [sp, #36]	; 0x24
   1ec70:	e028      	b.n	1ecc4 <_vfiprintf_r+0x12c>
   1ec72:	4b51      	ldr	r3, [pc, #324]	; (1edb8 <_vfiprintf_r+0x220>)
   1ec74:	429f      	cmp	r7, r3
   1ec76:	d101      	bne.n	1ec7c <_vfiprintf_r+0xe4>
   1ec78:	68b7      	ldr	r7, [r6, #8]
   1ec7a:	e79e      	b.n	1ebba <_vfiprintf_r+0x22>
   1ec7c:	4b4f      	ldr	r3, [pc, #316]	; (1edbc <_vfiprintf_r+0x224>)
   1ec7e:	429f      	cmp	r7, r3
   1ec80:	d19b      	bne.n	1ebba <_vfiprintf_r+0x22>
   1ec82:	68f7      	ldr	r7, [r6, #12]
   1ec84:	e799      	b.n	1ebba <_vfiprintf_r+0x22>
   1ec86:	0039      	movs	r1, r7
   1ec88:	0030      	movs	r0, r6
   1ec8a:	f7fe fc23 	bl	1d4d4 <__swsetup_r>
   1ec8e:	2800      	cmp	r0, #0
   1ec90:	d099      	beq.n	1ebc6 <_vfiprintf_r+0x2e>
   1ec92:	2001      	movs	r0, #1
   1ec94:	4240      	negs	r0, r0
   1ec96:	b01f      	add	sp, #124	; 0x7c
   1ec98:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1ec9a:	2b25      	cmp	r3, #37	; 0x25
   1ec9c:	d09f      	beq.n	1ebde <_vfiprintf_r+0x46>
   1ec9e:	3401      	adds	r4, #1
   1eca0:	e79a      	b.n	1ebd8 <_vfiprintf_r+0x40>
   1eca2:	4b44      	ldr	r3, [pc, #272]	; (1edb4 <_vfiprintf_r+0x21c>)
   1eca4:	6829      	ldr	r1, [r5, #0]
   1eca6:	1ac0      	subs	r0, r0, r3
   1eca8:	2301      	movs	r3, #1
   1ecaa:	4083      	lsls	r3, r0
   1ecac:	430b      	orrs	r3, r1
   1ecae:	602b      	str	r3, [r5, #0]
   1ecb0:	4664      	mov	r4, ip
   1ecb2:	e7b7      	b.n	1ec24 <_vfiprintf_r+0x8c>
   1ecb4:	9b05      	ldr	r3, [sp, #20]
   1ecb6:	1d18      	adds	r0, r3, #4
   1ecb8:	681b      	ldr	r3, [r3, #0]
   1ecba:	9005      	str	r0, [sp, #20]
   1ecbc:	2b00      	cmp	r3, #0
   1ecbe:	db3a      	blt.n	1ed36 <_vfiprintf_r+0x19e>
   1ecc0:	9309      	str	r3, [sp, #36]	; 0x24
   1ecc2:	4664      	mov	r4, ip
   1ecc4:	7823      	ldrb	r3, [r4, #0]
   1ecc6:	2b2e      	cmp	r3, #46	; 0x2e
   1ecc8:	d10b      	bne.n	1ece2 <_vfiprintf_r+0x14a>
   1ecca:	7863      	ldrb	r3, [r4, #1]
   1eccc:	1c62      	adds	r2, r4, #1
   1ecce:	2b2a      	cmp	r3, #42	; 0x2a
   1ecd0:	d13f      	bne.n	1ed52 <_vfiprintf_r+0x1ba>
   1ecd2:	9b05      	ldr	r3, [sp, #20]
   1ecd4:	3402      	adds	r4, #2
   1ecd6:	1d1a      	adds	r2, r3, #4
   1ecd8:	681b      	ldr	r3, [r3, #0]
   1ecda:	9205      	str	r2, [sp, #20]
   1ecdc:	2b00      	cmp	r3, #0
   1ecde:	db35      	blt.n	1ed4c <_vfiprintf_r+0x1b4>
   1ece0:	9307      	str	r3, [sp, #28]
   1ece2:	7821      	ldrb	r1, [r4, #0]
   1ece4:	2203      	movs	r2, #3
   1ece6:	4836      	ldr	r0, [pc, #216]	; (1edc0 <_vfiprintf_r+0x228>)
   1ece8:	f7fd fa0e 	bl	1c108 <memchr>
   1ecec:	2800      	cmp	r0, #0
   1ecee:	d007      	beq.n	1ed00 <_vfiprintf_r+0x168>
   1ecf0:	4b33      	ldr	r3, [pc, #204]	; (1edc0 <_vfiprintf_r+0x228>)
   1ecf2:	682a      	ldr	r2, [r5, #0]
   1ecf4:	1ac0      	subs	r0, r0, r3
   1ecf6:	2340      	movs	r3, #64	; 0x40
   1ecf8:	4083      	lsls	r3, r0
   1ecfa:	4313      	orrs	r3, r2
   1ecfc:	602b      	str	r3, [r5, #0]
   1ecfe:	3401      	adds	r4, #1
   1ed00:	7821      	ldrb	r1, [r4, #0]
   1ed02:	1c63      	adds	r3, r4, #1
   1ed04:	2206      	movs	r2, #6
   1ed06:	482f      	ldr	r0, [pc, #188]	; (1edc4 <_vfiprintf_r+0x22c>)
   1ed08:	9302      	str	r3, [sp, #8]
   1ed0a:	7629      	strb	r1, [r5, #24]
   1ed0c:	f7fd f9fc 	bl	1c108 <memchr>
   1ed10:	2800      	cmp	r0, #0
   1ed12:	d044      	beq.n	1ed9e <_vfiprintf_r+0x206>
   1ed14:	4b2c      	ldr	r3, [pc, #176]	; (1edc8 <_vfiprintf_r+0x230>)
   1ed16:	2b00      	cmp	r3, #0
   1ed18:	d12f      	bne.n	1ed7a <_vfiprintf_r+0x1e2>
   1ed1a:	6829      	ldr	r1, [r5, #0]
   1ed1c:	9b05      	ldr	r3, [sp, #20]
   1ed1e:	2207      	movs	r2, #7
   1ed20:	05c9      	lsls	r1, r1, #23
   1ed22:	d528      	bpl.n	1ed76 <_vfiprintf_r+0x1de>
   1ed24:	189b      	adds	r3, r3, r2
   1ed26:	4393      	bics	r3, r2
   1ed28:	3308      	adds	r3, #8
   1ed2a:	9305      	str	r3, [sp, #20]
   1ed2c:	696b      	ldr	r3, [r5, #20]
   1ed2e:	9a03      	ldr	r2, [sp, #12]
   1ed30:	189b      	adds	r3, r3, r2
   1ed32:	616b      	str	r3, [r5, #20]
   1ed34:	e74f      	b.n	1ebd6 <_vfiprintf_r+0x3e>
   1ed36:	425b      	negs	r3, r3
   1ed38:	60eb      	str	r3, [r5, #12]
   1ed3a:	2302      	movs	r3, #2
   1ed3c:	430b      	orrs	r3, r1
   1ed3e:	602b      	str	r3, [r5, #0]
   1ed40:	e7bf      	b.n	1ecc2 <_vfiprintf_r+0x12a>
   1ed42:	434b      	muls	r3, r1
   1ed44:	3401      	adds	r4, #1
   1ed46:	189b      	adds	r3, r3, r2
   1ed48:	2001      	movs	r0, #1
   1ed4a:	e789      	b.n	1ec60 <_vfiprintf_r+0xc8>
   1ed4c:	2301      	movs	r3, #1
   1ed4e:	425b      	negs	r3, r3
   1ed50:	e7c6      	b.n	1ece0 <_vfiprintf_r+0x148>
   1ed52:	2300      	movs	r3, #0
   1ed54:	0014      	movs	r4, r2
   1ed56:	200a      	movs	r0, #10
   1ed58:	001a      	movs	r2, r3
   1ed5a:	606b      	str	r3, [r5, #4]
   1ed5c:	7821      	ldrb	r1, [r4, #0]
   1ed5e:	3930      	subs	r1, #48	; 0x30
   1ed60:	2909      	cmp	r1, #9
   1ed62:	d903      	bls.n	1ed6c <_vfiprintf_r+0x1d4>
   1ed64:	2b00      	cmp	r3, #0
   1ed66:	d0bc      	beq.n	1ece2 <_vfiprintf_r+0x14a>
   1ed68:	9207      	str	r2, [sp, #28]
   1ed6a:	e7ba      	b.n	1ece2 <_vfiprintf_r+0x14a>
   1ed6c:	4342      	muls	r2, r0
   1ed6e:	3401      	adds	r4, #1
   1ed70:	1852      	adds	r2, r2, r1
   1ed72:	2301      	movs	r3, #1
   1ed74:	e7f2      	b.n	1ed5c <_vfiprintf_r+0x1c4>
   1ed76:	3307      	adds	r3, #7
   1ed78:	e7d5      	b.n	1ed26 <_vfiprintf_r+0x18e>
   1ed7a:	ab05      	add	r3, sp, #20
   1ed7c:	9300      	str	r3, [sp, #0]
   1ed7e:	003a      	movs	r2, r7
   1ed80:	4b12      	ldr	r3, [pc, #72]	; (1edcc <_vfiprintf_r+0x234>)
   1ed82:	0029      	movs	r1, r5
   1ed84:	0030      	movs	r0, r6
   1ed86:	e000      	b.n	1ed8a <_vfiprintf_r+0x1f2>
   1ed88:	bf00      	nop
   1ed8a:	9003      	str	r0, [sp, #12]
   1ed8c:	9b03      	ldr	r3, [sp, #12]
   1ed8e:	3301      	adds	r3, #1
   1ed90:	d1cc      	bne.n	1ed2c <_vfiprintf_r+0x194>
   1ed92:	89bb      	ldrh	r3, [r7, #12]
   1ed94:	065b      	lsls	r3, r3, #25
   1ed96:	d500      	bpl.n	1ed9a <_vfiprintf_r+0x202>
   1ed98:	e77b      	b.n	1ec92 <_vfiprintf_r+0xfa>
   1ed9a:	980b      	ldr	r0, [sp, #44]	; 0x2c
   1ed9c:	e77b      	b.n	1ec96 <_vfiprintf_r+0xfe>
   1ed9e:	ab05      	add	r3, sp, #20
   1eda0:	9300      	str	r3, [sp, #0]
   1eda2:	003a      	movs	r2, r7
   1eda4:	4b09      	ldr	r3, [pc, #36]	; (1edcc <_vfiprintf_r+0x234>)
   1eda6:	0029      	movs	r1, r5
   1eda8:	0030      	movs	r0, r6
   1edaa:	f000 f87f 	bl	1eeac <_printf_i>
   1edae:	e7ec      	b.n	1ed8a <_vfiprintf_r+0x1f2>
   1edb0:	00021cb0 	.word	0x00021cb0
   1edb4:	00021f64 	.word	0x00021f64
   1edb8:	00021cd0 	.word	0x00021cd0
   1edbc:	00021c90 	.word	0x00021c90
   1edc0:	00021f6a 	.word	0x00021f6a
   1edc4:	00021f6e 	.word	0x00021f6e
   1edc8:	00000000 	.word	0x00000000
   1edcc:	0001eb73 	.word	0x0001eb73

0001edd0 <_printf_common>:
   1edd0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1edd2:	0015      	movs	r5, r2
   1edd4:	9301      	str	r3, [sp, #4]
   1edd6:	688a      	ldr	r2, [r1, #8]
   1edd8:	690b      	ldr	r3, [r1, #16]
   1edda:	9000      	str	r0, [sp, #0]
   1eddc:	000c      	movs	r4, r1
   1edde:	4293      	cmp	r3, r2
   1ede0:	da00      	bge.n	1ede4 <_printf_common+0x14>
   1ede2:	0013      	movs	r3, r2
   1ede4:	0022      	movs	r2, r4
   1ede6:	602b      	str	r3, [r5, #0]
   1ede8:	3243      	adds	r2, #67	; 0x43
   1edea:	7812      	ldrb	r2, [r2, #0]
   1edec:	2a00      	cmp	r2, #0
   1edee:	d001      	beq.n	1edf4 <_printf_common+0x24>
   1edf0:	3301      	adds	r3, #1
   1edf2:	602b      	str	r3, [r5, #0]
   1edf4:	6823      	ldr	r3, [r4, #0]
   1edf6:	069b      	lsls	r3, r3, #26
   1edf8:	d502      	bpl.n	1ee00 <_printf_common+0x30>
   1edfa:	682b      	ldr	r3, [r5, #0]
   1edfc:	3302      	adds	r3, #2
   1edfe:	602b      	str	r3, [r5, #0]
   1ee00:	2706      	movs	r7, #6
   1ee02:	6823      	ldr	r3, [r4, #0]
   1ee04:	401f      	ands	r7, r3
   1ee06:	d027      	beq.n	1ee58 <_printf_common+0x88>
   1ee08:	0023      	movs	r3, r4
   1ee0a:	3343      	adds	r3, #67	; 0x43
   1ee0c:	781b      	ldrb	r3, [r3, #0]
   1ee0e:	1e5a      	subs	r2, r3, #1
   1ee10:	4193      	sbcs	r3, r2
   1ee12:	6822      	ldr	r2, [r4, #0]
   1ee14:	0692      	lsls	r2, r2, #26
   1ee16:	d430      	bmi.n	1ee7a <_printf_common+0xaa>
   1ee18:	0022      	movs	r2, r4
   1ee1a:	9901      	ldr	r1, [sp, #4]
   1ee1c:	3243      	adds	r2, #67	; 0x43
   1ee1e:	9800      	ldr	r0, [sp, #0]
   1ee20:	9e08      	ldr	r6, [sp, #32]
   1ee22:	47b0      	blx	r6
   1ee24:	1c43      	adds	r3, r0, #1
   1ee26:	d025      	beq.n	1ee74 <_printf_common+0xa4>
   1ee28:	2306      	movs	r3, #6
   1ee2a:	6820      	ldr	r0, [r4, #0]
   1ee2c:	682a      	ldr	r2, [r5, #0]
   1ee2e:	68e1      	ldr	r1, [r4, #12]
   1ee30:	4003      	ands	r3, r0
   1ee32:	2500      	movs	r5, #0
   1ee34:	2b04      	cmp	r3, #4
   1ee36:	d103      	bne.n	1ee40 <_printf_common+0x70>
   1ee38:	1a8d      	subs	r5, r1, r2
   1ee3a:	43eb      	mvns	r3, r5
   1ee3c:	17db      	asrs	r3, r3, #31
   1ee3e:	401d      	ands	r5, r3
   1ee40:	68a3      	ldr	r3, [r4, #8]
   1ee42:	6922      	ldr	r2, [r4, #16]
   1ee44:	4293      	cmp	r3, r2
   1ee46:	dd01      	ble.n	1ee4c <_printf_common+0x7c>
   1ee48:	1a9b      	subs	r3, r3, r2
   1ee4a:	18ed      	adds	r5, r5, r3
   1ee4c:	2700      	movs	r7, #0
   1ee4e:	42bd      	cmp	r5, r7
   1ee50:	d120      	bne.n	1ee94 <_printf_common+0xc4>
   1ee52:	2000      	movs	r0, #0
   1ee54:	e010      	b.n	1ee78 <_printf_common+0xa8>
   1ee56:	3701      	adds	r7, #1
   1ee58:	68e3      	ldr	r3, [r4, #12]
   1ee5a:	682a      	ldr	r2, [r5, #0]
   1ee5c:	1a9b      	subs	r3, r3, r2
   1ee5e:	429f      	cmp	r7, r3
   1ee60:	dad2      	bge.n	1ee08 <_printf_common+0x38>
   1ee62:	0022      	movs	r2, r4
   1ee64:	2301      	movs	r3, #1
   1ee66:	3219      	adds	r2, #25
   1ee68:	9901      	ldr	r1, [sp, #4]
   1ee6a:	9800      	ldr	r0, [sp, #0]
   1ee6c:	9e08      	ldr	r6, [sp, #32]
   1ee6e:	47b0      	blx	r6
   1ee70:	1c43      	adds	r3, r0, #1
   1ee72:	d1f0      	bne.n	1ee56 <_printf_common+0x86>
   1ee74:	2001      	movs	r0, #1
   1ee76:	4240      	negs	r0, r0
   1ee78:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   1ee7a:	2030      	movs	r0, #48	; 0x30
   1ee7c:	18e1      	adds	r1, r4, r3
   1ee7e:	3143      	adds	r1, #67	; 0x43
   1ee80:	7008      	strb	r0, [r1, #0]
   1ee82:	0021      	movs	r1, r4
   1ee84:	1c5a      	adds	r2, r3, #1
   1ee86:	3145      	adds	r1, #69	; 0x45
   1ee88:	7809      	ldrb	r1, [r1, #0]
   1ee8a:	18a2      	adds	r2, r4, r2
   1ee8c:	3243      	adds	r2, #67	; 0x43
   1ee8e:	3302      	adds	r3, #2
   1ee90:	7011      	strb	r1, [r2, #0]
   1ee92:	e7c1      	b.n	1ee18 <_printf_common+0x48>
   1ee94:	0022      	movs	r2, r4
   1ee96:	2301      	movs	r3, #1
   1ee98:	321a      	adds	r2, #26
   1ee9a:	9901      	ldr	r1, [sp, #4]
   1ee9c:	9800      	ldr	r0, [sp, #0]
   1ee9e:	9e08      	ldr	r6, [sp, #32]
   1eea0:	47b0      	blx	r6
   1eea2:	1c43      	adds	r3, r0, #1
   1eea4:	d0e6      	beq.n	1ee74 <_printf_common+0xa4>
   1eea6:	3701      	adds	r7, #1
   1eea8:	e7d1      	b.n	1ee4e <_printf_common+0x7e>
	...

0001eeac <_printf_i>:
   1eeac:	b5f0      	push	{r4, r5, r6, r7, lr}
   1eeae:	b08b      	sub	sp, #44	; 0x2c
   1eeb0:	9206      	str	r2, [sp, #24]
   1eeb2:	000a      	movs	r2, r1
   1eeb4:	3243      	adds	r2, #67	; 0x43
   1eeb6:	9307      	str	r3, [sp, #28]
   1eeb8:	9005      	str	r0, [sp, #20]
   1eeba:	9204      	str	r2, [sp, #16]
   1eebc:	7e0a      	ldrb	r2, [r1, #24]
   1eebe:	000c      	movs	r4, r1
   1eec0:	9b10      	ldr	r3, [sp, #64]	; 0x40
   1eec2:	2a6e      	cmp	r2, #110	; 0x6e
   1eec4:	d100      	bne.n	1eec8 <_printf_i+0x1c>
   1eec6:	e08f      	b.n	1efe8 <_printf_i+0x13c>
   1eec8:	d817      	bhi.n	1eefa <_printf_i+0x4e>
   1eeca:	2a63      	cmp	r2, #99	; 0x63
   1eecc:	d02c      	beq.n	1ef28 <_printf_i+0x7c>
   1eece:	d808      	bhi.n	1eee2 <_printf_i+0x36>
   1eed0:	2a00      	cmp	r2, #0
   1eed2:	d100      	bne.n	1eed6 <_printf_i+0x2a>
   1eed4:	e099      	b.n	1f00a <_printf_i+0x15e>
   1eed6:	2a58      	cmp	r2, #88	; 0x58
   1eed8:	d054      	beq.n	1ef84 <_printf_i+0xd8>
   1eeda:	0026      	movs	r6, r4
   1eedc:	3642      	adds	r6, #66	; 0x42
   1eede:	7032      	strb	r2, [r6, #0]
   1eee0:	e029      	b.n	1ef36 <_printf_i+0x8a>
   1eee2:	2a64      	cmp	r2, #100	; 0x64
   1eee4:	d001      	beq.n	1eeea <_printf_i+0x3e>
   1eee6:	2a69      	cmp	r2, #105	; 0x69
   1eee8:	d1f7      	bne.n	1eeda <_printf_i+0x2e>
   1eeea:	6821      	ldr	r1, [r4, #0]
   1eeec:	681a      	ldr	r2, [r3, #0]
   1eeee:	0608      	lsls	r0, r1, #24
   1eef0:	d523      	bpl.n	1ef3a <_printf_i+0x8e>
   1eef2:	1d11      	adds	r1, r2, #4
   1eef4:	6019      	str	r1, [r3, #0]
   1eef6:	6815      	ldr	r5, [r2, #0]
   1eef8:	e025      	b.n	1ef46 <_printf_i+0x9a>
   1eefa:	2a73      	cmp	r2, #115	; 0x73
   1eefc:	d100      	bne.n	1ef00 <_printf_i+0x54>
   1eefe:	e088      	b.n	1f012 <_printf_i+0x166>
   1ef00:	d808      	bhi.n	1ef14 <_printf_i+0x68>
   1ef02:	2a6f      	cmp	r2, #111	; 0x6f
   1ef04:	d029      	beq.n	1ef5a <_printf_i+0xae>
   1ef06:	2a70      	cmp	r2, #112	; 0x70
   1ef08:	d1e7      	bne.n	1eeda <_printf_i+0x2e>
   1ef0a:	2220      	movs	r2, #32
   1ef0c:	6809      	ldr	r1, [r1, #0]
   1ef0e:	430a      	orrs	r2, r1
   1ef10:	6022      	str	r2, [r4, #0]
   1ef12:	e003      	b.n	1ef1c <_printf_i+0x70>
   1ef14:	2a75      	cmp	r2, #117	; 0x75
   1ef16:	d020      	beq.n	1ef5a <_printf_i+0xae>
   1ef18:	2a78      	cmp	r2, #120	; 0x78
   1ef1a:	d1de      	bne.n	1eeda <_printf_i+0x2e>
   1ef1c:	0022      	movs	r2, r4
   1ef1e:	2178      	movs	r1, #120	; 0x78
   1ef20:	3245      	adds	r2, #69	; 0x45
   1ef22:	7011      	strb	r1, [r2, #0]
   1ef24:	4a6c      	ldr	r2, [pc, #432]	; (1f0d8 <_printf_i+0x22c>)
   1ef26:	e030      	b.n	1ef8a <_printf_i+0xde>
   1ef28:	000e      	movs	r6, r1
   1ef2a:	681a      	ldr	r2, [r3, #0]
   1ef2c:	3642      	adds	r6, #66	; 0x42
   1ef2e:	1d11      	adds	r1, r2, #4
   1ef30:	6019      	str	r1, [r3, #0]
   1ef32:	6813      	ldr	r3, [r2, #0]
   1ef34:	7033      	strb	r3, [r6, #0]
   1ef36:	2301      	movs	r3, #1
   1ef38:	e079      	b.n	1f02e <_printf_i+0x182>
   1ef3a:	0649      	lsls	r1, r1, #25
   1ef3c:	d5d9      	bpl.n	1eef2 <_printf_i+0x46>
   1ef3e:	1d11      	adds	r1, r2, #4
   1ef40:	6019      	str	r1, [r3, #0]
   1ef42:	2300      	movs	r3, #0
   1ef44:	5ed5      	ldrsh	r5, [r2, r3]
   1ef46:	2d00      	cmp	r5, #0
   1ef48:	da03      	bge.n	1ef52 <_printf_i+0xa6>
   1ef4a:	232d      	movs	r3, #45	; 0x2d
   1ef4c:	9a04      	ldr	r2, [sp, #16]
   1ef4e:	426d      	negs	r5, r5
   1ef50:	7013      	strb	r3, [r2, #0]
   1ef52:	4b62      	ldr	r3, [pc, #392]	; (1f0dc <_printf_i+0x230>)
   1ef54:	270a      	movs	r7, #10
   1ef56:	9303      	str	r3, [sp, #12]
   1ef58:	e02f      	b.n	1efba <_printf_i+0x10e>
   1ef5a:	6820      	ldr	r0, [r4, #0]
   1ef5c:	6819      	ldr	r1, [r3, #0]
   1ef5e:	0605      	lsls	r5, r0, #24
   1ef60:	d503      	bpl.n	1ef6a <_printf_i+0xbe>
   1ef62:	1d08      	adds	r0, r1, #4
   1ef64:	6018      	str	r0, [r3, #0]
   1ef66:	680d      	ldr	r5, [r1, #0]
   1ef68:	e005      	b.n	1ef76 <_printf_i+0xca>
   1ef6a:	0640      	lsls	r0, r0, #25
   1ef6c:	d5f9      	bpl.n	1ef62 <_printf_i+0xb6>
   1ef6e:	680d      	ldr	r5, [r1, #0]
   1ef70:	1d08      	adds	r0, r1, #4
   1ef72:	6018      	str	r0, [r3, #0]
   1ef74:	b2ad      	uxth	r5, r5
   1ef76:	4b59      	ldr	r3, [pc, #356]	; (1f0dc <_printf_i+0x230>)
   1ef78:	2708      	movs	r7, #8
   1ef7a:	9303      	str	r3, [sp, #12]
   1ef7c:	2a6f      	cmp	r2, #111	; 0x6f
   1ef7e:	d018      	beq.n	1efb2 <_printf_i+0x106>
   1ef80:	270a      	movs	r7, #10
   1ef82:	e016      	b.n	1efb2 <_printf_i+0x106>
   1ef84:	3145      	adds	r1, #69	; 0x45
   1ef86:	700a      	strb	r2, [r1, #0]
   1ef88:	4a54      	ldr	r2, [pc, #336]	; (1f0dc <_printf_i+0x230>)
   1ef8a:	9203      	str	r2, [sp, #12]
   1ef8c:	681a      	ldr	r2, [r3, #0]
   1ef8e:	6821      	ldr	r1, [r4, #0]
   1ef90:	1d10      	adds	r0, r2, #4
   1ef92:	6018      	str	r0, [r3, #0]
   1ef94:	6815      	ldr	r5, [r2, #0]
   1ef96:	0608      	lsls	r0, r1, #24
   1ef98:	d522      	bpl.n	1efe0 <_printf_i+0x134>
   1ef9a:	07cb      	lsls	r3, r1, #31
   1ef9c:	d502      	bpl.n	1efa4 <_printf_i+0xf8>
   1ef9e:	2320      	movs	r3, #32
   1efa0:	4319      	orrs	r1, r3
   1efa2:	6021      	str	r1, [r4, #0]
   1efa4:	2710      	movs	r7, #16
   1efa6:	2d00      	cmp	r5, #0
   1efa8:	d103      	bne.n	1efb2 <_printf_i+0x106>
   1efaa:	2320      	movs	r3, #32
   1efac:	6822      	ldr	r2, [r4, #0]
   1efae:	439a      	bics	r2, r3
   1efb0:	6022      	str	r2, [r4, #0]
   1efb2:	0023      	movs	r3, r4
   1efb4:	2200      	movs	r2, #0
   1efb6:	3343      	adds	r3, #67	; 0x43
   1efb8:	701a      	strb	r2, [r3, #0]
   1efba:	6863      	ldr	r3, [r4, #4]
   1efbc:	60a3      	str	r3, [r4, #8]
   1efbe:	2b00      	cmp	r3, #0
   1efc0:	db5c      	blt.n	1f07c <_printf_i+0x1d0>
   1efc2:	2204      	movs	r2, #4
   1efc4:	6821      	ldr	r1, [r4, #0]
   1efc6:	4391      	bics	r1, r2
   1efc8:	6021      	str	r1, [r4, #0]
   1efca:	2d00      	cmp	r5, #0
   1efcc:	d158      	bne.n	1f080 <_printf_i+0x1d4>
   1efce:	9e04      	ldr	r6, [sp, #16]
   1efd0:	2b00      	cmp	r3, #0
   1efd2:	d064      	beq.n	1f09e <_printf_i+0x1f2>
   1efd4:	0026      	movs	r6, r4
   1efd6:	9b03      	ldr	r3, [sp, #12]
   1efd8:	3642      	adds	r6, #66	; 0x42
   1efda:	781b      	ldrb	r3, [r3, #0]
   1efdc:	7033      	strb	r3, [r6, #0]
   1efde:	e05e      	b.n	1f09e <_printf_i+0x1f2>
   1efe0:	0648      	lsls	r0, r1, #25
   1efe2:	d5da      	bpl.n	1ef9a <_printf_i+0xee>
   1efe4:	b2ad      	uxth	r5, r5
   1efe6:	e7d8      	b.n	1ef9a <_printf_i+0xee>
   1efe8:	6809      	ldr	r1, [r1, #0]
   1efea:	681a      	ldr	r2, [r3, #0]
   1efec:	0608      	lsls	r0, r1, #24
   1efee:	d505      	bpl.n	1effc <_printf_i+0x150>
   1eff0:	1d11      	adds	r1, r2, #4
   1eff2:	6019      	str	r1, [r3, #0]
   1eff4:	6813      	ldr	r3, [r2, #0]
   1eff6:	6962      	ldr	r2, [r4, #20]
   1eff8:	601a      	str	r2, [r3, #0]
   1effa:	e006      	b.n	1f00a <_printf_i+0x15e>
   1effc:	0649      	lsls	r1, r1, #25
   1effe:	d5f7      	bpl.n	1eff0 <_printf_i+0x144>
   1f000:	1d11      	adds	r1, r2, #4
   1f002:	6019      	str	r1, [r3, #0]
   1f004:	6813      	ldr	r3, [r2, #0]
   1f006:	8aa2      	ldrh	r2, [r4, #20]
   1f008:	801a      	strh	r2, [r3, #0]
   1f00a:	2300      	movs	r3, #0
   1f00c:	9e04      	ldr	r6, [sp, #16]
   1f00e:	6123      	str	r3, [r4, #16]
   1f010:	e054      	b.n	1f0bc <_printf_i+0x210>
   1f012:	681a      	ldr	r2, [r3, #0]
   1f014:	1d11      	adds	r1, r2, #4
   1f016:	6019      	str	r1, [r3, #0]
   1f018:	6816      	ldr	r6, [r2, #0]
   1f01a:	2100      	movs	r1, #0
   1f01c:	6862      	ldr	r2, [r4, #4]
   1f01e:	0030      	movs	r0, r6
   1f020:	f7fd f872 	bl	1c108 <memchr>
   1f024:	2800      	cmp	r0, #0
   1f026:	d001      	beq.n	1f02c <_printf_i+0x180>
   1f028:	1b80      	subs	r0, r0, r6
   1f02a:	6060      	str	r0, [r4, #4]
   1f02c:	6863      	ldr	r3, [r4, #4]
   1f02e:	6123      	str	r3, [r4, #16]
   1f030:	2300      	movs	r3, #0
   1f032:	9a04      	ldr	r2, [sp, #16]
   1f034:	7013      	strb	r3, [r2, #0]
   1f036:	e041      	b.n	1f0bc <_printf_i+0x210>
   1f038:	6923      	ldr	r3, [r4, #16]
   1f03a:	0032      	movs	r2, r6
   1f03c:	9906      	ldr	r1, [sp, #24]
   1f03e:	9805      	ldr	r0, [sp, #20]
   1f040:	9d07      	ldr	r5, [sp, #28]
   1f042:	47a8      	blx	r5
   1f044:	1c43      	adds	r3, r0, #1
   1f046:	d043      	beq.n	1f0d0 <_printf_i+0x224>
   1f048:	6823      	ldr	r3, [r4, #0]
   1f04a:	2500      	movs	r5, #0
   1f04c:	079b      	lsls	r3, r3, #30
   1f04e:	d40f      	bmi.n	1f070 <_printf_i+0x1c4>
   1f050:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1f052:	68e0      	ldr	r0, [r4, #12]
   1f054:	4298      	cmp	r0, r3
   1f056:	da3d      	bge.n	1f0d4 <_printf_i+0x228>
   1f058:	0018      	movs	r0, r3
   1f05a:	e03b      	b.n	1f0d4 <_printf_i+0x228>
   1f05c:	0022      	movs	r2, r4
   1f05e:	2301      	movs	r3, #1
   1f060:	3219      	adds	r2, #25
   1f062:	9906      	ldr	r1, [sp, #24]
   1f064:	9805      	ldr	r0, [sp, #20]
   1f066:	9e07      	ldr	r6, [sp, #28]
   1f068:	47b0      	blx	r6
   1f06a:	1c43      	adds	r3, r0, #1
   1f06c:	d030      	beq.n	1f0d0 <_printf_i+0x224>
   1f06e:	3501      	adds	r5, #1
   1f070:	68e3      	ldr	r3, [r4, #12]
   1f072:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1f074:	1a9b      	subs	r3, r3, r2
   1f076:	429d      	cmp	r5, r3
   1f078:	dbf0      	blt.n	1f05c <_printf_i+0x1b0>
   1f07a:	e7e9      	b.n	1f050 <_printf_i+0x1a4>
   1f07c:	2d00      	cmp	r5, #0
   1f07e:	d0a9      	beq.n	1efd4 <_printf_i+0x128>
   1f080:	9e04      	ldr	r6, [sp, #16]
   1f082:	0028      	movs	r0, r5
   1f084:	0039      	movs	r1, r7
   1f086:	f7fa fead 	bl	19de4 <__aeabi_uidivmod>
   1f08a:	9b03      	ldr	r3, [sp, #12]
   1f08c:	3e01      	subs	r6, #1
   1f08e:	5c5b      	ldrb	r3, [r3, r1]
   1f090:	0028      	movs	r0, r5
   1f092:	7033      	strb	r3, [r6, #0]
   1f094:	0039      	movs	r1, r7
   1f096:	f7fa fe1f 	bl	19cd8 <__udivsi3>
   1f09a:	1e05      	subs	r5, r0, #0
   1f09c:	d1f1      	bne.n	1f082 <_printf_i+0x1d6>
   1f09e:	2f08      	cmp	r7, #8
   1f0a0:	d109      	bne.n	1f0b6 <_printf_i+0x20a>
   1f0a2:	6823      	ldr	r3, [r4, #0]
   1f0a4:	07db      	lsls	r3, r3, #31
   1f0a6:	d506      	bpl.n	1f0b6 <_printf_i+0x20a>
   1f0a8:	6863      	ldr	r3, [r4, #4]
   1f0aa:	6922      	ldr	r2, [r4, #16]
   1f0ac:	4293      	cmp	r3, r2
   1f0ae:	dc02      	bgt.n	1f0b6 <_printf_i+0x20a>
   1f0b0:	2330      	movs	r3, #48	; 0x30
   1f0b2:	3e01      	subs	r6, #1
   1f0b4:	7033      	strb	r3, [r6, #0]
   1f0b6:	9b04      	ldr	r3, [sp, #16]
   1f0b8:	1b9b      	subs	r3, r3, r6
   1f0ba:	6123      	str	r3, [r4, #16]
   1f0bc:	9b07      	ldr	r3, [sp, #28]
   1f0be:	aa09      	add	r2, sp, #36	; 0x24
   1f0c0:	9300      	str	r3, [sp, #0]
   1f0c2:	0021      	movs	r1, r4
   1f0c4:	9b06      	ldr	r3, [sp, #24]
   1f0c6:	9805      	ldr	r0, [sp, #20]
   1f0c8:	f7ff fe82 	bl	1edd0 <_printf_common>
   1f0cc:	1c43      	adds	r3, r0, #1
   1f0ce:	d1b3      	bne.n	1f038 <_printf_i+0x18c>
   1f0d0:	2001      	movs	r0, #1
   1f0d2:	4240      	negs	r0, r0
   1f0d4:	b00b      	add	sp, #44	; 0x2c
   1f0d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1f0d8:	00021f86 	.word	0x00021f86
   1f0dc:	00021f75 	.word	0x00021f75

0001f0e0 <_scanf_chars>:
   1f0e0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1f0e2:	0015      	movs	r5, r2
   1f0e4:	688a      	ldr	r2, [r1, #8]
   1f0e6:	9001      	str	r0, [sp, #4]
   1f0e8:	000c      	movs	r4, r1
   1f0ea:	2a00      	cmp	r2, #0
   1f0ec:	d106      	bne.n	1f0fc <_scanf_chars+0x1c>
   1f0ee:	698a      	ldr	r2, [r1, #24]
   1f0f0:	1e51      	subs	r1, r2, #1
   1f0f2:	418a      	sbcs	r2, r1
   1f0f4:	2101      	movs	r1, #1
   1f0f6:	4252      	negs	r2, r2
   1f0f8:	430a      	orrs	r2, r1
   1f0fa:	60a2      	str	r2, [r4, #8]
   1f0fc:	6822      	ldr	r2, [r4, #0]
   1f0fe:	06d2      	lsls	r2, r2, #27
   1f100:	d403      	bmi.n	1f10a <_scanf_chars+0x2a>
   1f102:	681a      	ldr	r2, [r3, #0]
   1f104:	1d11      	adds	r1, r2, #4
   1f106:	6019      	str	r1, [r3, #0]
   1f108:	6817      	ldr	r7, [r2, #0]
   1f10a:	2600      	movs	r6, #0
   1f10c:	69a3      	ldr	r3, [r4, #24]
   1f10e:	2b00      	cmp	r3, #0
   1f110:	d01c      	beq.n	1f14c <_scanf_chars+0x6c>
   1f112:	2b01      	cmp	r3, #1
   1f114:	d108      	bne.n	1f128 <_scanf_chars+0x48>
   1f116:	682b      	ldr	r3, [r5, #0]
   1f118:	6962      	ldr	r2, [r4, #20]
   1f11a:	781b      	ldrb	r3, [r3, #0]
   1f11c:	5cd3      	ldrb	r3, [r2, r3]
   1f11e:	2b00      	cmp	r3, #0
   1f120:	d114      	bne.n	1f14c <_scanf_chars+0x6c>
   1f122:	2e00      	cmp	r6, #0
   1f124:	d130      	bne.n	1f188 <_scanf_chars+0xa8>
   1f126:	e006      	b.n	1f136 <_scanf_chars+0x56>
   1f128:	2b02      	cmp	r3, #2
   1f12a:	d006      	beq.n	1f13a <_scanf_chars+0x5a>
   1f12c:	2e00      	cmp	r6, #0
   1f12e:	d12b      	bne.n	1f188 <_scanf_chars+0xa8>
   1f130:	69a3      	ldr	r3, [r4, #24]
   1f132:	2b01      	cmp	r3, #1
   1f134:	d128      	bne.n	1f188 <_scanf_chars+0xa8>
   1f136:	2001      	movs	r0, #1
   1f138:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   1f13a:	f7fc ff45 	bl	1bfc8 <__locale_ctype_ptr>
   1f13e:	2208      	movs	r2, #8
   1f140:	682b      	ldr	r3, [r5, #0]
   1f142:	781b      	ldrb	r3, [r3, #0]
   1f144:	18c0      	adds	r0, r0, r3
   1f146:	7843      	ldrb	r3, [r0, #1]
   1f148:	4213      	tst	r3, r2
   1f14a:	d1ef      	bne.n	1f12c <_scanf_chars+0x4c>
   1f14c:	2210      	movs	r2, #16
   1f14e:	6823      	ldr	r3, [r4, #0]
   1f150:	3601      	adds	r6, #1
   1f152:	4213      	tst	r3, r2
   1f154:	d103      	bne.n	1f15e <_scanf_chars+0x7e>
   1f156:	682b      	ldr	r3, [r5, #0]
   1f158:	781b      	ldrb	r3, [r3, #0]
   1f15a:	703b      	strb	r3, [r7, #0]
   1f15c:	3701      	adds	r7, #1
   1f15e:	682a      	ldr	r2, [r5, #0]
   1f160:	686b      	ldr	r3, [r5, #4]
   1f162:	3201      	adds	r2, #1
   1f164:	602a      	str	r2, [r5, #0]
   1f166:	68a2      	ldr	r2, [r4, #8]
   1f168:	3b01      	subs	r3, #1
   1f16a:	3a01      	subs	r2, #1
   1f16c:	606b      	str	r3, [r5, #4]
   1f16e:	60a2      	str	r2, [r4, #8]
   1f170:	2a00      	cmp	r2, #0
   1f172:	d009      	beq.n	1f188 <_scanf_chars+0xa8>
   1f174:	2b00      	cmp	r3, #0
   1f176:	dcc9      	bgt.n	1f10c <_scanf_chars+0x2c>
   1f178:	23c0      	movs	r3, #192	; 0xc0
   1f17a:	005b      	lsls	r3, r3, #1
   1f17c:	58e3      	ldr	r3, [r4, r3]
   1f17e:	0029      	movs	r1, r5
   1f180:	9801      	ldr	r0, [sp, #4]
   1f182:	4798      	blx	r3
   1f184:	2800      	cmp	r0, #0
   1f186:	d0c1      	beq.n	1f10c <_scanf_chars+0x2c>
   1f188:	2310      	movs	r3, #16
   1f18a:	6822      	ldr	r2, [r4, #0]
   1f18c:	4013      	ands	r3, r2
   1f18e:	d106      	bne.n	1f19e <_scanf_chars+0xbe>
   1f190:	68e2      	ldr	r2, [r4, #12]
   1f192:	3201      	adds	r2, #1
   1f194:	60e2      	str	r2, [r4, #12]
   1f196:	69a2      	ldr	r2, [r4, #24]
   1f198:	2a00      	cmp	r2, #0
   1f19a:	d000      	beq.n	1f19e <_scanf_chars+0xbe>
   1f19c:	703b      	strb	r3, [r7, #0]
   1f19e:	6923      	ldr	r3, [r4, #16]
   1f1a0:	2000      	movs	r0, #0
   1f1a2:	199e      	adds	r6, r3, r6
   1f1a4:	6126      	str	r6, [r4, #16]
   1f1a6:	e7c7      	b.n	1f138 <_scanf_chars+0x58>

0001f1a8 <_scanf_i>:
   1f1a8:	b5f0      	push	{r4, r5, r6, r7, lr}
   1f1aa:	000c      	movs	r4, r1
   1f1ac:	b08d      	sub	sp, #52	; 0x34
   1f1ae:	9302      	str	r3, [sp, #8]
   1f1b0:	4b77      	ldr	r3, [pc, #476]	; (1f390 <_scanf_i+0x1e8>)
   1f1b2:	9005      	str	r0, [sp, #20]
   1f1b4:	0016      	movs	r6, r2
   1f1b6:	aa09      	add	r2, sp, #36	; 0x24
   1f1b8:	cb23      	ldmia	r3!, {r0, r1, r5}
   1f1ba:	c223      	stmia	r2!, {r0, r1, r5}
   1f1bc:	4b75      	ldr	r3, [pc, #468]	; (1f394 <_scanf_i+0x1ec>)
   1f1be:	9306      	str	r3, [sp, #24]
   1f1c0:	69a3      	ldr	r3, [r4, #24]
   1f1c2:	2b03      	cmp	r3, #3
   1f1c4:	d001      	beq.n	1f1ca <_scanf_i+0x22>
   1f1c6:	4b74      	ldr	r3, [pc, #464]	; (1f398 <_scanf_i+0x1f0>)
   1f1c8:	9306      	str	r3, [sp, #24]
   1f1ca:	22ae      	movs	r2, #174	; 0xae
   1f1cc:	2000      	movs	r0, #0
   1f1ce:	68a3      	ldr	r3, [r4, #8]
   1f1d0:	0052      	lsls	r2, r2, #1
   1f1d2:	1e59      	subs	r1, r3, #1
   1f1d4:	9004      	str	r0, [sp, #16]
   1f1d6:	4291      	cmp	r1, r2
   1f1d8:	d905      	bls.n	1f1e6 <_scanf_i+0x3e>
   1f1da:	3b5e      	subs	r3, #94	; 0x5e
   1f1dc:	3bff      	subs	r3, #255	; 0xff
   1f1de:	9304      	str	r3, [sp, #16]
   1f1e0:	235e      	movs	r3, #94	; 0x5e
   1f1e2:	33ff      	adds	r3, #255	; 0xff
   1f1e4:	60a3      	str	r3, [r4, #8]
   1f1e6:	0023      	movs	r3, r4
   1f1e8:	331c      	adds	r3, #28
   1f1ea:	9301      	str	r3, [sp, #4]
   1f1ec:	23d0      	movs	r3, #208	; 0xd0
   1f1ee:	2700      	movs	r7, #0
   1f1f0:	6822      	ldr	r2, [r4, #0]
   1f1f2:	011b      	lsls	r3, r3, #4
   1f1f4:	4313      	orrs	r3, r2
   1f1f6:	6023      	str	r3, [r4, #0]
   1f1f8:	9b01      	ldr	r3, [sp, #4]
   1f1fa:	9303      	str	r3, [sp, #12]
   1f1fc:	6833      	ldr	r3, [r6, #0]
   1f1fe:	a809      	add	r0, sp, #36	; 0x24
   1f200:	7819      	ldrb	r1, [r3, #0]
   1f202:	00bb      	lsls	r3, r7, #2
   1f204:	2202      	movs	r2, #2
   1f206:	5818      	ldr	r0, [r3, r0]
   1f208:	f7fc ff7e 	bl	1c108 <memchr>
   1f20c:	2800      	cmp	r0, #0
   1f20e:	d02b      	beq.n	1f268 <_scanf_i+0xc0>
   1f210:	2f01      	cmp	r7, #1
   1f212:	d15f      	bne.n	1f2d4 <_scanf_i+0x12c>
   1f214:	6863      	ldr	r3, [r4, #4]
   1f216:	2b00      	cmp	r3, #0
   1f218:	d106      	bne.n	1f228 <_scanf_i+0x80>
   1f21a:	3308      	adds	r3, #8
   1f21c:	6822      	ldr	r2, [r4, #0]
   1f21e:	6063      	str	r3, [r4, #4]
   1f220:	33f9      	adds	r3, #249	; 0xf9
   1f222:	33ff      	adds	r3, #255	; 0xff
   1f224:	4313      	orrs	r3, r2
   1f226:	6023      	str	r3, [r4, #0]
   1f228:	4b5c      	ldr	r3, [pc, #368]	; (1f39c <_scanf_i+0x1f4>)
   1f22a:	6822      	ldr	r2, [r4, #0]
   1f22c:	4013      	ands	r3, r2
   1f22e:	6023      	str	r3, [r4, #0]
   1f230:	68a3      	ldr	r3, [r4, #8]
   1f232:	1e5a      	subs	r2, r3, #1
   1f234:	60a2      	str	r2, [r4, #8]
   1f236:	2b00      	cmp	r3, #0
   1f238:	d016      	beq.n	1f268 <_scanf_i+0xc0>
   1f23a:	9b03      	ldr	r3, [sp, #12]
   1f23c:	1c5d      	adds	r5, r3, #1
   1f23e:	6833      	ldr	r3, [r6, #0]
   1f240:	1c5a      	adds	r2, r3, #1
   1f242:	6032      	str	r2, [r6, #0]
   1f244:	781b      	ldrb	r3, [r3, #0]
   1f246:	9a03      	ldr	r2, [sp, #12]
   1f248:	9503      	str	r5, [sp, #12]
   1f24a:	7013      	strb	r3, [r2, #0]
   1f24c:	6873      	ldr	r3, [r6, #4]
   1f24e:	3b01      	subs	r3, #1
   1f250:	6073      	str	r3, [r6, #4]
   1f252:	2b00      	cmp	r3, #0
   1f254:	dc08      	bgt.n	1f268 <_scanf_i+0xc0>
   1f256:	23c0      	movs	r3, #192	; 0xc0
   1f258:	005b      	lsls	r3, r3, #1
   1f25a:	58e3      	ldr	r3, [r4, r3]
   1f25c:	0031      	movs	r1, r6
   1f25e:	9805      	ldr	r0, [sp, #20]
   1f260:	9307      	str	r3, [sp, #28]
   1f262:	4798      	blx	r3
   1f264:	2800      	cmp	r0, #0
   1f266:	d17d      	bne.n	1f364 <_scanf_i+0x1bc>
   1f268:	3701      	adds	r7, #1
   1f26a:	2f03      	cmp	r7, #3
   1f26c:	d1c6      	bne.n	1f1fc <_scanf_i+0x54>
   1f26e:	6863      	ldr	r3, [r4, #4]
   1f270:	2b00      	cmp	r3, #0
   1f272:	d101      	bne.n	1f278 <_scanf_i+0xd0>
   1f274:	330a      	adds	r3, #10
   1f276:	6063      	str	r3, [r4, #4]
   1f278:	2110      	movs	r1, #16
   1f27a:	2700      	movs	r7, #0
   1f27c:	6863      	ldr	r3, [r4, #4]
   1f27e:	6960      	ldr	r0, [r4, #20]
   1f280:	1ac9      	subs	r1, r1, r3
   1f282:	4b47      	ldr	r3, [pc, #284]	; (1f3a0 <_scanf_i+0x1f8>)
   1f284:	18c9      	adds	r1, r1, r3
   1f286:	f000 f8d9 	bl	1f43c <__sccl>
   1f28a:	9d03      	ldr	r5, [sp, #12]
   1f28c:	68a3      	ldr	r3, [r4, #8]
   1f28e:	2b00      	cmp	r3, #0
   1f290:	d041      	beq.n	1f316 <_scanf_i+0x16e>
   1f292:	6832      	ldr	r2, [r6, #0]
   1f294:	6960      	ldr	r0, [r4, #20]
   1f296:	7811      	ldrb	r1, [r2, #0]
   1f298:	5c40      	ldrb	r0, [r0, r1]
   1f29a:	2800      	cmp	r0, #0
   1f29c:	d03b      	beq.n	1f316 <_scanf_i+0x16e>
   1f29e:	2930      	cmp	r1, #48	; 0x30
   1f2a0:	d128      	bne.n	1f2f4 <_scanf_i+0x14c>
   1f2a2:	2080      	movs	r0, #128	; 0x80
   1f2a4:	6821      	ldr	r1, [r4, #0]
   1f2a6:	0100      	lsls	r0, r0, #4
   1f2a8:	4201      	tst	r1, r0
   1f2aa:	d023      	beq.n	1f2f4 <_scanf_i+0x14c>
   1f2ac:	9a04      	ldr	r2, [sp, #16]
   1f2ae:	3701      	adds	r7, #1
   1f2b0:	2a00      	cmp	r2, #0
   1f2b2:	d003      	beq.n	1f2bc <_scanf_i+0x114>
   1f2b4:	3a01      	subs	r2, #1
   1f2b6:	3301      	adds	r3, #1
   1f2b8:	9204      	str	r2, [sp, #16]
   1f2ba:	60a3      	str	r3, [r4, #8]
   1f2bc:	6873      	ldr	r3, [r6, #4]
   1f2be:	3b01      	subs	r3, #1
   1f2c0:	6073      	str	r3, [r6, #4]
   1f2c2:	2b00      	cmp	r3, #0
   1f2c4:	dd1e      	ble.n	1f304 <_scanf_i+0x15c>
   1f2c6:	6833      	ldr	r3, [r6, #0]
   1f2c8:	3301      	adds	r3, #1
   1f2ca:	6033      	str	r3, [r6, #0]
   1f2cc:	68a3      	ldr	r3, [r4, #8]
   1f2ce:	3b01      	subs	r3, #1
   1f2d0:	60a3      	str	r3, [r4, #8]
   1f2d2:	e7db      	b.n	1f28c <_scanf_i+0xe4>
   1f2d4:	2f02      	cmp	r7, #2
   1f2d6:	d1ab      	bne.n	1f230 <_scanf_i+0x88>
   1f2d8:	21c0      	movs	r1, #192	; 0xc0
   1f2da:	2380      	movs	r3, #128	; 0x80
   1f2dc:	6822      	ldr	r2, [r4, #0]
   1f2de:	00c9      	lsls	r1, r1, #3
   1f2e0:	4011      	ands	r1, r2
   1f2e2:	009b      	lsls	r3, r3, #2
   1f2e4:	4299      	cmp	r1, r3
   1f2e6:	d1c2      	bne.n	1f26e <_scanf_i+0xc6>
   1f2e8:	3bf1      	subs	r3, #241	; 0xf1
   1f2ea:	3bff      	subs	r3, #255	; 0xff
   1f2ec:	6063      	str	r3, [r4, #4]
   1f2ee:	33f0      	adds	r3, #240	; 0xf0
   1f2f0:	4313      	orrs	r3, r2
   1f2f2:	e79c      	b.n	1f22e <_scanf_i+0x86>
   1f2f4:	6821      	ldr	r1, [r4, #0]
   1f2f6:	4b2b      	ldr	r3, [pc, #172]	; (1f3a4 <_scanf_i+0x1fc>)
   1f2f8:	400b      	ands	r3, r1
   1f2fa:	6023      	str	r3, [r4, #0]
   1f2fc:	7813      	ldrb	r3, [r2, #0]
   1f2fe:	702b      	strb	r3, [r5, #0]
   1f300:	3501      	adds	r5, #1
   1f302:	e7db      	b.n	1f2bc <_scanf_i+0x114>
   1f304:	23c0      	movs	r3, #192	; 0xc0
   1f306:	005b      	lsls	r3, r3, #1
   1f308:	58e3      	ldr	r3, [r4, r3]
   1f30a:	0031      	movs	r1, r6
   1f30c:	9805      	ldr	r0, [sp, #20]
   1f30e:	9303      	str	r3, [sp, #12]
   1f310:	4798      	blx	r3
   1f312:	2800      	cmp	r0, #0
   1f314:	d0da      	beq.n	1f2cc <_scanf_i+0x124>
   1f316:	6823      	ldr	r3, [r4, #0]
   1f318:	05db      	lsls	r3, r3, #23
   1f31a:	d50e      	bpl.n	1f33a <_scanf_i+0x192>
   1f31c:	9b01      	ldr	r3, [sp, #4]
   1f31e:	429d      	cmp	r5, r3
   1f320:	d907      	bls.n	1f332 <_scanf_i+0x18a>
   1f322:	23be      	movs	r3, #190	; 0xbe
   1f324:	3d01      	subs	r5, #1
   1f326:	005b      	lsls	r3, r3, #1
   1f328:	7829      	ldrb	r1, [r5, #0]
   1f32a:	58e3      	ldr	r3, [r4, r3]
   1f32c:	0032      	movs	r2, r6
   1f32e:	9805      	ldr	r0, [sp, #20]
   1f330:	4798      	blx	r3
   1f332:	9b01      	ldr	r3, [sp, #4]
   1f334:	2001      	movs	r0, #1
   1f336:	429d      	cmp	r5, r3
   1f338:	d027      	beq.n	1f38a <_scanf_i+0x1e2>
   1f33a:	2210      	movs	r2, #16
   1f33c:	6823      	ldr	r3, [r4, #0]
   1f33e:	401a      	ands	r2, r3
   1f340:	d11c      	bne.n	1f37c <_scanf_i+0x1d4>
   1f342:	702a      	strb	r2, [r5, #0]
   1f344:	6863      	ldr	r3, [r4, #4]
   1f346:	9901      	ldr	r1, [sp, #4]
   1f348:	9805      	ldr	r0, [sp, #20]
   1f34a:	9e06      	ldr	r6, [sp, #24]
   1f34c:	47b0      	blx	r6
   1f34e:	9b02      	ldr	r3, [sp, #8]
   1f350:	6822      	ldr	r2, [r4, #0]
   1f352:	681b      	ldr	r3, [r3, #0]
   1f354:	0691      	lsls	r1, r2, #26
   1f356:	d507      	bpl.n	1f368 <_scanf_i+0x1c0>
   1f358:	9902      	ldr	r1, [sp, #8]
   1f35a:	1d1a      	adds	r2, r3, #4
   1f35c:	600a      	str	r2, [r1, #0]
   1f35e:	681b      	ldr	r3, [r3, #0]
   1f360:	6018      	str	r0, [r3, #0]
   1f362:	e008      	b.n	1f376 <_scanf_i+0x1ce>
   1f364:	2700      	movs	r7, #0
   1f366:	e7d6      	b.n	1f316 <_scanf_i+0x16e>
   1f368:	07d1      	lsls	r1, r2, #31
   1f36a:	d5f5      	bpl.n	1f358 <_scanf_i+0x1b0>
   1f36c:	9902      	ldr	r1, [sp, #8]
   1f36e:	1d1a      	adds	r2, r3, #4
   1f370:	600a      	str	r2, [r1, #0]
   1f372:	681b      	ldr	r3, [r3, #0]
   1f374:	8018      	strh	r0, [r3, #0]
   1f376:	68e3      	ldr	r3, [r4, #12]
   1f378:	3301      	adds	r3, #1
   1f37a:	60e3      	str	r3, [r4, #12]
   1f37c:	2000      	movs	r0, #0
   1f37e:	9b01      	ldr	r3, [sp, #4]
   1f380:	1aed      	subs	r5, r5, r3
   1f382:	6923      	ldr	r3, [r4, #16]
   1f384:	19ef      	adds	r7, r5, r7
   1f386:	19df      	adds	r7, r3, r7
   1f388:	6127      	str	r7, [r4, #16]
   1f38a:	b00d      	add	sp, #52	; 0x34
   1f38c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1f38e:	46c0      	nop			; (mov r8, r8)
   1f390:	00021f98 	.word	0x00021f98
   1f394:	0001f5ad 	.word	0x0001f5ad
   1f398:	0001f6dd 	.word	0x0001f6dd
   1f39c:	fffffaff 	.word	0xfffffaff
   1f3a0:	00021fa4 	.word	0x00021fa4
   1f3a4:	fffff6ff 	.word	0xfffff6ff

0001f3a8 <_putc_r>:
   1f3a8:	b570      	push	{r4, r5, r6, lr}
   1f3aa:	0006      	movs	r6, r0
   1f3ac:	000d      	movs	r5, r1
   1f3ae:	0014      	movs	r4, r2
   1f3b0:	2800      	cmp	r0, #0
   1f3b2:	d004      	beq.n	1f3be <_putc_r+0x16>
   1f3b4:	6983      	ldr	r3, [r0, #24]
   1f3b6:	2b00      	cmp	r3, #0
   1f3b8:	d101      	bne.n	1f3be <_putc_r+0x16>
   1f3ba:	f7fc fd47 	bl	1be4c <__sinit>
   1f3be:	4b12      	ldr	r3, [pc, #72]	; (1f408 <_putc_r+0x60>)
   1f3c0:	429c      	cmp	r4, r3
   1f3c2:	d111      	bne.n	1f3e8 <_putc_r+0x40>
   1f3c4:	6874      	ldr	r4, [r6, #4]
   1f3c6:	68a3      	ldr	r3, [r4, #8]
   1f3c8:	3b01      	subs	r3, #1
   1f3ca:	60a3      	str	r3, [r4, #8]
   1f3cc:	2b00      	cmp	r3, #0
   1f3ce:	da05      	bge.n	1f3dc <_putc_r+0x34>
   1f3d0:	69a2      	ldr	r2, [r4, #24]
   1f3d2:	4293      	cmp	r3, r2
   1f3d4:	db12      	blt.n	1f3fc <_putc_r+0x54>
   1f3d6:	b2eb      	uxtb	r3, r5
   1f3d8:	2b0a      	cmp	r3, #10
   1f3da:	d00f      	beq.n	1f3fc <_putc_r+0x54>
   1f3dc:	6823      	ldr	r3, [r4, #0]
   1f3de:	b2e8      	uxtb	r0, r5
   1f3e0:	1c5a      	adds	r2, r3, #1
   1f3e2:	6022      	str	r2, [r4, #0]
   1f3e4:	701d      	strb	r5, [r3, #0]
   1f3e6:	bd70      	pop	{r4, r5, r6, pc}
   1f3e8:	4b08      	ldr	r3, [pc, #32]	; (1f40c <_putc_r+0x64>)
   1f3ea:	429c      	cmp	r4, r3
   1f3ec:	d101      	bne.n	1f3f2 <_putc_r+0x4a>
   1f3ee:	68b4      	ldr	r4, [r6, #8]
   1f3f0:	e7e9      	b.n	1f3c6 <_putc_r+0x1e>
   1f3f2:	4b07      	ldr	r3, [pc, #28]	; (1f410 <_putc_r+0x68>)
   1f3f4:	429c      	cmp	r4, r3
   1f3f6:	d1e6      	bne.n	1f3c6 <_putc_r+0x1e>
   1f3f8:	68f4      	ldr	r4, [r6, #12]
   1f3fa:	e7e4      	b.n	1f3c6 <_putc_r+0x1e>
   1f3fc:	0022      	movs	r2, r4
   1f3fe:	0029      	movs	r1, r5
   1f400:	0030      	movs	r0, r6
   1f402:	f7fd fff1 	bl	1d3e8 <__swbuf_r>
   1f406:	e7ee      	b.n	1f3e6 <_putc_r+0x3e>
   1f408:	00021cb0 	.word	0x00021cb0
   1f40c:	00021cd0 	.word	0x00021cd0
   1f410:	00021c90 	.word	0x00021c90

0001f414 <_read_r>:
   1f414:	b570      	push	{r4, r5, r6, lr}
   1f416:	0005      	movs	r5, r0
   1f418:	0008      	movs	r0, r1
   1f41a:	0011      	movs	r1, r2
   1f41c:	2200      	movs	r2, #0
   1f41e:	4c06      	ldr	r4, [pc, #24]	; (1f438 <_read_r+0x24>)
   1f420:	6022      	str	r2, [r4, #0]
   1f422:	001a      	movs	r2, r3
   1f424:	f7f0 f868 	bl	f4f8 <_read>
   1f428:	1c43      	adds	r3, r0, #1
   1f42a:	d103      	bne.n	1f434 <_read_r+0x20>
   1f42c:	6823      	ldr	r3, [r4, #0]
   1f42e:	2b00      	cmp	r3, #0
   1f430:	d000      	beq.n	1f434 <_read_r+0x20>
   1f432:	602b      	str	r3, [r5, #0]
   1f434:	bd70      	pop	{r4, r5, r6, pc}
   1f436:	46c0      	nop			; (mov r8, r8)
   1f438:	20002c00 	.word	0x20002c00

0001f43c <__sccl>:
   1f43c:	b570      	push	{r4, r5, r6, lr}
   1f43e:	780b      	ldrb	r3, [r1, #0]
   1f440:	2b5e      	cmp	r3, #94	; 0x5e
   1f442:	d00d      	beq.n	1f460 <__sccl+0x24>
   1f444:	1c4a      	adds	r2, r1, #1
   1f446:	2100      	movs	r1, #0
   1f448:	0004      	movs	r4, r0
   1f44a:	1c45      	adds	r5, r0, #1
   1f44c:	35ff      	adds	r5, #255	; 0xff
   1f44e:	7021      	strb	r1, [r4, #0]
   1f450:	3401      	adds	r4, #1
   1f452:	42a5      	cmp	r5, r4
   1f454:	d1fb      	bne.n	1f44e <__sccl+0x12>
   1f456:	2b00      	cmp	r3, #0
   1f458:	d106      	bne.n	1f468 <__sccl+0x2c>
   1f45a:	3a01      	subs	r2, #1
   1f45c:	0010      	movs	r0, r2
   1f45e:	bd70      	pop	{r4, r5, r6, pc}
   1f460:	1c8a      	adds	r2, r1, #2
   1f462:	784b      	ldrb	r3, [r1, #1]
   1f464:	2101      	movs	r1, #1
   1f466:	e7ef      	b.n	1f448 <__sccl+0xc>
   1f468:	2401      	movs	r4, #1
   1f46a:	404c      	eors	r4, r1
   1f46c:	0011      	movs	r1, r2
   1f46e:	54c4      	strb	r4, [r0, r3]
   1f470:	780d      	ldrb	r5, [r1, #0]
   1f472:	1c4a      	adds	r2, r1, #1
   1f474:	2d2d      	cmp	r5, #45	; 0x2d
   1f476:	d007      	beq.n	1f488 <__sccl+0x4c>
   1f478:	2d5d      	cmp	r5, #93	; 0x5d
   1f47a:	d0ef      	beq.n	1f45c <__sccl+0x20>
   1f47c:	2d00      	cmp	r5, #0
   1f47e:	d101      	bne.n	1f484 <__sccl+0x48>
   1f480:	000a      	movs	r2, r1
   1f482:	e7eb      	b.n	1f45c <__sccl+0x20>
   1f484:	002b      	movs	r3, r5
   1f486:	e7f1      	b.n	1f46c <__sccl+0x30>
   1f488:	784e      	ldrb	r6, [r1, #1]
   1f48a:	2e5d      	cmp	r6, #93	; 0x5d
   1f48c:	d0fa      	beq.n	1f484 <__sccl+0x48>
   1f48e:	42b3      	cmp	r3, r6
   1f490:	dcf8      	bgt.n	1f484 <__sccl+0x48>
   1f492:	3102      	adds	r1, #2
   1f494:	3301      	adds	r3, #1
   1f496:	54c4      	strb	r4, [r0, r3]
   1f498:	429e      	cmp	r6, r3
   1f49a:	dcfb      	bgt.n	1f494 <__sccl+0x58>
   1f49c:	e7e8      	b.n	1f470 <__sccl+0x34>
	...

0001f4a0 <_strtol_l.isra.0>:
   1f4a0:	b5f0      	push	{r4, r5, r6, r7, lr}
   1f4a2:	001f      	movs	r7, r3
   1f4a4:	000e      	movs	r6, r1
   1f4a6:	b087      	sub	sp, #28
   1f4a8:	9005      	str	r0, [sp, #20]
   1f4aa:	9103      	str	r1, [sp, #12]
   1f4ac:	9202      	str	r2, [sp, #8]
   1f4ae:	980c      	ldr	r0, [sp, #48]	; 0x30
   1f4b0:	7834      	ldrb	r4, [r6, #0]
   1f4b2:	f7fc fd85 	bl	1bfc0 <__locale_ctype_ptr_l>
   1f4b6:	2208      	movs	r2, #8
   1f4b8:	1900      	adds	r0, r0, r4
   1f4ba:	7843      	ldrb	r3, [r0, #1]
   1f4bc:	1c75      	adds	r5, r6, #1
   1f4be:	4013      	ands	r3, r2
   1f4c0:	d10c      	bne.n	1f4dc <_strtol_l.isra.0+0x3c>
   1f4c2:	2c2d      	cmp	r4, #45	; 0x2d
   1f4c4:	d10c      	bne.n	1f4e0 <_strtol_l.isra.0+0x40>
   1f4c6:	3301      	adds	r3, #1
   1f4c8:	782c      	ldrb	r4, [r5, #0]
   1f4ca:	9301      	str	r3, [sp, #4]
   1f4cc:	1cb5      	adds	r5, r6, #2
   1f4ce:	2f00      	cmp	r7, #0
   1f4d0:	d00c      	beq.n	1f4ec <_strtol_l.isra.0+0x4c>
   1f4d2:	2f10      	cmp	r7, #16
   1f4d4:	d114      	bne.n	1f500 <_strtol_l.isra.0+0x60>
   1f4d6:	2c30      	cmp	r4, #48	; 0x30
   1f4d8:	d00a      	beq.n	1f4f0 <_strtol_l.isra.0+0x50>
   1f4da:	e011      	b.n	1f500 <_strtol_l.isra.0+0x60>
   1f4dc:	002e      	movs	r6, r5
   1f4de:	e7e6      	b.n	1f4ae <_strtol_l.isra.0+0xe>
   1f4e0:	9301      	str	r3, [sp, #4]
   1f4e2:	2c2b      	cmp	r4, #43	; 0x2b
   1f4e4:	d1f3      	bne.n	1f4ce <_strtol_l.isra.0+0x2e>
   1f4e6:	782c      	ldrb	r4, [r5, #0]
   1f4e8:	1cb5      	adds	r5, r6, #2
   1f4ea:	e7f0      	b.n	1f4ce <_strtol_l.isra.0+0x2e>
   1f4ec:	2c30      	cmp	r4, #48	; 0x30
   1f4ee:	d12f      	bne.n	1f550 <_strtol_l.isra.0+0xb0>
   1f4f0:	2220      	movs	r2, #32
   1f4f2:	782b      	ldrb	r3, [r5, #0]
   1f4f4:	4393      	bics	r3, r2
   1f4f6:	2b58      	cmp	r3, #88	; 0x58
   1f4f8:	d151      	bne.n	1f59e <_strtol_l.isra.0+0xfe>
   1f4fa:	2710      	movs	r7, #16
   1f4fc:	786c      	ldrb	r4, [r5, #1]
   1f4fe:	3502      	adds	r5, #2
   1f500:	9b01      	ldr	r3, [sp, #4]
   1f502:	4a29      	ldr	r2, [pc, #164]	; (1f5a8 <_strtol_l.isra.0+0x108>)
   1f504:	0039      	movs	r1, r7
   1f506:	189e      	adds	r6, r3, r2
   1f508:	0030      	movs	r0, r6
   1f50a:	f7fa fc6b 	bl	19de4 <__aeabi_uidivmod>
   1f50e:	0030      	movs	r0, r6
   1f510:	9104      	str	r1, [sp, #16]
   1f512:	0039      	movs	r1, r7
   1f514:	f7fa fbe0 	bl	19cd8 <__udivsi3>
   1f518:	2101      	movs	r1, #1
   1f51a:	2300      	movs	r3, #0
   1f51c:	4249      	negs	r1, r1
   1f51e:	0002      	movs	r2, r0
   1f520:	468c      	mov	ip, r1
   1f522:	0018      	movs	r0, r3
   1f524:	0021      	movs	r1, r4
   1f526:	3930      	subs	r1, #48	; 0x30
   1f528:	2909      	cmp	r1, #9
   1f52a:	d813      	bhi.n	1f554 <_strtol_l.isra.0+0xb4>
   1f52c:	000c      	movs	r4, r1
   1f52e:	42a7      	cmp	r7, r4
   1f530:	dd1c      	ble.n	1f56c <_strtol_l.isra.0+0xcc>
   1f532:	1c59      	adds	r1, r3, #1
   1f534:	d009      	beq.n	1f54a <_strtol_l.isra.0+0xaa>
   1f536:	4663      	mov	r3, ip
   1f538:	4282      	cmp	r2, r0
   1f53a:	d306      	bcc.n	1f54a <_strtol_l.isra.0+0xaa>
   1f53c:	d102      	bne.n	1f544 <_strtol_l.isra.0+0xa4>
   1f53e:	9904      	ldr	r1, [sp, #16]
   1f540:	42a1      	cmp	r1, r4
   1f542:	db02      	blt.n	1f54a <_strtol_l.isra.0+0xaa>
   1f544:	2301      	movs	r3, #1
   1f546:	4378      	muls	r0, r7
   1f548:	1820      	adds	r0, r4, r0
   1f54a:	782c      	ldrb	r4, [r5, #0]
   1f54c:	3501      	adds	r5, #1
   1f54e:	e7e9      	b.n	1f524 <_strtol_l.isra.0+0x84>
   1f550:	270a      	movs	r7, #10
   1f552:	e7d5      	b.n	1f500 <_strtol_l.isra.0+0x60>
   1f554:	0021      	movs	r1, r4
   1f556:	3941      	subs	r1, #65	; 0x41
   1f558:	2919      	cmp	r1, #25
   1f55a:	d801      	bhi.n	1f560 <_strtol_l.isra.0+0xc0>
   1f55c:	3c37      	subs	r4, #55	; 0x37
   1f55e:	e7e6      	b.n	1f52e <_strtol_l.isra.0+0x8e>
   1f560:	0021      	movs	r1, r4
   1f562:	3961      	subs	r1, #97	; 0x61
   1f564:	2919      	cmp	r1, #25
   1f566:	d801      	bhi.n	1f56c <_strtol_l.isra.0+0xcc>
   1f568:	3c57      	subs	r4, #87	; 0x57
   1f56a:	e7e0      	b.n	1f52e <_strtol_l.isra.0+0x8e>
   1f56c:	1c5a      	adds	r2, r3, #1
   1f56e:	d108      	bne.n	1f582 <_strtol_l.isra.0+0xe2>
   1f570:	9a05      	ldr	r2, [sp, #20]
   1f572:	3323      	adds	r3, #35	; 0x23
   1f574:	6013      	str	r3, [r2, #0]
   1f576:	9b02      	ldr	r3, [sp, #8]
   1f578:	0030      	movs	r0, r6
   1f57a:	2b00      	cmp	r3, #0
   1f57c:	d10b      	bne.n	1f596 <_strtol_l.isra.0+0xf6>
   1f57e:	b007      	add	sp, #28
   1f580:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1f582:	9a01      	ldr	r2, [sp, #4]
   1f584:	2a00      	cmp	r2, #0
   1f586:	d000      	beq.n	1f58a <_strtol_l.isra.0+0xea>
   1f588:	4240      	negs	r0, r0
   1f58a:	9a02      	ldr	r2, [sp, #8]
   1f58c:	2a00      	cmp	r2, #0
   1f58e:	d0f6      	beq.n	1f57e <_strtol_l.isra.0+0xde>
   1f590:	9a03      	ldr	r2, [sp, #12]
   1f592:	2b00      	cmp	r3, #0
   1f594:	d000      	beq.n	1f598 <_strtol_l.isra.0+0xf8>
   1f596:	1e6a      	subs	r2, r5, #1
   1f598:	9b02      	ldr	r3, [sp, #8]
   1f59a:	601a      	str	r2, [r3, #0]
   1f59c:	e7ef      	b.n	1f57e <_strtol_l.isra.0+0xde>
   1f59e:	2430      	movs	r4, #48	; 0x30
   1f5a0:	2f00      	cmp	r7, #0
   1f5a2:	d1ad      	bne.n	1f500 <_strtol_l.isra.0+0x60>
   1f5a4:	3708      	adds	r7, #8
   1f5a6:	e7ab      	b.n	1f500 <_strtol_l.isra.0+0x60>
   1f5a8:	7fffffff 	.word	0x7fffffff

0001f5ac <_strtol_r>:
   1f5ac:	b513      	push	{r0, r1, r4, lr}
   1f5ae:	4c05      	ldr	r4, [pc, #20]	; (1f5c4 <_strtol_r+0x18>)
   1f5b0:	6824      	ldr	r4, [r4, #0]
   1f5b2:	6a24      	ldr	r4, [r4, #32]
   1f5b4:	2c00      	cmp	r4, #0
   1f5b6:	d100      	bne.n	1f5ba <_strtol_r+0xe>
   1f5b8:	4c03      	ldr	r4, [pc, #12]	; (1f5c8 <_strtol_r+0x1c>)
   1f5ba:	9400      	str	r4, [sp, #0]
   1f5bc:	f7ff ff70 	bl	1f4a0 <_strtol_l.isra.0>
   1f5c0:	bd16      	pop	{r1, r2, r4, pc}
   1f5c2:	46c0      	nop			; (mov r8, r8)
   1f5c4:	2000022c 	.word	0x2000022c
   1f5c8:	20000290 	.word	0x20000290

0001f5cc <_strtoul_l.isra.0>:
   1f5cc:	b5f0      	push	{r4, r5, r6, r7, lr}
   1f5ce:	001f      	movs	r7, r3
   1f5d0:	000e      	movs	r6, r1
   1f5d2:	b087      	sub	sp, #28
   1f5d4:	9005      	str	r0, [sp, #20]
   1f5d6:	9103      	str	r1, [sp, #12]
   1f5d8:	9201      	str	r2, [sp, #4]
   1f5da:	980c      	ldr	r0, [sp, #48]	; 0x30
   1f5dc:	7834      	ldrb	r4, [r6, #0]
   1f5de:	f7fc fcef 	bl	1bfc0 <__locale_ctype_ptr_l>
   1f5e2:	2208      	movs	r2, #8
   1f5e4:	1900      	adds	r0, r0, r4
   1f5e6:	7843      	ldrb	r3, [r0, #1]
   1f5e8:	1c75      	adds	r5, r6, #1
   1f5ea:	4013      	ands	r3, r2
   1f5ec:	d10c      	bne.n	1f608 <_strtoul_l.isra.0+0x3c>
   1f5ee:	2c2d      	cmp	r4, #45	; 0x2d
   1f5f0:	d10c      	bne.n	1f60c <_strtoul_l.isra.0+0x40>
   1f5f2:	3301      	adds	r3, #1
   1f5f4:	782c      	ldrb	r4, [r5, #0]
   1f5f6:	9302      	str	r3, [sp, #8]
   1f5f8:	1cb5      	adds	r5, r6, #2
   1f5fa:	2f00      	cmp	r7, #0
   1f5fc:	d00c      	beq.n	1f618 <_strtoul_l.isra.0+0x4c>
   1f5fe:	2f10      	cmp	r7, #16
   1f600:	d114      	bne.n	1f62c <_strtoul_l.isra.0+0x60>
   1f602:	2c30      	cmp	r4, #48	; 0x30
   1f604:	d00a      	beq.n	1f61c <_strtoul_l.isra.0+0x50>
   1f606:	e011      	b.n	1f62c <_strtoul_l.isra.0+0x60>
   1f608:	002e      	movs	r6, r5
   1f60a:	e7e6      	b.n	1f5da <_strtoul_l.isra.0+0xe>
   1f60c:	9302      	str	r3, [sp, #8]
   1f60e:	2c2b      	cmp	r4, #43	; 0x2b
   1f610:	d1f3      	bne.n	1f5fa <_strtoul_l.isra.0+0x2e>
   1f612:	782c      	ldrb	r4, [r5, #0]
   1f614:	1cb5      	adds	r5, r6, #2
   1f616:	e7f0      	b.n	1f5fa <_strtoul_l.isra.0+0x2e>
   1f618:	2c30      	cmp	r4, #48	; 0x30
   1f61a:	d12f      	bne.n	1f67c <_strtoul_l.isra.0+0xb0>
   1f61c:	2220      	movs	r2, #32
   1f61e:	782b      	ldrb	r3, [r5, #0]
   1f620:	4393      	bics	r3, r2
   1f622:	2b58      	cmp	r3, #88	; 0x58
   1f624:	d154      	bne.n	1f6d0 <_strtoul_l.isra.0+0x104>
   1f626:	2710      	movs	r7, #16
   1f628:	786c      	ldrb	r4, [r5, #1]
   1f62a:	3502      	adds	r5, #2
   1f62c:	2001      	movs	r0, #1
   1f62e:	0039      	movs	r1, r7
   1f630:	4240      	negs	r0, r0
   1f632:	f7fa fb51 	bl	19cd8 <__udivsi3>
   1f636:	0006      	movs	r6, r0
   1f638:	2001      	movs	r0, #1
   1f63a:	0039      	movs	r1, r7
   1f63c:	4240      	negs	r0, r0
   1f63e:	f7fa fbd1 	bl	19de4 <__aeabi_uidivmod>
   1f642:	2300      	movs	r3, #0
   1f644:	9104      	str	r1, [sp, #16]
   1f646:	2101      	movs	r1, #1
   1f648:	2201      	movs	r2, #1
   1f64a:	0018      	movs	r0, r3
   1f64c:	468c      	mov	ip, r1
   1f64e:	4252      	negs	r2, r2
   1f650:	0021      	movs	r1, r4
   1f652:	3930      	subs	r1, #48	; 0x30
   1f654:	2909      	cmp	r1, #9
   1f656:	d813      	bhi.n	1f680 <_strtoul_l.isra.0+0xb4>
   1f658:	000c      	movs	r4, r1
   1f65a:	42a7      	cmp	r7, r4
   1f65c:	dd1e      	ble.n	1f69c <_strtoul_l.isra.0+0xd0>
   1f65e:	2b00      	cmp	r3, #0
   1f660:	db1a      	blt.n	1f698 <_strtoul_l.isra.0+0xcc>
   1f662:	0013      	movs	r3, r2
   1f664:	4286      	cmp	r6, r0
   1f666:	d306      	bcc.n	1f676 <_strtoul_l.isra.0+0xaa>
   1f668:	d102      	bne.n	1f670 <_strtoul_l.isra.0+0xa4>
   1f66a:	9904      	ldr	r1, [sp, #16]
   1f66c:	42a1      	cmp	r1, r4
   1f66e:	db02      	blt.n	1f676 <_strtoul_l.isra.0+0xaa>
   1f670:	4663      	mov	r3, ip
   1f672:	4378      	muls	r0, r7
   1f674:	1820      	adds	r0, r4, r0
   1f676:	782c      	ldrb	r4, [r5, #0]
   1f678:	3501      	adds	r5, #1
   1f67a:	e7e9      	b.n	1f650 <_strtoul_l.isra.0+0x84>
   1f67c:	270a      	movs	r7, #10
   1f67e:	e7d5      	b.n	1f62c <_strtoul_l.isra.0+0x60>
   1f680:	0021      	movs	r1, r4
   1f682:	3941      	subs	r1, #65	; 0x41
   1f684:	2919      	cmp	r1, #25
   1f686:	d801      	bhi.n	1f68c <_strtoul_l.isra.0+0xc0>
   1f688:	3c37      	subs	r4, #55	; 0x37
   1f68a:	e7e6      	b.n	1f65a <_strtoul_l.isra.0+0x8e>
   1f68c:	0021      	movs	r1, r4
   1f68e:	3961      	subs	r1, #97	; 0x61
   1f690:	2919      	cmp	r1, #25
   1f692:	d803      	bhi.n	1f69c <_strtoul_l.isra.0+0xd0>
   1f694:	3c57      	subs	r4, #87	; 0x57
   1f696:	e7e0      	b.n	1f65a <_strtoul_l.isra.0+0x8e>
   1f698:	0013      	movs	r3, r2
   1f69a:	e7ec      	b.n	1f676 <_strtoul_l.isra.0+0xaa>
   1f69c:	2b00      	cmp	r3, #0
   1f69e:	da09      	bge.n	1f6b4 <_strtoul_l.isra.0+0xe8>
   1f6a0:	2322      	movs	r3, #34	; 0x22
   1f6a2:	2001      	movs	r0, #1
   1f6a4:	9a05      	ldr	r2, [sp, #20]
   1f6a6:	4240      	negs	r0, r0
   1f6a8:	6013      	str	r3, [r2, #0]
   1f6aa:	9b01      	ldr	r3, [sp, #4]
   1f6ac:	2b00      	cmp	r3, #0
   1f6ae:	d10b      	bne.n	1f6c8 <_strtoul_l.isra.0+0xfc>
   1f6b0:	b007      	add	sp, #28
   1f6b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1f6b4:	9a02      	ldr	r2, [sp, #8]
   1f6b6:	2a00      	cmp	r2, #0
   1f6b8:	d000      	beq.n	1f6bc <_strtoul_l.isra.0+0xf0>
   1f6ba:	4240      	negs	r0, r0
   1f6bc:	9a01      	ldr	r2, [sp, #4]
   1f6be:	2a00      	cmp	r2, #0
   1f6c0:	d0f6      	beq.n	1f6b0 <_strtoul_l.isra.0+0xe4>
   1f6c2:	9a03      	ldr	r2, [sp, #12]
   1f6c4:	2b00      	cmp	r3, #0
   1f6c6:	d000      	beq.n	1f6ca <_strtoul_l.isra.0+0xfe>
   1f6c8:	1e6a      	subs	r2, r5, #1
   1f6ca:	9b01      	ldr	r3, [sp, #4]
   1f6cc:	601a      	str	r2, [r3, #0]
   1f6ce:	e7ef      	b.n	1f6b0 <_strtoul_l.isra.0+0xe4>
   1f6d0:	2430      	movs	r4, #48	; 0x30
   1f6d2:	2f00      	cmp	r7, #0
   1f6d4:	d1aa      	bne.n	1f62c <_strtoul_l.isra.0+0x60>
   1f6d6:	3708      	adds	r7, #8
   1f6d8:	e7a8      	b.n	1f62c <_strtoul_l.isra.0+0x60>
	...

0001f6dc <_strtoul_r>:
   1f6dc:	b513      	push	{r0, r1, r4, lr}
   1f6de:	4c05      	ldr	r4, [pc, #20]	; (1f6f4 <_strtoul_r+0x18>)
   1f6e0:	6824      	ldr	r4, [r4, #0]
   1f6e2:	6a24      	ldr	r4, [r4, #32]
   1f6e4:	2c00      	cmp	r4, #0
   1f6e6:	d100      	bne.n	1f6ea <_strtoul_r+0xe>
   1f6e8:	4c03      	ldr	r4, [pc, #12]	; (1f6f8 <_strtoul_r+0x1c>)
   1f6ea:	9400      	str	r4, [sp, #0]
   1f6ec:	f7ff ff6e 	bl	1f5cc <_strtoul_l.isra.0>
   1f6f0:	bd16      	pop	{r1, r2, r4, pc}
   1f6f2:	46c0      	nop			; (mov r8, r8)
   1f6f4:	2000022c 	.word	0x2000022c
   1f6f8:	20000290 	.word	0x20000290

0001f6fc <__submore>:
   1f6fc:	000b      	movs	r3, r1
   1f6fe:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1f700:	6b4d      	ldr	r5, [r1, #52]	; 0x34
   1f702:	3344      	adds	r3, #68	; 0x44
   1f704:	000c      	movs	r4, r1
   1f706:	429d      	cmp	r5, r3
   1f708:	d11c      	bne.n	1f744 <__submore+0x48>
   1f70a:	2680      	movs	r6, #128	; 0x80
   1f70c:	00f6      	lsls	r6, r6, #3
   1f70e:	0031      	movs	r1, r6
   1f710:	f7fc fd82 	bl	1c218 <_malloc_r>
   1f714:	2800      	cmp	r0, #0
   1f716:	d102      	bne.n	1f71e <__submore+0x22>
   1f718:	2001      	movs	r0, #1
   1f71a:	4240      	negs	r0, r0
   1f71c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   1f71e:	0023      	movs	r3, r4
   1f720:	6360      	str	r0, [r4, #52]	; 0x34
   1f722:	63a6      	str	r6, [r4, #56]	; 0x38
   1f724:	3346      	adds	r3, #70	; 0x46
   1f726:	781a      	ldrb	r2, [r3, #0]
   1f728:	4b10      	ldr	r3, [pc, #64]	; (1f76c <__submore+0x70>)
   1f72a:	54c2      	strb	r2, [r0, r3]
   1f72c:	0023      	movs	r3, r4
   1f72e:	3345      	adds	r3, #69	; 0x45
   1f730:	781a      	ldrb	r2, [r3, #0]
   1f732:	4b0f      	ldr	r3, [pc, #60]	; (1f770 <__submore+0x74>)
   1f734:	54c2      	strb	r2, [r0, r3]
   1f736:	782a      	ldrb	r2, [r5, #0]
   1f738:	4b0e      	ldr	r3, [pc, #56]	; (1f774 <__submore+0x78>)
   1f73a:	54c2      	strb	r2, [r0, r3]
   1f73c:	18c0      	adds	r0, r0, r3
   1f73e:	6020      	str	r0, [r4, #0]
   1f740:	2000      	movs	r0, #0
   1f742:	e7eb      	b.n	1f71c <__submore+0x20>
   1f744:	6b8e      	ldr	r6, [r1, #56]	; 0x38
   1f746:	0029      	movs	r1, r5
   1f748:	0073      	lsls	r3, r6, #1
   1f74a:	001a      	movs	r2, r3
   1f74c:	9301      	str	r3, [sp, #4]
   1f74e:	f000 f813 	bl	1f778 <_realloc_r>
   1f752:	1e05      	subs	r5, r0, #0
   1f754:	d0e0      	beq.n	1f718 <__submore+0x1c>
   1f756:	1987      	adds	r7, r0, r6
   1f758:	0001      	movs	r1, r0
   1f75a:	0032      	movs	r2, r6
   1f75c:	0038      	movs	r0, r7
   1f75e:	f7fc fced 	bl	1c13c <memcpy>
   1f762:	9b01      	ldr	r3, [sp, #4]
   1f764:	6027      	str	r7, [r4, #0]
   1f766:	6365      	str	r5, [r4, #52]	; 0x34
   1f768:	63a3      	str	r3, [r4, #56]	; 0x38
   1f76a:	e7e9      	b.n	1f740 <__submore+0x44>
   1f76c:	000003ff 	.word	0x000003ff
   1f770:	000003fe 	.word	0x000003fe
   1f774:	000003fd 	.word	0x000003fd

0001f778 <_realloc_r>:
   1f778:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1f77a:	0007      	movs	r7, r0
   1f77c:	000d      	movs	r5, r1
   1f77e:	0016      	movs	r6, r2
   1f780:	2900      	cmp	r1, #0
   1f782:	d105      	bne.n	1f790 <_realloc_r+0x18>
   1f784:	0011      	movs	r1, r2
   1f786:	f7fc fd47 	bl	1c218 <_malloc_r>
   1f78a:	0004      	movs	r4, r0
   1f78c:	0020      	movs	r0, r4
   1f78e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1f790:	2a00      	cmp	r2, #0
   1f792:	d103      	bne.n	1f79c <_realloc_r+0x24>
   1f794:	f7fc fcf6 	bl	1c184 <_free_r>
   1f798:	0034      	movs	r4, r6
   1f79a:	e7f7      	b.n	1f78c <_realloc_r+0x14>
   1f79c:	f000 f812 	bl	1f7c4 <_malloc_usable_size_r>
   1f7a0:	002c      	movs	r4, r5
   1f7a2:	4286      	cmp	r6, r0
   1f7a4:	d9f2      	bls.n	1f78c <_realloc_r+0x14>
   1f7a6:	0031      	movs	r1, r6
   1f7a8:	0038      	movs	r0, r7
   1f7aa:	f7fc fd35 	bl	1c218 <_malloc_r>
   1f7ae:	1e04      	subs	r4, r0, #0
   1f7b0:	d0ec      	beq.n	1f78c <_realloc_r+0x14>
   1f7b2:	0029      	movs	r1, r5
   1f7b4:	0032      	movs	r2, r6
   1f7b6:	f7fc fcc1 	bl	1c13c <memcpy>
   1f7ba:	0029      	movs	r1, r5
   1f7bc:	0038      	movs	r0, r7
   1f7be:	f7fc fce1 	bl	1c184 <_free_r>
   1f7c2:	e7e3      	b.n	1f78c <_realloc_r+0x14>

0001f7c4 <_malloc_usable_size_r>:
   1f7c4:	1f0b      	subs	r3, r1, #4
   1f7c6:	681b      	ldr	r3, [r3, #0]
   1f7c8:	1f18      	subs	r0, r3, #4
   1f7ca:	2b00      	cmp	r3, #0
   1f7cc:	da01      	bge.n	1f7d2 <_malloc_usable_size_r+0xe>
   1f7ce:	580b      	ldr	r3, [r1, r0]
   1f7d0:	18c0      	adds	r0, r0, r3
   1f7d2:	4770      	bx	lr

0001f7d4 <__gnu_thumb1_case_uqi>:
   1f7d4:	b402      	push	{r1}
   1f7d6:	4671      	mov	r1, lr
   1f7d8:	0849      	lsrs	r1, r1, #1
   1f7da:	0049      	lsls	r1, r1, #1
   1f7dc:	5c09      	ldrb	r1, [r1, r0]
   1f7de:	0049      	lsls	r1, r1, #1
   1f7e0:	448e      	add	lr, r1
   1f7e2:	bc02      	pop	{r1}
   1f7e4:	4770      	bx	lr
   1f7e6:	46c0      	nop			; (mov r8, r8)
   1f7e8:	000013f2 	.word	0x000013f2
   1f7ec:	000013da 	.word	0x000013da
   1f7f0:	000013f2 	.word	0x000013f2
   1f7f4:	000013e2 	.word	0x000013e2
   1f7f8:	000013f2 	.word	0x000013f2
   1f7fc:	000013d2 	.word	0x000013d2
   1f800:	000013f2 	.word	0x000013f2
   1f804:	000013f2 	.word	0x000013f2
   1f808:	000013f2 	.word	0x000013f2
   1f80c:	000013ea 	.word	0x000013ea
   1f810:	42002c00 	.word	0x42002c00
   1f814:	42003000 	.word	0x42003000
   1f818:	42003400 	.word	0x42003400
   1f81c:	42003800 	.word	0x42003800
   1f820:	42003c00 	.word	0x42003c00
   1f824:	1d1c1c1b 	.word	0x1d1c1c1b
   1f828:	0000001d 	.word	0x0000001d
   1f82c:	10000800 	.word	0x10000800
   1f830:	40002000 	.word	0x40002000
   1f834:	00008000 	.word	0x00008000
   1f838:	01020300 	.word	0x01020300

0001f83c <_usb_device_irq_bits>:
   1f83c:	00080004 00800070 01000001 00000200     ....p...........

0001f84c <_usb_endpoint_irq_bits>:
   1f84c:	60100c03 00003f9e 00003fb4 00004120     ...`.?...?.. A..
   1f85c:	000041ee 000042bc 50504128 52452829     .A...B..(APP)(ER
   1f86c:	255b2952 255b5d73 00005d64 61766e69     R)[%s][%d]..inva
   1f87c:	6564696c 636f6920 6320746c 0000646d     lide ioclt cmd..

0001f88c <__FUNCTION__.15792>:
   1f88c:	625f6d6e 695f7375 6c74636f 00000000     nm_bus_ioctl....
   1f89c:	50504128 4e492829 00294f46 776f6c53     (APP)(INFO).Slow
   1f8ac:	20676e69 6e776f64 002e2e2e 50504128     ing down....(APP
   1f8bc:	52452829 255b2952 255b5d73 00005d64     )(ERR)[%s][%d]..
   1f8cc:	46494828 69614629 6f74206c 6b617720     (HIF)Fail to wak
   1f8dc:	74207075 63206568 00706968 66696828     up the chip.(hif
   1f8ec:	49572029 485f4946 5f54534f 5f564352     ) WIFI_HOST_RCV_
   1f8fc:	4c525443 6220315f 66207375 006c6961     CTRL_1 bus fail.
   1f90c:	66696828 64612029 73657264 75622073     (hif) address bu
   1f91c:	61662073 00006c69 66696828 6f432029     s fail..(hif) Co
   1f92c:	70757272 20646574 6b636170 53207465     rrupted packet S
   1f93c:	20657a69 7525203d 204c3c20 7525203d     ize = %u <L = %u
   1f94c:	2047202c 7525203d 504f202c 25203d20     , G = %u, OP = %
   1f95c:	3e583230 0000000a 49464957 6c616320     02X>....WIFI cal
   1f96c:	6361626c 7369206b 746f6e20 67657220     lback is not reg
   1f97c:	65747369 00646572 6b6f6353 63207465     istered.Scoket c
   1f98c:	626c6c61 206b6361 6e207369 7220746f     allback is not r
   1f99c:	73696765 65726574 00000064 2061744f     egistered...Ota 
   1f9ac:	6c6c6163 6b636162 20736920 20746f6e     callback is not 
   1f9bc:	69676572 72657473 00006465 70797243     registered..Cryp
   1f9cc:	63206f74 626c6c61 206b6361 6e207369     to callback is n
   1f9dc:	7220746f 73696765 65726574 00000064     ot registered...
   1f9ec:	6d676953 61632061 61626c6c 69206b63     Sigma callback i
   1f9fc:	6f6e2073 65722074 74736967 64657265     s not registered
   1fa0c:	00000000 66696828 6e692029 696c6176     ....(hif) invali
   1fa1c:	72672064 2070756f 00004449 66696828     d group ID..(hif
   1fa2c:	6f682029 61207473 64207070 276e6469     ) host app didn'
   1fa3c:	65732074 58522074 6e6f4420 253c2065     t set RX Done <%
   1fa4c:	253c3e75 000a3e58 66696828 72572029     u><%X>..(hif) Wr
   1fa5c:	20676e6f 657a6953 00000000 66696828     ong Size....(hif
   1fa6c:	61462029 2065736c 65746e69 70757272     ) False interrup
   1fa7c:	6c252074 00000078 66696828 61462029     t %lx...(hif) Fa
   1fa8c:	74206c69 6552206f 69206461 7265746e     il to Read inter
   1fa9c:	74707572 67657220 00000000 46494828     rupt reg....(HIF
   1faac:	61462029 74206c69 6168206f 656c646e     ) Fail to handle
   1fabc:	746e6920 75727265 25207470 72742064      interrupt %d tr
   1facc:	67412079 2e6e6961 00000a2e 66696820     y Again..... hif
   1fadc:	6365725f 65766965 6e49203a 696c6176     _receive: Invali
   1faec:	72612064 656d7567 0000746e 20505041     d argument..APP 
   1fafc:	75716552 65747365 69532064 6920657a     Requested Size i
   1fb0c:	616c2073 72656772 61687420 6874206e     s larger than th
   1fb1c:	65722065 65766963 75622064 72656666     e recived buffer
   1fb2c:	7a697320 253c2065 253c3e75 0a3e756c      size <%u><%lu>.
   1fb3c:	00000000 20505041 75716552 65747365     ....APP Requeste
   1fb4c:	64412064 73657264 65622073 646e6f79     d Address beyond
   1fb5c:	65687420 63657220 64657669 66756220      the recived buf
   1fb6c:	20726566 72646461 20737365 20646e61     fer address and 
   1fb7c:	676e656c 00006874 20705247 6425203f     length..GRp ? %d
   1fb8c:	0000000a 00007a94 00007a64 00007a5c     .....z..dz..\z..
   1fb9c:	00007a74 00007a6c 00007a8c 00007a7c     tz..lz...z..|z..
   1fbac:	00007a84                                .z..

0001fbb0 <__FUNCTION__.13079>:
   1fbb0:	5f666968 646e6573 00000000              hif_send....

0001fbbc <__FUNCTION__.13089>:
   1fbbc:	5f666968 00727369                       hif_isr.

0001fbc4 <__FUNCTION__.13095>:
   1fbc4:	5f666968 646e6168 695f656c 00007273     hif_handle_isr..

0001fbd4 <__FUNCTION__.13107>:
   1fbd4:	5f666968 65636572 00657669              hif_receive.

0001fbe0 <__FUNCTION__.13123>:
   1fbe0:	5f666968 69676572 72657473 0062635f     hif_register_cb.
   1fbf0:	50504128 52452829 255b2952 255b5d73     (APP)(ERR)[%s][%
   1fc00:	00005d64 6f727245 65722072 76696563     d]..Error receiv
   1fc10:	20676e69 204c5353 6d6f7266 65687420     ing SSL from the
   1fc20:	46494820 00000000 5f666968 69676572      HIF....hif_regi
   1fc30:	72657473 2862635f 61662029 64656c69     ster_cb() failed
   1fc40:	74697720 65722068 64253d74 00000000      with ret=%d....

0001fc50 <__FUNCTION__.13094>:
   1fc50:	5f6d326d 5f6c7373 00006263              m2m_ssl_cb..

0001fc5c <__FUNCTION__.13140>:
   1fc5c:	5f6d326d 5f6c7373 74696e69 00000000     m2m_ssl_init....
   1fc6c:	50504128 4e492829 00294f46 666e6f43     (APP)(INFO).Conf
   1fc7c:	7463696c 49206465 20222050 252e7525     licted IP " %u.%
   1fc8c:	75252e75 2075252e 000a2022 50504128     u.%u.%u " ..(APP
   1fc9c:	52452829 255b2952 255b5d73 00005d64     )(ERR)[%s][%d]..
   1fcac:	20514552 20746f4e 69666564 2064656e     REQ Not defined 
   1fcbc:	000a6425 41564e49 2044494c 4e494f50     %d..INVALID POIN
   1fccc:	00524554 41564e49 2044494c 44495353     TER.INVALID SSID
   1fcdc:	00000000 41564e49 2044494c 00004843     ....INVALID CH..
   1fcec:	41564e49 2044494c 50434844 52455320     INVALID DHCP SER
   1fcfc:	20524556 00005049 41564e49 2044494c     VER IP..INVALID 
   1fd0c:	2059454b 45444e49 00000058 41564e49     KEY INDEX...INVA
   1fd1c:	2044494c 2059454b 49525453 5320474e     LID KEY STRING S
   1fd2c:	00455a49 41564e49 2044494c 2059454b     IZE.INVALID KEY 
   1fd3c:	455a4953 00000000 41564e49 2044494c     SIZE....INVALID 
   1fd4c:	20415057 2059454b 455a4953 00000000     WPA KEY SIZE....
   1fd5c:	41564e49 2044494c 48545541 49544e45     INVALID AUTHENTI
   1fd6c:	49544143 4d204e4f 0045444f 41564e49     CATION MODE.INVA
   1fd7c:	2044494c 6f206f4e 63732066 73206e61     LID No of scan s
   1fd8c:	73746f6c 64252021 0000000a 41564e49     lots! %d....INVA
   1fd9c:	2044494c 6e616373 6f6c7320 69742074     LID scan slot ti
   1fdac:	2021656d 000a6425 41564e49 2044494c     me! %d..INVALID 
   1fdbc:	6f206f4e 72702066 2065626f 75716572     No of probe requ
   1fdcc:	73747365 72657020 61637320 6c73206e     ests per scan sl
   1fddc:	2520746f 00000a64 41564e49 2044494c     ot %d...INVALID 
   1fdec:	49535352 72687420 6f687365 2520646c     RSSI threshold %
   1fdfc:	000a2064 6d726946 65726177 72657620     d ..Firmware ver
   1fe0c:	3a202020 2e752520 252e7525 76532075        : %u.%u.%u Sv
   1fe1c:	7665726e 0a752520 00000000 6d726946     nrev %u.....Firm
   1fe2c:	65726177 69754220 2520646c 69542073     ware Build %s Ti
   1fe3c:	2520656d 00000a73 6d726946 65726177     me %s...Firmware
   1fe4c:	6e694d20 69726420 20726576 20726576      Min driver ver 
   1fe5c:	7525203a 2e75252e 000a7525 76697244     : %u.%u.%u..Driv
   1fe6c:	76207265 203a7265 252e7525 75252e75     er ver: %u.%u.%u
   1fe7c:	0000000a 313a3631 37323a36 00000000     ....16:16:27....
   1fe8c:	20727041 32203831 00383130 76697244     Apr 18 2018.Driv
   1fe9c:	62207265 746c6975 20746120 25097325     er built at %s.%
   1feac:	00000a73 6d73694d 68637461 72694620     s...Mismatch Fir
   1febc:	7277616d 65562065 6f697372 0000006e     mawre Version...
   1fecc:	2079654b 6e207369 7620746f 64696c61     Key is not valid
   1fedc:	00000000 61766e49 2064696c 0079654b     ....Invalid Key.
   1feec:	44495353 4e454c20 564e4920 44494c41     SSID LEN INVALID
   1fefc:	00000000 49204843 4c41564e 00004449     ....CH INVALID..
   1ff0c:	61766e49 2064696c 20706557 2079656b     Invalid Wep key 
   1ff1c:	65646e69 64252078 0000000a 61766e49     index %d....Inva
   1ff2c:	2064696c 20706557 2079656b 676e656c     lid Wep key leng
   1ff3c:	25206874 00000a64 6f636e49 63657272     th %d...Incorrec
   1ff4c:	53502074 656b204b 656c2079 6874676e     t PSK key length
   1ff5c:	00000000 65646e75 656e6966 65732064     ....undefined se
   1ff6c:	79742063 00006570 5f53505f 56524553     c type.._PS_SERV
   1ff7c:	205f5245 6e207369 6420746f 6e696665     ER_ is not defin
   1ff8c:	00006465 7473694c 63206e65 6e6e6168     ed..Listen chann
   1ff9c:	73206c65 6c756f68 6e6f2064 6220796c     el should only b
   1ffac:	324d2065 49575f4d 435f4946 2f315f48     e M2M_WIFI_CH_1/
   1ffbc:	31312f36 00000020 45574f50 41532052     6/11 ...POWER SA
   1ffcc:	25204556 00000a64 41564e49 2044494c     VE %d...INVALID 
   1ffdc:	414d4f44 4e204e49 00454d41 474e5250     DOMAIN NAME.PRNG
   1ffec:	66754220 20726566 65637865 64656465      Buffer exceeded
   1fffc:	78616d20 6d756d69 7a697320 64252065      maximum size %d
   2000c:	20726f20 4c4c554e 66754220 0a726566      or NULL Buffer.
   2001c:	00000000                                ....

00020020 <__FUNCTION__.13058>:
   20020:	5f6d326d 69666977 0062635f              m2m_wifi_cb.

0002002c <__FUNCTION__.13087>:
   2002c:	5f6d326d 69666977 696e695f 00000074     m2m_wifi_init...

0002003c <__FUNCTION__.13115>:
   2003c:	5f6d326d 69666977 6e6f635f 7463656e     m2m_wifi_connect
   2004c:	0063735f 50504128 52452829 255b2952     _sc.(APP)(ERR)[%
   2005c:	255b5d73 00005d64 20737542 6f727265     s][%d]..Bus erro
   2006c:	35282072 64252e29 786c2520 0000000a     r (5).%d %lx....
   2007c:	6c696146 74206465 6177206f 2070756b     Failed to wakup 
   2008c:	20656874 70696863 00000000 50504128     the chip....(APP
   2009c:	4e492829 00294f46 76697244 65567265     )(INFO).DriverVe
   200ac:	666e4972 30203a6f 38302578 000a786c     rInfo: 0x%08lx..
   200bc:	6c696166 74206465 6564206f 696e692d     failed to de-ini
   200cc:	6c616974 00657a69 6c75705b 5f70756c     tialize.[pullup_
   200dc:	6c727463 66203a5d 656c6961 6f742064     ctrl]: failed to
   200ec:	61657220 00000064 6c75705b 5f70756c      read...[pullup_
   200fc:	6c727463 66203a5d 656c6961 6f742064     ctrl]: failed to
   2010c:	69727720 00006574                        write..

00020114 <__FUNCTION__.12921>:
   20114:	70696863 6b61775f 00000065              chip_wake...

00020120 <__FUNCTION__.12970>:
   20120:	70696863 6965645f 0074696e              chip_deinit.

0002012c <__FUNCTION__.12999>:
   2012c:	6c6c7570 635f7075 006c7274 50504128     pullup_ctrl.(APP
   2013c:	52452829 255b2952 255b5d73 00005d64     )(ERR)[%s][%d]..
   2014c:	696d6e5b 61747320 3a5d7472 69616620     [nmi start]: fai
   2015c:	6e69206c 62207469 00007375 50504128     l init bus..(APP
   2016c:	4e492829 00294f46 70696843 20444920     )(INFO).Chip ID 
   2017c:	0a786c25 00000000 6c696166 74206465     %lx.....failed t
   2018c:	6e65206f 656c6261 746e6920 75727265     o enable interru
   2019c:	2e737470 0000002e 696d6e5b 6f747320     pts.....[nmi sto
   201ac:	203a5d70 70696863 6965645f 2074696e     p]: chip_deinit 
   201bc:	6c696166 00000000 696d6e5b 6f747320     fail....[nmi sto
   201cc:	203a5d70 20495053 73616c66 69642068     p]: SPI flash di
   201dc:	6c626173 61662065 00006c69 696d6e5b     sable fail..[nmi
   201ec:	6f747320 203a5d70 6c696166 696e6920      stop]: fail ini
   201fc:	75622074 00000073                       t bus...

00020204 <__FUNCTION__.12969>:
   20204:	645f6d6e 695f7672 0074696e              nm_drv_init.

00020210 <__FUNCTION__.12976>:
   20210:	645f6d6e 645f7672 696e6965 00000074     nm_drv_deinit...

00020220 <crc7_syndrome_table>:
   20220:	1b120900 3f362d24 535a4148 777e656c     ....$-6?HAZSle~w
   20230:	020b1019 262f343d 4a435851 6e677c75     ....=4/&QXCJu|gn
   20240:	29203b32 0d041f16 6168737a 454c575e     2; )....zsha^WLE
   20250:	3039222b 141d060f 78716a63 5c554e47     +"90....cjqxGNU\
   20260:	7f766d64 5b524940 373e252c 131a0108     dmv.@IR[,%>7....
   20270:	666f747d 424b5059 2e273c35 0a031811     }tofYPKB5<'.....
   20280:	4d445f56 69607b72 050c171e 2128333a     V_DMr{`i....:3(!
   20290:	545d464f 7079626b 1c150e07 38312a23     OF]Tkbyp....#*18
   202a0:	5a534841 7e776c65 121b0009 363f242d     AHSZelw~....-$?6
   202b0:	434a5158 676e757c 0b021910 2f263d34     XQJC|ung....4=&/
   202c0:	68617a73 4c455e57 2029323b 040d161f     szahW^EL;2) ....
   202d0:	7178636a 555c474e 39302b22 1d140f06     jcxqNG\U"+09....
   202e0:	3e372c25 1a130801 767f646d 525b4049     %,7>....md.vI@[R
   202f0:	272e353c 030a1118 6f667d74 4b425950     <5.'....t}foPYBK
   20300:	0c051e17 28213a33 444d565f 6069727b     ....3:!(_VMD{ri`
   20310:	151c070e 3138232a 5d544f46 79706b62     ....*#81FOT]bkpy
   20320:	50504128 52452829 255b2952 255b5d73     (APP)(ERR)[%s][%
   20330:	00005d64 696d6e5b 69707320 46203a5d     d]..[nmi spi]: F
   20340:	656c6961 6d632064 72772064 2c657469     ailed cmd write,
   20350:	73756220 72726520 2e2e726f 0000002e      bus error......
   20360:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
   20370:	75622064 72652073 2e726f72 00002e2e     d bus error.....
   20380:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
   20390:	61642064 72206174 6f707365 2065736e     d data response 
   203a0:	64616572 7825202c 20782520 000a7825     read, %x %x %x..
   203b0:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
   203c0:	6d632064 65722064 6e6f7073 72206573     d cmd response r
   203d0:	2c646165 73756220 72726520 2e2e726f     ead, bus error..
   203e0:	0000002e 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
   203f0:	656c6961 61642064 72206174 6f707365     ailed data respo
   20400:	2065736e 64616572 7562202c 72652073     nse read, bus er
   20410:	2e726f72 00002e2e 696d6e5b 69707320     ror.....[nmi spi
   20420:	46203a5d 656c6961 61642064 72206174     ]: Failed data r
   20430:	6f707365 2065736e 64616572 282e2e2e     esponse read...(
   20440:	78323025 00000a29 696d6e5b 69707320     %02x)...[nmi spi
   20450:	46203a5d 656c6961 61642064 62206174     ]: Failed data b
   20460:	6b636f6c 61657220 62202c64 65207375     lock read, bus e
   20470:	726f7272 002e2e2e 696d6e5b 69707320     rror....[nmi spi
   20480:	46203a5d 656c6961 61642064 62206174     ]: Failed data b
   20490:	6b636f6c 63726320 61657220 62202c64     lock crc read, b
   204a0:	65207375 726f7272 002e2e2e 696d6e5b     us error....[nmi
   204b0:	69707320 46203a5d 656c6961 61642064      spi]: Failed da
   204c0:	62206174 6b636f6c 646d6320 69727720     ta block cmd wri
   204d0:	202c6574 20737562 6f727265 2e2e2e72     te, bus error...
   204e0:	00000000 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
   204f0:	656c6961 61642064 62206174 6b636f6c     ailed data block
   20500:	69727720 202c6574 20737562 6f727265      write, bus erro
   20510:	2e2e2e72 00000000 696d6e5b 69707320     r.......[nmi spi
   20520:	46203a5d 656c6961 61642064 62206174     ]: Failed data b
   20530:	6b636f6c 63726320 69727720 202c6574     lock crc write, 
   20540:	20737562 6f727265 2e2e2e72 00000000     bus error.......
   20550:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
   20560:	6d632064 77202c64 65746972 67657220     d cmd, write reg
   20570:	30252820 2e297838 000a2e2e 696d6e5b      (%08x).....[nmi
   20580:	69707320 46203a5d 656c6961 6d632064      spi]: Failed cm
   20590:	65722064 6e6f7073 202c6573 74697277     d response, writ
   205a0:	65722065 25282067 29783830 0a2e2e2e     e reg (%08x)....
   205b0:	00000000 65736552 6e612074 65722064     ....Reset and re
   205c0:	20797274 25206425 2520786c 000a786c     try %d %lx %lx..
   205d0:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
   205e0:	6d632064 77202c64 65746972 6f6c6220     d cmd, write blo
   205f0:	28206b63 78383025 2e2e2e29 0000000a     ck (%08x).......
   20600:	696d6e5b 69707320 203a5d20 6c696146     [nmi spi ]: Fail
   20610:	63206465 7220646d 6f707365 2c65736e     ed cmd response,
   20620:	69727720 62206574 6b636f6c 30252820      write block (%0
   20630:	2e297838 000a2e2e 696d6e5b 69707320     8x).....[nmi spi
   20640:	46203a5d 656c6961 6c622064 206b636f     ]: Failed block 
   20650:	61746164 69727720 2e2e6574 0000002e     data write......
   20660:	65736552 6e612074 65722064 20797274     Reset and retry 
   20670:	25206425 2520786c 00000a64 696d6e5b     %d %lx %d...[nmi
   20680:	69707320 46203a5d 656c6961 6d632064      spi]: Failed cm
   20690:	72202c64 20646165 20676572 38302528     d, read reg (%08
   206a0:	2e2e2978 00000a2e 696d6e5b 69707320     x)......[nmi spi
   206b0:	46203a5d 656c6961 6d632064 65722064     ]: Failed cmd re
   206c0:	6e6f7073 202c6573 64616572 67657220     sponse, read reg
   206d0:	30252820 2e297838 000a2e2e 696d6e5b      (%08x).....[nmi
   206e0:	69707320 46203a5d 656c6961 61642064      spi]: Failed da
   206f0:	72206174 2e646165 00002e2e 65736552     ta read.....Rese
   20700:	6e612074 65722064 20797274 25206425     t and retry %d %
   20710:	000a786c 696d6e5b 69707320 46203a5d     lx..[nmi spi]: F
   20720:	656c6961 6d632064 72202c64 20646165     ailed cmd, read 
   20730:	636f6c62 2528206b 29783830 0a2e2e2e     block (%08x)....
   20740:	00000000 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
   20750:	656c6961 6d632064 65722064 6e6f7073     ailed cmd respon
   20760:	202c6573 64616572 6f6c6220 28206b63     se, read block (
   20770:	78383025 2e2e2e29 0000000a 696d6e5b     %08x).......[nmi
   20780:	69707320 46203a5d 656c6961 6c622064      spi]: Failed bl
   20790:	206b636f 61746164 61657220 2e2e2e64     ock data read...
   207a0:	00000000 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
   207b0:	656c6961 6e692064 6e726574 72206c61     ailed internal r
   207c0:	20646165 746f7270 6c6f636f 74697720     ead protocol wit
   207d0:	52432068 6e6f2043 6572202c 69727974     h CRC on, retyri
   207e0:	7720676e 20687469 20435243 2e66666f     ng with CRC off.
   207f0:	00002e2e 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
   20800:	656c6961 6e692064 6e726574 72206c61     ailed internal r
   20810:	20646165 746f7270 6c6f636f 002e2e2e     ead protocol....
   20820:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
   20830:	6e692064 6e726574 77206c61 65746972     d internal write
   20840:	6f727020 6f636f74 6572206c 2e2e2e67      protocol reg...
   20850:	00000000 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
   20860:	206c6961 20646d63 64616572 69686320     ail cmd read chi
   20870:	64692070 002e2e2e 00009a1c 00009a1c     p id............
   20880:	00009aac 00009970 000099b6 000099d8     ....p...........
   20890:	00009a5e 00009a5e 00009b18 00009944     ^...^.......D...
   208a0:	00009b72 00009b72 00009b72 00009b72     r...r...r...r...
   208b0:	000099fa                                ....

000208b4 <__FUNCTION__.12274>:
   208b4:	5f697073 00646d63                       spi_cmd.

000208bc <__FUNCTION__.12281>:
   208bc:	5f697073 61746164 7073725f 00000000     spi_data_rsp....

000208cc <__FUNCTION__.12290>:
   208cc:	5f697073 5f646d63 00707372              spi_cmd_rsp.

000208d8 <__FUNCTION__.12306>:
   208d8:	5f697073 61746164 6165725f 00000064     spi_data_read...

000208e8 <__FUNCTION__.12321>:
   208e8:	5f697073 61746164 6972775f 00006574     spi_data_write..

000208f8 <__FUNCTION__.12333>:
   208f8:	5f697073 74697277 65725f65 00000067     spi_write_reg...

00020908 <__FUNCTION__.12344>:
   20908:	735f6d6e 775f6970 65746972 00000000     nm_spi_write....

00020918 <__FUNCTION__.12356>:
   20918:	5f697073 64616572 6765725f 00000000     spi_read_reg....

00020928 <__FUNCTION__.12369>:
   20928:	735f6d6e 725f6970 00646165              nm_spi_read.

00020934 <__FUNCTION__.12390>:
   20934:	735f6d6e 695f6970 0074696e 50504128     nm_spi_init.(APP
   20944:	4e492829 00294f46 52524528 75432952     )(INFO).(ERRR)Cu
   20954:	6e657272 253c2074 000a3e64 6b636f53     rrent <%d>..Sock
   20964:	25207465 65732064 6f697373 4449206e     et %d session ID
   20974:	25203d20 000a0d64 6b636f53 206f7420      = %d...Sock to 
   20984:	656c6564 3c206574 0a3e6425 00000000     delete <%d>.....
   20994:	50504128 52452829 255b2952 255b5d73     (APP)(ERR)[%s][%
   209a4:	00005d64 20494e53 65637845 20736465     d]..SNI Exceeds 
   209b4:	2078614d 676e654c 00006874 6e6b6e55     Max Length..Unkn
   209c4:	206e776f 204c5353 6b636f53 4f207465     own SSL Socket O
   209d4:	6f697470 6425206e 0000000a 20746f4e     ption %d....Not 
   209e4:	204c5353 6b636f53 00007465              SSL Socket..

000209f0 <__FUNCTION__.13235>:
   209f0:	536c7373 6f537465 704f6b63 00000074     sslSetSockOpt...
   20a00:	42000800 42000c00 42001000 42001400     ...B...B...B...B
   20a10:	42001800 42001c00 0c0b0a09 00000e0d     ...B...B........
   20a20:	0000e7de 0000e856 0000e856 0000e7fc     ....V...V.......
   20a30:	0000e7f6 0000e802 0000e7e4 0000e808     ................
   20a40:	0000e83c 0000eb20 0000eb70 0000eb70     <... ...p...p...
   20a50:	0000eb6c 0000eb12 0000eb32 0000eb02     l.......2.......
   20a60:	0000eb44 0000eb56 0000ebbe 0000ebec     D...V...........
   20a70:	0000ebec 0000ebe8 0000ebb8 0000ebc4     ................
   20a80:	0000ebb2 0000ebca 0000ebd0              ............

00020a8c <device_execution_time_204>:
   20a8c:	00260028 003e001c 002b0015 00450011     (.&...>...+...E.
   20a9c:	00020030 00180017 00230008 003c0016     0.........#...<.
   20aac:	00020001 0032001b 00050002 00160047     ......2.....G...
   20abc:	000c0020 002a0012                        .....*.

00020ac4 <device_execution_time_108>:
   20ac4:	000d0028 00140024 0032001c 000b0015     (...$.....2.....
   20ad4:	00730040 00170011 00020030 00200017     @.s.....0..... .
   20ae4:	000e0008 001d0016 00030001 00300046     ............F.0.
   20af4:	0017001b 00050002 00090047 003c0041     ........G...A.<.
   20b04:	000a0020 00480045 001a0012               ...E.H.....

00020b10 <device_execution_time_508>:
   20b10:	000d0028 00140024 0032001c 003a0043     (...$.....2.C.:.
   20b20:	000b0015 00730040 00170011 00020030     ....@.s.....0...
   20b30:	00200017 000e0008 001d0016 00030001     .. .............
   20b40:	00300046 0017001b 00050002 00090047     F.0.........G...
   20b50:	003c0041 000a0020 00480045 001a0012     A.<. ...E.H.....

00020b60 <device_execution_time_608_m0>:
   20b60:	001b0051 00280028 00190024 0032001c     Q...(.(.$.....2.
   20b70:	003c0043 00190015 00730040 00050030     C.<.....@.s.0...
   20b80:	00a50056 00230017 00370008 00140016     V.....#...7.....
   20b90:	00320046 0017001b 00050002 00500080     F.2...........P.
   20ba0:	00fa0077 00240047 00730041 000a0020     w...G.$.A.s. ...
   20bb0:	00690045 002d0012                       E.i...-.

00020bb8 <device_execution_time_608_m1>:
   20bb8:	001b0051 00280028 00190024 0032001c     Q...(.(.$.....2.
   20bc8:	008c0043 00230015 00d70040 00050030     C.....#.@...0...
   20bd8:	00a50056 00230017 00370008 00140016     V.....#...7.....
   20be8:	00320046 0017001b 00050002 00970080     F.2.............
   20bf8:	024e0077 002a0047 00dc0041 000a0020     w.N.G.*.A... ...
   20c08:	01270045 002d0012                       E.'...-.

00020c10 <device_execution_time_608_m2>:
   20c10:	001b0051 00280028 00190024 0032001c     Q...(.(.$.....2.
   20c20:	01c70043 00230015 02760040 00050030     C.....#.@.v.0...
   20c30:	00a50056 00230017 00370008 00140016     V.....#...7.....
   20c40:	00320046 0017001b 00050002 01c30080     F.2.............
   20c50:	08980077 004b0047 02990041 000a0020     w...G.K.A... ...
   20c60:	043d0045 002d0012 40030004 00000a0d     E.=...-....@....
   20c70:	58323025 00000020 58323025 00000000     %02X ...%02X....
   20c80:	00007825 754e203a 69206c6c 7475706e     %x..: Null input
   20c90:	72617020 74656d61 2d207265 7453202d      parameter -- St
   20ca0:	73757461 3025203a 0a0d5832 00000000     atus: %02X......
   20cb0:	00007325 0000000d 6e49203a 696c6176     %s......: Invali
   20cc0:	61622064 34366573 706e6920 2d207475     d base64 input -
   20cd0:	7453202d 73757461 3025203a 0a0d5832     - Status: %02X..
   20ce0:	00000000 654c203a 6874676e 20666f20     ....: Length of 
   20cf0:	6f636564 20646564 66667562 74207265     decoded buffer t
   20d00:	73206f6f 6c6c616d 202d2d20 74617453     oo small -- Stat
   20d10:	203a7375 58323025 00000a0d 654c203a     us: %02X....: Le
   20d20:	6874676e 20666f20 6f636e65 20646564     ngth of encoded 
   20d30:	66667562 74207265 73206f6f 6c6c616d     buffer too small
   20d40:	202d2d20 74617453 203a7375 58323025      -- Status: %02X
   20d50:	00000a0d                                ....

00020d54 <k.4571>:
   20d54:	428a2f98 71374491 b5c0fbcf e9b5dba5     ./.B.D7q........
   20d64:	3956c25b 59f111f1 923f82a4 ab1c5ed5     [.V9...Y..?..^..
   20d74:	d807aa98 12835b01 243185be 550c7dc3     .....[....1$.}.U
   20d84:	72be5d74 80deb1fe 9bdc06a7 c19bf174     t].r........t...
   20d94:	e49b69c1 efbe4786 0fc19dc6 240ca1cc     .i...G.........$
   20da4:	2de92c6f 4a7484aa 5cb0a9dc 76f988da     o,.-..tJ...\...v
   20db4:	983e5152 a831c66d b00327c8 bf597fc7     RQ>.m.1..'....Y.
   20dc4:	c6e00bf3 d5a79147 06ca6351 14292967     ....G...Qc..g)).
   20dd4:	27b70a85 2e1b2138 4d2c6dfc 53380d13     ...'8!...m,M..8S
   20de4:	650a7354 766a0abb 81c2c92e 92722c85     Ts.e..jv.....,r.
   20df4:	a2bfe8a1 a81a664b c24b8b70 c76c51a3     ....Kf..p.K..Ql.
   20e04:	d192e819 d6990624 f40e3585 106aa070     ....$....5..p.j.
   20e14:	19a4c116 1e376c08 2748774c 34b0bcb5     .....l7.LwH'...4
   20e24:	391c0cb3 4ed8aa4a 5b9cca4f 682e6ff3     ...9J..NO..[.o.h
   20e34:	748f82ee 78a5636f 84c87814 8cc70208     ...toc.x.x......
   20e44:	90befffa a4506ceb bef9a3f7 c67178f2     .....lP......xq.

00020e54 <hash_init.4603>:
   20e54:	6a09e667 bb67ae85 3c6ef372 a54ff53a     g..j..g.r.n<:.O.
   20e64:	510e527f 9b05688c 1f83d9ab 5be0cd19     .R.Q.h.........[
   20e74:	00011070 000110b4 000110b4 000110b4     p...............
   20e84:	000110b4 000110b4 00011110 00011126     ............&...
   20e94:	00011126 00011126 00011126 00011126     &...&...&...&...
   20ea4:	6b636170 73207465 20646e65 6f727265     packet send erro
   20eb4:	00000d72 6d6d6f63 20646e61 70736572     r...command resp
   20ec4:	65736e6f 72726520 000d726f 01600000     onse error....`.
   20ed4:	01100080 08000200 09000200 00050400     ................
   20ee4:	43331104 00011cb2 00011cc8 00011cde     ..3C............
   20ef4:	00011cf4 00011d0a 00011d20 00011f8c     ........ .......
   20f04:	00011fa2 00011fb8 00011fce 00011fe4     ................
   20f14:	00011ffa                                ....

00020f18 <g_jwt_header>:
   20f18:	6c61227b 223a2267 35325345 222c2236     {"alg":"ES256","
   20f28:	22707974 574a223a 007d2254 22732522     typ":"JWT"}."%s"
   20f38:	7325223a 00000022 22732522 0064253a     :"%s"..."%s":%d.
   20f48:	00012fd6 00012fd6 00012fd6 00012e64     ./.../.../..d...
   20f58:	00012fd6 00012f4e 00012fd6 00012fd6     ./..N/.../.../..
   20f68:	00012fd6 00012fd6 00012fd6 00012fd6     ./.../.../.../..
   20f78:	00012fd6 00012fc8 4354514d 00000000     ./.../..MQTC....
   20f88:	00000004 00000000 00000000 00000000     ................
   20f98:	0001003c 5754514d 00000000 00000000     <...MQTW........
	...
   20fd8:	5454514d 00000000 7349514d 00007064     MQTT....MQIsdp..
   20fe8:	0000302d 00005878 00000072 00783425     -0..xX..r...%4x.
   20ff8:	65757274 00000000 736c6166 00000065     true....false...
   21008:	6c6c756e 00000000 0000005b 0000000a     null....[.......
   21018:	0000002c 0000005d 0000007b 0000003a     ,...]...{...:...
   21028:	00000020 0000007d 00006425 00006625      ...}...%d..%f..
   21038:	00000022 0000225c 00005c5c 0000625c     "...\"..\\..\b..
   21048:	0000665c 00006e5c 0000725c 0000745c     \f..\n..\r..\t..
   21058:	20202020 00000000 00007325 00002f2a         ....%s..*/..
   21068:	00002a2f 00002f2f 00000077 00015244     /*..//..w...DR..
   21078:	00015314 00015314 00015314 00015314     .S...S...S...S..
   21088:	00015314 00015314 00015314 00015314     .S...S...S...S..
   21098:	00015314 00015314 00015314 00015314     .S...S...S...S..
   210a8:	00015254 00015314 00015314 00015314     TR...S...S...S..
   210b8:	00015314 00015314 00015314 00015314     .S...S...S...S..
   210c8:	00015314 00015314 00015314 00015314     .S...S...S...S..
   210d8:	00015314 00015314 00015314 00015314     .S...S...S...S..
   210e8:	00015314 00015314 00015314 00015314     .S...S...S...S..
   210f8:	00015314 00015314 00015314 00015314     .S...S...S...S..
   21108:	00015314 00015314 00015314 00015314     .S...S...S...S..
   21118:	00015314 00015314 00015314 00015314     .S...S...S...S..
   21128:	00015314 00015314 00015314 00015314     .S...S...S...S..
   21138:	00015314 00015314 00015314 00015314     .S...S...S...S..
   21148:	00015314 00015314 00015314 00015314     .S...S...S...S..
   21158:	00015314 0001524c 00015314 00015314     .S..LR...S...S..
   21168:	00015314 00015314 00015314 0001525c     .S...S...S..\R..
   21178:	00015314 00015314 00015314 00015264     .S...S...S..dR..
   21188:	00015314 00015314 00015314 00015314     .S...S...S...S..
   21198:	00015314 00015314 00015314 0001526c     .S...S...S..lR..
   211a8:	00015314 00015314 00015314 00015274     .S...S...S..tR..
   211b8:	00015314 0001527c 00015284 00015412     .S..|R...R...T..
   211c8:	00015442 00015442 00015442 00015442     BT..BT..BT..BT..
   211d8:	00015442 00015442 00015442 00015442     BT..BT..BT..BT..
   211e8:	00015442 00015442 0001542a 00015442     BT..BT..*T..BT..
   211f8:	00015442 0001542a 0001542a 0001542a     BT..*T..*T..*T..
   21208:	0001542a 0001542a 0001542a 0001542a     *T..*T..*T..*T..
   21218:	0001542a 0001542a 0001542a 00015442     *T..*T..*T..BT..
   21228:	00015442 00015442 00015442 00015442     BT..BT..BT..BT..
   21238:	00015442 00015442 00015442 00015442     BT..BT..BT..BT..
   21248:	00015442 00015442 00015442 00015442     BT..BT..BT..BT..
   21258:	00015442 00015442 00015442 00015442     BT..BT..BT..BT..
   21268:	00015442 00015442 00015442 00015442     BT..BT..BT..BT..
   21278:	00015442 00015442 00015442 00015442     BT..BT..BT..BT..
   21288:	00015442 00015442 00015442 00015442     BT..BT..BT..BT..
   21298:	00015442 00015442 00015442 00015442     BT..BT..BT..BT..
   212a8:	00015400 00015442 00015442 00015442     .T..BT..BT..BT..
   212b8:	00015442 00015442 00015442 00015442     BT..BT..BT..BT..
   212c8:	00015442 00015442 00015442 0001541e     BT..BT..BT...T..
   212d8:	00015442 00015442 00015442 00015442     BT..BT..BT..BT..
   212e8:	00015442 00015442 00015442 00015436     BT..BT..BT..6T..
   212f8:	00015442 00015442 00015442 00015442     BT..BT..BT..BT..
   21308:	00015442 0001541e 00015442 00015442     BT...T..BT..BT..
   21318:	00015442 00015442 00015442 00015442     BT..BT..BT..BT..
   21328:	000153ee 72617453 676e6974 61784520     .S..Starting Exa
   21338:	656c706d 0d2e2e2e 00000000 00000000     mple............
   21348:	434e4957 30303531 6843203a 49207069     WINC1500: Chip I
   21358:	30203a44 38302578 0a0d586c 00000000     D: 0x%08lX......
   21368:	434e4957 30303531 6946203a 61776d72     WINC1500: Firmwa
   21378:	56206572 69737265 203a6e6f 252e7525     re Version: %u.%
   21388:	75252e75 00000a0d 434e4957 30303531     u.%u....WINC1500
   21398:	6946203a 61776d72 4d206572 44206e69     : Firmware Min D
   213a8:	65766972 65562072 6f697372 25203a6e     river Version: %
   213b8:	75252e75 0d75252e 0000000a 434e4957     u.%u.%u.....WINC
   213c8:	30303531 7244203a 72657669 72655620     1500: Driver Ver
   213d8:	6e6f6973 6425203a 2e64252e 0a0d6425     sion: %d.%d.%d..
   213e8:	00000000 434e4957 30303531 46495720     ....WINC1500 WIF
   213f8:	43203a49 656e6e6f 64657463 206f7420     I: Connected to 
   21408:	20656874 49464957 63636120 20737365     the WIFI access 
   21418:	6e696f70 00000d74 434e4957 30303531     point...WINC1500
   21428:	46495720 44203a49 6f637369 63656e6e      WIFI: Disconnec
   21438:	20646574 6d6f7266 65687420 46495720     ted from the WIF
   21448:	63612049 73736563 696f7020 000d746e     I access point..
   21458:	434e4957 30303531 46495720 55203a49     WINC1500 WIFI: U
   21468:	6f6e6b6e 63206e77 656e6e6f 6f697463     nknown connectio
   21478:	7473206e 73757461 6425203a 00000a0d     n status: %d....
   21488:	434e4957 30303531 46495720 44203a49     WINC1500 WIFI: D
   21498:	63697665 50492065 64644120 73736572     evice IP Address
   214a8:	7525203a 2e75252e 252e7525 000a0d75     : %u.%u.%u.%u...
   214b8:	434e4957 30303531 46495720 44203a49     WINC1500 WIFI: D
   214c8:	63697665 69542065 203a656d 20202020     evice Time:     
   214d8:	30252020 252f6432 2f643230 64323025       %02d/%02d/%02d
   214e8:	32302520 30253a64 253a6432 0d643230      %02d:%02d:%02d.
   214f8:	0000000a 5f6d326d 69666977 696e695f     ....m2m_wifi_ini
   21508:	61662074 64656c69 0000000d 6c696146     t failed....Fail
   21518:	74206465 6572206f 65697274 57206576     ed to retrieve W
   21528:	20434e49 6d726966 65726177 72657620     INC firmware ver
   21538:	6e6f6973 0000000d 5f6d326d 5f6c7373     sion....m2m_ssl_
   21548:	74696e69 69616620 0d64656c 00000000     init failed.....
   21558:	5f6d326d 5f6c7373 5f746573 69746361     m2m_ssl_set_acti
   21568:	635f6576 65687069 69757372 20736574     ve_ciphersuites 
   21578:	6c696166 000d6465 6c696146 74206465     failed..Failed t
   21588:	6567206f 53532074 203a4449 0a0d6425     o get SSID: %d..
   21598:	00000000 72746552 676e6979 6e6f4320     ....Retrying Con
   215a8:	7463656e 0d6e6f69 00000000 49464957     nection.....WIFI
   215b8:	4154535f 495f4554 0054494e 49464957     _STATE_INIT.WIFI
   215c8:	4154535f 545f4554 495f534c 0054494e     _STATE_TLS_INIT.
   215d8:	49464957 4154535f 435f4554 454e4e4f     WIFI_STATE_CONNE
   215e8:	00005443 49464957 4154535f 575f4554     CT..WIFI_STATE_W
   215f8:	00544941 49464957 4154535f 525f4554     AIT.WIFI_STATE_R
   21608:	59444145 00000000 49464957 4154535f     EADY....WIFI_STA
   21618:	545f4554 4f454d49 00005455 49464957     TE_TIMEOUT..WIFI
   21628:	4154535f 455f4554 524f5252 00000000     _STATE_ERROR....
   21638:	2d6e6166 65657073 00000064 61727564     fan-speed...dura
   21648:	6e6f6974 00000000 2c64255b 2c5d6425     tion....[%d,%d],
	...
   21660:	6c696146 74206465 6567206f 6f742074     Failed to get to
   21670:	20636970 69727473 0000676e 7422207b     pic string..{ "t
   21680:	73656d69 706d6174 25203a22 22202c75     imestamp": %u, "
   21690:	706d6574 74617265 22657275 6425203a     temperature": %d
   216a0:	3230252e 22202c64 2d6e6166 65657073     .%02d, "fan-spee
   216b0:	203a2264 7d206425 00000000 6c627550     d": %d }....Publ
   216c0:	69687369 4d20676e 20545451 7373654d     ishing MQTT Mess
   216d0:	20656761 0a0d7325 00000000 6c696146     age %s......Fail
   216e0:	74206465 7570206f 73696c62 68742068     ed to publish th
   216f0:	514d2065 6d205454 61737365 203a6567     e MQTT message: 
   21700:	0a0d6425 00000000 65636572 64657669     %d......received
   21710:	6e6f6320 3a676966 2a2e2520 000a0d73      config: %.*s...
   21720:	4f44454c 0000006e 4f44454c 00006666     LEDOn...LEDOff..
   21730:	2d6e6166 65657073 616d2d64 00000070     fan-speed-map...
   21740:	7265766f 65646972 00000000 61647075     override....upda
   21750:	722d6574 00657461 4354514d 00000000     te-rate.MQTC....
   21760:	00000004 00000000 00000000 00000000     ................
   21770:	0001003c 5754514d 00000000 00000000     <...MQTW........
	...
   217b0:	6c696146 74206465 6f6c206f 74206461     Failed to load t
   217c0:	73206568 63736275 74706972 206e6f69     he subscription 
   217d0:	69706f74 616e2063 0000656d 73627573     topic name..subs
   217e0:	62697263 74206465 203a206f 0a0d7325     cribed to : %s..
   217f0:	00000000 5454514d 696c4320 20746e65     ....MQTT Client 
   21800:	6c696146 74206465 6f43206f 63656e6e     Failed to Connec
   21810:	25282074 0a0d2964 00000000 5454514d     t (%d)......MQTT
   21820:	62755320 69726373 6f697470 6146206e      Subscription Fa
   21830:	64656c69 64252820 000a0d29 45494c43     iled (%d)...CLIE
   21840:	535f544e 45544154 494e495f 00000054     NT_STATE_INIT...
   21850:	45494c43 535f544e 45544154 5445475f     CLIENT_STATE_GET
   21860:	4d49545f 00000045 45494c43 535f544e     _TIME...CLIENT_S
   21870:	45544154 4e4f435f 5443454e 00000000     TATE_CONNECT....
   21880:	45494c43 535f544e 45544154 4e55525f     CLIENT_STATE_RUN
   21890:	00000000 45494c43 535f544e 45544154     ....CLIENT_STATE
   218a0:	5252455f 0000524f                       _ERROR..

000218a8 <config_demo_ssid>:
   218a8:	4158453c 454c504d 4953535f 00003e44     <EXAMPLE_SSID>..

000218b8 <config_demo_pass>:
   218b8:	4158453c 454c504d 5341505f 00003e53     <EXAMPLE_PASS>..

000218c8 <config_gcp_host_name>:
   218c8:	7474716d 6f6f672e 61656c67 2e736970     mqtt.googleapis.
   218d8:	006d6f63                                com.

000218dc <config_gcp_project_id>:
   218dc:	7263696d 6968636f 70636770 3539652d     microchipgcp-e95
   218ec:	00003137                                71..

000218f0 <config_gcp_region_id>:
   218f0:	632d7375 72746e65 00316c61              us-central1.

000218fc <config_gcp_registry_id>:
   218fc:	7263696d 6968636f 50434770 00000000     microchipGCP....

0002190c <config_gcp_thing_id>:
   2190c:	44504347 63697665 00003165 6a6f7270     GCPDevice1..proj
   2191c:	73746365 2f73252f 61636f6c 6e6f6974     ects/%s/location
   2192c:	73252f73 6765722f 72747369 2f736569     s/%s/registries/
   2193c:	642f7325 63697665 252f7365 00000073     %s/devices/%s...
   2194c:	73756e75 00006465 00746169 00707865     unused..iat.exp.
   2195c:	00647561 7665642f 73656369 2f73252f     aud./devices/%s/
   2196c:	6e657665 00007374 7665642f 73656369     events../devices
   2197c:	2f73252f 666e6f63 00006769 00007325     /%s/config..%s..
   2198c:	2d2d2d2d 4745422d 50204e49 494c4255     -----BEGIN PUBLI
   2199c:	454b2043 2d2d2d59 0a0d2d2d 0a0d7325     C KEY-----..%s..
   219ac:	2d2d2d2d 444e452d 42555020 2043494c     -----END PUBLIC 
   219bc:	2d59454b 2d2d2d2d 00000a0d              KEY-----....

000219c8 <public_key_x509_header>:
   219c8:	13305930 862a0706 023dce48 2a080601     0Y0...*.H.=....*
   219d8:	3dce4886 03070103 00040042              .H.=....B...

000219e4 <VersionKit>:
   219e4:	00050001                                ....

000219e8 <VersionSha204>:
   219e8:	00000301                                ....

000219ec <VersionAes132>:
   219ec:	00000101                                ....

000219f0 <VersionEcc508>:
   219f0:	00000101                                ....

000219f4 <StringSha204>:
   219f4:	32414853 00203430                       SHA204 .

000219fc <StringAes132>:
   219fc:	31534541 00203233                       AES132 .

00021a04 <StringEcc508>:
   21a04:	31434345 00203830                       ECC108 .

00021a0c <StringKit>:
   21a0c:	38385441 30314b43 4b545331 00000020     AT88CK101STK ...
   21a1c:	6e6b6e75 5f6e776f 69766564 00006563     unknown_device..
   21a2c:	645f6f6e 63697665 00002065 20495053     no_device ..SPI 
   21a3c:	00000000 20495754 00000000 20495753     ....TWI ....SWI 
   21a4c:	00000000 00021a2c 00021a38 00021a40     ....,...8...@...
   21a5c:	00021a48 00018ec8 00018ee2 00018ee2     H...............
   21a6c:	00018ee2 00018ee2 00018ee2 00018ee2     ................
   21a7c:	00018e92 00018ea4 00018eb6 00018ee2     ................
   21a8c:	00018eb6 00018eb6 000191b0 00019114     ................
   21a9c:	0001913e 000191b0 000191b0 000191b0     >...............
   21aac:	000191b0 000191b0 000190ea 000191b0     ................
   21abc:	000191b0 000191b0 000191b0 000191b0     ................
   21acc:	000191b0 000191b0 000191b0 000190c0     ................
   21adc:	000191a2 000191b0 000191b0 00019096     ................
   21aec:	000190f8 000190dc 000191b0 000191b0     ................
   21afc:	000191b0 00019130 0001907a 000191b0     ....0...z.......
   21b0c:	000191b0 000191b0 00019186 000191b0     ................
   21b1c:	000191b0 000191b0 0001906c 000191b0     ........l.......
   21b2c:	000191b0 000191b0 0001905e 000191b0     ........^.......
   21b3c:	000191b0 000191b0 000191b0 000191b0     ................
   21b4c:	000191b0 000191b0 000190ce 000191b0     ................
   21b5c:	000191b0 000191b0 000191b0 000191b0     ................
   21b6c:	000191b0 000191b0 000191b0 000191b0     ................
   21b7c:	000191b0 000191b0 000191b0 000191b0     ................
   21b8c:	000191b0 000191b0 000190a4 00019178     ............x...
   21b9c:	000191b0 00019088 000191b0 00019194     ................
   21bac:	00019122 0001915c 0001964e 000197d8     "...\...N.......
   21bbc:	000197d8 000197d8 000197d8 000197d8     ................
   21bcc:	000197d8 000197d8 0001962e 000197d8     ................
   21bdc:	000197d8 000197d8 000197d8 000197d8     ................
   21bec:	000197d8 0001967c 000197d8 000197d8     ....|...........
   21bfc:	0001960e 0001958a 000197d8 000197d8     ................
   21c0c:	000195ee 0001a964 0001a946 0001a900     ....d...F.......
   21c1c:	0001a81e 0001a900 0001a938 0001a900     ........8.......
   21c2c:	0001a81e 0001a946 0001a946 0001a938     ....F...F...8...
   21c3c:	0001a81e 0001a816 0001a816 0001a816     ................
   21c4c:	0001ab7c 0001b1c4 0001b084 0001b084     |...............
   21c5c:	0001b080 0001b19c 0001b19c 0001b18e     ................
   21c6c:	0001b080 0001b19c 0001b18e 0001b19c     ................
   21c7c:	0001b080 0001b1a4 0001b1a4 0001b1a4     ................
   21c8c:	0001b3a8                                ....

00021c90 <__sf_fake_stderr>:
	...

00021cb0 <__sf_fake_stdin>:
	...

00021cd0 <__sf_fake_stdout>:
	...

00021cf0 <_global_impure_ptr>:
   21cf0:	20000230 4f500043 00584953 666e002e     0.. C.POSIX...nf
   21d00:	696e6900 61007974 0000006e              .inity.an...

00021d0c <fpi.6129>:
   21d0c:	00000035 fffffbce 000003cb 00000001     5...............
   21d1c:	00000000                                ....

00021d20 <fpinan.6165>:
   21d20:	00000034 fffffbce 000003cb 00000001     4...............
	...

00021d38 <tinytens>:
   21d38:	97d889bc 3c9cd2b2 d5a8a733 3949f623     .......<3...#.I9
   21d48:	44f4a73d 32a50ffd cf8c979d 255bba08     =..D...2......[%
   21d58:	64ac6f43 11680628                       Co.d(.h.

00021d60 <_ctype_>:
   21d60:	20202000 20202020 28282020 20282828     .         ((((( 
   21d70:	20202020 20202020 20202020 20202020                     
   21d80:	10108820 10101010 10101010 10101010      ...............
   21d90:	04040410 04040404 10040404 10101010     ................
   21da0:	41411010 41414141 01010101 01010101     ..AAAAAA........
   21db0:	01010101 01010101 01010101 10101010     ................
   21dc0:	42421010 42424242 02020202 02020202     ..BBBBBB........
   21dd0:	02020202 02020202 02020202 10101010     ................
   21de0:	00000020 00000000 00000000 00000000      ...............
	...

00021e68 <__mprec_bigtens>:
   21e68:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
   21e78:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
   21e88:	7f73bf3c 75154fdd                       <.s..O.u

00021e90 <__mprec_tens>:
   21e90:	00000000 3ff00000 00000000 40240000     .......?......$@
   21ea0:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
   21eb0:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
   21ec0:	00000000 412e8480 00000000 416312d0     .......A......cA
   21ed0:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
   21ee0:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
   21ef0:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
   21f00:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
   21f10:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
   21f20:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
   21f30:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
   21f40:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
   21f50:	79d99db4 44ea7843                       ...yCx.D

00021f58 <p05.6047>:
   21f58:	00000005 00000019 0000007d 2b302d23     ........}...#-0+
   21f68:	6c680020 6665004c 47464567 32313000      .hlL.efgEFG.012
   21f78:	36353433 41393837 45444342 31300046     3456789ABCDEF.01
   21f88:	35343332 39383736 64636261 00006665     23456789abcdef..
   21f98:	00021fb6 00021fb9 00021fbc 61462d41     ............A-Fa
   21fa8:	3938662d 33323130 37363534 2d2b005d     -f8901234567].+-
   21fb8:	00303000 00005878                       .00.xX..

00021fc0 <_init>:
   21fc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   21fc2:	46c0      	nop			; (mov r8, r8)
   21fc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
   21fc6:	bc08      	pop	{r3}
   21fc8:	469e      	mov	lr, r3
   21fca:	4770      	bx	lr

00021fcc <__init_array_start>:
   21fcc:	000000dd 	.word	0x000000dd

00021fd0 <_fini>:
   21fd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   21fd2:	46c0      	nop			; (mov r8, r8)
   21fd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
   21fd6:	bc08      	pop	{r3}
   21fd8:	469e      	mov	lr, r3
   21fda:	4770      	bx	lr

00021fdc <__fini_array_start>:
   21fdc:	000000b5 	.word	0x000000b5
